unint64_t destroy for SwipeActionsModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  unint64_t result;
  uint64_t v6;
  uint64_t vars8;

  v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  v4 = (void *)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);
  result = v4[3];
  if (result >= 0xFFFFFFFF)
  {
    result = swift_bridgeObjectRelease();
    if (v4[5])
    {
      swift_release();
      result = swift_release();
    }
    if (v4[8])
    {
      swift_release();
      result = swift_release();
      v6 = v4[10];
      if (v6)
      {
        if (v6 == 1) {
          return result;
        }
        result = swift_release();
      }
      if (v4[12])
      {
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for SwipeActionsModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v8 + 24) < 0xFFFFFFFFuLL)
  {
    long long v17 = *(_OWORD *)v8;
    long long v18 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 32) = v18;
    *(_OWORD *)unint64_t v7 = v17;
    long long v19 = *(_OWORD *)(v8 + 48);
    long long v20 = *(_OWORD *)(v8 + 64);
    long long v21 = *(_OWORD *)(v8 + 96);
    *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(v7 + 96) = v21;
    *(_OWORD *)(v7 + 48) = v19;
    *(_OWORD *)(v7 + 64) = v20;
    return a1;
  }
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(unsigned char *)(v7 + 1) = *(unsigned char *)(v8 + 1);
  uint64_t v9 = *(void *)(v8 + 8);
  *(_WORD *)(v7 + 16) = *(_WORD *)(v8 + 16);
  *(void *)(v7 + 8) = v9;
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  uint64_t v10 = *(void *)(v8 + 40);
  swift_bridgeObjectRetain();
  if (!v10)
  {
    long long v22 = *(_OWORD *)(v8 + 32);
    *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
    *(_OWORD *)(v7 + 32) = v22;
    if (*(void *)(v8 + 64)) {
      goto LABEL_4;
    }
LABEL_8:
    v14 = (_OWORD *)(v7 + 56);
    long long v15 = *(_OWORD *)(v8 + 56);
    long long v16 = *(_OWORD *)(v8 + 72);
    long long v23 = *(_OWORD *)(v8 + 88);
    *(void *)(v7 + 104) = *(void *)(v8 + 104);
    *(_OWORD *)(v7 + 88) = v23;
    goto LABEL_9;
  }
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(void *)(v7 + 40) = *(void *)(v8 + 40);
  *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
  swift_retain();
  swift_retain();
  if (!*(void *)(v8 + 64)) {
    goto LABEL_8;
  }
LABEL_4:
  *(void *)(v7 + 56) = *(void *)(v8 + 56);
  *(void *)(v7 + 64) = *(void *)(v8 + 64);
  v11 = (void *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 80);
  v13 = (long long *)(v8 + 72);
  swift_retain();
  swift_retain();
  if (v12 == 1)
  {
    v14 = (_OWORD *)(v7 + 72);
    long long v15 = *v13;
    long long v16 = *(_OWORD *)(v8 + 88);
    *(void *)(v7 + 104) = *(void *)(v8 + 104);
LABEL_9:
    _OWORD *v14 = v15;
    v14[1] = v16;
    return a1;
  }
  *(unsigned char *)(v7 + 72) = *(unsigned char *)v13;
  if (*v11)
  {
    uint64_t v24 = *(void *)(v8 + 88);
    *(void *)(v7 + 80) = *v11;
    *(void *)(v7 + 88) = v24;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 80) = *(_OWORD *)v11;
  }
  uint64_t v25 = *(void *)(v8 + 96);
  if (v25)
  {
    uint64_t v26 = *(void *)(v8 + 104);
    *(void *)(v7 + 96) = v25;
    *(void *)(v7 + 104) = v26;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
  }
  return a1;
}

uint64_t assignWithCopy for SwipeActionsModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v8 + 24);
  if (*(void *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 < 0xFFFFFFFF) {
      goto LABEL_18;
    }
    *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
    *(unsigned char *)(v7 + 1) = *(unsigned char *)(v8 + 1);
    uint64_t v14 = *(void *)(v8 + 8);
    *(_WORD *)(v7 + 16) = *(_WORD *)(v8 + 16);
    *(void *)(v7 + 8) = v14;
    *(void *)(v7 + 24) = *(void *)(v8 + 24);
    uint64_t v15 = *(void *)(v8 + 40);
    swift_bridgeObjectRetain();
    if (v15)
    {
      *(void *)(v7 + 32) = *(void *)(v8 + 32);
      *(void *)(v7 + 40) = *(void *)(v8 + 40);
      *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
      swift_retain();
      swift_retain();
      if (!*(void *)(v8 + 64)) {
        goto LABEL_22;
      }
    }
    else
    {
      long long v22 = *(_OWORD *)(v8 + 32);
      *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
      *(_OWORD *)(v7 + 32) = v22;
      if (!*(void *)(v8 + 64))
      {
LABEL_22:
        long long v23 = (_OWORD *)(v7 + 56);
        long long v24 = *(_OWORD *)(v8 + 56);
        long long v25 = *(_OWORD *)(v8 + 72);
        long long v26 = *(_OWORD *)(v8 + 88);
        *(void *)(v7 + 104) = *(void *)(v8 + 104);
        *(_OWORD *)(v7 + 88) = v26;
LABEL_33:
        *long long v23 = v24;
        v23[1] = v25;
        return a1;
      }
    }
LABEL_31:
    *(void *)(v7 + 56) = *(void *)(v8 + 56);
    *(void *)(v7 + 64) = *(void *)(v8 + 64);
    v39 = (uint64_t *)(v8 + 80);
    uint64_t v40 = *(void *)(v8 + 80);
    v41 = (unsigned char *)(v8 + 72);
    swift_retain();
    swift_retain();
    if (v40 != 1)
    {
      *(unsigned char *)(v7 + 72) = *v41;
      uint64_t v42 = *v39;
      if (!*v39)
      {
        *(_OWORD *)(v7 + 80) = *(_OWORD *)v39;
        goto LABEL_40;
      }
LABEL_35:
      uint64_t v43 = *(void *)(v8 + 88);
      *(void *)(v7 + 80) = v42;
      *(void *)(v7 + 88) = v43;
      swift_retain();
      goto LABEL_40;
    }
    long long v23 = (_OWORD *)(v7 + 72);
    long long v24 = *(_OWORD *)v41;
    long long v25 = *(_OWORD *)(v8 + 88);
    *(void *)(v7 + 104) = *(void *)(v8 + 104);
    goto LABEL_33;
  }
  if (v9 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    if (*(void *)(v7 + 40))
    {
      swift_release();
      swift_release();
    }
    if (!*(void *)(v7 + 64)) {
      goto LABEL_18;
    }
    swift_release();
    swift_release();
    uint64_t v16 = *(void *)(v7 + 80);
    if (!v16) {
      goto LABEL_16;
    }
    if (v16 != 1)
    {
      swift_release();
LABEL_16:
      if (*(void *)(v7 + 96)) {
        swift_release();
      }
    }
LABEL_18:
    long long v17 = *(_OWORD *)v8;
    long long v18 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 32) = v18;
    *(_OWORD *)unint64_t v7 = v17;
    long long v19 = *(_OWORD *)(v8 + 48);
    long long v20 = *(_OWORD *)(v8 + 64);
    long long v21 = *(_OWORD *)(v8 + 96);
    *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
    *(_OWORD *)(v7 + 96) = v21;
    *(_OWORD *)(v7 + 48) = v19;
    *(_OWORD *)(v7 + 64) = v20;
    return a1;
  }
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(unsigned char *)(v7 + 1) = *(unsigned char *)(v8 + 1);
  uint64_t v10 = *(void *)(v8 + 8);
  *(_WORD *)(v7 + 16) = *(_WORD *)(v8 + 16);
  *(void *)(v7 + 8) = v10;
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = (_OWORD *)(v7 + 32);
  uint64_t v12 = (_OWORD *)(v8 + 32);
  uint64_t v13 = *(void *)(v8 + 40);
  if (*(void *)(v7 + 40))
  {
    if (v13)
    {
      *(void *)(v7 + 32) = *(void *)(v8 + 32);
      swift_retain();
      swift_release();
      *(void *)(v7 + 40) = *(void *)(v8 + 40);
      swift_retain();
      swift_release();
      *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
    }
    else
    {
      _s7SwiftUI7BindingVySbGWOhTm_1(v7 + 32, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638], (uint64_t (*)(void))_s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0);
      char v27 = *(unsigned char *)(v8 + 48);
      _OWORD *v11 = *v12;
      *(unsigned char *)(v7 + 48) = v27;
    }
  }
  else if (v13)
  {
    *(void *)(v7 + 32) = *(void *)(v8 + 32);
    *(void *)(v7 + 40) = *(void *)(v8 + 40);
    *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v28 = *v12;
    *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
    _OWORD *v11 = v28;
  }
  v29 = (long long *)(v7 + 56);
  v30 = (long long *)(v8 + 56);
  uint64_t v31 = *(void *)(v8 + 64);
  if (!*(void *)(v7 + 64))
  {
    if (!v31)
    {
      long long v37 = *v30;
      long long v38 = *(_OWORD *)(v8 + 72);
      long long v51 = *(_OWORD *)(v8 + 88);
      *(void *)(v7 + 104) = *(void *)(v8 + 104);
      *(_OWORD *)(v7 + 88) = v51;
      goto LABEL_44;
    }
    goto LABEL_31;
  }
  if (v31)
  {
    *(void *)(v7 + 56) = *(void *)(v8 + 56);
    swift_retain();
    swift_release();
    *(void *)(v7 + 64) = *(void *)(v8 + 64);
    swift_retain();
    swift_release();
    v33 = (_OWORD *)(v7 + 80);
    uint64_t v32 = *(void *)(v7 + 80);
    v29 = (long long *)(v7 + 72);
    v35 = (uint64_t *)(v8 + 80);
    uint64_t v34 = *(void *)(v8 + 80);
    v36 = (long long *)(v8 + 72);
    if (v32 == 1)
    {
      if (v34 == 1)
      {
        long long v37 = *v36;
        long long v38 = *(_OWORD *)(v8 + 88);
        *(void *)(v7 + 104) = *(void *)(v8 + 104);
LABEL_44:
        long long *v29 = v37;
        v29[1] = v38;
        return a1;
      }
      *(unsigned char *)v29 = *(unsigned char *)v36;
      uint64_t v42 = *v35;
      if (!*v35)
      {
        _OWORD *v33 = *(_OWORD *)v35;
LABEL_40:
        uint64_t v49 = *(void *)(v8 + 96);
        if (!v49)
        {
          *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
          return a1;
        }
        goto LABEL_41;
      }
      goto LABEL_35;
    }
    if (v34 == 1)
    {
      outlined destroy of SwipeActionResultToken(v7 + 72);
      uint64_t v47 = *(void *)(v8 + 104);
      long long v48 = *(_OWORD *)(v8 + 88);
      long long *v29 = *v36;
      *(_OWORD *)(v7 + 88) = v48;
      *(void *)(v7 + 104) = v47;
      return a1;
    }
    *(unsigned char *)v29 = *(unsigned char *)v36;
    uint64_t v53 = *v35;
    if (v32)
    {
      if (v53)
      {
        uint64_t v54 = *(void *)(v8 + 88);
        *(void *)(v7 + 80) = v53;
        *(void *)(v7 + 88) = v54;
        swift_retain();
        swift_release();
        goto LABEL_55;
      }
      swift_release();
    }
    else if (v53)
    {
      uint64_t v55 = *(void *)(v8 + 88);
      *(void *)(v7 + 80) = v53;
      *(void *)(v7 + 88) = v55;
      swift_retain();
      goto LABEL_55;
    }
    _OWORD *v33 = *(_OWORD *)v35;
LABEL_55:
    uint64_t v49 = *(void *)(v8 + 96);
    if (*(void *)(v7 + 96))
    {
      if (v49)
      {
        uint64_t v56 = *(void *)(v8 + 104);
        *(void *)(v7 + 96) = v49;
        *(void *)(v7 + 104) = v56;
        swift_retain();
        swift_release();
        return a1;
      }
      swift_release();
    }
    else if (v49)
    {
LABEL_41:
      uint64_t v50 = *(void *)(v8 + 104);
      *(void *)(v7 + 96) = v49;
      *(void *)(v7 + 104) = v50;
      swift_retain();
      return a1;
    }
    *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
    return a1;
  }
  outlined destroy of Binding<SwipeActionResultToken?>(v7 + 56);
  long long v45 = *(_OWORD *)(v8 + 72);
  long long v44 = *(_OWORD *)(v8 + 88);
  long long v46 = *v30;
  *(void *)(v7 + 104) = *(void *)(v8 + 104);
  *(_OWORD *)(v7 + 72) = v45;
  *(_OWORD *)(v7 + 88) = v44;
  long long *v29 = v46;
  return a1;
}

uint64_t outlined destroy of SwipeActionResultToken(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Binding<SwipeActionResultToken?>(uint64_t a1)
{
  type metadata accessor for Binding<SwipeActionResultToken?>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SwipeActionResultToken?>, &lazy cache variable for type metadata for SwipeActionResultToken?, (uint64_t)&type metadata for SwipeActionResultToken, MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for SwipeActionsModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = v8[1];
  long long v9 = v8[2];
  *unint64_t v7 = *v8;
  v7[1] = v10;
  v7[2] = v9;
  long long v11 = v8[6];
  long long v13 = v8[3];
  long long v12 = v8[4];
  v7[5] = v8[5];
  v7[6] = v11;
  v7[3] = v13;
  v7[4] = v12;
  return a1;
}

uint64_t assignWithTake for SwipeActionsModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v8 + 24) >= 0xFFFFFFFFuLL)
    {
      *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
      *(unsigned char *)(v7 + 1) = *(unsigned char *)(v8 + 1);
      uint64_t v9 = *(void *)(v8 + 8);
      *(_WORD *)(v7 + 16) = *(_WORD *)(v8 + 16);
      *(void *)(v7 + 8) = v9;
      *(void *)(v7 + 24) = *(void *)(v8 + 24);
      swift_bridgeObjectRelease();
      long long v10 = (_OWORD *)(v7 + 32);
      long long v11 = (_OWORD *)(v8 + 32);
      if (*(void *)(v7 + 40))
      {
        if (*(void *)(v8 + 40))
        {
          *(void *)(v7 + 32) = *(void *)(v8 + 32);
          swift_release();
          *(void *)(v7 + 40) = *(void *)(v8 + 40);
          swift_release();
          *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
        }
        else
        {
          _s7SwiftUI7BindingVySbGWOhTm_1(v7 + 32, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638], (uint64_t (*)(void))_s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0);
          char v20 = *(unsigned char *)(v8 + 48);
          *long long v10 = *v11;
          *(unsigned char *)(v7 + 48) = v20;
        }
      }
      else
      {
        long long v19 = *v11;
        *(unsigned char *)(v7 + 48) = *(unsigned char *)(v8 + 48);
        *long long v10 = v19;
      }
      long long v21 = (long long *)(v7 + 56);
      long long v22 = (long long *)(v8 + 56);
      if (!*(void *)(v7 + 64))
      {
        long long v25 = *v22;
        long long v26 = *(_OWORD *)(v8 + 72);
        long long v27 = *(_OWORD *)(v8 + 88);
        *(void *)(v7 + 104) = *(void *)(v8 + 104);
        *(_OWORD *)(v7 + 88) = v27;
        goto LABEL_23;
      }
      if (!*(void *)(v8 + 64))
      {
        outlined destroy of Binding<SwipeActionResultToken?>(v7 + 56);
        long long v29 = *(_OWORD *)(v8 + 72);
        long long v28 = *(_OWORD *)(v8 + 88);
        long long v30 = *v22;
        *(void *)(v7 + 104) = *(void *)(v8 + 104);
        *(_OWORD *)(v7 + 72) = v29;
        *(_OWORD *)(v7 + 88) = v28;
        *long long v21 = v30;
        return a1;
      }
      *(void *)(v7 + 56) = *(void *)(v8 + 56);
      swift_release();
      *(void *)(v7 + 64) = *(void *)(v8 + 64);
      swift_release();
      uint64_t v23 = *(void *)(v7 + 80);
      long long v21 = (long long *)(v7 + 72);
      long long v24 = (long long *)(v8 + 72);
      if (v23 == 1)
      {
        long long v25 = *v24;
        long long v26 = *(_OWORD *)(v8 + 88);
        *(void *)(v7 + 104) = *(void *)(v8 + 104);
LABEL_23:
        *long long v21 = v25;
        v21[1] = v26;
        return a1;
      }
      uint64_t v31 = (uint64_t *)(v8 + 80);
      if (*(void *)(v8 + 80) == 1)
      {
        outlined destroy of SwipeActionResultToken(v7 + 72);
        uint64_t v32 = *(void *)(v8 + 104);
        long long v33 = *(_OWORD *)(v8 + 88);
        *long long v21 = *v24;
        *(_OWORD *)(v7 + 88) = v33;
        *(void *)(v7 + 104) = v32;
        return a1;
      }
      *(unsigned char *)long long v21 = *(unsigned char *)v24;
      uint64_t v34 = *v31;
      if (v23)
      {
        if (v34)
        {
          uint64_t v35 = *(void *)(v8 + 88);
          *(void *)(v7 + 80) = v34;
          *(void *)(v7 + 88) = v35;
          swift_release();
          goto LABEL_34;
        }
        swift_release();
      }
      else if (v34)
      {
        uint64_t v36 = *(void *)(v8 + 88);
        *(void *)(v7 + 80) = v34;
        *(void *)(v7 + 88) = v36;
        goto LABEL_34;
      }
      *(_OWORD *)(v7 + 80) = *(_OWORD *)v31;
LABEL_34:
      uint64_t v37 = *(void *)(v8 + 96);
      if (*(void *)(v7 + 96))
      {
        if (v37)
        {
          uint64_t v38 = *(void *)(v8 + 104);
          *(void *)(v7 + 96) = v37;
          *(void *)(v7 + 104) = v38;
          swift_release();
          return a1;
        }
        swift_release();
      }
      else if (v37)
      {
        uint64_t v39 = *(void *)(v8 + 104);
        *(void *)(v7 + 96) = v37;
        *(void *)(v7 + 104) = v39;
        return a1;
      }
      *(_OWORD *)(v7 + 96) = *(_OWORD *)(v8 + 96);
      return a1;
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v7 + 40))
    {
      swift_release();
      swift_release();
    }
    if (*(void *)(v7 + 64))
    {
      swift_release();
      swift_release();
      uint64_t v12 = *(void *)(v7 + 80);
      if (!v12) {
        goto LABEL_12;
      }
      if (v12 != 1)
      {
        swift_release();
LABEL_12:
        if (*(void *)(v7 + 96)) {
          swift_release();
        }
      }
    }
  }
  long long v13 = *(_OWORD *)v8;
  long long v14 = *(_OWORD *)(v8 + 32);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
  *(_OWORD *)(v7 + 32) = v14;
  *(_OWORD *)unint64_t v7 = v13;
  long long v15 = *(_OWORD *)(v8 + 48);
  long long v16 = *(_OWORD *)(v8 + 64);
  long long v17 = *(_OWORD *)(v8 + 96);
  *(_OWORD *)(v7 + 80) = *(_OWORD *)(v8 + 80);
  *(_OWORD *)(v7 + 96) = v17;
  *(_OWORD *)(v7 + 48) = v15;
  *(_OWORD *)(v7 + 64) = v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for SwipeActionsModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 112;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187F1DB38);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for SwipeActionsModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 112;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF90) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF90) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFF90)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 112);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return result;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return result;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return result;
      default:
        return result;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187F1DD48);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if (a2 > 0x7FFFFFFE)
          {
            double result = 0.0;
            *(_OWORD *)(v19 + 80) = 0u;
            *(_OWORD *)(v19 + 96) = 0u;
            *(_OWORD *)(v19 + 48) = 0u;
            *(_OWORD *)(v19 + 64) = 0u;
            *(_OWORD *)(v19 + 16) = 0u;
            *(_OWORD *)(v19 + 32) = 0u;
            *(_OWORD *)unint64_t v19 = 0u;
            *(_DWORD *)unint64_t v19 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *(void *)(v19 + 24) = a2;
          }
        }
        else
        {
          long long v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return result;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in SwipeActionsModifier<A>()
{
  return &protocol witness table for SwipeActionsModifier<A>;
}

id UIContextualAction.init(_:performDestructiveAction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for PlatformItemList.Item();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  int v12 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = *(void *)(a1 + 328);
  if (v13 >> 2 == 0xFFFFFFFF || v13 >> 62 != 3) {
    goto LABEL_5;
  }
  uint64_t v16 = *(void *)(a1 + 296);
  int64x2_t v18 = *(int64x2_t *)(a1 + 336);
  int64x2_t v17 = *(int64x2_t *)(a1 + 352);
  v11.i64[0] = *(void *)(a1 + 320);
  int8x16_t v19 = vextq_s8((int8x16_t)v18, (int8x16_t)v17, 8uLL);
  v17.i64[0] = vdupq_laneq_s64(v17, 1).u64[0];
  v17.i64[1] = *(void *)(a1 + 368);
  int8x16_t v20 = vorrq_s8(vorrq_s8(*(int8x16_t *)(a1 + 304), v19), vorrq_s8((int8x16_t)vzip1q_s64(v11, v18), (int8x16_t)v17));
  uint64_t v21 = *(void *)&vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)) | *(void *)(a1 + 376) | *(void *)(a1 + 384) | *(void *)(a1 + 392);
  if (v13 == 0xC000000000000000 && v16 == 6 && !v21) {
    goto LABEL_12;
  }
  if (v13 == 0xC000000000000000 && v16 == 7 && !v21)
  {
LABEL_12:
    uint64_t v80 = v10;
    uint64_t v22 = swift_allocObject();
    _s7SwiftUI16PlatformItemListV0D0VSgMaTm_0(0, &lazy cache variable for type metadata for MutableBox<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F3F398]);
    uint64_t v23 = swift_allocObject();
    BOOL v24 = 0;
    *(void *)(v23 + 16) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    *(void *)(v23 + 24) = 0;
    uint64_t v82 = v22;
    *(void *)(v22 + 16) = v23;
    if ((*(unsigned char *)(a1 + 521) & 1) == 0) {
      BOOL v24 = *(unsigned __int8 *)(a1 + 520) == 1;
    }
    uint64_t v83 = a3;
    id v84 = (id)v24;
    if (*(void *)a1)
    {
      id v25 = objc_msgSend(*(id *)a1, sel_string);
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v28 = v27;

      long long v29 = (void *)MEMORY[0x18C115780](v26, v28);
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v29 = 0;
    }
    uint64_t v81 = v3;
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    _s7SwiftUI16PlatformItemListV0D0VWOcTm_2(a1, (uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    unint64_t v31 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    unint64_t v32 = (v9 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v33 = swift_allocObject();
    outlined init with take of PlatformItemList.Item((uint64_t)v12, v33 + v31);
    uint64_t v34 = (void *)(v33 + v32);
    uint64_t v35 = v83;
    *uint64_t v34 = a2;
    v34[1] = v35;
    uint64_t v36 = v82;
    *(void *)(v33 + ((v32 + 23) & 0xFFFFFFFFFFFFFFF8)) = v82;
    v89 = partial apply for closure #2 in UIContextualAction.init(_:performDestructiveAction:);
    uint64_t v90 = v33;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v86 = 1107296256;
    v87 = thunk for @escaping @callee_guaranteed (@guaranteed UIContextualAction, @guaranteed UIView, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ();
    v88 = &block_descriptor_59;
    uint64_t v37 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    id v38 = objc_msgSend(ObjCClassFromMetadata, sel_contextualActionWithStyle_title_handler_, v84, v29, v37);
    _Block_release(v37);

    id v39 = v38;
    uint64_t v40 = (void *)PlatformItemList.Item.image.getter();
    id v84 = v39;
    objc_msgSend(v39, sel_setImage_, v40);

    unint64_t v41 = *(void *)(a1 + 328);
    if (v41 >> 62 == 3
      && (v41 & 0xFFFFFFFFFFFFFFFCLL) != 0x3FFFFFFFCLL
      && v41 == 0xC000000000000000
      && *(void *)(a1 + 296) == 7)
    {
      uint64_t v43 = *(void *)(a1 + 304);
      uint64_t v42 = *(void *)(a1 + 312);
      uint64_t v44 = *(void *)(a1 + 320);
      if (!(v42 | v43 | v44))
      {
        uint64_t v45 = *(void *)(a1 + 344);
        uint64_t v46 = *(void *)(a1 + 352);
        uint64_t v47 = *(void *)(a1 + 360);
        uint64_t v48 = *(void *)(a1 + 368);
        uint64_t v49 = *(void *)(a1 + 376);
        uint64_t v51 = *(void *)(a1 + 384);
        uint64_t v50 = *(void *)(a1 + 392);
        if (!(v45 | *(void *)(a1 + 336) | v46 | v47 | v48 | v49 | v51 | v50))
        {
          uint64_t v75 = *(void *)(a1 + 336);
          uint64_t v76 = v45;
          uint64_t v77 = v46;
          uint64_t v78 = v44;
          uint64_t v52 = *(void *)(v36 + 16);
          uint64_t v53 = *(void *)(a1 + 616);
          uint64_t v79 = v52;
          if (v53)
          {
            id v74 = v84;
            swift_retain();
            outlined copy of PlatformItemList.Item.SystemItem?((id)7, v43, v42, v78, 0xC000000000000000, v75, v76, v77, v47, v48, v49, v51, v50);
            uint64_t v54 = swift_bridgeObjectRetain();
            uint64_t v55 = v74;
            uint64_t v56 = specialized Sequence.compactMap<A>(_:)(v54, v52, v74);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_retain();
            outlined copy of PlatformItemList.Item.SystemItem?((id)7, v43, v42, v78, 0xC000000000000000, v75, v76, v77, v47, v48, v49, v51, v50);
            uint64_t v56 = (void *)MEMORY[0x1E4FBC860];
          }
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
          v57 = (uint64_t (*)(uint64_t, uint64_t, void (*)(uint64_t), uint64_t))MEMORY[0x1E4FBC860];
          uint64_t v93 = MEMORY[0x1E4FBC860];
          unint64_t v58 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
          LOBYTE(aBlock) = 0;
          _s7SwiftUI16PlatformItemListV0D0VSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
          uint64_t v59 = type metadata accessor for MenuVisitor.MenuStackGroup();
          unint64_t v60 = (*(unsigned __int8 *)(*(void *)(v59 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v59 - 8) + 80);
          uint64_t v61 = swift_allocObject();
          *(_OWORD *)(v61 + 16) = xmmword_18834BB80;
          if (one-time initialization token for empty != -1) {
            swift_once();
          }
          uint64_t v62 = __swift_project_value_buffer(v59, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
          _s7SwiftUI16PlatformItemListV0D0VWOcTm_2(v62, v61 + v60, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
          char v63 = aBlock;
          uint64_t aBlock = 0;
          LOBYTE(v86) = 0;
          v87 = (void (*)(uint64_t, void *, void *, void *))MEMORY[0x1E4FBC868];
          v88 = (void *)v58;
          v89 = v57;
          uint64_t v90 = MEMORY[0x1E4FBC868];
          char v91 = v63;
          uint64_t v92 = v61;
          MenuVisitor.visit(_:uniqueNames:)((uint64_t)v56, &v93);
          swift_bridgeObjectRelease();
          UIMenuElementSize v64 = (UIMenuElementSize)v89;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v65._countAndFlagsBits = 0;
          v65._object = (void *)0xE000000000000000;
          v94.value.super.isa = 0;
          v94.is_nil = 0;
          UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v66, v65, (Swift::String_optional)0, v94, 0, 0xFFFFFFFFFFFFFFFFLL, v64, v73);
          v68 = v67;
          swift_release();
          objc_msgSend(v84, sel__setMenu_, v68);
        }
      }
    }
    id v69 = v84;
    if (*(void *)(a1 + *(int *)(v80 + 132)))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
      uint64_t v70 = swift_retain_n();
      id v71 = UIColor.init(_:)(v70);
      objc_msgSend(v69, sel_setBackgroundColor_, v71);
      swift_release();
    }
    id v15 = v69;
    specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(v15, (void *)a1);

    swift_release();
    outlined destroy of PlatformItemList.Item(a1);
    swift_release();
  }
  else
  {
LABEL_5:
    swift_release();
    outlined destroy of PlatformItemList.Item(a1);
    return 0;
  }
  return v15;
}

uint64_t closure #2 in UIContextualAction.init(_:performDestructiveAction:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t (*a6)(void (*)(uint64_t), uint64_t), uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void (**)(uint64_t))(a5 + 408);
  if ((unint64_t)v10 >= 2)
  {
    if ((*(unsigned char *)(a5 + 521) & 1) != 0 || *(unsigned char *)(a5 + 520) != 1)
    {
      uint64_t v16 = swift_retain();
      v10(v16);
      a3(1);
    }
    else
    {
      swift_retain();
      uint64_t v15 = a6(a3, a4);
      v10(v15);
    }
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v10);
  }
  else
  {
    uint64_t v11 = *(void *)(a8 + 16);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a3;
    *(void *)(v12 + 24) = a4;
    swift_beginAccess();
    *(void *)(v11 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
    *(void *)(v11 + 24) = v12;
    swift_retain();
    return swift_release();
  }
}

uint64_t closure #1 in closure #1 in UIContextualAction.transform(_:completionHolder:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 8);
  if (v3) {
    v3();
  }
  swift_beginAccess();
  uint64_t v4 = *(void (**)(char *))(a2 + 16);
  char v6 = 1;
  swift_retain();
  v4(&v6);
  return swift_release();
}

uint64_t partial apply for closure #2 in static SwipeActionsModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_16);
}

void type metadata accessor for Binding<SwipeActionResultToken?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SwipeActions.MakeValue and conformance SwipeActions.MakeValue()
{
  unint64_t result = lazy protocol witness table cache variable for type SwipeActions.MakeValue and conformance SwipeActions.MakeValue;
  if (!lazy protocol witness table cache variable for type SwipeActions.MakeValue and conformance SwipeActions.MakeValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActions.MakeValue and conformance SwipeActions.MakeValue);
  }
  return result;
}

uint64_t type metadata accessor for SwipeActionsModifier.WriteTrait()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #2 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static SwipeActionsModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for implicit closure #1 in static SwipeActionsModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static SwipeActionsModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type SwipeActions.MakeValueTransform and conformance SwipeActions.MakeValueTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type SwipeActions.MakeValueTransform and conformance SwipeActions.MakeValueTransform;
  if (!lazy protocol witness table cache variable for type SwipeActions.MakeValueTransform and conformance SwipeActions.MakeValueTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActions.MakeValueTransform and conformance SwipeActions.MakeValueTransform);
  }
  return result;
}

uint64_t sub_187F1E964()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187F1E99C()
{
  if (v0[5])
  {
    swift_bridgeObjectRelease();
    if (v0[7])
    {
      swift_release();
      swift_release();
    }
    if (v0[10])
    {
      swift_release();
      swift_release();
      uint64_t v1 = v0[12];
      if (v1)
      {
        if (v1 == 1) {
          goto LABEL_10;
        }
        swift_release();
      }
      if (v0[14]) {
        swift_release();
      }
    }
  }
LABEL_10:
  if (v0[19])
  {
    swift_bridgeObjectRelease();
    if (v0[21])
    {
      swift_release();
      swift_release();
    }
    if (v0[24])
    {
      swift_release();
      swift_release();
      uint64_t v2 = v0[26];
      if (v2)
      {
        if (v2 == 1) {
          goto LABEL_19;
        }
        swift_release();
      }
      if (v0[28]) {
        swift_release();
      }
    }
  }
LABEL_19:

  return swift_deallocObject();
}

double _s7SwiftUI12SwipeActionsO18MakeValueTransformV5valueyyAC0F0VzcvgyAHzcfU0_TA_0()
{
  return SwipeActions.Value.reduce(_:)((long long *)(v0 + 16));
}

void *specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  id v49 = a3;
  _s7SwiftUI16PlatformItemListV0D0VSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)&v44 - v8;
  uint64_t v10 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v44 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v48 = (uint64_t)&v44 - v18;
  uint64_t v19 = *(void *)(a1 + 16);
  if (!v19) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v20 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v44 = a1;
  unint64_t v45 = v20;
  uint64_t v21 = a1 + v20;
  uint64_t v22 = *(void *)(v17 + 72);
  uint64_t v59 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  unint64_t v60 = (void (**)(char *, void, uint64_t, uint64_t))(v17 + 56);
  swift_bridgeObjectRetain();
  uint64_t v23 = v21;
  BOOL v24 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v46 = v12;
  uint64_t v47 = v10;
  uint64_t v61 = v22;
  do
  {
    uint64_t v62 = v24;
    uint64_t v63 = v23;
    uint64_t v64 = v19;
    _s7SwiftUI16PlatformItemListV0D0VWOcTm_2(v23, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    uint64_t v25 = *((void *)v15 + 51);
    if (v25 != 1)
    {
      int v65 = v15[464];
      uint64_t v26 = *((void *)v15 + 57);
      uint64_t v56 = *((void *)v15 + 56);
      uint64_t v57 = v26;
      uint64_t v27 = *((void *)v15 + 55);
      uint64_t v54 = *((void *)v15 + 54);
      uint64_t v55 = v27;
      unint64_t v28 = *((void *)v15 + 50);
      uint64_t v58 = v4;
      unsigned int v50 = (v28 >> 8) & 1;
      uint64_t v53 = *((void *)v15 + 53);
      uint64_t v29 = *((void *)v15 + 52);
      unint64_t v51 = HIDWORD(v28);
      uint64_t v52 = v29;
      uint64_t v30 = swift_allocObject();
      *(unsigned char *)(v30 + 16) = v28 & 1;
      *(unsigned char *)(v30 + 17) = v50;
      uint64_t v4 = v58;
      *(unsigned char *)(v30 + 18) = BYTE2(v28) & 1;
      *(unsigned char *)(v30 + 19) = BYTE3(v28) & 1;
      uint64_t v10 = v47;
      uint64_t v31 = v52;
      *(unsigned char *)(v30 + 20) = v51;
      *(_WORD *)(v30 + 21) = v66;
      *(unsigned char *)(v30 + 23) = v67;
      *(void *)(v30 + 24) = v25;
      *(void *)(v30 + 32) = v31;
      uint64_t v32 = v53;
      uint64_t v33 = v54;
      *(void *)(v30 + 40) = v53;
      *(void *)(v30 + 48) = v33;
      uint64_t v34 = v55;
      uint64_t v35 = v56;
      *(void *)(v30 + 56) = v55;
      *(void *)(v30 + 64) = v35;
      *(void *)(v30 + 72) = v57;
      *(unsigned char *)(v30 + 80) = v65;
      *(void *)(v30 + 88) = a2;
      outlined copy of PlatformItemList.Item.SelectionBehavior?(v28, v25, v31, v32, v33, v34);
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v25);
      *((void *)v15 + 51) = partial apply for closure #1 in closure #1 in UIContextualAction.transform(_:completionHolder:);
      *((void *)v15 + 52) = v30;
      uint64_t v12 = v46;
    }
    if (*((void *)v15 + 77))
    {
      swift_retain();
      id v36 = v49;
      uint64_t v37 = swift_bridgeObjectRetain();
      uint64_t v38 = specialized Sequence.compactMap<A>(_:)(v37, a2, v36);
      swift_bridgeObjectRelease();
      swift_release();

      swift_bridgeObjectRelease();
      *((void *)v15 + 77) = v38;
    }
    uint64_t v39 = v61;
    BOOL v24 = v62;
    _s7SwiftUI16PlatformItemListV0D0VWOcTm_2((uint64_t)v15, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    (*v60)(v9, 0, 1, v10);
    outlined destroy of PlatformItemList.Item((uint64_t)v15);
    if ((*v59)(v9, 1, v10) == 1)
    {
      _s7SwiftUI7BindingVySbGWOhTm_1((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t)type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s7SwiftUI16PlatformItemListV0D0VSgMaTm_0);
    }
    else
    {
      uint64_t v40 = v48;
      outlined init with take of PlatformItemList.Item((uint64_t)v9, v48);
      outlined init with take of PlatformItemList.Item(v40, (uint64_t)v12);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v24 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
      }
      unint64_t v42 = v24[2];
      unint64_t v41 = v24[3];
      if (v42 >= v41 >> 1) {
        BOOL v24 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1, v24);
      }
      v24[2] = v42 + 1;
      uint64_t v39 = v61;
      outlined init with take of PlatformItemList.Item((uint64_t)v12, (uint64_t)v24 + v45 + v42 * v61);
    }
    uint64_t v23 = v63 + v39;
    uint64_t v19 = v64 - 1;
  }
  while (v64 != 1);
  swift_bridgeObjectRelease();
  return v24;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = a2;
  uint64_t v6 = type metadata accessor for PlatformItemList.Item();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v16 = MEMORY[0x1E4FBC860];
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v14[2] = v3;
    uint64_t v12 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIContextualAction);
    uint64_t v13 = *(void *)(v7 + 72);
    v14[1] = a1;
    swift_bridgeObjectRetain();
    do
    {
      _s7SwiftUI16PlatformItemListV0D0VWOcTm_2(v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      swift_retain();
      if (UIContextualAction.init(_:performDestructiveAction:)((uint64_t)v9, v15, a3))
      {
        MEMORY[0x18C115B40]();
        if (*(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v12 += v13;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    return v16;
  }
  return result;
}

uint64_t sub_187F1F17C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187F1F204()
{
  uint64_t v1 = type metadata accessor for PlatformItemList.Item();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));

  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = *(void *)(v2 + 184);
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
  if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v5 = *(unsigned __int8 *)(v2 + 72);
    if (v5 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(v2 + 64), v5);
      uint64_t v3 = *(void *)(v2 + 184);
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v4 != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(v2 + 168), *(void *)(v2 + 176), v3);
    }
    swift_unknownObjectRelease();
    swift_release();
  }
  if (*(void *)(v2 + 256))
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = *(void **)(v2 + 264);
    if ((unint64_t)v6 >= 2) {

    }
    swift_release();
    swift_release();
  }
  unint64_t v7 = *(void *)(v2 + 328);
  if (v7 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v2 + 296), *(void *)(v2 + 304), *(void *)(v2 + 312), *(void *)(v2 + 320), v7, *(void *)(v2 + 336), *(void *)(v2 + 344), *(void *)(v2 + 352), *(void *)(v2 + 360), *(void *)(v2 + 368), *(void *)(v2 + 376), *(void *)(v2 + 384), *(void *)(v2 + 392));
  }
  uint64_t v8 = *(void *)(v2 + 408);
  if (v8)
  {
    if (v8 == 1) {
      goto LABEL_20;
    }
    swift_release();
  }
  if (*(void *)(v2 + 424)) {
    swift_release();
  }
  if (*(void *)(v2 + 440)) {
    swift_release();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + 504)) {
    swift_release();
  }
  if (*(void *)(v2 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(void *)(v2 + 552) != 1)
  {
    swift_release();
    if (*(void *)(v2 + 560)) {
      swift_release();
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v2 + *(int *)(v1 + 112);
  uint64_t v10 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = v9 + *(int *)(v10 + 20);
    outlined consume of Text.Storage(*(void *)v11, *(void *)(v11 + 8), *(unsigned char *)(v11 + 16));
    swift_bridgeObjectRelease();
    uint64_t v12 = v11 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v13 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
    if (*(void *)(v9 + *(int *)(v10 + 24))) {
      swift_release();
    }
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIContextualAction.init(_:performDestructiveAction:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(uint64_t (**)(void (*)(uint64_t), uint64_t))(v4 + v11);
  uint64_t v13 = *(void *)(v4 + v11 + 8);
  uint64_t v14 = *(void *)(v4 + ((v11 + 23) & 0xFFFFFFFFFFFFFFF8));

  return closure #2 in UIContextualAction.init(_:performDestructiveAction:)(a1, a2, a3, a4, v4 + v10, v12, v13, v14);
}

uint64_t _s7SwiftUI7BindingVySbGWOhTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_187F1F694()
{
  if (v0[3]) {
    swift_release();
  }
  if (v0[5]) {
    swift_release();
  }
  if (v0[7]) {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in UIContextualAction.transform(_:completionHolder:)()
{
  return closure #1 in closure #1 in UIContextualAction.transform(_:completionHolder:)(v0 + 16, *(void *)(v0 + 88));
}

void outlined copy of PlatformItemList.Item.SelectionBehavior?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 != 1)
  {
    outlined copy of AppIntentExecutor?(a2);
    outlined copy of AppIntentExecutor?(a4);
    outlined copy of AppIntentExecutor?(a6);
  }
}

uint64_t outlined retain of SwipeActions.Value(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v15 = *(void *)(a1 + 120);
  uint64_t v16 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a1 + 136);
  uint64_t v6 = *(void *)(a1 + 144);
  uint64_t v7 = *(void *)(a1 + 152);
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v9 = *(void *)(a1 + 168);
  long long v13 = *(_OWORD *)(a1 + 192);
  long long v14 = *(_OWORD *)(a1 + 176);
  uint64_t v10 = *(void *)(a1 + 208);
  uint64_t v11 = *(void *)(a1 + 216);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104));
  a2(v16, v15, v4, v5, v6, v7, v8, v9, v14, *((void *)&v14 + 1), v13, *((void *)&v13 + 1), v10, v11);
  return a1;
}

ValueMetadata *type metadata accessor for SwipeActions.Feature()
{
  return &type metadata for SwipeActions.Feature;
}

ValueMetadata *type metadata accessor for SwipeActions.MakeValueTransform()
{
  return &type metadata for SwipeActions.MakeValueTransform;
}

ValueMetadata *type metadata accessor for SwipeActions.Key()
{
  return &type metadata for SwipeActions.Key;
}

ValueMetadata *type metadata accessor for SwipeActions.TraitKey()
{
  return &type metadata for SwipeActions.TraitKey;
}

ValueMetadata *type metadata accessor for SwipeActions.MakeValue()
{
  return &type metadata for SwipeActions.MakeValue;
}

uint64_t assignWithCopy for SwipeActions.Value(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (!v4)
    {
      long long v16 = *a2;
      long long v17 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v17;
      *(_OWORD *)a1 = v16;
      long long v18 = a2[3];
      long long v19 = a2[4];
      long long v20 = a2[6];
      *(_OWORD *)(a1 + 80) = a2[5];
      *(_OWORD *)(a1 + 96) = v20;
      *(_OWORD *)(a1 + 48) = v18;
      *(_OWORD *)(a1 + 64) = v19;
      goto LABEL_54;
    }
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(unsigned char *)(a1 + 1) = *((unsigned char *)a2 + 1);
    uint64_t v9 = *((void *)a2 + 1);
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    *(void *)(a1 + 8) = v9;
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    uint64_t v10 = *((void *)a2 + 5);
    swift_bridgeObjectRetain();
    if (v10)
    {
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      swift_retain();
      swift_retain();
      if (!*((void *)a2 + 8)) {
        goto LABEL_16;
      }
    }
    else
    {
      long long v22 = a2[2];
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(_OWORD *)(a1 + 32) = v22;
      if (!*((void *)a2 + 8))
      {
LABEL_16:
        uint64_t v23 = (_OWORD *)(a1 + 56);
        long long v24 = *(long long *)((char *)a2 + 56);
        long long v25 = *(long long *)((char *)a2 + 72);
        long long v26 = *(long long *)((char *)a2 + 88);
        *(void *)(a1 + 104) = *((void *)a2 + 13);
        *(_OWORD *)(a1 + 88) = v26;
        goto LABEL_26;
      }
    }
LABEL_24:
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    uint64_t v38 = (uint64_t *)(a2 + 5);
    uint64_t v39 = *((void *)a2 + 10);
    uint64_t v40 = (char *)a2 + 72;
    swift_retain();
    swift_retain();
    if (v39 != 1)
    {
      *(unsigned char *)(a1 + 72) = *v40;
      uint64_t v41 = *v38;
      if (!*v38)
      {
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v38;
LABEL_36:
        uint64_t v49 = *((void *)a2 + 12);
        if (v49)
        {
LABEL_37:
          uint64_t v50 = *((void *)a2 + 13);
          *(void *)(a1 + 96) = v49;
          *(void *)(a1 + 104) = v50;
          swift_retain();
          goto LABEL_54;
        }
        *(_OWORD *)(a1 + 96) = a2[6];
        goto LABEL_54;
      }
LABEL_35:
      uint64_t v48 = *((void *)a2 + 11);
      *(void *)(a1 + 80) = v41;
      *(void *)(a1 + 88) = v48;
      swift_retain();
      goto LABEL_36;
    }
    uint64_t v23 = (_OWORD *)(a1 + 72);
    long long v24 = *(_OWORD *)v40;
    long long v25 = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
LABEL_26:
    *uint64_t v23 = v24;
    v23[1] = v25;
    goto LABEL_54;
  }
  if (!v4)
  {
    outlined destroy of SwipeActions.Configuration((void *)a1);
    long long v12 = a2[1];
    long long v11 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v12;
    *(_OWORD *)(a1 + 32) = v11;
    long long v13 = a2[6];
    long long v15 = a2[3];
    long long v14 = a2[4];
    *(_OWORD *)(a1 + 80) = a2[5];
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 48) = v15;
    *(_OWORD *)(a1 + 64) = v14;
    goto LABEL_54;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *((unsigned char *)a2 + 1);
  uint64_t v5 = *((void *)a2 + 1);
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)(a1 + 32);
  uint64_t v7 = a2 + 2;
  uint64_t v8 = *((void *)a2 + 5);
  if (*(void *)(a1 + 40))
  {
    if (v8)
    {
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      swift_retain();
      swift_release();
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    }
    else
    {
      _s7SwiftUI7BindingVySbGWOhTm_1(a1 + 32, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638], (uint64_t (*)(void))_s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0);
      char v21 = *((unsigned char *)a2 + 48);
      *uint64_t v6 = *v7;
      *(unsigned char *)(a1 + 48) = v21;
    }
  }
  else if (v8)
  {
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v27 = *v7;
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    *uint64_t v6 = v27;
  }
  unint64_t v28 = (long long *)(a1 + 56);
  uint64_t v29 = (long long *)((char *)a2 + 56);
  uint64_t v30 = *((void *)a2 + 8);
  if (!*(void *)(a1 + 64))
  {
    if (!v30)
    {
      long long v36 = *v29;
      long long v37 = *(long long *)((char *)a2 + 72);
      long long v47 = *(long long *)((char *)a2 + 88);
      *(void *)(a1 + 104) = *((void *)a2 + 13);
      *(_OWORD *)(a1 + 88) = v47;
      goto LABEL_33;
    }
    goto LABEL_24;
  }
  if (!v30)
  {
    outlined destroy of Binding<SwipeActionResultToken?>(a1 + 56);
    long long v43 = *(long long *)((char *)a2 + 72);
    long long v42 = *(long long *)((char *)a2 + 88);
    long long v44 = *v29;
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(_OWORD *)(a1 + 72) = v43;
    *(_OWORD *)(a1 + 88) = v42;
    *unint64_t v28 = v44;
    goto LABEL_54;
  }
  *(void *)(a1 + 56) = *((void *)a2 + 7);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v32 = (_OWORD *)(a1 + 80);
  uint64_t v31 = *(void *)(a1 + 80);
  unint64_t v28 = (long long *)(a1 + 72);
  uint64_t v34 = (uint64_t *)(a2 + 5);
  uint64_t v33 = *((void *)a2 + 10);
  uint64_t v35 = (long long *)((char *)a2 + 72);
  if (v31 == 1)
  {
    if (v33 == 1)
    {
      long long v36 = *v35;
      long long v37 = *(long long *)((char *)a2 + 88);
      *(void *)(a1 + 104) = *((void *)a2 + 13);
LABEL_33:
      *unint64_t v28 = v36;
      v28[1] = v37;
      goto LABEL_54;
    }
    *(unsigned char *)unint64_t v28 = *(unsigned char *)v35;
    uint64_t v41 = *v34;
    if (!*v34)
    {
      *uint64_t v32 = *(_OWORD *)v34;
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v33 == 1)
  {
    outlined destroy of SwipeActionResultToken(a1 + 72);
    uint64_t v45 = *((void *)a2 + 13);
    long long v46 = *(long long *)((char *)a2 + 88);
    *unint64_t v28 = *v35;
    *(_OWORD *)(a1 + 88) = v46;
    *(void *)(a1 + 104) = v45;
    goto LABEL_54;
  }
  *(unsigned char *)unint64_t v28 = *(unsigned char *)v35;
  uint64_t v51 = *v34;
  if (!v31)
  {
    if (v51)
    {
      uint64_t v53 = *((void *)a2 + 11);
      *(void *)(a1 + 80) = v51;
      *(void *)(a1 + 88) = v53;
      swift_retain();
      goto LABEL_47;
    }
LABEL_46:
    *uint64_t v32 = *(_OWORD *)v34;
    goto LABEL_47;
  }
  if (!v51)
  {
    swift_release();
    goto LABEL_46;
  }
  uint64_t v52 = *((void *)a2 + 11);
  *(void *)(a1 + 80) = v51;
  *(void *)(a1 + 88) = v52;
  swift_retain();
  swift_release();
LABEL_47:
  uint64_t v49 = *((void *)a2 + 12);
  if (*(void *)(a1 + 96))
  {
    if (v49)
    {
      uint64_t v54 = *((void *)a2 + 13);
      *(void *)(a1 + 96) = v49;
      *(void *)(a1 + 104) = v54;
      swift_retain();
      swift_release();
      goto LABEL_54;
    }
    swift_release();
  }
  else if (v49)
  {
    goto LABEL_37;
  }
  *(_OWORD *)(a1 + 96) = a2[6];
LABEL_54:
  uint64_t v55 = (long long *)(a1 + 112);
  uint64_t v56 = a2 + 7;
  uint64_t v57 = *((void *)a2 + 17);
  if (!*(void *)(a1 + 136))
  {
    if (!v57)
    {
      long long v69 = *v56;
      long long v70 = a2[9];
      *(_OWORD *)(a1 + 128) = a2[8];
      *(_OWORD *)(a1 + 144) = v70;
      *uint64_t v55 = v69;
      long long v71 = a2[10];
      long long v72 = a2[11];
      long long v73 = a2[13];
      *(_OWORD *)(a1 + 192) = a2[12];
      *(_OWORD *)(a1 + 208) = v73;
      *(_OWORD *)(a1 + 160) = v71;
      *(_OWORD *)(a1 + 176) = v72;
      return a1;
    }
    *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
    *(unsigned char *)(a1 + 113) = *((unsigned char *)a2 + 113);
    uint64_t v62 = *((void *)a2 + 15);
    *(_WORD *)(a1 + 128) = *((_WORD *)a2 + 64);
    *(void *)(a1 + 120) = v62;
    *(void *)(a1 + 136) = *((void *)a2 + 17);
    uint64_t v63 = *((void *)a2 + 19);
    swift_bridgeObjectRetain();
    if (v63)
    {
      *(void *)(a1 + 144) = *((void *)a2 + 18);
      *(void *)(a1 + 152) = *((void *)a2 + 19);
      *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
      swift_retain();
      swift_retain();
      if (!*((void *)a2 + 22)) {
        goto LABEL_69;
      }
    }
    else
    {
      long long v75 = a2[9];
      *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
      *(_OWORD *)(a1 + 144) = v75;
      if (!*((void *)a2 + 22))
      {
LABEL_69:
        uint64_t v76 = (_OWORD *)(a1 + 168);
        long long v77 = *(long long *)((char *)a2 + 168);
        long long v78 = *(long long *)((char *)a2 + 184);
        long long v79 = *(long long *)((char *)a2 + 200);
        *(void *)(a1 + 216) = *((void *)a2 + 27);
        *(_OWORD *)(a1 + 200) = v79;
LABEL_79:
        *uint64_t v76 = v77;
        v76[1] = v78;
        return a1;
      }
    }
LABEL_77:
    *(void *)(a1 + 168) = *((void *)a2 + 21);
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    char v91 = (uint64_t *)(a2 + 12);
    uint64_t v92 = *((void *)a2 + 24);
    uint64_t v93 = (char *)a2 + 184;
    swift_retain();
    swift_retain();
    if (v92 != 1)
    {
      *(unsigned char *)(a1 + 184) = *v93;
      uint64_t v94 = *v91;
      if (!*v91)
      {
        *(_OWORD *)(a1 + 192) = *(_OWORD *)v91;
        goto LABEL_89;
      }
      goto LABEL_88;
    }
    uint64_t v76 = (_OWORD *)(a1 + 184);
    long long v77 = *(_OWORD *)v93;
    long long v78 = *(long long *)((char *)a2 + 200);
    *(void *)(a1 + 216) = *((void *)a2 + 27);
    goto LABEL_79;
  }
  if (!v57)
  {
    outlined destroy of SwipeActions.Configuration((void *)(a1 + 112));
    long long v65 = a2[8];
    long long v64 = a2[9];
    *uint64_t v55 = *v56;
    *(_OWORD *)(a1 + 128) = v65;
    *(_OWORD *)(a1 + 144) = v64;
    long long v66 = a2[13];
    long long v68 = a2[10];
    long long v67 = a2[11];
    *(_OWORD *)(a1 + 192) = a2[12];
    *(_OWORD *)(a1 + 208) = v66;
    *(_OWORD *)(a1 + 160) = v68;
    *(_OWORD *)(a1 + 176) = v67;
    return a1;
  }
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  *(unsigned char *)(a1 + 113) = *((unsigned char *)a2 + 113);
  uint64_t v58 = *((void *)a2 + 15);
  *(_WORD *)(a1 + 128) = *((_WORD *)a2 + 64);
  *(void *)(a1 + 120) = v58;
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v59 = (_OWORD *)(a1 + 144);
  unint64_t v60 = a2 + 9;
  uint64_t v61 = *((void *)a2 + 19);
  if (*(void *)(a1 + 152))
  {
    if (v61)
    {
      *(void *)(a1 + 144) = *((void *)a2 + 18);
      swift_retain();
      swift_release();
      *(void *)(a1 + 152) = *((void *)a2 + 19);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
    }
    else
    {
      _s7SwiftUI7BindingVySbGWOhTm_1(a1 + 144, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638], (uint64_t (*)(void))_s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0);
      char v74 = *((unsigned char *)a2 + 160);
      *uint64_t v59 = *v60;
      *(unsigned char *)(a1 + 160) = v74;
    }
  }
  else if (v61)
  {
    *(void *)(a1 + 144) = *((void *)a2 + 18);
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v80 = *v60;
    *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
    *uint64_t v59 = v80;
  }
  uint64_t v81 = (long long *)(a1 + 168);
  uint64_t v82 = (long long *)((char *)a2 + 168);
  uint64_t v83 = *((void *)a2 + 22);
  if (!*(void *)(a1 + 176))
  {
    if (!v83)
    {
      long long v89 = *v82;
      long long v90 = *(long long *)((char *)a2 + 184);
      long long v100 = *(long long *)((char *)a2 + 200);
      *(void *)(a1 + 216) = *((void *)a2 + 27);
      *(_OWORD *)(a1 + 200) = v100;
      goto LABEL_86;
    }
    goto LABEL_77;
  }
  if (v83)
  {
    *(void *)(a1 + 168) = *((void *)a2 + 21);
    swift_retain();
    swift_release();
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    swift_retain();
    swift_release();
    v85 = (_OWORD *)(a1 + 192);
    uint64_t v84 = *(void *)(a1 + 192);
    uint64_t v81 = (long long *)(a1 + 184);
    v87 = (uint64_t *)(a2 + 12);
    uint64_t v86 = *((void *)a2 + 24);
    v88 = (long long *)((char *)a2 + 184);
    if (v84 == 1)
    {
      if (v86 == 1)
      {
        long long v89 = *v88;
        long long v90 = *(long long *)((char *)a2 + 200);
        *(void *)(a1 + 216) = *((void *)a2 + 27);
LABEL_86:
        *uint64_t v81 = v89;
        v81[1] = v90;
        return a1;
      }
      *(unsigned char *)uint64_t v81 = *(unsigned char *)v88;
      uint64_t v94 = *v87;
      if (!*v87)
      {
        _OWORD *v85 = *(_OWORD *)v87;
LABEL_89:
        uint64_t v102 = *((void *)a2 + 26);
        if (!v102)
        {
          *(_OWORD *)(a1 + 208) = a2[13];
          return a1;
        }
        goto LABEL_90;
      }
LABEL_88:
      uint64_t v101 = *((void *)a2 + 25);
      *(void *)(a1 + 192) = v94;
      *(void *)(a1 + 200) = v101;
      swift_retain();
      goto LABEL_89;
    }
    if (v86 == 1)
    {
      outlined destroy of SwipeActionResultToken(a1 + 184);
      uint64_t v98 = *((void *)a2 + 27);
      long long v99 = *(long long *)((char *)a2 + 200);
      *uint64_t v81 = *v88;
      *(_OWORD *)(a1 + 200) = v99;
      *(void *)(a1 + 216) = v98;
      return a1;
    }
    *(unsigned char *)uint64_t v81 = *(unsigned char *)v88;
    uint64_t v104 = *v87;
    if (v84)
    {
      if (v104)
      {
        uint64_t v105 = *((void *)a2 + 25);
        *(void *)(a1 + 192) = v104;
        *(void *)(a1 + 200) = v105;
        swift_retain();
        swift_release();
        goto LABEL_100;
      }
      swift_release();
    }
    else if (v104)
    {
      uint64_t v106 = *((void *)a2 + 25);
      *(void *)(a1 + 192) = v104;
      *(void *)(a1 + 200) = v106;
      swift_retain();
      goto LABEL_100;
    }
    _OWORD *v85 = *(_OWORD *)v87;
LABEL_100:
    uint64_t v102 = *((void *)a2 + 26);
    if (*(void *)(a1 + 208))
    {
      if (v102)
      {
        uint64_t v107 = *((void *)a2 + 27);
        *(void *)(a1 + 208) = v102;
        *(void *)(a1 + 216) = v107;
        swift_retain();
        swift_release();
        return a1;
      }
      swift_release();
    }
    else if (v102)
    {
LABEL_90:
      uint64_t v103 = *((void *)a2 + 27);
      *(void *)(a1 + 208) = v102;
      *(void *)(a1 + 216) = v103;
      swift_retain();
      return a1;
    }
    *(_OWORD *)(a1 + 208) = a2[13];
    return a1;
  }
  outlined destroy of Binding<SwipeActionResultToken?>(a1 + 168);
  long long v96 = *(long long *)((char *)a2 + 184);
  long long v95 = *(long long *)((char *)a2 + 200);
  long long v97 = *v82;
  *(void *)(a1 + 216) = *((void *)a2 + 27);
  *(_OWORD *)(a1 + 184) = v96;
  *(_OWORD *)(a1 + 200) = v95;
  *uint64_t v81 = v97;
  return a1;
}

void *outlined destroy of SwipeActions.Configuration(void *a1)
{
  return a1;
}

uint64_t assignWithTake for SwipeActions.Value(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 24)) {
    goto LABEL_7;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4)
  {
    outlined destroy of SwipeActions.Configuration((void *)a1);
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    goto LABEL_18;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40))
  {
    if (*(void *)(a2 + 40))
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_release();
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_release();
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      goto LABEL_10;
    }
    _s7SwiftUI7BindingVySbGWOhTm_1(a1 + 32, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638], (uint64_t (*)(void))_s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
LABEL_10:
  if (!*(void *)(a1 + 64))
  {
LABEL_17:
    long long v13 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v13;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    goto LABEL_18;
  }
  if (!*(void *)(a2 + 64))
  {
    outlined destroy of Binding<SwipeActionResultToken?>(a1 + 56);
    goto LABEL_17;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = (_OWORD *)(a1 + 72);
  uint64_t v10 = *(void *)(a2 + 80);
  long long v11 = (_OWORD *)(a2 + 72);
  if (v8 == 1)
  {
LABEL_15:
    long long v12 = *(_OWORD *)(a2 + 88);
    *uint64_t v9 = *v11;
    *(_OWORD *)(a1 + 88) = v12;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    goto LABEL_18;
  }
  if (v10 == 1)
  {
    outlined destroy of SwipeActionResultToken(a1 + 72);
    goto LABEL_15;
  }
  *(unsigned char *)uint64_t v9 = *(unsigned char *)v11;
  if (v8)
  {
    if (v10)
    {
      uint64_t v25 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v10;
      *(void *)(a1 + 88) = v25;
      swift_release();
      goto LABEL_48;
    }
    swift_release();
  }
  else if (v10)
  {
    uint64_t v27 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v27;
    goto LABEL_48;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_48:
  uint64_t v29 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v29)
    {
      uint64_t v30 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v29;
      *(void *)(a1 + 104) = v30;
      swift_release();
      goto LABEL_18;
    }
    swift_release();
  }
  else if (v29)
  {
    uint64_t v31 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v29;
    *(void *)(a1 + 104) = v31;
    goto LABEL_18;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_18:
  if (*(void *)(a1 + 136))
  {
    uint64_t v14 = *(void *)(a2 + 136);
    if (v14)
    {
      *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
      *(unsigned char *)(a1 + 113) = *(unsigned char *)(a2 + 113);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
      *(void *)(a1 + 136) = v14;
      swift_bridgeObjectRelease();
      if (*(void *)(a1 + 152))
      {
        if (*(void *)(a2 + 152))
        {
          *(void *)(a1 + 144) = *(void *)(a2 + 144);
          swift_release();
          *(void *)(a1 + 152) = *(void *)(a2 + 152);
          swift_release();
          *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
          goto LABEL_27;
        }
        _s7SwiftUI7BindingVySbGWOhTm_1(a1 + 144, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638], (uint64_t (*)(void))_s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0);
      }
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
LABEL_27:
      if (*(void *)(a1 + 176))
      {
        if (*(void *)(a2 + 176))
        {
          *(void *)(a1 + 168) = *(void *)(a2 + 168);
          swift_release();
          *(void *)(a1 + 176) = *(void *)(a2 + 176);
          swift_release();
          uint64_t v18 = *(void *)(a1 + 192);
          long long v19 = (_OWORD *)(a1 + 184);
          uint64_t v20 = *(void *)(a2 + 192);
          char v21 = (_OWORD *)(a2 + 184);
          if (v18 == 1)
          {
LABEL_32:
            long long v22 = *(_OWORD *)(a2 + 200);
            *long long v19 = *v21;
            *(_OWORD *)(a1 + 200) = v22;
            *(void *)(a1 + 216) = *(void *)(a2 + 216);
            return a1;
          }
          if (v20 == 1)
          {
            outlined destroy of SwipeActionResultToken(a1 + 184);
            goto LABEL_32;
          }
          *(unsigned char *)long long v19 = *(unsigned char *)v21;
          if (v18)
          {
            if (v20)
            {
              uint64_t v26 = *(void *)(a2 + 200);
              *(void *)(a1 + 192) = v20;
              *(void *)(a1 + 200) = v26;
              swift_release();
              goto LABEL_55;
            }
            swift_release();
          }
          else if (v20)
          {
            uint64_t v28 = *(void *)(a2 + 200);
            *(void *)(a1 + 192) = v20;
            *(void *)(a1 + 200) = v28;
            goto LABEL_55;
          }
          *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
LABEL_55:
          uint64_t v32 = *(void *)(a2 + 208);
          if (*(void *)(a1 + 208))
          {
            if (v32)
            {
              uint64_t v33 = *(void *)(a2 + 216);
              *(void *)(a1 + 208) = v32;
              *(void *)(a1 + 216) = v33;
              swift_release();
              return a1;
            }
            swift_release();
          }
          else if (v32)
          {
            uint64_t v34 = *(void *)(a2 + 216);
            *(void *)(a1 + 208) = v32;
            *(void *)(a1 + 216) = v34;
            return a1;
          }
          *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
          return a1;
        }
        outlined destroy of Binding<SwipeActionResultToken?>(a1 + 168);
      }
      long long v23 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v23;
      *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      return a1;
    }
    outlined destroy of SwipeActions.Configuration((void *)(a1 + 112));
  }
  long long v15 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v15;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  long long v16 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v16;
  long long v17 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v17;
  return a1;
}

uint64_t getEnumTagSinglePayload for SwipeActions.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 224)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SwipeActions.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 224) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 224) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SwipeActionsUseTraitKeyInput()
{
  return &type metadata for SwipeActionsUseTraitKeyInput;
}

ValueMetadata *type metadata accessor for SwipeActions()
{
  return &type metadata for SwipeActions;
}

uint64_t destroy for SwipeActions.Configuration(void *a1)
{
  swift_bridgeObjectRelease();
  if (a1[5])
  {
    swift_release();
    swift_release();
  }
  uint64_t result = a1[8];
  if (result)
  {
    swift_release();
    uint64_t result = swift_release();
    uint64_t v3 = a1[10];
    if (v3)
    {
      if (v3 == 1) {
        return result;
      }
      uint64_t result = swift_release();
    }
    if (a1[12])
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t initializeWithCopy for SwipeActions.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v4)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v4;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    swift_retain();
    swift_retain();
    uint64_t v5 = *(void *)(a2 + 64);
    if (v5) {
      goto LABEL_3;
    }
LABEL_6:
    long long v9 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v9;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    return a1;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 64);
  if (!v5) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  long long v7 = (_OWORD *)(a2 + 72);
  swift_retain();
  swift_retain();
  if (v6 == 1)
  {
    long long v8 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *v7;
    *(_OWORD *)(a1 + 88) = v8;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
  }
  else
  {
    *(unsigned char *)(a1 + 72) = *(unsigned char *)v7;
    if (v6)
    {
      uint64_t v10 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v6;
      *(void *)(a1 + 88) = v10;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    }
    uint64_t v11 = *(void *)(a2 + 96);
    if (v11)
    {
      uint64_t v12 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v11;
      *(void *)(a1 + 104) = v12;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    }
  }
  return a1;
}

uint64_t assignWithCopy for SwipeActions.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (_OWORD *)(a1 + 32);
  uint64_t v6 = (_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v7)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_retain();
      swift_release();
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    }
    else
    {
      _s7SwiftUI7BindingVySbGWOhTm_1(a1 + 32, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638], (uint64_t (*)(void))_s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0);
      char v8 = *(unsigned char *)(a2 + 48);
      *uint64_t v5 = *v6;
      *(unsigned char *)(a1 + 48) = v8;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v9 = *v6;
    *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
    *uint64_t v5 = v9;
  }
  uint64_t v10 = (long long *)(a1 + 56);
  uint64_t v11 = (long long *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v12)
    {
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_retain();
      swift_release();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_retain();
      swift_release();
      uint64_t v14 = (_OWORD *)(a1 + 80);
      uint64_t v13 = *(void *)(a1 + 80);
      uint64_t v10 = (long long *)(a1 + 72);
      long long v16 = (uint64_t *)(a2 + 80);
      uint64_t v15 = *(void *)(a2 + 80);
      long long v17 = (long long *)(a2 + 72);
      if (v13 == 1)
      {
        if (v15 == 1)
        {
          long long v18 = *v17;
          long long v19 = *(_OWORD *)(a2 + 88);
          *(void *)(a1 + 104) = *(void *)(a2 + 104);
LABEL_20:
          v10[1] = v19;
LABEL_21:
          *uint64_t v10 = v18;
          return a1;
        }
        *(unsigned char *)uint64_t v10 = *(unsigned char *)v17;
        uint64_t v31 = *v16;
        if (!*v16)
        {
          _OWORD *v14 = *(_OWORD *)v16;
LABEL_30:
          uint64_t v35 = *(void *)(a2 + 96);
          if (!v35)
          {
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
            return a1;
          }
          goto LABEL_31;
        }
LABEL_25:
        uint64_t v32 = *(void *)(a2 + 88);
        *(void *)(a1 + 80) = v31;
        *(void *)(a1 + 88) = v32;
        swift_retain();
        goto LABEL_30;
      }
      if (v15 == 1)
      {
        outlined destroy of SwipeActionResultToken(a1 + 72);
        uint64_t v28 = *(void *)(a2 + 104);
        long long v29 = *(_OWORD *)(a2 + 88);
        *uint64_t v10 = *v17;
        *(_OWORD *)(a1 + 88) = v29;
        *(void *)(a1 + 104) = v28;
        return a1;
      }
      *(unsigned char *)uint64_t v10 = *(unsigned char *)v17;
      uint64_t v33 = *v16;
      if (v13)
      {
        if (v33)
        {
          uint64_t v34 = *(void *)(a2 + 88);
          *(void *)(a1 + 80) = v33;
          *(void *)(a1 + 88) = v34;
          swift_retain();
          swift_release();
          goto LABEL_37;
        }
        swift_release();
      }
      else if (v33)
      {
        uint64_t v37 = *(void *)(a2 + 88);
        *(void *)(a1 + 80) = v33;
        *(void *)(a1 + 88) = v37;
        swift_retain();
        goto LABEL_37;
      }
      _OWORD *v14 = *(_OWORD *)v16;
LABEL_37:
      uint64_t v10 = (long long *)(a1 + 96);
      uint64_t v35 = *(void *)(a2 + 96);
      if (*(void *)(a1 + 96))
      {
        if (v35)
        {
          uint64_t v38 = *(void *)(a2 + 104);
          *(void *)(a1 + 96) = v35;
          *(void *)(a1 + 104) = v38;
          swift_retain();
          swift_release();
          return a1;
        }
        swift_release();
      }
      else if (v35)
      {
LABEL_31:
        uint64_t v36 = *(void *)(a2 + 104);
        *(void *)(a1 + 96) = v35;
        *(void *)(a1 + 104) = v36;
        swift_retain();
        return a1;
      }
      long long v18 = *(_OWORD *)(a2 + 96);
      goto LABEL_21;
    }
    outlined destroy of Binding<SwipeActionResultToken?>(a1 + 56);
    long long v26 = *(_OWORD *)(a2 + 72);
    long long v25 = *(_OWORD *)(a2 + 88);
    long long v27 = *v11;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v26;
    *(_OWORD *)(a1 + 88) = v25;
    *uint64_t v10 = v27;
  }
  else
  {
    if (!v12)
    {
      long long v18 = *v11;
      long long v19 = *(_OWORD *)(a2 + 72);
      long long v30 = *(_OWORD *)(a2 + 88);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = v30;
      goto LABEL_20;
    }
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    uint64_t v20 = (uint64_t *)(a2 + 80);
    uint64_t v21 = *(void *)(a2 + 80);
    long long v22 = (unsigned char *)(a2 + 72);
    swift_retain();
    swift_retain();
    if (v21 != 1)
    {
      *(unsigned char *)(a1 + 72) = *v22;
      uint64_t v31 = *v20;
      if (!*v20)
      {
        *(_OWORD *)(a1 + 80) = *(_OWORD *)v20;
        goto LABEL_30;
      }
      goto LABEL_25;
    }
    long long v23 = *(_OWORD *)v22;
    long long v24 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v23;
    *(_OWORD *)(a1 + 88) = v24;
  }
  return a1;
}

uint64_t assignWithTake for SwipeActions.Configuration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40))
  {
    uint64_t v4 = *(void *)(a2 + 40);
    if (v4)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_release();
      *(void *)(a1 + 40) = v4;
      swift_release();
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      goto LABEL_6;
    }
    _s7SwiftUI7BindingVySbGWOhTm_1(a1 + 32, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638], (uint64_t (*)(void))_s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGMaTm_0);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
LABEL_6:
  if (!*(void *)(a1 + 64))
  {
LABEL_13:
    long long v11 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v11;
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    return a1;
  }
  uint64_t v5 = *(void *)(a2 + 64);
  if (!v5)
  {
    outlined destroy of Binding<SwipeActionResultToken?>(a1 + 56);
    goto LABEL_13;
  }
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = v5;
  swift_release();
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = (unsigned char *)(a1 + 72);
  uint64_t v8 = *(void *)(a2 + 80);
  long long v9 = (unsigned char *)(a2 + 72);
  if (v6 != 1)
  {
    if (v8 == 1)
    {
      outlined destroy of SwipeActionResultToken(a1 + 72);
      goto LABEL_11;
    }
    *uint64_t v7 = *v9;
    if (v6)
    {
      if (v8)
      {
        uint64_t v13 = *(void *)(a2 + 88);
        *(void *)(a1 + 80) = v8;
        *(void *)(a1 + 88) = v13;
        swift_release();
        goto LABEL_22;
      }
      swift_release();
    }
    else if (v8)
    {
      uint64_t v14 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v8;
      *(void *)(a1 + 88) = v14;
      goto LABEL_22;
    }
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_22:
    uint64_t v15 = *(void *)(a2 + 96);
    if (*(void *)(a1 + 96))
    {
      if (v15)
      {
        uint64_t v16 = *(void *)(a2 + 104);
        *(void *)(a1 + 96) = v15;
        *(void *)(a1 + 104) = v16;
        swift_release();
        return a1;
      }
      swift_release();
    }
    else if (v15)
    {
      uint64_t v17 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v15;
      *(void *)(a1 + 104) = v17;
      return a1;
    }
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    return a1;
  }
LABEL_11:
  long long v10 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 88) = v10;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  return a1;
}

ValueMetadata *type metadata accessor for SwipeActions.Configuration()
{
  return &type metadata for SwipeActions.Configuration;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SwipeActionsUseTraitKeyInput()
{
  return &protocol witness table for SwipeActionsUseTraitKeyInput;
}

uint64_t base witness table accessor for _AttributeBody in SwipeActionsModifier<A>.WriteTrait()
{
  return swift_getWitnessTable();
}

double specialized static ScrollViewSupport.addRubberBandingToResidue(_:range:)(double result, double a2)
{
  double v2 = fabs(a2);
  if (fabs(result) >= 2.22044605e-16 && v2 >= 2.22044605e-16)
  {
    if (result >= 0.0) {
      double v4 = 1.0;
    }
    else {
      double v4 = -1.0;
    }
    return v4 * ((-1.0 / (result / a2 * v4 * 0.55 + 1.0) + 1.0) * a2);
  }
  return result;
}

double specialized static ScrollViewSupport.removeRubberBandingFromResidue(_:range:)(double result, double a2)
{
  double v2 = fabs(a2);
  if (fabs(result) >= 2.22044605e-16 && v2 >= 2.22044605e-16 && result != a2)
  {
    double v5 = 1.0;
    if (result < 0.0) {
      double v5 = -1.0;
    }
    return v5 * ((-1.0 / (result / a2 * v5 + -1.0) + -1.0) / 0.55 * a2);
  }
  return result;
}

uint64_t outlined consume of NavigationLinkSelectionIdentifier?(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    swift_release();
    return outlined consume of Text.LineStyle?(a2, a3);
  }
  return result;
}

void PickerOption.body.getter()
{
}

uint64_t sub_187F211F4()
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v2, v1, v0);
}

uint64_t PickerOption.init<A>(value:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  v24[0] = a5;
  uint64_t v13 = *(void *)(a3 - 8);
  v14.n128_f64[0] = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(v17 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v18 + 16))(a7, a1, v17, v14);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(a7, 0, 1, a4);
  a2(v19);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, a4);
  uint64_t v20 = type metadata accessor for Optional();
  v24[5] = a6;
  uint64_t WitnessTable = swift_getWitnessTable();
  v24[1] = v20;
  v24[2] = a3;
  v24[3] = WitnessTable;
  v24[4] = v24[0];
  uint64_t v22 = type metadata accessor for PickerOption();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a7 + *(int *)(v22 + 52), v16, a3);
}

uint64_t PickerOption.init<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v25 = a6;
  uint64_t v26 = a5;
  uint64_t v10 = *(void *)(a4 - 8);
  v11.n128_f64[0] = MEMORY[0x1F4188790](a6);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(__n128))(v15 + 16))(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, a4);
  uint64_t v16 = Text.init<A>(_:)();
  uint64_t v18 = v17;
  char v20 = v19;
  uint64_t v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
  uint64_t v27 = a3;
  uint64_t v28 = MEMORY[0x1E4F41420];
  uint64_t v29 = v26;
  uint64_t v30 = MEMORY[0x1E4F41418];
  uint64_t result = type metadata accessor for PickerOption();
  uint64_t v24 = v25 + *(int *)(result + 52);
  *(void *)uint64_t v24 = v16;
  *(void *)(v24 + 8) = v18;
  *(unsigned char *)(v24 + 16) = v20 & 1;
  *(void *)(v24 + 24) = v22;
  return result;
}

uint64_t PickerOption.init<A, B>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v29 = a5;
  uint64_t v11 = *(void *)(a4 - 8);
  v12.n128_f64[0] = MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(uint64_t, __n128))(v16 + 16))(a6, v12);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v16 + 56))(a6, 0, 1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, a4);
  uint64_t v17 = Text.init<A>(_:)();
  uint64_t v19 = v18;
  char v21 = v20;
  uint64_t v28 = v22;
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a2, a3);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a4);
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v34 = v29;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v30 = v23;
  uint64_t v31 = MEMORY[0x1E4F41420];
  uint64_t v32 = WitnessTable;
  uint64_t v33 = MEMORY[0x1E4F41418];
  uint64_t result = type metadata accessor for PickerOption();
  uint64_t v26 = a6 + *(int *)(result + 52);
  *(void *)uint64_t v26 = v17;
  *(void *)(v26 + 8) = v19;
  *(unsigned char *)(v26 + 16) = v21 & 1;
  *(void *)(v26 + 24) = v28;
  return result;
}

uint64_t PickerOption.init<>(_:value:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a3, a1, a2);
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  uint64_t result = type metadata accessor for PickerOption();
  uint64_t v15 = a3 + *(int *)(result + 52);
  *(void *)uint64_t v15 = v7;
  *(void *)(v15 + 8) = v9;
  *(unsigned char *)(v15 + 16) = v11 & 1;
  *(void *)(v15 + 24) = v13;
  return result;
}

uint64_t PickerOption.init<A>(_:value:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a3, a1, a2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(a3, 0, 1, a2);
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v9 = v8;
  char v11 = v10;
  uint64_t v13 = v12;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  type metadata accessor for Optional();
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for PickerOption();
  uint64_t v15 = a3 + *(int *)(result + 52);
  *(void *)uint64_t v15 = v7;
  *(void *)(v15 + 8) = v9;
  *(unsigned char *)(v15 + 16) = v11 & 1;
  *(void *)(v15 + 24) = v13;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PickerOption<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in PickerOption<A, B>()
{
  return swift_getWitnessTable();
}

void storeEnumTagSinglePayload for PickerOption(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187F21E48);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t sub_187F21E70()
{
  return swift_getWitnessTable();
}

void View.dismissalConfirmationDialog<A>(_:shouldPresent:actions:)()
{
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.dismissalConfirmationDialog<A, B>(_:shouldPresent:actions:)()
{
}

void View.dismissalConfirmationDialog<A, B>(_:shouldPresent:actions:message:)()
{
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.dismissalConfirmationDialog<A, B, C>(_:shouldPresent:actions:message:)()
{
}

uint64_t sub_187F22094(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t sub_187F2209C(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void destroy for AccessibilityRotorEntryRange(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityRotorEntryRange(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AccessibilityRotorEntryRange(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AccessibilityRotorEntryRange(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AccessibilityRotorEntryRange(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of AccessibilityRotorEntryRange(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AccessibilityRotorEntryRange(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of AccessibilityRotorEntryRange(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityRotorEntryRange()
{
  return &type metadata for AccessibilityRotorEntryRange;
}

void AccessibilityRotorEntryRange.resolvePlatformRange(for:)(void *a1, void *a2, uint64_t a3, char a4)
{
  if (a4 == 2)
  {
    id v5 = a2;
    return;
  }
  swift_getObjectType();
  uint64_t v9 = PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter();
  uint64_t v32 = *((void *)v9 + 2);
  if (!v32)
  {
    outlined copy of AccessibilityRotorEntryRange(a2, a3, a4);
    id v22 = a1;
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange(a2, a3, a4);
LABEL_24:

    return;
  }
  outlined copy of AccessibilityRotorEntryRange(a2, a3, a4);
  uint64_t v29 = a1;
  a1;
  unint64_t v10 = 0;
  uint64_t v11 = (uint64_t *)(v9 + 40);
  unsigned int v12 = v9;
  uint64_t v30 = v9;
  uint64_t v31 = a3;
  while (1)
  {
    uint64_t v13 = *v11;
    if (!a4) {
      break;
    }
    uint64_t v14 = *(v11 - 1);
    type metadata accessor for Range<String.Index>();
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v15 = _NSRange.init<A, B>(_:in:)();
    uint64_t v17 = v16;
    if (v15 != NSNotFound.getter())
    {
      if (__OFADD__(v15, v17))
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      unsigned int v18 = (void *)MEMORY[0x18C115780](v14, v13);
      id v19 = objc_msgSend(v18, sel_length);

      if ((uint64_t)v19 >= v15 + v17)
      {
        id v20 = PlatformAccessibilityElementProtocol<>.accessibilityResolvedUITextRange(from:)(v15, v17);
        int v21 = v30;
        a3 = v31;
        goto LABEL_13;
      }
    }
    unsigned int v12 = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a3 = v31;
LABEL_6:
    ++v10;
    v11 += 2;
    if (v32 == v10) {
      goto LABEL_15;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v21 = v12;
  id v20 = PlatformAccessibilityElementProtocol<>.accessibilityResolvedUITextRange(from:)((uint64_t)a2, a3);
LABEL_13:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  unsigned int v12 = v21;
  if (!v20) {
    goto LABEL_6;
  }
  if (v32 == v10)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange(a2, a3, a4);
    a1 = v29;
    goto LABEL_24;
  }
  if (v10 >= *((void *)v21 + 2)) {
    goto LABEL_26;
  }
  uint64_t v23 = *v11;
  if (a4)
  {
    uint64_t v24 = *(v11 - 1);
    swift_bridgeObjectRetain();
    uint64_t v25 = specialized String.resolveNSRange(_:in:)((uint64_t)a2, a3, v24, v23);
    if (v27)
    {
      swift_bridgeObjectRelease();
      goto LABEL_27;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = (uint64_t)a2;
    uint64_t v26 = a3;
  }
  id v28 = PlatformAccessibilityElementProtocol<>.accessibilityResolvedUITextRange(from:)(v25, v26);
  a1 = v29;
  swift_bridgeObjectRelease();
  if (v28)
  {
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange(a2, a3, a4);
    goto LABEL_24;
  }
LABEL_27:
  __break(1u);
}

void AccessibilityNavigationRotorEntry.nsRange.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 80);
  if (v1 == 255) {
    return;
  }
  char v3 = *(void **)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  if (!*(unsigned char *)(v0 + 80)) {
    return;
  }
  uint64_t v4 = *(void **)(v0 + 120);
  swift_getObjectType();
  id v5 = PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter();
  uint64_t v6 = *((void *)v5 + 2);
  if (!v6)
  {
    outlined copy of AccessibilityRotorEntryRange?(v3, v2, v1);
    id v22 = v4;
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange?(v3, v2, v1);
LABEL_24:

    return;
  }
  outlined copy of AccessibilityRotorEntryRange?(v3, v2, v1);
  id v28 = v4;
  v4;
  uint64_t v29 = v2;
  unint64_t v7 = 0;
  char v8 = (uint64_t *)(v5 + 40);
  uint64_t v30 = v3;
  while (1)
  {
    uint64_t v11 = *v8;
    if (v1 == 2)
    {
      outlined copy of AccessibilityRotorEntryRange?(v3, v2, 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v3);
      char v10 = v9;
      outlined consume of AccessibilityRotorEntryRange?(v3, v2, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v10 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_6;
    }
    uint64_t v12 = v1;
    uint64_t v13 = *(v8 - 1);
    type metadata accessor for Range<String.Index>();
    lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
    lazy protocol witness table accessor for type String and conformance String();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v14 = _NSRange.init<A, B>(_:in:)();
    uint64_t v16 = v15;
    if (v14 != NSNotFound.getter()) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = v29;
    char v3 = v30;
    uint64_t v1 = v12;
LABEL_6:
    ++v7;
    v8 += 2;
    if (v6 == v7) {
      goto LABEL_13;
    }
  }
  BOOL v17 = __OFADD__(v14, v16);
  uint64_t v18 = v14 + v16;
  if (v17)
  {
    __break(1u);
    goto LABEL_26;
  }
  id v19 = (void *)MEMORY[0x18C115780](v13, v11);
  id v20 = objc_msgSend(v19, sel_length);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  BOOL v21 = (uint64_t)v20 < v18;
  uint64_t v2 = v29;
  char v3 = v30;
  uint64_t v1 = v12;
  if (v21) {
    goto LABEL_6;
  }
LABEL_12:
  if (v6 == v7)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange?(v3, v2, v1);
LABEL_23:
    uint64_t v4 = v28;
    goto LABEL_24;
  }
  if (v7 >= *((void *)v5 + 2))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v23 = *v8;
  if (v1 == 2)
  {
    outlined copy of AccessibilityRotorEntryRange?(v30, v2, 2);
    swift_bridgeObjectRetain();
    PlatformAccessibilityElementProtocol<>.accessibilityResolvedNSRange(from:)((uint64_t)v30);
    char v25 = v24;
    outlined consume of AccessibilityRotorEntryRange?(v30, v2, 2);
  }
  else
  {
    uint64_t v26 = *(v8 - 1);
    swift_bridgeObjectRetain();
    specialized String.resolveNSRange(_:in:)((uint64_t)v30, v2, v26, v23);
    char v25 = v27;
  }
  swift_bridgeObjectRelease();
  if ((v25 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityRotorEntryRange?(v30, v29, v1);
    goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

char *PlatformAccessibilityElementProtocol<>.stringsForResolvingRange.getter()
{
  id v1 = objc_msgSend(v0, sel_accessibilityLabel);
  if (v1)
  {
    uint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;

    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v8 = *((void *)v6 + 2);
    unint64_t v7 = *((void *)v6 + 3);
    if (v8 >= v7 >> 1) {
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1, v6);
    }
    *((void *)v6 + 2) = v8 + 1;
    char v9 = &v6[16 * v8];
    *((void *)v9 + 4) = v3;
    *((void *)v9 + 5) = v5;
  }
  else
  {
    uint64_t v6 = (char *)MEMORY[0x1E4FBC860];
  }
  id v10 = objc_msgSend(v0, sel_accessibilityValue);
  if (v10)
  {
    uint64_t v11 = v10;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    if (swift_dynamicCast())
    {
      uint64_t v12 = *((void *)v6 + 2);
      if (v12)
      {
        uint64_t v13 = v6 + 40;
        uint64_t v14 = *((void *)v6 + 2);
        while (1)
        {
          BOOL v15 = *(v13 - 1) == v20 && *v13 == v21;
          if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          v13 += 2;
          if (!--v14) {
            goto LABEL_16;
          }
        }
        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_16:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12 + 1, 1, v6);
        }
        unint64_t v17 = *((void *)v6 + 2);
        unint64_t v16 = *((void *)v6 + 3);
        if (v17 >= v16 >> 1) {
          uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v6);
        }
        *((void *)v6 + 2) = v17 + 1;
        uint64_t v18 = &v6[16 * v17];
        *((void *)v18 + 4) = v20;
        *((void *)v18 + 5) = v21;
      }
    }
  }
  return v6;
}

uint64_t specialized String.resolveNSRange(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Range<String.Index>();
  lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
  lazy protocol witness table accessor for type String and conformance String();
  swift_bridgeObjectRetain();
  uint64_t v6 = _NSRange.init<A, B>(_:in:)();
  uint64_t v8 = v7;
  uint64_t result = NSNotFound.getter();
  if (v6 == result) {
    return 0;
  }
  if (!__OFADD__(v6, v8))
  {
    id v10 = (void *)MEMORY[0x18C115780](a3, a4);
    id v11 = objc_msgSend(v10, sel_length, a3, a4, a1, a2);

    if ((uint64_t)v11 >= v6 + v8) {
      return v6;
    }
    return 0;
  }
  __break(1u);
  return result;
}

void type metadata accessor for Range<String.Index>()
{
  if (!lazy cache variable for type metadata for Range<String.Index>)
  {
    unint64_t v0 = type metadata accessor for Range();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>);
    }
  }
}

void Scene.menuBarExtraStyle<A>(_:)()
{
}

uint64_t dispatch thunk of MenuBarExtraStyle._makeMenuBarExtra(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t type metadata accessor for _MenuBarExtraValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187F22B7C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t static OnDeleteTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t DynamicViewContent.onDelete(perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(void *)(v8 + 24) = a2;
    char v9 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  }
  else
  {
    char v9 = 0;
    uint64_t v8 = 0;
  }
  v12[0] = v9;
  v12[1] = v8;
  outlined copy of AppIntentExecutor?(a1);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingModifier<OnDeleteTraitKey>);
  MEMORY[0x18C113660](v12, a3, v10, *(void *)(a4 + 8));
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v9);
}

uint64_t sub_187F22C74()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t static IsDeleteDisabledTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t View.deleteDisabled(_:)()
{
  return View._trait<A>(_:_:)();
}

ValueMetadata *type metadata accessor for OnDeleteTraitKey()
{
  return &type metadata for OnDeleteTraitKey;
}

uint64_t sub_187F22D08()
{
  return swift_getWitnessTable();
}

uint64_t sub_187F22DBC()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for OnDeleteDefaultTraitKey()
{
  return &type metadata for OnDeleteDefaultTraitKey;
}

Swift::Void __swiftcall DeleteInteraction.delete()()
{
  uint64_t v1 = type metadata accessor for DeleteInteraction();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v16 - v5;
  uint64_t v8 = (uint64_t *)(v0 + *(int *)(v7 + 24));
  uint64_t v9 = *v8;
  if (*v8)
  {
    uint64_t v10 = v8[1];
    outlined init with copy of DeleteInteraction(v0, (uint64_t)v16 - v5);
    unint64_t v11 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v9;
    *(void *)(v12 + 24) = v10;
    outlined init with take of DeleteInteraction((uint64_t)v6, v12 + v11);
    swift_retain_n();
    static Update.enqueueAction(_:)();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v9);
    swift_release();
  }
  else
  {
    outlined init with copy of DeleteInteraction(v0, v4);
    v16[0] = 0;
    v16[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(71);
    v13._countAndFlagsBits = 0xD000000000000023;
    v13._object = (void *)0x800000018833C320;
    String.append(_:)(v13);
    type metadata accessor for IndexSet();
    lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._object = (void *)0x800000018833C350;
    v15._countAndFlagsBits = 0xD000000000000022;
    String.append(_:)(v15);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for DeleteInteraction(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for IndexSet();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (uint64_t *)((char *)v4 + v11);
    Swift::String v13 = (uint64_t *)((char *)a2 + v11);
    if (*v13)
    {
      uint64_t v14 = v13[1];
      *uint64_t v12 = *v13;
      v12[1] = v14;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    }
  }
  return v4;
}

uint64_t destroy for DeleteInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for IndexSet();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  if (*(void *)(a1 + *(int *)(a2 + 24)))
  {
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for DeleteInteraction(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  if (*v12)
  {
    uint64_t v13 = v12[1];
    void *v11 = *v12;
    v11[1] = v13;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  }
  return a1;
}

void *assignWithCopy for DeleteInteraction(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = *(void *)((char *)a1 + v10);
  uint64_t v14 = *(void *)((char *)a2 + v10);
  if (!v13)
  {
    if (v14)
    {
      uint64_t v16 = *((void *)v12 + 1);
      void *v11 = v14;
      v11[1] = v16;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    return a1;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v15 = *((void *)v12 + 1);
  void *v11 = v14;
  v11[1] = v15;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for DeleteInteraction(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  if (*v12)
  {
    uint64_t v14 = v12[1];
    void *v11 = v13;
    v11[1] = v14;
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  }
  return a1;
}

void *assignWithTake for DeleteInteraction(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for IndexSet();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *(void *)((char *)a1 + v10);
  uint64_t v14 = *v12;
  if (!v13)
  {
    if (v14)
    {
      uint64_t v16 = v12[1];
      void *v11 = v14;
      v11[1] = v16;
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    return a1;
  }
  if (!v14)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v15 = v12[1];
  void *v11 = v14;
  v11[1] = v15;
  swift_release();
  return a1;
}

uint64_t sub_187F23594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexSet();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_187F23664(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IndexSet();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = a2;
  }
  return result;
}

uint64_t outlined init with copy of DeleteInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeleteInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187F23788()
{
  uint64_t v1 = (int *)(type metadata accessor for DeleteInteraction() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  swift_release();
  unint64_t v3 = v0 + v2 + v1[7];
  uint64_t v4 = type metadata accessor for IndexSet();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  if (*(void *)(v0 + v2 + v1[8])) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t outlined init with take of DeleteInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeleteInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in DeleteInteraction.delete()()
{
  uint64_t v1 = type metadata accessor for DeleteInteraction();
  return (*(uint64_t (**)(unint64_t))(v0 + 16))(v0+ *(int *)(v1 + 20)+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)));
}

double one-time initialization function for componentHorizontalPadding(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.componentHorizontalPadding);
}

double static ClarityUIMetrics.componentHorizontalPadding.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for componentHorizontalPadding, (uint64_t)&static ClarityUIMetrics.componentHorizontalPadding);
}

uint64_t one-time initialization function for componentCornerRadius()
{
  if (one-time initialization token for isPad != -1) {
    uint64_t result = swift_once();
  }
  double v0 = 12.0;
  if (static ClarityUIMetrics.isPad) {
    double v0 = 16.0;
  }
  static ClarityUIMetrics.componentCornerRadius = *(void *)&v0;
  return result;
}

double static ClarityUIMetrics.componentCornerRadius.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for componentCornerRadius, (uint64_t)&static ClarityUIMetrics.componentCornerRadius);
}

uint64_t one-time initialization function for minimumComponentHeight()
{
  if (one-time initialization token for isPad != -1) {
    uint64_t result = swift_once();
  }
  double v0 = 100.0;
  if (static ClarityUIMetrics.isPad) {
    double v0 = 108.0;
  }
  static ClarityUIMetrics.minimumComponentHeight = *(void *)&v0;
  return result;
}

double static ClarityUIMetrics.minimumComponentHeight.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for minimumComponentHeight, (uint64_t)&static ClarityUIMetrics.minimumComponentHeight);
}

double one-time initialization function for buttonVerticalPadding(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.buttonVerticalPadding);
}

double one-time initialization function for buttonHorizontalPadding(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.buttonHorizontalPadding);
}

void one-time initialization function for buttonShadowRadius()
{
  static ClarityUIMetrics.buttonShadowRadius = 0x4018000000000000;
}

double static ClarityUIMetrics.buttonShadowRadius.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for buttonShadowRadius, (uint64_t)&static ClarityUIMetrics.buttonShadowRadius);
}

double one-time initialization function for buttonShadowOffset()
{
  double result = 0.0;
  static ClarityUIMetrics.buttonShadowOffset = xmmword_1883B29F0;
  return result;
}

double static ClarityUIMetrics.buttonShadowOffset.getter()
{
  if (one-time initialization token for buttonShadowOffset != -1) {
    swift_once();
  }
  return *(double *)&static ClarityUIMetrics.buttonShadowOffset;
}

void one-time initialization function for buttonShadowSpread()
{
  static ClarityUIMetrics.buttonShadowSpread = 0xBFF0000000000000;
}

uint64_t one-time initialization function for fallbackDisplayCornerRadius()
{
  if (one-time initialization token for isPad != -1) {
    uint64_t result = swift_once();
  }
  double v0 = 40.0;
  if (static ClarityUIMetrics.isPad) {
    double v0 = 52.0;
  }
  static ClarityUIMetrics.fallbackDisplayCornerRadius = *(void *)&v0;
  return result;
}

double static ClarityUIMetrics.fallbackDisplayCornerRadius.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for fallbackDisplayCornerRadius, (uint64_t)&static ClarityUIMetrics.fallbackDisplayCornerRadius);
}

void one-time initialization function for minimumDisplayCornerRadius()
{
  static ClarityUIMetrics.minimumDisplayCornerRadius = 0x403E000000000000;
}

double static ClarityUIMetrics.minimumDisplayCornerRadius.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for minimumDisplayCornerRadius, (uint64_t)&static ClarityUIMetrics.minimumDisplayCornerRadius);
}

void one-time initialization function for dividerThickness()
{
  static ClarityUIMetrics.dividerThickness = 0x4010000000000000;
}

void one-time initialization function for adminModeBlurRadius()
{
  static ClarityUIMetrics.adminModeBlurRadius = 0x4020000000000000;
}

double static ClarityUIMetrics.adminModeBlurRadius.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for adminModeBlurRadius, (uint64_t)&static ClarityUIMetrics.adminModeBlurRadius);
}

uint64_t one-time initialization function for standardSpacing()
{
  if (one-time initialization token for isPad != -1) {
    uint64_t result = swift_once();
  }
  double v0 = 16.0;
  if (static ClarityUIMetrics.isPad) {
    double v0 = 20.0;
  }
  static ClarityUIMetrics.standardSpacing = *(void *)&v0;
  return result;
}

double static ClarityUIMetrics.standardSpacing.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for standardSpacing, (uint64_t)&static ClarityUIMetrics.standardSpacing);
}

double one-time initialization function for navigationIconToTitleSpacing(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.navigationIconToTitleSpacing);
}

uint64_t one-time initialization function for titleHorizontalPadding(uint64_t a1)
{
  return one-time initialization function for titleHorizontalPadding(a1, &one-time initialization token for standardSpacing, &static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.titleHorizontalPadding);
}

double static ClarityUIMetrics.titleHorizontalPadding.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for titleHorizontalPadding, (uint64_t)&static ClarityUIMetrics.titleHorizontalPadding);
}

double one-time initialization function for titleTopPadding(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.titleTopPadding);
}

double static ClarityUIMetrics.titleTopPadding.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for titleTopPadding, (uint64_t)&static ClarityUIMetrics.titleTopPadding);
}

double one-time initialization function for titleBottomPadding(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.titleBottomPadding);
}

double static ClarityUIMetrics.titleBottomPadding.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for titleBottomPadding, (uint64_t)&static ClarityUIMetrics.titleBottomPadding);
}

void one-time initialization function for barShadowRadius()
{
  static ClarityUIMetrics.barShadowRadius = 0x4010000000000000;
}

double one-time initialization function for barShadowOffset()
{
  double result = 0.0;
  static ClarityUIMetrics.barShadowOffset = xmmword_1883B2A00;
  return result;
}

double one-time initialization function for topBarTransitionDistance(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for titleBottomPadding, (double *)&static ClarityUIMetrics.titleBottomPadding, &static ClarityUIMetrics.topBarTransitionDistance);
}

double one-time initialization function for bottomBarTransitionDistance(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for backButtonPadding, (double *)&static ClarityUIMetrics.backButtonPadding, &static ClarityUIMetrics.bottomBarTransitionDistance);
}

double one-time initialization function for backIconToTitleSpacing(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.backIconToTitleSpacing);
}

double one-time initialization function for backButtonPadding(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.backButtonPadding);
}

double static ClarityUIMetrics.backButtonPadding.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for backButtonPadding, (uint64_t)&static ClarityUIMetrics.backButtonPadding);
}

void one-time initialization function for navigationAppIconShadowRadius()
{
  static ClarityUIMetrics.navigationAppIconShadowRadius = 0x4000000000000000;
}

double one-time initialization function for navigationAppIconShadowOffset()
{
  double result = 0.0;
  static ClarityUIMetrics.navigationAppIconShadowOffset = xmmword_1883503A0;
  return result;
}

double static ClarityUIMetrics.navigationTransitionDuration.getter()
{
  return 0.8;
}

uint64_t one-time initialization function for listTitleBottomPadding()
{
  if (one-time initialization token for isPad != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v0 = 30.0;
  if ((static ClarityUIMetrics.isPad & 1) == 0)
  {
    if (one-time initialization token for standardSpacing != -1) {
      uint64_t result = swift_once();
    }
    uint64_t v0 = static ClarityUIMetrics.standardSpacing;
  }
  static ClarityUIMetrics.listTitleBottomPadding = v0;
  return result;
}

uint64_t one-time initialization function for defaultGridCellMinWidth()
{
  if (one-time initialization token for isPad != -1) {
    uint64_t result = swift_once();
  }
  double v0 = 140.0;
  if (static ClarityUIMetrics.isPad) {
    double v0 = 210.0;
  }
  static ClarityUIMetrics.defaultGridCellMinWidth = *(void *)&v0;
  return result;
}

uint64_t one-time initialization function for gridCellSpacing(uint64_t a1)
{
  return one-time initialization function for titleHorizontalPadding(a1, &one-time initialization token for standardSpacing, &static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.gridCellSpacing);
}

double one-time initialization function for gridIconToTextSpacing(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.gridIconToTextSpacing);
}

uint64_t one-time initialization function for gridHorizontalPaddingPortrait(uint64_t a1)
{
  return one-time initialization function for titleHorizontalPadding(a1, &one-time initialization token for componentHorizontalPadding, &static ClarityUIMetrics.componentHorizontalPadding, &static ClarityUIMetrics.gridHorizontalPaddingPortrait);
}

uint64_t one-time initialization function for titleHorizontalPadding(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  if (one-time initialization token for isPad != -1) {
    uint64_t result = swift_once();
  }
  if (static ClarityUIMetrics.isPad)
  {
    uint64_t v7 = 0x4044000000000000;
  }
  else
  {
    if (*a2 != -1) {
      uint64_t result = swift_once();
    }
    uint64_t v7 = *a3;
  }
  *a4 = v7;
  return result;
}

double static ClarityUIMetrics.gridHorizontalPaddingPortrait.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for gridHorizontalPaddingPortrait, (uint64_t)&static ClarityUIMetrics.gridHorizontalPaddingPortrait);
}

uint64_t one-time initialization function for gridHorizontalPaddingLandscape()
{
  if (one-time initialization token for isPad != -1) {
    uint64_t result = swift_once();
  }
  if (static ClarityUIMetrics.isPad)
  {
    uint64_t v0 = 0x4054000000000000;
  }
  else
  {
    if (one-time initialization token for componentHorizontalPadding != -1) {
      uint64_t result = swift_once();
    }
    uint64_t v0 = static ClarityUIMetrics.componentHorizontalPadding;
  }
  static ClarityUIMetrics.gridHorizontalPaddingLandscape = v0;
  return result;
}

double static ClarityUIMetrics.gridHorizontalPaddingLandscape.getter()
{
  return static ClarityUIMetrics.componentHorizontalPadding.getter(&one-time initialization token for gridHorizontalPaddingLandscape, (uint64_t)&static ClarityUIMetrics.gridHorizontalPaddingLandscape);
}

double static ClarityUIMetrics.componentHorizontalPadding.getter(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  return *(double *)a2;
}

double one-time initialization function for stackCircularIconWidth(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for stackCircularIconHeight, (double *)&static ClarityUIMetrics.stackCircularIconHeight, &static ClarityUIMetrics.stackCircularIconWidth);
}

double one-time initialization function for stackCircularIconHeight()
{
  if (one-time initialization token for minimumComponentHeight != -1) {
    swift_once();
  }
  double v0 = *(double *)&static ClarityUIMetrics.minimumComponentHeight;
  if (one-time initialization token for buttonVerticalPadding != -1) {
    swift_once();
  }
  double result = v0
         - (*(double *)&static ClarityUIMetrics.buttonVerticalPadding
          + *(double *)&static ClarityUIMetrics.buttonVerticalPadding);
  *(double *)&static ClarityUIMetrics.stackCircularIconHeight = result;
  return result;
}

double one-time initialization function for stackCellSpacing(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.stackCellSpacing);
}

double one-time initialization function for stackIconToTextSpacing(uint64_t a1)
{
  return one-time initialization function for componentHorizontalPadding(a1, &one-time initialization token for standardSpacing, (double *)&static ClarityUIMetrics.standardSpacing, &static ClarityUIMetrics.stackIconToTextSpacing);
}

double one-time initialization function for componentHorizontalPadding(uint64_t a1, void *a2, double *a3, void *a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  double result = *a3;
  *a4 = *(void *)a3;
  return result;
}

double static ClarityUIMetrics.stackWidthAsPercentageOfScreenPad.getter()
{
  return 0.5;
}

ValueMetadata *type metadata accessor for ClarityUIMetrics()
{
  return &type metadata for ClarityUIMetrics;
}

void one-time initialization function for isPad()
{
  id v0 = objc_msgSend(self, sel_currentDevice);
  id v1 = objc_msgSend(v0, sel_userInterfaceIdiom);

  static ClarityUIMetrics.isPad = v1 == (id)1;
}

uint64_t CommandMenu.MakeList.commandMenu.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CommandMenu();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t CommandMenu.MakeList.value.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CommandsList.Item(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v43 = v3 - 8;
  uint64_t v44 = v4;
  uint64_t v45 = v4;
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v42 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = *(void *)(a1 + 16);
  uint64_t v40 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v39 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = *(void *)(a1 + 24);
  uint64_t v34 = a1;
  uint64_t v46 = type metadata accessor for CommandMenu();
  uint64_t v8 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v10 = (char *)&v33 - v9;
  uint64_t v11 = type metadata accessor for CommandGroupPlacement(0);
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for CommandOperation();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v37 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  CommandMenu.MakeList.commandMenu.getter((uint64_t)v10);
  uint64_t v17 = *(void *)v10;
  uint64_t v18 = *((void *)v10 + 1);
  char v19 = v10[16];
  uint64_t v20 = *((void *)v10 + 3);
  outlined copy of Text.Storage(*(void *)v10, v18, v19);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v35 = v8 + 8;
  uint64_t v36 = v21;
  swift_bridgeObjectRetain();
  v21(v10, v46);
  uint64_t v22 = v1 + *(int *)(v34 + 36);
  uint64_t v23 = &v14[*(int *)(v12 + 28)];
  uint64_t v24 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v23, v22, v24);
  uint64_t v47 = 0;
  Text.assertUnstyled(_:options:)();
  *(void *)uint64_t v14 = v17;
  *((void *)v14 + 1) = v18;
  v14[16] = v19;
  *((void *)v14 + 3) = v20;
  CommandMenu.MakeList.commandMenu.getter((uint64_t)v10);
  uint64_t v25 = v46;
  uint64_t v26 = (uint64_t)v39;
  uint64_t v27 = v38;
  (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v39, &v10[*(int *)(v46 + 36)], v38);
  v36(v10, v25);
  id v28 = v37;
  CommandOperation.init<A>(mutation:placement:content:)(3, (uint64_t)v14, v26, v27, v41, v37);
  uint64_t v29 = v42;
  outlined init with copy of CommandOperation((uint64_t)v28, v42);
  type metadata accessor for CommandsList.Item.Value(0);
  swift_storeEnumTagMultiPayload();
  DisplayList.Version.init(forUpdate:)();
  *(void *)(v29 + *(int *)(v43 + 28)) = v47;
  type metadata accessor for _ContiguousArrayStorage<CommandsList.Item>();
  unint64_t v30 = (*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
  uint64_t v31 = swift_allocObject();
  *(_OWORD *)(v31 + 16) = xmmword_18834BB80;
  outlined init with take of CommandsList.Item(v29, v31 + v30);
  outlined destroy of CommandOperation((uint64_t)v28);
  return v31;
}

uint64_t CommandMenu.MakeList.init(commandMenu:id:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for CommandMenu.MakeList() + 36);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v6(v4, a2, v5);
}

uint64_t protocol witness for Rule.value.getter in conformance CommandMenu<A>.MakeList@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = CommandMenu.MakeList.value.getter(a1);
  *a2 = result;
  return result;
}

uint64_t static CommandMenu._makeCommands(content:inputs:)@<X0>(uint64_t a1@<X8>)
{
  PreferencesOutputs.init()();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t implicit closure #1 in static CommandMenu._makeCommands(content:inputs:)(unsigned int a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v2 - 8);
  int v4 = &v13[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t List = type metadata accessor for CommandMenu.MakeList();
  uint64_t v6 = *(void *)(List - 8);
  MEMORY[0x1F4188790](List);
  uint64_t v8 = &v13[-v7];
  unsigned int v14 = a1;
  type metadata accessor for CommandMenu();
  type metadata accessor for _GraphValue();
  int v9 = _GraphValue.value.getter();
  UUID.init()();
  CommandMenu.MakeList.init(commandMenu:id:)(v9, (uint64_t)v4, v8);
  uint64_t v16 = List;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<CommandsList>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_8, (uint64_t)v15, List, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  (*(void (**)(_DWORD *, uint64_t))(v6 + 8))(v8, List);
  return v14;
}

uint64_t partial apply for implicit closure #1 in static CommandMenu._makeCommands(content:inputs:)()
{
  return implicit closure #1 in static CommandMenu._makeCommands(content:inputs:)(*(_DWORD *)(v0 + 32));
}

uint64_t CommandMenu.init(_:content:)@<X0>(void (*a1)(uint64_t)@<X4>, uint64_t a2@<X8>)
{
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  char v8 = v7 & 1;

  return CommandMenu.init(_:content:)(v4, v5, v8, v6, a1, a2);
}

uint64_t CommandMenu.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X8>)
{
  char v11 = a3 & 1;
  Text.assertUnstyled(_:options:)();
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = v11;
  *(void *)(a6 + 24) = a4;
  type metadata accessor for CommandMenu();
  outlined copy of Text.Storage(a1, a2, v11);
  uint64_t v12 = swift_bridgeObjectRetain();
  a5(v12);
  outlined consume of Text.Storage(a1, a2, v11);

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for CommandMenu()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CommandMenu.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  double v9 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11, v9);
  uint64_t v12 = Text.init<A>(_:)();
  CommandMenu.init(_:content:)(v12, v14, v13 & 1, v15, a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a3);
}

uint64_t CommandMenu._resolve(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v24 = a2;
  uint64_t v25 = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v22 = a1;
  uint64_t v23 = v4;
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1F4188790](v7);
  double v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CommandOperation();
  uint64_t v11 = v10 - 8;
  MEMORY[0x1F4188790](v10);
  char v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)v2;
  uint64_t v14 = *(void *)(v2 + 8);
  char v16 = *(unsigned char *)(v2 + 16);
  uint64_t v17 = *(void *)(v2 + 24);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v15, v14, v16);
  UUID.init()();
  uint64_t v26 = 0;
  Text.assertUnstyled(_:options:)();
  *(void *)double v9 = v15;
  *((void *)v9 + 1) = v14;
  v9[16] = v16;
  *((void *)v9 + 3) = v17;
  uint64_t v18 = v24;
  uint64_t v19 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v6, v2 + *(int *)(v24 + 36), v25);
  CommandOperation.init<A>(mutation:placement:content:)(3, (uint64_t)v9, (uint64_t)v6, v19, *(void *)(v18 + 24), v13);
  uint64_t v20 = *(void (**)(unsigned char *, uint64_t))&v13[*(int *)(v11 + 32)];
  if (v20) {
    v20(v13, v22);
  }
  return outlined destroy of CommandOperation((uint64_t)v13);
}

uint64_t outlined destroy of CommandOperation(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CommandOperation();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for Commands.Body : Commands in CommandMenu<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance CommandMenu<A>@<X0>(uint64_t a1@<X8>)
{
  return static CommandMenu._makeCommands(content:inputs:)(a1);
}

uint64_t type metadata completion function for CommandMenu()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CommandMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 32) & (unint64_t)~v7) + *(void *)(v6 + 64) > 0x18)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    char v13 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v12, v13);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v14((a1 + v7 + 32) & ~v7, (a2 + v7 + 32) & ~v7, v5);
  }
  return a1;
}

uint64_t destroy for CommandMenu(uint64_t a1, uint64_t a2)
{
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for CommandMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 32 + a1) & ~v12;
  uint64_t v14 = (v12 + 32 + a2) & ~v12;
  swift_bridgeObjectRetain();
  v11(v13, v14, v9);
  return a1;
}

uint64_t assignWithCopy for CommandMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 24))((*(unsigned __int8 *)(v12 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(unsigned __int8 *)(v12 + 80) + 32 + a2) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithTake for CommandMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 32 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandMenu(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 32) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 32) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 3);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for CommandMenu(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 32) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187F25B70);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 32] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *((void *)a1 + 2) = 0;
          *((void *)a1 + 3) = 0;
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 3) = a2 - 1;
        }
      }
      return;
  }
}

_UNKNOWN **sub_187F25B98()
{
  return &protocol witness table for EmptyCommands;
}

uint64_t type metadata accessor for CommandMenu.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for CommandMenu.MakeList()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CommandMenu.MakeList(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 36);
    uint64_t v6 = (char *)a1 + v5;
    unsigned int v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for CommandMenu.MakeList(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 36);
  uint64_t v3 = type metadata accessor for UUID();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

_DWORD *initializeWithCopy for CommandMenu.MakeList(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithCopy for CommandMenu.MakeList(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_DWORD *initializeWithTake for CommandMenu.MakeList(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_DWORD *assignWithTake for CommandMenu.MakeList(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandMenu.MakeList(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F25F90);
}

uint64_t sub_187F25F90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 36);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for CommandMenu.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F26014);
}

uint64_t sub_187F26014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 36);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t base witness table accessor for _AttributeBody in CommandMenu<A>.MakeList()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with copy of CommandOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommandOperation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<CommandsList.Item>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<CommandsList.Item>)
  {
    type metadata accessor for CommandsList.Item(255);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CommandsList.Item>);
    }
  }
}

uint64_t outlined init with take of CommandsList.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommandsList.Item(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for SearchFieldStyle.Body : View in AutomaticSearchFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AutomaticSearchFieldStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchField<SearchFieldConfiguration.Control>();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>();
  MEMORY[0x1F4188790](v10 - 8);
  unsigned int v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI24SearchFieldConfigurationVWOcTm_2(a1, (uint64_t)v6, type metadata accessor for SearchFieldConfiguration);
  SearchField<>.init(_:)((uint64_t)v6, (uint64_t)v9);
  _s7SwiftUI24SearchFieldConfigurationVWOcTm_2((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SearchField<SearchFieldConfiguration.Control>);
  outlined destroy of SearchField<SearchFieldConfiguration.Control>((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SearchField<SearchFieldConfiguration.Control>);
  _s7SwiftUI24SearchFieldConfigurationVWOcTm_2((uint64_t)v12, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>);
  return outlined destroy of SearchField<SearchFieldConfiguration.Control>((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>);
}

void type metadata accessor for SearchField<SearchFieldConfiguration.Control>()
{
  if (!lazy cache variable for type metadata for SearchField<SearchFieldConfiguration.Control>)
  {
    unint64_t v0 = type metadata accessor for SearchField();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchField<SearchFieldConfiguration.Control>);
    }
  }
}

void type metadata accessor for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>)
  {
    type metadata accessor for SearchField<SearchFieldConfiguration.Control>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>();
    type metadata accessor for SearchFieldStyleModifier<ToolbarSearchFieldStyle>(255, &lazy cache variable for type metadata for SearchFieldStyleModifier<ToolbarSearchFieldStyle>, (void (*)(void))lazy protocol witness table accessor for type ToolbarSearchFieldStyle and conformance ToolbarSearchFieldStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>, (void (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>);
    }
  }
}

uint64_t outlined destroy of SearchField<SearchFieldConfiguration.Control>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for AutomaticSearchFieldStyle()
{
  return &type metadata for AutomaticSearchFieldStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>>)
  {
    type metadata accessor for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>();
    type metadata accessor for SearchFieldStyleModifier<ToolbarSearchFieldStyle>(255, &lazy cache variable for type metadata for SearchFieldStyleModifier<PlatformSearchFieldStyle>, (void (*)(void))lazy protocol witness table accessor for type PlatformSearchFieldStyle and conformance PlatformSearchFieldStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>, SearchFieldStyleModifier<PlatformSearchFieldStyle>>);
    }
  }
}

void type metadata accessor for SearchFieldStyleModifier<ToolbarSearchFieldStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for SearchFieldStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformSearchFieldStyle and conformance PlatformSearchFieldStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformSearchFieldStyle and conformance PlatformSearchFieldStyle;
  if (!lazy protocol witness table cache variable for type PlatformSearchFieldStyle and conformance PlatformSearchFieldStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformSearchFieldStyle and conformance PlatformSearchFieldStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type SearchField<SearchFieldConfiguration.Control> and conformance SearchField<A>, (void (*)(uint64_t))type metadata accessor for SearchField<SearchFieldConfiguration.Control>);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SearchField<SearchFieldConfiguration.Control>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, SearchFieldStyleModifier<ToolbarSearchFieldStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void protocol witness for WidgetConfiguration.body.getter in conformance EmptyWidgetConfiguration()
{
}

{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void protocol witness for WidgetConfiguration.body.getter in conformance LimitedAvailabilityConfiguration()
{
}

void protocol witness for WidgetConfiguration.body.getter in conformance WidgetConfigurationModifier_Content<A>()
{
}

uint64_t specialized static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:)@<X0>(int a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  static DynamicPropertyCache.fields(of:)();
  long long v5 = v23;
  char v6 = v24;
  int v7 = DWORD1(v24);
  long long v8 = a2[1];
  long long v20 = *a2;
  long long v21 = v8;
  v22[0] = a2[2];
  *(_OWORD *)((char *)v22 + 12) = *(long long *)((char *)a2 + 44);
  outlined retain of _ViewInputs((uint64_t)a2);
  LOBYTE(v23) = v24;
  specialized static WidgetConfiguration.makeBody(widget:inputs:fields:)();
  long long v9 = v23;
  char v10 = v24;
  long long v23 = v20;
  long long v24 = v21;
  v25[0] = v22[0];
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v22 + 12);
  specialized static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:)(&v15, v15, &v23);
  uint64_t v11 = v15;
  int v12 = DWORD2(v15);
  if ((v10 & 1) == 0)
  {
    long long v19 = v9;
    int v18 = a1;
    long long v15 = v5;
    char v16 = v6;
    int v17 = v7;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _ViewInputs((uint64_t)&v23);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v11;
  *(_DWORD *)(a3 + 8) = v12;
  return result;
}

uint64_t static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v9 = a2[5];
  uint64_t v8 = a2[6];
  int v10 = *((_DWORD *)a2 + 14);
  static DynamicPropertyCache.fields(of:)();
  uint64_t v11 = v40;
  uint64_t v12 = v41;
  char v13 = v42;
  int v14 = HIDWORD(v42);
  uint64_t v40 = v5;
  LODWORD(v41) = v6;
  uint64_t v42 = v7;
  long long v43 = *(_OWORD *)(a2 + 3);
  uint64_t v44 = v9;
  uint64_t v45 = v8;
  int v46 = v10;
  int v21 = v14;
  int v22 = v4;
  int v36 = v4;
  uint64_t v25 = v12;
  uint64_t v26 = v11;
  HIDWORD(v29) = HIDWORD(v12);
  char v24 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static WidgetConfiguration.makeBody(widget:inputs:fields:)();
  uint64_t v15 = v38;
  uint64_t v23 = v37;
  LOBYTE(v10) = v39;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = v5;
  LODWORD(v29) = v41;
  uint64_t v30 = v7;
  long long v31 = v43;
  uint64_t v32 = v9;
  uint64_t v33 = v45;
  int v34 = v46;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v37, v35, &v28, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v18 = v37;
  int v19 = v38;
  if ((v10 & 1) == 0)
  {
    uint64_t v37 = v23;
    uint64_t v38 = v15;
    int v36 = v22;
    uint64_t v28 = v26;
    uint64_t v29 = v25;
    LOBYTE(v30) = v24;
    HIDWORD(v30) = v21;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v18;
  *(_DWORD *)(a3 + 8) = v19;
  return result;
}

uint64_t specialized static WidgetConfiguration.makeBody(widget:inputs:fields:)()
{
  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for WidgetConfigurationBodyAccessor<Never>();
    lazy protocol witness table accessor for type WidgetConfigurationBodyAccessor<Never> and conformance WidgetConfigurationBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = 0x726576654ELL;
    v1._object = (void *)0xE500000000000000;
    String.append(_:)(v1);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static WidgetConfiguration.makeBody(widget:inputs:fields:)()
{
  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for WidgetConfigurationBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for WidgetConfiguration.Body : WidgetConfiguration in Never()
{
  return &protocol witness table for Never;
}

uint64_t WidgetConfigurationBodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for WidgetConfigurationBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance WidgetConfigurationBodyAccessor<A>(uint64_t result, char a2)
{
  return WidgetConfigurationBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t protocol witness for static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:) in conformance Never@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(long long *)((char *)a2 + 44);
  return specialized static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:)(v3, v6, a3);
}

uint64_t dispatch thunk of WidgetConfiguration.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static WidgetConfiguration._makeWidgetConfiguration(widget:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for WidgetDescriptor()
{
  return &type metadata for WidgetDescriptor;
}

uint64_t protocol witness for static TupleDescriptor.typeCache.getter in conformance WidgetDescriptor()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance WidgetDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static WidgetDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*protocol witness for static TupleDescriptor.typeCache.modify in conformance WidgetDescriptor())()
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

void protocol witness for WidgetConfiguration.body.getter in conformance ControlWidgetConfigurationAdaptor<A>()
{
}

void specialized WidgetConfiguration.widgetConfigurationBodyError()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized PrimitiveWidgetConfiguration.body.getter()
{
}

void type metadata accessor for WidgetConfigurationBodyAccessor<Never>()
{
  if (!lazy cache variable for type metadata for WidgetConfigurationBodyAccessor<Never>)
  {
    unint64_t v0 = type metadata accessor for WidgetConfigurationBodyAccessor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WidgetConfigurationBodyAccessor<Never>);
    }
  }
}

uint64_t type metadata accessor for WidgetConfigurationBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type WidgetConfigurationBodyAccessor<Never> and conformance WidgetConfigurationBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetConfigurationBodyAccessor<Never> and conformance WidgetConfigurationBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type WidgetConfigurationBodyAccessor<Never> and conformance WidgetConfigurationBodyAccessor<A>)
  {
    type metadata accessor for WidgetConfigurationBodyAccessor<Never>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetConfigurationBodyAccessor<Never> and conformance WidgetConfigurationBodyAccessor<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in WidgetConfigurationBodyAccessor.updateBody(of:changed:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

uint64_t ObservableDocumentBox.wasOpened.getter()
{
  return 1;
}

uint64_t (*protocol witness for ObservableDocumentBox.wasOpened.modify in conformance ReferenceFileDocumentBox<A1>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ObservableDocumentBox.wasOpened.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*ObservableDocumentBox.wasOpened.modify(unsigned char *a1))(void, void, void, void)
{
  *a1 = 1;
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ObservableDocumentBoxInputView.init(modelType:content:)(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_187F275B4(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_187F275C4()
{
  return 16;
}

__n128 sub_187F275D0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of NewDocumentProvider.provideNewDocument(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static ObservableDocumentBox.documentBaseClass.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ObservableDocumentBox.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ObservableDocumentBox.hasLoadedDocument.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ObservableDocumentBox.wasOpened.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ObservableDocumentBox.wasOpened.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ObservableDocumentBox.wasOpened.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ObservableDocumentBox.fileURL.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of ObservableDocumentBox.fileURL.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ObservableDocumentBox.fileURL.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of ObservableDocumentBox.isEditable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of ObservableDocumentBox.isEditable.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

uint64_t dispatch thunk of ObservableDocumentBox.isEditable.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of ObservableDocumentBox.undoManager.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of ObservableDocumentBox.undoManager.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of ObservableDocumentBox.undoManager.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of ObservableDocumentBox.readableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of ObservableDocumentBox.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of DocumentBaseBox.base.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DocumentBaseBox.base.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of DocumentBaseBox.base.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t destroy for IdentifiedDocumentGroupConfiguration(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  char v4 = *(unsigned char *)(a1 + 120);

  return outlined consume of SceneID(v2, v3, v4);
}

uint64_t initializeWithCopy for IdentifiedDocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = a2 + 24;
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v4, v5);
  }
  else
  {
    long long v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    *(void *)(v4 + 32) = *(void *)(v5 + 32);
  }
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  uint64_t v11 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v12 = *(void *)(a2 + 112);
  char v13 = *(unsigned char *)(a2 + 120);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of SceneID(v11, v12, v13);
  *(void *)(a1 + 104) = v11;
  *(void *)(a1 + 112) = v12;
  *(unsigned char *)(a1 + 120) = v13;
  return a1;
}

uint64_t assignWithCopy for IdentifiedDocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (long long *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
    if (v6)
    {
      *(void *)(a1 + 48) = v6;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
      goto LABEL_8;
    }
LABEL_7:
    long long v7 = *v5;
    long long v8 = v5[1];
    *(void *)(v4 + 32) = *((void *)v5 + 4);
    *(_OWORD *)uint64_t v4 = v7;
    *(_OWORD *)(v4 + 16) = v8;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
LABEL_8:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 104);
  uint64_t v10 = *(void *)(a2 + 112);
  char v11 = *(unsigned char *)(a2 + 120);
  outlined copy of SceneID(v9, v10, v11);
  uint64_t v12 = *(void *)(a1 + 104);
  uint64_t v13 = *(void *)(a1 + 112);
  char v14 = *(unsigned char *)(a1 + 120);
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 112) = v10;
  *(unsigned char *)(a1 + 120) = v11;
  outlined consume of SceneID(v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for IdentifiedDocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = a1 + 24;
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(v4 + 32) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_release();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  char v8 = *(unsigned char *)(a2 + 120);
  uint64_t v9 = *(void *)(a1 + 104);
  uint64_t v10 = *(void *)(a1 + 112);
  char v11 = *(unsigned char *)(a1 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = v8;
  outlined consume of SceneID(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdentifiedDocumentGroupConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 121)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdentifiedDocumentGroupConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 120) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 121) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 121) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IdentifiedDocumentGroupConfiguration()
{
  return &type metadata for IdentifiedDocumentGroupConfiguration;
}

uint64_t destroy for DocumentGroupConfiguration(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = a2 + 24;
  uint64_t v6 = *(void *)(a2 + 48);
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(v4, v5);
  }
  else
  {
    long long v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    *(void *)(v4 + 32) = *(void *)(v5 + 32);
  }
  uint64_t v9 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (long long *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
    if (v6)
    {
      *(void *)(a1 + 48) = v6;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 24, a2 + 24);
      goto LABEL_8;
    }
LABEL_7:
    long long v7 = *v5;
    long long v8 = v5[1];
    *(void *)(v4 + 32) = *((void *)v5 + 4);
    *(_OWORD *)uint64_t v4 = v7;
    *(_OWORD *)(v4 + 16) = v8;
    goto LABEL_8;
  }
  if (!v6)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
LABEL_8:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DocumentGroupConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = a1 + 24;
  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v4 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(v4 + 32) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_release();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DocumentGroupConfiguration()
{
  return &type metadata for DocumentGroupConfiguration;
}

uint64_t static ObservableDocumentBoxInputView._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v40 = a7;
  uint64_t v39 = a5;
  uint64_t v43 = a8;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  int v38 = *a1;
  unint64_t v11 = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  int v13 = *(_DWORD *)(a2 + 24);
  int v44 = *(_DWORD *)(a2 + 8);
  LODWORD(v45) = v13;
  int v14 = *(_DWORD *)(a2 + 32);
  HIDWORD(v45) = *(_DWORD *)(a2 + 28);
  LODWORD(v46) = v14;
  HIDWORD(v46) = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v16 = *(void *)(a2 + 56);
  uint64_t v47 = *(void *)(a2 + 48);
  uint64_t v48 = v16;
  int v17 = *(_DWORD *)(a2 + 64);
  uint64_t v18 = *(void *)(a2 + 72);
  int v19 = *(unsigned __int8 *)(a2 + 80);
  lazy protocol witness table accessor for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v42 = v15;
  swift_bridgeObjectRelease();
  uint64_t v41 = v12;
  swift_release();
  swift_release();
  if (v51 == *MEMORY[0x1E4F4E7A0])
  {
    unint64_t v51 = v11;
    LODWORD(KeyPath) = v44;
    uint64_t v53 = v41;
    uint64_t v54 = v45;
    uint64_t v55 = v46;
    uint64_t v56 = v42;
    uint64_t v57 = v47;
    uint64_t v58 = v48;
    int v59 = v17;
    uint64_t v60 = v18;
    char v61 = v19;
    return static _ViewListOutputs.emptyViewList(inputs:)();
  }
  else
  {
    uint64_t v37 = v18;
    uint64_t v21 = v39;
    uint64_t v22 = a6;
    uint64_t v23 = v40;
    int v34 = v51;
    uint64_t v36 = type metadata accessor for ObservableDocumentBoxInputView.Child.ChildView();
    int v49 = v38;
    uint64_t v53 = v39;
    uint64_t v54 = v22;
    uint64_t v33 = v22;
    uint64_t v55 = v40;
    type metadata accessor for ObservableDocumentBoxInputView();
    type metadata accessor for _GraphValue();
    uint64_t v24 = _GraphValue.value.getter();
    int v38 = v19;
    unsigned int v25 = v24;
    int v35 = v17;
    MEMORY[0x1F4188790](v24);
    v29[0] = a3;
    v29[1] = a4;
    uint64_t v32 = (uint64_t)&v32;
    unint64_t v51 = __PAIR64__(HIDWORD(a3), v25);
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    v29[2] = swift_getFunctionTypeMetadata1();
    uint64_t v30 = type metadata accessor for Focus();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v26 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v51, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v29, v30, MEMORY[0x1E4FBC248], v26, MEMORY[0x1E4FBC278], v27);
    swift_release();
    swift_release();
    int v28 = v49;
    int v49 = v34;
    int v50 = v28;
    unint64_t v51 = a3;
    uint64_t KeyPath = a4;
    uint64_t v53 = v21;
    uint64_t v54 = v33;
    uint64_t v55 = v23;
    type metadata accessor for ObservableDocumentBoxInputView.Child();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    unint64_t v51 = v11;
    LODWORD(KeyPath) = v44;
    uint64_t v53 = v41;
    uint64_t v54 = v45;
    uint64_t v55 = v46;
    uint64_t v56 = v42;
    uint64_t v57 = v47;
    uint64_t v58 = v48;
    int v59 = v35;
    uint64_t v60 = v37;
    char v61 = v38;
    swift_getWitnessTable();
    return static View.makeDebuggableViewList(view:inputs:)();
  }
}

uint64_t key path getter for ObservableDocumentBoxInputView.content : <A, B>ObservableDocumentBoxInputView<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a3 + a2;
  uint64_t v6 = *(void *)(a3 + a2 - 8);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = swift_allocObject();
  long long v10 = *(_OWORD *)(v5 - 24);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 40);
  *(_OWORD *)(v9 + 32) = v10;
  *(void *)(v9 + 48) = v6;
  *(void *)(v9 + 56) = v8;
  *(void *)(v9 + 64) = v7;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> (@out B);
  a4[1] = v9;

  return swift_retain();
}

uint64_t key path setter for ObservableDocumentBoxInputView.content : <A, B>ObservableDocumentBoxInputView<A, B>(uint64_t *a1, uint64_t (**a2)(uint64_t a1), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v6 = *(void *)(a4 + a3 - 8);
  uint64_t v8 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v9 = swift_allocObject();
  long long v10 = *(_OWORD *)(v5 - 24);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(v5 - 40);
  *(_OWORD *)(v9 + 32) = v10;
  *(void *)(v9 + 48) = v6;
  *(void *)(v9 + 56) = v8;
  *(void *)(v9 + 64) = v7;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out B);
  a2[1] = (uint64_t (*)(uint64_t))v9;
  return result;
}

uint64_t (*ObservableDocumentBoxInputView.Child.content.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  swift_getFunctionTypeMetadata1();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v13 = *Value;
  uint64_t v12 = Value[1];
  int v14 = (void *)swift_allocObject();
  v14[2] = a2;
  void v14[3] = a3;
  v14[4] = a4;
  v14[5] = a5;
  v14[6] = a6;
  v14[7] = v13;
  v14[8] = v12;
  swift_retain();
  return thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out B)partial apply;
}

uint64_t ObservableDocumentBoxInputView.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  AGGraphGetValue();
  int v14 = ObservableDocumentBoxInputView.Child.content.getter(a1, a2, a3, a4, a5, a6);
  uint64_t v16 = v15;
  swift_unknownObjectRetain();
  uint64_t result = ObservedObject.init(wrappedValue:)();
  *a7 = result;
  a7[1] = v18;
  a7[2] = (uint64_t)v14;
  a7[3] = v16;
  return result;
}

uint64_t ObservableDocumentBoxInputView.Child.ChildView.body.getter@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v25 = a3;
  uint64_t v26 = a2;
  uint64_t v31 = a7;
  uint64_t v27 = *(void *)(a5 - 8);
  uint64_t v28 = a4;
  uint64_t v30 = a8;
  MEMORY[0x1F4188790](a1);
  unint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  int v14 = (char *)&v25 - v13;
  uint64_t v15 = type metadata accessor for _ConditionalContent();
  uint64_t v29 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  int v17 = (char *)&v25 - v16;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(a6 + 24);
  swift_unknownObjectRetain();
  char v19 = v18(v28, a6);
  swift_unknownObjectRelease();
  uint64_t v20 = MEMORY[0x1E4F414D8];
  if (v19)
  {
    uint64_t v21 = swift_unknownObjectRetain();
    v26(v21);
    swift_unknownObjectRelease();
    uint64_t v22 = v30;
    static ViewBuilder.buildExpression<A>(_:)(v11);
    uint64_t v23 = *(void (**)(char *, uint64_t))(v27 + 8);
    v23(v11, a5);
    static ViewBuilder.buildExpression<A>(_:)(v14);
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v11, a5);
    v23(v11, a5);
    v23(v14, a5);
  }
  else
  {
    uint64_t v34 = static Color.clear.getter();
    uint64_t v22 = v30;
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v34, a5, MEMORY[0x1E4F414E0]);
    swift_release();
  }
  uint64_t v32 = v22;
  uint64_t v33 = v20;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v17, v15);
}

uint64_t protocol witness for View.body.getter in conformance ObservableDocumentBoxInputView<A, B>.Child.ChildView@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return ObservableDocumentBoxInputView.Child.ChildView.body.getter(*(void *)v2, *(void (**)(uint64_t))(v2 + 16), *(void *)(v2 + 24), a1[2], a1[3], a1[5], a2, a1[6]);
}

uint64_t protocol witness for Rule.value.getter in conformance ObservableDocumentBoxInputView<A, B>.Child@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return ObservableDocumentBoxInputView.Child.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a1[6], a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ObservableDocumentBoxInputView<A, B>()
{
  swift_getWitnessTable();

  return static MultiView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ObservableDocumentBoxInputView<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static ObservableDocumentBoxInputView._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a3 + 48), a4);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ObservableDocumentBoxInputView<A, B>()
{
  return static MultiView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance ObservableDocumentBoxInputView<A, B>()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ObservableDocumentBoxModifier()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ObservableDocumentBoxModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ObservableDocumentBoxModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance ObservableDocumentBoxModifier()
{
}

uint64_t IdentifiedDocumentGroupConfiguration.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UTType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = a2;
  outlined init with copy of DocumentGroupConfiguration(a1, a2);
  strcpy((char *)v45, "DocumentGroup");
  HIWORD(v45[1]) = -4864;
  if (*(unsigned char *)a1) {
    uint64_t v8 = 0x287265776569762DLL;
  }
  else {
    uint64_t v8 = 0x28726F746964652DLL;
  }
  unint64_t v9 = 0xE800000000000000;
  String.append(_:)(*(Swift::String *)&v8);
  String.append(_:)(*(Swift::String *)(a1 + 72));
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0x6C6261646165722DLL;
  v11._object = (void *)0xEA00000000002865;
  String.append(_:)(v11);
  uint64_t v12 = *(void *)(a1 + 88);
  unint64_t v13 = 0xE000000000000000;
  uint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  uint64_t v14 = *(void *)(v12 + 16);
  uint64_t v42 = a1;
  if (v14)
  {
    uint64_t v39 = v12;
    uint64_t v40 = v5;
    uint64_t v16 = v5 + 16;
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v17 = v12 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v18 = *(void *)(v16 + 56);
    swift_bridgeObjectRetain_n();
    do
    {
      v15(v7, v17, v4);
      v19._countAndFlagsBits = UTType.identifier.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v7, v4);
      v17 += v18;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease_n();
    uint64_t v20 = v43;
    unint64_t v21 = v44;
    a1 = v42;
    uint64_t v5 = v40;
    unint64_t v13 = 0xE000000000000000;
  }
  else
  {
    uint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
  }
  unint64_t v22 = v21;
  String.append(_:)(*(Swift::String *)&v20);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 41;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x6C6261746972772DLL;
  v24._object = (void *)0xEA00000000002865;
  String.append(_:)(v24);
  uint64_t v25 = *(void *)(a1 + 96);
  uint64_t v43 = 0;
  unint64_t v44 = 0xE000000000000000;
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v27 = v5 + 16;
    uint64_t v28 = v29;
    uint64_t v30 = v25 + ((*(unsigned __int8 *)(v27 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 64));
    uint64_t v31 = *(void *)(v27 + 56);
    uint64_t v40 = v25;
    swift_bridgeObjectRetain_n();
    do
    {
      v28(v7, v30, v4);
      v32._countAndFlagsBits = UTType.identifier.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v27 - 8))(v7, v4);
      v30 += v31;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease_n();
    uint64_t v33 = v43;
    unint64_t v13 = v44;
    a1 = v42;
  }
  else
  {
    uint64_t v33 = 0;
  }
  unint64_t v34 = v13;
  String.append(_:)(*(Swift::String *)&v33);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 41;
  v35._object = (void *)0xE100000000000000;
  String.append(_:)(v35);
  uint64_t result = outlined destroy of DocumentGroupConfiguration(a1);
  uint64_t v37 = v45[1];
  uint64_t v38 = v41;
  *(void *)(v41 + 104) = v45[0];
  *(void *)(v38 + 112) = v37;
  *(unsigned char *)(v38 + 120) = 0;
  return result;
}

Swift::Int IdentifiedDocumentGroupConfiguration.hashValue.getter()
{
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  if (*(unsigned char *)(v0 + 120))
  {
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of SceneID(v2, v1, 0);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance IdentifiedDocumentGroupConfiguration()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  if (*(unsigned char *)(v0 + 120))
  {
    Hasher._combine(_:)(*(void *)(v0 + 104));
    Hasher._combine(_:)(v1);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of SceneID(v2, v1, 0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance IdentifiedDocumentGroupConfiguration()
{
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  if (*(unsigned char *)(v0 + 120))
  {
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of SceneID(v2, v1, 0);
  }
  return Hasher._finalize()();
}

uint64_t specialized static IdentifiedDocumentGroupConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 104);
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v5 = *(void *)(a2 + 104);
  uint64_t v4 = *(void *)(a2 + 112);
  if (*(unsigned char *)(a1 + 120))
  {
    if (*(unsigned char *)(a2 + 120))
    {
      char v6 = v3 == v5 && *(void *)(a1 + 112) == v4;
      return v6 & 1;
    }
    uint64_t v16 = _typeName(_:qualified:)();
    uint64_t v18 = v10;
    v11._countAndFlagsBits = 45;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    uint64_t v2 = v18;
    swift_bridgeObjectRetain();
    if (v16 != v5) {
      goto LABEL_20;
    }
LABEL_10:
    if (v2 == v4)
    {
      swift_bridgeObjectRelease_n();
LABEL_19:
      char v6 = 1;
      return v6 & 1;
    }
LABEL_20:
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
  if (*(unsigned char *)(a2 + 120))
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = _typeName(_:qualified:)();
    uint64_t v17 = v7;
    v8._countAndFlagsBits = 45;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    uint64_t v4 = v17;
    if (v3 != v15) {
      goto LABEL_20;
    }
    goto LABEL_10;
  }
  if (v3 == v5 && v2 == v4) {
    goto LABEL_19;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t type metadata accessor for ObservableDocumentBoxInputView()
{
  return swift_getGenericMetadata();
}

_OWORD *initializeBufferWithCopyOfBuffer for ObservableDocumentBoxModifier(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for ObservableDocumentBoxModifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = v3;
  return a1;
}

_OWORD *assignWithTake for ObservableDocumentBoxModifier(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  return a1;
}

ValueMetadata *type metadata accessor for ObservableDocumentBoxModifier()
{
  return &type metadata for ObservableDocumentBoxModifier;
}

unsigned char *storeEnumTagSinglePayload for DocumentGroupConfiguration.Role(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187F29498);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DocumentGroupConfiguration.Role()
{
  return &type metadata for DocumentGroupConfiguration.Role;
}

unint64_t lazy protocol witness table accessor for type DocumentGroupConfiguration.Role and conformance DocumentGroupConfiguration.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentGroupConfiguration.Role and conformance DocumentGroupConfiguration.Role;
  if (!lazy protocol witness table cache variable for type DocumentGroupConfiguration.Role and conformance DocumentGroupConfiguration.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentGroupConfiguration.Role and conformance DocumentGroupConfiguration.Role);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in ObservableDocumentBoxModifier()
{
  return &protocol witness table for ObservableDocumentBoxModifier;
}

_UNKNOWN **base witness table accessor for View in ObservableDocumentBoxInputView<A, B>()
{
  return &protocol witness table for ObservableDocumentBoxInputView<A, B>;
}

uint64_t type metadata accessor for ObservableDocumentBoxInputView.Child.ChildView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187F29560()
{
  return 40;
}

__n128 sub_187F2956C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t type metadata accessor for ObservableDocumentBoxInputView.Child()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187F29598()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out B)(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 56);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> (@out B)(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 56))(*a1);
}

void type metadata accessor for _GraphValue<ObservableDocumentBoxModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<ObservableDocumentBoxModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ObservableDocumentBoxModifier>);
    }
  }
}

ValueMetadata *type metadata accessor for DocumentGroupConfiguration.DocumentKey()
{
  return &type metadata for DocumentGroupConfiguration.DocumentKey;
}

uint64_t associated type witness table accessor for View.Body : View in ObservableDocumentBoxInputView<A, B>.Child.ChildView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in ObservableDocumentBoxInputView<A, B>.Child()
{
  return swift_getWitnessTable();
}

uint64_t sub_187F29760()
{
  return swift_getWitnessTable();
}

uint64_t List.init<A, B>(_:editActions:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v38 = a8;
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v41 = a9;
  uint64_t v42 = a3;
  uint64_t v40 = a1;
  uint64_t v34 = a17;
  uint64_t v33 = a15;
  uint64_t v35 = a14;
  uint64_t v32 = a13;
  uint64_t v36 = a12;
  uint64_t v37 = a11;
  uint64_t v39 = type metadata accessor for Binding();
  uint64_t v20 = *(void *)(v39 - 8);
  double v21 = MEMORY[0x1F4188790](v39);
  Swift::String v23 = (char *)&v31 - v22;
  uint64_t v24 = *a2;
  (*(void (**)(char *, uint64_t, double))(v20 + 16))((char *)&v31 - v22, a1, v21);
  uint64_t v47 = a8;
  uint64_t v48 = a10;
  uint64_t v49 = a11;
  uint64_t v50 = a12;
  uint64_t v25 = v32;
  uint64_t v51 = v32;
  uint64_t v52 = a14;
  uint64_t v26 = v33;
  uint64_t v53 = v33;
  uint64_t v54 = a16;
  uint64_t v27 = v34;
  uint64_t v55 = v34;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v56 = v24;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  List.init<A, B, C>(_:id:editActions:selection:rowContent:)((uint64_t)v23, KeyPath, &v56, v42, v43, v44, v45, v46, v41, v38, a10, v37, v36, v25, v35, AssociatedConformanceWitness, v26, v27);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v40, v39);
}

uint64_t key path getter for Identifiable.id : <A, B><A1, B1>A1.Sequence.Element()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t sub_187F29A9C()
{
  return 72;
}

__n128 sub_187F29AA8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  __n128 result = *(__n128 *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t List.init<A, B, C>(_:id:editActions:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v19 = *a2;
  uint64_t v20 = *a3;
  uint64_t v31 = a10;
  uint64_t v32 = a11;
  uint64_t v33 = a12;
  uint64_t v34 = a13;
  uint64_t v35 = a14;
  uint64_t v36 = a15;
  uint64_t v37 = a16;
  uint64_t v38 = a17;
  uint64_t v39 = a18;
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v42 = v20;
  uint64_t v43 = a7;
  uint64_t v44 = a8;
  uint64_t v21 = *(void *)(*MEMORY[0x1E4FBC5F0] + v19 + 8);
  uint64_t v46 = type metadata accessor for IndexedIdentifierCollection();
  uint64_t v47 = v21;
  uint64_t v48 = type metadata accessor for EditableCollectionContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v50 = a16;
  uint64_t v22 = type metadata accessor for ForEach();
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v23 = swift_getWitnessTable();
  List.init(selection:content:)(a4, a5, a6, (void (*)(uint64_t))partial apply for closure #1 in List.init<A, B, C>(_:id:editActions:selection:rowContent:), (uint64_t)v30, a10, v22, a13, a9, v23);
  swift_release();
  swift_release();
  uint64_t v24 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(a1, v24);
}

void List.init<A, B>(_:editActions:selection:rowContent:)()
{
}

void List.init<A, B, C>(_:id:editActions:selection:rowContent:)()
{
}

uint64_t List.init<A, B>(_:editActions:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v50 = a8;
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v43 = a1;
  uint64_t v44 = a3;
  uint64_t v45 = a9;
  uint64_t v41 = a15;
  uint64_t v40 = a14;
  uint64_t v49 = a13;
  uint64_t v37 = a12;
  uint64_t v48 = a11;
  uint64_t v38 = a10;
  uint64_t v39 = a6;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  uint64_t v36 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v21 = (char *)&v33 - v20;
  uint64_t v34 = (uint64_t)&v33 - v20;
  uint64_t v42 = type metadata accessor for Binding();
  uint64_t v22 = *(void *)(v42 - 8);
  double v23 = MEMORY[0x1F4188790](v42);
  uint64_t v25 = (char *)&v33 - v24;
  uint64_t v26 = *a2;
  (*(void (**)(char *, uint64_t, double))(v22 + 16))((char *)&v33 - v24, a1, v23);
  uint64_t v51 = a6;
  uint64_t v52 = a7;
  uint64_t v33 = a7;
  uint64_t v53 = v50;
  uint64_t v54 = a10;
  uint64_t v55 = v48;
  uint64_t v56 = a12;
  uint64_t v57 = v49;
  uint64_t v58 = v40;
  uint64_t v27 = v41;
  uint64_t v59 = v41;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v60 = v26;
  uint64_t v28 = v21;
  uint64_t v29 = v44;
  uint64_t v30 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v28, v44, v36);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  List.init<A, B, C>(_:id:editActions:selection:rowContent:)((uint64_t)v25, KeyPath, &v60, v34, v46, v47, v39, v33, v45, v50, v38, v48, v37, AssociatedConformanceWitness, v49, v27);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v29, v30);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v43, v42);
}

uint64_t List.init<A, B, C>(_:id:editActions:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v41 = a8;
  uint64_t v42 = a5;
  uint64_t v47 = a4;
  uint64_t v43 = a1;
  uint64_t v48 = a9;
  uint64_t v40 = a16;
  uint64_t v38 = a15;
  uint64_t v37 = a13;
  uint64_t v44 = a11;
  uint64_t v35 = a10;
  uint64_t v36 = a2;
  uint64_t v39 = *a2;
  uint64_t v45 = a7;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  uint64_t v46 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v46 - 8);
  double v22 = MEMORY[0x1F4188790](v46);
  uint64_t v24 = (char *)&v35 - v23;
  uint64_t v25 = *a3;
  (*(void (**)(char *, uint64_t, double))(v21 + 16))((char *)&v35 - v23, a4, v22);
  uint64_t v50 = a7;
  uint64_t v51 = v41;
  uint64_t v52 = v35;
  uint64_t v53 = a11;
  uint64_t v54 = a12;
  uint64_t v55 = v37;
  uint64_t v56 = a14;
  uint64_t v57 = v38;
  uint64_t v58 = v40;
  uint64_t v59 = a1;
  uint64_t v60 = v36;
  uint64_t v61 = v25;
  uint64_t v62 = v42;
  uint64_t v63 = a6;
  uint64_t v26 = *(void *)(*MEMORY[0x1E4FBC5F0] + v39 + 8);
  uint64_t v27 = *(void *)(a12 + 8);
  uint64_t v65 = v41;
  uint64_t v66 = v26;
  uint64_t v67 = v27;
  uint64_t v68 = a14;
  uint64_t v28 = type metadata accessor for IndexedIdentifierCollection();
  uint64_t v29 = type metadata accessor for EditableCollectionContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v65 = v28;
  uint64_t v66 = v26;
  uint64_t v67 = v29;
  uint64_t v68 = WitnessTable;
  uint64_t v69 = a14;
  uint64_t v31 = type metadata accessor for ForEach();
  uint64_t v64 = swift_getWitnessTable();
  uint64_t v32 = swift_getWitnessTable();
  List.init(selection:content:)((uint64_t)v24, (void (*)(uint64_t))partial apply for closure #1 in List.init<A, B, C>(_:id:editActions:selection:rowContent:), (uint64_t)v49, v45, v31, v44, v32, v48);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v47, v46);
  swift_release();
  swift_release();
  uint64_t v33 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(v43, v33);
}

uint64_t closure #1 in List.init<A, B, C>(_:id:editActions:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v36 = a7;
  uint64_t v45 = a4;
  uint64_t v46 = a8;
  uint64_t v39 = a1;
  uint64_t v40 = a3;
  uint64_t v41 = a14;
  uint64_t v42 = a13;
  uint64_t v43 = a5;
  uint64_t v44 = a11;
  uint64_t v38 = a10;
  uint64_t v16 = *a2;
  uint64_t v37 = type metadata accessor for Binding();
  uint64_t v17 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v20 = *(void *)(*MEMORY[0x1E4FBC5F0] + v16 + 8);
  uint64_t v21 = *(void *)(a10 + 8);
  uint64_t v48 = a6;
  uint64_t v49 = v20;
  uint64_t v50 = v21;
  uint64_t v51 = a12;
  uint64_t v22 = type metadata accessor for IndexedIdentifierCollection();
  uint64_t v23 = type metadata accessor for EditableCollectionContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v48 = v22;
  uint64_t v49 = v20;
  uint64_t v50 = v23;
  uint64_t v51 = WitnessTable;
  uint64_t v52 = a12;
  uint64_t v25 = type metadata accessor for ForEach();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v30 = MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)&v36 - v31;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, v39, v37, v30);
  uint64_t v48 = v40;
  swift_retain();
  uint64_t v33 = v43;
  swift_retain();
  ForEach.init<A, B>(_:id:editActions:content:)((uint64_t)v19, a2, &v48, v45, v33, a6, v36, a12, (uint64_t)v28, v38, v44, v42, v41);
  uint64_t v47 = swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v28);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v26 + 8);
  v34(v28, v25);
  static ViewBuilder.buildExpression<A>(_:)(v32);
  return ((uint64_t (*)(char *, uint64_t))v34)(v32, v25);
}

uint64_t partial apply for closure #1 in List.init<A, B, C>(_:id:editActions:selection:rowContent:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in List.init<A, B, C>(_:id:editActions:selection:rowContent:)(*(void *)(v1 + 88), *(uint64_t **)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 120), *(void *)(v1 + 24), *(void *)(v1 + 32), a1, *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
}

uint64_t List<>.init<A, B>(_:editActions:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v22[0] = a8;
  v22[1] = a6;
  uint64_t v27 = a4;
  uint64_t v28 = a7;
  uint64_t v25 = a9;
  uint64_t v26 = a3;
  uint64_t v24 = a1;
  uint64_t v23 = type metadata accessor for Binding();
  uint64_t v16 = *(void *)(v23 - 8);
  double v17 = MEMORY[0x1F4188790](v23);
  uint64_t v19 = (char *)v22 - v18;
  uint64_t v20 = *a2;
  (*(void (**)(char *, uint64_t, double))(v16 + 16))((char *)v22 - v18, a1, v17);
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = v28;
  uint64_t v32 = v22[0];
  uint64_t v33 = a10;
  uint64_t v34 = a11;
  uint64_t v35 = a12;
  swift_getKeyPath();
  uint64_t v36 = v20;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  List<>.init<A, B, C>(_:id:editActions:rowContent:)((uint64_t)v19, v25);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v24, v23);
}

uint64_t sub_187F2A960()
{
  return 56;
}

__n128 sub_187F2A96C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t List<>.init<A, B, C>(_:id:editActions:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for IndexedIdentifierCollection();
  type metadata accessor for EditableCollectionContent();
  swift_getWitnessTable();
  type metadata accessor for ForEach();
  swift_getWitnessTable();
  swift_getWitnessTable();
  List<>.init(content:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #1 in List<>.init<A, B, C>(_:id:editActions:rowContent:), a2);
  swift_release();
  swift_release();
  uint64_t v4 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
}

uint64_t closure #1 in List<>.init<A, B, C>(_:id:editActions:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v38 = a8;
  uint64_t v39 = a1;
  uint64_t v36 = a7;
  uint64_t v45 = a4;
  uint64_t v46 = a9;
  uint64_t v42 = a12;
  uint64_t v43 = a5;
  uint64_t v40 = a3;
  uint64_t v41 = a13;
  uint64_t v44 = a10;
  uint64_t v16 = *a2;
  uint64_t v37 = type metadata accessor for Binding();
  uint64_t v17 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v19 = (char *)&v36 - v18;
  uint64_t v20 = *(void *)(*MEMORY[0x1E4FBC5F0] + v16 + 8);
  uint64_t v21 = *(void *)(a8 + 8);
  uint64_t v48 = a6;
  uint64_t v49 = v20;
  uint64_t v50 = v21;
  uint64_t v51 = a11;
  uint64_t v22 = type metadata accessor for IndexedIdentifierCollection();
  uint64_t v23 = type metadata accessor for EditableCollectionContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v48 = v22;
  uint64_t v49 = v20;
  uint64_t v50 = v23;
  uint64_t v51 = WitnessTable;
  uint64_t v52 = a11;
  uint64_t v25 = type metadata accessor for ForEach();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v36 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v30 = MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)&v36 - v31;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, v39, v37, v30);
  uint64_t v48 = v40;
  swift_retain();
  uint64_t v33 = v43;
  swift_retain();
  ForEach.init<A, B>(_:id:editActions:content:)((uint64_t)v19, a2, &v48, v45, v33, a6, v36, a11, (uint64_t)v28, v38, v44, v42, v41);
  uint64_t v47 = swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v28);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v26 + 8);
  v34(v28, v25);
  static ViewBuilder.buildExpression<A>(_:)(v32);
  return ((uint64_t (*)(char *, uint64_t))v34)(v32, v25);
}

uint64_t partial apply for closure #1 in List<>.init<A, B, C>(_:id:editActions:rowContent:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in List<>.init<A, B, C>(_:id:editActions:rowContent:)(*(void *)(v1 + 72), *(uint64_t **)(v1 + 80), *(void *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1, *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t EnvironmentValues.ignoreInvertColorsFilterActive.setter()
{
  type metadata accessor for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IgnoreColorInvertEffect()
{
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance IgnoreColorInvertEffect()
{
}

uint64_t _AccessibilityIgnoresInvertColorsViewModifier.active.getter(char a1)
{
  return a1 & 1;
}

uint64_t _AccessibilityIgnoresInvertColorsViewModifier.active.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_AccessibilityIgnoresInvertColorsViewModifier.active.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

SwiftUI::_AccessibilityIgnoresInvertColorsViewModifier __swiftcall _AccessibilityIgnoresInvertColorsViewModifier.init(active:)(Swift::Bool active)
{
  return (SwiftUI::_AccessibilityIgnoresInvertColorsViewModifier)active;
}

uint64_t protocol witness for Rule.value.getter in conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier.value.getter();
  *a1 = result & 1;
  return result;
}

double protocol witness for Rule.value.getter in conformance _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment@<D0>(_OWORD *a1@<X8>)
{
  long long v3 = *(_OWORD *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  if (EnvironmentValues.accessibilityInvertColors.getter()) {
    AGGraphGetValue();
  }
  EnvironmentValues.ignoreInvertColorsFilterActive.setter();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance _AccessibilityIgnoresInvertColorsViewModifier()
{
}

uint64_t sub_187F2B1E8()
{
  swift_release();

  return swift_deallocObject();
}

_UNKNOWN **base witness table accessor for ViewModifier in _AccessibilityIgnoresInvertColorsViewModifier()
{
  return &protocol witness table for _AccessibilityIgnoresInvertColorsViewModifier;
}

uint64_t sub_187F2B230()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier()
{
  return &unk_1ED465790;
}

unsigned char *storeEnumTagSinglePayload for _AccessibilityIgnoresInvertColorsViewModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187F2B370);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IgnoreColorInvertEffect()
{
  return &type metadata for IgnoreColorInvertEffect;
}

ValueMetadata *type metadata accessor for IgnoreInvertColorsFilterActiveKey()
{
  return &type metadata for IgnoreInvertColorsFilterActiveKey;
}

uint64_t sub_187F2B3BC()
{
  outlined consume of GraphicsFilter(*(void **)(v0 + 16), *(void *)(v0 + 24), *(id *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(_DWORD *)(v0 + 128), BYTE2(*(_DWORD *)(v0 + 128)));

  return swift_deallocObject();
}

void outlined consume of GraphicsFilter(void *a1, int a2, id a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, char a16)
{
  if (a16 == 15)
  {
  }
  else if (a16 == 1)
  {
    outlined consume of VariableBlurStyle.Mask(a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, HIBYTE(a15));
  }
}

void outlined consume of VariableBlurStyle.Mask(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, unsigned __int8 a14)
{
  if (a14 << 8 != 512) {
    outlined consume of GraphicsImage.Contents?(a1, a2);
  }
}

void *type metadata accessor for _AccessibilityIgnoresInvertColorsViewModifier.ChildEnvironment()
{
  return &unk_1ED465810;
}

uint64_t property wrapper backing initializer of MapAnimator.state(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AdapterState();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - v5, a1, v2, v4);
  State.init(wrappedValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t MapAnimator.state.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  type metadata accessor for AdapterState();
  uint64_t v3 = type metadata accessor for State();
  return a2(v3);
}

uint64_t MapAnimator.init(value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = type metadata accessor for AdapterState();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v24 - v17;
  v24[0] = a4;
  v24[1] = a5;
  v24[2] = a6;
  v24[3] = a7;
  uint64_t v19 = type metadata accessor for MapAnimator();
  uint64_t v20 = type metadata accessor for AdapterState.PlaybackState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v18, 1, 1, v20);
  property wrapper backing initializer of MapAnimator.state((uint64_t)v18);
  type metadata accessor for Optional();
  uint64_t v21 = type metadata accessor for Binding();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(a8, a1, v21);
  uint64_t v23 = (void *)(a8 + *(int *)(v19 + 56));
  *uint64_t v23 = a2;
  v23[1] = a3;
  return result;
}

uint64_t type metadata accessor for AdapterState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for MapAnimator()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AdapterState.PlaybackState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MapAnimator.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v49 = a2;
  uint64_t v5 = *(a1 - 1);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v50 = *(void *)(v8 + 16);
  uint64_t v9 = type metadata accessor for AdapterState();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  Swift::String v12 = (char *)&v36 - v11;
  MapAnimator.state.getter((uint64_t)a1, MEMORY[0x1E4F41570]);
  BOOL v13 = AdapterState.isPlaying.getter(v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v67 = 0x3F81111111111111;
  BOOL v68 = !v13;
  uint64_t v14 = *(void (**)(char *, uint64_t, void *))(v5 + 16);
  uint64_t v46 = v5 + 16;
  uint64_t v48 = v14;
  uint64_t v39 = v7;
  v14(v7, v3, a1);
  uint64_t v15 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v45 = ((v15 + 48) & ~v15) + v6;
  uint64_t v16 = (v15 + 48) & ~v15;
  uint64_t v43 = v16;
  uint64_t v44 = v15 | 7;
  uint64_t v17 = (char *)swift_allocObject();
  uint64_t v19 = a1[3];
  uint64_t v18 = a1[4];
  *((void *)v17 + 2) = v50;
  *((void *)v17 + 3) = v19;
  uint64_t v40 = v19;
  uint64_t v37 = a1[5];
  uint64_t v20 = v37;
  *((void *)v17 + 4) = v18;
  *((void *)v17 + 5) = v20;
  uint64_t v21 = v18;
  uint64_t v38 = v18;
  uint64_t v22 = *(void (**)(char *, char *, void *))(v5 + 32);
  uint64_t v41 = v5 + 32;
  uint64_t v42 = v22;
  v22(&v17[v16], v7, a1);
  type metadata accessor for _ValueActionModifier2<Date>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  uint64_t v66 = v21;
  swift_getWitnessTable();
  type metadata accessor for _ValueActionModifier2();
  type metadata accessor for ModifiedContent();
  uint64_t v23 = type metadata accessor for ModifiedContent();
  unint64_t v36 = lazy protocol witness table accessor for type AnimationTimelineSchedule and conformance AnimationTimelineSchedule();
  uint64_t v24 = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type _ValueActionModifier2<Date> and conformance _ValueActionModifier2<A>, (void (*)(uint64_t))type metadata accessor for _ValueActionModifier2<Date>);
  uint64_t v25 = v37;
  uint64_t v64 = v37;
  uint64_t v65 = v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v27 = MEMORY[0x1E4F40ED8];
  uint64_t v62 = WitnessTable;
  uint64_t v63 = MEMORY[0x1E4F40ED8];
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v60 = v28;
  uint64_t v61 = v29;
  uint64_t v58 = swift_getWitnessTable();
  uint64_t v59 = v27;
  uint64_t v30 = swift_getWitnessTable();
  TimelineView<>.init(_:content:)((uint64_t)&v67, (uint64_t)partial apply for closure #1 in MapAnimator.body.getter, (uint64_t)v17, (uint64_t)&type metadata for AnimationTimelineSchedule, v23, v36, v30, (uint64_t)&v72);
  uint64_t v53 = v72;
  BOOL v54 = v73;
  *(_OWORD *)uint64_t v55 = *(_OWORD *)v74;
  uint64_t v31 = v39;
  v48(v39, v47, a1);
  uint64_t v32 = (char *)swift_allocObject();
  uint64_t v33 = v40;
  *((void *)v32 + 2) = v50;
  *((void *)v32 + 3) = v33;
  *((void *)v32 + 4) = v38;
  *((void *)v32 + 5) = v25;
  v42(&v32[v43], v31, a1);
  type metadata accessor for TimelineView();
  uint64_t v57 = v30;
  uint64_t v34 = swift_getWitnessTable();
  View.transaction(_:)();
  swift_release();
  swift_release();
  uint64_t v53 = v67;
  BOOL v54 = v68;
  *(void *)uint64_t v55 = v69;
  long long v50 = v70;
  *(_OWORD *)&v55[8] = v70;
  uint64_t v56 = v71;
  type metadata accessor for ModifiedContent();
  uint64_t v51 = v34;
  uint64_t v52 = MEMORY[0x1E4F40740];
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v53);
  swift_release();
  swift_release();
  uint64_t v67 = v72;
  BOOL v68 = v73;
  long long v50 = *(_OWORD *)&v74[8];
  long long v70 = *(_OWORD *)&v74[8];
  uint64_t v69 = *(void *)v74;
  uint64_t v71 = v75;
  static ViewBuilder.buildExpression<A>(_:)(&v67);
  swift_release();
  return swift_release();
}

BOOL AdapterState.isPlaying.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  double v3 = MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v3);
  uint64_t v6 = type metadata accessor for AdapterState.PlaybackState();
  int v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (v7 != 1) {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  }
  return v7 != 1;
}

uint64_t closure #1 in MapAnimator.body.getter@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v94 = a6;
  uint64_t v102 = a2;
  long long v95 = a1;
  uint64_t v98 = a7;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v97 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  long long v96 = (char *)&v73 - v12;
  uint64_t v114 = a3;
  uint64_t v115 = a4;
  uint64_t v116 = a5;
  uint64_t v117 = a6;
  uint64_t v13 = a5;
  uint64_t v101 = a5;
  uint64_t v14 = type metadata accessor for MapAnimator();
  uint64_t v87 = *(void *)(v14 - 8);
  uint64_t v90 = *(void *)(v87 + 64);
  MEMORY[0x1F4188790](v14);
  uint64_t v84 = (char *)&v73 - v15;
  uint64_t v81 = type metadata accessor for Date();
  uint64_t v104 = *(void *)(v81 - 8);
  MEMORY[0x1F4188790](v81);
  long long v79 = (char *)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = a3;
  type metadata accessor for AdapterState();
  uint64_t v17 = type metadata accessor for Binding();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v73 - v18;
  uint64_t v76 = type metadata accessor for MapAnimatorProxy();
  uint64_t v75 = *(void *)(v76 - 8);
  MEMORY[0x1F4188790](v76);
  uint64_t v21 = (char *)&v73 - v20;
  uint64_t v82 = v11;
  uint64_t v74 = type metadata accessor for Binding();
  uint64_t v22 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v73 - v26;
  uint64_t v73 = a4;
  uint64_t v78 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v28);
  long long v100 = (char *)&v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ValueActionModifier2<Date>();
  uint64_t v86 = type metadata accessor for ModifiedContent();
  uint64_t v80 = type metadata accessor for ModifiedContent();
  uint64_t v93 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  uint64_t v103 = (char *)&v73 - v30;
  uint64_t v113 = v13;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v88 = type metadata accessor for _ValueActionModifier2();
  uint64_t v89 = type metadata accessor for ModifiedContent();
  uint64_t v91 = type metadata accessor for ModifiedContent();
  uint64_t v92 = *(void *)(v91 - 8);
  MEMORY[0x1F4188790](v91);
  long long v77 = (char *)&v73 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  v85 = (char *)&v73 - v33;
  uint64_t v34 = v102;
  uint64_t v35 = *(void (**)(char *, char *))(v102 + *(int *)(v14 + 56));
  MapAnimator.contentBinding.getter(v14, (uint64_t)v27);
  MapAnimator.state.getter(v14, MEMORY[0x1E4F41578]);
  ItemSheetPresentationModifier.item.getter(v14, MEMORY[0x1E4F41628]);
  uint64_t v36 = (uint64_t)v19;
  uint64_t v37 = v99;
  MapAnimatorProxy.init(state:underlyingValue:)(v36, (uint64_t)v24, (uint64_t)v21);
  v35(v27, v21);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v21, v76);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v74);
  uint64_t v38 = v79;
  uint64_t v39 = v81;
  (*(void (**)(char *, void, uint64_t))(v104 + 16))(v79, v95, v81);
  uint64_t v40 = v87;
  long long v95 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
  uint64_t v41 = v84;
  v95(v84, v34, v14);
  uint64_t v42 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v43 = (v42 + 48) & ~v42;
  v90 += v43;
  uint64_t v76 = v43;
  uint64_t v75 = v42 | 7;
  uint64_t v44 = (void *)swift_allocObject();
  v44[2] = v37;
  uint64_t v45 = v73;
  uint64_t v46 = v101;
  v44[3] = v73;
  v44[4] = v46;
  uint64_t v47 = v94;
  v44[5] = v94;
  uint64_t v48 = (char *)v44 + v43;
  uint64_t v87 = *(void *)(v40 + 32);
  uint64_t v49 = v41;
  ((void (*)(char *, char *, uint64_t))v87)(v48, v41, v14);
  lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
  long long v50 = v38;
  uint64_t v51 = v45;
  uint64_t v52 = v39;
  uint64_t v53 = v47;
  BOOL v54 = v100;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v104 + 8))(v50, v52);
  uint64_t v55 = v51;
  (*(void (**)(char *, uint64_t))(v78 + 8))(v54, v51);
  uint64_t v56 = v96;
  uint64_t v57 = v102;
  ItemSheetPresentationModifier.item.getter(v14, MEMORY[0x1E4F41620]);
  v95(v49, v57, v14);
  uint64_t v58 = (void *)swift_allocObject();
  v58[2] = v99;
  v58[3] = v55;
  v58[4] = v101;
  v58[5] = v53;
  ((void (*)(char *, char *, uint64_t))v87)((char *)v58 + v76, v49, v14);
  uint64_t v59 = lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type _ValueActionModifier2<Date> and conformance _ValueActionModifier2<A>, (void (*)(uint64_t))type metadata accessor for _ValueActionModifier2<Date>);
  uint64_t v111 = v53;
  uint64_t v112 = v59;
  uint64_t v60 = swift_getWitnessTable();
  uint64_t v61 = MEMORY[0x1E4F40ED8];
  uint64_t v109 = v60;
  uint64_t v110 = MEMORY[0x1E4F40ED8];
  uint64_t v62 = v80;
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v64 = v77;
  uint64_t v65 = v56;
  uint64_t v66 = v82;
  uint64_t v67 = v103;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v97 + 8))(v65, v66);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v67, v62);
  uint64_t v68 = swift_getWitnessTable();
  uint64_t v107 = v63;
  uint64_t v108 = v68;
  uint64_t v105 = swift_getWitnessTable();
  uint64_t v106 = v61;
  uint64_t v69 = v91;
  swift_getWitnessTable();
  long long v70 = v85;
  static ViewBuilder.buildExpression<A>(_:)(v64);
  uint64_t v71 = *(void (**)(char *, uint64_t))(v92 + 8);
  v71(v64, v69);
  static ViewBuilder.buildExpression<A>(_:)(v70);
  return ((uint64_t (*)(char *, uint64_t))v71)(v70, v69);
}

uint64_t partial apply for closure #1 in MapAnimator.body.getter@<X0>(void (*a1)(char *, uint64_t, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = *(void *)(type metadata accessor for MapAnimator() - 8);
  uint64_t v10 = (uint64_t)v2 + ((*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return closure #1 in MapAnimator.body.getter(a1, v10, v5, v6, v7, v8, a2);
}

void type metadata accessor for _ValueActionModifier2<Date>()
{
  if (!lazy cache variable for type metadata for _ValueActionModifier2<Date>)
  {
    type metadata accessor for Date();
    lazy protocol witness table accessor for type Date and conformance Date(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
    unint64_t v0 = type metadata accessor for _ValueActionModifier2();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ValueActionModifier2<Date>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnimationTimelineSchedule and conformance AnimationTimelineSchedule()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationTimelineSchedule and conformance AnimationTimelineSchedule;
  if (!lazy protocol witness table cache variable for type AnimationTimelineSchedule and conformance AnimationTimelineSchedule)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationTimelineSchedule and conformance AnimationTimelineSchedule);
  }
  return result;
}

uint64_t MapAnimator.contentBinding.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v68 = a2;
  uint64_t v70 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for AdapterState();
  uint64_t v54 = v4;
  uint64_t v67 = type metadata accessor for Binding();
  uint64_t v71 = *(void *)(v67 - 8);
  uint64_t v66 = *(void *)(v71 + 64);
  MEMORY[0x1F4188790](v67);
  uint64_t v65 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v64 = (char *)&v51 - v7;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v69 = v8;
  uint64_t v9 = type metadata accessor for Binding();
  uint64_t v61 = *(void *)(v9 - 8);
  uint64_t v62 = v9;
  uint64_t v63 = *(void *)(v61 + 64);
  MEMORY[0x1F4188790](v9);
  uint64_t v60 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v59 = (char *)&v51 - v12;
  uint64_t v13 = *(void *)(v8 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  MEMORY[0x1F4188790](v15);
  uint64_t v52 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v51 - v17;
  uint64_t v19 = *(void *)(v4 - 8);
  uint64_t v20 = *(void *)(v19 + 64);
  MEMORY[0x1F4188790](v21);
  uint64_t v53 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v51 - v23;
  uint64_t v51 = a1;
  uint64_t v55 = v2;
  MapAnimator.state.getter(a1, MEMORY[0x1E4F41570]);
  ItemSheetPresentationModifier.item.getter(a1, MEMORY[0x1E4F41620]);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  uint64_t v26 = v54;
  v25((char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v54);
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v28 = v69;
  v27((char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v69);
  unint64_t v29 = (*(unsigned __int8 *)(v19 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v30 = (v20 + *(unsigned __int8 *)(v13 + 80) + v29) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v31 = (char *)swift_allocObject();
  *((void *)v31 + 2) = 0;
  *((void *)v31 + 3) = 0;
  uint64_t v32 = v51;
  uint64_t v34 = *(void *)(v51 + 24);
  uint64_t v58 = *(void *)(v51 + 32);
  uint64_t v33 = v58;
  *((void *)v31 + 4) = v70;
  *((void *)v31 + 5) = v34;
  uint64_t v35 = *(void *)(v32 + 40);
  uint64_t v56 = v34;
  uint64_t v57 = v35;
  *((void *)v31 + 6) = v33;
  *((void *)v31 + 7) = v35;
  v25(&v31[v29], v53, v26);
  v27(&v31[v30], v52, v28);
  uint64_t v36 = v59;
  ItemSheetPresentationModifier.item.getter(v32, MEMORY[0x1E4F41628]);
  uint64_t v37 = v64;
  MapAnimator.state.getter(v32, MEMORY[0x1E4F41578]);
  uint64_t v38 = v60;
  uint64_t v39 = v61 + 32;
  uint64_t v61 = *(void *)(v61 + 32);
  uint64_t v40 = v62;
  ((void (*)(char *, char *, uint64_t))v61)(v60, v36, v62);
  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
  v71 += 32;
  uint64_t v41 = v71;
  uint64_t v43 = v65;
  uint64_t v44 = v67;
  v42(v65, v37, v67);
  unint64_t v45 = (*(unsigned __int8 *)(v39 + 48) + 64) & ~(unint64_t)*(unsigned __int8 *)(v39 + 48);
  unint64_t v46 = (v63 + *(unsigned __int8 *)(v41 + 48) + v45) & ~(unint64_t)*(unsigned __int8 *)(v41 + 48);
  uint64_t v47 = (char *)swift_allocObject();
  *((void *)v47 + 2) = 0;
  *((void *)v47 + 3) = 0;
  uint64_t v48 = v56;
  *((void *)v47 + 4) = v70;
  *((void *)v47 + 5) = v48;
  uint64_t v49 = v57;
  *((void *)v47 + 6) = v58;
  *((void *)v47 + 7) = v49;
  ((void (*)(char *, char *, uint64_t))v61)(&v47[v45], v38, v40);
  v42(&v47[v46], v43, v44);
  return Binding.init(get:set:)();
}

uint64_t MapAnimatorProxy.init(state:underlyingValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for AdapterState();
  uint64_t v6 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t v7 = a3 + *(int *)(type metadata accessor for MapAnimatorProxy() + 28);
  type metadata accessor for Optional();
  uint64_t v8 = type metadata accessor for Binding();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32);

  return v9(v7, a2, v8);
}

uint64_t closure #1 in closure #1 in MapAnimator.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = type metadata accessor for AdapterState();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v18 - v14;
  v18[0] = a4;
  v18[1] = a5;
  v18[2] = a6;
  v18[3] = a7;
  type metadata accessor for MapAnimator();
  uint64_t v16 = type metadata accessor for State();
  State.wrappedValue.getter();
  AdapterState.update(date:)(a2, v12);
  specialized State.wrappedValue.setter((uint64_t)v15, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t AdapterState.update(date:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for AdapterState.PlaybackState();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = *(void *)(a2 - 8);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v14, v3, a2, v12);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v14, 1, v6);
  if (result != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v3, a2);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v14, v6);
    Date.timeIntervalSince(_:)();
    double v17 = v16;
    type metadata accessor for KeyframeTimeline();
    KeyframeTimeline.duration.getter();
    if (v18 >= v17)
    {
      uint64_t v21 = &v9[*(int *)(v6 + 28)];
      uint64_t v22 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24))(v21, a1, v22);
      (*(void (**)(uint64_t, char *, uint64_t))(v7 + 16))(v3, v9, v6);
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v19 = *(void (**)(uint64_t))&v9[*(int *)(v6 + 40)];
      swift_retain();
      uint64_t v20 = 1;
      v19(1);
      swift_release();
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v3, v20, 1, v6);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return result;
}

uint64_t MapAnimator.handleChangeOfUnderlyingValue(to:)(char *a1, uint64_t a2)
{
  long long v50 = a1;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v52 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v44 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v46 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v8 = (char *)v40 - v7;
  uint64_t v53 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v45 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v40 - v12;
  uint64_t v14 = type metadata accessor for AdapterState.PlaybackState();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  double v17 = (char *)v40 - v16;
  uint64_t v18 = type metadata accessor for AdapterState();
  uint64_t v48 = *(void *)(v18 - 8);
  uint64_t v49 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v47 = (char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v40 - v21;
  MapAnimator.state.getter(a2, MEMORY[0x1E4F41570]);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v22, 1, v14);
  if (result != 1)
  {
    v40[1] = v2;
    v40[2] = a2;
    uint64_t v43 = v15;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v22, v14);
    uint64_t v41 = v14;
    uint64_t v42 = v17;
    uint64_t v24 = v52;
    (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v13, &v17[*(int *)(v14 + 36)], v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v13, 0, 1, v4);
    uint64_t v25 = &v8[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v53 + 16);
    v26(v8, v13, v6);
    v26(v25, v50, v6);
    uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
    uint64_t v28 = v8;
    if (v27(v8, 1, v4) == 1)
    {
      unint64_t v29 = *(void (**)(char *, uint64_t))(v53 + 8);
      v29(v13, v6);
      int v30 = v27(v25, 1, v4);
      uint64_t v31 = v41;
      if (v30 == 1)
      {
        v29(v28, v6);
        return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v31);
      }
    }
    else
    {
      uint64_t v32 = v45;
      v26(v45, v28, v6);
      if (v27(v25, 1, v4) != 1)
      {
        uint64_t v33 = v52;
        uint64_t v34 = v44;
        (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v44, v25, v4);
        LODWORD(TupleTypeMetadata2) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v35 = *(void (**)(char *, uint64_t))(v33 + 8);
        v35(v34, v4);
        uint64_t v36 = *(void (**)(char *, uint64_t))(v53 + 8);
        v36(v13, v6);
        v35(v32, v4);
        v36(v28, v6);
        uint64_t v31 = v41;
        if (TupleTypeMetadata2) {
          return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v31);
        }
LABEL_9:
        uint64_t v37 = v49;
        uint64_t v38 = type metadata accessor for State();
        uint64_t v39 = (uint64_t)v47;
        State.wrappedValue.getter();
        AdapterState.stop()(v37);
        specialized State.wrappedValue.setter(v39, v38);
        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v39, v37);
        return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v42, v31);
      }
      (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v6);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v32, v4);
      uint64_t v31 = v41;
    }
    (*(void (**)(char *, uint64_t))(v46 + 8))(v28, TupleTypeMetadata2);
    goto LABEL_9;
  }
  return result;
}

uint64_t closure #2 in MapAnimator.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = type metadata accessor for AdapterState();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v16 - v12;
  v16[0] = a3;
  v16[1] = a4;
  void v16[2] = a5;
  v16[3] = a6;
  uint64_t v14 = type metadata accessor for MapAnimator();
  MapAnimator.state.getter(v14, MEMORY[0x1E4F41570]);
  LOBYTE(a6) = AdapterState.isPlaying.getter(v10);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (a6) {
    return Transaction.tracksVelocity.setter();
  }
  return result;
}

uint64_t partial apply for closure #2 in MapAnimator.body.getter(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for MapAnimator() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #2 in MapAnimator.body.getter(a1, v8, v3, v4, v5, v6);
}

uint64_t AdapterState.stop()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AdapterState.PlaybackState();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v14 - v6;
  uint64_t v8 = *(void *)(a1 - 8);
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v12, v2, a1, v10);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v12, 1, v4);
  if (result != 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v2, a1);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v12, v4);
    (*(void (**)(void))&v7[*(int *)(v4 + 40)])(0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v2, 1, 1, v4);
  }
  return result;
}

uint64_t AdapterState.value(with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = type metadata accessor for AdapterState.PlaybackState();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v21 - v11;
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v16, v4, a2, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9) == 1)
  {
    uint64_t v18 = type metadata accessor for Optional();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(a3, a1, v18);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, v9);
    Date.timeIntervalSince(_:)();
    uint64_t v20 = *(void *)(v8 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(a3, &v12[*(int *)(v9 + 36)], v8);
    type metadata accessor for KeyframeTimeline();
    KeyframeTimeline.update(value:time:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(a3, 0, 1, v8);
  }
}

uint64_t closure #2 in MapAnimator.contentBinding.getter()
{
  uint64_t v0 = type metadata accessor for AdapterState();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v6 - v2;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  specialized Binding.wrappedValue.setter();
  uint64_t v4 = type metadata accessor for AdapterState.PlaybackState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  type metadata accessor for Binding();
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

BOOL MapAnimatorProxy.isPlaying.getter()
{
  uint64_t v0 = type metadata accessor for AdapterState();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v7 - v2;
  uint64_t v4 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v4);
  BOOL v5 = AdapterState.isPlaying.getter(v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

uint64_t MapAnimatorProxy.play(defaultValue:keyframes:completion:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v50 = a6;
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v44 = a3;
  unint64_t v45 = a2;
  uint64_t v46 = a1;
  uint64_t v7 = *(void *)(a6 + 16);
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v51 = v8;
  uint64_t v52 = v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v49 = (char *)&v35 - v10;
  uint64_t v37 = type metadata accessor for AdapterState();
  uint64_t v43 = *(void *)(v37 - 8);
  MEMORY[0x1F4188790](v37);
  uint64_t v12 = (char *)&v35 - v11;
  uint64_t v38 = v7;
  uint64_t v13 = type metadata accessor for KeyframeTimeline();
  uint64_t v39 = *(void *)(v13 - 8);
  uint64_t v40 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v35 - v14;
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v35 - v18;
  uint64_t v20 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v35 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v23;
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v41 = *(void *)(v24 - 8);
  uint64_t v42 = v24;
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()();
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v6, v16);
  v45(v27);
  MEMORY[0x18C113DA0](v16);
  uint64_t v28 = (uint64_t)v23;
  uint64_t v29 = v37;
  AdapterState.play(tracks:currentValue:date:completion:)((uint64_t)v15, v46, (uint64_t)v26, v47, v48, v37, v28);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v40);
  specialized Binding.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v29);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  int v30 = v49;
  uint64_t v31 = v36;
  uint64_t v32 = v38;
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v49, v36, v38);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v30, 0, 1, v32);
  uint64_t v33 = v51;
  type metadata accessor for Binding();
  specialized Binding.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v30, v33);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v31, v32);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v26, v42);
}

uint64_t AdapterState.play(tracks:currentValue:date:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8 = v7;
  uint64_t v59 = a5;
  uint64_t v56 = a7;
  uint64_t v57 = a4;
  uint64_t v52 = a3;
  uint64_t v49 = a2;
  uint64_t v10 = *(void *)(a6 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v54 = a1;
  uint64_t v55 = v11;
  MEMORY[0x1F4188790](a1);
  uint64_t v53 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for KeyframeTimeline();
  uint64_t v50 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v51 = (char *)&v44 - v14;
  uint64_t v48 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v47 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v44 - v18;
  uint64_t v20 = type metadata accessor for AdapterState.PlaybackState();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v44 - v22;
  double v25 = MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, double))(v28 + 32);
  uint64_t v58 = v8;
  v29(v27, v8, a6, v25);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v27, 1, v20) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v27, v20);
    (*(void (**)(void))&v23[*(int *)(v20 + 40)])(0);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }
  uint64_t v46 = v20;
  uint64_t v30 = v56;
  uint64_t v55 = *(void *)(v55 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v56, v49, v10);
  uint64_t v49 = v10;
  uint64_t v45 = v13;
  uint64_t v31 = v54;
  KeyframeTimeline.duration.getter();
  KeyframeTimeline.update(value:time:)();
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v33 = (uint64_t)v19;
  uint64_t v34 = v19;
  uint64_t v35 = v21;
  uint64_t v36 = v52;
  uint64_t v37 = v48;
  v32(v34, v52, v48);
  uint64_t v38 = (uint64_t)v47;
  v32(v47, v36, v37);
  uint64_t v39 = (uint64_t)v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v51, v31, v45);
  uint64_t v40 = (uint64_t)v53;
  uint64_t v41 = v49;
  ((void (*)(char *, uint64_t, uint64_t))v55)(v53, v30, v49);
  uint64_t v42 = v58;
  AdapterState.PlaybackState.init(startDate:currentDate:tracks:targetValue:completion:)(v33, v38, v39, v40, v57, v59, v41, v58);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v42, 0, 1, v46);
  return swift_retain();
}

Swift::Void __swiftcall MapAnimatorProxy.stop()()
{
  uint64_t v0 = type metadata accessor for AdapterState();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v4 - v2;
  type metadata accessor for Binding();
  MEMORY[0x18C113DA0]();
  AdapterState.stop()(v0);
  specialized Binding.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t AdapterState.PlaybackState.init(startDate:currentDate:tracks:targetValue:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32);
  v16(a8, a1, v15);
  uint64_t v17 = (int *)type metadata accessor for AdapterState.PlaybackState();
  v16(a8 + v17[7], a2, v15);
  uint64_t v18 = a8 + v17[8];
  uint64_t v19 = type metadata accessor for KeyframeTimeline();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(v18, a3, v19);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8 + v17[9], a4, a7);
  uint64_t v21 = (void *)(a8 + v17[10]);
  *uint64_t v21 = a5;
  v21[1] = a6;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MapAnimator<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for MapAnimator()
{
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    type metadata accessor for AdapterState();
    uint64_t result = type metadata accessor for State();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MapAnimator(void *a1, void *a2, uint64_t a3)
{
  uint64_t v78 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v78 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(unsigned int *)(v5 + 84);
  unint64_t v8 = (v6 + 16) & ~(unint64_t)v6;
  uint64_t v9 = *(void *)(v5 + 64);
  if (v7) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = v9 + 1;
  }
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = a2;
  uint64_t v13 = *(void *)(v11 - 8);
  int v15 = *(_DWORD *)(v13 + 80);
  unsigned int v14 = *(_DWORD *)(v13 + 84);
  uint64_t v77 = v13;
  uint64_t v16 = v15;
  uint64_t v17 = v6 | 7;
  unint64_t v18 = v15 | (unint64_t)v6;
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v19 = 0x7FFFFFFF;
  }
  else {
    unsigned int v19 = v7;
  }
  if (v19 <= v14) {
    unsigned int v20 = *(_DWORD *)(v13 + 84);
  }
  else {
    unsigned int v20 = v19;
  }
  if (v7 <= v20) {
    unsigned int v21 = v20;
  }
  else {
    unsigned int v21 = v7;
  }
  uint64_t v22 = *(void *)(*(void *)(v11 - 8) + 64);
  uint64_t v23 = v9 + 7;
  unint64_t v24 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + v6 + 8;
  unint64_t v25 = (v9
       + 7
       + ((v24 + ((v22 + v17 + ((v22 + v15) & ~(unint64_t)v15)) & ~v17)) & ~(unint64_t)v6)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *v12;
  *a1 = *v12;
  if (v18 > 7
    || ((v15 | v6) & 0x100000) != 0
    || (((v18 | 7) + v8 + v10) & ~(v18 | 7)) + ((v25 + 23) & 0xFFFFFFFFFFFFFFF8) + 8 + 16 > 0x18)
  {
    uint64_t v29 = (void *)(v26 + ((v18 + 16) & ~(v18 | 7)));
    goto LABEL_38;
  }
  unint64_t v67 = v8 + v10;
  unsigned int v68 = v14;
  uint64_t v69 = ~(v18 | 7);
  unsigned int v70 = v21;
  unsigned int v71 = v19;
  unsigned int v72 = v20;
  unint64_t v74 = v25;
  unint64_t v75 = ((v25 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v62 = v22 + v15;
  uint64_t v63 = v22 + v17;
  unint64_t v64 = v24;
  uint64_t v65 = v11;
  uint64_t v61 = v23;
  uint64_t v76 = a1;
  uint64_t v30 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v73 = v12;
  uint64_t v31 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v30 = *v31;
  __dst = (void *)(((unint64_t)v30 + v6 + 8) & ~(unint64_t)v6);
  unint64_t v60 = ~(unint64_t)v6;
  uint64_t v32 = (const void *)(((unint64_t)v31 + v6 + 8) & v60);
  uint64_t v33 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_retain();
  swift_retain();
  if (v33(v32, 1, v78))
  {
    uint64_t v35 = v5;
    memcpy(__dst, v32, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(__dst, v32, v78);
    uint64_t v35 = v5;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(__dst, 0, 1, v78);
  }
  uint64_t v36 = ~v16;
  uint64_t v37 = ~v17;
  uint64_t v29 = a1;
  uint64_t v38 = (char *)(((unint64_t)a1 + v67 + 7) & v69);
  uint64_t v39 = (char *)(((unint64_t)v73 + v67 + 7) & v69);
  if (v68 != v70)
  {
    unint64_t v42 = (v63 + ((unint64_t)&v39[v62] & v36)) & v37;
    uint64_t v41 = v35;
    if (v71 == v70)
    {
      if (v7 >= 0x7FFFFFFF)
      {
LABEL_29:
        unsigned int v40 = v33((const void *)v42, v7, v78);
        goto LABEL_34;
      }
    }
    else
    {
      unint64_t v42 = (v64 + v42) & v60;
      if (v7 >= v72) {
        goto LABEL_29;
      }
    }
    unint64_t v43 = *(void *)((v61 + v42) & 0xFFFFFFFFFFFFFFF8);
    if (v43 >= 0xFFFFFFFF) {
      LODWORD(v43) = -1;
    }
    unsigned int v40 = v43 + 1;
    goto LABEL_34;
  }
  unsigned int v40 = (*(uint64_t (**)(unint64_t))(v77 + 48))(((unint64_t)v73 + v67 + 7) & v69);
  uint64_t v41 = v35;
LABEL_34:
  if (v40)
  {
    memcpy(v38, v39, v74 + 16);
  }
  else
  {
    uint64_t v44 = v36;
    uint64_t v45 = v37;
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v77 + 16);
    v46(v38, v39, v65);
    unint64_t v47 = (unint64_t)&v38[v62] & v44;
    unint64_t v48 = (unint64_t)&v39[v62] & v44;
    v46((char *)v47, (char *)v48, v65);
    unint64_t v49 = (v63 + v47) & v45;
    unint64_t v50 = (v63 + v48) & v45;
    uint64_t v51 = *(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 16);
    v51(v49, v50, v78);
    *(void *)((v61 + v49) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v61 + v50) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v52 = (v64 + v49) & v60;
    unint64_t v53 = (v64 + v50) & v60;
    swift_bridgeObjectRetain();
    v51(v52, v53, v78);
    unint64_t v54 = v61 + v52;
    uint64_t v29 = v76;
    uint64_t v55 = (void *)((v61 + v53) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v56 = v55[1];
    v54 &= 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v54 = *v55;
    *(void *)(v54 + 8) = v56;
    swift_retain();
  }
  *(void *)&v38[v74 + 16] = *(void *)&v39[v74 + 16];
  uint64_t v57 = &v38[v75];
  uint64_t v58 = *(void *)&v39[v75 + 8];
  *(void *)uint64_t v57 = *(void *)&v39[v75];
  *((void *)v57 + 1) = v58;
  swift_retain();
LABEL_38:
  swift_retain();
  return v29;
}

uint64_t destroy for MapAnimator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = ((v4 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7;
  uint64_t v32 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v32(v8, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v33 = v5;
  uint64_t v35 = ~v7;
  uint64_t v9 = *(unsigned int *)(v6 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v13 = *(void *)(v11 - 8);
  uint64_t v14 = v13;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = v7 | 7;
  uint64_t v17 = ((v7 + 16) & ~v7) + a1 + v10;
  if (!v9) {
    ++v17;
  }
  uint64_t v36 = (v17 + (v7 | 7 | v15)) & ~(v7 | 7 | v15);
  unsigned int v18 = *(_DWORD *)(v13 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v19 = 0x7FFFFFFF;
  }
  else {
    unsigned int v19 = v9;
  }
  if (v19 <= v18) {
    unsigned int v20 = *(_DWORD *)(v13 + 84);
  }
  else {
    unsigned int v20 = v19;
  }
  if (v9 <= v20) {
    unsigned int v21 = v20;
  }
  else {
    unsigned int v21 = v9;
  }
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v22 = v10 + 7;
  unint64_t v34 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v18 == v21)
  {
    uint64_t v23 = *(void *)(v12 + 64);
    uint64_t v24 = v11;
    if (!(*(unsigned int (**)(uint64_t))(v13 + 48))(v36)) {
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(v12 + 64);
  unint64_t v25 = (v23 + v16 + ((v23 + v15 + v36) & ~v15)) & ~v16;
  uint64_t v24 = v11;
  if (v19 == v21)
  {
    if (v9 >= 0x7FFFFFFF) {
      goto LABEL_19;
    }
LABEL_22:
    unint64_t v26 = *(void *)((v22 + v25) & 0xFFFFFFFFFFFFFFF8);
    if (v26 >= 0xFFFFFFFF) {
      LODWORD(v26) = -1;
    }
    if (v26 == -1) {
      goto LABEL_25;
    }
    goto LABEL_26;
  }
  unint64_t v25 = (v34 + v7 + v25) & v35;
  if (v9 < v20) {
    goto LABEL_22;
  }
LABEL_19:
  if (!v32(v25, v9, v33))
  {
LABEL_25:
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v27(v36, v24);
    uint64_t v28 = (v23 + v15 + v36) & ~v15;
    v27(v28, v24);
    uint64_t v29 = (v23 + (v7 | 7) + v28) & ~v16;
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v30(v29, v33);
    swift_bridgeObjectRelease();
    v30((v34 + v7 + v29) & v35, v33);
    swift_release();
  }
LABEL_26:
  swift_release();

  return swift_release();
}

void *initializeWithCopy for MapAnimator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v67 = ~v9;
  uint64_t v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  uint64_t v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  swift_retain();
  unint64_t v60 = v12;
  uint64_t v65 = v7;
  if (v12((unint64_t)v11, 1, v7))
  {
    uint64_t v13 = *(unsigned int *)(v8 + 84);
    uint64_t v14 = *(void *)(v8 + 64);
    if (v13) {
      size_t v15 = *(void *)(v8 + 64);
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, v7);
    uint64_t v13 = *(unsigned int *)(v8 + 84);
    uint64_t v14 = *(void *)(v8 + 64);
  }
  if (v13) {
    uint64_t v16 = v14 + ((v9 + 16) & v67);
  }
  else {
    uint64_t v16 = v14 + ((v9 + 16) & v67) + 1;
  }
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = v18;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = v9 | 7;
  uint64_t v22 = v9 | 7 | v20;
  uint64_t v66 = a1;
  uint64_t v23 = (char *)(((unint64_t)a1 + v22 + v16) & ~v22);
  uint64_t v24 = (char *)(((unint64_t)a2 + v22 + v16) & ~v22);
  unsigned int v25 = *(_DWORD *)(v18 + 84);
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v26 = 0x7FFFFFFF;
  }
  else {
    unsigned int v26 = v13;
  }
  if (v26 <= v25) {
    unsigned int v27 = *(_DWORD *)(v18 + 84);
  }
  else {
    unsigned int v27 = v26;
  }
  if (v13 <= v27) {
    unsigned int v28 = v27;
  }
  else {
    unsigned int v28 = v13;
  }
  uint64_t v29 = *(void *)(*(void *)(v17 - 8) + 64);
  uint64_t v30 = v29 + v20;
  uint64_t v31 = v29 + v21;
  uint64_t v32 = v14 + 7;
  unint64_t v33 = (v32 & 0xFFFFFFFFFFFFFFF8) + v9 + 8;
  unint64_t v34 = (v32 + ((v33 + ((v29 + v21 + ((v29 + v20) & ~v20)) & ~v21)) & v67)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v63 = ~v21;
  uint64_t v64 = v8;
  uint64_t v62 = ~v20;
  if (v25 == v28)
  {
    uint64_t v35 = v17;
    size_t v36 = v34 + 16;
    if (!(*(unsigned int (**)(char *))(v18 + 48))(v24)) {
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  unint64_t v37 = (v31 + ((unint64_t)&v24[v30] & ~v20)) & ~v21;
  uint64_t v35 = v17;
  if (v26 == v28)
  {
    if (v13 >= 0x7FFFFFFF) {
      goto LABEL_24;
    }
LABEL_27:
    unint64_t v39 = *(void *)((v32 + v37) & 0xFFFFFFFFFFFFFFF8);
    if (v39 >= 0xFFFFFFFF) {
      LODWORD(v39) = -1;
    }
    size_t v36 = v34 + 16;
    if (v39 == -1) {
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  unint64_t v37 = (v33 + v37) & v67;
  if (v13 < v27) {
    goto LABEL_27;
  }
LABEL_24:
  int v38 = v60(v37, v13, v65);
  size_t v36 = v34 + 16;
  if (!v38)
  {
LABEL_30:
    unint64_t v61 = v34;
    unsigned int v40 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v40(v23, v24, v35);
    unint64_t v41 = (unint64_t)&v23[v30];
    uint64_t v59 = v23;
    unint64_t v42 = v33;
    unint64_t v43 = v41 & v62;
    unint64_t v44 = (unint64_t)&v24[v30] & v62;
    v40((char *)(v41 & v62), (char *)v44, v35);
    uint64_t v45 = (v31 + v43) & v63;
    unint64_t v46 = (v31 + v44) & v63;
    unint64_t v47 = *(void (**)(uint64_t, unint64_t, uint64_t))(v64 + 16);
    v47(v45, v46, v65);
    *(void *)((v32 + v45) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v32 + v46) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v48 = (v42 + v45) & v67;
    unint64_t v49 = v42 + v46;
    uint64_t v23 = v59;
    uint64_t v50 = v49 & v67;
    swift_bridgeObjectRetain();
    v47(v48, v50, v65);
    unint64_t v51 = v32 + v48;
    unint64_t v34 = v61;
    unint64_t v52 = (void *)((v32 + v50) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v53 = v52[1];
    v51 &= 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v51 = *v52;
    *(void *)(v51 + 8) = v53;
    swift_retain();
    goto LABEL_31;
  }
LABEL_25:
  memcpy(v23, v24, v36);
LABEL_31:
  *(void *)&v23[v36] = *(void *)&v24[v36];
  unint64_t v54 = ((v34 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v55 = &v23[v54];
  uint64_t v56 = &v24[v54];
  uint64_t v57 = *((void *)v56 + 1);
  *(void *)uint64_t v55 = *(void *)v56;
  *((void *)v55 + 1) = v57;
  swift_retain();
  swift_retain();
  return v66;
}

void *assignWithCopy for MapAnimator(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)(v6 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v121 = ~v11;
  uint64_t v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  uint64_t v13 = (void *)((v11 + 8 + v8) & ~v11);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v8) = v14(v12, 1, v9);
  uint64_t v112 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))v14;
  int v15 = v14(v13, 1, v9);
  uint64_t v119 = v9;
  if (v8)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_12;
    }
    int v16 = *(_DWORD *)(v10 + 84);
    size_t v17 = *(void *)(v10 + 64);
  }
  else
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v12, v13, v9);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    int v16 = *(_DWORD *)(v10 + 84);
    size_t v17 = *(void *)(v10 + 64);
  }
  if (v16) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v17 + 1;
  }
  memcpy(v12, v13, v18);
LABEL_12:
  uint64_t v19 = *(unsigned int *)(v10 + 84);
  uint64_t v116 = (void *)v10;
  uint64_t v20 = *(void *)(v10 + 64);
  if (v19) {
    uint64_t v21 = v20 + ((v11 + 16) & v121);
  }
  else {
    uint64_t v21 = v20 + ((v11 + 16) & v121) + 1;
  }
  uint64_t v22 = type metadata accessor for Date();
  uint64_t v23 = v22;
  uint64_t v24 = *(void *)(v22 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = v11 | 7;
  uint64_t v27 = v11 | 7 | v25;
  uint64_t v28 = v27 + v21;
  v120 = a1;
  uint64_t v29 = (char *)(((unint64_t)a1 + v27 + v21) & ~v27);
  uint64_t v30 = (char *)(((unint64_t)a2 + v28) & ~v27);
  uint64_t v31 = *(unsigned int *)(v24 + 84);
  if (v19 <= 0x7FFFFFFF) {
    unsigned int v32 = 0x7FFFFFFF;
  }
  else {
    unsigned int v32 = v19;
  }
  if (v32 <= v31) {
    unsigned int v33 = *(_DWORD *)(v24 + 84);
  }
  else {
    unsigned int v33 = v32;
  }
  if (v19 <= v33) {
    unsigned int v34 = v33;
  }
  else {
    unsigned int v34 = v19;
  }
  uint64_t v35 = *(void *)(*(void *)(v22 - 8) + 64);
  uint64_t v36 = ~v25;
  uint64_t v37 = v35 + v25;
  uint64_t v38 = ~v26;
  uint64_t v39 = v35 + v26;
  uint64_t v40 = (v35 + v26 + ((v35 + v25) & ~v25)) & ~v26;
  uint64_t v41 = v20 + 7;
  unint64_t v42 = ((v20 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  unint64_t v117 = (v41 + ((v42 + v40) & v121)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v118 = v41;
  uint64_t v114 = ~v26;
  unint64_t v115 = v42;
  uint64_t v113 = v39;
  if (v31 == v34)
  {
    unint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
    uint64_t v44 = v36;
    uint64_t v45 = v37;
    int v46 = v43(v29, v31, v22);
    int v47 = v43(v30, v31, v23);
    uint64_t v37 = v45;
    uint64_t v36 = v44;
    unint64_t v48 = v120;
    unint64_t v49 = v117;
    if (!v46)
    {
LABEL_66:
      unint64_t v90 = (unint64_t)&v29[v37] & v36;
      if (!v47)
      {
        uint64_t v98 = *(void (**)(char *, char *, uint64_t))(v24 + 24);
        uint64_t v99 = v36;
        uint64_t v100 = v37;
        v98(v29, v30, v23);
        v98((char *)v90, (char *)((unint64_t)&v30[v100] & v99), v23);
        unint64_t v101 = (v113 + v90) & v114;
        unint64_t v102 = (v113 + ((unint64_t)&v30[v100] & v99)) & v114;
        uint64_t v103 = (void (*)(unint64_t, unint64_t, uint64_t))v116[3];
        v103(v101, v102, v119);
        *(void *)((v118 + v101) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v118 + v102) & 0xFFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain();
        unint64_t v48 = v120;
        swift_bridgeObjectRelease();
        unint64_t v104 = (v115 + v101) & v121;
        unint64_t v105 = (v115 + v102) & v121;
        v103(v104, v105, v119);
        uint64_t v106 = (void *)((v118 + v104) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v107 = (void *)((v118 + v105) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v108 = v107[1];
        *uint64_t v106 = *v107;
        v106[1] = v108;
        swift_retain();
        swift_release();
        unint64_t v86 = v117 + 16;
        goto LABEL_69;
      }
      uint64_t v91 = *(void (**)(char *, uint64_t))(v24 + 8);
      v91(v29, v23);
      v91((char *)v90, v23);
      uint64_t v92 = (void (*)(unint64_t, uint64_t))v116[1];
      v92((v113 + v90) & v114, v119);
      swift_bridgeObjectRelease();
      v92((v115 + ((v113 + v90) & v114)) & v121, v119);
      swift_release();
      goto LABEL_68;
    }
    goto LABEL_55;
  }
  uint64_t v110 = v22;
  uint64_t v111 = *(void *)(v22 - 8);
  uint64_t v109 = v29;
  unint64_t v50 = (v39 + ((unint64_t)&v29[v37] & v36)) & v38;
  if (v32 != v34)
  {
    unint64_t v50 = (v42 + v50) & v121;
    if (v19 >= v33)
    {
      unsigned int v60 = v33;
      unsigned int v61 = v34;
      uint64_t v53 = ~v26;
      uint64_t v54 = v39;
      uint64_t v55 = v36;
      uint64_t v56 = v37;
      int v57 = v112(v50, v19, v119);
      unsigned int v34 = v61;
      unsigned int v33 = v60;
      goto LABEL_35;
    }
LABEL_31:
    unint64_t v58 = *(void *)((v41 + v50) & 0xFFFFFFFFFFFFFFF8);
    if (v58 >= 0xFFFFFFFF) {
      LODWORD(v58) = -1;
    }
    int v59 = v58 + 1;
    goto LABEL_36;
  }
  if (v19 < 0x7FFFFFFF) {
    goto LABEL_31;
  }
  unsigned int v51 = v33;
  unsigned int v52 = v34;
  uint64_t v53 = ~v26;
  uint64_t v54 = v39;
  uint64_t v55 = v36;
  uint64_t v56 = v37;
  int v57 = v112(v50, v19, v119);
  unsigned int v34 = v52;
  unsigned int v33 = v51;
LABEL_35:
  uint64_t v37 = v56;
  uint64_t v36 = v55;
  uint64_t v39 = v54;
  uint64_t v38 = v53;
  int v59 = v57;
LABEL_36:
  unint64_t v48 = v120;
  unint64_t v62 = (v39 + ((unint64_t)&v30[v37] & v36)) & v38;
  if (!v59)
  {
    if (v32 == v34)
    {
      uint64_t v24 = v111;
      if (v19 < 0x7FFFFFFF)
      {
        unint64_t v87 = *(void *)((v118 + v62) & 0xFFFFFFFFFFFFFFF8);
        if (v87 >= 0xFFFFFFFF) {
          LODWORD(v87) = -1;
        }
        int v47 = v87 + 1;
      }
      else
      {
        uint64_t v65 = v36;
        uint64_t v66 = v37;
        int v47 = v112(v62, v19, v119);
        uint64_t v37 = v66;
        uint64_t v36 = v65;
      }
      uint64_t v29 = v109;
      uint64_t v23 = v110;
      unint64_t v49 = v117;
    }
    else
    {
      unint64_t v70 = (v42 + v62) & v121;
      if (v19 >= v33)
      {
        uint64_t v88 = v36;
        uint64_t v89 = v37;
        int v47 = v112(v70, v19, v119);
        uint64_t v37 = v89;
        uint64_t v36 = v88;
      }
      else
      {
        unint64_t v71 = *(void *)((v118 + v70) & 0xFFFFFFFFFFFFFFF8);
        if (v71 >= 0xFFFFFFFF) {
          LODWORD(v71) = -1;
        }
        int v47 = v71 + 1;
      }
      uint64_t v29 = v109;
      uint64_t v23 = v110;
      unint64_t v49 = v117;
      uint64_t v24 = v111;
    }
    goto LABEL_66;
  }
  if (v32 != v34)
  {
    unint64_t v67 = (v42 + v62) & v121;
    if (v19 >= v33)
    {
      uint64_t v73 = v36;
      uint64_t v74 = v37;
      int v69 = v112(v67, v19, v119);
      uint64_t v37 = v74;
      uint64_t v36 = v73;
    }
    else
    {
      unint64_t v68 = *(void *)((v118 + v67) & 0xFFFFFFFFFFFFFFF8);
      if (v68 >= 0xFFFFFFFF) {
        LODWORD(v68) = -1;
      }
      int v69 = v68 + 1;
    }
    uint64_t v29 = v109;
    uint64_t v23 = v110;
    unint64_t v49 = v117;
    uint64_t v24 = v111;
    if (!v69) {
      goto LABEL_59;
    }
LABEL_68:
    unint64_t v86 = v117 + 16;
    memcpy(v29, v30, v117 + 16);
    goto LABEL_69;
  }
  uint64_t v24 = v111;
  if (v19 < 0x7FFFFFFF)
  {
    unint64_t v72 = *(void *)((v118 + v62) & 0xFFFFFFFFFFFFFFF8);
    if (v72 >= 0xFFFFFFFF) {
      LODWORD(v72) = -1;
    }
    int v47 = v72 + 1;
  }
  else
  {
    uint64_t v63 = v36;
    uint64_t v64 = v37;
    int v47 = v112(v62, v19, v119);
    uint64_t v37 = v64;
    uint64_t v36 = v63;
  }
  uint64_t v29 = v109;
  uint64_t v23 = v110;
  unint64_t v49 = v117;
LABEL_55:
  if (v47) {
    goto LABEL_68;
  }
LABEL_59:
  unint64_t v75 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  uint64_t v76 = v36;
  uint64_t v77 = v37;
  v75(v29, v30, v23);
  v75((char *)((unint64_t)&v29[v77] & v76), (char *)((unint64_t)&v30[v77] & v76), v23);
  unint64_t v78 = (v113 + ((unint64_t)&v29[v77] & v76)) & v114;
  unint64_t v48 = v120;
  unint64_t v79 = (v113 + ((unint64_t)&v30[v77] & v76)) & v114;
  uint64_t v80 = (void (*)(unint64_t, unint64_t, uint64_t))v116[2];
  v80(v78, v79, v119);
  *(void *)((v118 + v78) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v118 + v79) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v81 = (v115 + v78) & v121;
  unint64_t v82 = (v115 + v79) & v121;
  swift_bridgeObjectRetain();
  v80(v81, v82, v119);
  uint64_t v83 = (void *)((v118 + v82) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v84 = v83[1];
  v85 = (void *)((v118 + v81) & 0xFFFFFFFFFFFFFFF8);
  void *v85 = *v83;
  v85[1] = v84;
  swift_retain();
  unint64_t v86 = v117 + 16;
LABEL_69:
  *(void *)&v29[v86] = *(void *)&v30[v86];
  swift_retain();
  swift_release();
  unint64_t v93 = ((v49 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v94 = &v29[v93];
  long long v95 = &v30[v93];
  uint64_t v96 = *((void *)v95 + 1);
  *(void *)uint64_t v94 = *(void *)v95;
  *((void *)v94 + 1) = v96;
  swift_retain();
  swift_release();
  return v48;
}

void *initializeWithTake for MapAnimator(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v63 = ~v9;
  uint64_t v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  uint64_t v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v60 = v8;
  uint64_t v61 = v7;
  if (v12(v11, 1, v7))
  {
    uint64_t v13 = *(unsigned int *)(v8 + 84);
    uint64_t v14 = *(void *)(v8 + 64);
    if (v13) {
      size_t v15 = *(void *)(v8 + 64);
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, v7);
    size_t v17 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v16 = v8 + 56;
    v17(v10, 0, 1, v7);
    uint64_t v13 = *(unsigned int *)(v16 + 28);
    uint64_t v14 = *(void *)(v16 + 8);
  }
  if (v13) {
    uint64_t v18 = v14 + ((v9 + 16) & v63);
  }
  else {
    uint64_t v18 = v14 + ((v9 + 16) & v63) + 1;
  }
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = v20;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = v9 | 7;
  uint64_t v24 = v9 | 7 | v22;
  unint64_t v62 = a1;
  uint64_t v25 = (char *)(((unint64_t)a1 + v24 + v18) & ~v24);
  uint64_t v26 = (char *)(((unint64_t)a2 + v24 + v18) & ~v24);
  unsigned int v27 = *(_DWORD *)(v20 + 84);
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v28 = 0x7FFFFFFF;
  }
  else {
    unsigned int v28 = v13;
  }
  if (v28 <= v27) {
    unsigned int v29 = *(_DWORD *)(v20 + 84);
  }
  else {
    unsigned int v29 = v28;
  }
  if (v13 <= v29) {
    unsigned int v30 = v29;
  }
  else {
    unsigned int v30 = v13;
  }
  uint64_t v31 = *(void *)(*(void *)(v19 - 8) + 64);
  uint64_t v32 = v31 + v22;
  uint64_t v33 = v31 + v23;
  uint64_t v34 = v14 + 7;
  unint64_t v35 = (v34 & 0xFFFFFFFFFFFFFFF8) + v9 + 8;
  unint64_t v36 = (v34 + ((v35 + ((v31 + v23 + ((v31 + v22) & ~v22)) & ~v23)) & v63)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v58 = ~v22;
  uint64_t v59 = ~v23;
  if (v27 == v30)
  {
    uint64_t v37 = v19;
    size_t v38 = v36 + 16;
    if (!(*(unsigned int (**)(char *))(v20 + 48))(v26)) {
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  uint64_t v39 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))v12;
  unint64_t v40 = (v33 + ((unint64_t)&v26[v32] & ~v22)) & ~v23;
  uint64_t v37 = v19;
  if (v28 == v30)
  {
    if (v13 >= 0x7FFFFFFF) {
      goto LABEL_24;
    }
LABEL_27:
    unint64_t v42 = *(void *)((v34 + v40) & 0xFFFFFFFFFFFFFFF8);
    if (v42 >= 0xFFFFFFFF) {
      LODWORD(v42) = -1;
    }
    size_t v38 = v36 + 16;
    if (v42 == -1) {
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  unint64_t v40 = (v35 + v40) & v63;
  if (v13 < v29) {
    goto LABEL_27;
  }
LABEL_24:
  int v41 = v39(v40, v13, v61);
  size_t v38 = v36 + 16;
  if (!v41)
  {
LABEL_30:
    unint64_t v57 = v36;
    unint64_t v43 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v43(v25, v26, v37);
    unint64_t v44 = (unint64_t)&v25[v32];
    uint64_t v56 = v25;
    unint64_t v45 = v35;
    unint64_t v46 = v44 & v58;
    unint64_t v47 = (unint64_t)&v26[v32] & v58;
    v43((char *)(v44 & v58), (char *)v47, v37);
    uint64_t v48 = (v33 + v46) & v59;
    unint64_t v49 = (v33 + v47) & v59;
    unint64_t v50 = *(void (**)(uint64_t, unint64_t, uint64_t))(v60 + 32);
    v50(v48, v49, v61);
    *(void *)((v34 + v48) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v34 + v49) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v51 = (v45 + v48) & v63;
    unint64_t v52 = v45 + v49;
    uint64_t v25 = v56;
    uint64_t v53 = v52 & v63;
    v50(v51, v52 & v63, v61);
    uint64_t v54 = v34 + v51;
    unint64_t v36 = v57;
    *(_OWORD *)(v54 & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v34 + v53) & 0xFFFFFFFFFFFFFFF8);
    goto LABEL_31;
  }
LABEL_25:
  memcpy(v25, v26, v38);
LABEL_31:
  *(void *)&v25[v38] = *(void *)&v26[v38];
  *(_OWORD *)&v25[((v36 + 23) & 0xFFFFFFFFFFFFFFF8) + 8] = *(_OWORD *)&v26[((v36 + 23) & 0xFFFFFFFFFFFFFFF8) + 8];
  return v62;
}

void *assignWithTake for MapAnimator(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)(v6 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v113 = ~v11;
  uint64_t v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  uint64_t v13 = (void *)((v11 + 8 + v8) & ~v11);
  uint64_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  unint64_t v104 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))v14;
  int v16 = v14(v13, 1, v9);
  uint64_t v111 = v9;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_12;
    }
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  else
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
    int v17 = *(_DWORD *)(v10 + 84);
    size_t v18 = *(void *)(v10 + 64);
  }
  if (v17) {
    size_t v19 = v18;
  }
  else {
    size_t v19 = v18 + 1;
  }
  memcpy(v12, v13, v19);
LABEL_12:
  uint64_t v20 = *(unsigned int *)(v10 + 84);
  uint64_t v108 = (void *)v10;
  uint64_t v21 = *(void *)(v10 + 64);
  if (v20) {
    uint64_t v22 = v21 + ((v11 + 16) & v113);
  }
  else {
    uint64_t v22 = v21 + ((v11 + 16) & v113) + 1;
  }
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v24 = v23;
  uint64_t v25 = *(void *)(v23 - 8);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v11 | 7;
  uint64_t v28 = v11 | 7 | v26;
  uint64_t v29 = v28 + v22;
  uint64_t v112 = a1;
  unsigned int v30 = (char *)(((unint64_t)a1 + v28 + v22) & ~v28);
  uint64_t v31 = (char *)(((unint64_t)a2 + v29) & ~v28);
  uint64_t v32 = *(unsigned int *)(v25 + 84);
  if (v20 <= 0x7FFFFFFF) {
    unsigned int v33 = 0x7FFFFFFF;
  }
  else {
    unsigned int v33 = v20;
  }
  if (v33 <= v32) {
    unsigned int v34 = *(_DWORD *)(v25 + 84);
  }
  else {
    unsigned int v34 = v33;
  }
  if (v20 <= v34) {
    unsigned int v35 = v34;
  }
  else {
    unsigned int v35 = v20;
  }
  uint64_t v36 = *(void *)(*(void *)(v23 - 8) + 64);
  uint64_t v37 = ~v26;
  uint64_t v38 = v36 + v26;
  uint64_t v39 = ~v27;
  uint64_t v40 = v36 + v27;
  uint64_t v41 = (v36 + v27 + ((v36 + v26) & ~v26)) & ~v27;
  uint64_t v42 = v21 + 7;
  unint64_t v43 = ((v21 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  unint64_t v110 = (v42 + ((v43 + v41) & v113)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v109 = v42;
  uint64_t v106 = ~v27;
  uint64_t v107 = *(void **)(v23 - 8);
  uint64_t v105 = v40;
  if (v32 != v35)
  {
    unint64_t v102 = v30;
    uint64_t v103 = v23;
    unint64_t v52 = (v40 + ((unint64_t)&v30[v38] & v37)) & v39;
    if (v33 == v35)
    {
      if (v20 >= 0x7FFFFFFF)
      {
LABEL_30:
        unsigned int v53 = v35;
        uint64_t v54 = ~v27;
        uint64_t v55 = v40;
        uint64_t v56 = v37;
        uint64_t v57 = v38;
        int v58 = v104(v52, v20, v111);
        unsigned int v35 = v53;
        uint64_t v38 = v57;
        uint64_t v37 = v56;
        uint64_t v40 = v55;
        uint64_t v39 = v54;
        int v59 = v58;
LABEL_35:
        unint64_t v50 = v112;
        unint64_t v61 = (v40 + ((unint64_t)&v31[v38] & v37)) & v39;
        if (v59)
        {
          if (v33 == v35)
          {
            uint64_t v24 = v103;
            if (v20 < 0x7FFFFFFF)
            {
              unint64_t v72 = *(void *)((v109 + v61) & 0xFFFFFFFFFFFFFFF8);
              if (v72 >= 0xFFFFFFFF) {
                LODWORD(v72) = -1;
              }
              int v64 = v72 + 1;
            }
            else
            {
              uint64_t v62 = v37;
              uint64_t v63 = v38;
              int v64 = v104(v61, v20, v111);
              uint64_t v38 = v63;
              uint64_t v37 = v62;
            }
            unsigned int v30 = v102;
            size_t v51 = v110 + 16;
            if (!v64) {
              goto LABEL_57;
            }
          }
          else
          {
            unint64_t v67 = (v43 + v61) & v113;
            if (v20 >= v34)
            {
              uint64_t v73 = v37;
              uint64_t v74 = v38;
              int v69 = v104(v67, v20, v111);
              uint64_t v38 = v74;
              uint64_t v37 = v73;
            }
            else
            {
              unint64_t v68 = *(void *)((v109 + v67) & 0xFFFFFFFFFFFFFFF8);
              if (v68 >= 0xFFFFFFFF) {
                LODWORD(v68) = -1;
              }
              int v69 = v68 + 1;
            }
            unsigned int v30 = v102;
            uint64_t v24 = v103;
            size_t v51 = v110 + 16;
            if (!v69) {
              goto LABEL_57;
            }
          }
LABEL_67:
          memcpy(v30, v31, v51);
          goto LABEL_68;
        }
        if (v33 == v35)
        {
          uint64_t v24 = v103;
          if (v20 < 0x7FFFFFFF)
          {
            unint64_t v86 = *(void *)((v109 + v61) & 0xFFFFFFFFFFFFFFF8);
            if (v86 >= 0xFFFFFFFF) {
              LODWORD(v86) = -1;
            }
            int v49 = v86 + 1;
          }
          else
          {
            uint64_t v65 = v37;
            uint64_t v66 = v38;
            int v49 = v104(v61, v20, v111);
            uint64_t v38 = v66;
            uint64_t v37 = v65;
          }
          unsigned int v30 = v102;
        }
        else
        {
          unint64_t v70 = (v43 + v61) & v113;
          if (v20 >= v34)
          {
            uint64_t v87 = v37;
            uint64_t v88 = v38;
            int v49 = v104(v70, v20, v111);
            uint64_t v38 = v88;
            uint64_t v37 = v87;
          }
          else
          {
            unint64_t v71 = *(void *)((v109 + v70) & 0xFFFFFFFFFFFFFFF8);
            if (v71 >= 0xFFFFFFFF) {
              LODWORD(v71) = -1;
            }
            int v49 = v71 + 1;
          }
          unsigned int v30 = v102;
          uint64_t v24 = v103;
        }
        size_t v51 = v110 + 16;
LABEL_65:
        unint64_t v89 = (unint64_t)&v30[v38] & v37;
        if (!v49)
        {
          unint64_t v93 = (void (*)(char *, char *, uint64_t))v107[5];
          uint64_t v94 = v37;
          uint64_t v95 = v38;
          v93(v30, v31, v24);
          unint64_t v96 = (unint64_t)&v31[v95] & v94;
          v93((char *)v89, (char *)v96, v24);
          unint64_t v97 = (v105 + v89) & v106;
          unint64_t v98 = (v105 + v96) & v106;
          uint64_t v99 = (void (*)(unint64_t, unint64_t, uint64_t))v108[5];
          v99(v97, v98, v111);
          *(void *)((v109 + v97) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v109 + v98) & 0xFFFFFFFFFFFFFFF8);
          swift_bridgeObjectRelease();
          unint64_t v100 = (v43 + v97) & v113;
          unint64_t v101 = (v43 + v98) & v113;
          v99(v100, v101, v111);
          unint64_t v50 = v112;
          *(_OWORD *)((v109 + v100) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v109 + v101) & 0xFFFFFFFFFFFFFFF8);
          swift_release();
          goto LABEL_68;
        }
        unint64_t v90 = (void (*)(char *, uint64_t))v107[1];
        v90(v30, v24);
        v90((char *)v89, v24);
        uint64_t v91 = (void (*)(unint64_t, uint64_t))v108[1];
        v91((v105 + v89) & v106, v111);
        swift_bridgeObjectRelease();
        v91((v43 + ((v105 + v89) & v106)) & v113, v111);
        swift_release();
        goto LABEL_67;
      }
    }
    else
    {
      unint64_t v52 = (v43 + v52) & v113;
      if (v20 >= v34) {
        goto LABEL_30;
      }
    }
    unint64_t v60 = *(void *)((v42 + v52) & 0xFFFFFFFFFFFFFFF8);
    if (v60 >= 0xFFFFFFFF) {
      LODWORD(v60) = -1;
    }
    int v59 = v60 + 1;
    goto LABEL_35;
  }
  unint64_t v44 = v43;
  unint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v46 = v37;
  uint64_t v47 = v38;
  int v48 = v45(v30, v32, v23);
  int v49 = v45(v31, v32, v24);
  uint64_t v38 = v47;
  uint64_t v37 = v46;
  unint64_t v43 = v44;
  unint64_t v50 = v112;
  size_t v51 = v110 + 16;
  if (!v48) {
    goto LABEL_65;
  }
  if (v49) {
    goto LABEL_67;
  }
LABEL_57:
  unint64_t v75 = (void (*)(char *, char *, uint64_t))v107[4];
  uint64_t v76 = v37;
  uint64_t v77 = v38;
  v75(v30, v31, v24);
  unint64_t v78 = (unint64_t)&v30[v77] & v76;
  unint64_t v79 = (unint64_t)&v31[v77] & v76;
  v75((char *)v78, (char *)v79, v24);
  unint64_t v80 = (v105 + v78) & v106;
  uint64_t v81 = v105 + v79;
  unint64_t v50 = v112;
  uint64_t v82 = v81 & v106;
  uint64_t v83 = (void (*)(unint64_t, uint64_t, uint64_t))v108[4];
  v83(v80, v81 & v106, v111);
  *(void *)((v109 + v80) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v109 + v82) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v84 = (v43 + v80) & v113;
  unint64_t v85 = (v43 + v82) & v113;
  v83(v84, v85, v111);
  *(_OWORD *)((v109 + v84) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v109 + v85) & 0xFFFFFFFFFFFFFFF8);
LABEL_68:
  *(void *)&v30[v51] = *(void *)&v31[v51];
  swift_release();
  *(_OWORD *)&v30[((v110 + 23) & 0xFFFFFFFFFFFFFFF8) + 8] = *(_OWORD *)&v31[((v110 + 23) & 0xFFFFFFFFFFFFFFF8) + 8];
  swift_release();
  return v50;
}

uint64_t getEnumTagSinglePayload for MapAnimator(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned int *)(v6 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(v11 + 84);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v8;
  }
  if (v14 <= v13) {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  else {
    unsigned int v15 = v14;
  }
  if (v8 <= v15) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = v8;
  }
  if (v16 - 1 <= v10) {
    unsigned int v17 = v10;
  }
  else {
    unsigned int v17 = v16 - 1;
  }
  uint64_t v18 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v19 = *(void *)(v6 + 64);
  if (v8) {
    uint64_t v20 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  uint64_t v21 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v22 = *(void *)(v11 + 64);
  if (!a2) {
    return 0;
  }
  uint64_t v23 = v18 | 7;
  uint64_t v24 = v18 | 7 | v21;
  uint64_t v25 = v22 + v21;
  uint64_t v26 = (v18 | 7) + v22;
  uint64_t v27 = v19 + 7;
  unint64_t v28 = ((v19 + 7) & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  uint64_t v29 = v20 + ((v18 + 16) & ~v18) + v24;
  if (v17 < a2)
  {
    unint64_t v30 = (v29 & ~v24)
        + ((((v27 + ((v28 + ((v26 + (v25 & ~v21)) & ~v23)) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 24;
    if ((v30 & 0xFFFFFFF8) != 0) {
      unsigned int v31 = 2;
    }
    else {
      unsigned int v31 = a2 - v17 + 1;
    }
    if (v31 >= 0x10000) {
      unsigned int v32 = 4;
    }
    else {
      unsigned int v32 = 2;
    }
    if (v31 < 0x100) {
      unsigned int v32 = 1;
    }
    if (v31 >= 2) {
      uint64_t v33 = v32;
    }
    else {
      uint64_t v33 = 0;
    }
    switch(v33)
    {
      case 1:
        int v34 = *((unsigned __int8 *)a1 + v30);
        if (!*((unsigned char *)a1 + v30)) {
          break;
        }
        goto LABEL_40;
      case 2:
        int v34 = *(unsigned __int16 *)((char *)a1 + v30);
        if (*(_WORD *)((char *)a1 + v30)) {
          goto LABEL_40;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187F31870);
      case 4:
        int v34 = *(_DWORD *)((char *)a1 + v30);
        if (!v34) {
          break;
        }
LABEL_40:
        int v36 = v34 - 1;
        if ((v30 & 0xFFFFFFF8) != 0)
        {
          int v36 = 0;
          int v37 = *a1;
        }
        else
        {
          int v37 = 0;
        }
        return v17 + (v37 | v36) + 1;
      default:
        break;
    }
  }
  uint64_t v38 = ~v18;
  if (v10 < v16 - 1)
  {
    unint64_t v39 = ((unint64_t)a1 + v29) & ~v24;
    if (v13 == v16)
    {
      unsigned int v40 = (*(uint64_t (**)(unint64_t))(v12 + 48))(v39);
      goto LABEL_59;
    }
    uint64_t v43 = (v26 + ((v25 + v39) & ~v21)) & ~v23;
    if (v14 == v16)
    {
      if (v8 >= 0x7FFFFFFF) {
        goto LABEL_58;
      }
LABEL_55:
      unint64_t v44 = *(void *)((v27 + v43) & 0xFFFFFFFFFFFFFFF8);
      if (v44 >= 0xFFFFFFFF) {
        LODWORD(v44) = -1;
      }
      unsigned int v40 = v44 + 1;
      goto LABEL_59;
    }
    uint64_t v43 = (v28 + v43) & v38;
    if (v8 < v15) {
      goto LABEL_55;
    }
LABEL_58:
    unsigned int v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v7 + 48))(v43, v8, v5, v28);
LABEL_59:
    if (v40 >= 2) {
      return v40 - 1;
    }
    else {
      return 0;
    }
  }
  uint64_t v41 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v9 & 0x80000000) != 0)
  {
    uint64_t v43 = ((unint64_t)v41 + v18 + 8) & v38;
    goto LABEL_58;
  }
  unint64_t v42 = *v41;
  if (v42 >= 0xFFFFFFFF) {
    LODWORD(v42) = -1;
  }
  return (v42 + 1);
}

void storeEnumTagSinglePayload for MapAnimator(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v57 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v57 - 8);
  uint64_t v58 = v7;
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  int v11 = 0;
  uint64_t v12 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v13 = v12;
  uint64_t v14 = v7;
  unsigned int v15 = *(_DWORD *)(v12 + 84);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = v8;
  }
  if (v16 <= v15) {
    unsigned int v17 = *(_DWORD *)(v12 + 84);
  }
  else {
    unsigned int v17 = v16;
  }
  if (v8 <= v17) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = v8;
  }
  unsigned int v19 = v18 - 1;
  if (v18 - 1 <= v10) {
    unsigned int v20 = v10;
  }
  else {
    unsigned int v20 = v18 - 1;
  }
  uint64_t v21 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v22 = (v21 + 16) & ~v21;
  uint64_t v23 = *(void *)(v14 + 64);
  if (v8) {
    size_t v24 = *(void *)(v14 + 64);
  }
  else {
    size_t v24 = v23 + 1;
  }
  uint64_t v25 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v26 = v21 | 7 | v25;
  uint64_t v27 = *(void *)(v12 + 64);
  uint64_t v28 = v27 + v25;
  uint64_t v29 = (v21 | 7) + v27;
  uint64_t v30 = v23 + 7;
  unint64_t v31 = ((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + v21 + 8;
  unint64_t v32 = (v30 + ((v31 + ((v29 + ((v27 + v25) & ~v25)) & ~(v21 | 7))) & ~v21)) & 0xFFFFFFFFFFFFFFF8;
  size_t v33 = v22 + v24;
  size_t v34 = v22 + v24 + v26;
  unint64_t v35 = (v34 & ~v26) + ((v32 + 23) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v20 < a3)
  {
    if ((v34 & ~v26) + ((v32 + 23) & 0xFFFFFFF8) == -24) {
      unsigned int v36 = a3 - v20 + 1;
    }
    else {
      unsigned int v36 = 2;
    }
    if (v36 >= 0x10000) {
      int v37 = 4;
    }
    else {
      int v37 = 2;
    }
    if (v36 < 0x100) {
      int v37 = 1;
    }
    if (v36 >= 2) {
      int v11 = v37;
    }
    else {
      int v11 = 0;
    }
  }
  if (a2 > v20)
  {
    if ((v34 & ~v26) + ((v32 + 23) & 0xFFFFFFF8) == -24) {
      int v38 = a2 - v20;
    }
    else {
      int v38 = 1;
    }
    if ((v34 & ~v26) + ((v32 + 23) & 0xFFFFFFF8) != -24)
    {
      unsigned int v39 = ~v20 + a2;
      bzero(a1, (v34 & ~v26) + ((v32 + 23) & 0xFFFFFFFFFFFFFFF8) + 24);
      *(_DWORD *)a1 = v39;
    }
    switch(v11)
    {
      case 1:
        a1[v35] = v38;
        return;
      case 2:
        *(_WORD *)&a1[v35] = v38;
        return;
      case 3:
        goto LABEL_105;
      case 4:
        *(_DWORD *)&a1[v35] = v38;
        return;
      default:
        return;
    }
  }
  uint64_t v56 = ~v21;
  uint64_t v40 = ~v25;
  switch(v11)
  {
    case 1:
      a1[v35] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_49;
    case 2:
      *(_WORD *)&a1[v35] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_49;
    case 3:
LABEL_105:
      __break(1u);
      JUMPOUT(0x187F31DB8);
    case 4:
      *(_DWORD *)&a1[v35] = 0;
      goto LABEL_48;
    default:
LABEL_48:
      if (!a2) {
        return;
      }
LABEL_49:
      if (v10 < v19)
      {
        a1 = (unsigned char *)((unint64_t)&a1[v34] & ~v26);
        if (v19 < a2)
        {
          int v41 = (v32 + 23) & 0xFFFFFFF8;
          size_t v42 = (v41 + 8);
          if (v41 == -8) {
            return;
          }
          int v43 = a2 - v18;
          unint64_t v44 = a1;
LABEL_68:
          bzero(v44, v42);
LABEL_69:
          *(_DWORD *)a1 = v43;
          return;
        }
        uint64_t v47 = a2 + 1;
        if (v47 > v18)
        {
          if (v32 == -16) {
            return;
          }
          int v43 = a2 - v18;
          unint64_t v44 = a1;
          size_t v42 = (v32 + 16);
          goto LABEL_68;
        }
        if (a2 == -1) {
          return;
        }
        if (v15 == v18)
        {
          unint64_t v50 = *(void (**)(unsigned char *))(v13 + 56);
          v50(a1);
          return;
        }
        uint64_t v55 = (v29 + ((unint64_t)&a1[v28] & v40)) & ~(v21 | 7);
        if (v16 == v18)
        {
          if (v8 < 0x7FFFFFFF)
          {
            int v48 = (void *)((v30 + v55) & 0xFFFFFFFFFFFFFFF8);
            if ((v47 & 0x80000000) != 0)
            {
              uint64_t v49 = a2 - 0x7FFFFFFF;
LABEL_89:
              *int v48 = v49;
              return;
            }
LABEL_99:
            uint64_t v49 = a2;
            goto LABEL_89;
          }
        }
        else
        {
          uint64_t v55 = (v31 + v55) & v56;
          if (v8 < v17)
          {
            int v48 = (void *)((v30 + v55) & 0xFFFFFFFFFFFFFFF8);
            if ((v47 & 0x80000000) != 0)
            {
              uint64_t v49 = a2 - 0x7FFFFFFF;
              v48[1] = 0;
              goto LABEL_89;
            }
            goto LABEL_99;
          }
        }
        uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
LABEL_101:
        v54(v55, v47, v8, v57);
        return;
      }
      if (v10 < a2)
      {
        if (v33 <= 3) {
          int v45 = ~(-1 << (8 * v33));
        }
        else {
          int v45 = -1;
        }
        if (v33)
        {
          int v43 = v45 & (~v10 + a2);
          if (v33 <= 3) {
            int v46 = v33;
          }
          else {
            int v46 = 4;
          }
          bzero(a1, v33);
          switch(v46)
          {
            case 2:
              goto LABEL_87;
            case 3:
              goto LABEL_91;
            case 4:
              goto LABEL_69;
            default:
              goto LABEL_62;
          }
        }
        return;
      }
      int v48 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v9 & 0x80000000) == 0)
      {
        if ((a2 & 0x80000000) != 0) {
          uint64_t v49 = a2 ^ 0x80000000;
        }
        else {
          uint64_t v49 = a2 - 1;
        }
        goto LABEL_89;
      }
      uint64_t v51 = (uint64_t)v48 + v21 + 8;
      a1 = (unsigned char *)(v51 & v56);
      if (v9 >= a2)
      {
        uint64_t v47 = a2 + 1;
        uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56);
        uint64_t v55 = v51 & v56;
        goto LABEL_101;
      }
      if (v24 <= 3) {
        int v52 = ~(-1 << (8 * v24));
      }
      else {
        int v52 = -1;
      }
      if (v24)
      {
        int v43 = v52 & (~v9 + a2);
        if (v24 <= 3) {
          int v53 = v24;
        }
        else {
          int v53 = 4;
        }
        bzero(a1, v24);
        switch(v53)
        {
          case 2:
LABEL_87:
            *(_WORD *)a1 = v43;
            break;
          case 3:
LABEL_91:
            *(_WORD *)a1 = v43;
            a1[2] = BYTE2(v43);
            break;
          case 4:
            goto LABEL_69;
          default:
LABEL_62:
            *a1 = v43;
            break;
        }
      }
      return;
  }
}

uint64_t type metadata completion function for MapAnimatorProxy()
{
  type metadata accessor for AdapterState();
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Optional();
    uint64_t result = type metadata accessor for Binding();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MapAnimatorProxy(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v86 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v86 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  uint64_t v87 = v9;
  uint64_t v12 = v10;
  uint64_t v13 = v10 | 7;
  unint64_t v14 = v10 | (unint64_t)v8;
  unint64_t v15 = (v10 & 0xF8 | (unint64_t)(v8 & 0xF8)) ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = v15 & (v14 + 16);
  uint64_t v17 = *(unsigned int *)(v7 + 84);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v18 = 0x7FFFFFFF;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v9 + 84);
  }
  if (v18 <= v17) {
    unsigned int v19 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v19 = v18;
  }
  if (v11 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v21 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v22 = *(void *)(*(void *)(v86 - 8) + 64);
  unint64_t v23 = ((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + v10 + 8;
  unint64_t v24 = ((v22
        + 7
        + ((v23 + ((v13 + v21 + ((v21 + v8) & ~(unint64_t)v8)) & ~v13)) & ~(unint64_t)v10)) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v11) {
    size_t v25 = *(void *)(*(void *)(v86 - 8) + 64);
  }
  else {
    size_t v25 = v22 + 1;
  }
  uint64_t v26 = *a2;
  *a1 = *a2;
  BOOL v27 = v14 <= 7 && ((v10 | v8) & 0x100000) == 0;
  if (!v27
    || v25 + ((v10 + 16) & ~(unint64_t)v10) + ((v24 + v16 + v13) & ~v13) > 0x18)
  {
    a1 = (void *)(v26 + v16);
    swift_retain();
    return a1;
  }
  uint64_t v29 = a2;
  uint64_t v74 = v7;
  uint64_t v75 = v21 + v8;
  uint64_t v79 = v22 + 7;
  unint64_t v80 = ((v22
        + 7
        + ((v23 + ((v13 + v21 + (v75 & ~(unint64_t)v8)) & ~v13)) & ~(unint64_t)v10)) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v76 = v13 + v21;
  uint64_t v77 = v6;
  unint64_t v72 = ((v22 + 7) & 0xFFFFFFFFFFFFFFF8) + v10 + 8;
  size_t __n = v25;
  unint64_t v30 = ~(unint64_t)v8;
  uint64_t v31 = ~v13;
  unint64_t v83 = v24 + v16 + v13;
  unint64_t v84 = ~(unint64_t)v10;
  unint64_t v85 = a1;
  unint64_t v32 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v82 = v29;
  size_t v33 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v32 = *v33;
  __dst = (void *)(v15 & ((unint64_t)v32 + 15));
  uint64_t v34 = v15 & ((unint64_t)v33 + 15);
  swift_retain();
  swift_retain();
  uint64_t v81 = v31;
  if (v17 == v20)
  {
    int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v34, v17, v77);
    uint64_t v36 = v86;
    uint64_t v37 = v87;
    unint64_t v38 = v30;
    uint64_t v40 = v79;
    size_t v39 = v80;
    int v41 = (const void *)v34;
    if (v35)
    {
LABEL_24:
      memcpy(__dst, v41, v39);
      uint64_t v42 = ~v12;
      uint64_t v43 = v81;
      goto LABEL_36;
    }
  }
  else
  {
    unint64_t v44 = (v76 + ((v75 + v34) & v30)) & v31;
    BOOL v27 = v18 == v20;
    unint64_t v38 = v30;
    if (v27)
    {
      BOOL v45 = v11 >= 0x7FFFFFFF;
    }
    else
    {
      unint64_t v44 = (v72 + v44) & v84;
      BOOL v45 = v11 >= v19;
    }
    uint64_t v37 = v87;
    uint64_t v40 = v79;
    if (v45)
    {
      uint64_t v46 = v11;
      uint64_t v36 = v86;
      int v47 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v87 + 48))(v44, v46, v86);
    }
    else
    {
      unint64_t v48 = *(void *)((v79 + v44) & 0xFFFFFFFFFFFFFFF8);
      if (v48 >= 0xFFFFFFFF) {
        LODWORD(v48) = -1;
      }
      int v47 = v48 + 1;
      uint64_t v36 = v86;
    }
    size_t v39 = v80;
    int v41 = (const void *)v34;
    if (v47) {
      goto LABEL_24;
    }
  }
  uint64_t v49 = *(void (**)(void *))(v74 + 16);
  uint64_t v50 = v40;
  unint64_t v51 = v38;
  int v52 = v41;
  v49(__dst);
  unint64_t v53 = ((unint64_t)__dst + v75) & v38;
  unint64_t v54 = ((unint64_t)v52 + v75) & v51;
  ((void (*)(unint64_t, unint64_t, uint64_t))v49)(v53, v54, v77);
  uint64_t v43 = v31;
  unint64_t v55 = (v76 + v53) & v31;
  uint64_t v56 = (v76 + v54) & v31;
  uint64_t v57 = *(void (**)(unint64_t, uint64_t, uint64_t))(v87 + 16);
  v57(v55, v56, v36);
  *(void *)((v50 + v55) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v50 + v56) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v42 = ~v12;
  unint64_t v58 = (v72 + v55) & v84;
  unint64_t v59 = (v72 + v56) & v84;
  swift_bridgeObjectRetain();
  v57(v58, v59, v36);
  uint64_t v37 = v87;
  unint64_t v60 = v50 + v58;
  unint64_t v61 = v50 + v59;
  a1 = v85;
  v61 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v62 = *(void *)(v61 + 8);
  v60 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v60 = *(void *)v61;
  *(void *)(v60 + 8) = v62;
  swift_retain();
LABEL_36:
  uint64_t v63 = (void *)(((unint64_t)a1 + v83) & v43);
  int v64 = (void *)(((unint64_t)v82 + v83) & v43);
  *uint64_t v63 = *v64;
  uint64_t v65 = (void *)(((unint64_t)v63 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v66 = (void *)(((unint64_t)v64 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v65 = *v66;
  uint64_t v67 = v12 + 8;
  unint64_t v68 = (void *)(((unint64_t)v65 + v12 + 8) & v42);
  int v69 = (const void *)(((unint64_t)v66 + v67) & v42);
  unint64_t v70 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v37 + 48);
  swift_retain();
  swift_retain();
  if (v70(v69, 1, v36))
  {
    memcpy(v68, v69, __n);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v37 + 16))(v68, v69, v36);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v68, 0, 1, v36);
  }
  return a1;
}

uint64_t destroy for MapAnimatorProxy(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v47 = v10 | v7;
  uint64_t v11 = v10 | v7 | 7;
  uint64_t v12 = v10 | 7;
  unint64_t v13 = ((v4 & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & ~v11;
  uint64_t v14 = *(unsigned int *)(v6 + 84);
  unsigned int v15 = *(_DWORD *)(v9 + 84);
  uint64_t v16 = *(void *)(v6 + 64);
  uint64_t v17 = *(void *)(v9 + 64);
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v18 = 0x7FFFFFFF;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v9 + 84);
  }
  if (v18 <= v14) {
    unsigned int v19 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v19 = v18;
  }
  if (v15 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v21 = ~v7;
  uint64_t v22 = v16 + v7;
  uint64_t v23 = v17 + 7;
  uint64_t v49 = ~v10;
  uint64_t v50 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v24 = ((v17 + 7) & 0xFFFFFFFFFFFFFFF8) + v10 + 8;
  uint64_t v25 = v23 + ((v24 + ((v12 + v16 + ((v16 + v7) & ~v7)) & ~v12)) & ~v10);
  uint64_t v48 = ~v12;
  uint64_t v45 = v12 + v16;
  unint64_t v46 = v24;
  uint64_t v43 = v22;
  uint64_t v44 = v21;
  if (v14 == v20)
  {
    unint64_t v26 = v13;
    uint64_t v27 = v5;
    uint64_t v28 = v25;
    int v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v13, v14, v5);
    uint64_t v25 = v28;
    goto LABEL_19;
  }
  unint64_t v30 = (v12 + v16 + ((v22 + v13) & v21)) & ~v12;
  uint64_t v27 = v5;
  if (v18 == v20)
  {
    if (v15 >= 0x7FFFFFFF)
    {
LABEL_14:
      unint64_t v26 = v13;
      uint64_t v31 = v25;
      int v29 = (*(uint64_t (**)(unint64_t))(v9 + 48))(v30);
      uint64_t v25 = v31;
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v30 = (v24 + v30) & v49;
    if (v15 >= v19) {
      goto LABEL_14;
    }
  }
  unint64_t v26 = v13;
  unint64_t v32 = *(void *)((v23 + v30) & 0xFFFFFFFFFFFFFFF8);
  if (v32 >= 0xFFFFFFFF) {
    LODWORD(v32) = -1;
  }
  int v29 = v32 + 1;
LABEL_19:
  uint64_t v33 = ~v11;
  unint64_t v34 = v25 & 0xFFFFFFFFFFFFFFF8;
  if (!v29)
  {
    uint64_t v42 = v3;
    uint64_t v35 = v8;
    uint64_t v36 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
    v36(v26, v27);
    unint64_t v37 = (v43 + v26) & v44;
    v36(v37, v27);
    uint64_t v38 = (v45 + v37) & v48;
    size_t v39 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
    v39(v38, v35);
    swift_bridgeObjectRelease();
    v39((v46 + v38) & v49, v35);
    uint64_t v8 = v35;
    uint64_t v3 = v42;
    swift_release();
  }
  swift_release();
  swift_release();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v50 + 48))((v10 + ((((v3 + v12 + ((v47 + 16) & v33) + v34 + 16) & v48) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v49, 1, v8);
  if (!result)
  {
    int v41 = *(uint64_t (**)(unint64_t, uint64_t))(v50 + 8);
    return v41((v10 + ((((v3 + v12 + ((v47 + 16) & v33) + v34 + 16) & v48) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v49, v8);
  }
  return result;
}

void *initializeWithCopy for MapAnimatorProxy(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v62 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v62 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v70 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v70 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v9 | 7;
  uint64_t v11 = (v9 | v7) + 8;
  uint64_t v68 = v9 | v7;
  unint64_t v12 = (v9 | v7) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  __dst = (void *)(((unint64_t)v4 + v11) & v12);
  unint64_t v67 = v12;
  unint64_t v13 = (const void *)(((unint64_t)v5 + v11) & v12);
  uint64_t v14 = *(unsigned int *)(v6 + 84);
  uint64_t v74 = v8;
  unsigned int v15 = *(_DWORD *)(v8 + 84);
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v8 + 84);
  }
  if (v16 <= v14) {
    unsigned int v17 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v17 = v16;
  }
  unsigned int v72 = *(_DWORD *)(v8 + 84);
  if (v15 <= v17) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v19 = *(void *)(*(void *)(v62 - 8) + 64);
  uint64_t v20 = ~v7;
  uint64_t v21 = v19 + v7;
  uint64_t v22 = ~v10;
  uint64_t v23 = v10 + v19;
  uint64_t v66 = v9 | 7;
  size_t v61 = *(void *)(*(void *)(v70 - 8) + 64);
  uint64_t v73 = ~v9;
  unint64_t v59 = ((v61 + 7) & 0xFFFFFFFFFFFFFFF8) + v9 + 8;
  size_t v60 = v61 + 7;
  uint64_t v65 = *(unsigned __int8 *)(v8 + 80);
  unint64_t v63 = (v61 + 7 + ((v59 + ((v10 + v19 + ((v19 + v7) & ~v7)) & ~v10)) & ~v9)) & 0xFFFFFFFFFFFFFFF8;
  swift_retain();
  swift_retain();
  uint64_t v58 = v21;
  if (v14 == v18)
  {
    uint64_t v24 = v14;
    uint64_t v25 = v62;
    int v26 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v13, v24, v62);
    uint64_t v27 = v70;
    uint64_t v28 = v74;
    int v29 = v13;
  }
  else
  {
    uint64_t v25 = v62;
    unint64_t v30 = (v23 + (((unint64_t)v13 + v21) & v20)) & v22;
    BOOL v31 = v16 == v18;
    int v29 = v13;
    if (v31)
    {
      BOOL v32 = v72 >= 0x7FFFFFFF;
    }
    else
    {
      unint64_t v30 = (v59 + v30) & v73;
      BOOL v32 = v72 >= v17;
    }
    uint64_t v27 = v70;
    uint64_t v28 = v74;
    if (v32)
    {
      int v26 = (*(uint64_t (**)(unint64_t))(v74 + 48))(v30);
    }
    else
    {
      unint64_t v33 = *(void *)((v60 + v30) & 0xFFFFFFFFFFFFFFF8);
      if (v33 >= 0xFFFFFFFF) {
        LODWORD(v33) = -1;
      }
      int v26 = v33 + 1;
    }
  }
  if (v26)
  {
    memcpy(__dst, v29, v63 + 16);
    uint64_t v34 = v27;
    uint64_t v35 = v73;
    uint64_t v36 = v22;
  }
  else
  {
    unint64_t v37 = *(void (**)(void *, const void *, uint64_t))(v6 + 16);
    v37(__dst, v29, v25);
    unint64_t v38 = ((unint64_t)__dst + v58) & v20;
    unint64_t v39 = ((unint64_t)v29 + v58) & v20;
    v37((void *)v38, (const void *)v39, v25);
    uint64_t v36 = v22;
    unint64_t v40 = (v23 + v38) & v22;
    unint64_t v41 = (v23 + v39) & v22;
    uint64_t v42 = *(void (**)(unint64_t, unint64_t, uint64_t))(v74 + 16);
    v42(v40, v41, v27);
    *(void *)((v60 + v40) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v60 + v41) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v34 = v27;
    uint64_t v35 = v73;
    unint64_t v43 = (v59 + v40) & v73;
    unint64_t v44 = (v59 + v41) & v73;
    swift_bridgeObjectRetain();
    v42(v43, v44, v34);
    uint64_t v28 = v74;
    uint64_t v45 = (void *)((v60 + v44) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v46 = v45[1];
    uint64_t v47 = (void *)((v60 + v43) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v47 = *v45;
    v47[1] = v46;
    swift_retain();
  }
  uint64_t v48 = v63 + 16 + ((v68 + 16) & v67);
  uint64_t v49 = (void *)(((unint64_t)a1 + v66 + v48) & v36);
  uint64_t v50 = (void *)(((unint64_t)a2 + v66 + v48) & v36);
  *uint64_t v49 = *v50;
  unint64_t v51 = (void *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v52 = (void *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v51 = *v52;
  unint64_t v53 = (void *)(((unint64_t)v51 + v65 + 8) & v35);
  unint64_t v54 = (const void *)(((unint64_t)v52 + v65 + 8) & v35);
  unint64_t v55 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48);
  swift_retain();
  swift_retain();
  if (v55(v54, 1, v34))
  {
    if (v72) {
      size_t v56 = v61;
    }
    else {
      size_t v56 = v61 + 1;
    }
    memcpy(v53, v54, v56);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v53, v54, v34);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v53, 0, 1, v34);
  }
  return a1;
}

void *assignWithCopy for MapAnimatorProxy(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFF8;
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v119 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v119 - 8);
  uint64_t v12 = v11;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v13 | 7;
  uint64_t v15 = v13 | v10;
  uint64_t v16 = (v13 | v10) + 8;
  unint64_t v17 = (v13 | v10) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unsigned int v18 = (void *)(((unint64_t)v6 + v16) & v17);
  uint64_t v19 = (void *)((v16 + v7) & v17);
  uint64_t v20 = *(unsigned int *)(v9 + 84);
  unsigned int v21 = *(_DWORD *)(v11 + 84);
  if (v21 <= 0x7FFFFFFF) {
    unsigned int v22 = 0x7FFFFFFF;
  }
  else {
    unsigned int v22 = *(_DWORD *)(v11 + 84);
  }
  if (v22 <= v20) {
    unsigned int v23 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v23 = v22;
  }
  if (v21 <= v23) {
    unsigned int v24 = v23;
  }
  else {
    unsigned int v24 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v25 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v26 = ~v10;
  uint64_t v27 = v25 + v10;
  uint64_t v28 = ~v14;
  uint64_t v29 = v14 + v25;
  uint64_t v30 = (v14 + v25 + ((v25 + v10) & ~v10)) & ~v14;
  uint64_t v31 = *(void *)(v11 + 64) + 7;
  uint64_t v118 = ~v13;
  unint64_t v32 = (v31 & 0xFFFFFFFFFFFFFFF8) + v13 + 8;
  uint64_t v116 = v31;
  size_t v109 = ((v31 + ((v32 + v30) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v110 = v17;
  unint64_t v105 = v32;
  unsigned int v106 = *(_DWORD *)(v11 + 84);
  size_t v103 = *(void *)(v11 + 64);
  uint64_t v111 = v15;
  uint64_t v112 = v13 | 7;
  uint64_t v117 = ~v14;
  uint64_t v102 = v8;
  uint64_t v107 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v108 = v19;
  __dst = v18;
  uint64_t v104 = v29;
  if (v20 == v24)
  {
    uint64_t v33 = v8;
    uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
    uint64_t v35 = v18;
    uint64_t v36 = v33;
    uint64_t v37 = v26;
    int v38 = v34(v35, v20, v33);
    int v39 = v34(v19, v20, v36);
    uint64_t v26 = v37;
    uint64_t v40 = v118;
    if (!v38) {
      goto LABEL_42;
    }
LABEL_28:
    if (v39)
    {
LABEL_29:
      size_t v53 = v109;
      memcpy(__dst, v108, v109);
      unint64_t v54 = a2;
      unint64_t v55 = a1;
      uint64_t v56 = v119;
      uint64_t v57 = v111;
      uint64_t v58 = v112;
      unint64_t v59 = v110;
      uint64_t v60 = v117;
      goto LABEL_46;
    }
LABEL_37:
    unint64_t v63 = *(void (**)(void *, const void *, uint64_t))(v9 + 16);
    uint64_t v64 = v26;
    v63(__dst, v108, v102);
    unint64_t v65 = ((unint64_t)__dst + v27) & v64;
    unint64_t v66 = ((unint64_t)v108 + v27) & v64;
    v63((void *)v65, (const void *)v66, v102);
    unint64_t v67 = (v104 + v65) & v117;
    unint64_t v68 = (v104 + v66) & v117;
    int v69 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16);
    uint64_t v56 = v119;
    v69(v67, v68, v119);
    *(void *)((v116 + v67) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v116 + v68) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v70 = (v105 + v67) & v40;
    unint64_t v71 = (v105 + v68) & v40;
    swift_bridgeObjectRetain();
    v69(v70, v71, v119);
    unsigned int v72 = (void *)((v116 + v71) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v73 = v72[1];
    uint64_t v74 = (void *)((v116 + v70) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v74 = *v72;
    v74[1] = v73;
    swift_retain();
    uint64_t v60 = v117;
    goto LABEL_45;
  }
  unint64_t v41 = (v29 + (((unint64_t)v18 + v27) & v26)) & v28;
  if (v22 == v24)
  {
    if (v21 < 0x7FFFFFFF)
    {
      unint64_t v48 = *(void *)((v31 + v41) & 0xFFFFFFFFFFFFFFF8);
      if (v48 >= 0xFFFFFFFF) {
        LODWORD(v48) = -1;
      }
      int v45 = v48 + 1;
      uint64_t v40 = ~v13;
    }
    else
    {
      uint64_t v42 = ~v14;
      uint64_t v43 = v26;
      int v44 = (*(uint64_t (**)(unint64_t))(v11 + 48))(v41);
      uint64_t v26 = v43;
      uint64_t v29 = v104;
      unint64_t v32 = v105;
      unsigned int v21 = v106;
      uint64_t v28 = v42;
      int v45 = v44;
      uint64_t v40 = v118;
    }
  }
  else
  {
    uint64_t v40 = ~v13;
    unint64_t v46 = (v32 + v41) & v118;
    if (v21 >= v23)
    {
      uint64_t v49 = v26;
      int v50 = (*(uint64_t (**)(unint64_t))(v11 + 48))(v46);
      uint64_t v26 = v49;
      uint64_t v29 = v104;
      unint64_t v32 = v105;
      unsigned int v21 = v106;
      uint64_t v28 = v117;
      int v45 = v50;
    }
    else
    {
      unint64_t v47 = *(void *)((v31 + v46) & 0xFFFFFFFFFFFFFFF8);
      if (v47 >= 0xFFFFFFFF) {
        LODWORD(v47) = -1;
      }
      int v45 = v47 + 1;
    }
  }
  unint64_t v51 = (v29 + (((unint64_t)v19 + v27) & v26)) & v28;
  if (v45)
  {
    if (v22 == v24)
    {
      if (v21 >= 0x7FFFFFFF)
      {
LABEL_27:
        uint64_t v52 = v26;
        int v39 = (*(uint64_t (**)(unint64_t))(v12 + 48))(v51);
        uint64_t v26 = v52;
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v51 = (v32 + v51) & v40;
      if (v21 >= v23) {
        goto LABEL_27;
      }
    }
    unint64_t v62 = *(void *)((v116 + v51) & 0xFFFFFFFFFFFFFFF8);
    if (v62 >= 0xFFFFFFFF) {
      LODWORD(v62) = -1;
    }
    if (v62 != -1) {
      goto LABEL_29;
    }
    goto LABEL_37;
  }
  if (v22 != v24)
  {
    unint64_t v51 = (v32 + v51) & v40;
    if (v21 >= v23) {
      goto LABEL_32;
    }
LABEL_39:
    unint64_t v75 = *(void *)((v116 + v51) & 0xFFFFFFFFFFFFFFF8);
    if (v75 >= 0xFFFFFFFF) {
      LODWORD(v75) = -1;
    }
    int v39 = v75 + 1;
    goto LABEL_42;
  }
  if (v21 < 0x7FFFFFFF) {
    goto LABEL_39;
  }
LABEL_32:
  uint64_t v61 = v26;
  int v39 = (*(uint64_t (**)(unint64_t))(v12 + 48))(v51);
  uint64_t v26 = v61;
LABEL_42:
  unint64_t v76 = ((unint64_t)__dst + v27) & v26;
  if (v39)
  {
    uint64_t v77 = *(void (**)(void *, uint64_t))(v9 + 8);
    v77(__dst, v102);
    v77((void *)v76, v102);
    unint64_t v78 = (v104 + v76) & v117;
    uint64_t v79 = *(void (**)(unint64_t, uint64_t))(v12 + 8);
    uint64_t v56 = v119;
    v79(v78, v119);
    swift_bridgeObjectRelease();
    uint64_t v40 = v118;
    v79((v105 + v78) & v118, v119);
    swift_release();
    size_t v53 = v109;
    memcpy(__dst, v108, v109);
    uint64_t v60 = v117;
    unint64_t v54 = a2;
    unint64_t v55 = a1;
    uint64_t v57 = v111;
    uint64_t v58 = v112;
    unint64_t v59 = v110;
    goto LABEL_46;
  }
  unint64_t v80 = *(void (**)(void *, const void *, uint64_t))(v9 + 24);
  uint64_t v81 = v26;
  v80(__dst, v108, v102);
  unint64_t v82 = ((unint64_t)v108 + v27) & v81;
  v80((void *)v76, (const void *)v82, v102);
  unint64_t v83 = (v104 + v76) & v117;
  unint64_t v84 = (v104 + v82) & v117;
  unint64_t v85 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 24);
  uint64_t v56 = v119;
  v85(v83, v84, v119);
  *(void *)((v116 + v83) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v116 + v84) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v86 = (v105 + v83) & v118;
  unint64_t v87 = (v105 + v84) & v118;
  v85(v86, v87, v119);
  uint64_t v40 = v118;
  uint64_t v88 = (void *)((v116 + v86) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v89 = (void *)((v116 + v87) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v90 = v89[1];
  void *v88 = *v89;
  v88[1] = v90;
  swift_retain();
  swift_release();
  uint64_t v60 = v117;
LABEL_45:
  unint64_t v54 = a2;
  unint64_t v55 = a1;
  uint64_t v57 = v111;
  uint64_t v58 = v112;
  size_t v53 = v109;
  unint64_t v59 = v110;
LABEL_46:
  size_t v91 = v53 + ((v57 + 16) & v59);
  uint64_t v92 = (void *)(((unint64_t)v55 + v58 + v91) & v60);
  unint64_t v93 = (unint64_t)v54 + v58 + v91;
  uint64_t v94 = (v93 & v60) + 15;
  *uint64_t v92 = *(void *)(v93 & v60);
  swift_retain();
  swift_release();
  uint64_t v95 = (void *)(((unint64_t)v92 + 15) & 0xFFFFFFFFFFFFFFF8);
  v94 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v95 = *(void *)v94;
  swift_retain();
  swift_release();
  unint64_t v96 = (void *)(((unint64_t)v95 + v107 + 8) & v40);
  unint64_t v97 = (void *)((v107 + 8 + v94) & v40);
  unint64_t v98 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  LODWORD(v94) = v98(v96, 1, v56);
  int v99 = v98(v97, 1, v56);
  if (v94)
  {
    if (!v99)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v96, v97, v56);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v96, 0, 1, v56);
      return v55;
    }
  }
  else
  {
    if (!v99)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v96, v97, v56);
      return v55;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v96, v56);
  }
  if (v106) {
    size_t v100 = v103;
  }
  else {
    size_t v100 = v103 + 1;
  }
  memcpy(v96, v97, v100);
  return v55;
}

void *initializeWithTake for MapAnimatorProxy(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v11 | 7;
  uint64_t v13 = (v11 | v8) + 8;
  uint64_t v63 = v11 | v8;
  unint64_t v14 = (v11 | v8) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = (void *)(((unint64_t)v4 + v13) & v14);
  unint64_t v62 = v14;
  uint64_t v16 = (const void *)(((unint64_t)v5 + v13) & v14);
  unsigned int v17 = *(_DWORD *)(v7 + 84);
  unsigned int v18 = *(_DWORD *)(v10 + 84);
  if (v18 <= 0x7FFFFFFF) {
    unsigned int v19 = 0x7FFFFFFF;
  }
  else {
    unsigned int v19 = *(_DWORD *)(v10 + 84);
  }
  if (v19 <= v17) {
    unsigned int v20 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v20 = v19;
  }
  if (v18 <= v20) {
    unsigned int v21 = v20;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v22 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v23 = v22 + v8;
  size_t v59 = *(void *)(*(void *)(v9 - 8) + 64);
  uint64_t v60 = ~v12;
  size_t v24 = v59 + 7;
  unint64_t v25 = ((v59 + 7) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  unint64_t v26 = (v59 + 7 + ((v25 + ((v12 + v22 + ((v22 + v8) & ~v8)) & ~v12)) & ~v11)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v61 = ~v11;
  int v58 = *(_DWORD *)(v10 + 84);
  unint64_t v55 = v25;
  uint64_t v56 = v6;
  uint64_t v53 = ~v8;
  uint64_t v54 = v12 + v22;
  if (v17 == v21)
  {
    uint64_t v27 = *(unsigned int (**)(void))(v7 + 48);
    uint64_t v28 = v16;
    goto LABEL_15;
  }
  uint64_t v28 = v16;
  unint64_t v29 = (v12 + v22 + (((unint64_t)v16 + v23) & ~v8)) & ~v12;
  if (v19 != v21)
  {
    unint64_t v29 = (v25 + v29) & ~v11;
    if (v18 >= v20) {
      goto LABEL_14;
    }
LABEL_18:
    unint64_t v34 = *(void *)((v24 + v29) & 0xFFFFFFFFFFFFFFF8);
    if (v34 >= 0xFFFFFFFF) {
      LODWORD(v34) = -1;
    }
    size_t v30 = v26 + 16;
    if (v34 != -1) {
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  if (v18 < 0x7FFFFFFF) {
    goto LABEL_18;
  }
LABEL_14:
  uint64_t v27 = *(unsigned int (**)(void))(v10 + 48);
LABEL_15:
  size_t v30 = v26 + 16;
  if (v27())
  {
LABEL_16:
    memcpy(v15, v28, v30);
    uint64_t v31 = v10;
    uint64_t v32 = ~v12;
    uint64_t v33 = ~v11;
    goto LABEL_22;
  }
LABEL_21:
  uint64_t v57 = v9;
  uint64_t v35 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v35(v15, v28, v56);
  unint64_t v36 = ((unint64_t)v15 + v23) & v53;
  unint64_t v37 = ((unint64_t)v28 + v23) & v53;
  v35((void *)v36, (const void *)v37, v56);
  uint64_t v32 = ~v12;
  unint64_t v38 = (v54 + v36) & v60;
  unint64_t v39 = (v54 + v37) & v60;
  uint64_t v31 = v10;
  uint64_t v40 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32);
  v40(v38, v39, v57);
  unint64_t v41 = v40;
  *(void *)((v24 + v38) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v24 + v39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = ~v11;
  unint64_t v42 = (v55 + v38) & v61;
  unint64_t v43 = (v55 + v39) & v61;
  v41(v42, v43, v57);
  uint64_t v9 = v57;
  *(_OWORD *)((v24 + v42) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v24 + v43) & 0xFFFFFFFFFFFFFFF8);
LABEL_22:
  size_t v44 = v30 + ((v63 + 16) & v62);
  int v45 = (void *)(((unint64_t)a1 + v12 + v44) & v32);
  unint64_t v46 = (void *)(((unint64_t)a2 + v12 + v44) & v32);
  *int v45 = *v46;
  unint64_t v47 = (void *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v48 = (void *)(((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v47 = *v48;
  uint64_t v49 = (void *)(((unint64_t)v47 + v11 + 8) & v33);
  int v50 = (const void *)(((unint64_t)v48 + v11 + 8) & v33);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v50, 1, v9))
  {
    if (v58) {
      size_t v51 = v59;
    }
    else {
      size_t v51 = v59 + 1;
    }
    memcpy(v49, v50, v51);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 32))(v49, v50, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v49, 0, 1, v9);
  }
  return a1;
}

void *assignWithTake for MapAnimatorProxy(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v93 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v93 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = v11 | 7;
  uint64_t v13 = (v11 | v9) + 8;
  unint64_t v14 = (v11 | v9) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = (void *)(((unint64_t)v6 + v13) & v14);
  uint64_t v16 = (void *)((v13 + (v5 & 0xFFFFFFFFFFFFFFF8)) & v14);
  uint64_t v17 = *(unsigned int *)(v8 + 84);
  uint64_t v97 = v10;
  unsigned int v18 = *(_DWORD *)(v10 + 84);
  if (v18 <= 0x7FFFFFFF) {
    unsigned int v19 = 0x7FFFFFFF;
  }
  else {
    unsigned int v19 = *(_DWORD *)(v10 + 84);
  }
  if (v19 <= v17) {
    unsigned int v20 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v20 = v19;
  }
  unsigned int v96 = *(_DWORD *)(v10 + 84);
  if (v18 <= v20) {
    unsigned int v21 = v20;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v22 = *(void *)(*(void *)(v7 - 8) + 64);
  uint64_t v23 = ~v9;
  uint64_t v24 = v22 + v9;
  uint64_t v25 = ~v12;
  uint64_t v26 = v12 + v22;
  uint64_t v94 = ~v11;
  uint64_t v90 = *(void *)(v10 + 64) + 7;
  unint64_t v91 = (v90 & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  size_t v95 = ((v90 + ((v91 + ((v12 + v22 + ((v22 + v9) & ~v9)) & ~v12)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v81 = v7;
  size_t v82 = *(void *)(v10 + 64);
  uint64_t v86 = v11 | v9;
  __src = v16;
  unint64_t v85 = (v11 | v9) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v92 = ~v12;
  __dst = v15;
  uint64_t v83 = v12 + v22;
  if (v17 != v21)
  {
    unint64_t v33 = (v26 + (((unint64_t)v15 + v24) & v23)) & v25;
    if (v19 == v21)
    {
      if (v96 >= 0x7FFFFFFF)
      {
LABEL_15:
        uint64_t v32 = v93;
        int v34 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v10 + 48))(v33, v96, v93);
        uint64_t v26 = v83;
        uint64_t v25 = v92;
        int v35 = v34;
        goto LABEL_20;
      }
    }
    else
    {
      unint64_t v33 = (v91 + v33) & v94;
      if (v96 >= v20) {
        goto LABEL_15;
      }
    }
    unint64_t v36 = *(void *)((v90 + v33) & 0xFFFFFFFFFFFFFFF8);
    if (v36 >= 0xFFFFFFFF) {
      LODWORD(v36) = -1;
    }
    int v35 = v36 + 1;
    uint64_t v32 = v93;
LABEL_20:
    unint64_t v37 = (v26 + (((unint64_t)v16 + v24) & v23)) & v25;
    if (v35)
    {
      if (v19 == v21)
      {
        if (v96 >= 0x7FFFFFFF)
        {
LABEL_23:
          int v31 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v97 + 48))(v37, v96, v32);
          goto LABEL_24;
        }
      }
      else
      {
        unint64_t v37 = (v91 + v37) & v94;
        if (v96 >= v20) {
          goto LABEL_23;
        }
      }
      unint64_t v45 = *(void *)((v90 + v37) & 0xFFFFFFFFFFFFFFF8);
      if (v45 >= 0xFFFFFFFF) {
        LODWORD(v45) = -1;
      }
      if (v45 != -1) {
        goto LABEL_25;
      }
      goto LABEL_33;
    }
    if (v19 == v21)
    {
      if (v96 >= 0x7FFFFFFF)
      {
LABEL_28:
        int v31 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v97 + 48))(v37, v96, v32);
        goto LABEL_38;
      }
    }
    else
    {
      unint64_t v37 = (v91 + v37) & v94;
      if (v96 >= v20) {
        goto LABEL_28;
      }
    }
    unint64_t v54 = *(void *)((v90 + v37) & 0xFFFFFFFFFFFFFFF8);
    if (v54 >= 0xFFFFFFFF) {
      LODWORD(v54) = -1;
    }
    int v31 = v54 + 1;
    goto LABEL_38;
  }
  uint64_t v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v28 = v15;
  uint64_t v29 = v7;
  int v30 = v27(v28, v17, v7);
  int v31 = v27(v16, v17, v29);
  uint64_t v32 = v93;
  if (!v30)
  {
LABEL_38:
    unint64_t v55 = ((unint64_t)__dst + v24) & v23;
    if (v31)
    {
      uint64_t v56 = *(void (**)(void *, uint64_t))(v8 + 8);
      v56(__dst, v81);
      v56((void *)v55, v81);
      uint64_t v57 = v83 + v55;
      uint64_t v32 = v93;
      uint64_t v58 = v57 & v92;
      size_t v59 = *(void (**)(uint64_t, uint64_t))(v97 + 8);
      v59(v57 & v92, v93);
      swift_bridgeObjectRelease();
      uint64_t v42 = ~v11;
      v59((v91 + v58) & v94, v93);
      swift_release();
      memcpy(__dst, __src, v95);
      uint64_t v44 = v92;
    }
    else
    {
      uint64_t v60 = *(void (**)(void *, void *, uint64_t))(v8 + 40);
      v60(__dst, v16, v81);
      unint64_t v61 = ((unint64_t)v16 + v24) & v23;
      v60((void *)v55, (void *)v61, v81);
      uint64_t v62 = v83 + v55;
      uint64_t v44 = v92;
      uint64_t v32 = v93;
      uint64_t v63 = v62 & v92;
      unint64_t v64 = (v83 + v61) & v92;
      unint64_t v65 = *(void (**)(uint64_t, unint64_t, uint64_t))(v97 + 40);
      v65(v62 & v92, v64, v93);
      *(void *)((v90 + v63) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v90 + v64) & 0xFFFFFFFFFFFFFFF8);
      swift_bridgeObjectRelease();
      uint64_t v42 = ~v11;
      unint64_t v66 = (v91 + v63) & v94;
      unint64_t v67 = (v91 + v64) & v94;
      v65(v66, v67, v93);
      *(_OWORD *)((v90 + v66) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v90 + v67) & 0xFFFFFFFFFFFFFFF8);
      swift_release();
    }
    goto LABEL_41;
  }
LABEL_24:
  if (v31)
  {
LABEL_25:
    memcpy(__dst, v16, v95);
    unint64_t v38 = a2;
    unint64_t v39 = a1;
    uint64_t v40 = v86;
    uint64_t v41 = v11 | 7;
    uint64_t v42 = ~v11;
    unint64_t v43 = v85;
    uint64_t v44 = v92;
    goto LABEL_42;
  }
LABEL_33:
  unint64_t v46 = *(void (**)(void *, void *, uint64_t))(v8 + 32);
  v46(__dst, v16, v81);
  unint64_t v47 = ((unint64_t)__dst + v24) & v23;
  unint64_t v48 = ((unint64_t)v16 + v24) & v23;
  v46((void *)v47, (void *)v48, v81);
  uint64_t v44 = v92;
  unint64_t v49 = (v83 + v47) & v92;
  unint64_t v50 = (v83 + v48) & v92;
  size_t v51 = *(void (**)(unint64_t, unint64_t, uint64_t))(v97 + 32);
  v51(v49, v50, v32);
  *(void *)((v90 + v49) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v90 + v50) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v42 = ~v11;
  unint64_t v52 = (v91 + v49) & v94;
  unint64_t v53 = (v91 + v50) & v94;
  v51(v52, v53, v32);
  *(_OWORD *)((v90 + v52) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v90 + v53) & 0xFFFFFFFFFFFFFFF8);
LABEL_41:
  unint64_t v38 = a2;
  unint64_t v39 = a1;
  uint64_t v40 = v86;
  uint64_t v41 = v11 | 7;
  unint64_t v43 = v85;
LABEL_42:
  size_t v68 = v95 + ((v40 + 16) & v43);
  int v69 = (void *)(((unint64_t)v39 + v41 + v68) & v44);
  unint64_t v70 = (void *)(((unint64_t)v38 + v41 + v68) & v44);
  *int v69 = *v70;
  swift_release();
  unint64_t v71 = (void *)(((unint64_t)v69 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v72 = (void *)(((unint64_t)v70 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v71 = *v72;
  swift_release();
  uint64_t v73 = v11 + 8;
  uint64_t v74 = (void *)(((unint64_t)v71 + v11 + 8) & v42);
  unint64_t v75 = (void *)(((unint64_t)v72 + v73) & v42);
  unint64_t v76 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v97 + 48);
  int v77 = v76(v74, 1, v32);
  int v78 = v76(v75, 1, v32);
  if (v77)
  {
    if (!v78)
    {
      (*(void (**)(void *, void *, uint64_t))(v97 + 32))(v74, v75, v32);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v74, 0, 1, v32);
      return v39;
    }
  }
  else
  {
    if (!v78)
    {
      (*(void (**)(void *, void *, uint64_t))(v97 + 40))(v74, v75, v32);
      return v39;
    }
    (*(void (**)(void *, uint64_t))(v97 + 8))(v74, v32);
  }
  if (v96) {
    size_t v79 = v82;
  }
  else {
    size_t v79 = v82 + 1;
  }
  memcpy(v74, v75, v79);
  return v39;
}

uint64_t getEnumTagSinglePayload for MapAnimatorProxy(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= v8) {
    unsigned int v13 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v13 = v12;
  }
  if (v11 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  if (v14 - 1 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v14 - 1;
  }
  if (v11) {
    unsigned int v16 = v11 - 1;
  }
  else {
    unsigned int v16 = 0;
  }
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = v16;
  }
  if (v17 <= v15) {
    unsigned int v18 = v15;
  }
  else {
    unsigned int v18 = v17;
  }
  uint64_t v19 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v20 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v21 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v22 = *(void *)(v9 + 64);
  if (v11) {
    uint64_t v23 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v23 = v22 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v24 = v20 | 7;
  uint64_t v25 = v20 | v19 | 7;
  uint64_t v26 = v21 + v19;
  uint64_t v27 = (v20 | 7) + v21;
  uint64_t v28 = v22 + 7;
  unint64_t v29 = (v28 & 0xFFFFFFFFFFFFFFF8) + v20 + 8;
  unint64_t v30 = (((v20 | v19) + 16) & ~v25)
      + (v20 | 7)
      + ((v28 + ((v29 + ((v27 + ((v21 + v19) & ~v19)) & ~(v20 | 7))) & ~v20)) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  int v31 = a2 - v18;
  if (a2 <= v18) {
    goto LABEL_46;
  }
  uint64_t v32 = v23 + ((v20 + 16) & ~v20) + (v30 & ~v24);
  char v33 = 8 * v32;
  if (v32 <= 3)
  {
    unsigned int v36 = ((v31 + ~(-1 << v33)) >> v33) + 1;
    if (HIWORD(v36))
    {
      int v34 = *(_DWORD *)((char *)a1 + v32);
      if (!v34) {
        goto LABEL_46;
      }
      goto LABEL_36;
    }
    if (v36 > 0xFF)
    {
      int v34 = *(unsigned __int16 *)((char *)a1 + v32);
      if (!*(unsigned __int16 *)((char *)a1 + v32)) {
        goto LABEL_46;
      }
      goto LABEL_36;
    }
    if (v36 < 2)
    {
LABEL_46:
      uint64_t v40 = ~v24;
      if (v15 >= v17)
      {
        unint64_t v43 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if (((v14 - 1) & 0x80000000) == 0)
        {
          unint64_t v42 = *v43;
          goto LABEL_51;
        }
        uint64_t v47 = ((unint64_t)v43 + v25 + 8) & ~v25;
        if (v8 == v14)
        {
          unsigned int v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v47, v8, v6);
LABEL_59:
          if (v46 >= 2) {
            return v46 - 1;
          }
          else {
            return 0;
          }
        }
        uint64_t v45 = (v27 + ((v26 + v47) & ~v19)) & v40;
        if (v12 == v14)
        {
          if (v11 < 0x7FFFFFFF)
          {
            unint64_t v48 = *(void *)((v28 + v45) & 0xFFFFFFFFFFFFFFF8);
            if (v48 >= 0xFFFFFFFF) {
              LODWORD(v48) = -1;
            }
            unsigned int v46 = v48 + 1;
            goto LABEL_59;
          }
          goto LABEL_56;
        }
        uint64_t v44 = v29 + v45;
      }
      else
      {
        uint64_t v41 = (unint64_t *)(((((unint64_t)a1 + v30) & v40) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v16 & 0x80000000) == 0)
        {
          unint64_t v42 = *v41;
LABEL_51:
          if (v42 >= 0xFFFFFFFF) {
            LODWORD(v42) = -1;
          }
          return (v42 + 1);
        }
        uint64_t v44 = (uint64_t)v41 + v20 + 8;
      }
      uint64_t v45 = v44 & ~v20;
LABEL_56:
      unsigned int v46 = (*(uint64_t (**)(uint64_t))(v10 + 48))(v45);
      goto LABEL_59;
    }
  }
  int v34 = *((unsigned __int8 *)a1 + v32);
  if (!*((unsigned char *)a1 + v32)) {
    goto LABEL_46;
  }
LABEL_36:
  int v37 = (v34 - 1) << v33;
  if (v32 > 3) {
    int v37 = 0;
  }
  if (v32)
  {
    if (v32 <= 3) {
      int v38 = v32;
    }
    else {
      int v38 = 4;
    }
    switch(v38)
    {
      case 2:
        int v39 = *a1;
        break;
      case 3:
        int v39 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v39 = *(_DWORD *)a1;
        break;
      default:
        int v39 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v39 = 0;
  }
  return v18 + (v39 | v37) + 1;
}

void storeEnumTagSinglePayload for MapAnimatorProxy(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Date();
  int v8 = 0;
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = v9;
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  uint64_t v62 = v7;
  uint64_t v63 = *(void *)(a4 + 16);
  uint64_t v12 = *(void *)(v63 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = *(void *)(v9 + 64);
  uint64_t v17 = *(void *)(v12 + 64);
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v18 = 0x7FFFFFFF;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v12 + 84);
  }
  if (v18 <= v11) {
    unsigned int v19 = v11;
  }
  else {
    unsigned int v19 = v18;
  }
  if (v13 > v19) {
    unsigned int v19 = *(_DWORD *)(v12 + 84);
  }
  unsigned int v20 = v19 - 1;
  if (v19 - 1 <= 0x7FFFFFFF) {
    unsigned int v21 = 0x7FFFFFFF;
  }
  else {
    unsigned int v21 = v19 - 1;
  }
  if (v13) {
    unsigned int v22 = v13 - 1;
  }
  else {
    unsigned int v22 = 0;
  }
  if (v22 <= 0x7FFFFFFF) {
    unsigned int v23 = 0x7FFFFFFF;
  }
  else {
    unsigned int v23 = v22;
  }
  if (v23 <= v21) {
    unsigned int v24 = v21;
  }
  else {
    unsigned int v24 = v23;
  }
  uint64_t v25 = v15 | v14 | 7;
  uint64_t v26 = v16 + v14;
  uint64_t v27 = (v15 | 7) + v16;
  uint64_t v28 = v17 + 7;
  unint64_t v29 = ((v17 + 7) & 0xFFFFFFFFFFFFFFF8) + v15 + 8;
  size_t v30 = ((v17 + 7 + ((v29 + ((v27 + ((v16 + v14) & ~v14)) & ~(v15 | 7))) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 16;
  size_t v31 = v30 + (((v15 | v14) + 16) & ~v25);
  size_t v32 = v31 + (v15 | 7);
  uint64_t v33 = (v15 + 16) & ~v15;
  if (v13) {
    size_t v34 = *(void *)(*(void *)(v63 - 8) + 64);
  }
  else {
    size_t v34 = v17 + 1;
  }
  size_t v35 = v33 + v34;
  size_t v36 = (v32 & ~(v15 | 7)) + v33 + v34;
  BOOL v37 = a3 >= v24;
  unsigned int v38 = a3 - v24;
  if (v38 == 0 || !v37)
  {
LABEL_35:
    if (v24 < a2) {
      goto LABEL_36;
    }
    goto LABEL_28;
  }
  if (v36 <= 3)
  {
    unsigned int v41 = ((v38 + ~(-1 << (8 * v36))) >> (8 * v36)) + 1;
    if (HIWORD(v41))
    {
      int v8 = 4;
      if (v24 < a2)
      {
LABEL_36:
        unsigned int v42 = ~v24 + a2;
        if (v36 < 4)
        {
          int v43 = (v42 >> (8 * v36)) + 1;
          if (v36)
          {
            int v44 = v42 & ~(-1 << (8 * v36));
            bzero(a1, v36);
            if (v36 == 3)
            {
              *(_WORD *)a1 = v44;
              a1[2] = BYTE2(v44);
            }
            else if (v36 == 2)
            {
              *(_WORD *)a1 = v44;
            }
            else
            {
              *a1 = v44;
            }
          }
        }
        else
        {
          bzero(a1, v36);
          *(_DWORD *)a1 = v42;
          int v43 = 1;
        }
        switch(v8)
        {
          case 1:
            a1[v36] = v43;
            return;
          case 2:
            *(_WORD *)&a1[v36] = v43;
            return;
          case 3:
            goto LABEL_112;
          case 4:
            *(_DWORD *)&a1[v36] = v43;
            return;
          default:
            return;
        }
      }
      goto LABEL_28;
    }
    if (v41 >= 0x100) {
      int v8 = 2;
    }
    else {
      int v8 = v41 > 1;
    }
    goto LABEL_35;
  }
  int v8 = 1;
  if (v24 < a2) {
    goto LABEL_36;
  }
LABEL_28:
  uint64_t v60 = ~v14;
  uint64_t v39 = ~(v15 | 7);
  uint64_t v61 = ~v15;
  uint64_t v40 = a1;
  switch(v8)
  {
    case 1:
      a1[v36] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_44;
    case 2:
      *(_WORD *)&a1[v36] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_44;
    case 3:
LABEL_112:
      __break(1u);
      JUMPOUT(0x187F34AB0);
    case 4:
      *(_DWORD *)&a1[v36] = 0;
      goto LABEL_43;
    default:
LABEL_43:
      if (!a2) {
        return;
      }
LABEL_44:
      if (v21 < v23)
      {
        uint64_t v40 = (unsigned char *)((unint64_t)&a1[v32] & v39);
        if (v23 < a2)
        {
          if (v35 <= 3) {
            int v45 = ~(-1 << (8 * v35));
          }
          else {
            int v45 = -1;
          }
          if (v35)
          {
            int v46 = v45 & (~v23 + a2);
            if (v35 <= 3) {
              int v47 = v35;
            }
            else {
              int v47 = 4;
            }
            bzero(v40, v35);
            switch(v47)
            {
              case 2:
                goto LABEL_83;
              case 3:
                goto LABEL_98;
              case 4:
                goto LABEL_89;
              default:
                goto LABEL_54;
            }
          }
          return;
        }
        unint64_t v49 = (void *)((unint64_t)(v40 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v22 & 0x80000000) == 0)
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v50 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v50 = a2 - 1;
          }
LABEL_91:
          *unint64_t v49 = v50;
          return;
        }
        uint64_t v53 = (uint64_t)v49 + v15 + 8;
        uint64_t v40 = (unsigned char *)(v53 & v61);
        if (v22 < a2)
        {
          if (v34 <= 3) {
            int v54 = ~(-1 << (8 * v34));
          }
          else {
            int v54 = -1;
          }
          if (v34)
          {
            int v46 = v54 & (~v22 + a2);
            if (v34 <= 3) {
              int v55 = v34;
            }
            else {
              int v55 = 4;
            }
            bzero(v40, v34);
            switch(v55)
            {
              case 2:
LABEL_83:
                *(_WORD *)uint64_t v40 = v46;
                break;
              case 3:
LABEL_98:
                *(_WORD *)uint64_t v40 = v46;
                v40[2] = BYTE2(v46);
                break;
              case 4:
                goto LABEL_89;
              default:
LABEL_54:
                *uint64_t v40 = v46;
                break;
            }
          }
          return;
        }
        uint64_t v56 = a2 + 1;
        uint64_t v57 = *(void (**)(unint64_t, uint64_t))(v12 + 56);
        unint64_t v58 = v53 & v61;
        goto LABEL_95;
      }
      if (v21 < a2)
      {
        if (!v31) {
          return;
        }
        int v46 = ~v21 + a2;
        unint64_t v48 = a1;
        size_t v30 = v31;
LABEL_88:
        bzero(v48, v30);
LABEL_89:
        *(_DWORD *)uint64_t v40 = v46;
        return;
      }
      size_t v51 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v20 & 0x80000000) == 0)
      {
        if ((a2 & 0x80000000) != 0) {
          uint64_t v52 = a2 ^ 0x80000000;
        }
        else {
          uint64_t v52 = a2 - 1;
        }
        *size_t v51 = v52;
        return;
      }
      uint64_t v40 = (unsigned char *)(((unint64_t)v51 + v25 + 8) & ~v25);
      if (v20 < a2 || a2 + 1 > v19)
      {
        if (!v30) {
          return;
        }
        int v46 = a2 - v19;
        unint64_t v48 = (void *)(((unint64_t)v51 + v25 + 8) & ~v25);
        goto LABEL_88;
      }
      if (a2 == -1) {
        return;
      }
      if (v11 != v19)
      {
        unint64_t v58 = (v27 + ((unint64_t)&v40[v26] & v60)) & v39;
        if (v18 == v19)
        {
          if (v13 < 0x7FFFFFFF)
          {
            unint64_t v49 = (void *)((v28 + v58) & 0xFFFFFFFFFFFFFFF8);
            if (((a2 + 1) & 0x80000000) != 0) {
              uint64_t v50 = a2 - 0x7FFFFFFF;
            }
            else {
              uint64_t v50 = a2;
            }
            goto LABEL_91;
          }
        }
        else
        {
          unint64_t v58 = (v29 + v58) & v61;
        }
        uint64_t v57 = *(void (**)(unint64_t, uint64_t))(v12 + 56);
        uint64_t v56 = a2 + 1;
LABEL_95:
        v57(v58, v56);
        return;
      }
      size_t v59 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56);
      v59(v40, a2 + 1, v11, v62);
      return;
  }
}

uint64_t type metadata accessor for MapAnimatorProxy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187F34B10()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for AdapterState.PlaybackState()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for KeyframeTimeline();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AdapterState.PlaybackState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  unint64_t v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = v13 | 7;
  uint64_t v15 = *(void *)(v12 + 64) + 7;
  if ((v13 | v9) > 7
    || ((*(_DWORD *)(v12 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v15 + (((v15 & 0xFFFFFFFFFFFFFFF8) + v13 + 8 + (((v13 | 7) + v8 + ((v8 + v9) & ~v9)) & ~(v13 | 7))) & ~v13)) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    unsigned int v24 = (uint64_t *)(v18 + (((v13 | v9) & 0xF8 ^ 0x1F8) & ((v13 | v9) + 16)));
  }
  else
  {
    uint64_t v19 = ~v9;
    uint64_t v35 = *(void *)(v11 - 8);
    unint64_t v37 = (v15 & 0xFFFFFFFFFFFFFFF8) + v13 + 8;
    uint64_t v38 = ~v13;
    unsigned int v20 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16);
    uint64_t v36 = v11;
    v20(a1, a2, v6);
    uint64_t v39 = a1;
    unint64_t v21 = ((unint64_t)a1 + v10) & v19;
    unint64_t v22 = ((unint64_t)a2 + v10) & v19;
    v20((uint64_t *)v21, (uint64_t *)v22, v6);
    uint64_t v23 = v21 + v8;
    unsigned int v24 = v39;
    uint64_t v25 = v22 + v8;
    uint64_t v26 = (v23 + v14) & ~v14;
    uint64_t v27 = (v25 + v14) & ~v14;
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
    v28(v26, v27, v36);
    *(void *)((v15 + v26) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v15 + v27) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v29 = (v37 + v26) & v38;
    unint64_t v30 = (v37 + v27) & v38;
    swift_bridgeObjectRetain();
    v28(v29, v30, v36);
    size_t v31 = (void *)((v15 + v30) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = v31[1];
    uint64_t v33 = (void *)((v15 + v29) & 0xFFFFFFFFFFFFFFF8);
    void *v33 = *v31;
    v33[1] = v32;
  }
  swift_retain();
  return v24;
}

uint64_t destroy for AdapterState.PlaybackState(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  uint64_t v7 = v5 + 8;
  v6(a1, v4);
  uint64_t v8 = *(void *)(v7 + 56);
  unint64_t v9 = (v8 + a1 + *(unsigned __int8 *)(v7 + 72)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 72);
  v6(v9, v4);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  uint64_t v13 = v11 + 8;
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = (v9 + v8 + (v14 | 7)) & ~(v14 | 7);
  v12(v15, v10);
  uint64_t v16 = *(void *)(v13 + 56) + 7;
  swift_bridgeObjectRelease();
  v12((v14 + (v16 & 0xFFFFFFFFFFFFFFF8) + v15 + 8) & ~v14, v10);

  return swift_release();
}

uint64_t initializeWithCopy for AdapterState.PlaybackState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  uint64_t v9 = v7 + 16;
  v8(a1, a2, v6);
  uint64_t v10 = *(void *)(v9 + 48);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 64);
  uint64_t v12 = (v10 + v11 + a1) & ~v11;
  uint64_t v13 = (v10 + v11 + a2) & ~v11;
  v8(v12, v13, v6);
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16);
  uint64_t v17 = v15 + 16;
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = (v18 | 7) + v10;
  uint64_t v20 = (v19 + v12) & ~(v18 | 7);
  uint64_t v21 = (v19 + v13) & ~(v18 | 7);
  v16(v20, v21, v14);
  uint64_t v22 = *(void *)(v17 + 48) + 7;
  *(void *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v22 + v21) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  unint64_t v24 = (v23 + v20) & ~v18;
  unint64_t v25 = (v23 + v21) & ~v18;
  swift_bridgeObjectRetain();
  v16(v24, v25, v14);
  uint64_t v26 = (void *)((v22 + v25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = v26[1];
  uint64_t v28 = (void *)((v22 + v24) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v28 = *v26;
  v28[1] = v27;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AdapterState.PlaybackState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  uint64_t v9 = v7 + 24;
  v8(a1, a2, v6);
  uint64_t v10 = *(void *)(v9 + 40);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 56);
  uint64_t v12 = (v10 + v11 + a1) & ~v11;
  uint64_t v13 = (v10 + v11 + a2) & ~v11;
  v8(v12, v13, v6);
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24);
  uint64_t v17 = v15 + 24;
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = (v18 | 7) + v10;
  uint64_t v20 = (v19 + v12) & ~(v18 | 7);
  uint64_t v21 = (v19 + v13) & ~(v18 | 7);
  v16(v20, v21, v14);
  uint64_t v22 = *(void *)(v17 + 40) + 7;
  *(void *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v22 + v21) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  unint64_t v24 = (v23 + v20) & ~v18;
  unint64_t v25 = (v23 + v21) & ~v18;
  v16(v24, v25, v14);
  uint64_t v26 = (void *)((v22 + v24) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (void *)((v22 + v25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AdapterState.PlaybackState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  uint64_t v9 = v7 + 32;
  v8(a1, a2, v6);
  uint64_t v10 = *(void *)(v9 + 32);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 48);
  uint64_t v12 = (v10 + v11 + a1) & ~v11;
  uint64_t v13 = (v10 + v11 + a2) & ~v11;
  v8(v12, v13, v6);
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
  uint64_t v17 = v15 + 32;
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = (v18 | 7) + v10;
  uint64_t v20 = (v19 + v12) & ~(v18 | 7);
  uint64_t v21 = (v19 + v13) & ~(v18 | 7);
  v16(v20, v21, v14);
  uint64_t v22 = *(void *)(v17 + 32) + 7;
  *(void *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v22 + v21) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  unint64_t v24 = (v23 + v20) & ~v18;
  unint64_t v25 = (v23 + v21) & ~v18;
  v16(v24, v25, v14);
  *(_OWORD *)((v22 + v24) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v22 + v25) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for AdapterState.PlaybackState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  uint64_t v9 = v7 + 40;
  v8(a1, a2, v6);
  uint64_t v10 = *(void *)(v9 + 24);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 40);
  uint64_t v12 = (v10 + v11 + a1) & ~v11;
  uint64_t v13 = (v10 + v11 + a2) & ~v11;
  v8(v12, v13, v6);
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 40);
  uint64_t v17 = v15 + 40;
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = (v18 | 7) + v10;
  uint64_t v20 = (v19 + v12) & ~(v18 | 7);
  uint64_t v21 = (v19 + v13) & ~(v18 | 7);
  v16(v20, v21, v14);
  uint64_t v22 = *(void *)(v17 + 24) + 7;
  *(void *)((v22 + v20) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v22 + v21) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  unint64_t v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  unint64_t v24 = (v23 + v20) & ~v18;
  unint64_t v25 = (v23 + v21) & ~v18;
  v16(v24, v25, v14);
  *(_OWORD *)((v22 + v24) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v22 + v25) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AdapterState.PlaybackState(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  if (v14 <= v8) {
    unsigned int v15 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v15 = v14;
  }
  if (v10 <= v15) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = v11 + v12;
  uint64_t v18 = v13 | 7;
  uint64_t v19 = *(void *)(v9 + 64) + 7;
  unint64_t v20 = (v19 & 0xFFFFFFFFFFFFFFF8) + v13 + 8;
  if (v16 < a2)
  {
    unint64_t v21 = ((v19 + ((v20 + ((v18 + v11 + (v17 & ~v12)) & ~v18)) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 16;
    if ((v21 & 0xFFFFFFF8) != 0) {
      unsigned int v22 = 2;
    }
    else {
      unsigned int v22 = a2 - v16 + 1;
    }
    if (v22 >= 0x10000) {
      unsigned int v23 = 4;
    }
    else {
      unsigned int v23 = 2;
    }
    if (v22 < 0x100) {
      unsigned int v23 = 1;
    }
    if (v22 >= 2) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    switch(v24)
    {
      case 1:
        int v25 = *((unsigned __int8 *)a1 + v21);
        if (!*((unsigned char *)a1 + v21)) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v25 = *(unsigned __int16 *)((char *)a1 + v21);
        if (*(_WORD *)((char *)a1 + v21)) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187F35AE0);
      case 4:
        int v25 = *(_DWORD *)((char *)a1 + v21);
        if (!v25) {
          break;
        }
LABEL_28:
        int v27 = v25 - 1;
        if ((v21 & 0xFFFFFFF8) != 0)
        {
          int v27 = 0;
          int v28 = *a1;
        }
        else
        {
          int v28 = 0;
        }
        return v16 + (v28 | v27) + 1;
      default:
        break;
    }
  }
  if (v8 == v16)
  {
    unint64_t v29 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48);
    return v29(a1, v8, v6);
  }
  unint64_t v30 = ((((unint64_t)a1 + v17) & ~v12) + v11 + v18) & ~v18;
  if (v14 == v16)
  {
    if (v10 >= 0x7FFFFFFF)
    {
LABEL_37:
      size_t v31 = *(uint64_t (**)(unint64_t))(v9 + 48);
      return v31(v30);
    }
  }
  else
  {
    unint64_t v30 = (v20 + v30) & ~v13;
    if (v10 >= v15) {
      goto LABEL_37;
    }
  }
  unint64_t v32 = *(void *)((v19 + v30) & 0xFFFFFFFFFFFFFFF8);
  if (v32 >= 0xFFFFFFFF) {
    LODWORD(v32) = -1;
  }
  return (v32 + 1);
}

void storeEnumTagSinglePayload for AdapterState.PlaybackState(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  uint64_t v13 = *(void *)(v9 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (v16 <= v10) {
    unsigned int v17 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v17 = v16;
  }
  if (v12 <= v17) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v19 = *(void *)(v11 + 64) + 7;
  unint64_t v20 = (v19 & 0xFFFFFFFFFFFFFFF8) + v15 + 8;
  unint64_t v21 = ((v19 + ((v20 + (((v15 | 7) + v13 + ((v13 + v14) & ~v14)) & ~(v15 | 7))) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v18 >= a3)
  {
    int v24 = 0;
    int v25 = a2 - v18;
    if (a2 <= v18) {
      goto LABEL_23;
    }
LABEL_27:
    if (((v19
         + ((v20
           + (((v15 | 7) + v13 + ((v13 + v14) & ~v14)) & ~(v15 | 7))) & ~v15)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      int v26 = v25;
    else {
      int v26 = 1;
    }
    if (((v19
         + ((v20
           + (((v15 | 7) + v13 + ((v13 + v14) & ~v14)) & ~(v15 | 7))) & ~v15)) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v27 = ~v18 + a2;
      bzero(a1, ((v19 + ((v20 + (((v15 | 7) + v13 + ((v13 + v14) & ~v14)) & ~(v15 | 7))) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v27;
    }
    switch(v24)
    {
      case 1:
        *((unsigned char *)a1 + v21) = v26;
        break;
      case 2:
        *(_WORD *)((char *)a1 + v21) = v26;
        break;
      case 3:
LABEL_57:
        __break(1u);
        JUMPOUT(0x187F35E14);
      case 4:
        *(_DWORD *)((char *)a1 + v21) = v26;
        break;
      default:
        return;
    }
    return;
  }
  if (((v19
       + ((v20
         + (((v15 | 7) + v13 + ((v13 + v14) & ~v14)) & ~(v15 | 7))) & ~v15)) & 0xFFFFFFF8) == 0xFFFFFFF0)
    unsigned int v22 = a3 - v18 + 1;
  else {
    unsigned int v22 = 2;
  }
  if (v22 >= 0x10000) {
    int v23 = 4;
  }
  else {
    int v23 = 2;
  }
  if (v22 < 0x100) {
    int v23 = 1;
  }
  if (v22 >= 2) {
    int v24 = v23;
  }
  else {
    int v24 = 0;
  }
  int v25 = a2 - v18;
  if (a2 > v18) {
    goto LABEL_27;
  }
LABEL_23:
  switch(v24)
  {
    case 1:
      *((unsigned char *)a1 + v21) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)((char *)a1 + v21) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
      goto LABEL_57;
    case 4:
      *(_DWORD *)((char *)a1 + v21) = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (!a2) {
        return;
      }
LABEL_36:
      if (v10 == v18)
      {
        int v28 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v28(a1, a2, v10, v8);
        return;
      }
      uint64_t v29 = ((((unint64_t)a1 + v13 + v14) & ~v14) + v13 + (v15 | 7)) & ~(v15 | 7);
      if (v16 == v18)
      {
        if (v12 < 0x7FFFFFFF)
        {
          unint64_t v30 = (void *)((v19 + v29) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v31 = a2 ^ 0x80000000;
LABEL_55:
            void *v30 = v31;
            return;
          }
LABEL_50:
          uint64_t v31 = (a2 - 1);
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v29 = (v20 + v29) & ~v15;
        if (v12 < v17)
        {
          unint64_t v30 = (void *)((v19 + v29) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v31 = a2 ^ 0x80000000;
            v30[1] = 0;
            goto LABEL_55;
          }
          goto LABEL_50;
        }
      }
      unint64_t v32 = *(void (**)(uint64_t, uint64_t))(v11 + 56);
      v32(v29, a2);
      break;
  }
}

uint64_t type metadata completion function for AdapterState()
{
  uint64_t result = type metadata accessor for AdapterState.PlaybackState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AdapterState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v46 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v46 - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= v8) {
    unsigned int v13 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v13 = v12;
  }
  if (v11 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v15 = *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v16 = *(_DWORD *)(v7 + 80);
  uint64_t v17 = v15 + v16;
  int v18 = *(_DWORD *)(v9 + 80);
  uint64_t v19 = v18 | 7;
  uint64_t v20 = *(void *)(*(void *)(v46 - 8) + 64) + 7;
  unint64_t v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  size_t v22 = ((v20 + ((v21 + ((v19 + v15 + ((v15 + v16) & ~v16)) & ~v19)) & ~(unint64_t)v18)) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if ((v18 | v16) > 7 || ((v18 | *(_DWORD *)(v7 + 80)) & 0x100000) != 0 || v22 > 0x18)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25
                   + (((v18 | v16) & 0xF8 ^ 0x1F8) & ((v18 | v16) + 16)));
LABEL_31:
    swift_retain();
    return a1;
  }
  __src = a2;
  unint64_t v26 = ~(unint64_t)v18;
  uint64_t v44 = ~v19;
  unint64_t v45 = (v20 & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  uint64_t v43 = ~v16;
  if (v8 == v14)
  {
    if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(__src, v8, v6)) {
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  unint64_t v27 = ((((unint64_t)__src + v17) & ~v16) + v15 + v19) & ~v19;
  if (v12 == v14)
  {
    if (v11 >= 0x7FFFFFFF) {
      goto LABEL_24;
    }
LABEL_27:
    unint64_t v28 = *(void *)((v20 + v27) & 0xFFFFFFFFFFFFFFF8);
    if (v28 >= 0xFFFFFFFF) {
      LODWORD(v28) = -1;
    }
    if (v28 == -1) {
      goto LABEL_30;
    }
    goto LABEL_25;
  }
  unint64_t v27 = (v21 + v27) & v26;
  if (v11 < v13) {
    goto LABEL_27;
  }
LABEL_24:
  if (!(*(unsigned int (**)(unint64_t))(v10 + 48))(v27))
  {
LABEL_30:
    uint64_t v29 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16);
    unint64_t v42 = v26;
    v29(a1, __src, v6);
    unint64_t v30 = ((unint64_t)a1 + v17) & v43;
    unint64_t v31 = ((unint64_t)__src + v17) & v43;
    v29((uint64_t *)v30, (uint64_t *)v31, v6);
    uint64_t v32 = v31 + v15;
    uint64_t v33 = (v30 + v15 + v19) & v44;
    uint64_t v34 = (v32 + v19) & v44;
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    v35(v33, v34, v46);
    *(void *)((v20 + v33) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v20 + v34) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v36 = (v45 + v33) & v42;
    unint64_t v37 = (v45 + v34) & v42;
    swift_bridgeObjectRetain();
    v35(v36, v37, v46);
    uint64_t v38 = (void *)((v20 + v37) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v39 = v38[1];
    uint64_t v40 = (void *)((v20 + v36) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v40 = *v38;
    v40[1] = v39;
    goto LABEL_31;
  }
LABEL_25:
  memcpy(a1, __src, v22);
  return a1;
}

uint64_t destroy for AdapterState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  if (v11 <= v6) {
    unsigned int v12 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v12 = v11;
  }
  if (v10 <= v12) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v14 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = v16 | 7;
  uint64_t v18 = *(void *)(*(void *)(v7 - 8) + 64) + 7;
  unint64_t v27 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v6 == v13)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
    if (result) {
      return result;
    }
    goto LABEL_21;
  }
  unint64_t v20 = (((v14 + v15 + a1) & ~v15) + v14 + v17) & ~(v16 | 7);
  if (v11 == v13)
  {
    if (v10 >= 0x7FFFFFFF) {
      goto LABEL_15;
    }
  }
  else
  {
    unint64_t v20 = ((v18 & 0xFFFFFFFFFFFFFFF8) + 8 + v16 + v20) & ~v16;
    if (v10 >= v12)
    {
LABEL_15:
      uint64_t result = (*(uint64_t (**)(unint64_t))(v8 + 48))(v20);
      if (result) {
        return result;
      }
      goto LABEL_21;
    }
  }
  unint64_t v21 = *(void *)((v18 + v20) & 0xFFFFFFFFFFFFFFF8);
  if (v21 >= 0xFFFFFFFF) {
    LODWORD(v21) = -1;
  }
  uint64_t result = (v21 + 1);
  if (v21 == -1)
  {
LABEL_21:
    uint64_t v22 = v7;
    int v23 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v23(a1, v4);
    uint64_t v24 = (v14 + v15 + a1) & ~v15;
    v23(v24, v4);
    uint64_t v25 = (v24 + v14 + v17) & ~(v16 | 7);
    unint64_t v26 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v26(v25, v22);
    swift_bridgeObjectRelease();
    v26((v27 + v16 + v25) & ~v16, v22);
    return swift_release();
  }
  return result;
}

void *initializeWithCopy for AdapterState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = v12;
  }
  if (v11 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v15 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = v15 + v16;
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = v18 | 7;
  uint64_t v20 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  unint64_t v42 = (v20 & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  uint64_t v40 = ~v18;
  uint64_t v41 = v5;
  uint64_t v38 = ~v16;
  uint64_t v39 = ~(v18 | 7);
  if (v7 == v14)
  {
    if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5)) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  uint64_t v21 = ((((unint64_t)a2 + v17) & ~v16) + v15 + v19) & ~(v18 | 7);
  if (v12 == v14)
  {
    if (v11 >= 0x7FFFFFFF) {
      goto LABEL_15;
    }
LABEL_18:
    unint64_t v24 = *(void *)((v20 + v21) & 0xFFFFFFFFFFFFFFF8);
    if (v24 >= 0xFFFFFFFF) {
      LODWORD(v24) = -1;
    }
    if (v24 == -1) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  uint64_t v21 = (v42 + v21) & ~v18;
  if (v11 < v13) {
    goto LABEL_18;
  }
LABEL_15:
  if (!(*(unsigned int (**)(uint64_t))(v9 + 48))(v21))
  {
LABEL_21:
    uint64_t v25 = *(void (**)(void *, const void *, uint64_t))(v6 + 16);
    v25(a1, a2, v41);
    unint64_t v26 = ((unint64_t)a1 + v17) & v38;
    unint64_t v27 = ((unint64_t)a2 + v17) & v38;
    v25((void *)v26, (const void *)v27, v41);
    uint64_t v28 = v27 + v15;
    uint64_t v29 = (v26 + v15 + v19) & v39;
    uint64_t v30 = (v28 + v19) & v39;
    unint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
    v31(v29, v30, v8);
    *(void *)((v20 + v29) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v20 + v30) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v32 = (v42 + v29) & v40;
    unint64_t v33 = (v42 + v30) & v40;
    swift_bridgeObjectRetain();
    v31(v32, v33, v8);
    int v23 = a1;
    uint64_t v34 = (void *)((v20 + v33) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v35 = v34[1];
    unint64_t v36 = (void *)((v20 + v32) & 0xFFFFFFFFFFFFFFF8);
    void *v36 = *v34;
    v36[1] = v35;
    swift_retain();
    return v23;
  }
LABEL_16:
  uint64_t v22 = (v19 + v15 + (v17 & ~v16)) & ~v19;
  int v23 = a1;
  memcpy(a1, a2, ((v20 + ((v42 + v22) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 16);
  return v23;
}

void *assignWithCopy for AdapterState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  unsigned int v11 = (void *)v10;
  uint64_t v12 = *(unsigned int *)(v10 + 84);
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  if (v13 <= v8) {
    unsigned int v14 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v14 = v13;
  }
  if (v12 <= v14) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v16 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v17 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = ~v17;
  uint64_t v19 = v16 + v17;
  uint64_t v20 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = v20 | 7;
  uint64_t v22 = ~(v20 | 7);
  uint64_t v23 = *(void *)(v10 + 64) + 7;
  uint64_t v24 = ~v20;
  unint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + v20 + 8;
  uint64_t v83 = v23;
  unint64_t __n = ((v23 + ((v25 + (((v20 | 7) + v16 + ((v16 + v17) & ~v17)) & v22)) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v84 = v9;
  unint64_t v80 = *(void **)(v9 - 8);
  uint64_t v81 = ~v20;
  unint64_t v79 = v25;
  uint64_t v76 = ~v17;
  uint64_t v77 = v20 | 7;
  uint64_t v75 = v16 + v17;
  if (v8 == v15)
  {
    unint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
    int v27 = v26(a1, v8, v5);
    int v28 = v26(a2, v8, v6);
    uint64_t v29 = a2;
    if (!v27)
    {
LABEL_49:
      if (!v28)
      {
        uint64_t v61 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
        v61(a1, v29, v6);
        uint64_t v62 = a1;
        unint64_t v63 = ((unint64_t)a1 + v75) & v76;
        v61((void *)v63, (const void *)(((unint64_t)v29 + v75) & v76), v6);
        uint64_t v64 = (v63 + v16 + v77) & v22;
        unint64_t v65 = ((((unint64_t)v29 + v75) & v76) + v16 + v77) & v22;
        unint64_t v66 = (void (*)(uint64_t, unint64_t, uint64_t))v80[3];
        v66(v64, v65, v84);
        *(void *)((v83 + v64) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v83 + v65) & 0xFFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain();
        a1 = v62;
        swift_bridgeObjectRelease();
        unint64_t v67 = (v79 + v64) & v81;
        unint64_t v68 = (v79 + v65) & v81;
        v66(v67, v68, v84);
        int v69 = (void *)((v83 + v67) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v70 = (void *)((v83 + v68) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v71 = v70[1];
        *int v69 = *v70;
        v69[1] = v71;
        swift_retain();
        swift_release();
        return a1;
      }
      uint64_t v57 = *(void (**)(void *, uint64_t))(v7 + 8);
      v57(a1, v6);
      v57((void *)(((unint64_t)a1 + v75) & v76), v6);
      unint64_t v58 = ((((unint64_t)a1 + v75) & v76) + v16 + v77) & v22;
      size_t v59 = (void (*)(unint64_t, uint64_t))v80[1];
      v59(v58, v84);
      swift_bridgeObjectRelease();
      v59((v79 + v58) & v81, v84);
      swift_release();
      goto LABEL_51;
    }
LABEL_39:
    if (!v28) {
      goto LABEL_43;
    }
LABEL_51:
    memcpy(a1, v29, __n);
    return a1;
  }
  uint64_t v73 = *(void *)(v5 - 8);
  uint64_t v74 = v5;
  unsigned int v72 = a1;
  unint64_t v30 = ((((unint64_t)a1 + v19) & v18) + v16 + v21) & v22;
  if (v13 == v15)
  {
    if (v12 >= 0x7FFFFFFF)
    {
LABEL_15:
      uint64_t v31 = ~v17;
      uint64_t v32 = v20 | 7;
      uint64_t v33 = v16 + v17;
      int v34 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v30, v12, v9);
      uint64_t v19 = v33;
      uint64_t v18 = v31;
      uint64_t v21 = v32;
      unint64_t v25 = v79;
      unsigned int v11 = v80;
      uint64_t v24 = v81;
      uint64_t v9 = v84;
      int v35 = v34;
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v30 = (v25 + v30) & v24;
    if (v12 >= v14) {
      goto LABEL_15;
    }
  }
  unint64_t v36 = *(void *)((v23 + v30) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= 0xFFFFFFFF) {
    LODWORD(v36) = -1;
  }
  int v35 = v36 + 1;
LABEL_20:
  uint64_t v37 = ((((unint64_t)a2 + v19) & v18) + v16 + v21) & v22;
  if (!v35)
  {
    if (v13 == v15)
    {
      a1 = v72;
      uint64_t v7 = v73;
      uint64_t v29 = a2;
      uint64_t v6 = v74;
      if (v12 < 0x7FFFFFFF)
      {
        unint64_t v56 = *(void *)((v83 + v37) & 0xFFFFFFFFFFFFFFF8);
        if (v56 >= 0xFFFFFFFF) {
          LODWORD(v56) = -1;
        }
        int v28 = v56 + 1;
      }
      else
      {
        int v28 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11[6])(v37, v12, v9);
      }
    }
    else
    {
      unint64_t v41 = (v25 + v37) & v24;
      if (v12 >= v14)
      {
        int v28 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v11[6])(v41, v12, v9);
      }
      else
      {
        unint64_t v42 = *(void *)((v83 + v41) & 0xFFFFFFFFFFFFFFF8);
        if (v42 >= 0xFFFFFFFF) {
          LODWORD(v42) = -1;
        }
        int v28 = v42 + 1;
      }
      a1 = v72;
      uint64_t v7 = v73;
      uint64_t v29 = a2;
      uint64_t v6 = v74;
    }
    goto LABEL_49;
  }
  if (v13 != v15)
  {
    unint64_t v38 = (v25 + v37) & v24;
    if (v12 >= v14)
    {
      int v40 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v11[6])(v38, v12, v9);
    }
    else
    {
      unint64_t v39 = *(void *)((v83 + v38) & 0xFFFFFFFFFFFFFFF8);
      if (v39 >= 0xFFFFFFFF) {
        LODWORD(v39) = -1;
      }
      int v40 = v39 + 1;
    }
    a1 = v72;
    uint64_t v7 = v73;
    uint64_t v29 = a2;
    uint64_t v6 = v74;
    if (!v40) {
      goto LABEL_43;
    }
    goto LABEL_51;
  }
  a1 = v72;
  uint64_t v7 = v73;
  uint64_t v29 = a2;
  uint64_t v6 = v74;
  if (v12 < 0x7FFFFFFF)
  {
    unint64_t v43 = *(void *)((v83 + v37) & 0xFFFFFFFFFFFFFFF8);
    if (v43 >= 0xFFFFFFFF) {
      LODWORD(v43) = -1;
    }
    int v28 = v43 + 1;
    goto LABEL_39;
  }
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v11[6])(v37, v12, v9)) {
    goto LABEL_51;
  }
LABEL_43:
  uint64_t v44 = *(void (**)(void *, const void *, uint64_t))(v7 + 16);
  v44(a1, v29, v6);
  unint64_t v45 = a1;
  unint64_t v46 = ((unint64_t)a1 + v75) & v76;
  v44((void *)v46, (const void *)(((unint64_t)v29 + v75) & v76), v6);
  uint64_t v47 = v46 + v16;
  a1 = v45;
  uint64_t v48 = (v47 + v77) & v22;
  unint64_t v49 = ((((unint64_t)v29 + v75) & v76) + v16 + v77) & v22;
  uint64_t v50 = (void (*)(uint64_t, unint64_t, uint64_t))v80[2];
  v50(v48, v49, v84);
  *(void *)((v83 + v48) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v83 + v49) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v51 = (v79 + v48) & v81;
  unint64_t v52 = (v79 + v49) & v81;
  swift_bridgeObjectRetain();
  v50(v51, v52, v84);
  uint64_t v53 = (void *)((v83 + v52) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v54 = v53[1];
  int v55 = (void *)((v83 + v51) & 0xFFFFFFFFFFFFFFF8);
  *int v55 = *v53;
  v55[1] = v54;
  swift_retain();
  return a1;
}

void *initializeWithTake for AdapterState(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = v12;
  }
  if (v11 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v15 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v17 = v15 + v16;
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = v18 | 7;
  uint64_t v20 = *(void *)(*(void *)(v8 - 8) + 64) + 7;
  unint64_t v39 = (v20 & 0xFFFFFFFFFFFFFFF8) + v18 + 8;
  uint64_t v37 = ~v18;
  uint64_t v38 = v5;
  uint64_t v35 = ~v16;
  uint64_t v36 = ~(v18 | 7);
  if (v7 == v14)
  {
    if (!(*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, v7, v5)) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  uint64_t v21 = ((((unint64_t)a2 + v17) & ~v16) + v15 + v19) & ~(v18 | 7);
  if (v12 == v14)
  {
    if (v11 >= 0x7FFFFFFF) {
      goto LABEL_15;
    }
LABEL_18:
    unint64_t v24 = *(void *)((v20 + v21) & 0xFFFFFFFFFFFFFFF8);
    if (v24 >= 0xFFFFFFFF) {
      LODWORD(v24) = -1;
    }
    if (v24 == -1) {
      goto LABEL_21;
    }
    goto LABEL_16;
  }
  uint64_t v21 = (v39 + v21) & ~v18;
  if (v11 < v13) {
    goto LABEL_18;
  }
LABEL_15:
  if (!(*(unsigned int (**)(uint64_t))(v9 + 48))(v21))
  {
LABEL_21:
    unint64_t v25 = *(void (**)(void *, const void *, uint64_t))(v6 + 32);
    v25(a1, a2, v38);
    unint64_t v26 = ((unint64_t)a1 + v17) & v35;
    unint64_t v27 = ((unint64_t)a2 + v17) & v35;
    v25((void *)v26, (const void *)v27, v38);
    uint64_t v28 = v27 + v15;
    uint64_t v29 = (v26 + v15 + v19) & v36;
    uint64_t v30 = (v28 + v19) & v36;
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
    v31(v29, v30, v8);
    *(void *)((v20 + v29) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v20 + v30) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v32 = (v39 + v29) & v37;
    unint64_t v33 = (v39 + v30) & v37;
    v31(v32, v33, v8);
    uint64_t v23 = a1;
    *(_OWORD *)((v20 + v32) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v20 + v33) & 0xFFFFFFFFFFFFFFF8);
    return v23;
  }
LABEL_16:
  uint64_t v22 = (v19 + v15 + (v17 & ~v16)) & ~v19;
  uint64_t v23 = a1;
  memcpy(a1, a2, ((v20 + ((v39 + v22) & ~v18)) & 0xFFFFFFFFFFFFFFF8) + 16);
  return v23;
}

void *assignWithTake for AdapterState(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  unsigned int v11 = (void *)v10;
  uint64_t v12 = *(unsigned int *)(v10 + 84);
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  if (v13 <= v8) {
    unsigned int v14 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v14 = v13;
  }
  if (v12 <= v14) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v16 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v17 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = ~v17;
  uint64_t v19 = v16 + v17;
  uint64_t v20 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = v20 | 7;
  uint64_t v22 = ~(v20 | 7);
  uint64_t v23 = *(void *)(v10 + 64) + 7;
  uint64_t v24 = ~v20;
  unint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + v20 + 8;
  uint64_t v78 = v23;
  unint64_t __n = ((v23 + ((v25 + (((v20 | 7) + v16 + ((v16 + v17) & ~v17)) & v22)) & ~v20)) & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v79 = v9;
  uint64_t v75 = ~v20;
  uint64_t v76 = *(void **)(v9 - 8);
  unint64_t v74 = v25;
  uint64_t v71 = ~v17;
  uint64_t v72 = v20 | 7;
  uint64_t v70 = v16 + v17;
  if (v8 == v15)
  {
    unint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
    int v27 = v26(a1, v8, v5);
    int v28 = v26(a2, v8, v6);
    uint64_t v29 = a2;
    if (!v27)
    {
LABEL_49:
      if (!v28)
      {
        unint64_t v58 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
        v58(a1, v29, v6);
        size_t v59 = a1;
        unint64_t v60 = ((unint64_t)a1 + v70) & v71;
        v58((void *)v60, (const void *)(((unint64_t)v29 + v70) & v71), v6);
        uint64_t v61 = v60 + v16;
        a1 = v59;
        uint64_t v62 = (v61 + v72) & v22;
        unint64_t v63 = ((((unint64_t)v29 + v70) & v71) + v16 + v72) & v22;
        uint64_t v64 = (void (*)(uint64_t, unint64_t, uint64_t))v76[5];
        v64(v62, v63, v79);
        *(void *)((v78 + v62) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v78 + v63) & 0xFFFFFFFFFFFFFFF8);
        swift_bridgeObjectRelease();
        unint64_t v65 = (v74 + v62) & v75;
        unint64_t v66 = (v74 + v63) & v75;
        v64(v65, v66, v79);
        *(_OWORD *)((v78 + v65) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v78 + v66) & 0xFFFFFFFFFFFFFFF8);
        swift_release();
        return a1;
      }
      uint64_t v54 = *(void (**)(void *, uint64_t))(v7 + 8);
      v54(a1, v6);
      v54((void *)(((unint64_t)a1 + v70) & v71), v6);
      unint64_t v55 = ((((unint64_t)a1 + v70) & v71) + v16 + v72) & v22;
      unint64_t v56 = (void (*)(unint64_t, uint64_t))v76[1];
      v56(v55, v79);
      swift_bridgeObjectRelease();
      v56((v74 + v55) & v75, v79);
      swift_release();
      goto LABEL_51;
    }
LABEL_39:
    if (!v28) {
      goto LABEL_43;
    }
LABEL_51:
    memcpy(a1, v29, __n);
    return a1;
  }
  uint64_t v68 = *(void *)(v5 - 8);
  uint64_t v69 = v5;
  unint64_t v67 = a1;
  unint64_t v30 = ((((unint64_t)a1 + v19) & v18) + v16 + v21) & v22;
  if (v13 == v15)
  {
    if (v12 >= 0x7FFFFFFF)
    {
LABEL_15:
      uint64_t v31 = ~v17;
      uint64_t v32 = v20 | 7;
      uint64_t v33 = v16 + v17;
      int v34 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))(v30, v12, v9);
      uint64_t v19 = v33;
      uint64_t v18 = v31;
      uint64_t v21 = v32;
      unint64_t v25 = v74;
      uint64_t v24 = v75;
      unsigned int v11 = v76;
      uint64_t v9 = v79;
      int v35 = v34;
      goto LABEL_20;
    }
  }
  else
  {
    unint64_t v30 = (v25 + v30) & v24;
    if (v12 >= v14) {
      goto LABEL_15;
    }
  }
  unint64_t v36 = *(void *)((v23 + v30) & 0xFFFFFFFFFFFFFFF8);
  if (v36 >= 0xFFFFFFFF) {
    LODWORD(v36) = -1;
  }
  int v35 = v36 + 1;
LABEL_20:
  uint64_t v37 = ((((unint64_t)a2 + v19) & v18) + v16 + v21) & v22;
  if (!v35)
  {
    if (v13 == v15)
    {
      a1 = v67;
      uint64_t v7 = v68;
      uint64_t v29 = a2;
      uint64_t v6 = v69;
      if (v12 < 0x7FFFFFFF)
      {
        unint64_t v53 = *(void *)((v78 + v37) & 0xFFFFFFFFFFFFFFF8);
        if (v53 >= 0xFFFFFFFF) {
          LODWORD(v53) = -1;
        }
        int v28 = v53 + 1;
      }
      else
      {
        int v28 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v11[6])(v37, v12, v9);
      }
    }
    else
    {
      unint64_t v41 = (v25 + v37) & v24;
      if (v12 >= v14)
      {
        int v28 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v11[6])(v41, v12, v9);
      }
      else
      {
        unint64_t v42 = *(void *)((v78 + v41) & 0xFFFFFFFFFFFFFFF8);
        if (v42 >= 0xFFFFFFFF) {
          LODWORD(v42) = -1;
        }
        int v28 = v42 + 1;
      }
      a1 = v67;
      uint64_t v7 = v68;
      uint64_t v29 = a2;
      uint64_t v6 = v69;
    }
    goto LABEL_49;
  }
  if (v13 != v15)
  {
    unint64_t v38 = (v25 + v37) & v24;
    if (v12 >= v14)
    {
      int v40 = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v11[6])(v38, v12, v9);
    }
    else
    {
      unint64_t v39 = *(void *)((v78 + v38) & 0xFFFFFFFFFFFFFFF8);
      if (v39 >= 0xFFFFFFFF) {
        LODWORD(v39) = -1;
      }
      int v40 = v39 + 1;
    }
    a1 = v67;
    uint64_t v7 = v68;
    uint64_t v29 = a2;
    uint64_t v6 = v69;
    if (!v40) {
      goto LABEL_43;
    }
    goto LABEL_51;
  }
  a1 = v67;
  uint64_t v7 = v68;
  uint64_t v29 = a2;
  uint64_t v6 = v69;
  if (v12 < 0x7FFFFFFF)
  {
    unint64_t v43 = *(void *)((v78 + v37) & 0xFFFFFFFFFFFFFFF8);
    if (v43 >= 0xFFFFFFFF) {
      LODWORD(v43) = -1;
    }
    int v28 = v43 + 1;
    goto LABEL_39;
  }
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v11[6])(v37, v12, v9)) {
    goto LABEL_51;
  }
LABEL_43:
  uint64_t v44 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v44(a1, v29, v6);
  unint64_t v45 = a1;
  unint64_t v46 = ((unint64_t)a1 + v70) & v71;
  v44((void *)v46, (const void *)(((unint64_t)v29 + v70) & v71), v6);
  uint64_t v47 = v46 + v16;
  a1 = v45;
  uint64_t v48 = (v47 + v72) & v22;
  unint64_t v49 = ((((unint64_t)v29 + v70) & v71) + v16 + v72) & v22;
  uint64_t v50 = (void (*)(uint64_t, unint64_t, uint64_t))v76[4];
  v50(v48, v49, v79);
  *(void *)((v78 + v48) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v78 + v49) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v51 = (v74 + v48) & v75;
  unint64_t v52 = (v74 + v49) & v75;
  v50(v51, v52, v79);
  *(_OWORD *)((v78 + v51) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v78 + v52) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AdapterState(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  uint64_t v10 = v8;
  unsigned int v11 = *(_DWORD *)(v8 + 84);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= v9) {
    unsigned int v13 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v13 = v12;
  }
  if (v11 <= v13) {
    unsigned int v14 = v13;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v15 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v18 = v15 + v16;
  uint64_t v19 = v17 | 7;
  uint64_t v20 = *(void *)(v8 + 64) + 7;
  unint64_t v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + v17 + 8;
  if (v14 - 1 < a2)
  {
    unint64_t v22 = ((v20 + ((v21 + ((v19 + v15 + (v18 & ~v16)) & ~v19)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v23 = a2 - v14 + 2;
    if ((v22 & 0xFFFFFFF8) != 0) {
      unsigned int v23 = 2;
    }
    if (v23 >= 0x10000) {
      unsigned int v24 = 4;
    }
    else {
      unsigned int v24 = 2;
    }
    if (v23 < 0x100) {
      unsigned int v24 = 1;
    }
    if (v23 >= 2) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    switch(v25)
    {
      case 1:
        int v26 = *((unsigned __int8 *)a1 + v22);
        if (!*((unsigned char *)a1 + v22)) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v26 = *(unsigned __int16 *)((char *)a1 + v22);
        if (*(_WORD *)((char *)a1 + v22)) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187F37B50);
      case 4:
        int v26 = *(_DWORD *)((char *)a1 + v22);
        if (!v26) {
          break;
        }
LABEL_27:
        int v28 = v26 - 1;
        if ((v22 & 0xFFFFFFF8) != 0)
        {
          int v28 = 0;
          int v29 = *a1;
        }
        else
        {
          int v29 = 0;
        }
        return (v29 | v28) + v14;
      default:
        break;
    }
  }
  if (v9 == v14)
  {
    unsigned int v30 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v7 + 48))(a1, v9, v6);
    goto LABEL_39;
  }
  unint64_t v31 = ((((unint64_t)a1 + v18) & ~v16) + v15 + v19) & ~v19;
  if (v12 != v14)
  {
    unint64_t v31 = (v21 + v31) & ~v17;
    if (v11 >= v13) {
      goto LABEL_34;
    }
LABEL_36:
    unint64_t v32 = *(void *)((v20 + v31) & 0xFFFFFFFFFFFFFFF8);
    if (v32 >= 0xFFFFFFFF) {
      LODWORD(v32) = -1;
    }
    unsigned int v30 = v32 + 1;
    goto LABEL_39;
  }
  if (v11 < 0x7FFFFFFF) {
    goto LABEL_36;
  }
LABEL_34:
  unsigned int v30 = (*(uint64_t (**)(unint64_t))(v10 + 48))(v31);
LABEL_39:
  if (v30 >= 2) {
    return v30 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for AdapterState(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for Date() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  if (v15 <= v9) {
    unsigned int v16 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v16 = v15;
  }
  if (v11 <= v16) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v10 + 84);
  }
  unsigned int v18 = v17 - 1;
  uint64_t v19 = v12 + v13;
  uint64_t v20 = v14 | 7;
  uint64_t v21 = *(void *)(v10 + 64) + 7;
  unint64_t v22 = (v21 & 0xFFFFFFFFFFFFFFF8) + v14 + 8;
  size_t v23 = ((v21 + ((v22 + (((v14 | 7) + v12 + ((v12 + v13) & ~v13)) & ~(v14 | 7))) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v17 - 1 >= a3)
  {
    int v26 = 0;
    if (v18 >= a2) {
      goto LABEL_22;
    }
LABEL_26:
    unsigned int v29 = a2 - v17;
    if (((v21
         + ((v22
           + (((v14 | 7) + v12 + ((v12 + v13) & ~v13)) & ~(v14 | 7))) & ~v14)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      int v30 = v29 + 1;
    else {
      int v30 = 1;
    }
    if (((v21
         + ((v22
           + (((v14 | 7) + v12 + ((v12 + v13) & ~v13)) & ~(v14 | 7))) & ~v14)) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      bzero(a1, ((v21 + ((v22 + (((v14 | 7) + v12 + ((v12 + v13) & ~v13)) & ~(v14 | 7))) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 16);
      *a1 = v29;
    }
    switch(v26)
    {
      case 1:
        *((unsigned char *)a1 + v23) = v30;
        break;
      case 2:
        *(_WORD *)((char *)a1 + v23) = v30;
        break;
      case 3:
LABEL_60:
        __break(1u);
        JUMPOUT(0x187F37EB8);
      case 4:
        *(unsigned int *)((char *)a1 + v23) = v30;
        break;
      default:
        return;
    }
    return;
  }
  unsigned int v24 = a3 - v17 + 2;
  if (((v21
       + ((v22
         + (((v14 | 7) + v12 + ((v12 + v13) & ~v13)) & ~(v14 | 7))) & ~v14)) & 0xFFFFFFF8) != 0xFFFFFFF0)
    unsigned int v24 = 2;
  if (v24 >= 0x10000) {
    int v25 = 4;
  }
  else {
    int v25 = 2;
  }
  if (v24 < 0x100) {
    int v25 = 1;
  }
  if (v24 >= 2) {
    int v26 = v25;
  }
  else {
    int v26 = 0;
  }
  if (v18 < a2) {
    goto LABEL_26;
  }
LABEL_22:
  uint64_t v27 = ~v13;
  uint64_t v28 = ~v14;
  switch(v26)
  {
    case 1:
      *((unsigned char *)a1 + v23) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)((char *)a1 + v23) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
      goto LABEL_60;
    case 4:
      *(unsigned int *)((char *)a1 + v23) = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (!a2) {
        return;
      }
LABEL_35:
      unsigned int v31 = a2 + 1;
      if (a2 + 1 > v17)
      {
        if (v23)
        {
          unsigned int v32 = a2 - v17;
          bzero(a1, v23);
          *a1 = v32;
        }
        return;
      }
      if (a2 == -1) {
        return;
      }
      if (v9 == v17)
      {
        uint64_t v33 = *(void (**)(unsigned int *))(v8 + 56);
        v33(a1);
        return;
      }
      unint64_t v34 = ((((unint64_t)a1 + v19) & v27) + v12 + v20) & ~v20;
      if (v15 == v17)
      {
        if (v11 < 0x7FFFFFFF)
        {
          int v35 = (void *)((v21 + v34) & 0xFFFFFFFFFFFFFFF8);
          if ((v31 & 0x80000000) != 0)
          {
            uint64_t v36 = a2 - 0x7FFFFFFF;
LABEL_58:
            void *v35 = v36;
            return;
          }
LABEL_53:
          uint64_t v36 = a2;
          goto LABEL_58;
        }
      }
      else
      {
        unint64_t v34 = (v22 + v34) & v28;
        if (v11 < v16)
        {
          int v35 = (void *)((v21 + v34) & 0xFFFFFFFFFFFFFFF8);
          if ((v31 & 0x80000000) != 0)
          {
            uint64_t v36 = a2 - 0x7FFFFFFF;
            v35[1] = 0;
            goto LABEL_58;
          }
          goto LABEL_53;
        }
      }
      uint64_t v37 = *(void (**)(unint64_t))(v10 + 56);
      v37(v34);
      break;
  }
}

uint64_t getEnumTag for AdapterState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a2 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = v10;
  }
  if (v8 <= v11) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  if (v6 == v12)
  {
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    return v13(a1, v6, v4);
  }
  uint64_t v15 = *(void *)(v7 + 64) + 7;
  unint64_t v16 = (*(void *)(v5 + 64)
       + ((*(void *)(v5 + 64) + a1 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
       + (v9 | 7)) & ~(v9 | 7);
  if (v10 == v12)
  {
    if (v8 >= 0x7FFFFFFF)
    {
LABEL_16:
      unsigned int v17 = *(uint64_t (**)(unint64_t))(v7 + 48);
      return v17(v16);
    }
  }
  else
  {
    unint64_t v16 = (v9 + (v15 & 0xFFFFFFFFFFFFFFF8) + v16 + 8) & ~v9;
    if (v8 >= v11) {
      goto LABEL_16;
    }
  }
  unint64_t v18 = *(void *)((v15 + v16) & 0xFFFFFFFFFFFFFFF8);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

void destructiveInjectEnumTag for AdapterState(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v9 + 64);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v9 + 84);
  }
  if (v15 <= v8) {
    unsigned int v16 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v16 = v15;
  }
  if (v10 <= v16) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v18 = ~v12;
  uint64_t v19 = v11 + v12;
  uint64_t v20 = v13 | 7;
  uint64_t v21 = ~(v13 | 7);
  uint64_t v22 = v14 + 7;
  uint64_t v23 = ~v13;
  unint64_t v24 = ((v14 + 7) & 0xFFFFFFFFFFFFFFF8) + v13 + 8;
  if (v17 < a2)
  {
    int v25 = (((v24 + ((v20 + v11 + (v19 & v18)) & v21)) & v23) + v14 + 7) & 0xFFFFFFF8;
    if (v25 != -16)
    {
      int v26 = ~v17 + a2;
      bzero(a1, (v25 + 16));
      *a1 = v26;
    }
    return;
  }
  if (!a2) {
    return;
  }
  if (v8 == v17)
  {
    uint64_t v27 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v27(a1, a2, v8, v6);
    return;
  }
  unint64_t v28 = ((((unint64_t)a1 + v19) & v18) + v11 + v20) & v21;
  if (v15 == v17)
  {
    if (v10 < 0x7FFFFFFF)
    {
      unsigned int v29 = (void *)((v22 + v28) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) != 0)
      {
        void *v29 = a2 ^ 0x80000000;
        return;
      }
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v28 = (v24 + v28) & v23;
    if (v10 < v16)
    {
      unsigned int v29 = (void *)((v22 + v28) & 0xFFFFFFFFFFFFFFF8);
      if ((a2 & 0x80000000) != 0)
      {
        void *v29 = a2 ^ 0x80000000;
        v29[1] = 0;
        return;
      }
LABEL_24:
      void *v29 = (a2 - 1);
      return;
    }
  }
  int v30 = *(void (**)(unint64_t, uint64_t))(v9 + 56);

  v30(v28, a2);
}

uint64_t partial apply for closure #1 in closure #1 in MapAnimator.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = *(void *)(type metadata accessor for MapAnimator() - 8);
  uint64_t v10 = (uint64_t)v2 + ((*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return closure #1 in closure #1 in MapAnimator.body.getter(a1, a2, v10, v5, v6, v7, v8);
}

uint64_t partial apply for closure #2 in closure #1 in MapAnimator.body.getter(uint64_t a1, char *a2)
{
  type metadata accessor for MapAnimator();
  uint64_t v3 = type metadata accessor for MapAnimator();
  return MapAnimator.handleChangeOfUnderlyingValue(to:)(a2, v3);
}

uint64_t sub_187F38440()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(type metadata accessor for AdapterState() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  uint64_t v7 = v0 + v3;
  uint64_t v8 = (int *)type metadata accessor for AdapterState.PlaybackState();
  if ((*(unsigned int (**)(unint64_t, uint64_t, int *))(*((void *)v8 - 1) + 48))(v0 + v3, 1, v8))
  {
    uint64_t v9 = *(void *)(v1 - 8);
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
    v11(v7, v10);
    v11(v7 + v8[7], v10);
    uint64_t v9 = *(void *)(v1 - 8);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v12(v7 + v8[8], v1);
    type metadata accessor for KeyframeTimeline();
    swift_bridgeObjectRelease();
    v12(v7 + v8[9], v1);
    swift_release();
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v0 + v6, 1, v1)) {
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v0 + v6, v1);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MapAnimator.contentBinding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AdapterState();
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v5 = *(void *)(*(void *)(v3 - 8) + 64);
  uint64_t v6 = *(void *)(type metadata accessor for Optional() - 8);
  return AdapterState.value(with:)(v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v3, a1);
}

uint64_t sub_187F387FC()
{
  uint64_t v1 = *(void *)(v0 + 32);
  type metadata accessor for Optional();
  uint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = *(void *)(*(void *)v2 + 64);
  type metadata accessor for AdapterState();
  uint64_t v5 = type metadata accessor for Binding();
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  unint64_t v7 = v0 + v3 + v2[10];
  uint64_t v8 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v1)) {
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v7, v1);
  }
  swift_release();
  swift_release();
  unint64_t v9 = v0 + v6 + *(int *)(v5 + 32);
  uint64_t v10 = (int *)type metadata accessor for AdapterState.PlaybackState();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, int *))(*((void *)v10 - 1) + 48))(v9, 1, v10))
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
    v12(v9, v11);
    v12(v9 + v10[7], v11);
    uint64_t v13 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
    v13(v9 + v10[8], v1);
    type metadata accessor for KeyframeTimeline();
    swift_bridgeObjectRelease();
    v13(v9 + v10[9], v1);
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in MapAnimator.contentBinding.getter()
{
  return closure #2 in MapAnimator.contentBinding.getter();
}

void static PageBuilder.buildPartialBlock<A>(first:)()
{
}

{
  static PageBuilder.buildPartialBlock<A>(first:)();
}

void static PageBuilder.buildPartialBlock<A, B>(accumulated:next:)()
{
}

{
  static PageBuilder.buildPartialBlock<A, B>(accumulated:next:)();
}

void static PrintContent._makePrintContent(content:inputs:)()
{
}

_UNKNOWN **associated type witness table accessor for PrintContent.PrintBody : PrintContent in Never()
{
  return &protocol witness table for Never;
}

ValueMetadata *type metadata accessor for PageBuilder()
{
  return &type metadata for PageBuilder;
}

uint64_t dispatch thunk of PrintContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static PrintContent._makePrintContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for _PrintingOutputs()
{
  return &type metadata for _PrintingOutputs;
}

ValueMetadata *type metadata accessor for _PrintingInputs()
{
  return &type metadata for _PrintingInputs;
}

_UNKNOWN **sub_187F38CB8()
{
  return &protocol witness table for TuplePrintContent<A>;
}

uint64_t SecureField.init(_:prompt:onCommit:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(uint64_t))
{
  char v13 = a7;
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  if (a10) {
    unsigned int v16 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  else {
    unsigned int v16 = 0;
  }
  if (a10) {
    uint64_t v17 = a11;
  }
  else {
    uint64_t v17 = 0;
  }
  a9[8] = v16;
  a9[9] = 0;
  a9[10] = a10;
  a9[11] = v17;
  type metadata accessor for SecureField();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text?(a5, a6, v13, a8);
  swift_retain();
  uint64_t v18 = outlined copy of AppIntentExecutor?(a10);
  a12(v18);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a10);
  outlined consume of Text?(a5, a6, v13, a8);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t SecureField.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v32 = a2;
  _s7SwiftUI7BindingVyAA13TextSelectionVSgGSgMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  unsigned int v31 = (char *)&v29 - v6;
  uint64_t v7 = TextField.$text.getter();
  uint64_t v8 = v2[8];
  uint64_t v9 = v2[9];
  uint64_t v10 = v2[10];
  uint64_t v11 = v2[11];
  uint64_t v38 = v7;
  uint64_t v39 = v12;
  *(void *)&long long v40 = v13;
  *((void *)&v40 + 1) = v14;
  outlined copy of TextFieldState.FormatActions?(v8);
  type metadata accessor for Binding<String>();
  MEMORY[0x18C113DA0](v37);
  uint64_t v38 = v37[0];
  uint64_t v39 = v37[1];
  long long v40 = 0u;
  long long v41 = 0u;
  uint64_t v42 = v8;
  uint64_t v43 = v9;
  uint64_t v44 = v10;
  uint64_t v45 = v11;
  char v46 = 0;
  int v47 = 0;
  char v48 = 1;
  __int16 v49 = 2;
  char v50 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v30 = TextField.$text.getter();
  uint64_t v29 = v15;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[5];
  uint64_t v22 = v2[6];
  uint64_t v23 = v2[7];
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v25 = (uint64_t)v31;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v31, 1, 1, v24);
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v34 = v26;
  uint64_t v35 = v27;
  uint64_t v36 = v3;
  outlined copy of Text?(v20, v21, v22, v23);
  return TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v38, v30, v29, v17, v19, 1, v20, v21, v32, v22, v23, 0, v25, (void (*)(uint64_t))partial apply for closure #1 in SecureField.body.getter, (uint64_t)v33, v26);
}

uint64_t closure #1 in SecureField.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SecureField();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 44));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t partial apply for closure #1 in SecureField.body.getter()
{
  return closure #1 in SecureField.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

double SecureField<>.init(_:text:prompt:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, long long a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = Text.init(_:tableName:bundle:comment:)();
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  *(_OWORD *)(a5 + 32) = a6;
  *(void *)(a5 + 48) = a7;
  *(void *)(a5 + 56) = a8;
  double result = 0.0;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(void *)(a5 + 96) = v13;
  *(void *)(a5 + 104) = v16;
  *(unsigned char *)(a5 + 112) = v14 & 1;
  *(void *)(a5 + 120) = v17;
  return result;
}

uint64_t SecureField<>.init<A>(_:text:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  *(void *)&long long v17 = a2;
  *((void *)&v17 + 1) = a3;
  *(void *)&long long v18 = a4;
  *((void *)&v18 + 1) = a5;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + 1) = a7;
  *(void *)&long long v20 = a8;
  *((void *)&v20 + 1) = a10;
  closure #1 in SecureField<>.init<A>(_:text:prompt:)(a1, (uint64_t)v21);
  a9[4] = 0u;
  a9[5] = 0u;
  long long v13 = v21[1];
  a9[6] = v21[0];
  a9[7] = v13;
  *a9 = v17;
  a9[1] = v18;
  uint64_t v14 = *(void *)(a11 - 8);
  a9[2] = v19;
  a9[3] = v20;
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);

  return v15(a1, a11);
}

uint64_t SecureField.init(text:prompt:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, void (*a10)(uint64_t))
{
  return SecureField.init(_:prompt:onCommit:label:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0, 0, a10);
}

double SecureField<>.init(_:text:onCommit:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  *(void *)a5 = a1;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  double result = 0.0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(void *)(a5 + 64) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(a5 + 72) = 0;
  *(void *)(a5 + 80) = a6;
  *(void *)(a5 + 88) = a7;
  *(void *)(a5 + 96) = v12;
  *(void *)(a5 + 104) = v15;
  *(unsigned char *)(a5 + 112) = v13 & 1;
  *(void *)(a5 + 120) = v16;
  return result;
}

uint64_t SecureField<>.init<A>(_:text:onCommit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _OWORD *a9@<X8>)
{
  *(void *)&long long v16 = a2;
  *((void *)&v16 + 1) = a3;
  *(void *)&long long v17 = a4;
  *((void *)&v17 + 1) = a5;
  *(void *)&long long v18 = a6;
  *((void *)&v18 + 1) = a7;
  closure #1 in SecureField<>.init<A>(_:text:prompt:)(a1, (uint64_t)v19);
  a9[4] = (unint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  a9[5] = v18;
  long long v12 = v19[1];
  a9[6] = v19[0];
  a9[7] = v12;
  *a9 = v16;
  a9[1] = v17;
  uint64_t v13 = *(void *)(a8 - 8);
  a9[2] = 0u;
  a9[3] = 0u;
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);

  return v14(a1, a8);
}

uint64_t closure #1 in SecureField<>.init<A>(_:text:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SecureField<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for SecureField()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SecureField(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 96) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = a2[2];
    a1[1] = a2[1];
    a1[2] = v12;
    a1[3] = a2[3];
    unint64_t v13 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = *(void *)(v14 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v15 < 0xFFFFFFFF)
    {
      long long v19 = *(_OWORD *)(v14 + 16);
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
      *(_OWORD *)(v13 + 16) = v19;
    }
    else
    {
      uint64_t v16 = *(void *)v14;
      uint64_t v17 = *(void *)(v14 + 8);
      char v18 = *(unsigned char *)(v14 + 16);
      outlined copy of Text.Storage(*(void *)v14, v17, v18);
      *(void *)unint64_t v13 = v16;
      *(void *)(v13 + 8) = v17;
      *(unsigned char *)(v13 + 16) = v18;
      *(void *)(v13 + 24) = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
    }
    unint64_t v20 = (v13 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = (v14 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v21 < 0xFFFFFFFFuLL)
    {
      long long v24 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
      *(_OWORD *)(v20 + 16) = v24;
    }
    else
    {
      uint64_t v22 = *(void *)(v21 + 8);
      *(void *)unint64_t v20 = *(void *)v21;
      *(void *)(v20 + 8) = v22;
      uint64_t v23 = *(void *)(v21 + 24);
      *(void *)(v20 + 16) = *(void *)(v21 + 16);
      *(void *)(v20 + 24) = v23;
      swift_retain();
      swift_retain();
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v20 + v6 + 32) & ~v6, (v21 + v6 + 32) & ~v6, v4);
  }
  return a1;
}

uint64_t destroy for SecureField(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v4 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = (void *)((v4 + 39) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
  }
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

void *initializeWithCopy for SecureField(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  unint64_t v7 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v8 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v9 < 0xFFFFFFFF)
  {
    long long v13 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v13;
  }
  else
  {
    uint64_t v10 = *(void *)v8;
    uint64_t v11 = *(void *)(v8 + 8);
    char v12 = *(unsigned char *)(v8 + 16);
    outlined copy of Text.Storage(*(void *)v8, v11, v12);
    *(void *)unint64_t v7 = v10;
    *(void *)(v7 + 8) = v11;
    *(unsigned char *)(v7 + 16) = v12;
    *(void *)(v7 + 24) = *(void *)(v8 + 24);
    swift_bridgeObjectRetain();
  }
  unint64_t v14 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v15 < 0xFFFFFFFFuLL)
  {
    long long v18 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v18;
  }
  else
  {
    uint64_t v16 = *(void *)(v15 + 8);
    *(void *)unint64_t v14 = *(void *)v15;
    *(void *)(v14 + 8) = v16;
    uint64_t v17 = *(void *)(v15 + 24);
    *(void *)(v14 + 16) = *(void *)(v15 + 16);
    *(void *)(v14 + 24) = v17;
    swift_retain();
    swift_retain();
  }
  uint64_t v19 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 16))((v14 + *(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), (v15 + *(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

void *assignWithCopy for SecureField(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v6 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)(v7 + 24);
  if (*(void *)(v6 + 24) < 0xFFFFFFFFuLL)
  {
    if (v8 >= 0xFFFFFFFF)
    {
      uint64_t v15 = *(void *)v7;
      uint64_t v16 = *(void *)(v7 + 8);
      char v17 = *(unsigned char *)(v7 + 16);
      outlined copy of Text.Storage(*(void *)v7, v16, v17);
      *(void *)unint64_t v6 = v15;
      *(void *)(v6 + 8) = v16;
      *(unsigned char *)(v6 + 16) = v17;
      *(void *)(v6 + 24) = *(void *)(v7 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v8 >= 0xFFFFFFFF)
    {
      uint64_t v9 = *(void *)v7;
      uint64_t v10 = *(void *)(v7 + 8);
      char v11 = *(unsigned char *)(v7 + 16);
      outlined copy of Text.Storage(*(void *)v7, v10, v11);
      uint64_t v12 = *(void *)v6;
      uint64_t v13 = *(void *)(v6 + 8);
      char v14 = *(unsigned char *)(v6 + 16);
      *(void *)unint64_t v6 = v9;
      *(void *)(v6 + 8) = v10;
      *(unsigned char *)(v6 + 16) = v11;
      outlined consume of Text.Storage(v12, v13, v14);
      *(void *)(v6 + 24) = *(void *)(v7 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
    swift_bridgeObjectRelease();
  }
  long long v18 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)unint64_t v6 = *(_OWORD *)v7;
  *(_OWORD *)(v6 + 16) = v18;
LABEL_8:
  uint64_t v19 = (void *)((v6 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = (unint64_t *)((v7 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v21 = *v20;
  if (*v19 < 0xFFFFFFFFuLL)
  {
    if (v21 >= 0xFFFFFFFF)
    {
      unint64_t v24 = v20[1];
      *uint64_t v19 = v21;
      v19[1] = v24;
      unint64_t v25 = v20[3];
      _OWORD v19[2] = v20[2];
      v19[3] = v25;
      swift_retain();
      swift_retain();
      goto LABEL_15;
    }
LABEL_14:
    long long v26 = *((_OWORD *)v20 + 1);
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    *((_OWORD *)v19 + 1) = v26;
    goto LABEL_15;
  }
  if (v21 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    goto LABEL_14;
  }
  unint64_t v22 = v20[1];
  *uint64_t v19 = v21;
  v19[1] = v22;
  swift_retain();
  swift_release();
  unint64_t v23 = v20[3];
  _OWORD v19[2] = v20[2];
  v19[3] = v23;
  swift_retain();
  swift_release();
LABEL_15:
  uint64_t v27 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v27 + 24))(((unint64_t)v19 + *(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80), ((unint64_t)v20 + *(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
  return a1;
}

_OWORD *initializeWithTake for SecureField(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (_OWORD *)(((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (_OWORD *)(((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8);
  long long v7 = v6[1];
  *uint64_t v5 = *v6;
  v5[1] = v7;
  unint64_t v8 = (_OWORD *)(((unint64_t)v5 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (_OWORD *)(((unint64_t)v6 + 39) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = v9[1];
  *unint64_t v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 32))(((unint64_t)v8 + *(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

void *assignWithTake for SecureField(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease();
  unint64_t v7 = ((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v8 + 24) >= 0xFFFFFFFFuLL)
    {
      char v9 = *(unsigned char *)(v8 + 16);
      uint64_t v10 = *(void *)v7;
      uint64_t v11 = *(void *)(v7 + 8);
      char v12 = *(unsigned char *)(v7 + 16);
      *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
      *(unsigned char *)(v7 + 16) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(v7 + 24) = *(void *)(v8 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  long long v13 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v13;
LABEL_6:
  unint64_t v14 = (v7 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v8 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v14 < 0xFFFFFFFFuLL)
  {
LABEL_10:
    long long v17 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v17;
    goto LABEL_11;
  }
  if (*(void *)v15 < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  uint64_t v16 = *(void *)(v15 + 8);
  *(void *)unint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = v16;
  swift_release();
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
  swift_release();
LABEL_11:
  uint64_t v18 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 40))((v14 + *(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), (v15 + *(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureField(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 96) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                        + 39) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v6
                                                                      + 32) & ~v6);
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for SecureField(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 96) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187F3A324);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (((((unint64_t)(a1 + 39) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + v9 + 32) & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *((void *)a1 + 2) = 0;
          *((void *)a1 + 3) = 0;
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for SecureField()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187F3A364()
{
  type metadata accessor for TextField();

  return swift_getWitnessTable();
}

uint64_t one-time initialization function for didPerformBackButtonPress()
{
  uint64_t result = MEMORY[0x18C115780](0xD000000000000022, 0x800000018833C520);
  static ClarityUI.didPerformBackButtonPress = result;
  return result;
}

uint64_t PlatformViewResponderBase.descriptionName.getter()
{
  uint64_t v1 = MEMORY[0x18C119DF0](v0 + 48);
  if (!v1) {
    return recursiveDescriptionName(_:)();
  }
  uint64_t v2 = (void *)v1;
  uint64_t v7 = recursiveDescriptionName(_:)();
  v3._countAndFlagsBits = 60;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  swift_getObjectType();
  v4._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 62;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);

  return v7;
}

BOOL PlatformViewResponderBase.platformViewIsEnabled.getter()
{
  uint64_t v1 = (void *)MEMORY[0x18C119DF0](v0 + 40);
  uint64_t v2 = v1;
  if (v1) {

  }
  return v2 != 0;
}

void PlatformViewResponderBase.containsGlobalPoints(_:cacheKey:options:)(double *a1@<X0>, unint64_t a2@<X1>, double **a3@<X2>, uint64_t a4@<X8>)
{
  size_t v10 = (void *)v4;
  unsigned int v14 = *a3;
  if ((static UnifiedHitTestingFeature.isEnabled.getter() & 1) == 0)
  {
    unint64_t v24 = v14;
    ViewResponder.containsGlobalPoints(_:cacheKey:options:)();
    return;
  }
  uint64_t v15 = dispatch thunk of ViewResponder.children.getter();
  if (!*((void *)a1 + 2))
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v16 = v15;
  double v7 = a1[4];
  double v8 = a1[5];
  uint64_t v5 = v4 + 160;
  int v17 = (*(uint64_t (**)(void))(class metadata base offset for PlatformViewResponderBase + *(void *)v4 + 72))();
  swift_beginAccess();
  outlined init with copy of PlatformViewResponderBase.PlatformHitTestResult?((uint64_t)(v10 + 20), (uint64_t)&v24);
  if (v27 == 1)
  {
    outlined destroy of PlatformViewResponderBase.PlatformHitTestResult?((uint64_t)&v24);
    if ((v17 | v14)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  outlined init with take of PlatformViewResponderBase.PlatformHitTestResult((uint64_t)&v24, (uint64_t)v28);
  if ((a2 & 0x100000000) != 0 || v28[0] != a2)
  {
    outlined destroy of PlatformViewResponderBase.PlatformHitTestResult((uint64_t)v28);
    if ((v17 | v14))
    {
LABEL_5:
      uint64_t v6 = (void *)(*(uint64_t (**)(unint64_t, double, double))(class metadata base offset for PlatformViewResponderBase
                                                                               + *v10
                                                                               + 80))(a2 | ((HIDWORD(a2) & 1) << 32), v7, v8);
      if (v6) {
        goto LABEL_6;
      }
LABEL_16:
      a1 = 0;
      double v9 = 0.0;
      goto LABEL_21;
    }
LABEL_18:
    a1 = 0;
    uint64_t v6 = 0;
    double v9 = 0.0;
    goto LABEL_21;
  }
  uint64_t v6 = (void *)MEMORY[0x18C119DF0](&v29);
  outlined destroy of PlatformViewResponderBase.PlatformHitTestResult((uint64_t)v28);
  if (!v6) {
    goto LABEL_16;
  }
LABEL_6:
  id v23 = v6;
  dispatch thunk of ViewResponder.children.getter();
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
  ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)();
  swift_endAccess();
  swift_bridgeObjectRelease();
  a1 = v24;
  double v9 = v25;
  unint64_t v4 = *(void *)&v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v4 >> 62)
  {
LABEL_30:
    swift_bridgeObjectRetain();
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  uint64_t v18 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_8:
  swift_bridgeObjectRelease();
  if (!v18 || (uint64_t v19 = MEMORY[0x18C119DF0](v10 + 5)) == 0)
  {

    goto LABEL_20;
  }
  unint64_t v20 = (void *)v19;
  unsigned __int8 v21 = objc_msgSend(v23, sel_isDescendantOfView_, v19);

  if (v21)
  {
LABEL_20:
    uint64_t v16 = v4;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = MEMORY[0x1E4FBC860];
LABEL_21:
  uint64_t v22 = ((unint64_t)v14 >> 1) & 1;
  if (!a1) {
    LODWORD(v22) = 1;
  }
  if (!v22) {
    double v9 = 16.0;
  }
  if ((a2 & 0x100000000) != 0)
  {
  }
  else
  {
    LODWORD(v24) = a2;
    double v25 = v7;
    double v26 = v8;
    swift_unknownObjectWeakInit();

    char v27 = 0;
    swift_beginAccess();
    outlined assign with take of PlatformViewResponderBase.PlatformHitTestResult?((uint64_t)&v24, v5);
    swift_endAccess();
  }
  *(void *)a4 = a1;
  *(double *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v16;
}

Swift::Void __swiftcall PlatformViewResponderBase.extendPrintTree(string:)(Swift::String *string)
{
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
  ContentResponderHelper.globalPosition.getter();
  v1._countAndFlagsBits = 91;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v2._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 8236;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v4._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 4202589;
  v5._object = (void *)0xE300000000000000;
  String.append(_:)(v5);
  type metadata accessor for (CGFloat, CGFloat)();
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
}

uint64_t PlatformViewResponderBase.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  ContentResponderHelper.init()();
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = 0u;
  *(unsigned char *)(v0 + 192) = 1;
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 24) = 0;
  swift_unknownObjectWeakInit();
  swift_weakInit();
  type metadata accessor for ViewGraph();
  uint64_t v1 = MEMORY[0x18C114EE0]();
  swift_beginAccess();
  MEMORY[0x18C119DF0](v1 + 200);
  uint64_t v2 = *(void *)(v1 + 208);
  swift_retain();
  swift_release();
  swift_beginAccess();
  *(void *)(v0 + 24) = v2;
  swift_unknownObjectWeakAssign();
  swift_release();
  swift_unknownObjectRelease();
  return v0;
}

uint64_t PlatformViewResponderBase.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of PlatformViewResponderBase.PlatformHitTestResult?(v0 + 160);

  return swift_unknownObjectWeakDestroy();
}

uint64_t PlatformViewResponderBase.__deallocating_deinit()
{
  outlined destroy of weak FallbackResponderProvider?(v0 + 16);
  swift_weakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of PlatformViewResponderBase.PlatformHitTestResult?(v0 + 160);
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PlatformViewResponderBase()
{
  return type metadata accessor for PlatformViewResponderBase();
}

uint64_t destroy for PlatformViewResponderBase.PlatformHitTestResult()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t initializeWithCopy for PlatformViewResponderBase.PlatformHitTestResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t assignWithCopy for PlatformViewResponderBase.PlatformHitTestResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for PlatformViewResponderBase.PlatformHitTestResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t assignWithTake for PlatformViewResponderBase.PlatformHitTestResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for PlatformViewResponderBase.PlatformHitTestResult()
{
  return &type metadata for PlatformViewResponderBase.PlatformHitTestResult;
}

uint64_t specialized Collection.first.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0) {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2) {
    return String.subscript.getter();
  }
  else {
    return 0;
  }
}

void type metadata accessor for PlatformViewResponderBase.PlatformHitTestResult?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with copy of PlatformViewResponderBase.PlatformHitTestResult?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewResponderBase.PlatformHitTestResult?(0, &lazy cache variable for type metadata for PlatformViewResponderBase.PlatformHitTestResult?, (uint64_t)&type metadata for PlatformViewResponderBase.PlatformHitTestResult, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of PlatformViewResponderBase.PlatformHitTestResult?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewResponderBase.PlatformHitTestResult?(0, &lazy cache variable for type metadata for PlatformViewResponderBase.PlatformHitTestResult?, (uint64_t)&type metadata for PlatformViewResponderBase.PlatformHitTestResult, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PlatformViewResponderBase.PlatformHitTestResult(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)a1;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  swift_unknownObjectWeakTakeInit();
  return a2;
}

uint64_t outlined destroy of PlatformViewResponderBase.PlatformHitTestResult(uint64_t a1)
{
  return a1;
}

uint64_t specialized View.toolbarButtonLabel(ignoreEdge:)@<X0>(char a1@<W0>, _OWORD *a2@<X8>)
{
  v6[0] = a1;
  uint64_t KeyPath = swift_getKeyPath();
  char v8 = 0;
  uint64_t v9 = swift_getKeyPath();
  char v10 = 0;
  uint64_t v11 = swift_getKeyPath();
  char v12 = 0;
  uint64_t v13 = swift_getKeyPath();
  char v14 = 0;
  outlined init with copy of ToolbarButtonLabelModifier((uint64_t)v6, (uint64_t)v15);
  outlined destroy of ToolbarButtonLabelModifier((uint64_t)v6);
  outlined init with copy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v15, (uint64_t)(a2 + 4));
  long long v4 = v2[1];
  *a2 = *v2;
  a2[1] = v4;
  a2[2] = v2[2];
  *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v2 + 41);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v2);
  return outlined destroy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v15);
}

uint64_t specialized View.toolbarButtonLabel(ignoreEdge:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v4[0] = a1;
  uint64_t KeyPath = swift_getKeyPath();
  char v6 = 0;
  uint64_t v7 = swift_getKeyPath();
  char v8 = 0;
  uint64_t v9 = swift_getKeyPath();
  char v10 = 0;
  uint64_t v11 = swift_getKeyPath();
  char v12 = 0;
  outlined init with copy of ToolbarButtonLabelModifier((uint64_t)v4, (uint64_t)v13);
  outlined destroy of ToolbarButtonLabelModifier((uint64_t)v4);
  outlined init with copy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v13, a2);
  return outlined destroy of StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>((uint64_t)v13);
}

uint64_t BorderlessButtonMenuStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)a1 = 2;
  *(void *)(a1 + 8) = KeyPath;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

void BorderlessButtonMenuStyle.init(showsMenuIndicator:)()
{
}

uint64_t BorderlessButtonMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  long long v8 = *(_OWORD *)(v2 + 16);
  v11[0] = *(_OWORD *)v2;
  v11[1] = v8;
  char v12 = *(unsigned char *)(v2 + 32);
  closure #1 in BorderlessButtonMenuStyle.makeBody(configuration:)(v11, v4, v5, v6, v7, a2);
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedVi();
  return closure #2 in BorderlessButtonMenuStyle.makeBody(configuration:)(v11, v4, v5, v6, v7, a2 + *(int *)(v9 + 52));
}

uint64_t closure #1 in BorderlessButtonMenuStyle.makeBody(configuration:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v10 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  uint64_t v11 = v10 - 8;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UIButton.Configuration();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  int v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v18 = a1[1];
  long long v26 = *a1;
  long long v27 = v18;
  char v28 = *((unsigned char *)a1 + 32);
  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  _OWORD v25[3] = v23;
  BorderlessButtonMenuStyle.iOSMenu(_:)(v25, (uint64_t)v29);
  static UIButton.Configuration.borderless()();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v13, v17, v14);
  uint64_t v19 = &v13[*(int *)(v11 + 28)];
  *(void *)uint64_t v19 = swift_getKeyPath();
  v19[8] = 0;
  uint64_t v20 = v24;
  outlined init with copy of ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>((uint64_t)v29, v24, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
  outlined init with take of UIKitSystemButtonConfigurationModifier((uint64_t)v13, v20 + *(int *)(v21 + 36));
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return outlined destroy of ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
}

uint64_t BorderlessButtonMenuStyle.iOSMenu(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v16 = v5;
  uint64_t v7 = *(void *)(v2 + 8);
  uint64_t v8 = *(unsigned __int8 *)(v2 + 16);
  uint64_t v9 = *(void *)(v2 + 24);
  uint64_t v10 = *(unsigned __int8 *)(v2 + 32);
  outlined copy of AppIntentExecutor?(*a1);
  outlined copy of AppIntentExecutor?(v5);
  outlined copy of Environment<Bool>.Content(v7, v8);
  outlined copy of Environment<Bool>.Content(v9, v10);
  outlined copy of Environment<Bool>.Content(v9, v10);
  char v11 = specialized Environment.wrappedValue.getter(v9, v10);
  outlined consume of Environment<Bool?>.Content(v9, v10);
  outlined copy of Environment<Bool>.Content(v7, v8);
  LOBYTE(v5) = specialized Environment.wrappedValue.getter(v7, v8);
  outlined consume of Environment<Bool?>.Content(v7, v8);
  outlined consume of Environment<Bool?>.Content(v7, v8);
  outlined consume of Environment<Bool?>.Content(v9, v10);
  v19[0] = v3;
  v19[1] = v4;
  __int16 v20 = 0;
  char v30 = v11;
  char v31 = v5;
  outlined copy of AppIntentExecutor?(v3);
  outlined copy of AppIntentExecutor?(v16);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v16);
  uint64_t v32 = v16;
  uint64_t v33 = v6;
  specialized View.toolbarButtonLabel(ignoreEdge:)(0, (uint64_t)v18);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = swift_getKeyPath();
  outlined init with copy of ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>((uint64_t)v18, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>);
  *((void *)&v35 + 1) = KeyPath;
  LOBYTE(v36) = 0;
  *((void *)&v36 + 1) = v13;
  char v37 = 0;
  outlined destroy of ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>);
  long long v26 = v34[5];
  long long v27 = v35;
  long long v28 = v36;
  long long v22 = v34[1];
  long long v23 = v34[2];
  long long v24 = v34[3];
  long long v25 = v34[4];
  char v29 = v37;
  long long v21 = v34[0];
  uint64_t v14 = swift_getKeyPath();
  outlined init with copy of ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>((uint64_t)v19, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>);
  char v38 = 0;
  uint64_t v39 = v14;
  char v40 = 0;
  outlined destroy of ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>);
  outlined init with copy of ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>((uint64_t)v34, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>);
  *(void *)(a2 + 200) = 1;
  return outlined destroy of ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>);
}

uint64_t closure #2 in BorderlessButtonMenuStyle.makeBody(configuration:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  long long v7 = a1[1];
  long long v13 = *a1;
  long long v14 = v7;
  char v15 = *((unsigned char *)a1 + 32);
  v12[0] = a2;
  v12[1] = a3;
  void v12[2] = a4;
  v12[3] = a5;
  BorderlessButtonMenuStyle.iOSMenu(_:)(v12, (uint64_t)v16);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = swift_getKeyPath();
  uint64_t v10 = swift_getKeyPath();
  outlined init with copy of ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>((uint64_t)v16, a6, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
  *(void *)(a6 + 208) = KeyPath;
  a6 += 208;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(_WORD *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = v9;
  *(unsigned char *)(a6 + 40) = 0;
  *(void *)(a6 + 48) = v10;
  *(unsigned char *)(a6 + 56) = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>);
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedVi()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, Stat)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, Stat);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>)
  {
    type metadata accessor for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>);
    }
  }
}

void type metadata accessor for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitMenuButton();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>);
    }
  }
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>)
  {
    type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4TextV9LineStyleVSgGACyxGAA04ViewF0AAWlTm_0(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>> and conformance InvertedViewInputPredicate<A>, (void (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonShapesModifier and conformance ButtonShapesModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>();
    _s7SwiftUI8StaticIfVyAA28StyleContextAcceptsPredicateVyAA07ToolbareF0VGAA0I19ButtonLabelModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aOR_AaOR0_rlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonLabelModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonShapesModifier and conformance ButtonShapesModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonShapesModifier and conformance ButtonShapesModifier;
  if (!lazy protocol witness table cache variable for type ButtonShapesModifier and conformance ButtonShapesModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonShapesModifier and conformance ButtonShapesModifier);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(255);
    type metadata accessor for UIKitButtonStyleModifier<BorderlessButtonStyleBase>(255, &lazy cache variable for type metadata for UIKitButtonStyleModifier<BorderlessButtonStyleBase>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase, (uint64_t)&type metadata for BorderlessButtonStyleBase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitButtonStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>);
    }
  }
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in BorderlessButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance BorderlessButtonMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  long long v8 = *(_OWORD *)(v2 + 16);
  v11[0] = *(_OWORD *)v2;
  v11[1] = v8;
  char v12 = *(unsigned char *)(v2 + 32);
  closure #1 in BorderlessButtonMenuStyle.makeBody(configuration:)(v11, v4, v5, v6, v7, a2);
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedVi();
  return closure #2 in BorderlessButtonMenuStyle.makeBody(configuration:)(v11, v4, v5, v6, v7, a2 + *(int *)(v9 + 52));
}

uint64_t initializeWithCopy for BorderlessButtonMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(v2 + 24);
  LOBYTE(v2) = *(unsigned char *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v6, v2);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v2;
  return a1;
}

uint64_t assignWithCopy for BorderlessButtonMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  uint64_t v8 = *(void *)(v2 + 24);
  LOBYTE(v2) = *(unsigned char *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v8, v2);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v2;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  return a1;
}

uint64_t assignWithTake for BorderlessButtonMenuStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  char v8 = *(unsigned char *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  return a1;
}

ValueMetadata *type metadata accessor for BorderlessButtonMenuStyle()
{
  return &type metadata for BorderlessButtonMenuStyle;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, ()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifi;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifi)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedVi();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifi);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier>, type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for UIKitSystemButtonConfigurationModifier);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>();
    _s7SwiftUI8StaticIfVyAA28StyleContextAcceptsPredicateVyAA07ToolbareF0VGAA0I19ButtonLabelModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aOR_AaOR0_rlWlTm_0(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>, (uint64_t)&type metadata for ToolbarButtonContentModifier, (void (*)(void))lazy protocol witness table accessor for type ToolbarButtonContentModifier and conformance ToolbarButtonContentModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t _s7SwiftUI8StaticIfVyAA28StyleContextAcceptsPredicateVyAA07ToolbareF0VGAA0I19ButtonLabelModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aOR_AaOR0_rlWlTm_0(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>(255, a2);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>, UIKitButtonStyleModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t destroy for ButtonShapesModifier(uint64_t a1)
{
  outlined consume of Environment<Color?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 24);

  return outlined consume of Environment<Bool?>.Content(v2, v3);
}

uint64_t initializeWithCopy for ButtonShapesModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = v2[2];
  LOBYTE(v2) = *((unsigned char *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v6, (char)v2);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = (_BYTE)v2;
  return a1;
}

uint64_t *assignWithCopy for ButtonShapesModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  uint64_t v8 = v2[2];
  LOBYTE(v2) = *((unsigned char *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v8, (char)v2);
  uint64_t v9 = a1[2];
  uint64_t v10 = *((unsigned __int8 *)a1 + 24);
  a1[2] = v8;
  *((unsigned char *)a1 + 24) = (_BYTE)v2;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  return a1;
}

uint64_t *assignWithTake for ButtonShapesModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = a1[2];
  uint64_t v10 = *((unsigned __int8 *)a1 + 24);
  a1[2] = a2[2];
  *((unsigned char *)a1 + 24) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  return a1;
}

void *type metadata accessor for ButtonShapesModifier()
{
  return &unk_1ED42FFD8;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonShapesModifier()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 ButtonShapesModifier.body(content:)@<Q0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, char a4@<W4>, uint64_t a5@<X8>)
{
  uint64_t v9 = a4 & 1;
  outlined copy of Environment<Bool>.Content(a3, a4 & 1);
  specialized Environment.wrappedValue.getter(a3, v9);
  outlined consume of Environment<Bool?>.Content(a3, v9);
  outlined copy of Environment<Color?>.Content(a1, a2 & 1);
  specialized Environment.wrappedValue.getter(a1, a2 & 1);
  outlined consume of Environment<Color?>.Content(a1, a2 & 1);
  static Text.LineStyle.Pattern.solid.getter();
  type metadata accessor for UIKitButtonStyleModifier<BorderlessButtonStyleBase>(0, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonShapesModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonShapesModifier and conformance ButtonShapesModifier, (uint64_t)&unk_1ED42FFD8, MEMORY[0x1E4F408E0]);
  lazy protocol witness table accessor for type _ViewModifier_Content<ButtonShapesModifier> and conformance _ViewModifier_Content<A>();
  View.underline(_:pattern:color:)();
  swift_release();
  __n128 result = v12;
  *(void *)a5 = v11;
  *(__n128 *)(a5 + 8) = v12;
  return result;
}

double protocol witness for ViewModifier.body(content:) in conformance ButtonShapesModifier@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = ButtonShapesModifier.body(content:)(*(void *)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1).n128_u64[0];
  return result;
}

void type metadata accessor for UIKitButtonStyleModifier<BorderlessButtonStyleBase>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ButtonShapesModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonShapesModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonShapesModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for UIKitButtonStyleModifier<BorderlessButtonStyleBase>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonShapesModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonShapesModifier and conformance ButtonShapesModifier, (uint64_t)&unk_1ED42FFD8, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonShapesModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<UIKitMenuButton<ModifiedContent<ModifiedContent<MenuStyleConfiguration.Label, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ButtonShapesModifier, EmptyModifier>>, MenuStyleConfiguration.Content>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonContentModifier, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of UIKitSystemButtonConfigurationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<ButtonShapesModifier> and conformance _ViewModifier_Content<A>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4TextV9LineStyleVSgGACyxGAA04ViewF0AAWlTm_0(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.LineStyle?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>)
  {
    type metadata accessor for UIKitButtonStyleModifier<BorderlessButtonStyleBase>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonShapesModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonShapesModifier and conformance ButtonShapesModifier, (uint64_t)&unk_1ED42FFD8, MEMORY[0x1E4F408E0]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonShapesModifier>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.LineStyle?>)
  {
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA07ToolbarcD0VGMaTm_0(255, &lazy cache variable for type metadata for Text.LineStyle?, MEMORY[0x1E4F41410], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.LineStyle?>);
    }
  }
}

uint64_t static ControlWidgetTemplate._controlType.getter()
{
  return static ControlWidgetTemplate._controlType.getter();
}

{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:)(a1, a2, a3);
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  int v19;
  uint64_t result;
  Swift::String v21;
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  long long v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  long long v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned char v37[4];
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  long long v45;
  uint64_t v46;
  uint64_t v47;
  int v48;

  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  long long v27 = *(_OWORD *)(a2 + 3);
  char v8 = a2[5];
  uint64_t v7 = a2[6];
  uint64_t v9 = *((_DWORD *)a2 + 14);
  if (AGTypeID.isValueType.getter())
  {
    static DynamicPropertyCache.fields(of:)();
    unint64_t v10 = v42;
    uint64_t v11 = v43;
    __n128 v12 = v44;
    long long v13 = HIDWORD(v44);
    uint64_t v42 = v4;
    LODWORD(v43) = v5;
    uint64_t v44 = v6;
    uint64_t v45 = v27;
    char v46 = v8;
    int v47 = v7;
    char v48 = v9;
    long long v23 = v13;
    long long v24 = v3;
    char v38 = v3;
    long long v26 = v11;
    long long v28 = v10;
    HIDWORD(v31) = HIDWORD(v11);
    long long v25 = v12;
    type metadata accessor for ControlWidgetTemplateBodyAccessor();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    BodyAccessor.makeBody(container:inputs:fields:)();
    long long v14 = v40;
    long long v22 = v39;
    char v15 = v41;
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    char v30 = v4;
    LODWORD(v31) = v5;
    uint64_t v32 = v6;
    uint64_t v33 = v45;
    uint64_t v34 = v8;
    long long v35 = v7;
    long long v36 = v48;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                        + 40))(&v39, v37, &v30, AssociatedTypeWitness, AssociatedConformanceWitness);
    long long v18 = v39;
    uint64_t v19 = v40;
    if ((v15 & 1) == 0)
    {
      uint64_t v39 = v22;
      char v40 = v14;
      char v38 = v24;
      char v30 = v28;
      char v31 = v26;
      LOBYTE(v32) = v25;
      HIDWORD(v32) = v23;
      _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
    *(void *)a3 = v18;
    *(_DWORD *)(a3 + 8) = v19;
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:)@<X0>(int a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  if (AGTypeID.isValueType.getter())
  {
    static DynamicPropertyCache.fields(of:)();
    long long v5 = v26;
    char v6 = v27;
    int v7 = DWORD1(v27);
    long long v8 = a2[1];
    long long v23 = *a2;
    long long v24 = v8;
    v25[0] = a2[2];
    *(_OWORD *)((char *)v25 + 12) = *(long long *)((char *)a2 + 44);
    int v22 = a1;
    outlined retain of _ViewInputs((uint64_t)a2);
    type metadata accessor for ControlWidgetTemplateBodyAccessor<Never>();
    lazy protocol witness table accessor for type ControlWidgetTemplateBodyAccessor<Never> and conformance ControlWidgetTemplateBodyAccessor<A>();
    BodyAccessor.makeBody(container:inputs:fields:)();
    uint64_t v9 = *((void *)&v17 + 1);
    uint64_t v10 = v17;
    char v11 = v18;
    long long v26 = v23;
    long long v27 = v24;
    v28[0] = v25[0];
    *(_OWORD *)((char *)v28 + 12) = *(_OWORD *)((char *)v25 + 12);
    specialized static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:)(&v17, v20, &v26);
    uint64_t v12 = v17;
    int v13 = DWORD2(v17);
    if ((v11 & 1) == 0)
    {
      uint64_t v20 = v10;
      uint64_t v21 = v9;
      int v22 = a1;
      long long v17 = v5;
      char v18 = v6;
      int v19 = v7;
      _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    }
    outlined release of _ViewInputs((uint64_t)&v26);
    uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
    *(void *)a3 = v12;
    *(_DWORD *)(a3 + 8) = v13;
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 0x726576654ELL;
    v15._object = (void *)0xE500000000000000;
    String.append(_:)(v15);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ControlWidgetTemplateBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ControlWidgetTemplateBodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for ControlWidgetTemplateBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ControlWidgetTemplateBodyAccessor<A>(uint64_t result, char a2)
{
  return ControlWidgetTemplateBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t static Never._controlType.getter()
{
  return MEMORY[0x1E4FBC248];
}

uint64_t protocol witness for static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:) in conformance Never@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(long long *)((char *)a2 + 44);
  return specialized static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:)(v3, v6, a3);
}

void protocol witness for ControlWidgetTemplate.body.getter in conformance EmptyControlWidgetTemplate()
{
}

_UNKNOWN **associated type witness table accessor for ControlWidgetTemplate.Body : ControlWidgetTemplate in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of ControlWidgetTemplate.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static ControlWidgetTemplate._controlType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static ControlWidgetTemplate._makeControlWidgetTemplate(control:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

ValueMetadata *type metadata accessor for ControlWidgetTemplateBuilder()
{
  return &type metadata for ControlWidgetTemplateBuilder;
}

uint64_t partial apply for closure #1 in ControlWidgetTemplateBodyAccessor.updateBody(of:changed:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

void protocol witness for ControlWidgetTemplate.body.getter in conformance ControlWidgetTemplateModifier_Content<A>()
{
}

void specialized ControlWidgetTemplate.controlWidgetTemplateBodyError()()
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized PrimitiveControlWidgetTemplate.body.getter()
{
}

void type metadata accessor for ControlWidgetTemplateBodyAccessor<Never>()
{
  if (!lazy cache variable for type metadata for ControlWidgetTemplateBodyAccessor<Never>)
  {
    unint64_t v0 = type metadata accessor for ControlWidgetTemplateBodyAccessor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ControlWidgetTemplateBodyAccessor<Never>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ControlWidgetTemplateBodyAccessor<Never> and conformance ControlWidgetTemplateBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ControlWidgetTemplateBodyAccessor<Never> and conformance ControlWidgetTemplateBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ControlWidgetTemplateBodyAccessor<Never> and conformance ControlWidgetTemplateBodyAccessor<A>)
  {
    type metadata accessor for ControlWidgetTemplateBodyAccessor<Never>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlWidgetTemplateBodyAccessor<Never> and conformance ControlWidgetTemplateBodyAccessor<A>);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformItems(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlatformItems(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PlatformItems(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PlatformItems()
{
  return &type metadata for PlatformItems;
}

ValueMetadata *type metadata accessor for PlatformItem.SelectionContent()
{
  return &type metadata for PlatformItem.SelectionContent;
}

ValueMetadata *type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent()
{
  return &type metadata for PlatformItem.SelectionContent.AuxiliaryContent;
}

ValueMetadata *type metadata accessor for PlatformItem.AccessibilityContent()
{
  return &type metadata for PlatformItem.AccessibilityContent;
}

ValueMetadata *type metadata accessor for _ViewOutputs.FirstItem()
{
  return &type metadata for _ViewOutputs.FirstItem;
}

uint64_t assignWithTake for PlatformItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  long long v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  if (v5 == (void *)1) {
    goto LABEL_4;
  }
  if (v4 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 24);
LABEL_4:
    long long v6 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v6;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    long long v7 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v7;
    long long v8 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v8;
    long long v9 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v9;
    long long v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v10;
    long long v11 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v11;
    goto LABEL_21;
  }
  *(void *)(a1 + 24) = v4;

  uint64_t v12 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  int v13 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  long long v14 = (void *)(a1 + 48);
  Swift::String v15 = (void *)(a2 + 48);
  if (*(void *)(a1 + 168) >> 1 == 4294967294) {
    goto LABEL_8;
  }
  uint64_t v16 = *(void *)(a2 + 168);
  if ((v16 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v22 = *(unsigned __int8 *)(a1 + 56);
    if (v22 != 255)
    {
      int v23 = *(unsigned __int8 *)(a2 + 56);
      if (v23 != 255)
      {
        long long v24 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = *v15;
        *(unsigned char *)(a1 + 56) = v23;
        outlined consume of GraphicsImage.Contents(v24, v22);
        goto LABEL_14;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 48);
    }
    void *v14 = *v15;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
    *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
    long long v25 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v25;
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
    unint64_t v26 = *(void *)(a1 + 168);
    *(_WORD *)(a1 + 146) = *(_WORD *)(a2 + 146);
    if (v26 >> 1 != 0xFFFFFFFF)
    {
      if ((v16 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
      {
        uint64_t v28 = *(void *)(a2 + 176);
        uint64_t v29 = *(void *)(a1 + 152);
        uint64_t v30 = *(void *)(a1 + 160);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(void *)(a1 + 168) = v16;
        *(void *)(a1 + 176) = v28;
        outlined consume of AccessibilityImageLabel(v29, v30, v26);
        goto LABEL_19;
      }
      outlined destroy of AccessibilityImageLabel(a1 + 152);
    }
    long long v27 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v27;
LABEL_19:
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    swift_unknownObjectRelease();
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_release();
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
    *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    char v31 = *(void **)(a1 + 216);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);

    *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
    *(unsigned char *)(a1 + 226) = *(unsigned char *)(a2 + 226);
    goto LABEL_20;
  }
  outlined destroy of Image.Resolved(a1 + 48);
LABEL_8:
  long long v17 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v17;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
  long long v18 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v18;
  long long v19 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v19;
  long long v20 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)long long v14 = *(_OWORD *)v15;
  *(_OWORD *)(a1 + 64) = v20;
  long long v21 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v21;
LABEL_20:
  *(unsigned char *)(a1 + 227) = *(unsigned char *)(a2 + 227);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_release();
LABEL_21:
  uint64_t v32 = *(void *)(a1 + 288);
  if (v32 == 1)
  {
LABEL_24:
    long long v34 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v34;
    long long v35 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v35;
    goto LABEL_30;
  }
  uint64_t v33 = *(void *)(a2 + 288);
  if (v33 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(a1 + 240);
    goto LABEL_24;
  }
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  if (v32)
  {
    uint64_t v36 = a1 + 264;
    if (v33) {
      __swift_destroy_boxed_opaque_existential_1(v36);
    }
    else {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v36);
    }
  }
  long long v37 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v37;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
LABEL_30:
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  return a1;
}

ValueMetadata *type metadata accessor for PlatformItem()
{
  return &type metadata for PlatformItem;
}

ValueMetadata *type metadata accessor for _ViewInputs.RequestsPlatformItemsKey()
{
  return &type metadata for _ViewInputs.RequestsPlatformItemsKey;
}

ValueMetadata *type metadata accessor for _ViewInputs.PlatformItemFeaturesKey()
{
  return &type metadata for _ViewInputs.PlatformItemFeaturesKey;
}

ValueMetadata *type metadata accessor for _ViewInputs.PlatformItemsFeaturesKey()
{
  return &type metadata for _ViewInputs.PlatformItemsFeaturesKey;
}

ValueMetadata *type metadata accessor for PlatformItemsImageRepresentable()
{
  return &type metadata for PlatformItemsImageRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItemsTextRepresentable()
{
  return &type metadata for PlatformItemsTextRepresentable;
}

ValueMetadata *type metadata accessor for PlatformItems.Key()
{
  return &type metadata for PlatformItems.Key;
}

uint64_t destroy for PlatformItem.PrimaryContent(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 144);
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v3 = *(unsigned __int8 *)(a1 + 32);
    if (v3 != 255) {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 24), v3);
    }
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(a1 + 128), *(void *)(a1 + 136), v2);
    }
    swift_unknownObjectRelease();
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for PlatformItem.PrimaryContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  long long v5 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  long long v6 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = a1 + 24;
  long long v8 = (uint64_t *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 144);
  id v10 = v4;
  id v11 = v5;
  id v12 = v6;
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFCLL)
  {
    long long v13 = *((_OWORD *)v8 + 9);
    *(_OWORD *)(v7 + 128) = *((_OWORD *)v8 + 8);
    *(_OWORD *)(v7 + 144) = v13;
    *(_OWORD *)(v7 + 160) = *((_OWORD *)v8 + 10);
    *(_DWORD *)(v7 + 175) = *(_DWORD *)((char *)v8 + 175);
    long long v14 = *((_OWORD *)v8 + 5);
    *(_OWORD *)(v7 + 64) = *((_OWORD *)v8 + 4);
    *(_OWORD *)(v7 + 80) = v14;
    long long v15 = *((_OWORD *)v8 + 7);
    *(_OWORD *)(v7 + 96) = *((_OWORD *)v8 + 6);
    *(_OWORD *)(v7 + 112) = v15;
    long long v16 = *((_OWORD *)v8 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    *(_OWORD *)(v7 + 16) = v16;
    long long v17 = *((_OWORD *)v8 + 3);
    *(_OWORD *)(v7 + 32) = *((_OWORD *)v8 + 2);
    *(_OWORD *)(v7 + 48) = v17;
  }
  else
  {
    int v18 = *(unsigned __int8 *)(a2 + 32);
    if (v18 == 255)
    {
      *(void *)uint64_t v7 = *v8;
      *(unsigned char *)(v7 + 8) = *((unsigned char *)v8 + 8);
    }
    else
    {
      uint64_t v19 = *v8;
      outlined copy of GraphicsImage.Contents((id)*v8, *(unsigned char *)(a2 + 32));
      *(void *)(a1 + 24) = v19;
      *(unsigned char *)(a1 + 32) = v18;
    }
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
    *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    long long v20 = *(_OWORD *)(a2 + 104);
    *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
    *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
    *(unsigned char *)(a1 + 123) = *(unsigned char *)(a2 + 123);
    *(_OWORD *)(a1 + 104) = v20;
    if ((v9 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
    {
      long long v21 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v21;
    }
    else
    {
      uint64_t v22 = *(void *)(a2 + 128);
      uint64_t v23 = *(void *)(a2 + 136);
      uint64_t v24 = *(void *)(a2 + 152);
      outlined copy of AccessibilityImageLabel(v22, v23, v9);
      *(void *)(a1 + 128) = v22;
      *(void *)(a1 + 136) = v23;
      *(void *)(a1 + 144) = v9;
      *(void *)(a1 + 152) = v24;
    }
    uint64_t v25 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = v25;
    *(_WORD *)(a1 + 176) = *(_WORD *)(a2 + 176);
    *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    unint64_t v26 = *(void **)(a2 + 192);
    *(void *)(a1 + 192) = v26;
    *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
    *(unsigned char *)(a1 + 202) = *(unsigned char *)(a2 + 202);
    swift_unknownObjectRetain();
    swift_retain();
    id v27 = v26;
  }
  *(unsigned char *)(a1 + 203) = *(unsigned char *)(a2 + 203);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PlatformItem.PrimaryContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  long long v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void **)(a1 + 8);
  long long v8 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v8;
  id v9 = v8;

  id v10 = *(void **)(a1 + 16);
  id v11 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v11;
  id v12 = v11;

  long long v13 = (_OWORD *)(a1 + 24);
  long long v14 = (id *)(a2 + 24);
  unint64_t v15 = *(void *)(a2 + 144) & 0xFFFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 144) >> 1 == 4294967294)
  {
    if (v15 == 0x1FFFFFFFCLL)
    {
      long long v16 = *(_OWORD *)v14;
      long long v17 = *(_OWORD *)(a2 + 40);
      long long v18 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = v18;
      _OWORD *v13 = v16;
      *(_OWORD *)(a1 + 40) = v17;
      long long v19 = *(_OWORD *)(a2 + 88);
      long long v20 = *(_OWORD *)(a2 + 104);
      long long v21 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v21;
      *(_OWORD *)(a1 + 88) = v19;
      *(_OWORD *)(a1 + 104) = v20;
      long long v22 = *(_OWORD *)(a2 + 152);
      long long v23 = *(_OWORD *)(a2 + 168);
      long long v24 = *(_OWORD *)(a2 + 184);
      *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
      *(_OWORD *)(a1 + 168) = v23;
      *(_OWORD *)(a1 + 184) = v24;
      *(_OWORD *)(a1 + 152) = v22;
    }
    else
    {
      int v34 = *(unsigned __int8 *)(a2 + 32);
      if (v34 == 255)
      {
        id v40 = *v14;
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(void *)long long v13 = v40;
      }
      else
      {
        id v35 = *v14;
        outlined copy of GraphicsImage.Contents(*v14, *(unsigned char *)(a2 + 32));
        *(void *)(a1 + 24) = v35;
        *(unsigned char *)(a1 + 32) = v34;
      }
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      long long v41 = *(_OWORD *)(a2 + 68);
      *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
      *(_OWORD *)(a1 + 68) = v41;
      long long v42 = *(_OWORD *)(a2 + 88);
      long long v43 = *(_OWORD *)(a2 + 104);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = v43;
      *(_OWORD *)(a1 + 88) = v42;
      *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
      *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
      *(unsigned char *)(a1 + 123) = *(unsigned char *)(a2 + 123);
      unint64_t v44 = *(void *)(a2 + 144);
      if (v44 >> 1 == 0xFFFFFFFF)
      {
        long long v45 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v45;
      }
      else
      {
        uint64_t v46 = *(void *)(a2 + 128);
        uint64_t v47 = *(void *)(a2 + 136);
        uint64_t v48 = *(void *)(a2 + 152);
        outlined copy of AccessibilityImageLabel(v46, v47, *(void *)(a2 + 144));
        *(void *)(a1 + 128) = v46;
        *(void *)(a1 + 136) = v47;
        *(void *)(a1 + 144) = v44;
        *(void *)(a1 + 152) = v48;
      }
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = *(void *)(a2 + 168);
      *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
      *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
      int v49 = *(_DWORD *)(a2 + 180);
      *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
      *(_DWORD *)(a1 + 180) = v49;
      char v50 = *(void **)(a2 + 192);
      *(void *)(a1 + 192) = v50;
      *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
      *(unsigned char *)(a1 + 202) = *(unsigned char *)(a2 + 202);
      swift_unknownObjectRetain();
      swift_retain();
      id v51 = v50;
    }
  }
  else if (v15 == 0x1FFFFFFFCLL)
  {
    outlined destroy of Image.Resolved(a1 + 24);
    long long v25 = *(_OWORD *)(a2 + 72);
    long long v27 = *(_OWORD *)v14;
    long long v26 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v25;
    _OWORD *v13 = v27;
    *(_OWORD *)(a1 + 40) = v26;
    long long v28 = *(_OWORD *)(a2 + 136);
    long long v30 = *(_OWORD *)(a2 + 88);
    long long v29 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v28;
    *(_OWORD *)(a1 + 88) = v30;
    *(_OWORD *)(a1 + 104) = v29;
    long long v32 = *(_OWORD *)(a2 + 168);
    long long v31 = *(_OWORD *)(a2 + 184);
    long long v33 = *(_OWORD *)(a2 + 152);
    *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
    *(_OWORD *)(a1 + 168) = v32;
    *(_OWORD *)(a1 + 184) = v31;
    *(_OWORD *)(a1 + 152) = v33;
  }
  else
  {
    int v36 = *(unsigned __int8 *)(a2 + 32);
    if (*(unsigned __int8 *)(a1 + 32) == 255)
    {
      if (v36 == 255)
      {
        id v54 = *v14;
        *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
        *(void *)long long v13 = v54;
      }
      else
      {
        id v52 = *v14;
        outlined copy of GraphicsImage.Contents(*v14, *(unsigned char *)(a2 + 32));
        *(void *)(a1 + 24) = v52;
        *(unsigned char *)(a1 + 32) = v36;
      }
    }
    else if (v36 == 255)
    {
      outlined destroy of GraphicsImage.Contents(a1 + 24);
      char v53 = *(unsigned char *)(a2 + 32);
      *(void *)long long v13 = *v14;
      *(unsigned char *)(a1 + 32) = v53;
    }
    else
    {
      id v37 = *v14;
      outlined copy of GraphicsImage.Contents(*v14, *(unsigned char *)(a2 + 32));
      char v38 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v37;
      char v39 = *(unsigned char *)(a1 + 32);
      *(unsigned char *)(a1 + 32) = v36;
      outlined consume of GraphicsImage.Contents(v38, v39);
    }
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    long long v55 = *(_OWORD *)(a2 + 68);
    *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
    *(_OWORD *)(a1 + 68) = v55;
    long long v56 = *(_OWORD *)(a2 + 88);
    long long v57 = *(_OWORD *)(a2 + 104);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v57;
    *(_OWORD *)(a1 + 88) = v56;
    *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
    *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
    *(unsigned char *)(a1 + 123) = *(unsigned char *)(a2 + 123);
    unint64_t v58 = (_OWORD *)(a1 + 128);
    size_t v59 = (_OWORD *)(a2 + 128);
    uint64_t v60 = *(void *)(a2 + 144);
    unint64_t v61 = v60 & 0xFFFFFFFFFFFFFFFELL;
    if (*(void *)(a1 + 144) >> 1 == 0xFFFFFFFFLL)
    {
      if (v61 == 0x1FFFFFFFELL)
      {
        long long v62 = *(_OWORD *)(a2 + 144);
        *unint64_t v58 = *v59;
        *(_OWORD *)(a1 + 144) = v62;
      }
      else
      {
        uint64_t v64 = *(void *)(a2 + 128);
        uint64_t v65 = *(void *)(a2 + 136);
        uint64_t v66 = *(void *)(a2 + 152);
        outlined copy of AccessibilityImageLabel(v64, v65, *(void *)(a2 + 144));
        *(void *)(a1 + 128) = v64;
        *(void *)(a1 + 136) = v65;
        *(void *)(a1 + 144) = v60;
        *(void *)(a1 + 152) = v66;
      }
    }
    else if (v61 == 0x1FFFFFFFELL)
    {
      outlined destroy of AccessibilityImageLabel(a1 + 128);
      long long v63 = *(_OWORD *)(a2 + 144);
      *unint64_t v58 = *v59;
      *(_OWORD *)(a1 + 144) = v63;
    }
    else
    {
      uint64_t v67 = *(void *)(a2 + 128);
      uint64_t v68 = *(void *)(a2 + 136);
      uint64_t v69 = *(void *)(a2 + 152);
      outlined copy of AccessibilityImageLabel(v67, v68, *(void *)(a2 + 144));
      uint64_t v70 = *(void *)(a1 + 128);
      uint64_t v71 = *(void *)(a1 + 136);
      uint64_t v72 = *(void *)(a1 + 144);
      *(void *)(a1 + 128) = v67;
      *(void *)(a1 + 136) = v68;
      *(void *)(a1 + 144) = v60;
      *(void *)(a1 + 152) = v69;
      outlined consume of AccessibilityImageLabel(v70, v71, v72);
    }
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
    int v73 = *(_DWORD *)(a2 + 180);
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    *(_DWORD *)(a1 + 180) = v73;
    unint64_t v74 = *(void **)(a1 + 192);
    uint64_t v75 = *(void **)(a2 + 192);
    *(void *)(a1 + 192) = v75;
    id v76 = v75;

    *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
    *(unsigned char *)(a1 + 202) = *(unsigned char *)(a2 + 202);
  }
  *(unsigned char *)(a1 + 203) = *(unsigned char *)(a2 + 203);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy216_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for PlatformItem.PrimaryContent(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  long long v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  long long v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  long long v7 = (void *)(a1 + 24);
  long long v8 = (void *)(a2 + 24);
  if (*(void *)(a1 + 144) >> 1 == 4294967294) {
    goto LABEL_4;
  }
  uint64_t v9 = *(void *)(a2 + 144);
  if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v15 = *(unsigned __int8 *)(a1 + 32);
    if (v15 != 255)
    {
      int v16 = *(unsigned __int8 *)(a2 + 32);
      if (v16 != 255)
      {
        long long v17 = *(void **)(a1 + 24);
        *(void *)(a1 + 24) = *v8;
        *(unsigned char *)(a1 + 32) = v16;
        outlined consume of GraphicsImage.Contents(v17, v15);
        goto LABEL_10;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 24);
    }
    *long long v7 = *v8;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
LABEL_10:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
    *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
    unint64_t v18 = *(void *)(a1 + 144);
    *(_WORD *)(a1 + 122) = *(_WORD *)(a2 + 122);
    if (v18 >> 1 != 0xFFFFFFFF)
    {
      if ((v9 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL)
      {
        uint64_t v20 = *(void *)(a2 + 152);
        uint64_t v21 = *(void *)(a1 + 128);
        uint64_t v22 = *(void *)(a1 + 136);
        *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
        *(void *)(a1 + 144) = v9;
        *(void *)(a1 + 152) = v20;
        outlined consume of AccessibilityImageLabel(v21, v22, v18);
        goto LABEL_15;
      }
      outlined destroy of AccessibilityImageLabel(a1 + 128);
    }
    long long v19 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v19;
LABEL_15:
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    swift_unknownObjectRelease();
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    swift_release();
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
    *(_DWORD *)(a1 + 180) = *(_DWORD *)(a2 + 180);
    *(unsigned char *)(a1 + 184) = *(unsigned char *)(a2 + 184);
    long long v23 = *(void **)(a1 + 192);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);

    *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
    *(unsigned char *)(a1 + 202) = *(unsigned char *)(a2 + 202);
    goto LABEL_16;
  }
  outlined destroy of Image.Resolved(a1 + 24);
LABEL_4:
  long long v10 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v10;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_DWORD *)(a1 + 199) = *(_DWORD *)(a2 + 199);
  long long v11 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v11;
  long long v12 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v12;
  long long v13 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)long long v7 = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 40) = v13;
  long long v14 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v14;
LABEL_16:
  *(unsigned char *)(a1 + 203) = *(unsigned char *)(a2 + 203);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItem.PrimaryContent(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 216)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItem.PrimaryContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 216) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 216) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformItem.PrimaryContent()
{
  return &type metadata for PlatformItem.PrimaryContent;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformButtonActionTransform@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformButtonActionTransform(a1, a2, a3, (uint64_t (*)(void *, _OWORD *, uint64_t))specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:), a4);
}

uint64_t protocol witness for static PlatformItemsModifier.updateItems(modifier:items:) in conformance AccessibilityPlatformItemTransform(uint64_t *a1, uint64_t a2)
{
  return specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(*a1, a1[1], a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityPlatformItemTransform@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformButtonActionTransform(a1, a2, a3, (uint64_t (*)(void *, _OWORD *, uint64_t))specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:), a4);
}

uint64_t protocol witness for static PlatformItemsModifier.updateItems(modifier:items:) in conformance LabelIconPlatformItemModifier(uint64_t a1, uint64_t a2)
{
  return specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LabelIconPlatformItemModifier@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformButtonActionTransform(a1, a2, a3, (uint64_t (*)(void *, _OWORD *, uint64_t))specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:), a4);
}

uint64_t protocol witness for static PlatformItemsModifier.updateItems(modifier:items:) in conformance PlatformNewDocumentButtonTransform(unsigned int *a1, uint64_t a2)
{
  return specialized static UnaryPlatformItemsModifier.updateItems(modifier:items:)(*a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformNewDocumentButtonTransform@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, void *a4@<X8>)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformButtonActionTransform(a1, a2, a3, (uint64_t (*)(void *, _OWORD *, uint64_t))specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:), a4);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformButtonActionTransform@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr)@<X2>, uint64_t (*a4)(void *, _OWORD *, uint64_t)@<X6>, void *a5@<X8>)
{
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v20 = *(_OWORD *)(a2 + 32);
  long long v21 = v7;
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v22 = *(_OWORD *)(a2 + 64);
  long long v10 = *(_OWORD *)(a2 + 16);
  v19[0] = *(_OWORD *)a2;
  v19[1] = v10;
  long long v15 = v20;
  long long v16 = v9;
  long long v17 = *(_OWORD *)(a2 + 64);
  uint64_t v11 = *a1;
  int v23 = *(_DWORD *)(a2 + 80);
  int v18 = *(_DWORD *)(a2 + 80);
  long long v13 = v19[0];
  long long v14 = v8;
  a3(a5);
  return a4(a5, v19, v11);
}

uint64_t _ViewInputs.makePlatformItemsGenerator<A, B>(strategy:source:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v34 = a6;
  uint64_t v32 = a5;
  uint64_t v33 = a4;
  int v36 = a2;
  uint64_t v31 = a1;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  long long v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v11;
  uint64_t v43 = v12;
  uint64_t v44 = v13;
  *(void *)&long long v45 = v14;
  uint64_t v35 = type metadata accessor for PlatformItemsGenerator();
  uint64_t v37 = *(void *)(v35 - 8);
  double v15 = MEMORY[0x1F4188790](v35);
  uint64_t v30 = (uint64_t)&v29 - v16;
  uint64_t v17 = *(void *)v6;
  int v18 = *(_DWORD *)(v6 + 8);
  uint64_t v19 = *(void *)(v6 + 16);
  uint64_t v20 = *(void *)(v6 + 40);
  uint64_t v21 = *(void *)(v6 + 48);
  int v22 = *(_DWORD *)(v6 + 80);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, v31, a3, v15);
  uint64_t v42 = v17;
  LODWORD(v43) = v18;
  uint64_t v44 = v19;
  long long v45 = *(_OWORD *)(v6 + 24);
  uint64_t v46 = v20;
  uint64_t v47 = v21;
  long long v48 = *(_OWORD *)(v6 + 56);
  uint64_t v49 = *(void *)(v6 + 72);
  int v50 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = v30;
  PlatformItemsGenerator.init(strategy:source:inputs:inputsIncludeGeometry:)((uint64_t)v10, v36, &v42, 1, a3, v32, v30);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v25 = v35;
  uint64_t v39 = AssociatedTypeWitness;
  uint64_t v40 = v35;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v26 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v23, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v38, v25, MEMORY[0x1E4FBC248], v26, MEMORY[0x1E4FBC278], v27);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v23, v25);
  return v42;
}

Swift::Int PlatformItem.ID.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = (Swift::UInt32 *)(a1 + 32);
    do
    {
      Swift::UInt32 v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

char *PlatformItems.id.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = v1 + 32;
  swift_bridgeObjectRetain();
  Swift::UInt32 v4 = (char *)MEMORY[0x1E4FBC860];
  while (1)
  {
    outlined init with copy of PlatformItem(v3, (uint64_t)v15);
    uint64_t v5 = v15[0];
    swift_bridgeObjectRetain();
    __n128 result = (char *)outlined destroy of PlatformItem((uint64_t)v15);
    uint64_t v7 = *(void *)(v5 + 16);
    int64_t v8 = *((void *)v4 + 2);
    int64_t v9 = v8 + v7;
    if (__OFADD__(v8, v7)) {
      break;
    }
    __n128 result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (result && v9 <= *((void *)v4 + 3) >> 1)
    {
      if (*(void *)(v5 + 16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v8 <= v9) {
        int64_t v10 = v8 + v7;
      }
      else {
        int64_t v10 = v8;
      }
      __n128 result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v10, 1, v4);
      Swift::UInt32 v4 = result;
      if (*(void *)(v5 + 16))
      {
LABEL_14:
        uint64_t v11 = *((void *)v4 + 2);
        if ((*((void *)v4 + 3) >> 1) - v11 < v7) {
          goto LABEL_23;
        }
        __n128 result = (char *)memcpy(&v4[4 * v11 + 32], (const void *)(v5 + 32), 4 * v7);
        if (v7)
        {
          uint64_t v12 = *((void *)v4 + 2);
          BOOL v13 = __OFADD__(v12, v7);
          uint64_t v14 = v12 + v7;
          if (v13) {
            goto LABEL_24;
          }
          *((void *)v4 + 2) = v14;
        }
        goto LABEL_4;
      }
    }
    if (v7) {
      goto LABEL_22;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    v3 += 336;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      return v4;
    }
  }
  __break(1u);
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

uint64_t PlatformItems.subscript.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 16) = v5;
  if (result)
  {
    if ((a2 & 0x8000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  uint64_t v5 = result;
  *(void *)(v2 + 16) = result;
  if ((a2 & 0x8000000000000000) != 0) {
    goto LABEL_8;
  }
LABEL_3:
  if (*(void *)(v5 + 16) <= a2)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  outlined assign with copy of PlatformItem(a1, v5 + 336 * a2 + 32);

  return outlined destroy of PlatformItem(a1);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance PlatformItems(uint64_t a1, unint64_t *a2)
{
  return PlatformItems.subscript.setter(a1, *a2);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance PlatformItems(void (**a1)(uint64_t *a1, char a2), unint64_t *a2))(uint64_t *a1, char a2)
{
  uint64_t result = (void (*)(uint64_t *, char))malloc(0x2B0uLL);
  *a1 = result;
  *((void *)result + 84) = v2;
  unint64_t v6 = *a2;
  *((void *)result + 85) = *a2;
  if ((v6 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 16);
    if (v6 < *(void *)(v7 + 16))
    {
      outlined init with copy of PlatformItem(v7 + 336 * v6 + 32, (uint64_t)result);
      return protocol witness for MutableCollection.subscript.modify in conformance PlatformItems;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for MutableCollection.subscript.modify in conformance PlatformItems(uint64_t *a1, char a2)
{
  uint64_t v2 = (unint64_t *)*a1;
  if (a2)
  {
    unint64_t v3 = v2[85];
    outlined init with copy of PlatformItem(*a1, (uint64_t)(v2 + 42));
    PlatformItems.subscript.setter((uint64_t)(v2 + 42), v3);
    outlined destroy of PlatformItem((uint64_t)v2);
  }
  else
  {
    PlatformItems.subscript.setter(*a1, v2[85]);
  }

  free(v2);
}

uint64_t protocol witness for MutableCollection.subscript.setter in conformance PlatformItems(uint64_t a1, char **a2)
{
  unint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  specialized MutableCollection<>.subscript.setter((uint64_t *)v6, v3, v2);
  return outlined release of Slice<PlatformItems>((uint64_t)v6);
}

void (*protocol witness for MutableCollection.subscript.modify in conformance PlatformItems(void (***a1)(uint64_t a1, char a2), uint64_t *a2))(void *a1)
{
  long long v4 = (void (**)(uint64_t, char))malloc(0x28uLL);
  *a1 = v4;
  v4[4] = specialized MutableCollection<>.subscript.modify(v4, *a2, a2[1]);
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

void (*specialized MutableCollection<>.subscript.modify(void (**a1)(uint64_t a1, char a2), uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t result = (void (*)(uint64_t, char))malloc(0x190uLL);
  *a1 = result;
  *((void *)result + 48) = a3;
  *((void *)result + 49) = v3;
  *((void *)result + 47) = a2;
  if (a2 < 0 || (uint64_t v8 = v3[2], *(void *)(v8 + 16) < a3))
  {
    __break(1u);
  }
  else
  {
    int v9 = *((_DWORD *)v3 + 2);
    uint64_t v10 = *v3;
    *((void *)result + 43) = a3;
    *((void *)result + 44) = v10;
    *((_DWORD *)result + 90) = v9;
    *((void *)result + 46) = v8;
    *((void *)result + 42) = a2;
    swift_bridgeObjectRetain();
    return MutableCollection<>.subscript.modifyspecialized ;
  }
  return result;
}

void MutableCollection<>.subscript.modifyspecialized (uint64_t a1, char a2)
{
  unint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 384);
  unint64_t v6 = *(char **)(*(void *)a1 + 336);
  uint64_t v5 = *(char **)(*(void *)a1 + 344);
  uint64_t v7 = *(void *)(*(void *)a1 + 368);
  uint64_t v8 = *(char **)(*(void *)(*(void *)a1 + 392) + 16);
  uint64_t v9 = *((void *)v8 + 2);
  if ((a2 & 1) == 0)
  {
    if (v9 < v4)
    {
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }
    uint64_t v19 = v3[47];
    if (v19 == v4) {
      goto LABEL_42;
    }
    uint64_t v29 = v6 - v5;
    if (v6 == v5)
    {
      __break(1u);
    }
    else if (v19 < v4)
    {
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_25;
      }
      goto LABEL_64;
    }
    __break(1u);
LABEL_64:
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
LABEL_25:
    uint64_t v2 = 0;
    *(void *)(v3[49] + 16) = v8;
    uint64_t v20 = v3[47];
    long long v28 = v5;
    if ((uint64_t)v5 <= (uint64_t)v6) {
      uint64_t v21 = v6;
    }
    else {
      uint64_t v21 = v5;
    }
    uint64_t v22 = v21 - v6;
    uint64_t v8 = (char *)(v7 + 336 * (void)v6 + 32);
    uint64_t v23 = 336 * v20 + 32;
    while (v22 != v2)
    {
      if (((unint64_t)v6 & 0x8000000000000000) != 0) {
        goto LABEL_51;
      }
      if ((unint64_t)&v6[v2] >= *(void *)(v7 + 16)) {
        goto LABEL_52;
      }
      uint64_t v24 = v3[49];
      outlined init with copy of PlatformItem((uint64_t)v8, (uint64_t)v3);
      uint64_t v5 = *(char **)(v24 + 16);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v24 + 16) = v5;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v27 = v3[49];
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
        *(void *)(v27 + 16) = v5;
      }
      if ((unint64_t)(v20 + v2) >= *((void *)v5 + 2)) {
        goto LABEL_53;
      }
      uint64_t v26 = v3[48];
      outlined assign with copy of PlatformItem((uint64_t)v3, (uint64_t)&v5[v23]);
      outlined destroy of PlatformItem((uint64_t)v3);
      if (v20 + v2 + 1 == v26) {
        goto LABEL_41;
      }
      ++v2;
      v8 += 336;
      v23 += 336;
      if (!(v29 + v2)) {
        goto LABEL_55;
      }
    }
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v9 < v4)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  uint64_t v10 = v3[47];
  if (v10 == v4) {
    goto LABEL_39;
  }
  uint64_t v29 = v6 - v5;
  if (v6 == v5) {
    goto LABEL_59;
  }
  if (v10 >= v4) {
    goto LABEL_60;
  }
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_61;
  }
  while (1)
  {
    uint64_t v2 = 0;
    *(void *)(v3[49] + 16) = v8;
    uint64_t v11 = v3[47];
    long long v28 = v5;
    uint64_t v12 = (uint64_t)v5 <= (uint64_t)v6 ? v6 : v5;
    uint64_t v13 = v12 - v6;
    uint64_t v8 = (char *)(v7 + 336 * (void)v6 + 32);
    uint64_t v14 = 336 * v11 + 32;
    while (1)
    {
      if (v13 == v2)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      if (((unint64_t)v6 & 0x8000000000000000) != 0) {
        goto LABEL_47;
      }
      if ((unint64_t)&v6[v2] >= *(void *)(v7 + 16)) {
        goto LABEL_48;
      }
      uint64_t v15 = v3[49];
      outlined init with copy of PlatformItem((uint64_t)v8, (uint64_t)v3);
      uint64_t v5 = *(char **)(v15 + 16);
      char v16 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v15 + 16) = v5;
      if ((v16 & 1) == 0)
      {
        uint64_t v18 = v3[49];
        uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
        *(void *)(v18 + 16) = v5;
      }
      if ((unint64_t)(v11 + v2) >= *((void *)v5 + 2)) {
        goto LABEL_49;
      }
      uint64_t v17 = v3[48];
      outlined assign with copy of PlatformItem((uint64_t)v3, (uint64_t)&v5[v14]);
      outlined destroy of PlatformItem((uint64_t)v3);
      if (v11 + v2 + 1 == v17) {
        break;
      }
      ++v2;
      v8 += 336;
      v14 += 336;
      if (!(v29 + v2)) {
        goto LABEL_54;
      }
    }
    swift_bridgeObjectRelease();
    v6 += v2 + 1;
    uint64_t v5 = v28;
LABEL_39:
    if (v6 == v5) {
      break;
    }
    __break(1u);
LABEL_41:
    v6 += v2 + 1;
    uint64_t v5 = v28;
LABEL_42:
    if (v6 == v5) {
      break;
    }
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v8);
  }
  swift_bridgeObjectRelease();

  free(v3);
}

unint64_t protocol witness for MutableCollection.partition(by:) in conformance PlatformItems@<X0>(unint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = specialized MutableCollection<>._partitionImpl(by:)(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t protocol witness for MutableCollection.swapAt(_:_:) in conformance PlatformItems(unint64_t *a1, unint64_t *a2)
{
  return specialized MutableCollection.swapAt(_:_:)(*a1, *a2);
}

unint64_t specialized MutableCollection.swapAt(_:_:)(unint64_t result, unint64_t a2)
{
  if (result != a2)
  {
    unint64_t v5 = result;
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = *(char **)(v3 + 16);
      unint64_t v6 = *((void *)v4 + 2);
      if (v6 > result)
      {
        unint64_t v2 = a2;
        outlined init with copy of PlatformItem((uint64_t)&v4[336 * result + 32], (uint64_t)v9);
        if (v6 > v2)
        {
          outlined init with copy of PlatformItem((uint64_t)&v4[336 * v2 + 32], (uint64_t)v8);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v3 + 16) = v4;
          if (isUniquelyReferenced_nonNull_native) {
            goto LABEL_6;
          }
          goto LABEL_14;
        }
LABEL_13:
        __break(1u);
LABEL_14:
        uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v4);
        *(void *)(v3 + 16) = v4;
LABEL_6:
        if (*((void *)v4 + 2) <= v5)
        {
          __break(1u);
        }
        else
        {
          outlined assign with copy of PlatformItem((uint64_t)v8, (uint64_t)&v4[336 * v5 + 32]);
          outlined destroy of PlatformItem((uint64_t)v8);
          unint64_t v5 = *(void *)(v3 + 16);
          unint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(v3 + 16) = v5;
          if (result) {
            goto LABEL_8;
          }
        }
        unint64_t result = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
        unint64_t v5 = result;
        *(void *)(v3 + 16) = result;
LABEL_8:
        if (*(void *)(v5 + 16) <= v2)
        {
          __break(1u);
        }
        else
        {
          outlined assign with copy of PlatformItem((uint64_t)v9, v5 + 336 * v2 + 32);
          return outlined destroy of PlatformItem((uint64_t)v9);
        }
        return result;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t protocol witness for MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:) in conformance PlatformItems()
{
  return MutableCollection._withUnsafeMutableBufferPointerIfSupported<A>(_:)();
}

uint64_t protocol witness for MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:) in conformance PlatformItems()
{
  return MutableCollection.withContiguousMutableStorageIfAvailable<A>(_:)();
}

void protocol witness for Collection.endIndex.getter in conformance PlatformItems(void *a1@<X8>)
{
  *a1 = *(void *)(*(void *)(v1 + 16) + 16);
}

void (*protocol witness for Collection.subscript.read in conformance PlatformItems(void (**a1)(uint64_t *a1), unint64_t *a2))(uint64_t *a1)
{
  unint64_t result = (void (*)(uint64_t *))malloc(0x150uLL);
  *a1 = result;
  unint64_t v6 = *a2;
  if ((*a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 16);
    if (v6 < *(void *)(v7 + 16))
    {
      outlined init with copy of PlatformItem(v7 + 336 * v6 + 32, (uint64_t)result);
      return protocol witness for Collection.subscript.read in conformance PlatformItems;
    }
  }
  __break(1u);
  return result;
}

void protocol witness for Collection.subscript.read in conformance PlatformItems(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  outlined destroy of PlatformItem(*a1);

  free(v1);
}

uint64_t *protocol witness for Collection.subscript.getter in conformance PlatformItems@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0 || (uint64_t v4 = result[1], result = (uint64_t *)v2[2], result[2] < v4))
  {
    __break(1u);
  }
  else
  {
    int v5 = *((_DWORD *)v2 + 2);
    uint64_t v6 = *v2;
    *(void *)(a2 + 8) = v4;
    *(void *)(a2 + 16) = v6;
    *(_DWORD *)(a2 + 24) = v5;
    *(void *)(a2 + 32) = result;
    *(void *)a2 = v3;
    return (uint64_t *)swift_bridgeObjectRetain();
  }
  return result;
}

void protocol witness for Collection.indices.getter in conformance PlatformItems(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)(v1 + 16) + 16);
  *a1 = 0;
  a1[1] = v2;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance PlatformItems()
{
  return *(void *)(*(void *)(v0 + 16) + 16) == 0;
}

void *protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance PlatformItems@<X0>(void *result@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v4 = *result + a2;
  if (__OFADD__(*result, a2))
  {
    __break(1u);
  }
  else if (v4 <= *(void *)(*(void *)(v3 + 16) + 16))
  {
    *a3 = v4;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance PlatformItems@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*a1, a2, *a3, *(void *)v4, *(unsigned int *)(v4 + 8), *(void *)(v4 + 16));
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v7 & 1;
  return result;
}

unint64_t *protocol witness for RandomAccessCollection.distance(from:to:) in conformance PlatformItems(unint64_t *result, unint64_t *a2)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *(void *)(*(void *)(v2 + 16) + 16);
  if (*result <= v4 && v3 <= v4) {
    return (unint64_t *)(v3 - *result);
  }
  __break(1u);
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance PlatformItems(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = 0;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance PlatformItems()
{
  return *(void *)(*(void *)(v0 + 16) + 16);
}

void *protocol witness for Sequence._copyToContiguousArray() in conformance PlatformItems()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*(void *)v0, *(_DWORD *)(v0 + 8), *(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance PlatformItems(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *(void *)v3, *(_DWORD *)(v3 + 8), *(void *)(v3 + 16));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PlatformItem.ID()
{
  return PlatformItem.ID.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PlatformItem.ID()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = (Swift::UInt32 *)(v1 + 32);
    do
    {
      Swift::UInt32 v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PlatformItem.ID()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Swift::UInt v2 = *(void *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    uint64_t v3 = (Swift::UInt32 *)(v1 + 32);
    do
    {
      Swift::UInt32 v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PlatformItem.ID(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

BOOL PlatformItem.hasContent.getter()
{
  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v13) == 1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v0 + 8);
  if ((v2 & 1) == 0)
  {
    if ((v2 & 2) == 0)
    {
      if ((v2 & 8) == 0)
      {
        outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
        outlined retain of PlatformItem.PrimaryContent((uint64_t)v9);
        uint64_t v1 = 1;
        goto LABEL_22;
      }
      outlined init with copy of PlatformItem(v0, (uint64_t)v9);
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  uint64_t v1 = (v2 & 2) == 0 && v13[0] != 0;
  if ((v2 & 2) != 0 && v13[0]) {
LABEL_15:
  }
    uint64_t v1 = _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v14) == 0;
  if ((v2 & 8) == 0)
  {
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    outlined retain of PlatformItem.PrimaryContent((uint64_t)v9);
    goto LABEL_22;
  }
  outlined init with copy of PlatformItem(v0, (uint64_t)v9);
  if ((v1 & 1) == 0)
  {
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    outlined retain of PlatformItem.PrimaryContent((uint64_t)v8);
    outlined destroy of PlatformItem((uint64_t)v9);
    uint64_t v1 = 0;
    goto LABEL_22;
  }
LABEL_21:
  outlined init with copy of AccessibilityValueStorage?((uint64_t)v10, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined retain of PlatformItem.PrimaryContent((uint64_t)v8);
  outlined destroy of PlatformItem((uint64_t)v9);
  uint64_t v1 = v7[6] != 1;
  outlined destroy of AccessibilityValueStorage?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?);
LABEL_22:
  uint64_t v4 = *(void *)(v0 + 8);
  if ((v4 & 0x10) != 0)
  {
    if (v13[1]) {
      uint64_t v1 = v1;
    }
    else {
      uint64_t v1 = 0;
    }
    if ((v4 & 0x20) == 0)
    {
LABEL_24:
      if ((v4 & 0x40) == 0) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
  }
  else if ((v4 & 0x20) == 0)
  {
    goto LABEL_24;
  }
  if (v13[2]) {
    uint64_t v1 = v1;
  }
  else {
    uint64_t v1 = 0;
  }
  if ((v4 & 0x40) == 0) {
    goto LABEL_26;
  }
LABEL_25:
  outlined init with copy of PlatformItem(v0, (uint64_t)v9);
  uint64_t v1 = v1 & (v10[72] ^ 1);
  outlined destroy of PlatformItem((uint64_t)v9);
LABEL_26:
  outlined release of PlatformItem.PrimaryContent?((uint64_t)v12);
  if ((*(unsigned char *)(v0 + 8) & 0x80) != 0)
  {
    outlined init with copy of PlatformItem(v0, (uint64_t)v9);
    if (v1)
    {
      uint64_t v5 = v11;
      swift_bridgeObjectRetain();
      outlined destroy of PlatformItem((uint64_t)v9);
      swift_bridgeObjectRelease();
      return v5 != 0;
    }
    else
    {
      outlined destroy of PlatformItem((uint64_t)v9);
    }
  }
  return v1;
}

uint64_t PlatformItem.merge(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v4);
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = *(unsigned int *)(v1 + 16);
  if (v6 != -1 && v5 != 0)
  {
    if (v6) {
      BOOL v8 = v5 == -1;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8) {
      unsigned int v5 = merge32(_:_:)(v6, v5);
    }
    *(_DWORD *)(v1 + 16) = v5;
  }
  outlined init with take of PlatformItem.PrimaryContent?(a1 + 24, (uint64_t)v30, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v30, (uint64_t)&v31, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v31) != 1)
  {
    outlined init with take of PlatformItem.PrimaryContent?(v1 + 24, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v24, (uint64_t)&v26, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)&v26) == 1)
    {
      v20[10] = v41;
      v20[11] = v42;
      v20[12] = v43;
      uint64_t v21 = v44;
      v20[6] = v37;
      v20[7] = v38;
      v20[8] = v39;
      v20[9] = v40;
      v20[2] = v33;
      v20[3] = v34;
      v20[4] = v35;
      v20[5] = v36;
      v20[0] = v31;
      v20[1] = v32;
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v20, v9, v10, v11);
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v20, v1 + 24, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v30, (uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
      outlined retain of PlatformItem.PrimaryContent((uint64_t)v22);
    }
    else
    {
      v22[10] = v41;
      v22[11] = v42;
      v22[12] = v43;
      uint64_t v23 = v44;
      v22[6] = v37;
      v22[7] = v38;
      v22[8] = v39;
      v22[9] = v40;
      void v22[2] = v33;
      v22[3] = v34;
      v22[4] = v35;
      v22[5] = v36;
      v22[0] = v31;
      v22[1] = v32;
      PlatformItem.PrimaryContent.merge(_:features:)((uint64_t)v22, *(void *)(v1 + 8));
    }
  }
  outlined init with copy of AccessibilityValueStorage?(a1 + 240, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?);
  if ((void)v25 == 1)
  {
    outlined destroy of AccessibilityValueStorage?((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?);
    if (*(unsigned char *)(a1 + 312)) {
      goto LABEL_28;
    }
LABEL_23:
    uint64_t v16 = *(void *)(a1 + 304);
    if (*(unsigned char *)(v2 + 312))
    {
      *(void *)(v2 + 304) = v16;
      *(unsigned char *)(v2 + 312) = 0;
    }
    else
    {
      int Attribute = AGWeakAttributeGetAttribute();
      if (Attribute == *MEMORY[0x1E4F4E7A0] && AGWeakAttributeGetAttribute() != Attribute) {
        *(void *)(v2 + 304) = v16;
      }
    }
    goto LABEL_28;
  }
  long long v26 = v24[0];
  long long v27 = v24[1];
  long long v28 = v24[2];
  long long v29 = v25;
  outlined init with copy of AccessibilityValueStorage?(v1 + 240, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?);
  uint64_t v12 = v25;
  uint64_t result = outlined destroy of AccessibilityValueStorage?((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?);
  if (v12 == 1)
  {
    outlined destroy of AccessibilityValueStorage?(v1 + 240, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.SelectionContent?);
    long long v14 = v27;
    *(_OWORD *)(v1 + 240) = v26;
    *(_OWORD *)(v1 + 256) = v14;
    long long v15 = v29;
    *(_OWORD *)(v1 + 272) = v28;
    *(_OWORD *)(v1 + 288) = v15;
    if ((*(unsigned char *)(a1 + 312) & 1) == 0) {
      goto LABEL_23;
    }
  }
  else
  {
    if (*(void *)(v1 + 288) == 1)
    {
      __break(1u);
      return result;
    }
    PlatformItem.SelectionContent.merge(_:)((int *)&v26);
    outlined destroy of PlatformItem.SelectionContent((uint64_t)&v26);
    if ((*(unsigned char *)(a1 + 312) & 1) == 0) {
      goto LABEL_23;
    }
  }
LABEL_28:
  uint64_t result = *(void *)(a1 + 320);
  if (result)
  {
    uint64_t v18 = *(void *)(v2 + 320);
    if (v18)
    {
      *(void *)&v24[0] = *(void *)(a1 + 320);
      *(void *)&long long v26 = v18;
      uint64_t result = AccessibilityProperties.merge(with:)((uint64_t *)v24);
      *(void *)(v2 + 320) = v26;
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 328);
      *(void *)(v2 + 320) = result;
      *(void *)(v2 + 328) = v19;
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

id PlatformItem.PrimaryContent.merge(_:features:)(uint64_t a1, char a2)
{
  uint64_t v4 = *(void **)a1;
  unsigned int v5 = *(void **)(a1 + 8);
  id v10 = *(id *)(a1 + 16);
  outlined init with take of PlatformItem.PrimaryContent?(a1 + 24, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
  if (v4)
  {
    uint64_t v6 = v2;
    if (!*v2 || (uint64_t v6 = v2 + 1, !v2[1]) && (a2 & 0x10) != 0)
    {
      *uint64_t v6 = v4;
      id v7 = v4;
    }
  }
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)(v2 + 3), (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v13, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v14) == 1)
  {
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v15, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v12) != 1)
    {
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v15, (uint64_t)(v2 + 3), (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v15, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
      outlined retain of Image.Resolved((uint64_t)v11);
    }
  }
  if (!v2[1] && v5)
  {
    v2[1] = v5;
    id v8 = v5;
  }
  id result = v10;
  if (!v2[2] && v10)
  {
    v2[2] = v10;
    return v10;
  }
  return result;
}

uint64_t PlatformItem.SelectionContent.merge(_:)(int *a1)
{
  int Attribute = AGWeakAttributeGetAttribute();
  int v4 = *MEMORY[0x1E4F4E7A0];
  if (Attribute == *MEMORY[0x1E4F4E7A0])
  {
    int v5 = *a1;
    int v6 = a1[1];
    if (AGWeakAttributeGetAttribute() != Attribute)
    {
      *(_DWORD *)uint64_t v1 = v5;
      *(_DWORD *)(v1 + 4) = v6;
    }
  }
  if (AGWeakAttributeGetAttribute() == v4)
  {
    int v7 = a1[2];
    int v8 = a1[3];
    if (AGWeakAttributeGetAttribute() != v4)
    {
      *(_DWORD *)(v1 + 8) = v7;
      *(_DWORD *)(v1 + 12) = v8;
    }
  }
  if (!*(void *)(v1 + 16)) {
    *(void *)(v1 + 16) = *((void *)a1 + 2);
  }
  uint64_t v9 = v1 + 24;
  outlined init with copy of AccessibilityValueStorage?(v9, (uint64_t)v12, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?);
  uint64_t v10 = v13;
  uint64_t result = outlined destroy of AccessibilityValueStorage?((uint64_t)v12, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?);
  if (!v10) {
    return outlined assign with copy of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)(a1 + 6), v9);
  }
  return result;
}

void (**closure #1 in closure #1 in PlatformItem.SelectionContent.select()@<X0>(char *a1@<X8>))(uint64_t)
{
  type metadata accessor for (())?(0);
  uint64_t result = (void (**)(uint64_t))AGGraphGetWeakValue();
  if (result && (uint64_t v3 = *result) != 0)
  {
    uint64_t v4 = swift_retain();
    v3(v4);
    uint64_t result = (void (**)(uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v3);
    char v5 = 0;
  }
  else
  {
    char v5 = 1;
  }
  *a1 = v5;
  return result;
}

uint64_t closure #1 in closure #1 in PlatformItem.AccessibilityContent.environment.getter@<X0>(uint64_t *a1@<X8>)
{
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue)
  {
    if (one-time initialization token for configuredForPlatform != -1) {
      swift_once();
    }
    Weakuint64_t Value = &static EnvironmentValues.configuredForPlatform;
  }
  uint64_t v4 = *WeakValue;
  uint64_t v3 = WeakValue[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

uint64_t PlatformItemsTransform.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  long long v39 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v6 = *(_DWORD *)(v2 + 8);
  uint64_t v8 = *(void *)(v7 + 24);
  if (*MEMORY[0x1E4F4E7A0] == *(_DWORD *)(v2 + 4))
  {
    int v21 = 0;
    uint64_t v17 = 0;
    uint64_t v20 = 0;
    uint64_t v22 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v11 = v10;
    uint64_t v12 = v3;
    uint64_t v13 = v8;
    uint64_t v14 = v4;
    int v15 = v6;
    uint64_t v16 = *(void *)Value;
    LODWORD(v17) = *(_DWORD *)(Value + 8);
    uint64_t v18 = swift_bridgeObjectRetain();
    if (v18) {
      int v19 = v11 & 1;
    }
    else {
      int v19 = 0;
    }
    if (v18) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = 0;
    }
    if (v18) {
      uint64_t v20 = v16;
    }
    else {
      uint64_t v20 = 0;
    }
    int v6 = v15;
    uint64_t v4 = v14;
    uint64_t v8 = v13;
    uint64_t v3 = v12;
    int v21 = v19;
    if (v18) {
      uint64_t v22 = v18;
    }
    else {
      uint64_t v22 = MEMORY[0x1E4FBC860];
    }
  }
  uint64_t v40 = v20;
  int v41 = v17;
  long long v42 = (char *)v22;
  uint64_t v23 = AGGraphGetValue();
  char v25 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v39, v23, v3);
  if (!AGGraphGetOutputValue() || (v25 & 1) != 0 || v21)
  {
    (*(void (**)(char *, uint64_t *, uint64_t, uint64_t))(v8 + 24))(v39, &v40, v3, v8);
    unsigned int v26 = v6 + 1;
    *(_DWORD *)(v2 + 8) = v6 + 1;
    if (v17 != -1 && v6 != -1)
    {
      if (v17 && v6 != -2) {
        unsigned int v26 = merge32(_:_:)(v17, v26);
      }
      int v41 = v26;
    }
    long long v27 = v42;
    uint64_t v28 = *((void *)v42 + 2);
    if (v28)
    {
      unint64_t v29 = 0;
      uint64_t v30 = 32;
      do
      {
        long long v31 = v42;
        if (v29 >= *((void *)v42 + 2))
        {
          __break(1u);
LABEL_43:
          __break(1u);
        }
        uint64_t v32 = *(unsigned int *)(v2 + 8);
        outlined init with copy of PlatformItem((uint64_t)&v42[v30], (uint64_t)&v43);
        if (v45 != -1 && v32 != 0)
        {
          if (v45 && v32 != -1)
          {
            unint64_t v34 = (v32 | ((unint64_t)v45 << 32)) + ~(v32 << 32);
            unint64_t v35 = (v34 ^ (v34 >> 22)) + ~((v34 ^ (v34 >> 22)) << 13);
            unint64_t v36 = (9 * (v35 ^ (v35 >> 8))) ^ ((9 * (v35 ^ (v35 >> 8))) >> 15);
            LODWORD(v32) = ((v36 + ~(v36 << 27)) >> 31) ^ (v36 + ~(v36 << 27));
          }
          LODWORD(v45) = v32;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          long long v31 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v31);
          long long v42 = v31;
        }
        if (v29 >= *((void *)v31 + 2)) {
          goto LABEL_43;
        }
        ++v29;
        outlined assign with copy of PlatformItem((uint64_t)&v43, (uint64_t)&v31[v30]);
        outlined destroy of PlatformItem((uint64_t)&v43);
        v30 += 336;
      }
      while (v28 != v29);
      long long v27 = v42;
    }
    uint64_t v43 = v40;
    int v44 = v41;
    long long v45 = v27;
    AGGraphSetOutputValue();
  }
  (*(void (**)(char *, uint64_t))(v4 + 8))(v39, v3);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance PlatformItems.Key@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  int v2 = dword_1E8FF9508;
  uint64_t v3 = qword_1E8FF9510;
  *(void *)a1 = static PlatformItems.Key.defaultValue;
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance _ViewInputs.RequestsPlatformItemsKey()
{
  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance _ViewInputs.RequestsPlatformItemsKey()
{
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in _ViewInputs.RequestsPlatformItemsKey()
{
  return &protocol witness table for _ViewInputs.RequestsPlatformItemsKey;
}

uint64_t _ViewOutputs.FirstItem.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(AGGraphGetValue() + 16);
  if (*(void *)(v2 + 16))
  {
    return outlined init with copy of PlatformItem(v2 + 32, a1);
  }
  else
  {
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v4);
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = xmmword_18834FC50;
    *(void *)a1 = &outlined read-only object #0 of _ViewOutputs.FirstItem.value.getter;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    uint64_t result = outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v4, a1 + 24, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    *(void *)(a1 + 304) = 0;
    *(unsigned char *)(a1 + 312) = 1;
    *(void *)(a1 + 320) = 0;
    *(void *)(a1 + 328) = 0;
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _ViewOutputs.FirstItem@<X0>(uint64_t a1@<X8>)
{
  return _ViewOutputs.FirstItem.value.getter(a1);
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in PlatformItems()
{
  return lazy protocol witness table accessor for type IndexingIterator<PlatformItems> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type IndexingIterator<PlatformItems> and conformance IndexingIterator<A>, &lazy cache variable for type metadata for IndexingIterator<PlatformItems>, MEMORY[0x1E4FBBC18]);
}

unint64_t lazy protocol witness table accessor for type PlatformItems and conformance PlatformItems()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems;
  if (!lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems;
  if (!lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems;
  if (!lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems;
  if (!lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems;
  if (!lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems and conformance PlatformItems);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in PlatformItems()
{
  return lazy protocol witness table accessor for type IndexingIterator<PlatformItems> and conformance IndexingIterator<A>(&lazy protocol witness table cache variable for type Slice<PlatformItems> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<PlatformItems>, MEMORY[0x1E4FBC320]);
}

uint64_t lazy protocol witness table accessor for type IndexingIterator<PlatformItems> and conformance IndexingIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<PlatformItems>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for IndexingIterator<PlatformItems>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type PlatformItems and conformance PlatformItems();
    unint64_t v7 = a3(a1, &type metadata for PlatformItems, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in PlatformItems()
{
  return lazy protocol witness table accessor for type Slice<PlatformItems> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PlatformItems> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type PlatformItems and conformance PlatformItems);
}

uint64_t associated type witness table accessor for Collection.SubSequence : MutableCollection in PlatformItems()
{
  return lazy protocol witness table accessor for type Slice<PlatformItems> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PlatformItems> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type PlatformItems and conformance PlatformItems);
}

uint64_t lazy protocol witness table accessor for type Slice<PlatformItems> and conformance <> Slice<A>(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for IndexingIterator<PlatformItems>(255, &lazy cache variable for type metadata for Slice<PlatformItems>, MEMORY[0x1E4FBC320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in PlatformItems()
{
  return lazy protocol witness table accessor for type Slice<PlatformItems> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<PlatformItems> and conformance <> Slice<A>, (void (*)(void))lazy protocol witness table accessor for type PlatformItems and conformance PlatformItems);
}

id PlatformItemsGenerator.init(strategy:source:inputs:inputsIncludeGeometry:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v11 = *a3;
  int v12 = *((_DWORD *)a3 + 2);
  uint64_t v13 = a3[2];
  uint64_t v14 = a3[3];
  uint64_t v15 = a3[4];
  long long v21 = *(_OWORD *)(a3 + 5);
  uint64_t v16 = a3[7];
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  int v19 = *((_DWORD *)a3 + 20);
  *(_DWORD *)(a7 + 96) = *MEMORY[0x1E4F4E7A0];
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(void *)(a7 + 104) = result;
    type metadata accessor for PlatformItemsGenerator();
    (*(void (**)(uint64_t, uint64_t))(a6 + 16))(a5, a6);
    id result = (id)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
    *(_DWORD *)a7 = a2;
    *(void *)(a7 + 8) = v11;
    *(_DWORD *)(a7 + 16) = v12;
    *(void *)(a7 + 24) = v13;
    *(void *)(a7 + 32) = v14;
    *(void *)(a7 + 40) = v15;
    *(_OWORD *)(a7 + 48) = v21;
    *(void *)(a7 + 64) = v16;
    *(void *)(a7 + 72) = v17;
    *(void *)(a7 + 80) = v18;
    *(_DWORD *)(a7 + 88) = v19;
    *(unsigned char *)(a7 + 92) = a4 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t PlatformItemsGenerator.updateValue()(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v38 - v10;
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v13);
  long long v39 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v38 - v16;
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v41 = v3;
  uint64_t v42 = v1;
  uint64_t v40 = v4;
  if (OutputValue)
  {
    int v19 = *(_DWORD *)(v1 + 96);
  }
  else
  {
    v38[1] = *(void *)(v1 + 104);
    v38[0] = implicit closure #1 in PlatformItemsGenerator.updateValue()(v1, v4, *(void *)(a1 + 24), v3, *(void *)(a1 + 40));
    v38[2] = AGGraphClearUpdate();
    id v20 = (id)AGSubgraphGetCurrent();
    uint64_t v21 = AGSubgraphSetCurrent();
    int v19 = ((uint64_t (*)(uint64_t))v38[0])(v21);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_release();
    *(_DWORD *)(v42 + 96) = v19;
  }
  uint64_t v22 = *(int *)(TupleTypeMetadata2 + 48);
  if (v19 == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v30 = v40;
    uint64_t v29 = v41;
    (*(void (**)(uint64_t, uint64_t))(v41 + 16))(v40, v41);
    int v28 = 0;
    long long v27 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v25 = v24;
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v8, Value, AssociatedTypeWitness);
    v8[v22] = v25 & 1;
    uint64_t v26 = *(int *)(TupleTypeMetadata2 + 48);
    long long v27 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v27(v11, v8, AssociatedTypeWitness);
    int v28 = v8[v26];
    uint64_t v30 = v40;
    uint64_t v29 = v41;
  }
  v11[v22] = v28;
  BOOL v31 = v28 != 0;
  v27(v17, v11, AssociatedTypeWitness);
  uint64_t v32 = v42;
  int v33 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v29 + 40))(v42 + *(int *)(a1 + 68), v17, v30, v29);
  if (!AGGraphGetOutputValue() || (v31 & v33) != 0)
  {
    uint64_t v34 = (uint64_t)v39;
    uint64_t v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v39, v17, AssociatedTypeWitness);
    MEMORY[0x1F4188790](v35);
    v38[-2] = a1;
    v38[-1] = swift_getWitnessTable();
    uint64_t v32 = v42;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v34, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v38[-4], AssociatedTypeWitness, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v36);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v34, AssociatedTypeWitness);
  }
  $defer #1 <A, B>() in PlatformItemsGenerator.updateValue()(v32, (uint64_t)v17);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, AssociatedTypeWitness);
}

uint64_t (*implicit closure #1 in PlatformItemsGenerator.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))()
{
  v18[0] = a2;
  v18[1] = a3;
  v18[2] = a4;
  v18[3] = a5;
  uint64_t v10 = type metadata accessor for PlatformItemsGenerator();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v18 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v18 - v13, a1, v10, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a2;
  *((void *)v16 + 3) = a3;
  *((void *)v16 + 4) = a4;
  *((void *)v16 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v16[v15], v14, v10);
  return partial apply for implicit closure #2 in implicit closure #1 in PlatformItemsGenerator.updateValue();
}

uint64_t PlatformItemsGenerator.makeContent()(void *a1)
{
  int v2 = *(unsigned __int8 *)(v1 + 92);
  uint64_t v3 = *(void *)(v1 + 8);
  int v4 = *(_DWORD *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  unsigned int v6 = *(_DWORD *)(v1 + 32);
  unsigned int v7 = *(_DWORD *)(v1 + 36);
  unsigned int v8 = *(_DWORD *)(v1 + 40);
  unsigned int v9 = *(_DWORD *)(v1 + 44);
  uint64_t v10 = *(void *)(v1 + 48);
  uint64_t v11 = *(void *)(v1 + 56);
  unsigned int v12 = *(_DWORD *)(v1 + 64);
  unsigned int v13 = *(_DWORD *)(v1 + 68);
  unsigned int v14 = *(_DWORD *)(v1 + 72);
  unsigned int v15 = *(_DWORD *)(v1 + 76);
  unsigned int v16 = *(_DWORD *)(v1 + 80);
  unsigned int v17 = *(_DWORD *)(v1 + 84);
  int v18 = *(_DWORD *)(v1 + 88);
  if (v2 == 1)
  {
    uint64_t v40 = v3;
    LODWORD(v41) = v4;
    uint64_t v42 = v5;
    *(void *)&long long v43 = __PAIR64__(v7, v6);
    *((void *)&v43 + 1) = __PAIR64__(v9, v8);
    uint64_t v44 = v10;
    uint64_t v45 = v11;
    *(void *)&long long v46 = __PAIR64__(v13, v12);
    *((void *)&v46 + 1) = __PAIR64__(v15, v14);
    unint64_t v47 = __PAIR64__(v17, v16);
    int v48 = v18;
    _ViewInputs.withoutGeometryDependencies.getter();
    uint64_t v3 = v51;
    int v19 = v52;
    uint64_t v5 = v53;
    unsigned int v20 = v54;
    unsigned int v21 = DWORD1(v54);
    unsigned int v22 = DWORD2(v54);
    unsigned int v23 = HIDWORD(v54);
    uint64_t v10 = v55;
    uint64_t v11 = v56;
    unsigned int v24 = v57;
    unsigned int v13 = DWORD1(v57);
    unsigned int v14 = DWORD2(v57);
    unsigned int v15 = HIDWORD(v57);
    unsigned int v25 = v58;
    unsigned int v17 = HIDWORD(v58);
    int v26 = v59;
  }
  else
  {
    unsigned int v34 = v16;
    unsigned int v35 = v8;
    unsigned int v37 = v6;
    int v38 = v4;
    unsigned int v36 = v7;
    unsigned int v32 = v12;
    unsigned int v33 = v9;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v26 = v18;
    unsigned int v23 = v33;
    unsigned int v25 = v34;
    unsigned int v24 = v32;
    unsigned int v22 = v35;
    unsigned int v21 = v36;
    unsigned int v20 = v37;
    int v19 = v38;
  }
  uint64_t v51 = v3;
  int v52 = v19;
  uint64_t v53 = v5;
  *(void *)&long long v54 = __PAIR64__(v21, v20);
  *((void *)&v54 + 1) = __PAIR64__(v23, v22);
  uint64_t v55 = v10;
  uint64_t v56 = v11;
  *(void *)&long long v57 = __PAIR64__(v13, v24);
  *((void *)&v57 + 1) = __PAIR64__(v15, v14);
  unint64_t v58 = __PAIR64__(v17, v25);
  int v59 = v26;
  PreferencesInputs.remove<A>(_:)();
  _ViewInputs.requestedTextRepresentation.setter();
  uint64_t v27 = a1[2];
  uint64_t v28 = a1[4];
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(&v51, v27, v28);
  uint64_t v29 = a1[3];
  _GraphValue.init(_:)();
  uint64_t v40 = v51;
  LODWORD(v41) = v52;
  uint64_t v42 = v53;
  long long v43 = v54;
  uint64_t v44 = v55;
  uint64_t v45 = v56;
  long long v46 = v57;
  unint64_t v47 = v58;
  int v48 = v59;
  (*(void (**)(void *__return_ptr, unsigned char *, uint64_t *, uint64_t))(a1[5] + 24))(v50, v49, &v40, v29);
  uint64_t v40 = v50[0];
  uint64_t v41 = v50[1];
  uint64_t v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v28 + 56))(&v40, v27, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v30;
}

uint64_t $defer #1 <A, B>() in PlatformItemsGenerator.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for PlatformItemsGenerator() + 68);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(v3, a2, AssociatedTypeWitness);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance PlatformItemsGenerator<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t static PlatformItemsTextRepresentable.representationOptions(inputs:)@<X0>(uint64_t *a1@<X8>)
{
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *a1 = qword_1ED459730 & (v3 << 61 >> 63);
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemsTextRepresentable.PlatformItemContent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static PlatformTextRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemsTextRepresentable(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 48);
  char v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t result = 0;
  if (v1)
  {
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return v3 & 1;
  }
  return result;
}

uint64_t protocol witness for static PlatformTextRepresentable.makeRepresentation(inputs:context:outputs:) in conformance PlatformItemsTextRepresentable()
{
  return specialized static PlatformItemsTextRepresentable.makeRepresentation(inputs:context:outputs:)();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemsImageRepresentable.PlatformItemContent(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for static PlatformImageRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemsImageRepresentable(uint64_t a1)
{
  unint64_t v3 = *(void *)(a1 + 48);
  char v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t result = 0;
  if (v1)
  {
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (v3 >> 1) & 1;
  }
  return result;
}

uint64_t protocol witness for static PlatformImageRepresentable.makeRepresentation(inputs:context:outputs:) in conformance PlatformItemsImageRepresentable()
{
  return specialized static PlatformItemsTextRepresentable.makeRepresentation(inputs:context:outputs:)();
}

unint64_t specialized MutableCollection<>._partitionImpl(by:)(unint64_t result)
{
  int64_t v3 = *(void *)(*(void *)(v1 + 16) + 16);
  if (v3)
  {
    uint64_t v4 = v1;
    uint64_t v5 = (uint64_t (*)(unsigned char *))result;
    int64_t v6 = 0;
    uint64_t v7 = -304;
    while (1)
    {
      uint64_t v8 = *(void *)(v4 + 16);
      if ((unint64_t)v6 >= *(void *)(v8 + 16)) {
        break;
      }
      outlined init with copy of PlatformItem(v8 + 336 * v6 + 32, (uint64_t)v14);
      char v9 = v5(v14);
      uint64_t result = outlined destroy of PlatformItem((uint64_t)v14);
      if (v2) {
        return v6;
      }
      if (v9)
      {
        if (v6 >= v3 - 1) {
          return v6;
        }
        uint64_t v10 = v7;
        for (uint64_t i = v7 + 336 * v3--; ; i -= 336)
        {
          uint64_t v12 = *(void *)(v4 + 16);
          if (v3 >= *(void *)(v12 + 16)) {
            break;
          }
          outlined init with copy of PlatformItem(v12 + i, (uint64_t)v14);
          char v13 = v5(v14);
          uint64_t result = outlined destroy of PlatformItem((uint64_t)v14);
          if ((v13 & 1) == 0)
          {
            uint64_t result = specialized MutableCollection.swapAt(_:_:)(v6, v3);
            uint64_t v7 = v10;
            goto LABEL_5;
          }
          if (v6 >= --v3) {
            return v6;
          }
        }
        __break(1u);
        break;
      }
LABEL_5:
      if (++v6 >= v3) {
        return v6;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t specialized implicit closure #1 in _ViewOutputs.makePlatformItem<A>(inputs:itemRule:)(uint64_t a1, void (*a2)(void), void (*a3)(void))
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t specialized static PlatformItems.Key.reduce(value:nextValue:)(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  if (*(unsigned char *)a1)
  {
    a2(&v17);
    unsigned int v9 = v18;
    uint64_t v10 = v19;
    uint64_t v11 = *(unsigned int *)(a1 + 8);
    if (v11 != -1 && v18 != 0)
    {
      if (v11) {
        BOOL v13 = v18 == -1;
      }
      else {
        BOOL v13 = 1;
      }
      if (!v13) {
        unsigned int v9 = merge32(_:_:)(v11, v18);
      }
      *(_DWORD *)(a1 + 8) = v9;
    }
    return specialized Array.append<A>(contentsOf:)(v10);
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if (!*(void *)(v4 + 16))
    {
      a2(&v17);
      uint64_t result = swift_bridgeObjectRelease();
      unsigned int v14 = v18;
      uint64_t v15 = v19;
      *(void *)a1 = v17;
      *(_DWORD *)(a1 + 8) = v14;
      *(void *)(a1 + 16) = v15;
      return result;
    }
    outlined init with copy of PlatformItem(v4 + 32, (uint64_t)&v17);
    BOOL v5 = PlatformItem.hasContent.getter();
    uint64_t result = outlined destroy of PlatformItem((uint64_t)&v17);
    if (!v5)
    {
      ((void (*)(uint64_t *__return_ptr, uint64_t))a2)(&v17, result);
      uint64_t v7 = v19;
      if (*(void *)(v19 + 16))
      {
        outlined init with copy of PlatformItem(v19 + 32, (uint64_t)&v17);
        swift_bridgeObjectRelease();
        uint64_t v8 = *(void *)(a1 + 16);
        if (*(void *)(v8 + 16))
        {
          outlined init with copy of PlatformItem(v8 + 32, (uint64_t)v16);
          PlatformItem.merge(_:)((uint64_t)&v17);
          outlined destroy of PlatformItem((uint64_t)&v17);
          uint64_t v7 = *(void *)(a1 + 16);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *(void *)(a1 + 16) = v7;
          if (result)
          {
            if (*(void *)(v7 + 16))
            {
LABEL_8:
              outlined assign with copy of PlatformItem((uint64_t)v16, v7 + 32);
              return outlined destroy of PlatformItem((uint64_t)v16);
            }
            goto LABEL_25;
          }
        }
        else
        {
          __break(1u);
        }
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        uint64_t v7 = result;
        *(void *)(a1 + 16) = result;
        if (*(void *)(result + 16)) {
          goto LABEL_8;
        }
LABEL_25:
        __break(1u);
        return result;
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t outlined retain of PlatformItem.PrimaryContent(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  int64_t v3 = *(void **)(a1 + 8);
  uint64_t v22 = *(void *)(a1 + 32);
  unsigned int v23 = *(void **)(a1 + 24);
  uint64_t v20 = *(void *)(a1 + 48);
  uint64_t v21 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  long long v17 = *(_OWORD *)(a1 + 104);
  long long v18 = *(_OWORD *)(a1 + 88);
  long long v15 = *(_OWORD *)(a1 + 136);
  long long v16 = *(_OWORD *)(a1 + 120);
  long long v13 = *(_OWORD *)(a1 + 168);
  long long v14 = *(_OWORD *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v8 = *(void **)(a1 + 192);
  id v9 = *(id *)(a1 + 16);
  id v10 = v2;
  id v11 = v3;
  outlined copy of Image.Resolved?(v23, v22, v21, v20, v19, v4, v5, v6, v18, *((uint64_t *)&v18 + 1), v17, *((uint64_t *)&v17 + 1), v16, *((uint64_t *)&v16 + 1), v15, *((unint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13,
    *((uint64_t *)&v13 + 1),
    v7,
    v8);
  swift_retain();
  return a1;
}

uint64_t outlined release of PlatformItem.PrimaryContent?(uint64_t a1)
{
  outlined consume of PlatformItem.PrimaryContent?(*(void **)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void **)(a1 + 192));
  return a1;
}

void *outlined consume of PlatformItem.PrimaryContent?(void *result, void *a2, void *a3, void *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (result != (void *)1)
  {

    outlined consume of Image.Resolved?(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22,
      a23,
      a24,
      a25);
    return (void *)swift_release();
  }
  return result;
}

uint64_t *specialized MutableCollection<>.subscript.setter(uint64_t *result, char *a2, char *a3)
{
  if (((unint64_t)a2 & 0x8000000000000000) != 0
    || (v6 = a3, uint64_t v5 = *(char **)(v4 + 16), *((void *)v5 + 2) < (uint64_t)a3))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int64_t v3 = a2;
  uint64_t v7 = *result;
  uint64_t v8 = result[1];
  if (a2 == a3) {
    goto LABEL_20;
  }
  uint64_t v15 = v7 - v8;
  if (v7 == v8) {
    goto LABEL_29;
  }
  if ((uint64_t)a2 >= (uint64_t)a3) {
    goto LABEL_30;
  }
  uint64_t v9 = result[4];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_31;
  }
  while (1)
  {
    id v10 = 0;
    *(void *)(v4 + 16) = v5;
    uint64_t v11 = *(void *)(v9 + 16);
    if (v11 <= v7) {
      uint64_t v11 = v7;
    }
    uint64_t v12 = (char *)(v11 - v7);
    uint64_t v5 = (char *)(v9 + 336 * v7 + 32);
    long long v13 = &v6[~(unint64_t)v3];
    uint64_t v9 = 336 * (void)v3 + 32;
    while (1)
    {
      if ((uint64_t)&v10[v7] >= v8)
      {
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      if (v7 < 0) {
        goto LABEL_23;
      }
      if (v12 == v10) {
        goto LABEL_24;
      }
      outlined init with copy of PlatformItem((uint64_t)v5, (uint64_t)v16);
      uint64_t v6 = *(char **)(v4 + 16);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v4 + 16) = v6;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v6);
        *(void *)(v4 + 16) = v6;
      }
      if (&v10[(void)v3] >= (char *)*((void *)v6 + 2)) {
        goto LABEL_25;
      }
      outlined assign with copy of PlatformItem((uint64_t)v16, (uint64_t)&v6[v9]);
      uint64_t result = (uint64_t *)outlined destroy of PlatformItem((uint64_t)v16);
      if (v13 == v10) {
        break;
      }
      ++v10;
      v5 += 336;
      v9 += 336;
      if (!&v10[v15]) {
        goto LABEL_26;
      }
    }
    v7 += (uint64_t)(v10 + 1);
LABEL_20:
    if (v7 == v8) {
      return result;
    }
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v5);
  }
}

uint64_t partial apply for specialized implicit closure #1 in _ViewOutputs.makePlatformItem<A>(inputs:itemRule:)()
{
  return specialized implicit closure #1 in _ViewOutputs.makePlatformItem<A>(inputs:itemRule:)(*(void *)(v0 + 16), (void (*)(void))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (void (*)(void))lazy protocol witness table accessor for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent);
}

{
  uint64_t v0;

  return specialized implicit closure #1 in _ViewOutputs.makePlatformItem<A>(inputs:itemRule:)(*(void *)(v0 + 16), (void (*)(void))protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key, (void (*)(void))lazy protocol witness table accessor for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent);
}

unint64_t lazy protocol witness table accessor for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent;
  if (!lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent;
  if (!lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent;
  if (!lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent);
  }
  return result;
}

uint64_t specialized static PlatformItemsTextRepresentable.makeRepresentation(inputs:context:outputs:)()
{
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.viewPhase.getter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    MEMORY[0x1F4188790](result);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent;
  if (!lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent;
  if (!lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent;
  if (!lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent);
  }
  return result;
}

uint64_t outlined release of Slice<PlatformItems>(uint64_t a1)
{
  return a1;
}

void *type metadata accessor for PlatformItemsImageRepresentable.PlatformItemContent()
{
  return &unk_1ED45B478;
}

void *type metadata accessor for PlatformItemsTextRepresentable.PlatformItemContent()
{
  return &unk_1ED4596A0;
}

uint64_t type metadata accessor for PlatformItemsTransform()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for PlatformItem.ChildrenContent()
{
  return &type metadata for PlatformItem.ChildrenContent;
}

ValueMetadata *type metadata accessor for PlatformItem.Features()
{
  return &type metadata for PlatformItem.Features;
}

ValueMetadata *type metadata accessor for PlatformItem.ID()
{
  return &type metadata for PlatformItem.ID;
}

ValueMetadata *type metadata accessor for PlatformItems.Features()
{
  return &type metadata for PlatformItems.Features;
}

ValueMetadata *type metadata accessor for PlatformItem.SelectionContent.Options()
{
  return &type metadata for PlatformItem.SelectionContent.Options;
}

unint64_t lazy protocol witness table accessor for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options;
  if (!lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options;
  if (!lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options;
  if (!lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options;
  if (!lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.SelectionContent.Options and conformance PlatformItem.SelectionContent.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItems.Features and conformance PlatformItems.Features()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features;
  if (!lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features;
  if (!lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features;
  if (!lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features;
  if (!lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItems.Features and conformance PlatformItems.Features);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItem.ID and conformance PlatformItem.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItem.ID and conformance PlatformItem.ID;
  if (!lazy protocol witness table cache variable for type PlatformItem.ID and conformance PlatformItem.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.ID and conformance PlatformItem.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItem.Features and conformance PlatformItem.Features()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features;
  if (!lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features;
  if (!lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features;
  if (!lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features;
  if (!lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItem.Features and conformance PlatformItem.Features);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in PlatformItemsTransform<A>()
{
  return swift_getWitnessTable();
}

unint64_t instantiation function for generic protocol witness table for PlatformItemsTextRepresentable.PlatformItemContent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PlatformItemsTextRepresentable.PlatformItemContent and conformance PlatformItemsTextRepresentable.PlatformItemContent();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t instantiation function for generic protocol witness table for PlatformItemsImageRepresentable.PlatformItemContent(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PlatformItemsImageRepresentable.PlatformItemContent and conformance PlatformItemsImageRepresentable.PlatformItemContent();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for PlatformItemsGenerator()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for PlatformItemsGenerator()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlatformItemsGenerator(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 112) & (unint64_t)~v6) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v10 = AssociatedTypeWitness;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    unint64_t v11 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v11 = *(void *)v12;
    *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
    *(void *)(v11 + 16) = *(void *)(v12 + 16);
    *(_DWORD *)(v11 + 24) = *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v11 + 28) = *(_DWORD *)(v12 + 28);
    *(_DWORD *)(v11 + 32) = *(_DWORD *)(v12 + 32);
    *(_DWORD *)(v11 + 36) = *(_DWORD *)(v12 + 36);
    *(void *)(v11 + 40) = *(void *)(v12 + 40);
    *(void *)(v11 + 48) = *(void *)(v12 + 48);
    *(_DWORD *)(v11 + 56) = *(_DWORD *)(v12 + 56);
    *(_DWORD *)(v11 + 60) = *(_DWORD *)(v12 + 60);
    *(_DWORD *)(v11 + 64) = *(_DWORD *)(v12 + 64);
    *(_DWORD *)(v11 + 68) = *(_DWORD *)(v12 + 68);
    *(_DWORD *)(v11 + 72) = *(_DWORD *)(v12 + 72);
    *(_DWORD *)(v11 + 76) = *(_DWORD *)(v12 + 76);
    *(_DWORD *)(v11 + 80) = *(_DWORD *)(v12 + 80);
    *(unsigned char *)(v11 + 84) = *(unsigned char *)(v12 + 84);
    *(_DWORD *)(v11 + 88) = *(_DWORD *)(v12 + 88);
    long long v13 = (void *)((v11 + 99) & 0xFFFFFFFFFFFFFFF8);
    long long v14 = (void **)((v12 + 99) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = *v14;
    void *v13 = *v14;
    uint64_t v16 = ((unint64_t)v13 + v6 + 8) & ~v6;
    uint64_t v17 = ((unint64_t)v14 + v6 + 8) & ~v6;
    long long v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v19 = v15;
    v18(v16, v17, v10);
  }
  return a1;
}

uint64_t destroy for PlatformItemsGenerator(uint64_t a1)
{
  unint64_t v1 = (a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = (id *)((v1 + 99) & 0xFFFFFFFFFFFFFFF8);

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t, uint64_t))(v4 + 8);
  uint64_t v6 = AssociatedTypeWitness;
  unint64_t v7 = ((unint64_t)v2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v7, v6);
}

_DWORD *initializeWithCopy for PlatformItemsGenerator(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  unint64_t v2 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v3 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v2 = *(void *)v3;
  *(_DWORD *)(v2 + 8) = *(_DWORD *)(v3 + 8);
  *(void *)(v2 + 16) = *(void *)(v3 + 16);
  *(_DWORD *)(v2 + 24) = *(_DWORD *)(v3 + 24);
  *(_DWORD *)(v2 + 28) = *(_DWORD *)(v3 + 28);
  *(_DWORD *)(v2 + 32) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)(v2 + 36) = *(_DWORD *)(v3 + 36);
  *(void *)(v2 + 40) = *(void *)(v3 + 40);
  *(void *)(v2 + 48) = *(void *)(v3 + 48);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(v3 + 56);
  *(_DWORD *)(v2 + 60) = *(_DWORD *)(v3 + 60);
  *(_DWORD *)(v2 + 64) = *(_DWORD *)(v3 + 64);
  *(_DWORD *)(v2 + 68) = *(_DWORD *)(v3 + 68);
  *(_DWORD *)(v2 + 72) = *(_DWORD *)(v3 + 72);
  *(_DWORD *)(v2 + 76) = *(_DWORD *)(v3 + 76);
  *(_DWORD *)(v2 + 80) = *(_DWORD *)(v3 + 80);
  *(unsigned char *)(v2 + 84) = *(unsigned char *)(v3 + 84);
  *(_DWORD *)(v2 + 88) = *(_DWORD *)(v3 + 88);
  uint64_t v4 = (void *)((v2 + 99) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void **)((v3 + 99) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = *v5;
  *uint64_t v4 = *v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v4 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v5 + v10 + 8) & ~v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v13 = v6;
  v9(v11, v12, AssociatedTypeWitness);
  return a1;
}

_DWORD *assignWithCopy for PlatformItemsGenerator(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  unint64_t v3 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v3 = *(void *)v4;
  swift_retain();
  swift_release();
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(v4 + 8);
  *(void *)(v3 + 16) = *(void *)(v4 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(v4 + 28);
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(v4 + 32);
  *(_DWORD *)(v3 + 36) = *(_DWORD *)(v4 + 36);
  *(void *)(v3 + 40) = *(void *)(v4 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v3 + 48) = *(void *)(v4 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v3 + 56) = *(_DWORD *)(v4 + 56);
  *(_DWORD *)(v3 + 60) = *(_DWORD *)(v4 + 60);
  *(_DWORD *)(v3 + 64) = *(_DWORD *)(v4 + 64);
  *(_DWORD *)(v3 + 68) = *(_DWORD *)(v4 + 68);
  *(_DWORD *)(v3 + 72) = *(_DWORD *)(v4 + 72);
  *(_DWORD *)(v3 + 76) = *(_DWORD *)(v4 + 76);
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(v4 + 80);
  *(unsigned char *)(v3 + 84) = *(unsigned char *)(v4 + 84);
  *(_DWORD *)(v3 + 88) = *(_DWORD *)(v4 + 88);
  uint64_t v5 = (void **)((v3 + 99) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void **)((v4 + 99) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = *v6;
  uint64_t v8 = *v5;
  *uint64_t v5 = *v6;
  id v9 = v7;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *initializeWithTake for PlatformItemsGenerator(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  unint64_t v3 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)(v4 + 48);
  long long v5 = *(_OWORD *)(v4 + 64);
  long long v7 = *(_OWORD *)(v4 + 32);
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(v4 + 80);
  *(_OWORD *)(v3 + 48) = v6;
  *(_OWORD *)(v3 + 64) = v5;
  *(_OWORD *)(v3 + 32) = v7;
  long long v8 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)unint64_t v3 = *(_OWORD *)v4;
  *(_OWORD *)(v3 + 16) = v8;
  *(unsigned char *)(v3 + 84) = *(unsigned char *)(v4 + 84);
  *(_DWORD *)(v3 + 88) = *(_DWORD *)(v4 + 88);
  id v9 = (void *)((v3 + 99) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)((v4 + 99) & 0xFFFFFFFFFFFFFFF8);
  *id v9 = *v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 32))(((unint64_t)v9 + *(unsigned __int8 *)(v12 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v12 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *assignWithTake for PlatformItemsGenerator(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  unint64_t v3 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = ((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v3 = *(void *)v4;
  swift_release();
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(v4 + 8);
  *(void *)(v3 + 16) = *(void *)(v4 + 16);
  swift_release();
  *(_DWORD *)(v3 + 24) = *(_DWORD *)(v4 + 24);
  *(_DWORD *)(v3 + 28) = *(_DWORD *)(v4 + 28);
  *(_DWORD *)(v3 + 32) = *(_DWORD *)(v4 + 32);
  *(_DWORD *)(v3 + 36) = *(_DWORD *)(v4 + 36);
  *(void *)(v3 + 40) = *(void *)(v4 + 40);
  swift_bridgeObjectRelease();
  *(void *)(v3 + 48) = *(void *)(v4 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(v3 + 56) = *(_DWORD *)(v4 + 56);
  *(_DWORD *)(v3 + 60) = *(_DWORD *)(v4 + 60);
  *(_DWORD *)(v3 + 64) = *(_DWORD *)(v4 + 64);
  *(_DWORD *)(v3 + 68) = *(_DWORD *)(v4 + 68);
  *(_DWORD *)(v3 + 72) = *(_DWORD *)(v4 + 72);
  *(_DWORD *)(v3 + 76) = *(_DWORD *)(v4 + 76);
  *(_DWORD *)(v3 + 80) = *(_DWORD *)(v4 + 80);
  *(unsigned char *)(v3 + 84) = *(unsigned char *)(v4 + 84);
  *(_DWORD *)(v3 + 88) = *(_DWORD *)(v4 + 88);
  long long v5 = (void **)((v3 + 99) & 0xFFFFFFFFFFFFFFF8);
  long long v6 = (void **)((v4 + 99) & 0xFFFFFFFFFFFFFFF8);
  long long v7 = *v5;
  *long long v5 = *v6;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))(((unint64_t)v5 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v9 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemsGenerator(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v10 = ((v8 + 112) & ~v8) + v9;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      unint64_t v16 = ((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8;
      if ((v6 & 0x80000000) != 0)
      {
        long long v18 = *(uint64_t (**)(unint64_t))(v5 + 48);
        return v18((((v16 + 99) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8);
      }
      else
      {
        unint64_t v17 = *(void *)(v16 + 16);
        if (v17 >= 0xFFFFFFFF) {
          LODWORD(v17) = -1;
        }
        return (v17 + 1);
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v10 | v15) + 1;
}

void storeEnumTagSinglePayload for PlatformItemsGenerator(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 112) & ~v8) + *(void *)(v6 + 64);
  if (a3 <= v9)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v12 = ~v9 + a2;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v10)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187F43B2CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v16 = (unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFF8;
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v17 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
          v17((((v16 + 99) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8, a2);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(void *)(v16 + 72) = 0;
          *(_OWORD *)(v16 + 56) = 0u;
          *(_OWORD *)(v16 + 40) = 0u;
          *(_OWORD *)(v16 + 24) = 0u;
          *(_OWORD *)(v16 + 8) = 0u;
          *(_DWORD *)(v16 + 80) = 0;
          *(void *)unint64_t v16 = a2 ^ 0x80000000;
        }
        else
        {
          *(void *)(v16 + 16) = (a2 - 1);
        }
      }
      return;
  }
}

__n128 __swift_memcpy36_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PlatformItemRuleConfiguration()
{
  return &type metadata for PlatformItemRuleConfiguration;
}

uint64_t base witness table accessor for _AttributeBody in PlatformItemsGenerator<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t sub_187F43B94()
{
  unint64_t v1 = (int *)(type metadata accessor for PlatformItemsGenerator() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v3 = v2 + v1[19];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v3, AssociatedTypeWitness);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in PlatformItemsGenerator.updateValue()()
{
  type metadata accessor for PlatformItemsGenerator();
  uint64_t v0 = (void *)type metadata accessor for PlatformItemsGenerator();
  return PlatformItemsGenerator.makeContent()(v0);
}

uint64_t EnvironmentValues.dialogSeverity.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<DialogSeverity> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<DialogSeverity> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

BOOL static DialogSeverity.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static DialogSeverity.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static DialogSeverity.critical.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static DialogSeverity.informational.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

uint64_t View.dialogSeverity(_:)()
{
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.dialogSeverity : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<DialogSeverity> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<DialogSeverity> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_187F440A0()
{
  return EnvironmentValues.dialogSeverity.setter();
}

uint64_t EnvironmentValues.dialogSeverity.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<DialogSeverity> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void Scene.dialogSeverity(_:)()
{
}

uint64_t sub_187F441DC()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<DialogSeverity>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DialogSeverity>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DialogSeverity>);
    }
  }
}

uint64_t sub_187F442D0(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<DialogSeverity> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.DialogSeverityKey()
{
  return &type metadata for EnvironmentValues.DialogSeverityKey;
}

uint64_t AccessibilityNotificationAction.announcement(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  uint64_t v29 = a2;
  uint64_t v30 = a4;
  int v26 = a3;
  uint64_t v27 = a5;
  uint64_t v28 = a1;
  uint64_t v25 = type metadata accessor for TimeZone();
  uint64_t v7 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  unsigned int v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Calendar();
  uint64_t v10 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  unsigned int v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Locale();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  unint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for configuredForPlatform != -1) {
    swift_once();
  }
  uint64_t v36 = static EnvironmentValues.configuredForPlatform;
  uint64_t v37 = unk_1EB3084E0;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v6, v13);
  swift_retain();
  swift_retain();
  EnvironmentValues.locale.setter();
  unint64_t v17 = (int *)type metadata accessor for AccessibilityNotificationAction();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v6 + v17[5], v24);
  EnvironmentValues.calendar.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v6 + v17[6], v25);
  EnvironmentValues.timeZone.setter();
  uint64_t v18 = v6 + v17[7];
  uint64_t v19 = *(void *)(v18 + 8);
  char v20 = *(unsigned char *)(v18 + 16);
  char v21 = *(unsigned char *)(v18 + 17);
  LOWORD(v31) = *(_WORD *)v18;
  uint64_t v32 = v19;
  char v33 = v20;
  char v34 = v21;
  long long v35 = *(_OWORD *)(v18 + 24);
  AccessibilitySpeechAttributes.applyTo(environment:)();
  uint64_t v31 = v36;
  uint64_t v32 = v37;
  static AccessibilityNotification.Announcement.makeAnnouncement(text:in:)();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for AccessibilityNotificationAction()
{
  uint64_t result = type metadata singleton initialization cache for AccessibilityNotificationAction;
  if (!type metadata singleton initialization cache for AccessibilityNotificationAction) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t static AccessibilityNotification.Announcement.makeAnnouncement(text:in:)()
{
  if (!static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)())
  {
    static _GraphInputs.defaultInterfaceIdiom.getter();
    static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
    JUMPOUT(0x18C10A9F0);
  }

  return MEMORY[0x1F40D3150]();
}

uint64_t AccessibilityNotificationAction.announcement(_:)@<X0>(int a1@<W2>, uint64_t a2@<X8>)
{
  LODWORD(v28) = a1;
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for TimeZone();
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v31 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Calendar();
  uint64_t v6 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v13 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v26 = v14;
  uint64_t v27 = v13;
  char v16 = v15;
  uint64_t v28 = v17;
  if (one-time initialization token for configuredForPlatform != -1) {
    swift_once();
  }
  uint64_t v38 = static EnvironmentValues.configuredForPlatform;
  uint64_t v39 = unk_1EB3084E0;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v2, v9);
  swift_retain();
  swift_retain();
  EnvironmentValues.locale.setter();
  uint64_t v18 = (int *)type metadata accessor for AccessibilityNotificationAction();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v2 + v18[5], v29);
  EnvironmentValues.calendar.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v5, v2 + v18[6], v31);
  EnvironmentValues.timeZone.setter();
  uint64_t v19 = v2 + v18[7];
  uint64_t v20 = *(void *)(v19 + 8);
  char v21 = *(unsigned char *)(v19 + 16);
  char v22 = *(unsigned char *)(v19 + 17);
  LOWORD(v33) = *(_WORD *)v19;
  uint64_t v34 = v20;
  char v35 = v21;
  char v36 = v22;
  long long v37 = *(_OWORD *)(v19 + 24);
  AccessibilitySpeechAttributes.applyTo(environment:)();
  uint64_t v33 = v38;
  uint64_t v34 = v39;
  uint64_t v24 = v26;
  uint64_t v23 = v27;
  static AccessibilityNotification.Announcement.makeAnnouncement(text:in:)();
  outlined consume of Text.Storage(v23, v24, v16 & 1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t AccessibilityNotificationAction.announcement<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v6 = type metadata accessor for TimeZone();
  uint64_t v36 = *(void *)(v6 - 8);
  uint64_t v37 = v6;
  MEMORY[0x1F4188790](v6);
  char v35 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for Calendar();
  uint64_t v8 = *(void *)(v34 - 8);
  MEMORY[0x1F4188790](v34);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Locale();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v16);
  uint64_t v32 = Text.init<A>(_:)();
  uint64_t v33 = v19;
  uint64_t v21 = v20;
  char v23 = v22;
  if (one-time initialization token for configuredForPlatform != -1) {
    swift_once();
  }
  uint64_t v44 = static EnvironmentValues.configuredForPlatform;
  uint64_t v45 = unk_1EB3084E0;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v3, v11);
  swift_retain();
  swift_retain();
  EnvironmentValues.locale.setter();
  uint64_t v24 = (int *)type metadata accessor for AccessibilityNotificationAction();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v3 + v24[5], v34);
  EnvironmentValues.calendar.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v3 + v24[6], v37);
  EnvironmentValues.timeZone.setter();
  uint64_t v25 = v3 + v24[7];
  uint64_t v26 = *(void *)(v25 + 8);
  char v27 = *(unsigned char *)(v25 + 16);
  char v28 = *(unsigned char *)(v25 + 17);
  LOWORD(v39) = *(_WORD *)v25;
  uint64_t v40 = v26;
  char v41 = v27;
  char v42 = v28;
  long long v43 = *(_OWORD *)(v25 + 24);
  AccessibilitySpeechAttributes.applyTo(environment:)();
  uint64_t v39 = v44;
  uint64_t v40 = v45;
  uint64_t v29 = v32;
  static AccessibilityNotification.Announcement.makeAnnouncement(text:in:)();
  outlined consume of Text.Storage(v29, v21, v23 & 1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.accessibilityNotification.getter()
{
  return EnvironmentValues.subscript.getter();
}

double static AccessibilityNotificationActionKey.value(in:)@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  swift_retain();
  swift_retain();
  EnvironmentValues.locale.getter();
  uint64_t v5 = type metadata accessor for AccessibilityNotificationAction();
  EnvironmentValues.calendar.getter();
  EnvironmentValues.timeZone.getter();
  AccessibilitySpeechAttributes.init(in:)();
  uint64_t v6 = a2 + *(int *)(v5 + 28);
  *(_WORD *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = v4;
  *(unsigned char *)(v6 + 16) = v8;
  *(unsigned char *)(v6 + 17) = v9;
  double result = *(double *)&v10;
  *(_OWORD *)(v6 + 24) = v10;
  return result;
}

BOOL specialized static AccessibilitySpeechAttributes.== infix(_:_:)(double *a1, double *a2)
{
  int v4 = *(unsigned __int8 *)a1;
  int v5 = *((unsigned __int8 *)a1 + 1);
  double v6 = a1[1];
  unsigned __int8 v7 = *((unsigned char *)a1 + 16);
  int v8 = *((unsigned __int8 *)a1 + 17);
  uint64_t v9 = *((void *)a1 + 3);
  uint64_t v10 = *((void *)a1 + 4);
  int v11 = *(unsigned __int8 *)a2;
  int v12 = *((unsigned __int8 *)a2 + 1);
  double v13 = a2[1];
  int v14 = *((unsigned __int8 *)a2 + 16);
  int v15 = *((unsigned __int8 *)a2 + 17);
  uint64_t v16 = *((void *)a2 + 3);
  uint64_t v17 = *((void *)a2 + 4);
  if (v4 == 2)
  {
    if (v11 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    BOOL v19 = (v4 & 1) == 0;
    if (v11 == 2 || ((v19 ^ v11) & 1) == 0) {
      return v18;
    }
  }
  if (v5 == 2)
  {
    if (v12 != 2) {
      return 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    BOOL v20 = (v5 & 1) == 0;
    if (v12 == 2 || ((v20 ^ v12) & 1) == 0) {
      return v18;
    }
  }
  if (v7)
  {
    if (!v14) {
      return 0;
    }
  }
  else
  {
    if (v6 == v13) {
      char v21 = v14;
    }
    else {
      char v21 = 1;
    }
    if (v21) {
      return 0;
    }
  }
  if (v8 == 3)
  {
    if (v15 != 3) {
      return 0;
    }
  }
  else
  {
    uint64_t v18 = 0;
    if (v15 == 3 || v8 != v15) {
      return v18;
    }
  }
  if (!v10) {
    return !v17;
  }
  if (!v17) {
    return 0;
  }
  if (v9 == v16 && v10 == v17) {
    return 1;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v18 = 0;
  if (v22) {
    return 1;
  }
  return v18;
}

BOOL specialized static AccessibilityNotificationAction.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0x18C10A690]() & 1) != 0
    && (int v4 = (int *)type metadata accessor for AccessibilityNotificationAction(),
        (MEMORY[0x18C10A720](a1 + v4[5], a2 + v4[5]) & 1) != 0)
    && (MEMORY[0x18C10A840](a1 + v4[6], a2 + v4[6]) & 1) != 0)
  {
    uint64_t v5 = a1 + v4[7];
    double v6 = *(double *)(v5 + 8);
    char v7 = *(unsigned char *)(v5 + 16);
    char v8 = *(unsigned char *)(v5 + 17);
    LOWORD(v19[0]) = *(_WORD *)v5;
    v19[1] = v6;
    char v20 = v7;
    char v21 = v8;
    long long v22 = *(_OWORD *)(v5 + 24);
    uint64_t v9 = a2 + v4[7];
    double v10 = *(double *)(v9 + 8);
    char v11 = *(unsigned char *)(v9 + 16);
    char v12 = *(unsigned char *)(v9 + 17);
    LOWORD(v15[0]) = *(_WORD *)v9;
    v15[1] = v10;
    char v16 = v11;
    char v17 = v12;
    long long v18 = *(_OWORD *)(v9 + 24);
    return specialized static AccessibilitySpeechAttributes.== infix(_:_:)(v19, v15);
  }
  else
  {
    return 0;
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityNotificationActionKey and conformance AccessibilityNotificationActionKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNotificationActionKey and conformance AccessibilityNotificationActionKey;
  if (!lazy protocol witness table cache variable for type AccessibilityNotificationActionKey and conformance AccessibilityNotificationActionKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNotificationActionKey and conformance AccessibilityNotificationActionKey);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityNotificationAction(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Locale();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    double v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    uint64_t v12 = a3[6];
    double v13 = (char *)a1 + v12;
    int v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    uint64_t v16 = a3[7];
    char v17 = (char *)a1 + v16;
    long long v18 = (char *)a2 + v16;
    *(_WORD *)char v17 = *(_WORD *)v18;
    *((void *)v17 + 1) = *((void *)v18 + 1);
    *((_WORD *)v17 + 8) = *((_WORD *)v18 + 8);
    uint64_t v19 = *((void *)v18 + 4);
    *((void *)v17 + 3) = *((void *)v18 + 3);
    *((void *)v17 + 4) = v19;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AccessibilityNotificationAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = a1 + *(int *)(a2 + 24);
  uint64_t v8 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityNotificationAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(_WORD *)uint64_t v16 = *(_WORD *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  *(_WORD *)(v16 + 16) = *(_WORD *)(v17 + 16);
  uint64_t v18 = *(void *)(v17 + 32);
  *(void *)(v16 + 24) = *(void *)(v17 + 24);
  *(void *)(v16 + 32) = v18;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityNotificationAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v17;
  *(unsigned char *)(v16 + 1) = *(unsigned char *)(v17 + 1);
  uint64_t v18 = *(void *)(v17 + 8);
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  *(void *)(v16 + 8) = v18;
  *(unsigned char *)(v16 + 17) = *(unsigned char *)(v17 + 17);
  *(void *)(v16 + 24) = *(void *)(v17 + 24);
  *(void *)(v16 + 32) = *(void *)(v17 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AccessibilityNotificationAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  long long v18 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(_OWORD *)(v16 + 16) = v18;
  *(void *)(v16 + 32) = *(void *)(v17 + 32);
  return a1;
}

uint64_t assignWithTake for AccessibilityNotificationAction(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for TimeZone();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  *(_WORD *)uint64_t v16 = *(_WORD *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  *(_WORD *)(v16 + 16) = *(_WORD *)(v17 + 16);
  uint64_t v19 = *(void *)(v17 + 24);
  uint64_t v18 = *(void *)(v17 + 32);
  *(void *)(v16 + 24) = v19;
  *(void *)(v16 + 32) = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityNotificationAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F45A4C);
}

uint64_t sub_187F45A4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = type metadata accessor for TimeZone();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[7] + 32);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  int v17 = v16 - 1;
  if (v17 < 0) {
    int v17 = -1;
  }
  return (v17 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityNotificationAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F45BD0);
}

uint64_t sub_187F45BD0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for Locale();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = type metadata accessor for Calendar();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = type metadata accessor for TimeZone();
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[7] + 32) = a2;
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[6];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for AccessibilityNotificationAction()
{
  uint64_t result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Calendar();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for TimeZone();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

void *type metadata accessor for AccessibilityNotificationActionKey()
{
  return &unk_1ED45FC58;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNotificationAction and conformance AccessibilityNotificationAction()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNotificationAction and conformance AccessibilityNotificationAction;
  if (!lazy protocol witness table cache variable for type AccessibilityNotificationAction and conformance AccessibilityNotificationAction)
  {
    type metadata accessor for AccessibilityNotificationAction();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNotificationAction and conformance AccessibilityNotificationAction);
  }
  return result;
}

void NavigationSplitSidebarStateMachine.transitionCount.didset(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = *(void *)(v2 + 16);
  if (v10 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x187F46238);
  }
  if (v10 != a1)
  {
    static Log.splitViewVisibility.getter();
    uint64_t v11 = type metadata accessor for Logger();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v9, 1, v11) == 1)
    {
      outlined destroy of Logger?((uint64_t)v9);
    }
    else
    {
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v14, v15))
      {
        unint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v23 = v12;
        uint64_t v24 = a1;
        int v17 = v16;
        *(_DWORD *)unint64_t v16 = 134217984;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1872C6000, v14, v15, "old transitionCount: %ld", v17, 0xCu);
        uint64_t v18 = v17;
        uint64_t v12 = v23;
        MEMORY[0x18C119C60](v18, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    }
    static Log.splitViewVisibility.getter();
    if (v13(v6, 1, v11) == 1)
    {
      outlined destroy of Logger?((uint64_t)v6);
      if (*(void *)(v2 + 16)) {
        return;
      }
      goto LABEL_15;
    }
    swift_retain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      char v21 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)char v21 = 134217984;
      uint64_t v24 = *(void *)(v2 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1872C6000, v19, v20, "new transitionCount: %ld", v21, 0xCu);
      MEMORY[0x18C119C60](v21, -1, -1);
    }
    else
    {
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v6, v11);
    if (!*(void *)(v2 + 16))
    {
LABEL_15:
      long long v22 = (void *)MEMORY[0x18C119DF0](v2 + 32);
      swift_unknownObjectWeakAssign();
      NavigationSplitSidebarStateMachine.coordinatedHost.didset(v22);
    }
  }
}

uint64_t Transaction.isFromSplitView.getter()
{
  Transaction.subscript.getter();
  return v1;
}

Swift::Void __swiftcall NavigationSplitSidebarStateMachine.splitViewController(_:willHide:)(UISplitViewController *_, UISplitViewControllerColumn willHide)
{
  uint64_t v3 = v2;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.splitViewVisibility.getter();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of Logger?((uint64_t)v8);
  }
  else
  {
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v17[1] = v3;
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v18 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      unint64_t v15 = 0xE700000000000000;
      uint64_t v16 = 0x7972616D697270;
      switch(willHide)
      {
        case UISplitViewControllerColumnPrimary:
          break;
        case UISplitViewControllerColumnSupplementary:
          unint64_t v15 = 0xED0000797261746ELL;
          uint64_t v16 = 0x656D656C70707573;
          break;
        case UISplitViewControllerColumnSecondary:
          unint64_t v15 = 0xE900000000000079;
          uint64_t v16 = 0x7261646E6F636573;
          break;
        case UISplitViewControllerColumnCompact:
          uint64_t v16 = 0x746361706D6F63;
          break;
        default:
          uint64_t v16 = 0x6E776F6E6B6E75;
          break;
      }
      v17[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v11, v12, "willHide %s", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v14, -1, -1);
      MEMORY[0x18C119C60](v13, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)(_);
}

uint64_t specialized closure #1 in NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)()
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    static Log.splitViewVisibility.getter();
    uint64_t v5 = type metadata accessor for Logger();
    uint64_t v6 = *(void *)(v5 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5) == 1)
    {
      outlined destroy of Logger?((uint64_t)v2);
    }
    else
    {
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1872C6000, v7, v8, "begin animateAlongsideTransition", v9, 2u);
        MEMORY[0x18C119C60](v9, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v2, v5);
    }
    uint64_t v10 = *(void *)(v4 + 16);
    *(void *)(v4 + 16) = v10 + 1;
    NavigationSplitSidebarStateMachine.transitionCount.didset(v10);
    return swift_release();
  }
  return result;
}

uint64_t closure #2 in NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)()
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    static Log.splitViewVisibility.getter();
    uint64_t v5 = type metadata accessor for Logger();
    uint64_t v6 = *(void *)(v5 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v2, 1, v5) == 1)
    {
      outlined destroy of Logger?((uint64_t)v2);
    }
    else
    {
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1872C6000, v7, v8, "end animateAlongsideTransition", v9, 2u);
        MEMORY[0x18C119C60](v9, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v2, v5);
    }
    uint64_t v10 = *(void *)(v4 + 16);
    *(void *)(v4 + 16) = v10 - 1;
    NavigationSplitSidebarStateMachine.transitionCount.didset(v10);
    return swift_release();
  }
  return result;
}

uint64_t NavigationSplitSidebarStateMachine.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

void specialized NavigationSplitSidebarStateMachine.splitViewController(_:didChangeTo:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.splitViewVisibility.getter();
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of Logger?((uint64_t)v6);
  }
  else
  {
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v19 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      unint64_t v13 = 0xE900000000000063;
      uint64_t v14 = 0x6974616D6F747561;
      switch(a1)
      {
        case 0:
          break;
        case 1:
          unint64_t v13 = 0xED0000796C6E4F79;
          uint64_t v14 = 0x7261646E6F636573;
          break;
        case 2:
          uint64_t v14 = 0xD000000000000012;
          unint64_t v15 = "oneBesideSecondary";
          goto LABEL_13;
        case 3:
          uint64_t v16 = "oneOverSecondary";
          goto LABEL_11;
        case 4:
          uint64_t v14 = 0xD000000000000012;
          unint64_t v15 = "twoBesideSecondary";
          goto LABEL_13;
        case 5:
          uint64_t v16 = "twoOverSecondary";
LABEL_11:
          unint64_t v13 = (unint64_t)(v16 - 32) | 0x8000000000000000;
          uint64_t v14 = 0xD000000000000010;
          break;
        case 6:
          uint64_t v14 = 0xD000000000000014;
          unint64_t v15 = "twoDisplaceSecondary";
LABEL_13:
          unint64_t v13 = (unint64_t)(v15 - 32) | 0x8000000000000000;
          break;
        default:
          unint64_t v13 = 0xE700000000000000;
          uint64_t v14 = 0x6E776F6E6B6E75;
          break;
      }
      uint64_t v18 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v9, v10, "didChangeTo: %s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v12, -1, -1);
      MEMORY[0x18C119C60](v11, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  }
  int v17 = (void *)MEMORY[0x18C119DF0](v2 + 32);
  swift_unknownObjectWeakAssign();
  NavigationSplitSidebarStateMachine.coordinatedHost.didset(v17);
}

uint64_t sub_187F46C90()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)()
{
  return closure #2 in NavigationSplitSidebarStateMachine.coordinateAnimatedColumnChange(alongside:)();
}

uint64_t sub_187F46CD0()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187F46D08()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void *partial apply for closure #1 in UISplitViewController.animateTopDetailAlongsideTransition(begin:end:)(uint64_t a1)
{
  return closure #1 in UISplitViewController.animateTopDetailAlongsideTransition(begin:end:)(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

uint64_t sub_187F46D54()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 40);
  if (v1)
  {
    if (v1 == 1) {
      goto LABEL_6;
    }
    swift_release();
  }
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
LABEL_6:

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187F46DCC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = Transaction.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187F46E1C()
{
  return Transaction.subscript.setter();
}

void *outlined release of UISplitViewControllerVisibilityEngine(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  swift_release();
  swift_release();
  outlined consume of NavigationEventHandlers?(v2, v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for IsFromSplitViewKey()
{
  return &type metadata for IsFromSplitViewKey;
}

uint64_t EnvironmentValues._undoManager.setter(void *a1)
{
  type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
  id v3 = a1;
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

    swift_release();
    swift_release();
  }
  else
  {
  }
  return swift_release();
}

void (*EnvironmentValues._undoManager.modify(void *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *a1 = a1[1];
  return EnvironmentValues._undoManager.modify;
}

void EnvironmentValues._undoManager.modify(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void **)a1;
  *(void *)(a1 + 8) = *(void *)a1;
  type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
  id v6 = v5;
  uint64_t v7 = v6;
  if (a2)
  {
    id v8 = v6;
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }

    swift_release();
    uint64_t v9 = *(void **)a1;
  }
  else
  {
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }

    swift_release();
  }
}

uint64_t sub_187F47248@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = EnvironmentValues.undoManager.getter(a1, a2);
  *a3 = result;
  return result;
}

void sub_187F47284(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  specialized EnvironmentValues.subscript.setter(v1);
}

ValueMetadata *type metadata accessor for UndoManagerKey()
{
  return &type metadata for UndoManagerKey;
}

ValueMetadata *type metadata accessor for Transaction.ImplicitUndoSuppressedKey()
{
  return &type metadata for Transaction.ImplicitUndoSuppressedKey;
}

unint64_t initializeBufferWithCopyOfBuffer for SearchModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = type metadata accessor for AttributedString();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v12 | 7;
  uint64_t v14 = *(void *)(v11 + 64);
  if ((v12 | (unint64_t)v7) <= 7 && ((*(_DWORD *)(v11 + 80) | v7) & 0x100000) == 0)
  {
    uint64_t v15 = ((v12 + 16) & ~v12) + v14 + 7;
    BOOL v17 = ((((v12 + 9) & ~v12) + v14) & 0xFFFFFFFFFFFFFFF8)
        + (((v12 | 7)
          + 18
          + ((v15
            + (((v12 | 7) + v9 + ((v7 + 40) & ~(unint64_t)v7)) & ~(v12 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v12 | 7)) != 0
       && ((((v12 + 9) & ~v12) + v14) & 0xFFFFFFFFFFFFFFF8)
        + (((v12 | 7)
          + 18
          + ((v15
            + (((v12 | 7) + v9 + ((v7 + 40) & ~(unint64_t)v7)) & ~(v12 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v12 | 7)) < 0xFFFFFFFFFFFFFFE8;
  }
  else
  {
    BOOL v17 = 1;
  }
  if (v17)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unint64_t v19 = v18 + (((v12 | v7) & 0xF8 ^ 0x1F8) & ((v12 | v7) + 16));
  }
  else
  {
    uint64_t v55 = (v12 | 7) + 18;
    uint64_t v56 = v12 + 9;
    uint64_t v57 = ((v12 + 9) & ~v12) + v14;
    uint64_t v58 = *(void *)(*(void *)(v10 - 8) + 64);
    uint64_t v53 = *(void *)(v10 - 8);
    uint64_t v52 = v9;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v59 = v10;
    unint64_t v60 = a1;
    unint64_t v20 = a1 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    uint64_t v23 = *(void *)(v21 + 16);
    char v24 = *(unsigned char *)(v21 + 24);
    uint64_t v54 = ((v12 + 16) & ~v12) + v14 + 7;
    outlined copy of Text.Storage(v22, v23, v24);
    *(void *)(v20 + 8) = v22;
    *(void *)(v20 + 16) = v23;
    *(unsigned char *)(v20 + 24) = v24;
    *(void *)(v20 + 32) = *(void *)(v21 + 32);
    uint64_t v25 = (v20 + v8 + 40) & ~v8;
    uint64_t v26 = (v21 + v8 + 40) & ~v8;
    char v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v27(v25, v26, v5);
    uint64_t v28 = ~v13;
    uint64_t v29 = v52 + v13;
    uint64_t v30 = ~v12;
    uint64_t v31 = (void *)((v25 + v29) & v28);
    uint64_t v32 = (void *)((v26 + v29) & v28);
    *uint64_t v31 = *v32;
    uint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v33 = *v34;
    uint64_t v35 = ((unint64_t)v33 + v12 + 8) & ~v12;
    uint64_t v36 = ((unint64_t)v34 + v12 + 8) & ~v12;
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
    swift_retain();
    swift_retain();
    v37(v35, v36, v59);
    unint64_t v38 = ((unint64_t)v31 + v54) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v39 = ((unint64_t)v32 + v54) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v40 = *(unsigned __int8 *)(v39 + 17);
    if (v40 >= 2) {
      unsigned int v40 = *(_DWORD *)v39 + 2;
    }
    if (v40 == 1)
    {
      *(void *)unint64_t v38 = *(void *)v39;
      *(void *)(v38 + 8) = *(void *)(v39 + 8);
      *(unsigned char *)(v38 + 16) = *(unsigned char *)(v39 + 16);
      swift_retain();
      char v41 = 1;
    }
    else
    {
      char v41 = 0;
      *(unsigned char *)unint64_t v38 = *(unsigned char *)v39;
      *(void *)(v38 + 8) = *(void *)(v39 + 8);
    }
    swift_retain();
    *(unsigned char *)(v38 + 17) = v41;
    unint64_t v42 = (v55 + v38) & v28;
    unint64_t v43 = (v55 + v39) & v28;
    *(unsigned char *)unint64_t v42 = *(unsigned char *)v43;
    *(unsigned char *)(v42 | 1) = *(unsigned char *)(v43 | 1);
    *(unsigned char *)(v42 | 2) = *(unsigned char *)(v43 | 2);
    *(unsigned char *)(v42 | 3) = *(unsigned char *)(v43 | 3);
    uint64_t v44 = v42 | 4;
    int v45 = *(_DWORD *)(v43 | 4);
    *(unsigned char *)(v44 + 4) = *(unsigned char *)((v43 | 4) + 4);
    *(_DWORD *)uint64_t v44 = v45;
    unint64_t v46 = (v56 + v42) & v30;
    unint64_t v47 = (v56 + v43) & v30;
    v37(v46, v47, v59);
    *(unsigned char *)(v46 + v58) = *(unsigned char *)(v47 + v58);
    unint64_t v48 = (v46 + v58) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v49 = (v47 + v58) & 0xFFFFFFFFFFFFFFFCLL;
    int v50 = *(_DWORD *)(v49 + 4);
    *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
    *(_DWORD *)(v48 + 4) = v50;
    *(void *)((v57 + 16 + v42) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v57 + 16 + v43) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v19 = v60;
  }
  swift_retain();
  return v19;
}

unint64_t assignWithCopy for SearchModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  char v8 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  outlined copy of Text.Storage(v6, v7, v8);
  uint64_t v9 = *(void *)(v4 + 8);
  uint64_t v10 = *(void *)(v4 + 16);
  char v11 = *(unsigned char *)(v4 + 24);
  *(void *)(v4 + 8) = v6;
  *(void *)(v4 + 16) = v7;
  *(unsigned char *)(v4 + 24) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(void *)(v4 + 32) = *(void *)(v5 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 24;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 40 + v4) & ~v14;
  uint64_t v16 = (v14 + 40 + v5) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 40);
  uint64_t v18 = type metadata accessor for AttributedString();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = v20 | 7;
  uint64_t v22 = (v20 | 7) + v17;
  uint64_t v46 = ~(v20 | 7);
  uint64_t v23 = (void *)((v22 + v15) & v46);
  char v24 = (void *)((v22 + v16) & v46);
  *uint64_t v23 = *v24;
  swift_retain();
  swift_release();
  uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v25 = *v26;
  swift_retain();
  swift_release();
  unint64_t v27 = (unint64_t)v25 + v20 + 8;
  uint64_t v28 = ~v20;
  int v45 = *(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 24);
  v45(v27 & ~v20, ((unint64_t)v26 + v20 + 8) & ~v20, v18);
  uint64_t v29 = *(void *)(v19 + 64);
  uint64_t v30 = v29 + ((v20 + 16) & ~v20) + 7;
  unint64_t v31 = ((unint64_t)v23 + v30) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = ((unint64_t)v24 + v30) & 0xFFFFFFFFFFFFFFF8;
  if (v31 != v32)
  {
    unsigned int v33 = *(unsigned __int8 *)(v31 + 17);
    if (v33 >= 2) {
      unsigned int v33 = *(_DWORD *)v31 + 2;
    }
    if (v33 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v34 = *(unsigned __int8 *)(v32 + 17);
    if (v34 >= 2) {
      unsigned int v34 = *(_DWORD *)v32 + 2;
    }
    if (v34 == 1)
    {
      *(void *)unint64_t v31 = *(void *)v32;
      *(void *)(v31 + 8) = *(void *)(v32 + 8);
      *(unsigned char *)(v31 + 16) = *(unsigned char *)(v32 + 16);
      *(unsigned char *)(v31 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v31 = *(unsigned char *)v32;
      *(void *)(v31 + 8) = *(void *)(v32 + 8);
      *(unsigned char *)(v31 + 17) = 0;
    }
    swift_retain();
  }
  uint64_t v35 = (v21 + 18 + v31) & v46;
  uint64_t v36 = (v21 + 18 + v32) & v46;
  *(unsigned char *)uint64_t v35 = *(unsigned char *)v36;
  *(unsigned char *)(v35 | 1) = *(unsigned char *)(v36 | 1);
  *(unsigned char *)(v35 | 2) = *(unsigned char *)(v36 | 2);
  *(unsigned char *)(v35 | 3) = *(unsigned char *)(v36 | 3);
  uint64_t v37 = v35 | 4;
  int v38 = *(_DWORD *)(v36 | 4);
  *(unsigned char *)(v37 + 4) = *(unsigned char *)((v36 | 4) + 4);
  *(_DWORD *)uint64_t v37 = v38;
  uint64_t v39 = v20 + 9;
  uint64_t v40 = (v39 + v35) & v28;
  uint64_t v41 = (v39 + v36) & v28;
  v45(v40, v41, v18);
  *(unsigned char *)(v40 + v29) = *(unsigned char *)(v41 + v29);
  unint64_t v42 = (v40 + v29) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v43 = (v41 + v29) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v42 + 4) = *(_DWORD *)(v43 + 4);
  *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
  *(void *)((v29 + (v39 & v28) + 16 + v35) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v29 + (v39 & v28) + 16 + v36) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

unint64_t initializeWithTake for SearchModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v4 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_OWORD *)(v3 + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v3 + 8) = v4;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v8 = (v7 + 40 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  unint64_t v9 = (v7 + 40 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v7;
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = type metadata accessor for AttributedString();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 32);
  uint64_t v14 = v12 + 32;
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = v15 | 7;
  uint64_t v17 = (v15 | 7) + v10;
  uint64_t v18 = (void *)((v17 + v8) & ~(v15 | 7));
  uint64_t v19 = (void *)((v17 + v9) & ~(v15 | 7));
  *uint64_t v18 = *v19;
  uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  v13(((unint64_t)v20 + v15 + 8) & ~v15, ((unint64_t)v21 + v15 + 8) & ~v15, v11);
  uint64_t v22 = *(void *)(v14 + 32);
  uint64_t v23 = v22 + ((v15 + 16) & ~v15) + 7;
  unint64_t v24 = ((unint64_t)v18 + v23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v19 + v23) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v26 = *(unsigned __int8 *)(v25 + 17);
  if (v26 >= 2) {
    unsigned int v26 = *(_DWORD *)v25 + 2;
  }
  uint64_t v27 = ~v16;
  uint64_t v28 = ~v15;
  if (v26 == 1)
  {
    long long v29 = *(_OWORD *)v25;
    *(unsigned char *)(v24 + 16) = *(unsigned char *)(v25 + 16);
    *(_OWORD *)unint64_t v24 = v29;
    char v30 = 1;
  }
  else
  {
    char v30 = 0;
    *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
  }
  *(unsigned char *)(v24 + 17) = v30;
  uint64_t v31 = v16 + 18;
  uint64_t v32 = (v16 + 18 + v24) & v27;
  unint64_t v33 = (v31 + v25) & v27;
  *(unsigned char *)uint64_t v32 = *(unsigned char *)v33;
  *(unsigned char *)(v32 | 1) = *(unsigned char *)(v33 | 1);
  *(unsigned char *)(v32 | 2) = *(unsigned char *)(v33 | 2);
  *(unsigned char *)(v32 | 3) = *(unsigned char *)(v33 | 3);
  uint64_t v34 = v32 | 4;
  int v35 = *(_DWORD *)(v33 | 4);
  *(unsigned char *)(v34 + 4) = *(unsigned char *)((v33 | 4) + 4);
  *(_DWORD *)uint64_t v34 = v35;
  uint64_t v36 = v15 + 9;
  uint64_t v37 = (v36 + v32) & v28;
  unint64_t v38 = (v36 + v33) & v28;
  v13(v37, v38, v11);
  *(unsigned char *)(v37 + v22) = *(unsigned char *)(v38 + v22);
  unint64_t v39 = (v37 + v22) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v40 = (v38 + v22) & 0xFFFFFFFFFFFFFFFCLL;
  int v41 = *(_DWORD *)(v40 + 4);
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  *(_DWORD *)(v39 + 4) = v41;
  *(void *)((v22 + (v36 & v28) + 16 + v32) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v22 + (v36 & v28) + 16 + v33) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unint64_t assignWithTake for SearchModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  char v6 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v8 = *(void *)(v4 + 16);
  char v9 = *(unsigned char *)(v4 + 24);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(v5 + 8);
  *(unsigned char *)(v4 + 24) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(v4 + 32) = *(void *)(v5 + 32);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 40 + v4) & ~v12;
  uint64_t v14 = (v12 + 40 + v5) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 24);
  uint64_t v16 = type metadata accessor for AttributedString();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v19 = v18 | 7;
  uint64_t v20 = (v18 | 7) + v15;
  uint64_t v21 = v20 + v13;
  uint64_t v22 = ~(v18 | 7);
  uint64_t v23 = v21 & v22;
  unint64_t v24 = (void *)((v20 + v14) & v22);
  unint64_t v25 = (void *)(v21 & v22);
  *unint64_t v25 = *v24;
  swift_release();
  unsigned int v26 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v26 = *v27;
  swift_release();
  unint64_t v28 = (unint64_t)v26 + v18 + 8;
  uint64_t v29 = ~v18;
  unint64_t v48 = *(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 40);
  v48(v28 & ~v18, ((unint64_t)v27 + v18 + 8) & ~v18, v16);
  uint64_t v30 = *(void *)(v17 + 64);
  uint64_t v31 = v30 + ((v18 + 16) & ~v18) + 7;
  unint64_t v32 = (v31 + v23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = ((unint64_t)v24 + v31) & 0xFFFFFFFFFFFFFFF8;
  if (v32 != v33)
  {
    unsigned int v34 = *(unsigned __int8 *)(v32 + 17);
    if (v34 >= 2) {
      unsigned int v34 = *(_DWORD *)v32 + 2;
    }
    if (v34 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v35 = *(unsigned __int8 *)(v33 + 17);
    if (v35 >= 2) {
      unsigned int v35 = *(_DWORD *)v33 + 2;
    }
    if (v35 == 1)
    {
      long long v36 = *(_OWORD *)v33;
      *(unsigned char *)(v32 + 16) = *(unsigned char *)(v33 + 16);
      *(_OWORD *)unint64_t v32 = v36;
      char v37 = 1;
    }
    else
    {
      char v37 = 0;
      *(_OWORD *)unint64_t v32 = *(_OWORD *)v33;
    }
    *(unsigned char *)(v32 + 17) = v37;
  }
  uint64_t v38 = (v19 + 18 + v32) & v22;
  uint64_t v39 = (v19 + 18 + v33) & v22;
  *(unsigned char *)uint64_t v38 = *(unsigned char *)v39;
  *(unsigned char *)(v38 | 1) = *(unsigned char *)(v39 | 1);
  *(unsigned char *)(v38 | 2) = *(unsigned char *)(v39 | 2);
  *(unsigned char *)(v38 | 3) = *(unsigned char *)(v39 | 3);
  uint64_t v40 = v38 | 4;
  int v41 = *(_DWORD *)(v39 | 4);
  *(unsigned char *)(v40 + 4) = *(unsigned char *)((v39 | 4) + 4);
  *(_DWORD *)uint64_t v40 = v41;
  uint64_t v42 = v18 + 9;
  uint64_t v43 = (v42 + v38) & v29;
  uint64_t v44 = (v42 + v39) & v29;
  v48(v43, v44, v16);
  *(unsigned char *)(v43 + v30) = *(unsigned char *)(v44 + v30);
  unint64_t v45 = (v43 + v30) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v46 = (v44 + v30) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v45 + 4) = *(_DWORD *)(v46 + 4);
  *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
  *(void *)((v30 + (v42 & v29) + 16 + v38) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v30 + (v42 & v29) + 16 + v39) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchModifier(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v40 = v6;
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(type metadata accessor for AttributedString() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v8 + 64);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v8 + 84);
  }
  if (v7 <= v14) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = v7;
  }
  if (v9 <= 0xFE) {
    int v16 = 254;
  }
  else {
    int v16 = *(_DWORD *)(v8 + 84);
  }
  if (v9 <= 0x7FFFFFFE) {
    unsigned int v17 = 2147483646;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v8 + 84);
  }
  if (v15 <= v17) {
    unsigned int v15 = v17;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v18 = v12 | 7;
  uint64_t v19 = ((v12 + 16) & ~v12) + v13 + 7;
  uint64_t v20 = (v12 | 7) + 18;
  uint64_t v21 = ((v12 + 9) & ~v12) + v13;
  if (v15 < a2)
  {
    unint64_t v22 = (v21 & 0xFFFFFFFFFFFFFFF8)
        + ((v20 + ((v19 + ((v18 + v11 + ((v10 + 40) & ~v10)) & ~v18)) & 0xFFFFFFFFFFFFFFF8)) & ~v18)
        + 24;
    if ((v22 & 0xFFFFFFF8) != 0) {
      unsigned int v23 = 2;
    }
    else {
      unsigned int v23 = a2 - v15 + 1;
    }
    if (v23 >= 0x10000) {
      unsigned int v24 = 4;
    }
    else {
      unsigned int v24 = 2;
    }
    if (v23 < 0x100) {
      unsigned int v24 = 1;
    }
    if (v23 >= 2) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    switch(v25)
    {
      case 1:
        int v26 = *(unsigned __int8 *)(a1 + v22);
        if (!*(unsigned char *)(a1 + v22)) {
          break;
        }
        goto LABEL_33;
      case 2:
        int v26 = *(unsigned __int16 *)(a1 + v22);
        if (*(_WORD *)(a1 + v22)) {
          goto LABEL_33;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187F48380);
      case 4:
        int v26 = *(_DWORD *)(a1 + v22);
        if (!v26) {
          break;
        }
LABEL_33:
        int v28 = v26 - 1;
        if ((v22 & 0xFFFFFFF8) != 0)
        {
          int v28 = 0;
          int v29 = *(_DWORD *)a1;
        }
        else
        {
          int v29 = 0;
        }
        return v15 + (v29 | v28) + 1;
      default:
        break;
    }
  }
  unint64_t v30 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((v15 & 0x80000000) == 0)
  {
    unint64_t v31 = *(void *)(v30 + 32);
    if (v31 >= 0xFFFFFFFF) {
      LODWORD(v31) = -1;
    }
    return (v31 + 1);
  }
  uint64_t v32 = (v30 + v10 + 40) & ~v10;
  if (v7 == v15)
  {
    unint64_t v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
    return v33(v32, v7, v5);
  }
  uint64_t v34 = (v32 + v11 + v18) & ~v18;
  if (v14 == v15)
  {
    unint64_t v35 = v12 + ((v34 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
LABEL_46:
    long long v36 = *(uint64_t (**)(unint64_t))(v8 + 48);
    return v36(v35 & ~v12);
  }
  unint64_t v37 = (v20 + ((v19 + v34) & 0xFFFFFFFFFFFFFFF8)) & ~v18;
  if (v16 == v17)
  {
    if (v9 <= 0xFE)
    {
      unsigned int v38 = *(unsigned __int8 *)(v37 | 1);
      if (v38 >= 2) {
        return v38 - 1;
      }
      else {
        return 0;
      }
    }
    unint64_t v35 = v12 + 9 + v37;
    goto LABEL_46;
  }
  unint64_t v39 = *(void *)((v21 + v37 + 16) & 0xFFFFFFFFFFFFFFF8);
  if (v39 >= 0xFFFFFFFF) {
    LODWORD(v39) = -1;
  }
  if ((v39 + 1) >= 2) {
    return v39;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for SearchModifier(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v43 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(type metadata accessor for AttributedString() - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 64);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v10 + 84);
  }
  if (v9 <= v16) {
    unsigned int v17 = v16;
  }
  else {
    unsigned int v17 = v9;
  }
  if (v11 <= 0xFE) {
    int v18 = 254;
  }
  else {
    int v18 = *(_DWORD *)(v10 + 84);
  }
  if (v11 <= 0x7FFFFFFE) {
    unsigned int v19 = 2147483646;
  }
  else {
    unsigned int v19 = *(_DWORD *)(v10 + 84);
  }
  if (v17 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v17;
  }
  uint64_t v21 = v14 | 7;
  uint64_t v22 = ((v14 + 16) & ~v14) + v15 + 7;
  uint64_t v23 = (v14 | 7) + 18;
  uint64_t v24 = ((v14 + 9) & ~v14) + v15;
  size_t v25 = (v24 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v26 = ((v23 + ((v22 + (((v14 | 7) + v13 + ((v12 + 40) & ~v12)) & ~(v14 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v14 | 7))
      + v25;
  if (v20 >= a3)
  {
    int v29 = 0;
    int v30 = a2 - v20;
    if (a2 <= v20) {
      goto LABEL_29;
    }
LABEL_33:
    if (v26) {
      int v32 = 1;
    }
    else {
      int v32 = v30;
    }
    if (v26)
    {
      int v33 = ~v20 + a2;
      bzero((void *)a1, ((v23 + ((v22 + (((v14 | 7) + v13 + ((v12 + 40) & ~v12)) & ~(v14 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v14 | 7))+ v25);
      *(_DWORD *)a1 = v33;
    }
    switch(v29)
    {
      case 1:
        *(unsigned char *)(a1 + v26) = v32;
        break;
      case 2:
        *(_WORD *)(a1 + v26) = v32;
        break;
      case 3:
LABEL_70:
        __break(1u);
        JUMPOUT(0x187F48794);
      case 4:
        *(_DWORD *)(a1 + v26) = v32;
        break;
      default:
        return;
    }
    return;
  }
  if (v26) {
    unsigned int v27 = 2;
  }
  else {
    unsigned int v27 = a3 - v20 + 1;
  }
  if (v27 >= 0x10000) {
    int v28 = 4;
  }
  else {
    int v28 = 2;
  }
  if (v27 < 0x100) {
    int v28 = 1;
  }
  if (v27 >= 2) {
    int v29 = v28;
  }
  else {
    int v29 = 0;
  }
  int v30 = a2 - v20;
  if (a2 > v20) {
    goto LABEL_33;
  }
LABEL_29:
  uint64_t v31 = ~v21;
  switch(v29)
  {
    case 1:
      *(unsigned char *)(a1 + v26) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 2:
      *(_WORD *)(a1 + v26) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 3:
      goto LABEL_70;
    case 4:
      *(_DWORD *)(a1 + v26) = 0;
      goto LABEL_41;
    default:
LABEL_41:
      if (!a2) {
        return;
      }
LABEL_42:
      uint64_t v34 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
      if ((v20 & 0x80000000) == 0)
      {
        if ((a2 & 0x80000000) != 0)
        {
          v34[3] = 0;
          v34[4] = 0;
          v34[1] = a2 ^ 0x80000000;
          v34[2] = 0;
        }
        else
        {
          v34[4] = (a2 - 1);
        }
        return;
      }
      uint64_t v35 = ((unint64_t)v34 + v12 + 40) & ~v12;
      if (v9 == v20)
      {
        long long v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
        v36(v35, a2, v9, v7);
        return;
      }
      uint64_t v37 = (v35 + v13 + v21) & v31;
      if (v16 == v20)
      {
        unint64_t v38 = v14 + ((v37 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
LABEL_57:
        unint64_t v39 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
        v39(v38 & ~v14, a2);
        return;
      }
      unint64_t v40 = (v23 + ((v22 + v37) & 0xFFFFFFFFFFFFFFF8)) & v31;
      if (v19 >= a2)
      {
        if (v18 != v19)
        {
          uint64_t v42 = (void *)((v24 + v40 + 16) & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *uint64_t v42 = 0;
            *(_DWORD *)uint64_t v42 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *uint64_t v42 = a2;
          }
          return;
        }
        if (v11 <= 0xFE)
        {
          *(unsigned char *)(v40 | 1) = a2 + 1;
          return;
        }
        unint64_t v38 = v14 + 9 + v40;
        goto LABEL_57;
      }
      if ((v24 & 0xFFFFFFF8) != 0xFFFFFFE8)
      {
        int v41 = ~v19 + a2;
        bzero((void *)((v23 + ((v22 + v37) & 0xFFFFFFFFFFFFFFF8)) & v31), v25);
        *(_DWORD *)unint64_t v40 = v41;
      }
      break;
  }
}

uint64_t SearchModifier.init(text:isPresented:prompt:placement:control:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t (*a11)(uint64_t), uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v48 = a5;
  uint64_t v49 = a7;
  int v57 = a4;
  uint64_t v55 = a2;
  uint64_t v56 = a3;
  uint64_t v58 = a1;
  uint64_t v51 = a11;
  uint64_t v52 = a12;
  int v50 = a10;
  uint64_t v17 = type metadata accessor for SearchFieldState(0);
  uint64_t v18 = v17 - 8;
  MEMORY[0x1F4188790](v17);
  unsigned int v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = a13;
  uint64_t v54 = a14;
  uint64_t v21 = (int *)type metadata accessor for SearchModifier();
  uint64_t v22 = a9 + v21[12];
  *(void *)uint64_t v22 = 0;
  *(void *)(v22 + 8) = 0;
  *(_WORD *)(v22 + 16) = 0;
  *unsigned int v20 = 2;
  uint64_t v23 = self;
  id v24 = objc_msgSend(v23, sel_currentTraitCollection);
  id v25 = objc_msgSend(v24, sel_horizontalSizeClass);

  id v26 = objc_msgSend(v23, sel_currentTraitCollection);
  id v27 = objc_msgSend(v26, sel_userInterfaceIdiom);

  char v28 = specialized SearchSuggestionsPlacement.Role.init(sizeClass:idiom:placement:)((uint64_t)v25, (uint64_t)v27, 2u);
  v20[1] = (v28 == 2) | v28 & 1;
  *((_WORD *)v20 + 1) = 2;
  *((_DWORD *)v20 + 1) = 0;
  v20[8] = 1;
  AttributedString.init()();
  v20[*(int *)(v18 + 48)] = 0;
  int v29 = &v20[*(int *)(v18 + 52)];
  *(_DWORD *)int v29 = 0;
  v29[4] = 0;
  if (a8)
  {
    uint64_t v30 = v48;
    char v31 = v49;
    char v32 = v49 & 1;
    uint64_t v59 = 0;
    outlined copy of Text.Storage(v48, a6, v49 & 1);
    swift_bridgeObjectRetain();
    Text.assertUnstyled(_:options:)();
    outlined consume of Text.Storage(v30, a6, v32);
    swift_bridgeObjectRelease();
    uint64_t v33 = v30;
    uint64_t v34 = a6;
    char v35 = v31;
    uint64_t v36 = a8;
  }
  else
  {
    uint64_t v33 = static Text.System.search.getter();
    char v35 = v37 & 1;
    uint64_t v30 = v48;
    char v31 = v49;
  }
  *(void *)(a9 + 8) = v33;
  *(void *)(a9 + 16) = v34;
  *(unsigned char *)(a9 + 24) = v35 & 1;
  *(void *)(a9 + 32) = v36;
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0(v58, a9 + v21[11], (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  uint64_t v38 = a9 + v21[13];
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0((uint64_t)v20, v38, type metadata accessor for SearchFieldState);
  type metadata accessor for Binding<AttributedString>(0, &lazy cache variable for type metadata for State<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41580]);
  *(void *)(v38 + *(int *)(v39 + 28)) = 0;
  uint64_t v40 = outlined copy of Text?(v30, a6, v31, a8);
  uint64_t v41 = a8;
  uint64_t v42 = v30;
  uint64_t v43 = v51(v40);
  *(unsigned char *)a9 = v50;
  MEMORY[0x1F4188790](v43);
  uint64_t v44 = v54;
  uint64_t v45 = v55;
  *(&v48 - 4) = v53;
  *(&v48 - 3) = v44;
  *(&v48 - 2) = a9;
  uint64_t v46 = v56;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI7BindingVySbG_s5NeverOytTg5((void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in SearchModifier.init(text:isPresented:prompt:placement:control:), (uint64_t)(&v48 - 6), v45, v56, v57);
  outlined consume of Text?(v42, a6, v31, v41);
  outlined destroy of SearchEnvironmentWritingModifier(v58, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v20, type metadata accessor for SearchFieldState);
  return outlined consume of Binding<NavigationSplitViewColumn>?(v45, v46);
}

uint64_t SearchModifier.environmentTransform.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  SearchModifier.adjustedState.getter(a1, a2);
  uint64_t v5 = v2 + *(int *)(a1 + 44);
  uint64_t v6 = type metadata accessor for SearchFieldStateTransform(0);
  return _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0(v5, (uint64_t)a2 + *(int *)(v6 + 20), (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
}

uint64_t type metadata accessor for SearchFieldStateTransform(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SearchFieldStateTransform);
}

void type metadata accessor for SearchEnvironmentTransformModifier<SearchFieldStateTransform>()
{
  if (!lazy cache variable for type metadata for SearchEnvironmentTransformModifier<SearchFieldStateTransform>)
  {
    type metadata accessor for SearchFieldStateTransform(255);
    unint64_t v0 = type metadata accessor for SearchEnvironmentTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchEnvironmentTransformModifier<SearchFieldStateTransform>);
    }
  }
}

uint64_t closure #1 in SearchModifier.init(text:isPresented:prompt:placement:control:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *((unsigned char *)a1 + 16);
  uint64_t v5 = a2 + *(int *)(type metadata accessor for SearchModifier() + 48);
  uint64_t v7 = *(void *)v5;
  uint64_t v6 = *(void *)(v5 + 8);
  char v8 = *(unsigned char *)(v5 + 17);
  *(void *)uint64_t v5 = v2;
  *(void *)(v5 + 8) = v3;
  uint64_t v9 = *(unsigned __int8 *)(v5 + 16);
  *(unsigned char *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 17) = 1;
  swift_retain();
  swift_retain();
  return outlined consume of StateOrBinding<Bool>(v7, v6, v9, v8);
}

uint64_t protocol witness for SearchEnvironmentTransform.update(properties:) in conformance SearchFieldStateTransform(uint64_t a1, uint64_t a2)
{
  outlined destroy of SearchEnvironmentWritingModifier(a1, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>?);
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0(v2, a1, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  type metadata accessor for Binding<SearchFieldState>(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, 0, 1, v5);
  uint64_t v6 = a1 + *(int *)(type metadata accessor for SearchEnvironmentProperties(0) + 20);
  outlined destroy of SearchEnvironmentWritingModifier(v6, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>?);
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0(v2 + *(int *)(a2 + 20), v6, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  type metadata accessor for Binding<AttributedString>();
  char v8 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 0, 1, v7);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchEnvironmentWritingModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance SearchEnvironmentWritingModifier()
{
}

uint64_t implicit closure #1 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(int a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v5 = a1;
  uint64_t IsSearchFocused = type metadata accessor for SearchPrimitiveModifier.MakeIsSearchFocused();
  uint64_t WitnessTable = swift_getWitnessTable();
  _s7SwiftUI5StateVySbGMaTm_2(0, &lazy cache variable for type metadata for Attribute<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v6, IsSearchFocused, MEMORY[0x1E4FBC248], v1, MEMORY[0x1E4FBC278], v2);
  return v4;
}

uint64_t SearchPrimitiveModifier.MakeIsSearchFocused.searchField.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SearchField();
  uint64_t Value = AGGraphGetValue();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

double protocol witness for static Rule.initialValue.getter in conformance SearchPrimitiveModifier<A>.MakeForwardEnv@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_18834BB90;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t SearchPrimitiveModifier.MakeIsSearchFocused.value.getter()
{
  uint64_t v0 = type metadata accessor for SearchFieldState(0);
  uint64_t v1 = v0 - 8;
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for SearchField();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - v6;
  SearchPrimitiveModifier.MakeIsSearchFocused.searchField.getter((uint64_t)&v10 - v6);
  SearchField.state.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v8 = v3[*(int *)(v1 + 48)];
  outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v3, type metadata accessor for SearchFieldState);
  return v8;
}

uint64_t SearchPrimitiveModifier.MakeModifier.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SearchPrimitiveModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance SearchPrimitiveModifier<A>.MakeIsSearchFocused@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = SearchPrimitiveModifier.MakeIsSearchFocused.value.getter();
  *a1 = result & 1;
  return result;
}

uint64_t SearchPrimitiveModifier.MakeModifier.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v19 = a1;
  uint64_t v1 = type metadata accessor for SearchField();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v18 - v3;
  uint64_t v5 = type metadata accessor for SearchPrimitiveModifier();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unsigned int v11 = (char *)&v18 - v10;
  SearchPrimitiveModifier.MakeModifier.modifier.getter((uint64_t)&v18 - v10);
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v4, &v11[*(int *)(v5 + 36)], v1);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v11, v5);
  SearchPrimitiveModifier.MakeModifier.modifier.getter((uint64_t)v8);
  LOBYTE(v1) = *v8;
  v12(v8, v5);
  char v13 = specialized SearchPrimitiveModifier.MakeModifier.forwardEnv.getter();
  uint64_t v15 = v14;
  SearchPrimitiveModifier.SearchConfigModifier.init(searchField:placement:forwardEnv:)((uint64_t)v4, v1, v13 & 1, v14, v16, v19);
  return outlined copy of AppIntentExecutor?(v15);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SearchPrimitiveModifier<A>.MakeModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance SearchPrimitiveModifier<A>.MakeModifier(a1, (uint64_t (*)(void, void, void))type metadata accessor for SearchPrimitiveModifier.SearchConfigModifier, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance SearchPrimitiveModifier<A>.MakeModifier@<X0>(uint64_t a1@<X8>)
{
  return SearchPrimitiveModifier.MakeModifier.value.getter(a1);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SearchPrimitiveModifier<A>.MakeDefaultView@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance SearchPrimitiveModifier<A>.MakeModifier(a1, (uint64_t (*)(void, void, void))type metadata accessor for SearchPrimitiveModifier.DefaultSearchView, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SearchPrimitiveModifier<A>.MakeModifier@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void, void, void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2(0, *(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a3, 1, 1, v4);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SearchPrimitiveModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetSearchEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance ResetSearchEnvironmentModifier()
{
}

uint64_t partial apply for closure #1 in SearchModifier.init(text:isPresented:prompt:placement:control:)(uint64_t *a1)
{
  return closure #1 in SearchModifier.init(text:isPresented:prompt:placement:control:)(a1, *(void *)(v1 + 32));
}

void *initializeBufferWithCopyOfBuffer for SearchFieldStateTransform(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)v7 + v9;
    unsigned int v11 = (char *)a2 + v9;
    *uint64_t v10 = *((unsigned char *)a2 + v9);
    v10[1] = *((unsigned char *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    uint64_t v12 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v13 = v12[9];
    char v28 = &v11[v13];
    int v29 = &v10[v13];
    uint64_t v14 = type metadata accessor for AttributedString();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v29, v28, v14);
    v10[v12[10]] = v11[v12[10]];
    uint64_t v16 = v12[11];
    uint64_t v17 = &v10[v16];
    uint64_t v18 = &v11[v16];
    v17[4] = v18[4];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    uint64_t v19 = *(int *)(a3 + 20);
    unsigned int v20 = (void *)((char *)v7 + v19);
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = *(void *)((char *)a2 + v19 + 8);
    *unsigned int v20 = *(void *)((char *)a2 + v19);
    v20[1] = v22;
    type metadata accessor for Binding<AttributedString>();
    uint64_t v24 = *(int *)(v23 + 32);
    id v25 = (char *)v20 + v24;
    id v26 = &v21[v24];
    swift_retain();
    swift_retain();
    v15(v25, v26, v14);
  }
  return v7;
}

void *initializeWithCopy for SearchFieldStateTransform(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((unsigned char *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  char v28 = &v8[v11];
  uint64_t v12 = &v9[v11];
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  v14(v28, v12, v13);
  uint64_t v15 = v14;
  v8[v10[10]] = v9[v10[10]];
  uint64_t v16 = v10[11];
  uint64_t v17 = &v8[v16];
  uint64_t v18 = &v9[v16];
  v17[4] = v18[4];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = *(int *)(a3 + 20);
  unsigned int v20 = (void *)((char *)a1 + v19);
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *(void *)((char *)a2 + v19 + 8);
  *unsigned int v20 = *(void *)((char *)a2 + v19);
  v20[1] = v22;
  type metadata accessor for Binding<AttributedString>();
  uint64_t v24 = *(int *)(v23 + 32);
  id v25 = (char *)v20 + v24;
  id v26 = &v21[v24];
  swift_retain();
  swift_retain();
  v15(v25, v26, v13);
  return a1;
}

void *assignWithCopy for SearchFieldStateTransform(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *uint64_t v7 = *((unsigned char *)a2 + v6);
  v7[1] = *((unsigned char *)a2 + v6 + 1);
  _OWORD v7[2] = *((unsigned char *)a2 + v6 + 2);
  v7[3] = *((unsigned char *)a2 + v6 + 3);
  LODWORD(v6) = *(_DWORD *)((char *)a2 + v6 + 4);
  void v7[8] = v8[8];
  *((_DWORD *)v7 + 1) = v6;
  uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9[9];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  uint64_t v15 = v9[11];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  void v16[4] = v17[4];
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (char *)a1 + v18;
  unsigned int v20 = (char *)a2 + v18;
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_retain();
  swift_release();
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_retain();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v14(&v19[*(int *)(v21 + 32)], &v20[*(int *)(v21 + 32)], v13);
  return a1;
}

void *initializeWithTake for SearchFieldStateTransform(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((unsigned char *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v16 = v10[11];
  uint64_t v17 = &v8[v16];
  uint64_t v18 = &v9[v16];
  v17[4] = v18[4];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = *(int *)(a3 + 20);
  unsigned int v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)unsigned int v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  type metadata accessor for Binding<AttributedString>();
  v15(&v20[*(int *)(v23 + 32)], &v21[*(int *)(v23 + 32)], v14);
  return a1;
}

void *assignWithTake for SearchFieldStateTransform(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *uint64_t v7 = *((unsigned char *)a2 + v6);
  v7[1] = *((unsigned char *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  void v7[8] = *((unsigned char *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9[9];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40);
  v14(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  uint64_t v15 = v9[11];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  void v16[4] = v17[4];
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (char *)a1 + v18;
  unsigned int v20 = (char *)a2 + v18;
  *(void *)((char *)a1 + v18) = *(void *)v20;
  swift_release();
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v14(&v19[*(int *)(v21 + 32)], &v20[*(int *)(v21 + 32)], v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchFieldStateTransform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F49F44);
}

uint64_t sub_187F49F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    type metadata accessor for Binding<AttributedString>();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for SearchFieldStateTransform(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F4A050);
}

uint64_t sub_187F4A050(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    type metadata accessor for Binding<AttributedString>();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void type metadata completion function for SearchFieldStateTransform()
{
  type metadata accessor for Binding<SearchFieldState>(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<AttributedString>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void *initializeBufferWithCopyOfBuffer for SearchEnvironmentWritingModifier(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)v7 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *uint64_t v10 = *((unsigned char *)a2 + v9);
    v10[1] = *((unsigned char *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    uint64_t v12 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v13 = v12[9];
    int v29 = &v11[v13];
    uint64_t v30 = &v10[v13];
    uint64_t v14 = type metadata accessor for AttributedString();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v30, v29, v14);
    uint64_t v16 = v15;
    v10[v12[10]] = v11[v12[10]];
    uint64_t v17 = v12[11];
    uint64_t v18 = &v10[v17];
    uint64_t v19 = &v11[v17];
    void v18[4] = v19[4];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    uint64_t v20 = *(int *)(a3 + 20);
    uint64_t v21 = (void *)((char *)v7 + v20);
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = *(void *)((char *)a2 + v20 + 8);
    *uint64_t v21 = *(void *)((char *)a2 + v20);
    v21[1] = v23;
    type metadata accessor for Binding<AttributedString>();
    uint64_t v25 = *(int *)(v24 + 32);
    id v26 = (char *)v21 + v25;
    id v27 = &v22[v25];
    swift_retain();
    swift_retain();
    v16(v26, v27, v14);
    *((unsigned char *)v7 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  }
  return v7;
}

uint64_t destroy for SearchFieldStateTransform(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  uint64_t v6 = v5 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v12)((void *)(v7 - 8), v6, v7);
  uint64_t v8 = a1 + *(int *)(a2 + 20);
  swift_release();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  uint64_t v10 = v8 + *(int *)(v9 + 32);

  return v12(v10, v7);
}

void *assignWithCopy for SearchEnvironmentWritingModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *uint64_t v7 = *((unsigned char *)a2 + v6);
  v7[1] = *((unsigned char *)a2 + v6 + 1);
  _OWORD v7[2] = *((unsigned char *)a2 + v6 + 2);
  v7[3] = *((unsigned char *)a2 + v6 + 3);
  LODWORD(v6) = *(_DWORD *)((char *)a2 + v6 + 4);
  void v7[8] = v8[8];
  *((_DWORD *)v7 + 1) = v6;
  uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9[9];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  uint64_t v15 = v9[11];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  void v16[4] = v17[4];
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_retain();
  swift_release();
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_retain();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v14(&v19[*(int *)(v21 + 32)], &v20[*(int *)(v21 + 32)], v13);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *initializeWithTake for SearchEnvironmentWritingModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((unsigned char *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32);
  v15(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v16 = v10[11];
  uint64_t v17 = &v8[v16];
  uint64_t v18 = &v9[v16];
  v17[4] = v18[4];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  uint64_t v19 = *(int *)(a3 + 20);
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = *(void *)((char *)a2 + v19 + 8);
  *(void *)uint64_t v20 = *(void *)((char *)a2 + v19);
  *((void *)v20 + 1) = v22;
  type metadata accessor for Binding<AttributedString>();
  v15(&v20[*(int *)(v23 + 32)], &v21[*(int *)(v23 + 32)], v14);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for SearchEnvironmentWritingModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *uint64_t v7 = *((unsigned char *)a2 + v6);
  v7[1] = *((unsigned char *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  void v7[8] = *((unsigned char *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9[9];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40);
  v14(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  uint64_t v15 = v9[11];
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  void v16[4] = v17[4];
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_release();
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  v14(&v19[*(int *)(v21 + 32)], &v20[*(int *)(v21 + 32)], v13);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchEnvironmentWritingModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F4A9B0);
}

uint64_t sub_187F4A9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  type metadata accessor for Binding<AttributedString>();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) <= 7u) {
    int v14 = 7;
  }
  else {
    int v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  }
  unsigned int v15 = v14 - 7;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 24)) >= 2u) {
    return v15;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SearchEnvironmentWritingModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F4AAE0);
}

void sub_187F4AAE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    type metadata accessor for Binding<AttributedString>();
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 7;
      return;
    }
    uint64_t v10 = v13;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  v11(v12, a2, a2, v10);
}

unint64_t initializeBufferWithCopyOfBuffer for SearchPrimitiveModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = (v8 + 40) & ~v8;
  uint64_t v11 = type metadata accessor for AttributedString();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = v13;
  uint64_t v15 = v13 | 7;
  uint64_t v16 = *(void *)(v12 + 64);
  uint64_t v17 = ((v14 + 16) & ~v14) + v16 + 7;
  uint64_t v18 = v15 + 18;
  uint64_t v111 = v13 + 9;
  uint64_t v113 = v16;
  uint64_t v19 = ((v14 + 9) & ~v14) + v16;
  unint64_t v20 = v13 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 24;
  uint64_t v22 = v15 | v7;
  unint64_t v23 = (v19 & 0xFFFFFFFFFFFFFFFCLL) + ((v13 + 16) & v20) + 9;
  if (v23 <= v21) {
    unint64_t v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  unint64_t v112 = v23;
  unint64_t v24 = v9
      + ((v7 + (v23 & 0xFFFFFFFFFFFFFFF8) + 26) & ~(unint64_t)v7)
      + ((((v18
          + ((v17 + (((v13 | 7) + v9 + v10) & ~(v13 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v13 | 7))
        + v21
        + v22) & ~v22)
      + 1;
  int v25 = (v13 | v7) & 0x100000;
  if ((v14 | (unint64_t)v7) > 7 || v25 != 0 || v24 > 0x18)
  {
    uint64_t v28 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    unint64_t v29 = v28 + (((v14 | v7) & 0xF8 ^ 0x1F8) & ((v14 | v7) + 16));
    swift_retain();
  }
  else
  {
    uint64_t v97 = v14 | 7 | v7;
    uint64_t v98 = (v14 | 7) + 18;
    unint64_t v99 = ((v18 + ((v17 + (((v14 | 7) + v9 + v10) & ~(v14 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v14 | 7)) + v21 + v22;
    uint64_t v100 = v19;
    unint64_t v94 = v20;
    uint64_t v95 = ~v14;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    unint64_t v105 = a1;
    unint64_t v30 = a1 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v109 = v9;
    unint64_t v101 = a2;
    unint64_t v31 = a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v32 = v6;
    uint64_t v110 = v5;
    uint64_t v33 = *(void *)(v31 + 8);
    uint64_t v34 = *(void *)(v31 + 16);
    char v35 = *(unsigned char *)(v31 + 24);
    uint64_t v108 = v11;
    uint64_t v96 = v17;
    uint64_t v36 = v12;
    uint64_t v106 = v14;
    outlined copy of Text.Storage(v33, v34, v35);
    *(void *)(v30 + 8) = v33;
    *(void *)(v30 + 16) = v34;
    *(unsigned char *)(v30 + 24) = v35;
    *(void *)(v30 + 32) = *(void *)(v31 + 32);
    uint64_t v103 = ~v8;
    uint64_t v104 = v8;
    uint64_t v37 = (v30 + v8 + 40) & ~v8;
    uint64_t v38 = (v31 + v8 + 40) & ~v8;
    uint64_t v39 = *(void (**)(unint64_t, unint64_t, uint64_t))(v32 + 16);
    swift_bridgeObjectRetain();
    uint64_t v102 = v39;
    v39(v37, v38, v110);
    uint64_t v40 = (void *)((v37 + v109 + v15) & ~v15);
    uint64_t v41 = ~v15;
    uint64_t v42 = (void *)((v38 + v109 + v15) & ~v15);
    *uint64_t v40 = *v42;
    uint64_t v43 = (void *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v44 = (void *)(((unint64_t)v42 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v43 = *v44;
    uint64_t v45 = ((unint64_t)v43 + v106 + 8) & v95;
    uint64_t v93 = v106 + 8;
    uint64_t v46 = ((unint64_t)v44 + v106 + 8) & v95;
    unint64_t v47 = *(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 16);
    swift_retain();
    swift_retain();
    uint64_t v107 = v47;
    v47(v45, v46, v108);
    unint64_t v48 = ((unint64_t)v40 + v96) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = ((unint64_t)v42 + v96) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v50 = *(unsigned __int8 *)(v49 + 17);
    if (v50 >= 2) {
      unsigned int v50 = *(_DWORD *)v49 + 2;
    }
    uint64_t v51 = ~v97;
    if (v50 == 1)
    {
      *(void *)unint64_t v48 = *(void *)v49;
      *(void *)(v48 + 8) = *(void *)(v49 + 8);
      *(unsigned char *)(v48 + 16) = *(unsigned char *)(v49 + 16);
      swift_retain();
      char v52 = 1;
    }
    else
    {
      char v52 = 0;
      *(unsigned char *)unint64_t v48 = *(unsigned char *)v49;
      *(void *)(v48 + 8) = *(void *)(v49 + 8);
    }
    unint64_t v29 = v105;
    swift_retain();
    *(unsigned char *)(v48 + 17) = v52;
    unint64_t v53 = (v98 + v48) & v41;
    unint64_t v54 = (v98 + v49) & v41;
    *(unsigned char *)unint64_t v53 = *(unsigned char *)v54;
    *(unsigned char *)(v53 | 1) = *(unsigned char *)(v54 | 1);
    *(unsigned char *)(v53 | 2) = *(unsigned char *)(v54 | 2);
    *(unsigned char *)(v53 | 3) = *(unsigned char *)(v54 | 3);
    uint64_t v55 = v53 | 4;
    int v56 = *(_DWORD *)(v54 | 4);
    *(unsigned char *)(v55 + 4) = *(unsigned char *)((v54 | 4) + 4);
    *(_DWORD *)uint64_t v55 = v56;
    unint64_t v57 = (v111 + v53) & v95;
    unint64_t v58 = (v111 + v54) & v95;
    v107(v57, v58, v108);
    *(unsigned char *)(v57 + v113) = *(unsigned char *)(v58 + v113);
    unint64_t v59 = (v57 + v113) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v60 = (v58 + v113) & 0xFFFFFFFFFFFFFFFCLL;
    int v61 = *(_DWORD *)(v60 + 4);
    *(unsigned char *)(v59 + 8) = *(unsigned char *)(v60 + 8);
    *(_DWORD *)(v59 + 4) = v61;
    *(void *)((v100 + 16 + v53) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v100 + 16 + v54) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v62 = (v99 + v105) & v51;
    unint64_t v63 = (v99 + v101) & v51;
    unint64_t v64 = v112;
    unsigned int v65 = *(unsigned __int8 *)(v63 + v112);
    swift_retain();
    if (v65 >= 2)
    {
      if (v112 <= 3) {
        uint64_t v66 = v112;
      }
      else {
        uint64_t v66 = 4;
      }
      switch(v66)
      {
        case 1:
          int v67 = *(unsigned __int8 *)v63;
          if (v112 >= 4) {
            goto LABEL_31;
          }
          goto LABEL_27;
        case 2:
          int v67 = *(unsigned __int16 *)v63;
          if (v112 >= 4) {
            goto LABEL_31;
          }
          goto LABEL_27;
        case 3:
          int v67 = *(unsigned __int16 *)v63 | (*(unsigned __int8 *)(v63 + 2) << 16);
          if (v112 < 4) {
            goto LABEL_27;
          }
          goto LABEL_31;
        case 4:
          int v67 = *(_DWORD *)v63;
          if (v112 < 4)
          {
LABEL_27:
            unsigned int v65 = (v67 | ((v65 - 2) << (8 * v112))) + 2;
            break;
          }
LABEL_31:
          if (v67 != -1) {
            goto LABEL_32;
          }
          goto LABEL_29;
        default:
          break;
      }
    }
    if (v65 == 1)
    {
LABEL_29:
      *(void *)unint64_t v62 = *(void *)v63;
      uint64_t v68 = (void *)((v62 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v69 = (void *)((v63 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v68 = *v69;
      unint64_t v70 = ((unint64_t)v68 + v93) & v94;
      unint64_t v71 = ((unint64_t)v69 + v93) & v94;
      unint64_t v72 = v71 + 7;
      *(unsigned char *)unint64_t v70 = *(unsigned char *)v71;
      *(unsigned char *)(v70 | 1) = *(unsigned char *)(v71 | 1);
      *(unsigned char *)(v70 | 2) = *(unsigned char *)(v71 | 2);
      *(unsigned char *)(v70 | 3) = *(unsigned char *)(v71 | 3);
      unint64_t v73 = (v70 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v74 = *(_DWORD *)(v72 & 0xFFFFFFFFFFFFFFFCLL);
      *(unsigned char *)(v73 + 4) = *(unsigned char *)((v72 & 0xFFFFFFFFFFFFFFFCLL) + 4);
      *(_DWORD *)unint64_t v73 = v74;
      uint64_t v75 = (v106 + 5 + v73) & v95;
      unint64_t v76 = (v106 + 5 + (v72 & 0xFFFFFFFFFFFFFFFCLL)) & v95;
      swift_retain();
      swift_retain();
      v107(v75, v76, v108);
      uint64_t v77 = v76 + v113;
      unint64_t v64 = v112;
      *(unsigned char *)(v75 + v113) = *(unsigned char *)v77;
      unint64_t v78 = (v75 + v113) & 0xFFFFFFFFFFFFFFFCLL;
      v77 &= 0xFFFFFFFFFFFFFFFCLL;
      int v79 = *(_DWORD *)(v77 + 4);
      *(unsigned char *)(v78 + 8) = *(unsigned char *)(v77 + 8);
      *(_DWORD *)(v78 + 4) = v79;
      char v80 = 1;
    }
    else
    {
LABEL_32:
      *(unsigned char *)unint64_t v62 = *(unsigned char *)v63;
      *(unsigned char *)(v62 | 1) = *(unsigned char *)(v63 | 1);
      *(unsigned char *)(v62 | 2) = *(unsigned char *)(v63 | 2);
      *(unsigned char *)(v62 | 3) = *(unsigned char *)(v63 | 3);
      uint64_t v81 = v62 | 4;
      int v82 = *(_DWORD *)(v63 | 4);
      *(unsigned char *)(v81 + 4) = *(unsigned char *)((v63 | 4) + 4);
      *(_DWORD *)uint64_t v81 = v82;
      unint64_t v83 = (v111 + v62) & v95;
      unint64_t v84 = (v111 + v63) & v95;
      v107(v83, v84, v108);
      *(unsigned char *)(v83 + v113) = *(unsigned char *)(v84 + v113);
      unint64_t v85 = (v83 + v113) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v86 = (v84 + v113) & 0xFFFFFFFFFFFFFFFCLL;
      int v87 = *(_DWORD *)(v86 + 4);
      *(unsigned char *)(v85 + 8) = *(unsigned char *)(v86 + 8);
      *(_DWORD *)(v85 + 4) = v87;
      *(void *)((v100 + 16 + v62) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v100 + 16 + v63) & 0xFFFFFFFFFFFFFFF8);
      swift_retain();
      char v80 = 0;
    }
    *(unsigned char *)(v62 + v64) = v80;
    unint64_t v88 = (v64 + 8 + v62) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v89 = (v64 + 8 + v63) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v90 = *(unsigned __int8 *)(v89 + 17);
    if (v90 >= 2) {
      unsigned int v90 = *(_DWORD *)v89 + 2;
    }
    if (v90 == 1)
    {
      *(void *)unint64_t v88 = *(void *)v89;
      *(void *)(v88 + 8) = *(void *)(v89 + 8);
      *(unsigned char *)(v88 + 16) = *(unsigned char *)(v89 + 16);
      swift_retain();
      char v91 = 1;
    }
    else
    {
      char v91 = 0;
      *(unsigned char *)unint64_t v88 = *(unsigned char *)v89;
      *(void *)(v88 + 8) = *(void *)(v89 + 8);
    }
    swift_retain();
    *(unsigned char *)(v88 + 17) = v91;
    v102((v104 + 18 + v88) & v103, (v104 + 18 + v89) & v103, v110);
    *(unsigned char *)(((v104 + 18 + v88) & v103) + v109) = *(unsigned char *)(((v104 + 18 + v89) & v103) + v109);
  }
  return v29;
}

unint64_t assignWithCopy for SearchPrimitiveModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  char v8 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  outlined copy of Text.Storage(v6, v7, v8);
  uint64_t v9 = *(void *)(v4 + 8);
  uint64_t v10 = *(void *)(v4 + 16);
  char v11 = *(unsigned char *)(v4 + 24);
  *(void *)(v4 + 8) = v6;
  *(void *)(v4 + 16) = v7;
  *(unsigned char *)(v4 + 24) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(void *)(v4 + 32) = *(void *)(v5 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v96 = ~v15;
  uint64_t v16 = (v15 + 40 + v4) & ~v15;
  uint64_t v86 = v15 + 40;
  uint64_t v88 = v15;
  uint64_t v17 = (v15 + 40 + v5) & ~v15;
  unint64_t v89 = *(void (**)(uint64_t, uint64_t))(v13 + 24);
  uint64_t v90 = v12;
  v89(v16, v17);
  uint64_t v18 = *(void *)(v14 + 40);
  uint64_t v19 = type metadata accessor for AttributedString();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v95 = v18;
  uint64_t v22 = (v21 | 7) + v18;
  uint64_t v85 = ~(v21 | 7);
  unint64_t v23 = (void *)((v22 + v16) & v85);
  uint64_t v94 = v21 | 7;
  unint64_t v24 = (void *)((v22 + v17) & v85);
  *unint64_t v23 = *v24;
  swift_retain();
  swift_release();
  int v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  *int v25 = *v26;
  swift_retain();
  swift_release();
  uint64_t v97 = ~v21;
  uint64_t v80 = v21 + 8;
  uint64_t v98 = v19;
  uint64_t v81 = *(void (**)(unint64_t, unint64_t, uint64_t))(v20 + 24);
  v81(((unint64_t)v25 + v21 + 8) & ~v21, ((unint64_t)v26 + v21 + 8) & ~v21, v19);
  uint64_t v93 = v21;
  uint64_t v92 = *(void *)(v20 + 64);
  uint64_t v84 = v92 + ((v21 + 16) & ~v21);
  unint64_t v27 = ((unint64_t)v23 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = ((unint64_t)v24 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v27 != v28)
  {
    unsigned int v29 = *(unsigned __int8 *)(v27 + 17);
    if (v29 >= 2) {
      unsigned int v29 = *(_DWORD *)v27 + 2;
    }
    if (v29 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v30 = *(unsigned __int8 *)(v28 + 17);
    if (v30 >= 2) {
      unsigned int v30 = *(_DWORD *)v28 + 2;
    }
    if (v30 == 1)
    {
      *(void *)unint64_t v27 = *(void *)v28;
      *(void *)(v27 + 8) = *(void *)(v28 + 8);
      *(unsigned char *)(v27 + 16) = *(unsigned char *)(v28 + 16);
      *(unsigned char *)(v27 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v27 = *(unsigned char *)v28;
      *(void *)(v27 + 8) = *(void *)(v28 + 8);
      *(unsigned char *)(v27 + 17) = 0;
    }
    swift_retain();
  }
  uint64_t v31 = (v94 + 18 + v27) & v85;
  uint64_t v32 = (v94 + 18 + v28) & v85;
  *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
  *(unsigned char *)(v31 | 1) = *(unsigned char *)(v32 | 1);
  *(unsigned char *)(v31 | 2) = *(unsigned char *)(v32 | 2);
  *(unsigned char *)(v31 | 3) = *(unsigned char *)(v32 | 3);
  uint64_t v33 = v31 | 4;
  int v34 = *(_DWORD *)(v32 | 4);
  *(unsigned char *)(v33 + 4) = *(unsigned char *)((v32 | 4) + 4);
  *(_DWORD *)uint64_t v33 = v34;
  uint64_t v35 = v21 + 9;
  uint64_t v36 = (v21 + 9 + v31) & v97;
  uint64_t v37 = (v21 + 9 + v32) & v97;
  v81(v36, v37, v19);
  *(unsigned char *)(v36 + v92) = *(unsigned char *)(v37 + v92);
  unint64_t v38 = (v36 + v92) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v39 = (v37 + v92) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v38 + 4) = *(_DWORD *)(v39 + 4);
  *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
  uint64_t v40 = v92 + ((v21 + 9) & v97);
  unint64_t v82 = v21 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v41 = (v40 & 0xFFFFFFFFFFFFFFFCLL) + ((v21 + 16) & v82);
  uint64_t v83 = v40 + 16;
  *(void *)((v40 + 16 + v31) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v40 + 16 + v32) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  unint64_t v42 = (v40 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v43 = ((v94 + 18 + (((((v86 & v96) + v95 + v94) & v85 | 7) + v84) & 0xFFFFFFFFFFFFFFF8)) & v85) + v42 + (v94 | v88);
  unint64_t v44 = (v43 + a1) & ~(v94 | v88);
  unint64_t v45 = (v43 + a2) & ~(v94 | v88);
  if (v41 + 9 <= v42) {
    unint64_t v46 = v42;
  }
  else {
    unint64_t v46 = v41 + 9;
  }
  if (v44 != v45)
  {
    unsigned int v47 = *(unsigned __int8 *)(v44 + v46);
    unsigned int v48 = v47 - 2;
    if (v47 >= 2)
    {
      if (v46 <= 3) {
        uint64_t v49 = v46;
      }
      else {
        uint64_t v49 = 4;
      }
      switch(v49)
      {
        case 1:
          int v50 = *(unsigned __int8 *)v44;
          if (v46 >= 4) {
            goto LABEL_30;
          }
          goto LABEL_26;
        case 2:
          int v50 = *(unsigned __int16 *)v44;
          if (v46 >= 4) {
            goto LABEL_30;
          }
          goto LABEL_26;
        case 3:
          int v50 = *(unsigned __int16 *)v44 | (*(unsigned __int8 *)(v44 + 2) << 16);
          if (v46 < 4) {
            goto LABEL_26;
          }
          goto LABEL_30;
        case 4:
          int v50 = *(_DWORD *)v44;
          if (v46 < 4)
          {
LABEL_26:
            unsigned int v47 = (v50 | (v48 << (8 * v46))) + 2;
            break;
          }
LABEL_30:
          if (v50 != -1) {
            goto LABEL_31;
          }
          goto LABEL_28;
        default:
          break;
      }
    }
    if (v47 == 1)
    {
LABEL_28:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v20 + 8))((v93 + ((((v80 + ((v44 + 15) & 0xFFFFFFFFFFFFFFF8)) & v82) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v97, v98);
    }
    else
    {
LABEL_31:
      (*(void (**)(unint64_t, uint64_t))(v20 + 8))((v35 + v44) & v97, v98);
      swift_release();
    }
    unsigned int v51 = *(unsigned __int8 *)(v45 + v46);
    unsigned int v52 = v51 - 2;
    if (v51 >= 2)
    {
      if (v46 <= 3) {
        uint64_t v53 = v46;
      }
      else {
        uint64_t v53 = 4;
      }
      switch(v53)
      {
        case 1:
          int v54 = *(unsigned __int8 *)v45;
          if (v46 >= 4) {
            goto LABEL_46;
          }
          goto LABEL_42;
        case 2:
          int v54 = *(unsigned __int16 *)v45;
          if (v46 >= 4) {
            goto LABEL_46;
          }
          goto LABEL_42;
        case 3:
          int v54 = *(unsigned __int16 *)v45 | (*(unsigned __int8 *)(v45 + 2) << 16);
          if (v46 < 4) {
            goto LABEL_42;
          }
          goto LABEL_46;
        case 4:
          int v54 = *(_DWORD *)v45;
          if (v46 < 4)
          {
LABEL_42:
            unsigned int v51 = (v54 | (v52 << (8 * v46))) + 2;
            break;
          }
LABEL_46:
          if (v54 != -1) {
            goto LABEL_47;
          }
          goto LABEL_44;
        default:
          break;
      }
    }
    if (v51 == 1)
    {
LABEL_44:
      *(void *)unint64_t v44 = *(void *)v45;
      uint64_t v55 = (void *)((v44 + 15) & 0xFFFFFFFFFFFFFFF8);
      int v56 = (void *)((v45 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v55 = *v56;
      unint64_t v57 = ((unint64_t)v55 + v80) & v82;
      unint64_t v58 = ((unint64_t)v56 + v80) & v82;
      *(unsigned char *)unint64_t v57 = *(unsigned char *)v58;
      *(unsigned char *)(v57 | 1) = *(unsigned char *)(v58 | 1);
      *(unsigned char *)(v57 | 2) = *(unsigned char *)(v58 | 2);
      *(unsigned char *)(v57 | 3) = *(unsigned char *)(v58 | 3);
      unint64_t v59 = (v57 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v60 = (v58 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v61 = *(_DWORD *)v60;
      *(unsigned char *)(v59 + 4) = *(unsigned char *)(v60 + 4);
      *(_DWORD *)unint64_t v59 = v61;
      uint64_t v62 = (v93 + 5 + v59) & v97;
      uint64_t v63 = (v93 + 5 + v60) & v97;
      unint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
      swift_retain();
      swift_retain();
      v64(v62, v63, v98);
      *(unsigned char *)(v62 + v92) = *(unsigned char *)(v63 + v92);
      unint64_t v65 = (v62 + v92) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v66 = (v63 + v92) & 0xFFFFFFFFFFFFFFFCLL;
      int v67 = *(_DWORD *)(v66 + 4);
      *(unsigned char *)(v65 + 8) = *(unsigned char *)(v66 + 8);
      *(_DWORD *)(v65 + 4) = v67;
      *(unsigned char *)(v44 + v46) = 1;
    }
    else
    {
LABEL_47:
      *(unsigned char *)unint64_t v44 = *(unsigned char *)v45;
      *(unsigned char *)(v44 | 1) = *(unsigned char *)(v45 | 1);
      *(unsigned char *)(v44 | 2) = *(unsigned char *)(v45 | 2);
      *(unsigned char *)(v44 | 3) = *(unsigned char *)(v45 | 3);
      uint64_t v68 = v44 | 4;
      int v69 = *(_DWORD *)(v45 | 4);
      *(unsigned char *)(v68 + 4) = *(unsigned char *)((v45 | 4) + 4);
      *(_DWORD *)uint64_t v68 = v69;
      unint64_t v70 = (v35 + v44) & v97;
      unint64_t v71 = (v35 + v45) & v97;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v20 + 16))(v70, v71, v98);
      *(unsigned char *)(v70 + v92) = *(unsigned char *)(v71 + v92);
      unint64_t v72 = (v70 + v92) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v73 = (v71 + v92) & 0xFFFFFFFFFFFFFFFCLL;
      int v74 = *(_DWORD *)(v73 + 4);
      *(unsigned char *)(v72 + 8) = *(unsigned char *)(v73 + 8);
      *(_DWORD *)(v72 + 4) = v74;
      *(void *)((v83 + v44) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v83 + v45) & 0xFFFFFFFFFFFFFFF8);
      *(unsigned char *)(v44 + v46) = 0;
      swift_retain();
    }
  }
  unint64_t v75 = (v46 + 8 + v44) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v76 = (v46 + 8 + v45) & 0xFFFFFFFFFFFFFFF8;
  if (v75 != v76)
  {
    unsigned int v77 = *(unsigned __int8 *)(v75 + 17);
    if (v77 >= 2) {
      unsigned int v77 = *(_DWORD *)v75 + 2;
    }
    if (v77 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v78 = *(unsigned __int8 *)(v76 + 17);
    if (v78 >= 2) {
      unsigned int v78 = *(_DWORD *)v76 + 2;
    }
    if (v78 == 1)
    {
      *(void *)unint64_t v75 = *(void *)v76;
      *(void *)(v75 + 8) = *(void *)(v76 + 8);
      *(unsigned char *)(v75 + 16) = *(unsigned char *)(v76 + 16);
      *(unsigned char *)(v75 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v75 = *(unsigned char *)v76;
      *(void *)(v75 + 8) = *(void *)(v76 + 8);
      *(unsigned char *)(v75 + 17) = 0;
    }
    swift_retain();
  }
  ((void (*)(unint64_t, unint64_t, uint64_t))v89)((v88 + 18 + v75) & v96, (v88 + 18 + v76) & v96, v90);
  *(unsigned char *)(((v88 + 18 + v75) & v96) + v95) = *(unsigned char *)(((v88 + 18 + v76) & v96) + v95);
  return a1;
}

unint64_t initializeWithTake for SearchPrimitiveModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v5 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 8) = v5;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v10 = (v9 + 40 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  uint64_t v85 = v9 + 40;
  unint64_t v11 = (v9 + 40 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  uint64_t v88 = *(void (**)(unint64_t, unint64_t))(v7 + 32);
  uint64_t v89 = v6;
  v88(v10, v11);
  uint64_t v12 = *(void *)(v8 + 32);
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32);
  uint64_t v16 = v14 + 32;
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = v17 | 7;
  uint64_t v95 = v12;
  uint64_t v19 = (v17 | 7) + v12;
  uint64_t v20 = (void *)((v19 + v10) & ~(v17 | 7));
  uint64_t v21 = (void *)((v19 + v11) & ~(v17 | 7));
  *uint64_t v20 = *v21;
  uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v22 = *v23;
  uint64_t v83 = v17 + 8;
  uint64_t v92 = v15;
  uint64_t v93 = v13;
  ((void (*)(unint64_t, unint64_t))v15)(((unint64_t)v22 + v17 + 8) & ~v17, ((unint64_t)v23 + v17 + 8) & ~v17);
  uint64_t v91 = *(void *)(v16 + 32);
  uint64_t v84 = v91 + ((v17 + 16) & ~v17);
  unint64_t v24 = ((unint64_t)v20 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v21 + v84 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v26 = *(unsigned __int8 *)(v25 + 17);
  if (v26 >= 2) {
    unsigned int v26 = *(_DWORD *)v25 + 2;
  }
  uint64_t v94 = ~v9;
  uint64_t v27 = ~v18;
  uint64_t v28 = ~v17;
  unint64_t v90 = a1;
  uint64_t v87 = v9;
  if (v26 == 1)
  {
    long long v29 = *(_OWORD *)v25;
    *(unsigned char *)(v24 + 16) = *(unsigned char *)(v25 + 16);
    *(_OWORD *)unint64_t v24 = v29;
    char v30 = 1;
  }
  else
  {
    char v30 = 0;
    *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
  }
  *(unsigned char *)(v24 + 17) = v30;
  uint64_t v31 = (v18 + 18 + v24) & v27;
  uint64_t v32 = (v18 + 18 + v25) & v27;
  *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
  *(unsigned char *)(v31 | 1) = *(unsigned char *)(v32 | 1);
  *(unsigned char *)(v31 | 2) = *(unsigned char *)(v32 | 2);
  *(unsigned char *)(v31 | 3) = *(unsigned char *)(v32 | 3);
  uint64_t v33 = v31 | 4;
  int v34 = *(_DWORD *)(v32 | 4);
  *(unsigned char *)(v33 + 4) = *(unsigned char *)((v32 | 4) + 4);
  *(_DWORD *)uint64_t v33 = v34;
  uint64_t v35 = v17 + 9;
  uint64_t v36 = (v17 + 9 + v32) & v28;
  v92((v17 + 9 + v31) & v28, v36, v93);
  uint64_t v37 = ~v17;
  uint64_t v38 = ((v17 + 9 + v31) & v28) + v91;
  *(unsigned char *)uint64_t v38 = *(unsigned char *)(v36 + v91);
  v38 &= 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v39 = (v36 + v91) & 0xFFFFFFFFFFFFFFFCLL;
  int v40 = *(_DWORD *)(v39 + 4);
  *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
  *(_DWORD *)(v38 + 4) = v40;
  uint64_t v41 = v91 + ((v17 + 9) & v28);
  unint64_t v42 = v17 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v43 = (v41 & 0xFFFFFFFFFFFFFFFCLL) + ((v17 + 16) & v42);
  uint64_t v44 = v41 + 16;
  *(void *)((v41 + 16 + v31) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v41 + 16 + v32) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v45 = (v41 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v46 = ((v18 + 18 + (((((v85 & v94) + v95 + v18) & v27 | 7) + v84) & 0xFFFFFFFFFFFFFFF8)) & v27) + v45 + (v18 | v87);
  unint64_t v47 = (v46 + a1) & ~(v18 | v87);
  unint64_t v48 = (v46 + a2) & ~(v18 | v87);
  unint64_t v49 = v43 + 9;
  if (v49 <= v45) {
    unint64_t v50 = v45;
  }
  else {
    unint64_t v50 = v49;
  }
  unsigned int v51 = *(unsigned __int8 *)(v48 + v50);
  unsigned int v52 = v51 - 2;
  if (v51 >= 2)
  {
    if (v50 <= 3) {
      uint64_t v53 = v50;
    }
    else {
      uint64_t v53 = 4;
    }
    switch(v53)
    {
      case 1:
        int v54 = *(unsigned __int8 *)v48;
        goto LABEL_18;
      case 2:
        int v54 = *(unsigned __int16 *)v48;
        goto LABEL_18;
      case 3:
        int v54 = *(unsigned __int16 *)v48 | (*(unsigned __int8 *)(v48 + 2) << 16);
        goto LABEL_18;
      case 4:
        int v54 = *(_DWORD *)v48;
LABEL_18:
        int v55 = (v54 | (v52 << (8 * v50))) + 2;
        unsigned int v51 = v54 + 2;
        if (v50 < 4) {
          unsigned int v51 = v55;
        }
        break;
      default:
        break;
    }
  }
  if (v51 == 1)
  {
    *(void *)unint64_t v47 = *(void *)v48;
    int v56 = (void *)((v47 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v57 = (void *)((v48 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v56 = *v57;
    unint64_t v58 = ((unint64_t)v56 + v83) & v42;
    unint64_t v59 = ((unint64_t)v57 + v83) & v42;
    unint64_t v60 = v59 + 7;
    *(unsigned char *)unint64_t v58 = *(unsigned char *)v59;
    *(unsigned char *)(v58 | 1) = *(unsigned char *)(v59 | 1);
    *(unsigned char *)(v58 | 2) = *(unsigned char *)(v59 | 2);
    *(unsigned char *)(v58 | 3) = *(unsigned char *)(v59 | 3);
    unint64_t v61 = (v58 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v58) = *(_DWORD *)(v60 & 0xFFFFFFFFFFFFFFFCLL);
    *(unsigned char *)(v61 + 4) = *(unsigned char *)((v60 & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *(_DWORD *)unint64_t v61 = v58;
    uint64_t v62 = (v17 + 5 + v61) & v37;
    unint64_t v63 = (v17 + 5 + (v60 & 0xFFFFFFFFFFFFFFFCLL)) & v37;
    v92(v62, v63, v93);
    *(unsigned char *)(v62 + v91) = *(unsigned char *)(v63 + v91);
    unint64_t v64 = (v62 + v91) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v65 = (v63 + v91) & 0xFFFFFFFFFFFFFFFCLL;
    int v66 = *(_DWORD *)(v65 + 4);
    *(unsigned char *)(v64 + 8) = *(unsigned char *)(v65 + 8);
    *(_DWORD *)(v64 + 4) = v66;
    char v67 = 1;
  }
  else
  {
    *(unsigned char *)unint64_t v47 = *(unsigned char *)v48;
    *(unsigned char *)(v47 | 1) = *(unsigned char *)(v48 | 1);
    *(unsigned char *)(v47 | 2) = *(unsigned char *)(v48 | 2);
    *(unsigned char *)(v47 | 3) = *(unsigned char *)(v48 | 3);
    uint64_t v68 = v47 | 4;
    int v69 = *(_DWORD *)(v48 | 4);
    *(unsigned char *)(v68 + 4) = *(unsigned char *)((v48 | 4) + 4);
    *(_DWORD *)uint64_t v68 = v69;
    unint64_t v70 = (v35 + v47) & v37;
    unint64_t v71 = (v35 + v48) & v37;
    v92(v70, v71, v93);
    char v67 = 0;
    *(unsigned char *)(v70 + v91) = *(unsigned char *)(v71 + v91);
    unint64_t v72 = (v70 + v91) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v73 = (v71 + v91) & 0xFFFFFFFFFFFFFFFCLL;
    int v74 = *(_DWORD *)(v73 + 4);
    *(unsigned char *)(v72 + 8) = *(unsigned char *)(v73 + 8);
    *(_DWORD *)(v72 + 4) = v74;
    *(void *)((v44 + v47) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v44 + v48) & 0xFFFFFFFFFFFFFFF8);
  }
  *(unsigned char *)(v47 + v50) = v67;
  unint64_t v75 = (v50 + 8 + v47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v76 = (v50 + 8 + v48) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v77 = *(unsigned __int8 *)(v76 + 17);
  if (v77 >= 2) {
    unsigned int v77 = *(_DWORD *)v76 + 2;
  }
  if (v77 == 1)
  {
    long long v78 = *(_OWORD *)v76;
    *(unsigned char *)(v75 + 16) = *(unsigned char *)(v76 + 16);
    *(_OWORD *)unint64_t v75 = v78;
    char v79 = 1;
  }
  else
  {
    char v79 = 0;
    *(_OWORD *)unint64_t v75 = *(_OWORD *)v76;
  }
  *(unsigned char *)(v75 + 17) = v79;
  uint64_t v80 = (v87 + 18 + v75) & v94;
  uint64_t v81 = (v87 + 18 + v76) & v94;
  ((void (*)(uint64_t, uint64_t, uint64_t))v88)(v80, v81, v89);
  *(unsigned char *)(v80 + v95) = *(unsigned char *)(v81 + v95);
  return v90;
}

unint64_t assignWithTake for SearchPrimitiveModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  char v6 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v8 = *(void *)(v4 + 16);
  char v9 = *(unsigned char *)(v4 + 24);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(v5 + 8);
  *(unsigned char *)(v4 + 24) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(v4 + 32) = *(void *)(v5 + 32);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v98 = ~v13;
  uint64_t v99 = v13;
  uint64_t v14 = (v13 + 40 + v4) & ~v13;
  uint64_t v95 = v13 + 40;
  uint64_t v15 = (v13 + 40 + v5) & ~v13;
  uint64_t v100 = *(void (**)(uint64_t, uint64_t))(v11 + 40);
  uint64_t v101 = v10;
  v100(v14, v15);
  uint64_t v16 = *(void *)(v12 + 24);
  uint64_t v17 = type metadata accessor for AttributedString();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = v19 | 7;
  uint64_t v104 = v16;
  uint64_t v21 = (v19 | 7) + v16;
  uint64_t v94 = ~(v19 | 7);
  uint64_t v22 = (void *)((v21 + v14) & v94);
  unint64_t v23 = (void *)((v21 + v15) & v94);
  *uint64_t v22 = *v23;
  swift_release();
  unint64_t v24 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v24 = *v25;
  swift_release();
  uint64_t v105 = ~v19;
  uint64_t v88 = v19 + 8;
  uint64_t v106 = v17;
  unint64_t v90 = *(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 40);
  v90(((unint64_t)v24 + v19 + 8) & ~v19, ((unint64_t)v25 + v19 + 8) & ~v19, v17);
  uint64_t v92 = v19 + 16;
  uint64_t v103 = *(void *)(v18 + 64);
  uint64_t v93 = v103 + ((v19 + 16) & ~v19);
  unint64_t v26 = ((unint64_t)v22 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = ((unint64_t)v23 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v26 != v27)
  {
    unsigned int v28 = *(unsigned __int8 *)(v26 + 17);
    if (v28 >= 2) {
      unsigned int v28 = *(_DWORD *)v26 + 2;
    }
    if (v28 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v29 = *(unsigned __int8 *)(v27 + 17);
    if (v29 >= 2) {
      unsigned int v29 = *(_DWORD *)v27 + 2;
    }
    if (v29 == 1)
    {
      long long v30 = *(_OWORD *)v27;
      *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
      *(_OWORD *)unint64_t v26 = v30;
      char v31 = 1;
    }
    else
    {
      char v31 = 0;
      *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
    }
    *(unsigned char *)(v26 + 17) = v31;
  }
  uint64_t v89 = v19 | 7;
  uint64_t v32 = (v20 + 18 + v26) & v94;
  uint64_t v33 = (v20 + 18 + v27) & v94;
  *(unsigned char *)uint64_t v32 = *(unsigned char *)v33;
  *(unsigned char *)(v32 | 1) = *(unsigned char *)(v33 | 1);
  *(unsigned char *)(v32 | 2) = *(unsigned char *)(v33 | 2);
  *(unsigned char *)(v32 | 3) = *(unsigned char *)(v33 | 3);
  uint64_t v34 = v32 | 4;
  int v35 = *(_DWORD *)(v33 | 4);
  *(unsigned char *)(v34 + 4) = *(unsigned char *)((v33 | 4) + 4);
  *(_DWORD *)uint64_t v34 = v35;
  uint64_t v36 = v19;
  uint64_t v37 = v19 + 9;
  uint64_t v38 = (v37 + v33) & v105;
  v90((v37 + v32) & v105, v38, v106);
  uint64_t v39 = ((v37 + v32) & v105) + v103;
  *(unsigned char *)uint64_t v39 = *(unsigned char *)(v38 + v103);
  v39 &= 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v40 = (v38 + v103) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v39 + 4) = *(_DWORD *)(v40 + 4);
  *(unsigned char *)(v39 + 8) = *(unsigned char *)(v40 + 8);
  uint64_t v91 = v37;
  uint64_t v41 = v37 & v105;
  uint64_t v42 = v36;
  uint64_t v43 = v103 + v41;
  unint64_t v44 = v36 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v45 = ((v103 + v41) & 0xFFFFFFFFFFFFFFFCLL) + (v92 & v44);
  uint64_t v46 = v103 + v41 + 16;
  *(void *)((v46 + v32) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v46 + v33) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v48 = ((v20 + 18 + (((((v95 & v98) + v104 + v89) & v94 | 7) + v93) & 0xFFFFFFFFFFFFFFF8)) & v94) + v47 + (v89 | v99);
  unint64_t v49 = (v48 + a1) & ~(v89 | v99);
  unint64_t v50 = (v48 + a2) & ~(v89 | v99);
  if (v45 + 9 <= v47) {
    unint64_t v51 = v47;
  }
  else {
    unint64_t v51 = v45 + 9;
  }
  if (v49 != v50)
  {
    uint64_t v97 = v46;
    unsigned int v52 = *(unsigned __int8 *)(v49 + v51);
    unsigned int v53 = v52 - 2;
    if (v52 < 2)
    {
      uint64_t v55 = v18;
      if (v52 != 1)
      {
LABEL_33:
        (*(void (**)(unint64_t, uint64_t))(v55 + 8))((v91 + v49) & v105, v106);
        swift_release();
        goto LABEL_34;
      }
    }
    else
    {
      if (v51 <= 3) {
        uint64_t v54 = v51;
      }
      else {
        uint64_t v54 = 4;
      }
      uint64_t v55 = v18;
      switch(v54)
      {
        case 1:
          int v56 = *(unsigned __int8 *)v49;
          if (v51 < 4) {
            goto LABEL_28;
          }
          goto LABEL_32;
        case 2:
          int v56 = *(unsigned __int16 *)v49;
          if (v51 >= 4) {
            goto LABEL_32;
          }
          goto LABEL_28;
        case 3:
          int v56 = *(unsigned __int16 *)v49 | (*(unsigned __int8 *)(v49 + 2) << 16);
          if (v51 < 4) {
            goto LABEL_28;
          }
          goto LABEL_32;
        case 4:
          int v56 = *(_DWORD *)v49;
          if (v51 >= 4)
          {
LABEL_32:
            if (v56 == -1) {
              break;
            }
            goto LABEL_33;
          }
LABEL_28:
          unsigned int v52 = (v56 | (v53 << (8 * v51))) + 2;
LABEL_29:
          if (v52 != 1) {
            goto LABEL_33;
          }
          break;
        default:
          goto LABEL_29;
      }
    }
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v55 + 8))((v42 + ((((v88 + ((v49 + 15) & 0xFFFFFFFFFFFFFFF8)) & v44) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v105, v106);
LABEL_34:
    unsigned int v57 = *(unsigned __int8 *)(v50 + v51);
    unsigned int v58 = v57 - 2;
    if (v57 >= 2)
    {
      if (v51 <= 3) {
        uint64_t v59 = v51;
      }
      else {
        uint64_t v59 = 4;
      }
      switch(v59)
      {
        case 1:
          int v60 = *(unsigned __int8 *)v50;
          if (v51 >= 4) {
            goto LABEL_48;
          }
          goto LABEL_44;
        case 2:
          int v60 = *(unsigned __int16 *)v50;
          if (v51 >= 4) {
            goto LABEL_48;
          }
          goto LABEL_44;
        case 3:
          int v60 = *(unsigned __int16 *)v50 | (*(unsigned __int8 *)(v50 + 2) << 16);
          if (v51 < 4) {
            goto LABEL_44;
          }
          goto LABEL_48;
        case 4:
          int v60 = *(_DWORD *)v50;
          if (v51 < 4)
          {
LABEL_44:
            unsigned int v57 = (v60 | (v58 << (8 * v51))) + 2;
            break;
          }
LABEL_48:
          if (v60 != -1) {
            goto LABEL_49;
          }
          goto LABEL_46;
        default:
          break;
      }
    }
    if (v57 == 1)
    {
LABEL_46:
      *(void *)unint64_t v49 = *(void *)v50;
      unint64_t v61 = (void *)((v49 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v62 = (void *)((v50 + 15) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v61 = *v62;
      unint64_t v63 = ((unint64_t)v61 + v88) & v44;
      unint64_t v64 = ((unint64_t)v62 + v88) & v44;
      *(unsigned char *)unint64_t v63 = *(unsigned char *)v64;
      *(unsigned char *)(v63 | 1) = *(unsigned char *)(v64 | 1);
      *(unsigned char *)(v63 | 2) = *(unsigned char *)(v64 | 2);
      *(unsigned char *)(v63 | 3) = *(unsigned char *)(v64 | 3);
      unint64_t v65 = (v63 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v66 = (v64 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v67 = *(_DWORD *)v66;
      *(unsigned char *)(v65 + 4) = *(unsigned char *)(v66 + 4);
      *(_DWORD *)unint64_t v65 = v67;
      uint64_t v68 = (v42 + 5 + v65) & v105;
      uint64_t v69 = (v42 + 5 + v66) & v105;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 32))(v68, v69, v106);
      *(unsigned char *)(v68 + v103) = *(unsigned char *)(v69 + v103);
      unint64_t v70 = (v68 + v103) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v71 = (v69 + v103) & 0xFFFFFFFFFFFFFFFCLL;
      int v72 = *(_DWORD *)(v71 + 4);
      *(unsigned char *)(v70 + 8) = *(unsigned char *)(v71 + 8);
      *(_DWORD *)(v70 + 4) = v72;
      char v73 = 1;
    }
    else
    {
LABEL_49:
      *(unsigned char *)unint64_t v49 = *(unsigned char *)v50;
      *(unsigned char *)(v49 | 1) = *(unsigned char *)(v50 | 1);
      *(unsigned char *)(v49 | 2) = *(unsigned char *)(v50 | 2);
      *(unsigned char *)(v49 | 3) = *(unsigned char *)(v50 | 3);
      uint64_t v74 = v49 | 4;
      int v75 = *(_DWORD *)(v50 | 4);
      *(unsigned char *)(v74 + 4) = *(unsigned char *)((v50 | 4) + 4);
      *(_DWORD *)uint64_t v74 = v75;
      unint64_t v76 = (v91 + v49) & v105;
      unint64_t v77 = (v91 + v50) & v105;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v55 + 32))(v76, v77, v106);
      char v73 = 0;
      *(unsigned char *)(v76 + v103) = *(unsigned char *)(v77 + v103);
      unint64_t v78 = (v76 + v103) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v79 = (v77 + v103) & 0xFFFFFFFFFFFFFFFCLL;
      int v80 = *(_DWORD *)(v79 + 4);
      *(unsigned char *)(v78 + 8) = *(unsigned char *)(v79 + 8);
      *(_DWORD *)(v78 + 4) = v80;
      *(void *)((v97 + v49) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v97 + v50) & 0xFFFFFFFFFFFFFFF8);
    }
    *(unsigned char *)(v49 + v51) = v73;
  }
  unint64_t v81 = (v51 + 8 + v49) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v82 = (v51 + 8 + v50) & 0xFFFFFFFFFFFFFFF8;
  if (v81 != v82)
  {
    unsigned int v83 = *(unsigned __int8 *)(v81 + 17);
    if (v83 >= 2) {
      unsigned int v83 = *(_DWORD *)v81 + 2;
    }
    if (v83 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v84 = *(unsigned __int8 *)(v82 + 17);
    if (v84 >= 2) {
      unsigned int v84 = *(_DWORD *)v82 + 2;
    }
    if (v84 == 1)
    {
      long long v85 = *(_OWORD *)v82;
      *(unsigned char *)(v81 + 16) = *(unsigned char *)(v82 + 16);
      *(_OWORD *)unint64_t v81 = v85;
      char v86 = 1;
    }
    else
    {
      char v86 = 0;
      *(_OWORD *)unint64_t v81 = *(_OWORD *)v82;
    }
    *(unsigned char *)(v81 + 17) = v86;
  }
  ((void (*)(unint64_t, unint64_t, uint64_t))v100)((v99 + 18 + v81) & v98, (v99 + 18 + v82) & v98, v101);
  *(unsigned char *)(((v99 + 18 + v81) & v98) + v104) = *(unsigned char *)(((v99 + 18 + v82) & v98) + v104);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchPrimitiveModifier(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v54 = *(void *)(v5 - 8);
  uint64_t v6 = *(unsigned int *)(v54 + 84);
  uint64_t v7 = *(void *)(type metadata accessor for AttributedString() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v54 + 80);
  uint64_t v11 = *(void *)(v54 + 64);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  if (v6 <= v12) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = v6;
  }
  if (v8 <= 0xFE) {
    int v14 = 254;
  }
  else {
    int v14 = *(_DWORD *)(v7 + 84);
  }
  if (v8 <= 0x7FFFFFFE) {
    unsigned int v15 = 2147483646;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v7 + 84);
  }
  if (v13 <= v15) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = v13;
  }
  uint64_t v17 = *(_DWORD *)(v7 + 80);
  uint64_t v18 = v17 + 9;
  uint64_t v19 = ((v17 + 9) & ~v17) + v9;
  uint64_t v20 = v17 + 16;
  unint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 24;
  if ((v19 & 0xFFFFFFFFFFFFFFFCLL) + ((*(_DWORD *)(v7 + 80) & 0xFC ^ 0x1FC) & v20) + 9 <= v21) {
    unint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  else {
    unint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFFCLL) + ((*(_DWORD *)(v7 + 80) & 0xFC ^ 0x1FC) & v20) + 9;
  }
  if (v6 <= 0xFE) {
    unsigned int v23 = 254;
  }
  else {
    unsigned int v23 = v6;
  }
  if (v23 <= v16) {
    unsigned int v24 = v16;
  }
  else {
    unsigned int v24 = v23;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v25 = v17 | 7;
  uint64_t v26 = (v17 | 7) + v11;
  uint64_t v27 = (v20 & ~v17) + v9 + 7;
  uint64_t v28 = (v17 | 7) + 18;
  uint64_t v29 = v17 | 7 | v10;
  unint64_t v30 = ((v28 + ((v27 + ((v26 + ((v10 + 40) & ~v10)) & ~(v17 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v17 | 7)) + v21 + v29;
  int v31 = a2 - v24;
  if (a2 <= v24) {
    goto LABEL_46;
  }
  unint64_t v32 = v11 + ((v10 + (v22 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v10) + (v30 & ~v29) + 1;
  char v33 = 8 * v32;
  if (v32 > 3) {
    goto LABEL_28;
  }
  unsigned int v36 = ((v31 + ~(-1 << v33)) >> v33) + 1;
  if (HIWORD(v36))
  {
    int v34 = *(_DWORD *)(a1 + v32);
    if (v34) {
      goto LABEL_36;
    }
  }
  else
  {
    if (v36 <= 0xFF)
    {
      if (v36 < 2) {
        goto LABEL_46;
      }
LABEL_28:
      int v34 = *(unsigned __int8 *)(a1 + v32);
      if (!*(unsigned char *)(a1 + v32)) {
        goto LABEL_46;
      }
LABEL_36:
      int v37 = (v34 - 1) << v33;
      if (v32 > 3) {
        int v37 = 0;
      }
      if (v32)
      {
        if (v32 <= 3) {
          int v38 = v32;
        }
        else {
          int v38 = 4;
        }
        switch(v38)
        {
          case 2:
            int v39 = *(unsigned __int16 *)a1;
            break;
          case 3:
            int v39 = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
            break;
          case 4:
            int v39 = *(_DWORD *)a1;
            break;
          default:
            int v39 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v39 = 0;
      }
      return v24 + (v39 | v37) + 1;
    }
    int v34 = *(unsigned __int16 *)(a1 + v32);
    if (*(_WORD *)(a1 + v32)) {
      goto LABEL_36;
    }
  }
LABEL_46:
  uint64_t v40 = ~v10;
  if (v16 < v23)
  {
    unint64_t v41 = (v30 + a1) & ~v29;
    if (v6 <= 0xFE)
    {
      unsigned int v42 = *(unsigned __int8 *)(v41 + v22);
      if (v42 >= 2) {
        return (v42 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
    unint64_t v45 = (v10 + ((v22 + v41 + 8) & 0xFFFFFFFFFFFFFFF8) + 18) & v40;
    goto LABEL_57;
  }
  unint64_t v43 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((v16 & 0x80000000) == 0)
  {
    unint64_t v44 = *(void *)(v43 + 32);
    if (v44 >= 0xFFFFFFFF) {
      LODWORD(v44) = -1;
    }
    return (v44 + 1);
  }
  unint64_t v45 = (v43 + v10 + 40) & v40;
  if (v6 == v16)
  {
LABEL_57:
    uint64_t v46 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v54 + 48);
    return v46(v45, v6, v5);
  }
  uint64_t v47 = ~v17;
  unint64_t v48 = (v26 + v45) & ~v25;
  if (v12 == v16)
  {
    unint64_t v49 = v17 + ((v48 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
LABEL_77:
    unsigned int v53 = *(uint64_t (**)(unint64_t))(v7 + 48);
    return v53(v49 & v47);
  }
  unint64_t v50 = (v28 + ((v27 + v48) & 0xFFFFFFFFFFFFFFF8)) & ~v25;
  if (v14 == v15)
  {
    if (v8 <= 0xFE)
    {
      unsigned int v51 = *(unsigned __int8 *)(v50 | 1);
      if (v51 >= 2) {
        return v51 - 1;
      }
      else {
        return 0;
      }
    }
    unint64_t v49 = v18 + v50;
    goto LABEL_77;
  }
  unint64_t v52 = *(void *)((v19 + v50 + 16) & 0xFFFFFFFFFFFFFFF8);
  if (v52 >= 0xFFFFFFFF) {
    LODWORD(v52) = -1;
  }
  if ((v52 + 1) >= 2) {
    return v52;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for SearchPrimitiveModifier(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v57 = *(void *)(v7 - 8);
  uint64_t v8 = *(unsigned int *)(v57 + 84);
  uint64_t v9 = *(void *)(type metadata accessor for AttributedString() - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v57 + 80);
  uint64_t v13 = *(void *)(v57 + 64);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  if (v8 <= v14) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = v8;
  }
  if (v10 <= 0xFE) {
    int v16 = 254;
  }
  else {
    int v16 = *(_DWORD *)(v9 + 84);
  }
  int v56 = v16;
  if (v10 <= 0x7FFFFFFE) {
    unsigned int v17 = 2147483646;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v9 + 84);
  }
  if (v15 <= v17) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = v15;
  }
  uint64_t v19 = *(_DWORD *)(v9 + 80);
  uint64_t v20 = ((v19 + 9) & ~v19) + v11;
  size_t v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + 24;
  if ((v20 & 0xFFFFFFFFFFFFFFFCLL) + ((*(_DWORD *)(v9 + 80) & 0xFC ^ 0x1FCu) & (unint64_t)(v19 + 16)) + 9 <= v21) {
    unint64_t v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  else {
    unint64_t v22 = (v20 & 0xFFFFFFFFFFFFFFFCLL)
  }
        + ((*(_DWORD *)(v9 + 80) & 0xFC ^ 0x1FCu) & (*(_DWORD *)(v9 + 80) + 16))
        + 9;
  if (v8 <= 0xFE) {
    unsigned int v23 = 254;
  }
  else {
    unsigned int v23 = v8;
  }
  if (v23 <= v18) {
    unsigned int v24 = v18;
  }
  else {
    unsigned int v24 = v23;
  }
  uint64_t v25 = (v19 | 7) + v13;
  uint64_t v26 = ((*(_DWORD *)(v9 + 80) + 16) & ~v19) + v11 + 7;
  uint64_t v27 = (v19 | 7) + 18;
  unint64_t v28 = ((v27 + ((v26 + ((v25 + ((v12 + 40) & ~v12)) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v19 | 7)) + v21;
  uint64_t v29 = v19 | 7 | v12;
  size_t v30 = v13 + ((v12 + (v22 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v12) + 1;
  size_t v31 = ((v28 + v29) & ~v29) + v30;
  if (a3 <= v24)
  {
    int v32 = 0;
    if (v24 < a2) {
      goto LABEL_32;
    }
  }
  else
  {
    if (v31 > 3)
    {
      int v32 = 1;
      if (v24 >= a2) {
        goto LABEL_28;
      }
LABEL_32:
      unsigned int v34 = ~v24 + a2;
      if (v31 < 4)
      {
        int v35 = (v34 >> (8 * v31)) + 1;
        if (v31)
        {
          int v37 = v34 & ~(-1 << (8 * v31));
          bzero((void *)a1, v31);
          if (v31 == 3)
          {
            *(_WORD *)a1 = v37;
            *(unsigned char *)(a1 + 2) = BYTE2(v37);
          }
          else if (v31 == 2)
          {
            *(_WORD *)a1 = v37;
          }
          else
          {
            *(unsigned char *)a1 = v37;
          }
        }
      }
      else
      {
        bzero((void *)a1, v31);
        *(_DWORD *)a1 = v34;
        int v35 = 1;
      }
      switch(v32)
      {
        case 1:
          *(unsigned char *)(a1 + v31) = v35;
          break;
        case 2:
          *(_WORD *)(a1 + v31) = v35;
          break;
        case 3:
LABEL_113:
          __break(1u);
          JUMPOUT(0x187F4D6FCLL);
        case 4:
          *(_DWORD *)(a1 + v31) = v35;
          break;
        default:
          return;
      }
      return;
    }
    unsigned int v36 = ((a3 - v24 + ~(-1 << (8 * v31))) >> (8 * v31)) + 1;
    if (HIWORD(v36))
    {
      int v32 = 4;
    }
    else if (v36 >= 0x100)
    {
      int v32 = 2;
    }
    else
    {
      int v32 = v36 > 1;
    }
    if (v24 < a2) {
      goto LABEL_32;
    }
  }
LABEL_28:
  uint64_t v55 = ~v12;
  uint64_t v33 = ~(v19 | 7);
  switch(v32)
  {
    case 1:
      *(unsigned char *)(a1 + v31) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_44;
    case 2:
      *(_WORD *)(a1 + v31) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_44;
    case 3:
      goto LABEL_113;
    case 4:
      *(_DWORD *)(a1 + v31) = 0;
      goto LABEL_43;
    default:
LABEL_43:
      if (!a2) {
        return;
      }
LABEL_44:
      if (v18 < v23)
      {
        int v38 = (unsigned char *)((v28 + v29 + a1) & ~v29);
        if (v23 < a2)
        {
          if (v30 <= 3) {
            int v39 = ~(-1 << (8 * v30));
          }
          else {
            int v39 = -1;
          }
          if (v30)
          {
            int v40 = v39 & (~v23 + a2);
            if (v30 <= 3) {
              int v41 = v30;
            }
            else {
              int v41 = 4;
            }
            bzero(v38, v30);
            switch(v41)
            {
              case 2:
                goto LABEL_91;
              case 3:
                goto LABEL_90;
              case 4:
                goto LABEL_92;
              default:
                goto LABEL_88;
            }
          }
          return;
        }
        if (v8 <= 0xFE)
        {
          if (a2 > 0xFE)
          {
            if (v22 <= 2) {
              int v47 = ~(-1 << (8 * (v22 + 1)));
            }
            else {
              int v47 = -1;
            }
            int v40 = v47 & (a2 - 255);
            if (v22 <= 2) {
              int v48 = v22 + 1;
            }
            else {
              int v48 = 4;
            }
            bzero(v38, (v22 + 1));
            switch(v48)
            {
              case 2:
LABEL_91:
                *(_WORD *)int v38 = v40;
                break;
              case 3:
LABEL_90:
                *(_WORD *)int v38 = v40;
                v38[2] = BYTE2(v40);
                break;
              case 4:
LABEL_92:
                *(_DWORD *)int v38 = v40;
                break;
              default:
LABEL_88:
                *int v38 = v40;
                break;
            }
          }
          else
          {
            v38[v22] = -(char)a2;
          }
          return;
        }
        unint64_t v45 = (v12 + ((unint64_t)&v38[v22 + 8] & 0xFFFFFFFFFFFFFFF8) + 18) & v55;
        goto LABEL_78;
      }
      if (v18 < a2)
      {
        if (!v28) {
          return;
        }
        int v42 = ~v18 + a2;
        unint64_t v43 = (void *)a1;
        v21 += (v27 + ((v26 + ((v25 + ((v12 + 40) & ~v12)) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8)) & ~(v19 | 7);
        goto LABEL_57;
      }
      unint64_t v44 = (void *)(a1 & 0xFFFFFFFFFFFFFFF8);
      if ((v18 & 0x80000000) == 0)
      {
        if ((a2 & 0x80000000) != 0)
        {
          v44[3] = 0;
          v44[4] = 0;
          v44[1] = a2 ^ 0x80000000;
          v44[2] = 0;
        }
        else
        {
          v44[4] = (a2 - 1);
        }
        return;
      }
      unint64_t v45 = ((unint64_t)v44 + v12 + 40) & v55;
      if (v8 == v18)
      {
LABEL_78:
        uint64_t v46 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56);
        v46(v45, a2, v8, v7);
        return;
      }
      unint64_t v49 = (v25 + v45) & v33;
      if (v14 == v18)
      {
        unint64_t v50 = (void *)((v49 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v10 & 0x80000000) == 0)
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v51 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v51 = (a2 - 1);
          }
          *unint64_t v50 = v51;
          return;
        }
        uint64_t v52 = (uint64_t)v50 + v19 + 8;
      }
      else
      {
        a1 = (v27 + ((v26 + v49) & 0xFFFFFFFFFFFFFFF8)) & v33;
        if (v17 < a2)
        {
          if ((v20 & 0xFFFFFFF8) == 0xFFFFFFE8) {
            return;
          }
          int v42 = ~v17 + a2;
          unint64_t v43 = (void *)((v27 + ((v26 + v49) & 0xFFFFFFFFFFFFFFF8)) & v33);
LABEL_57:
          bzero(v43, v21);
          *(_DWORD *)a1 = v42;
          return;
        }
        if (v56 != v17)
        {
          unsigned int v53 = (void *)((v20 + a1 + 16) & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *unsigned int v53 = 0;
            *(_DWORD *)unsigned int v53 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *unsigned int v53 = a2;
          }
          return;
        }
        if (v10 <= 0xFE)
        {
          *(unsigned char *)(a1 | 1) = a2 + 1;
          return;
        }
        uint64_t v52 = v19 + 9 + a1;
      }
      uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v9 + 56);
      v54(v52 & ~v19, a2);
      break;
  }
}

ValueMetadata *type metadata accessor for IsSearchFocusedPreferenceKey()
{
  return &type metadata for IsSearchFocusedPreferenceKey;
}

uint64_t sub_187F4D754()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in SearchPrimitiveModifier<A>()
{
  return &protocol witness table for SearchPrimitiveModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in SearchEnvironmentWritingModifier()
{
  return &protocol witness table for SearchEnvironmentWritingModifier;
}

uint64_t partial apply for implicit closure #1 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static SearchPrimitiveModifier._makeView(modifier:inputs:body:)(*(_DWORD *)(v0 + 32));
}

uint64_t type metadata accessor for SearchPrimitiveModifier.MakeIsSearchFocused()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for SearchPrimitiveModifier.DefaultSearchView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = v10;
  int v12 = *(_DWORD *)(v10 + 80);
  uint64_t v13 = v12;
  unint64_t v14 = v12 | (unint64_t)v8;
  uint64_t v15 = ~(v14 | 7);
  uint64_t v16 = v8 + 9;
  unint64_t v17 = v16 & ~(unint64_t)v8;
  uint64_t v18 = *(void *)(v7 + 64);
  uint64_t v19 = v18 + v17;
  unint64_t v20 = v8 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  if (((v18 + v17) & 0xFFFFFFFFFFFFFFFCLL) + ((v8 + 16) & v20) + 9 <= ((v18 + v17) & 0xFFFFFFFFFFFFFFF8)
                                                                                        + 24)
    unint64_t v21 = ((v18 + v17) & 0xFFFFFFFFFFFFFFF8) + 24;
  else {
    unint64_t v21 = ((v18 + v17) & 0xFFFFFFFFFFFFFFFCLL) + ((v8 + 16) & v20) + 9;
  }
  uint64_t v22 = *(void *)(v10 + 64);
  BOOL v23 = v14 <= 7 && ((v12 | v8) & 0x100000) == 0;
  if (v23
    && ((v22
       + ((v12 + (v21 & 0xFFFFFFFFFFFFFFF8) + 26) & ~(unint64_t)v12)
       + 1
       + (((v14 | 7) + 1) & ~(v14 | 7))
       + 7) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= 0x18)
  {
    int v72 = a1;
    *a1 = *a2;
    uint64_t v24 = (unint64_t)(a1 + 8) & v15;
    uint64_t v25 = (unint64_t)(a2 + 8) & v15;
    unsigned int v26 = *(unsigned __int8 *)(v25 + v21);
    unsigned int v27 = v26 - 2;
    if (v26 >= 2)
    {
      if (v21 <= 3) {
        uint64_t v28 = v21;
      }
      else {
        uint64_t v28 = 4;
      }
      switch(v28)
      {
        case 1:
          int v29 = *(unsigned __int8 *)v25;
          if (v21 < 4) {
            goto LABEL_19;
          }
          goto LABEL_23;
        case 2:
          int v29 = *(unsigned __int16 *)v25;
          if (v21 < 4) {
            goto LABEL_19;
          }
          goto LABEL_23;
        case 3:
          int v29 = *(unsigned __int16 *)v25 | (*(unsigned __int8 *)(v25 + 2) << 16);
          if (v21 < 4) {
            goto LABEL_19;
          }
          goto LABEL_23;
        case 4:
          int v29 = *(_DWORD *)v25;
          if (v21 < 4) {
LABEL_19:
          }
            unsigned int v26 = (v29 | (v27 << (8 * v21))) + 2;
          else {
LABEL_23:
          }
            unsigned int v26 = v29 + 2;
          break;
        default:
          break;
      }
    }
    unint64_t v68 = v22
        + ((v12 + (v21 & 0xFFFFFFFFFFFFFFF8) + 26) & ~(unint64_t)v12)
        + 1;
    uint64_t v69 = v22;
    uint64_t v70 = v11;
    uint64_t v71 = v9;
    unint64_t v32 = ~(unint64_t)v8;
    unint64_t v33 = v21 + 1;
    if (v26 == 1)
    {
      *(void *)uint64_t v24 = *(void *)v25;
      unsigned int v34 = (void *)((v24 + 15) & 0xFFFFFFFFFFFFFFF8);
      int v35 = (void *)((v25 + 15) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v34 = *v35;
      uint64_t v36 = ((unint64_t)v34 + v8 + 8) & v20;
      uint64_t v37 = ((unint64_t)v35 + v8 + 8) & v20;
      *(unsigned char *)uint64_t v36 = *(unsigned char *)v37;
      *(unsigned char *)(v36 | 1) = *(unsigned char *)(v37 | 1);
      *(unsigned char *)(v36 | 2) = *(unsigned char *)(v37 | 2);
      *(unsigned char *)(v36 | 3) = *(unsigned char *)(v37 | 3);
      unint64_t v38 = (v36 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v39 = (v37 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v36) = *(_DWORD *)v39;
      *(unsigned char *)(v38 + 4) = *(unsigned char *)(v39 + 4);
      *(_DWORD *)unint64_t v38 = v36;
      uint64_t v40 = v8 + 5;
      unint64_t v41 = (v40 + v38) & v32;
      unint64_t v42 = (v40 + v39) & v32;
      unint64_t v43 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
      uint64_t v44 = v6;
      swift_retain();
      swift_retain();
      v43(v41, v42, v44);
      unint64_t v33 = v21 + 1;
      *(unsigned char *)(v41 + v18) = *(unsigned char *)(v42 + v18);
      unint64_t v45 = (v41 + v18) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v46 = (v42 + v18) & 0xFFFFFFFFFFFFFFFCLL;
      int v47 = *(_DWORD *)(v46 + 4);
      *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
      *(_DWORD *)(v45 + 4) = v47;
      char v48 = 1;
    }
    else
    {
      *(unsigned char *)uint64_t v24 = *(unsigned char *)v25;
      *(unsigned char *)(v24 | 1) = *(unsigned char *)(v25 | 1);
      *(unsigned char *)(v24 | 2) = *(unsigned char *)(v25 | 2);
      *(unsigned char *)(v24 | 3) = *(unsigned char *)(v25 | 3);
      uint64_t v49 = v24 | 4;
      int v50 = *(_DWORD *)(v25 | 4);
      *(unsigned char *)(v49 + 4) = *(unsigned char *)((v25 | 4) + 4);
      *(_DWORD *)uint64_t v49 = v50;
      unint64_t v51 = (v16 + v24) & v32;
      unint64_t v52 = (v16 + v25) & v32;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(v51, v52, v6);
      *(unsigned char *)(v51 + v18) = *(unsigned char *)(v52 + v18);
      unint64_t v53 = (v51 + v18) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v54 = (v52 + v18) & 0xFFFFFFFFFFFFFFFCLL;
      int v55 = *(_DWORD *)(v54 + 4);
      *(unsigned char *)(v53 + 8) = *(unsigned char *)(v54 + 8);
      *(_DWORD *)(v53 + 4) = v55;
      *(void *)((v19 + 16 + v24) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v19 + 16 + v25) & 0xFFFFFFFFFFFFFFF8);
      swift_retain();
      char v48 = 0;
    }
    *(unsigned char *)(v24 + v21) = v48;
    uint64_t v56 = v24 | 7;
    unint64_t v57 = ((v24 | 7) + v33) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v58 = v25 | 7;
    unint64_t v59 = (v58 + v33) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v60 = *(unsigned __int8 *)(v59 + 17);
    if (v60 >= 2) {
      unsigned int v60 = *(_DWORD *)v59 + 2;
    }
    uint64_t v61 = ~v13;
    if (v60 == 1)
    {
      *(void *)unint64_t v57 = *(void *)v59;
      *(void *)(v57 + 8) = *(void *)(v59 + 8);
      *(unsigned char *)(v57 + 16) = *(unsigned char *)(v59 + 16);
      swift_retain();
      char v62 = 1;
    }
    else
    {
      char v62 = 0;
      *(unsigned char *)unint64_t v57 = *(unsigned char *)v59;
      *(void *)(v57 + 8) = *(void *)(v59 + 8);
    }
    swift_retain();
    *(unsigned char *)(v57 + 17) = v62;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v70 + 16))((v13 + 18 + v57) & v61, (v13 + 18 + v59) & v61, v71);
    *(unsigned char *)(((v13 + 18 + v57) & v61) + v69) = *(unsigned char *)(((v13 + 18 + v59) & v61) + v69);
    unint64_t v63 = (v56 + v68) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v64 = (v58 + v68) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v63 = *(unsigned char *)v64;
    uint64_t v65 = *(void *)(v64 + 8);
    if (v65)
    {
      uint64_t v66 = *(void *)(v64 + 16);
      *(void *)(v63 + 8) = v65;
      *(void *)(v63 + 16) = v66;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v63 + 8) = *(_OWORD *)(v64 + 8);
    }
    return v72;
  }
  else
  {
    uint64_t v30 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v31 = v30 + ((v14 + 16) & v15);
    swift_retain();
  }
  return (unsigned char *)v31;
}

unsigned char *assignWithCopy for SearchPrimitiveModifier.DefaultSearchView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v8 | 3;
  uint64_t v80 = *(void *)(a3 + 16);
  unint64_t v81 = a1;
  uint64_t v78 = *(void *)(v80 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v78 + 80);
  uint64_t v11 = v8 | v10 | 7;
  uint64_t v12 = (unint64_t)&a1[v11 + 1] & ~v11;
  uint64_t v13 = (unint64_t)&a2[v11 + 1] & ~v11;
  if (v12 == v13)
  {
    uint64_t v22 = *(void *)(v7 + 64) + ((v8 + 9) & ~v8);
    unint64_t v79 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v77 = (v22 & 0xFFFFFFFFFFFFFFF8) + 24;
    uint64_t v23 = (v8 + 16) & ~v9;
  }
  else
  {
    uint64_t v14 = v8 + 9;
    uint64_t v74 = *(void *)(v7 + 64);
    uint64_t v15 = v74 + ((v8 + 9) & ~v8);
    unint64_t v79 = v15 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v16 = (v15 & 0xFFFFFFFFFFFFFFFCLL) + 9;
    uint64_t v76 = (v8 + 16) & ~v9;
    unint64_t v77 = (v15 & 0xFFFFFFFFFFFFFFF8) + 24;
    unint64_t v73 = v16;
    if (v16 + v76 <= v77) {
      unint64_t v17 = (v15 & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    else {
      unint64_t v17 = v16 + v76;
    }
    unsigned int v18 = *(unsigned __int8 *)(v12 + v17);
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *(unsigned __int8 *)v12;
          if (v17 < 4) {
            goto LABEL_16;
          }
          goto LABEL_18;
        case 2:
          int v21 = *(unsigned __int16 *)v12;
          if (v17 >= 4) {
            goto LABEL_18;
          }
          goto LABEL_16;
        case 3:
          int v21 = *(unsigned __int16 *)v12 | (*(unsigned __int8 *)(v12 + 2) << 16);
          if (v17 < 4) {
            goto LABEL_16;
          }
          goto LABEL_18;
        case 4:
          int v21 = *(_DWORD *)v12;
          if (v17 < 4) {
LABEL_16:
          }
            unsigned int v18 = (v21 | (v19 << (8 * v17))) + 2;
          else {
LABEL_18:
          }
            unsigned int v18 = v21 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v24 = ~v8;
    uint64_t v25 = ~v9;
    uint64_t v75 = v6;
    if (v18 == 1)
    {
      unint64_t v72 = v17;
      uint64_t v26 = v6;
      swift_release();
      swift_release();
      uint64_t v14 = v8 + 9;
      uint64_t v24 = ~v8;
      uint64_t v27 = v26;
      unint64_t v17 = v72;
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))((v8 + ((((v8 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v25) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v8, v27);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))((v14 + v12) & v24, v6);
      swift_release();
    }
    unsigned int v28 = *(unsigned __int8 *)(v13 + v17);
    unsigned int v29 = v28 - 2;
    if (v28 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v30 = v17;
      }
      else {
        uint64_t v30 = 4;
      }
      switch(v30)
      {
        case 1:
          int v31 = *(unsigned __int8 *)v13;
          if (v17 >= 4) {
            goto LABEL_36;
          }
          goto LABEL_32;
        case 2:
          int v31 = *(unsigned __int16 *)v13;
          if (v17 >= 4) {
            goto LABEL_36;
          }
          goto LABEL_32;
        case 3:
          int v31 = *(unsigned __int16 *)v13 | (*(unsigned __int8 *)(v13 + 2) << 16);
          if (v17 < 4) {
            goto LABEL_32;
          }
          goto LABEL_36;
        case 4:
          int v31 = *(_DWORD *)v13;
          if (v17 < 4)
          {
LABEL_32:
            unsigned int v28 = (v31 | (v29 << (8 * v17))) + 2;
            break;
          }
LABEL_36:
          if (v31 != -1) {
            goto LABEL_37;
          }
          goto LABEL_34;
        default:
          break;
      }
    }
    if (v28 == 1)
    {
LABEL_34:
      *(void *)uint64_t v12 = *(void *)v13;
      unint64_t v32 = (void *)((v12 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v33 = (void *)((v13 + 15) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v32 = *v33;
      uint64_t v34 = ((unint64_t)v32 + v8 + 8) & v25;
      uint64_t v35 = ((unint64_t)v33 + v8 + 8) & v25;
      *(unsigned char *)uint64_t v34 = *(unsigned char *)v35;
      *(unsigned char *)(v34 | 1) = *(unsigned char *)(v35 | 1);
      *(unsigned char *)(v34 | 2) = *(unsigned char *)(v35 | 2);
      *(unsigned char *)(v34 | 3) = *(unsigned char *)(v35 | 3);
      unint64_t v36 = (v34 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v37 = (v35 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v38 = *(_DWORD *)v37;
      *(unsigned char *)(v36 + 4) = *(unsigned char *)(v37 + 4);
      *(_DWORD *)unint64_t v36 = v38;
      uint64_t v39 = v8 + 5;
      uint64_t v40 = (v8 + 5 + v36) & v24;
      unint64_t v41 = (v39 + v37) & v24;
      unint64_t v42 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
      swift_retain();
      swift_retain();
      v42(v40, v41, v75);
      *(unsigned char *)(v74 + v40) = *(unsigned char *)(v74 + v41);
      unint64_t v43 = (v74 + v40) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v44 = (v74 + v41) & 0xFFFFFFFFFFFFFFFCLL;
      int v45 = *(_DWORD *)(v44 + 4);
      *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
      *(_DWORD *)(v43 + 4) = v45;
      *(unsigned char *)(v12 + v17) = 1;
    }
    else
    {
LABEL_37:
      *(unsigned char *)uint64_t v12 = *(unsigned char *)v13;
      *(unsigned char *)(v12 | 1) = *(unsigned char *)(v13 | 1);
      *(unsigned char *)(v12 | 2) = *(unsigned char *)(v13 | 2);
      *(unsigned char *)(v12 | 3) = *(unsigned char *)(v13 | 3);
      uint64_t v46 = v12 | 4;
      int v47 = *(_DWORD *)(v13 | 4);
      *(unsigned char *)(v46 + 4) = *(unsigned char *)((v13 | 4) + 4);
      *(_DWORD *)uint64_t v46 = v47;
      uint64_t v48 = v14;
      uint64_t v49 = (v14 + v12) & v24;
      uint64_t v50 = (v48 + v13) & v24;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v49, v50, v75);
      *(unsigned char *)(v74 + v49) = *(unsigned char *)(v74 + v50);
      unint64_t v51 = (v74 + v49) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v52 = (v74 + v50) & 0xFFFFFFFFFFFFFFFCLL;
      int v53 = *(_DWORD *)(v52 + 4);
      *(unsigned char *)(v51 + 8) = *(unsigned char *)(v52 + 8);
      *(_DWORD *)(v51 + 4) = v53;
      *(void *)(((v12 | 7) + v73) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v13 | 7) + v73) & 0xFFFFFFFFFFFFFFF8);
      *(unsigned char *)(v12 + v17) = 0;
      swift_retain();
    }
    uint64_t v23 = v76;
  }
  unint64_t v54 = v23 + v79 + 9;
  if (v54 <= v77) {
    unint64_t v55 = v77;
  }
  else {
    unint64_t v55 = v54;
  }
  unint64_t v56 = ((v12 | 7) + v55 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v57 = ((v13 | 7) + v55 + 1) & 0xFFFFFFFFFFFFFFF8;
  if (v56 != v57)
  {
    unsigned int v58 = *(unsigned __int8 *)(v56 + 17);
    if (v58 >= 2) {
      unsigned int v58 = *(_DWORD *)v56 + 2;
    }
    if (v58 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v59 = *(unsigned __int8 *)(v57 + 17);
    if (v59 >= 2) {
      unsigned int v59 = *(_DWORD *)v57 + 2;
    }
    if (v59 == 1)
    {
      *(void *)unint64_t v56 = *(void *)v57;
      *(void *)(v56 + 8) = *(void *)(v57 + 8);
      *(unsigned char *)(v56 + 16) = *(unsigned char *)(v57 + 16);
      *(unsigned char *)(v56 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v56 = *(unsigned char *)v57;
      *(void *)(v56 + 8) = *(void *)(v57 + 8);
      *(unsigned char *)(v56 + 17) = 0;
    }
    swift_retain();
  }
  uint64_t v60 = (v10 + 18 + v56) & ~v10;
  uint64_t v61 = (v10 + 18 + v57) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v78 + 24))(v60, v61, v80);
  uint64_t v62 = *(void *)(v78 + 64);
  *(unsigned char *)(v62 + v60) = *(unsigned char *)(v62 + v61);
  unint64_t v63 = ((v10 + (v55 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v10) + v62 + 1;
  unint64_t v64 = ((v12 | 7) + v63) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v65 = ((v13 | 7) + v63) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v64 = *(unsigned char *)v65;
  uint64_t v66 = (_OWORD *)(v64 + 8);
  unint64_t v68 = (_OWORD *)(v65 + 8);
  uint64_t v67 = *(void *)(v65 + 8);
  if (!*(void *)(v64 + 8))
  {
    if (v67)
    {
      uint64_t v70 = *(void *)(v65 + 16);
      *(void *)(v64 + 8) = v67;
      *(void *)(v64 + 16) = v70;
      swift_retain();
      return v81;
    }
LABEL_59:
    _OWORD *v66 = *v68;
    return v81;
  }
  if (!v67)
  {
    outlined destroy of TriggerSubmitAction(v64 + 8);
    goto LABEL_59;
  }
  uint64_t v69 = *(void *)(v65 + 16);
  *(void *)(v64 + 8) = v67;
  *(void *)(v64 + 16) = v69;
  swift_retain();
  swift_release();
  return v81;
}

uint64_t outlined destroy of TriggerSubmitAction(uint64_t a1)
{
  return a1;
}

unsigned char *initializeWithTake for SearchPrimitiveModifier.DefaultSearchView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v63 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v63 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = v8 | v10 | 7;
  uint64_t v12 = (unint64_t)&a1[v11 + 1] & ~v11;
  uint64_t v13 = (unint64_t)&a2[v11 + 1] & ~v11;
  uint64_t v14 = v8 + 9;
  uint64_t v15 = (v8 + 9) & ~v8;
  uint64_t v16 = *(void *)(v7 + 64);
  unint64_t v17 = ((v16 + v15) & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v18 = *(_DWORD *)(v7 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  if (v17 + ((v8 + 16) & v18) <= ((v16 + v15) & 0xFFFFFFFFFFFFFFF8) + 24) {
    unint64_t v19 = ((v16 + v15) & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  else {
    unint64_t v19 = v17 + ((v8 + 16) & v18);
  }
  unsigned int v20 = *(unsigned __int8 *)(v13 + v19);
  unsigned int v21 = v20 - 2;
  if (v20 >= 2)
  {
    if (v19 <= 3) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *(unsigned __int8 *)v13;
        goto LABEL_13;
      case 2:
        int v23 = *(unsigned __int16 *)v13;
        goto LABEL_13;
      case 3:
        int v23 = *(unsigned __int16 *)v13 | (*(unsigned __int8 *)(v13 + 2) << 16);
        goto LABEL_13;
      case 4:
        int v23 = *(_DWORD *)v13;
LABEL_13:
        int v24 = (v23 | (v21 << (8 * v19))) + 2;
        unsigned int v20 = v23 + 2;
        if (v19 < 4) {
          unsigned int v20 = v24;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v25 = ~v8;
  if (v20 == 1)
  {
    *(void *)uint64_t v12 = *(void *)v13;
    uint64_t v26 = (void *)((v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = (void *)((v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v26 = *v27;
    uint64_t v28 = ((unint64_t)v26 + v8 + 8) & v18;
    uint64_t v29 = ((unint64_t)v27 + v8 + 8) & v18;
    *(unsigned char *)uint64_t v28 = *(unsigned char *)v29;
    *(unsigned char *)(v28 | 1) = *(unsigned char *)(v29 | 1);
    *(unsigned char *)(v28 | 2) = *(unsigned char *)(v29 | 2);
    *(unsigned char *)(v28 | 3) = *(unsigned char *)(v29 | 3);
    unint64_t v30 = (v28 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v31 = (v29 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v28) = *(_DWORD *)v31;
    *(unsigned char *)(v30 + 4) = *(unsigned char *)(v31 + 4);
    *(_DWORD *)unint64_t v30 = v28;
    uint64_t v32 = v8 + 5;
    unint64_t v33 = (v32 + v30) & v25;
    unint64_t v34 = (v32 + v31) & v25;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(v33, v34, v6);
    *(unsigned char *)(v33 + v16) = *(unsigned char *)(v34 + v16);
    unint64_t v35 = (v33 + v16) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v36 = (v34 + v16) & 0xFFFFFFFFFFFFFFFCLL;
    int v37 = *(_DWORD *)(v36 + 4);
    *(unsigned char *)(v35 + 8) = *(unsigned char *)(v36 + 8);
    *(_DWORD *)(v35 + 4) = v37;
    uint64_t v38 = v12 | 7;
    uint64_t v39 = v13 | 7;
    char v40 = 1;
  }
  else
  {
    *(unsigned char *)uint64_t v12 = *(unsigned char *)v13;
    *(unsigned char *)(v12 | 1) = *(unsigned char *)(v13 | 1);
    *(unsigned char *)(v12 | 2) = *(unsigned char *)(v13 | 2);
    *(unsigned char *)(v12 | 3) = *(unsigned char *)(v13 | 3);
    uint64_t v41 = v12 | 4;
    int v42 = *(_DWORD *)(v13 | 4);
    *(unsigned char *)(v41 + 4) = *(unsigned char *)((v13 | 4) + 4);
    *(_DWORD *)uint64_t v41 = v42;
    uint64_t v43 = (v14 + v12) & v25;
    uint64_t v44 = (v14 + v13) & v25;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v43, v44, v6);
    char v40 = 0;
    *(unsigned char *)(v43 + v16) = *(unsigned char *)(v44 + v16);
    unint64_t v45 = (v43 + v16) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v46 = (v44 + v16) & 0xFFFFFFFFFFFFFFFCLL;
    int v47 = *(_DWORD *)(v46 + 4);
    *(unsigned char *)(v45 + 8) = *(unsigned char *)(v46 + 8);
    *(_DWORD *)(v45 + 4) = v47;
    uint64_t v38 = v12 | 7;
    uint64_t v39 = v13 | 7;
    *(void *)(((v12 | 7) + v17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v39 + v17) & 0xFFFFFFFFFFFFFFF8);
  }
  *(unsigned char *)(v12 + v19) = v40;
  unint64_t v48 = (v38 + v19 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v49 = (v39 + v19 + 1) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v50 = *(unsigned __int8 *)(v49 + 17);
  if (v50 >= 2) {
    unsigned int v50 = *(_DWORD *)v49 + 2;
  }
  if (v50 == 1)
  {
    long long v51 = *(_OWORD *)v49;
    *(unsigned char *)(v48 + 16) = *(unsigned char *)(v49 + 16);
    *(_OWORD *)unint64_t v48 = v51;
    char v52 = 1;
  }
  else
  {
    char v52 = 0;
    *(_OWORD *)unint64_t v48 = *(_OWORD *)v49;
  }
  *(unsigned char *)(v48 + 17) = v52;
  uint64_t v53 = (v10 + 18 + v48) & ~v10;
  uint64_t v54 = (v10 + 18 + v49) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v53, v54, v63);
  uint64_t v55 = *(void *)(v9 + 64);
  *(unsigned char *)(v55 + v53) = *(unsigned char *)(v55 + v54);
  unint64_t v56 = ((v10 + (v19 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v10) + v55 + 1;
  unint64_t v57 = v38 + v56;
  unint64_t v58 = (v39 + v56) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v59 = *(void *)(v58 + 16);
  long long v60 = *(_OWORD *)v58;
  unint64_t v61 = v57 & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v61 = v60;
  *(void *)(v61 + 16) = v59;
  return a1;
}

unsigned char *assignWithTake for SearchPrimitiveModifier.DefaultSearchView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v8 | 3;
  uint64_t v81 = *(void *)(a3 + 16);
  unint64_t v79 = a1;
  uint64_t v80 = *(void *)(v81 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v80 + 80);
  uint64_t v11 = v8 | v10 | 7;
  uint64_t v12 = (unint64_t)&a1[v11 + 1] & ~v11;
  uint64_t v13 = (unint64_t)&a2[v11 + 1] & ~v11;
  if (v12 == v13)
  {
    uint64_t v22 = *(void *)(v7 + 64) + ((v8 + 9) & ~v8);
    unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v16 = (v22 & 0xFFFFFFFFFFFFFFF8) + 24;
    uint64_t v24 = (v8 + 16) & ~v9;
  }
  else
  {
    uint64_t v73 = v8 + 9;
    uint64_t v75 = *(void *)(v7 + 64);
    uint64_t v14 = v75 + ((v8 + 9) & ~v8);
    unint64_t v78 = v14 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v15 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + 9;
    unint64_t v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 24;
    uint64_t v77 = (v8 + 16) & ~v9;
    unint64_t v74 = v15;
    if (v15 + v77 <= v16) {
      unint64_t v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    else {
      unint64_t v17 = v15 + v77;
    }
    unsigned int v18 = *(unsigned __int8 *)(v12 + v17);
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v20 = v17;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *(unsigned __int8 *)v12;
          if (v17 < 4) {
            goto LABEL_16;
          }
          goto LABEL_18;
        case 2:
          int v21 = *(unsigned __int16 *)v12;
          if (v17 >= 4) {
            goto LABEL_18;
          }
          goto LABEL_16;
        case 3:
          int v21 = *(unsigned __int16 *)v12 | (*(unsigned __int8 *)(v12 + 2) << 16);
          if (v17 < 4) {
            goto LABEL_16;
          }
          goto LABEL_18;
        case 4:
          int v21 = *(_DWORD *)v12;
          if (v17 < 4) {
LABEL_16:
          }
            unsigned int v18 = (v21 | (v19 << (8 * v17))) + 2;
          else {
LABEL_18:
          }
            unsigned int v18 = v21 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v25 = ~v8;
    uint64_t v26 = ~v9;
    uint64_t v76 = v6;
    if (v18 == 1)
    {
      unint64_t v72 = v16;
      uint64_t v27 = v6;
      swift_release();
      swift_release();
      uint64_t v25 = ~v8;
      uint64_t v28 = v26;
      uint64_t v29 = v27;
      unint64_t v16 = v72;
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))((v8 + ((((v8 + ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & v26) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v8, v29);
    }
    else
    {
      uint64_t v28 = ~v9;
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))((v73 + v12) & v25, v6);
      swift_release();
    }
    unsigned int v30 = *(unsigned __int8 *)(v13 + v17);
    unsigned int v31 = v30 - 2;
    if (v30 >= 2)
    {
      if (v17 <= 3) {
        uint64_t v32 = v17;
      }
      else {
        uint64_t v32 = 4;
      }
      switch(v32)
      {
        case 1:
          int v33 = *(unsigned __int8 *)v13;
          if (v17 >= 4) {
            goto LABEL_36;
          }
          goto LABEL_32;
        case 2:
          int v33 = *(unsigned __int16 *)v13;
          if (v17 >= 4) {
            goto LABEL_36;
          }
          goto LABEL_32;
        case 3:
          int v33 = *(unsigned __int16 *)v13 | (*(unsigned __int8 *)(v13 + 2) << 16);
          if (v17 < 4) {
            goto LABEL_32;
          }
          goto LABEL_36;
        case 4:
          int v33 = *(_DWORD *)v13;
          if (v17 < 4)
          {
LABEL_32:
            unsigned int v30 = (v33 | (v31 << (8 * v17))) + 2;
            break;
          }
LABEL_36:
          if (v33 != -1) {
            goto LABEL_37;
          }
          goto LABEL_34;
        default:
          break;
      }
    }
    if (v30 == 1)
    {
LABEL_34:
      *(void *)uint64_t v12 = *(void *)v13;
      unint64_t v34 = (void *)((v12 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v35 = (void *)((v13 + 15) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v34 = *v35;
      uint64_t v36 = ((unint64_t)v34 + v8 + 8) & v28;
      uint64_t v37 = ((unint64_t)v35 + v8 + 8) & v28;
      *(unsigned char *)uint64_t v36 = *(unsigned char *)v37;
      *(unsigned char *)(v36 | 1) = *(unsigned char *)(v37 | 1);
      *(unsigned char *)(v36 | 2) = *(unsigned char *)(v37 | 2);
      *(unsigned char *)(v36 | 3) = *(unsigned char *)(v37 | 3);
      unint64_t v38 = (v36 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v39 = (v37 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v40 = *(_DWORD *)v39;
      *(unsigned char *)(v38 + 4) = *(unsigned char *)(v39 + 4);
      *(_DWORD *)unint64_t v38 = v40;
      uint64_t v41 = (v8 + 5 + v38) & v25;
      uint64_t v42 = (v8 + 5 + v39) & v25;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v41, v42, v76);
      *(unsigned char *)(v75 + v41) = *(unsigned char *)(v75 + v42);
      unint64_t v43 = (v75 + v41) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v44 = (v75 + v42) & 0xFFFFFFFFFFFFFFFCLL;
      int v45 = *(_DWORD *)(v44 + 4);
      *(unsigned char *)(v43 + 8) = *(unsigned char *)(v44 + 8);
      *(_DWORD *)(v43 + 4) = v45;
      *(unsigned char *)(v12 + v17) = 1;
    }
    else
    {
LABEL_37:
      *(unsigned char *)uint64_t v12 = *(unsigned char *)v13;
      *(unsigned char *)(v12 | 1) = *(unsigned char *)(v13 | 1);
      *(unsigned char *)(v12 | 2) = *(unsigned char *)(v13 | 2);
      *(unsigned char *)(v12 | 3) = *(unsigned char *)(v13 | 3);
      uint64_t v46 = v12 | 4;
      int v47 = *(_DWORD *)(v13 | 4);
      *(unsigned char *)(v46 + 4) = *(unsigned char *)((v13 | 4) + 4);
      *(_DWORD *)uint64_t v46 = v47;
      uint64_t v48 = (v73 + v12) & v25;
      uint64_t v49 = (v73 + v13) & v25;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v48, v49, v76);
      *(unsigned char *)(v75 + v48) = *(unsigned char *)(v75 + v49);
      unint64_t v50 = (v75 + v48) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v51 = (v75 + v49) & 0xFFFFFFFFFFFFFFFCLL;
      int v52 = *(_DWORD *)(v51 + 4);
      *(unsigned char *)(v50 + 8) = *(unsigned char *)(v51 + 8);
      *(_DWORD *)(v50 + 4) = v52;
      *(void *)(((v12 | 7) + v74) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v13 | 7) + v74) & 0xFFFFFFFFFFFFFFF8);
      *(unsigned char *)(v12 + v17) = 0;
    }
    uint64_t v24 = v77;
    unint64_t v23 = v78;
  }
  unint64_t v53 = v24 + v23 + 9;
  if (v53 <= v16) {
    unint64_t v54 = v16;
  }
  else {
    unint64_t v54 = v53;
  }
  uint64_t v55 = v12 | 7;
  unint64_t v56 = ((v12 | 7) + v54 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v57 = ((v13 | 7) + v54 + 1) & 0xFFFFFFFFFFFFFFF8;
  if (v56 != v57)
  {
    unsigned int v58 = *(unsigned __int8 *)(v56 + 17);
    if (v58 >= 2) {
      unsigned int v58 = *(_DWORD *)v56 + 2;
    }
    if (v58 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v59 = *(unsigned __int8 *)(v57 + 17);
    if (v59 >= 2) {
      unsigned int v59 = *(_DWORD *)v57 + 2;
    }
    if (v59 == 1)
    {
      long long v60 = *(_OWORD *)v57;
      *(unsigned char *)(v56 + 16) = *(unsigned char *)(v57 + 16);
      *(_OWORD *)unint64_t v56 = v60;
      char v61 = 1;
    }
    else
    {
      char v61 = 0;
      *(_OWORD *)unint64_t v56 = *(_OWORD *)v57;
    }
    *(unsigned char *)(v56 + 17) = v61;
  }
  uint64_t v62 = (v10 + 18 + v56) & ~v10;
  uint64_t v63 = (v10 + 18 + v57) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v80 + 40))(v62, v63, v81);
  uint64_t v64 = *(void *)(v80 + 64);
  *(unsigned char *)(v64 + v62) = *(unsigned char *)(v64 + v63);
  unint64_t v65 = ((v10 + (v54 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v10) + v64 + 1;
  unint64_t v66 = (v55 + v65) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v67 = ((v13 | 7) + v65) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v66 = *(unsigned char *)v67;
  unint64_t v68 = (_OWORD *)(v66 + 8);
  uint64_t v69 = (_OWORD *)(v67 + 8);
  if (!*(void *)(v66 + 8)) {
    goto LABEL_57;
  }
  if (!*(void *)v69)
  {
    outlined destroy of TriggerSubmitAction(v66 + 8);
LABEL_57:
    _OWORD *v68 = *v69;
    return v79;
  }
  uint64_t v70 = *(void *)(v67 + 16);
  *(void *)(v66 + 8) = *(void *)v69;
  *(void *)(v66 + 16) = v70;
  swift_release();
  return v79;
}

uint64_t getEnumTagSinglePayload for SearchPrimitiveModifier.DefaultSearchView(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for AttributedString() - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = ((v7 + 9) & ~v7) + *(void *)(v6 + 64);
  unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v11 = ((*(_DWORD *)(v6 + 80) & 0xFC ^ 0x1FCu) & (unint64_t)(v7 + 16)) + v9 + 9;
  if (v11 > v10) {
    unint64_t v10 = v11;
  }
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  if (v13 <= 0xFE) {
    int v15 = 254;
  }
  else {
    int v15 = *(_DWORD *)(v12 + 84);
  }
  if (v13 <= 0x7FFFFFFE) {
    unsigned int v16 = 2147483646;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v12 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = v7 | v14 | 7;
  unint64_t v18 = *(void *)(v12 + 64) + ((v14 + (v10 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v14) + 1;
  if (v16 < a2)
  {
    unint64_t v19 = ((v18 + ((v17 + 1) & ~v17) + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
    uint64_t v20 = v19 & 0xFFFFFFF8;
    if ((v19 & 0xFFFFFFF8) != 0) {
      unsigned int v21 = 2;
    }
    else {
      unsigned int v21 = a2 - v16 + 1;
    }
    if (v21 >= 0x10000) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v21 < 0x100) {
      unsigned int v22 = 1;
    }
    if (v21 >= 2) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    switch(v23)
    {
      case 1:
        int v24 = *((unsigned __int8 *)a1 + v19);
        if (!v24) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v24 = *(unsigned __int16 *)((char *)a1 + v19);
        if (v24) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187F4F3FCLL);
      case 4:
        int v24 = *(int *)((char *)a1 + v19);
        if (!v24) {
          break;
        }
LABEL_27:
        int v26 = v24 - 1;
        if (v20)
        {
          int v26 = 0;
          int v27 = *a1;
        }
        else
        {
          int v27 = 0;
        }
        int v31 = v16 + (v27 | v26);
        return (v31 + 1);
      default:
        break;
    }
  }
  uint64_t v28 = ((unint64_t)a1 + v17 + 1) & ~v17;
  if (v15 == v16)
  {
    if (v13 > 0xFE)
    {
      uint64_t v32 = *(uint64_t (**)(unint64_t))(v12 + 48);
      return v32((v14 + ((v10 + v28 + 8) & 0xFFFFFFFFFFFFFFF8) + 18) & ~v14);
    }
    else
    {
      unsigned int v29 = *(unsigned __int8 *)(v28 + v10);
      if (v29 >= 2) {
        return (v29 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    unint64_t v30 = *(void *)((((v28 | 7) + v18) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v30 >= 0xFFFFFFFF) {
      LODWORD(v30) = -1;
    }
    int v31 = v30 - 1;
    if (v31 < 0) {
      int v31 = -1;
    }
    return (v31 + 1);
  }
}

void storeEnumTagSinglePayload for SearchPrimitiveModifier.DefaultSearchView(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for AttributedString() - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = ((v9 + 9) & ~v9) + *(void *)(v8 + 64);
  unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v13 = ((*(_DWORD *)(v8 + 80) & 0xFC ^ 0x1FCu) & (unint64_t)(v9 + 16)) + v11 + 9;
  if (v13 > v12) {
    unint64_t v12 = v13;
  }
  uint64_t v14 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  if (v15 <= 0xFE) {
    int v17 = 254;
  }
  else {
    int v17 = *(_DWORD *)(v14 + 84);
  }
  if (v15 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v14 + 84);
  }
  uint64_t v19 = v9 | v16 | 7;
  unint64_t v20 = *(void *)(v14 + 64) + ((v16 + (v12 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v16) + 1;
  unint64_t v21 = ((v20 + ((v19 + 1) & ~v19) + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v18 >= a3)
  {
    int v24 = 0;
    int v25 = a2 - v18;
    if (a2 <= v18)
    {
LABEL_22:
      switch(v24)
      {
        case 1:
          *((unsigned char *)a1 + v21) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_35;
        case 2:
          *(_WORD *)((char *)a1 + v21) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_35;
        case 3:
          goto LABEL_62;
        case 4:
          *(_DWORD *)((char *)a1 + v21) = 0;
          goto LABEL_34;
        default:
LABEL_34:
          if (a2)
          {
LABEL_35:
            uint64_t v28 = ((unint64_t)a1 + v19 + 1) & ~v19;
            if (v17 == v18)
            {
              if (v15 > 0xFE)
              {
                unint64_t v30 = *(void (**)(unint64_t, uint64_t))(v14 + 56);
                v30((v16 + ((v12 + v28 + 8) & 0xFFFFFFFFFFFFFFF8) + 18) & ~v16, a2);
              }
              else if (a2 > 0xFE)
              {
                size_t v31 = (v12 + 1);
                if (v31 <= 3) {
                  int v32 = ~(-1 << (8 * (v12 + 1)));
                }
                else {
                  int v32 = -1;
                }
                if (v12 != -1)
                {
                  int v33 = v32 & (a2 - 255);
                  if (v31 <= 3) {
                    int v34 = v12 + 1;
                  }
                  else {
                    int v34 = 4;
                  }
                  bzero((void *)v28, v31);
                  switch(v34)
                  {
                    case 2:
                      *(_WORD *)uint64_t v28 = v33;
                      break;
                    case 3:
                      *(_WORD *)uint64_t v28 = v33;
                      *(unsigned char *)(v28 + 2) = BYTE2(v33);
                      break;
                    case 4:
                      *(_DWORD *)uint64_t v28 = v33;
                      break;
                    default:
                      *(unsigned char *)uint64_t v28 = v33;
                      break;
                  }
                }
              }
              else
              {
                *(unsigned char *)(v28 + v12) = -(char)a2;
              }
            }
            else
            {
              unsigned int v29 = (void *)(((v28 | 7) + v20) & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                v29[1] = 0;
                v29[2] = 0;
                void *v29 = (a2 - 0x7FFFFFFF);
              }
              else
              {
                v29[1] = a2;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v20 + ((v19 + 1) & ~v19) + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
      unsigned int v22 = a3 - v18 + 1;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v22 >= 0x10000) {
      int v23 = 4;
    }
    else {
      int v23 = 2;
    }
    if (v22 < 0x100) {
      int v23 = 1;
    }
    if (v22 >= 2) {
      int v24 = v23;
    }
    else {
      int v24 = 0;
    }
    int v25 = a2 - v18;
    if (a2 <= v18) {
      goto LABEL_22;
    }
  }
  if (((v20 + ((v19 + 1) & ~v19) + 7) & 0xFFFFFFF8) == 0xFFFFFFE8) {
    int v26 = v25;
  }
  else {
    int v26 = 1;
  }
  if (((v20 + ((v19 + 1) & ~v19) + 7) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    int v27 = ~v18 + a2;
    bzero(a1, ((v20 + ((v19 + 1) & ~v19) + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
    *a1 = v27;
  }
  switch(v24)
  {
    case 1:
      *((unsigned char *)a1 + v21) = v26;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v21) = v26;
      break;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x187F4F7A0);
    case 4:
      *(_DWORD *)((char *)a1 + v21) = v26;
      break;
    default:
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SearchPrimitiveModifier.SearchConfigModifier(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  unint64_t v9 = v8;
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = ((v9 + 9) & ~v9) + v10;
  unint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 24;
  uint64_t v14 = v8 | 3;
  if (v12 + ((v9 + 16) & ~(v9 | 3)) <= v13) {
    unint64_t v15 = v13;
  }
  else {
    unint64_t v15 = v12 + ((v8 + 16) & ~(v8 | 3));
  }
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80);
  uint64_t v18 = *(void *)(v16 + 64);
  uint64_t v19 = v17 | v8;
  int v20 = (*(_DWORD *)(v16 + 80) | v8) & 0x100000;
  if ((v17 | v9) > 7
    || v20 != 0
    || ((((v17 + (v15 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v17) + v18 + 9) & 0xFFFFFFFFFFFFFFF8) + 24 > 0x18)
  {
    uint64_t v23 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v23 + ((v19 & 0xF8 ^ 0x1F8) & (v19 + 16));
  }
  else
  {
    uint64_t v74 = ((v17 + (v15 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v17) + v18;
    unsigned int v24 = a2[v15];
    unsigned int v25 = v24 - 2;
    if (v24 >= 2)
    {
      if (v15 <= 3) {
        uint64_t v26 = v15;
      }
      else {
        uint64_t v26 = 4;
      }
      switch(v26)
      {
        case 1:
          int v27 = *a2;
          if (v15 < 4) {
            goto LABEL_23;
          }
          goto LABEL_25;
        case 2:
          int v27 = *(unsigned __int16 *)a2;
          if (v15 >= 4) {
            goto LABEL_25;
          }
          goto LABEL_23;
        case 3:
          int v27 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v15 < 4) {
            goto LABEL_23;
          }
          goto LABEL_25;
        case 4:
          int v27 = *(_DWORD *)a2;
          if (v15 < 4) {
LABEL_23:
          }
            unsigned int v24 = (v27 | (v25 << (8 * v15))) + 2;
          else {
LABEL_25:
          }
            unsigned int v24 = v27 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v75 = *(void *)(v16 + 64);
    uint64_t v76 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v77 = *(void *)(a3 + 16);
    unint64_t v78 = a2;
    uint64_t v28 = ~v9;
    unint64_t v73 = v15 + 1;
    if (v24 == 1)
    {
      *(void *)a1 = *(void *)a2;
      unsigned int v29 = (void *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v30 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      void *v29 = *v30;
      uint64_t v31 = ((unint64_t)v29 + v14 + 8) & ~v14;
      uint64_t v32 = ((unint64_t)v30 + v14 + 8) & ~v14;
      *(unsigned char *)uint64_t v31 = *(unsigned char *)v32;
      *(unsigned char *)(v31 | 1) = *(unsigned char *)(v32 | 1);
      *(unsigned char *)(v31 | 2) = *(unsigned char *)(v32 | 2);
      *(unsigned char *)(v31 | 3) = *(unsigned char *)(v32 | 3);
      unint64_t v33 = (v31 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v34 = (v32 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v31) = *(_DWORD *)v34;
      *(unsigned char *)(v33 + 4) = *(unsigned char *)(v34 + 4);
      *(_DWORD *)unint64_t v33 = v31;
      unint64_t v35 = v9 + 5;
      unint64_t v36 = (v35 + v33) & v28;
      unint64_t v37 = (v35 + v34) & v28;
      unint64_t v38 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
      uint64_t v39 = v6;
      swift_retain();
      swift_retain();
      uint64_t v40 = v39;
      uint64_t v41 = a1 + 7;
      v38(v36, v37, v40);
      uint64_t v42 = v36 + v10;
      uint64_t v43 = v37 + v10;
      unint64_t v44 = a2 + 7;
      *(unsigned char *)uint64_t v42 = *(unsigned char *)v43;
      v42 &= 0xFFFFFFFFFFFFFFFCLL;
      v43 &= 0xFFFFFFFFFFFFFFFCLL;
      int v45 = *(_DWORD *)(v43 + 4);
      *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
      *(_DWORD *)(v42 + 4) = v45;
      char v46 = 1;
    }
    else
    {
      *(unsigned char *)a1 = *a2;
      *(unsigned char *)(a1 + 1) = a2[1];
      *(unsigned char *)(a1 + 2) = a2[2];
      *(unsigned char *)(a1 + 3) = a2[3];
      uint64_t v41 = a1 + 7;
      unint64_t v47 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v48 = a2 + 7;
      unint64_t v49 = (unint64_t)(a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v50 = *(_DWORD *)v49;
      *(unsigned char *)(v47 + 4) = *(unsigned char *)(v49 + 4);
      *(_DWORD *)unint64_t v47 = v50;
      uint64_t v51 = (v47 + v9 + 5) & v28;
      uint64_t v52 = (v49 + v9 + 5) & v28;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v51, v52, v6);
      uint64_t v53 = v51 + v10;
      uint64_t v54 = v52 + v10;
      unint64_t v44 = v48;
      *(unsigned char *)uint64_t v53 = *(unsigned char *)v54;
      v53 &= 0xFFFFFFFFFFFFFFFCLL;
      v54 &= 0xFFFFFFFFFFFFFFFCLL;
      int v55 = *(_DWORD *)(v54 + 4);
      *(unsigned char *)(v53 + 8) = *(unsigned char *)(v54 + 8);
      *(_DWORD *)(v53 + 4) = v55;
      *(void *)((a1 + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v48[v12] & 0xFFFFFFFFFFFFFFF8);
      swift_retain();
      char v46 = 0;
    }
    *(unsigned char *)(a1 + v15) = v46;
    unint64_t v56 = (v41 + v73) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v57 = (unint64_t)&v44[v73] & 0xFFFFFFFFFFFFFFF8;
    unsigned int v58 = *(unsigned __int8 *)(v57 + 17);
    if (v58 >= 2) {
      unsigned int v58 = *(_DWORD *)v57 + 2;
    }
    uint64_t v59 = ~v17;
    uint64_t v60 = v74 + 1;
    if (v58 == 1)
    {
      *(void *)unint64_t v56 = *(void *)v57;
      *(void *)(v56 + 8) = *(void *)(v57 + 8);
      *(unsigned char *)(v56 + 16) = *(unsigned char *)(v57 + 16);
      swift_retain();
      char v61 = 1;
    }
    else
    {
      char v61 = 0;
      *(unsigned char *)unint64_t v56 = *(unsigned char *)v57;
      *(void *)(v56 + 8) = *(void *)(v57 + 8);
    }
    swift_retain();
    *(unsigned char *)(v56 + 17) = v61;
    uint64_t v62 = (v17 + 18 + v56) & v59;
    uint64_t v63 = (v17 + 18 + v57) & v59;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v62, v63, v77);
    *(unsigned char *)(v62 + v75) = *(unsigned char *)(v63 + v75);
    *(unsigned char *)(v60 + a1) = v78[v60];
    unint64_t v64 = (v60 + a1) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v65 = (unint64_t)&v78[v60] & 0xFFFFFFFFFFFFFFF8;
    unint64_t v66 = v65 + 8;
    *(unsigned char *)(v64 + 8) = *(unsigned char *)(v65 + 8);
    unint64_t v67 = v64 + 8;
    uint64_t v70 = *(void *)(v65 + 16);
    unint64_t v68 = (_OWORD *)(v65 + 16);
    uint64_t v69 = v70;
    if (!v70)
    {
      *(_OWORD *)(v67 + 8) = *v68;
      return a1;
    }
    uint64_t v71 = *(void *)(v66 + 16);
    *(void *)(v67 + 8) = v69;
    *(void *)(v67 + 16) = v71;
  }
  swift_retain();
  return a1;
}

uint64_t initializeWithTake for SearchPrimitiveModifier.SearchConfigModifier(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = ((v8 + 9) & ~v8) + v9;
  unint64_t v11 = (v10 & 0xFFFFFFFFFFFFFFFCLL) + 9;
  unint64_t v12 = (v10 & 0xFFFFFFFFFFFFFFF8) + 24;
  uint64_t v13 = v8 | 3;
  if (v11 + ((v8 + 16) & ~(v8 | 3)) <= v12) {
    unint64_t v14 = v12;
  }
  else {
    unint64_t v14 = v11 + ((v8 + 16) & ~(v8 | 3));
  }
  unsigned int v15 = a2[v14];
  unsigned int v16 = v15 - 2;
  if (v15 >= 2)
  {
    if (v14 <= 3) {
      uint64_t v17 = v14;
    }
    else {
      uint64_t v17 = 4;
    }
    switch(v17)
    {
      case 1:
        int v18 = *a2;
        if (v14 < 4) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 2:
        int v18 = *(unsigned __int16 *)a2;
        if (v14 >= 4) {
          goto LABEL_16;
        }
        goto LABEL_14;
      case 3:
        int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v14 < 4) {
          goto LABEL_14;
        }
        goto LABEL_16;
      case 4:
        int v18 = *(_DWORD *)a2;
        if (v14 < 4) {
LABEL_14:
        }
          unsigned int v15 = (v18 | (v16 << (8 * v14))) + 2;
        else {
LABEL_16:
        }
          unsigned int v15 = v18 + 2;
        break;
      default:
        break;
    }
  }
  uint64_t v19 = ~v8;
  if (v15 == 1)
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v20 = ~v13;
    unint64_t v21 = (void *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v22 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v21 = *v22;
    uint64_t v23 = (char *)v21 + v13;
    unsigned int v24 = (char *)v22 + v13;
    uint64_t v25 = (unint64_t)(v23 + 8) & v20;
    uint64_t v26 = (unint64_t)(v24 + 8) & v20;
    *(unsigned char *)uint64_t v25 = *(unsigned char *)v26;
    *(unsigned char *)(v25 | 1) = *(unsigned char *)(v26 | 1);
    *(unsigned char *)(v25 | 2) = *(unsigned char *)(v26 | 2);
    *(unsigned char *)(v25 | 3) = *(unsigned char *)(v26 | 3);
    unint64_t v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    LODWORD(v20) = *(_DWORD *)v28;
    *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
    *(_DWORD *)unint64_t v27 = v20;
    uint64_t v29 = v8 + 5;
    unint64_t v30 = (v29 + v27) & v19;
    unint64_t v31 = (v29 + v28) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(v30, v31, v6);
    *(unsigned char *)(v30 + v9) = *(unsigned char *)(v31 + v9);
    unint64_t v32 = (v30 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v33 = (v31 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    int v34 = *(_DWORD *)(v33 + 4);
    *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
    *(_DWORD *)(v32 + 4) = v34;
    char v35 = 1;
  }
  else
  {
    *(unsigned char *)a1 = *a2;
    *(unsigned char *)(a1 + 1) = a2[1];
    *(unsigned char *)(a1 + 2) = a2[2];
    *(unsigned char *)(a1 + 3) = a2[3];
    unint64_t v36 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v37 = (unint64_t)(a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    int v38 = *(_DWORD *)v37;
    *(unsigned char *)(v36 + 4) = *(unsigned char *)(v37 + 4);
    *(_DWORD *)unint64_t v36 = v38;
    uint64_t v39 = (v36 + v8 + 5) & v19;
    uint64_t v40 = (v37 + v8 + 5) & v19;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v39, v40, v6);
    char v35 = 0;
    *(unsigned char *)(v39 + v9) = *(unsigned char *)(v40 + v9);
    unint64_t v41 = (v39 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v42 = (v40 + v9) & 0xFFFFFFFFFFFFFFFCLL;
    int v43 = *(_DWORD *)(v42 + 4);
    *(unsigned char *)(v41 + 8) = *(unsigned char *)(v42 + 8);
    *(_DWORD *)(v41 + 4) = v43;
    *(void *)((a1 + 7 + v11) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
  }
  *(unsigned char *)(a1 + v14) = v35;
  unint64_t v44 = (v14 + 8 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = (unint64_t)&a2[v14 + 8] & 0xFFFFFFFFFFFFFFF8;
  unsigned int v46 = *(unsigned __int8 *)(v45 + 17);
  if (v46 >= 2) {
    unsigned int v46 = *(_DWORD *)v45 + 2;
  }
  if (v46 == 1)
  {
    long long v47 = *(_OWORD *)v45;
    *(unsigned char *)(v44 + 16) = *(unsigned char *)(v45 + 16);
    *(_OWORD *)unint64_t v44 = v47;
    char v48 = 1;
  }
  else
  {
    char v48 = 0;
    *(_OWORD *)unint64_t v44 = *(_OWORD *)v45;
  }
  *(unsigned char *)(v44 + 17) = v48;
  uint64_t v49 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v50 = v49 + 32;
  uint64_t v51 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v52 = (v44 + v51 + 18) & ~v51;
  uint64_t v53 = (v45 + v51 + 18) & ~v51;
  (*(void (**)(uint64_t, uint64_t))(v49 + 32))(v52, v53);
  uint64_t v54 = *(void *)(v50 + 32);
  *(unsigned char *)(v52 + v54) = *(unsigned char *)(v53 + v54);
  unint64_t v55 = v54 + (((v14 & 0xFFFFFFFFFFFFFFF8) + v51 + 26) & ~v51) + 1;
  uint64_t v56 = v55 + a1;
  unint64_t v57 = (unint64_t)&a2[v55];
  *(unsigned char *)uint64_t v56 = *(unsigned char *)v57;
  v56 &= 0xFFFFFFFFFFFFFFF8;
  v57 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v58 = *(void *)(v57 + 24);
  *(_OWORD *)(v56 + 8) = *(_OWORD *)(v57 + 8);
  *(void *)(v56 + 24) = v58;
  return a1;
}

unsigned __int8 *assignWithTake for SearchPrimitiveModifier.SearchConfigModifier(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if (a1 != a2)
  {
    uint64_t v73 = type metadata accessor for AttributedString();
    uint64_t v6 = *(void *)(v73 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v71 = *(void *)(v6 + 64);
    uint64_t v8 = ((v7 + 9) & ~v7) + v71;
    unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + 9;
    unint64_t v10 = (v8 & 0xFFFFFFFFFFFFFFF8) + 24;
    uint64_t v11 = v7 | 3;
    if (v9 + ((v7 + 16) & ~(v7 | 3)) <= v10) {
      unint64_t v12 = v10;
    }
    else {
      unint64_t v12 = v9 + ((v7 + 16) & ~(v7 | 3));
    }
    unsigned int v13 = a1[v12];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v15 = v12;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a1;
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v16 = *(unsigned __int16 *)a1;
          if (v12 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v16 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v12 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v16 = *(_DWORD *)a1;
          if (v12 < 4) {
LABEL_15:
          }
            unsigned int v13 = (v16 | (v14 << (8 * v12))) + 2;
          else {
LABEL_17:
          }
            unsigned int v13 = v16 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v17 = ~v7;
    uint64_t v18 = ~v11;
    if (v13 == 1)
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v7 + ((((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 8) & v18) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v17, v73);
    }
    else
    {
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 5) & v17, v73);
      swift_release();
    }
    unsigned int v19 = a2[v12];
    unsigned int v20 = v19 - 2;
    if (v19 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v21 = v12;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          if (v12 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          if (v12 >= 4) {
            goto LABEL_35;
          }
          goto LABEL_31;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v12 < 4) {
            goto LABEL_31;
          }
          goto LABEL_35;
        case 4:
          int v22 = *(_DWORD *)a2;
          if (v12 < 4)
          {
LABEL_31:
            unsigned int v19 = (v22 | (v20 << (8 * v12))) + 2;
            break;
          }
LABEL_35:
          if (v22 != -1) {
            goto LABEL_36;
          }
          goto LABEL_33;
        default:
          break;
      }
    }
    if (v19 == 1)
    {
LABEL_33:
      *(void *)a1 = *(void *)a2;
      uint64_t v23 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v24 = (void *)((unint64_t)(a2 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v23 = *v24;
      uint64_t v25 = ((unint64_t)v23 + v11 + 8) & v18;
      uint64_t v26 = ((unint64_t)v24 + v11 + 8) & v18;
      *(unsigned char *)uint64_t v25 = *(unsigned char *)v26;
      *(unsigned char *)(v25 | 1) = *(unsigned char *)(v26 | 1);
      *(unsigned char *)(v25 | 2) = *(unsigned char *)(v26 | 2);
      *(unsigned char *)(v25 | 3) = *(unsigned char *)(v26 | 3);
      unint64_t v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v29 = *(_DWORD *)v28;
      *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
      *(_DWORD *)unint64_t v27 = v29;
      uint64_t v30 = v7 + 5;
      uint64_t v31 = (v7 + 5 + v27) & v17;
      unint64_t v32 = (v30 + v28) & v17;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 32))(v31, v32, v73);
      *(unsigned char *)(v31 + v71) = *(unsigned char *)(v32 + v71);
      unint64_t v33 = (v31 + v71) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v34 = (v32 + v71) & 0xFFFFFFFFFFFFFFFCLL;
      int v35 = *(_DWORD *)(v34 + 4);
      *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
      *(_DWORD *)(v33 + 4) = v35;
      a1[v12] = 1;
    }
    else
    {
LABEL_36:
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      unint64_t v36 = (unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v37 = (unint64_t)(a2 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v38 = *(_DWORD *)v37;
      *(unsigned char *)(v36 + 4) = *(unsigned char *)(v37 + 4);
      *(_DWORD *)unint64_t v36 = v38;
      uint64_t v39 = v37 + v7;
      uint64_t v40 = (v36 + v7 + 5) & v17;
      uint64_t v41 = (v39 + 5) & v17;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v40, v41, v73);
      *(unsigned char *)(v40 + v71) = *(unsigned char *)(v41 + v71);
      unint64_t v42 = (v40 + v71) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v43 = (v41 + v71) & 0xFFFFFFFFFFFFFFFCLL;
      int v44 = *(_DWORD *)(v43 + 4);
      *(unsigned char *)(v42 + 8) = *(unsigned char *)(v43 + 8);
      *(_DWORD *)(v42 + 4) = v44;
      *(void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
      a1[v12] = 0;
    }
    uint64_t v3 = a3;
  }
  uint64_t v45 = *(void *)(type metadata accessor for AttributedString() - 8);
  unint64_t v46 = ((*(_DWORD *)(v45 + 80) + 9) & ~(unint64_t)*(_DWORD *)(v45 + 80))
      + *(void *)(v45 + 64);
  unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v48 = (v46 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v49 = ((*(_DWORD *)(v45 + 80) & 0xFC ^ 0x1FCu) & (*(_DWORD *)(v45 + 80) + 16)) + v47 + 9;
  if (v49 <= v48) {
    unint64_t v50 = v48;
  }
  else {
    unint64_t v50 = v49;
  }
  unint64_t v51 = (unint64_t)&a1[v50 + 8] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v52 = (unint64_t)&a2[v50 + 8] & 0xFFFFFFFFFFFFFFF8;
  if (v51 != v52)
  {
    unsigned int v53 = *(unsigned __int8 *)(v51 + 17);
    if (v53 >= 2) {
      unsigned int v53 = *(_DWORD *)v51 + 2;
    }
    if (v53 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v54 = *(unsigned __int8 *)(v52 + 17);
    if (v54 >= 2) {
      unsigned int v54 = *(_DWORD *)v52 + 2;
    }
    if (v54 == 1)
    {
      long long v55 = *(_OWORD *)v52;
      *(unsigned char *)(v51 + 16) = *(unsigned char *)(v52 + 16);
      *(_OWORD *)unint64_t v51 = v55;
      char v56 = 1;
    }
    else
    {
      char v56 = 0;
      *(_OWORD *)unint64_t v51 = *(_OWORD *)v52;
    }
    *(unsigned char *)(v51 + 17) = v56;
  }
  uint64_t v57 = *(void *)(*(void *)(v3 + 16) - 8);
  uint64_t v58 = v57 + 40;
  uint64_t v59 = *(unsigned __int8 *)(v57 + 80);
  uint64_t v60 = (v51 + v59 + 18) & ~v59;
  uint64_t v61 = (v52 + v59 + 18) & ~v59;
  (*(void (**)(uint64_t, uint64_t))(v57 + 40))(v60, v61);
  uint64_t v62 = *(void *)(v58 + 24);
  *(unsigned char *)(v60 + v62) = *(unsigned char *)(v61 + v62);
  unint64_t v63 = v62 + (((v50 & 0xFFFFFFFFFFFFFFF8) + v59 + 26) & ~v59) + 1;
  unint64_t v64 = (unint64_t)&a2[v63];
  a1[v63] = a2[v63];
  unint64_t v65 = (unint64_t)&a1[v63] & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v65 + 8) = *(unsigned char *)((v64 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v66 = v65 + 8;
  unint64_t v67 = (_OWORD *)(v66 + 8);
  unint64_t v68 = (_OWORD *)((v64 & 0xFFFFFFFFFFFFFFF8) + 16);
  if (!*(void *)(v66 + 8)) {
    goto LABEL_56;
  }
  if (!*(void *)v68)
  {
    outlined destroy of TriggerSubmitAction(v66 + 8);
LABEL_56:
    _OWORD *v67 = *v68;
    return a1;
  }
  uint64_t v69 = *(void *)((v64 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v66 + 8) = *(void *)v68;
  *(void *)(v66 + 16) = v69;
  swift_release();
  return a1;
}

void storeEnumTagSinglePayload for SearchPrimitiveModifier.SearchConfigModifier(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for AttributedString() - 8);
  unint64_t v9 = ((*(_DWORD *)(v8 + 80) + 9) & ~(unint64_t)*(_DWORD *)(v8 + 80))
     + *(void *)(v8 + 64);
  unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  unint64_t v12 = ((*(_DWORD *)(v8 + 80) & 0xFC ^ 0x1FCu) & (*(_DWORD *)(v8 + 80) + 16)) + v10 + 9;
  if (v12 <= v11) {
    unint64_t v13 = v11;
  }
  else {
    unint64_t v13 = v12;
  }
  uint64_t v14 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  if (v15 <= 0xFE) {
    int v17 = 254;
  }
  else {
    int v17 = *(_DWORD *)(v14 + 84);
  }
  if (v15 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v14 + 84);
  }
  unint64_t v19 = ((v16 + (v13 & 0xFFFFFFFFFFFFFFF8) + 26) & ~v16) + *(void *)(v14 + 64);
  unint64_t v20 = ((v19 + 9) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v18 >= a3)
  {
    int v23 = 0;
    int v24 = a2 - v18;
    if (a2 <= v18)
    {
LABEL_23:
      size_t v25 = v13 + 1;
      switch(v23)
      {
        case 1:
          a1[v20] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 2:
          *(_WORD *)&a1[v20] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_63;
        case 4:
          *(_DWORD *)&a1[v20] = 0;
          goto LABEL_35;
        default:
LABEL_35:
          if (a2)
          {
LABEL_36:
            if (v17 == v18)
            {
              if (v15 > 0xFE)
              {
                int v29 = *(void (**)(unint64_t, uint64_t))(v14 + 56);
                v29((v16 + ((unint64_t)&a1[v25 + 7] & 0xFFFFFFFFFFFFFFF8) + 18) & ~v16, a2);
              }
              else if (a2 > 0xFE)
              {
                if (v25 <= 3) {
                  int v30 = ~(-1 << (8 * v25));
                }
                else {
                  int v30 = -1;
                }
                if (v13 != -1)
                {
                  int v31 = v30 & (a2 - 255);
                  if (v25 <= 3) {
                    int v32 = v13 + 1;
                  }
                  else {
                    int v32 = 4;
                  }
                  bzero(a1, v25);
                  switch(v32)
                  {
                    case 2:
                      *(_WORD *)a1 = v31;
                      break;
                    case 3:
                      *(_WORD *)a1 = v31;
                      a1[2] = BYTE2(v31);
                      break;
                    case 4:
                      *(_DWORD *)a1 = v31;
                      break;
                    default:
                      *a1 = v31;
                      break;
                  }
                }
              }
              else
              {
                a1[v13] = -(char)a2;
              }
            }
            else
            {
              unint64_t v28 = (void *)((unint64_t)&a1[v19 + 1] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                v28[2] = 0;
                _OWORD v28[3] = 0;
                v28[1] = (a2 - 0x7FFFFFFF);
              }
              else
              {
                v28[2] = a2;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((v19 + 9) & 0xFFFFFFF8) == 0xFFFFFFE8) {
      unsigned int v21 = a3 - v18 + 1;
    }
    else {
      unsigned int v21 = 2;
    }
    if (v21 >= 0x10000) {
      int v22 = 4;
    }
    else {
      int v22 = 2;
    }
    if (v21 < 0x100) {
      int v22 = 1;
    }
    if (v21 >= 2) {
      int v23 = v22;
    }
    else {
      int v23 = 0;
    }
    int v24 = a2 - v18;
    if (a2 <= v18) {
      goto LABEL_23;
    }
  }
  if (((v19 + 9) & 0xFFFFFFF8) == 0xFFFFFFE8) {
    int v26 = v24;
  }
  else {
    int v26 = 1;
  }
  if (((v19 + 9) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    int v27 = ~v18 + a2;
    bzero(a1, ((v19 + 9) & 0xFFFFFFFFFFFFFFF8) + 24);
    *(_DWORD *)a1 = v27;
  }
  switch(v23)
  {
    case 1:
      a1[v20] = v26;
      break;
    case 2:
      *(_WORD *)&a1[v20] = v26;
      break;
    case 3:
LABEL_63:
      __break(1u);
      JUMPOUT(0x187F50B68);
    case 4:
      *(_DWORD *)&a1[v20] = v26;
      break;
    default:
      return;
  }
}

uint64_t assignWithCopy for SearchPrimitiveModifier.ForwardedEnvironment(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8))
  {
    if (v4)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v7;
      swift_retain();
      return a1;
    }
LABEL_7:
    *uint64_t v3 = *v5;
    return a1;
  }
  if (!v4)
  {
    outlined destroy of TriggerSubmitAction(a1 + 8);
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SearchPrimitiveModifier.ForwardedEnvironment(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  if (!v4)
  {
    outlined destroy of TriggerSubmitAction(a1 + 8);
LABEL_5:
    *uint64_t v3 = *v5;
    return a1;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v6;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for IsSearchAllowedInput()
{
  return &type metadata for IsSearchAllowedInput;
}

void *initializeBufferWithCopyOfBuffer for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    uint64_t v5 = *(int *)(a3 + 44);
    uint64_t v6 = (unsigned char *)(a1 + v5);
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v9 = *((void *)v8 - 1);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
    {
      type metadata accessor for SearchFieldState?(0);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      *uint64_t v6 = *v7;
      v6[1] = v7[1];
      *((_WORD *)v6 + 1) = *((_WORD *)v7 + 1);
      *((_DWORD *)v6 + 1) = *((_DWORD *)v7 + 1);
      unsigned char v6[8] = v7[8];
      uint64_t v12 = v8[9];
      unint64_t v13 = &v6[v12];
      uint64_t v14 = &v7[v12];
      uint64_t v15 = type metadata accessor for AttributedString();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
      v6[v8[10]] = v7[v8[10]];
      uint64_t v16 = v8[11];
      int v17 = &v6[v16];
      unsigned int v18 = &v7[v16];
      v17[4] = v18[4];
      *(_DWORD *)int v17 = *(_DWORD *)v18;
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

_DWORD *assignWithCopy for SearchPrimitiveModifier.FocusStoreListFilter(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = (uint64_t)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9((uint64_t)v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      *(unsigned char *)uint64_t v5 = *v6;
      *(unsigned char *)(v5 + 1) = v6[1];
      *(unsigned char *)(v5 + 2) = v6[2];
      *(unsigned char *)(v5 + 3) = v6[3];
      int v23 = *((_DWORD *)v6 + 1);
      *(unsigned char *)(v5 + 8) = v6[8];
      *(_DWORD *)(v5 + 4) = v23;
      uint64_t v24 = v7[9];
      uint64_t v25 = v5 + v24;
      int v26 = &v6[v24];
      uint64_t v27 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v27 - 8) + 24))(v25, v26, v27);
      *(unsigned char *)(v5 + v7[10]) = v6[v7[10]];
      uint64_t v28 = v7[11];
      uint64_t v29 = v5 + v28;
      int v30 = &v6[v28];
      *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
      *(unsigned char *)(v29 + 4) = v30[4];
      return a1;
    }
    outlined destroy of SearchEnvironmentWritingModifier(v5, type metadata accessor for SearchFieldState);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for SearchFieldState?(0);
    memcpy((void *)v5, v6, *(void *)(*(void *)(v21 - 8) + 64));
    return a1;
  }
  *(unsigned char *)uint64_t v5 = *v6;
  *(unsigned char *)(v5 + 1) = v6[1];
  *(unsigned char *)(v5 + 2) = v6[2];
  *(unsigned char *)(v5 + 3) = v6[3];
  int v12 = *((_DWORD *)v6 + 1);
  *(unsigned char *)(v5 + 8) = v6[8];
  *(_DWORD *)(v5 + 4) = v12;
  uint64_t v13 = v7[9];
  uint64_t v14 = v5 + v13;
  uint64_t v15 = &v6[v13];
  uint64_t v16 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
  *(unsigned char *)(v5 + v7[10]) = v6[v7[10]];
  uint64_t v17 = v7[11];
  uint64_t v18 = v5 + v17;
  unint64_t v19 = &v6[v17];
  char v20 = v19[4];
  *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
  *(unsigned char *)(v18 + 4) = v20;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t initializeWithTake for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = (unsigned char *)(a1 + v4);
  uint64_t v6 = (unsigned char *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v8 = *((void *)v7 - 1);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    type metadata accessor for SearchFieldState?(0);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    *uint64_t v5 = *v6;
    v5[1] = v6[1];
    *((_WORD *)v5 + 1) = *((_WORD *)v6 + 1);
    *((_DWORD *)v5 + 1) = *((_DWORD *)v6 + 1);
    v5[8] = v6[8];
    uint64_t v10 = v7[9];
    int v11 = &v5[v10];
    int v12 = &v6[v10];
    uint64_t v13 = type metadata accessor for AttributedString();
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
    v5[v7[10]] = v6[v7[10]];
    uint64_t v14 = v7[11];
    uint64_t v15 = &v5[v14];
    uint64_t v16 = &v6[v14];
    v15[4] = v16[4];
    *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
    (*(void (**)(unsigned char *, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 44);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      *(unsigned char *)uint64_t v5 = *(unsigned char *)v6;
      *(unsigned char *)(v5 + 1) = *(unsigned char *)(v6 + 1);
      *(_WORD *)(v5 + 2) = *(_WORD *)(v6 + 2);
      *(_DWORD *)(v5 + 4) = *(_DWORD *)(v6 + 4);
      *(unsigned char *)(v5 + 8) = *(unsigned char *)(v6 + 8);
      uint64_t v21 = v7[9];
      uint64_t v22 = v5 + v21;
      uint64_t v23 = v6 + v21;
      uint64_t v24 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 40))(v22, v23, v24);
      *(unsigned char *)(v5 + v7[10]) = *(unsigned char *)(v6 + v7[10]);
      uint64_t v25 = v7[11];
      uint64_t v26 = v5 + v25;
      uint64_t v27 = v6 + v25;
      *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
      *(unsigned char *)(v26 + 4) = *(unsigned char *)(v27 + 4);
      return a1;
    }
    outlined destroy of SearchEnvironmentWritingModifier(v5, type metadata accessor for SearchFieldState);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    type metadata accessor for SearchFieldState?(0);
    memcpy((void *)v5, (const void *)v6, *(void *)(*(void *)(v19 - 8) + 64));
    return a1;
  }
  *(unsigned char *)uint64_t v5 = *(unsigned char *)v6;
  *(unsigned char *)(v5 + 1) = *(unsigned char *)(v6 + 1);
  *(_WORD *)(v5 + 2) = *(_WORD *)(v6 + 2);
  *(_DWORD *)(v5 + 4) = *(_DWORD *)(v6 + 4);
  *(unsigned char *)(v5 + 8) = *(unsigned char *)(v6 + 8);
  uint64_t v12 = v7[9];
  uint64_t v13 = v5 + v12;
  uint64_t v14 = v6 + v12;
  uint64_t v15 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  *(unsigned char *)(v5 + v7[10]) = *(unsigned char *)(v6 + v7[10]);
  uint64_t v16 = v7[11];
  uint64_t v17 = v5 + v16;
  uint64_t v18 = v6 + v16;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  (*(void (**)(uint64_t, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F51540);
}

uint64_t sub_187F51540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 44);
  type metadata accessor for SearchFieldState?(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for SearchPrimitiveModifier.FocusStoreListFilter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F515C4);
}

uint64_t sub_187F515C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 44);
  type metadata accessor for SearchFieldState?(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

_UNKNOWN **base witness table accessor for ViewModifier in ResetSearchEnvironmentModifier()
{
  return &protocol witness table for ResetSearchEnvironmentModifier;
}

uint64_t base witness table accessor for _AttributeBody in SearchPrimitiveModifier<A>.MakeIsSearchFocused()
{
  return swift_getWitnessTable();
}

uint64_t specialized SearchPrimitiveModifier.MakeModifier.forwardEnv.getter()
{
  return *(unsigned __int8 *)AGGraphGetValue();
}

uint64_t sub_187F516C0()
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v2 = v1;
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  if (*(void *)(v0 + 48))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v4 = *(int *)(v2 + 32);
  uint64_t v5 = v0 + ((v3 + 112) & ~v3) + v4 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  uint64_t v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return swift_deallocObject();
}

uint64_t sub_187F517F4()
{
  return swift_getWitnessTable();
}

uint64_t sub_187F519E8()
{
  return swift_getWitnessTable();
}

uint64_t MenuControlGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance MenuControlGroupStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

uint64_t CompactMenuControlGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in MenuControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in CompactMenuControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance CompactMenuControlGroupStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  return result;
}

ValueMetadata *type metadata accessor for MenuControlGroupStyle()
{
  return &type metadata for MenuControlGroupStyle;
}

ValueMetadata *type metadata accessor for CompactMenuControlGroupStyle()
{
  return &type metadata for CompactMenuControlGroupStyle;
}

unint64_t lazy protocol witness table accessor for type MenuControlGroupStyleBase and conformance MenuControlGroupStyleBase()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuControlGroupStyleBase and conformance MenuControlGroupStyleBase;
  if (!lazy protocol witness table cache variable for type MenuControlGroupStyleBase and conformance MenuControlGroupStyleBase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuControlGroupStyleBase and conformance MenuControlGroupStyleBase);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MenuControlGroupSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187F51D3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MenuControlGroupSize()
{
  return &type metadata for MenuControlGroupSize;
}

uint64_t initializeWithCopy for MenuControlGroupStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t *assignWithCopy for MenuControlGroupStyleBase(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  a1[2] = *(void *)(a2 + 16);
  *((unsigned char *)a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t *assignWithTake for MenuControlGroupStyleBase(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  a1[2] = a2[2];
  *((unsigned char *)a1 + 24) = *((unsigned char *)a2 + 24);
  return a1;
}

void *type metadata accessor for MenuControlGroupStyleBase()
{
  return &unk_1ED4473B8;
}

unint64_t lazy protocol witness table accessor for type MenuControlGroupSize and conformance MenuControlGroupSize()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuControlGroupSize and conformance MenuControlGroupSize;
  if (!lazy protocol witness table cache variable for type MenuControlGroupSize and conformance MenuControlGroupSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuControlGroupSize and conformance MenuControlGroupSize);
  }
  return result;
}

uint64_t MenuControlGroupStyleBase.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  char v6 = *(unsigned char *)(v1 + 24);
  uint64_t v13 = static VerticalAlignment.center.getter();
  outlined copy of Environment<Bool>.Content(v3, v4);
  int v7 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool?>.Content(v3, v4);
  BOOL v8 = v7 == 2;
  uint64_t KeyPath = swift_getKeyPath();
  Namespace.wrappedValue.getter();
  _print_unlocked<A, B>(_:_:)();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = 0xE000000000000000;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v3;
  *(unsigned char *)(v11 + 24) = v4;
  *(void *)(v11 + 32) = v5;
  *(unsigned char *)(v11 + 40) = v6;
  *(void *)a1 = v13;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 17) = v8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = KeyPath;
  *(unsigned char *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = partial apply for closure #1 in View.platformItemIdentifier(_:);
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = partial apply for closure #3 in MenuControlGroupStyleBase.body.getter;
  *(void *)(a1 + 96) = v11;
  return outlined copy of Environment<Bool>.Content(v3, v4);
}

uint64_t EnvironmentValues.menuControlGroupSize.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuControlGroupSizeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuControlGroupSizeKey>, (uint64_t)&unk_1ED43F550, (uint64_t)&protocol witness table for MenuControlGroupSizeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuControlGroupSizeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuControlGroupSizeKey>, (uint64_t)&unk_1ED43F550, (uint64_t)&protocol witness table for MenuControlGroupSizeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.menuControlGroupSize : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.menuControlGroupSize.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.menuControlGroupSize : EnvironmentValues()
{
  return EnvironmentValues.menuControlGroupSize.setter();
}

uint64_t EnvironmentValues.menuControlGroupSize.setter()
{
  type metadata accessor for EnvironmentPropertyKey<MenuControlGroupSizeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuControlGroupSizeKey>, (uint64_t)&unk_1ED43F550, (uint64_t)&protocol witness table for MenuControlGroupSizeKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void closure #3 in MenuControlGroupStyleBase.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BOOL a5)
{
  uint64_t v5 = *(void **)a1;
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (v6)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
    }
      uint64_t v5 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    unint64_t v9 = 0;
    a5 = !a5;
    do
    {
      if (v9 >= v5[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      unint64_t v10 = v9 + 1;
      uint64_t v11 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
      unint64_t v12 = (unint64_t)v5
          + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))
          + *(void *)(v11 + 72) * v9;
      uint64_t v13 = *(void **)(v12 + 296);
      uint64_t v14 = *(void *)(v12 + 304);
      uint64_t v15 = *(void *)(v12 + 312);
      uint64_t v16 = *(void *)(v12 + 320);
      unint64_t v17 = *(void *)(v12 + 328);
      uint64_t v18 = *(void *)(v12 + 336);
      uint64_t v19 = *(void *)(v12 + 344);
      uint64_t v20 = *(void *)(v12 + 352);
      long long v21 = *(_OWORD *)(v12 + 360);
      long long v22 = *(_OWORD *)(v12 + 376);
      uint64_t v23 = *(void *)(v12 + 392);
      *(void *)(v12 + 296) = 4;
      *(void *)(v12 + 304) = 0;
      *(void *)(v12 + 312) = 0;
      *(void *)(v12 + 320) = 0;
      *(void *)(v12 + 328) = 0xC000000000000000;
      *(_OWORD *)(v12 + 368) = 0u;
      *(_OWORD *)(v12 + 384) = 0u;
      *(_OWORD *)(v12 + 336) = 0u;
      *(_OWORD *)(v12 + 352) = 0u;
      outlined consume of PlatformItemList.Item.SystemItem?(v13, v14, v15, v16, v17, v18, v19, v20, v21, *((uint64_t *)&v21 + 1), v22, SBYTE8(v22), v23);
      *(unsigned char *)(v12 + 633) = a5;
      unint64_t v9 = v10;
    }
    while (v6 != v10);
    *(void *)a1 = v5;
  }
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MenuControlGroupStyleBase()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t associated type witness table accessor for View.Body : View in MenuControlGroupStyleBase()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187F524E8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.menuControlGroupSize.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187F52524()
{
  return EnvironmentValues.menuControlGroupSize.setter();
}

uint64_t sub_187F5254C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187F52584()
{
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));

  return swift_deallocObject();
}

void partial apply for closure #3 in MenuControlGroupStyleBase.body.getter(uint64_t a1)
{
  closure #3 in MenuControlGroupStyleBase.body.getter(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<MenuControlGroupSizeKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MenuControlGroupSizeKey>, (uint64_t)&unk_1ED43F550, (uint64_t)&protocol witness table for MenuControlGroupSizeKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuControlGroupSizeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>();
    type metadata accessor for EnvironmentPropertyKey<MenuControlGroupSizeKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>)
  {
    type metadata accessor for Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>();
    type metadata accessor for _EnvironmentKeyWritingModifier<MenuControlGroupSize?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>);
    }
  }
}

void type metadata accessor for Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>)
  {
    type metadata accessor for HStack<ControlGroupStyleConfiguration.Label?>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<MenuControlGroupSize?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Label?> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<ControlGroupStyleConfiguration.Label?>);
    unint64_t v0 = type metadata accessor for Menu();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>);
    }
  }
}

void type metadata accessor for HStack<ControlGroupStyleConfiguration.Label?>()
{
  if (!lazy cache variable for type metadata for HStack<ControlGroupStyleConfiguration.Label?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ControlGroupStyleConfiguration.Label?);
    lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ControlGroupStyleConfiguration.Label?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ControlGroupStyleConfiguration.Label?);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ControlGroupStyleConfiguration.Label? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<MenuControlGroupSize?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<MenuControlGroupSize?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MenuControlGroupSize?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for MenuControlGroupSize?);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MenuControlGroupSize?>);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<MenuControlGroupSizeKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<MenuControlGroupSize?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>, (void (*)(uint64_t))type metadata accessor for Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<MenuControlGroupSize?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<MenuControlGroupSize?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<MenuControlGroupSize?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void *type metadata accessor for MenuControlGroupSizeKey()
{
  return &unk_1ED43F550;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    type metadata accessor for EnvironmentPropertyKey<MenuControlGroupSizeKey>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label?>, ControlGroupStyleConfiguration.Content>, _EnvironmentKeyWritingModifier<MenuControlGroupSize?>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
    }
  }
}

uint64_t static Group<A>._makeToolbar(content:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 14);
  uint64_t v11 = a2[8];
  int v12 = *((_DWORD *)a2 + 18);
  LODWORD(v17) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  long long v16 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v17 = v7;
  int v18 = v8;
  uint64_t v19 = v9;
  uint64_t v20 = v13;
  uint64_t v21 = v14;
  long long v22 = v16;
  int v23 = v10;
  uint64_t v24 = v11;
  int v25 = v12;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(v26, &v17, a3, a4);
}

uint64_t partial apply for closure #1 in static Group<A>._makeToolbar(content:inputs:)(uint64_t a1)
{
  return closure #1 in static Group<A>._makeToolbar(content:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t static Group<A>._makeContent(content:inputs:resolved:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[5];
  LODWORD(v16) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v16 = v9;
  int v17 = v10;
  uint64_t v18 = v11;
  uint64_t v19 = v13;
  uint64_t v20 = v14;
  uint64_t v21 = v12;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t))(a5 + 40))(v22, &v16, a3, a4, a5);
}

uint64_t closure #1 in static Group<A>._makeToolbar(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[2] = type metadata accessor for Group();
  v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a4, (uint64_t)v10, a2, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v10[5];
}

uint64_t partial apply for closure #1 in static Group<A>._makeContent(content:inputs:resolved:)(uint64_t a1)
{
  return closure #1 in static Group<A>._makeToolbar(content:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeToolbar(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static ToolbarContent._makeContent(content:inputs:resolved:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static Group<A>._makeContent(content:inputs:resolved:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a5 - 8));
}

void TupleToolbarContent.body.getter()
{
}

void protocol witness for ToolbarContent.body.getter in conformance TupleToolbarContent<A>()
{
}

uint64_t getEnumTagSinglePayload for TupleToolbarContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TupleToolbarContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187F534D4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t initializeWithCopy for TupleToolbarContent.Visitor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleToolbarContent.Visitor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TupleToolbarContent.Visitor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t static Text.Transition.identity.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v2 = static Text.Transition.identity;
  char v3 = word_1E9030D9C;
  int v4 = dword_1E9030D98;
  unint64_t v5 = dword_1E9030D98 | ((unint64_t)word_1E9030D9C << 32);
  char v6 = byte_1E9030D9E;
  *(void *)a1 = static Text.Transition.identity;
  *(unsigned char *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  char v7 = HIBYTE(word_1E9030D9C);
  *(unsigned char *)(a1 + 13) = HIBYTE(word_1E9030D9C);
  *(unsigned char *)(a1 + 14) = v6;

  return outlined copy of ContentTransition.Storage(v2, v5, v7);
}

uint64_t one-time initialization function for opacity()
{
  uint64_t result = static ContentTransition.opacity.getter();
  static Text.Transition.opacity = v1;
  word_1E9030DAC = v3;
  dword_1E9030DA8 = v2;
  byte_1E9030DAE = v4;
  return result;
}

uint64_t static Text.Transition.opacity.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for opacity != -1) {
    swift_once();
  }
  uint64_t v2 = static Text.Transition.opacity;
  char v3 = word_1E9030DAC;
  int v4 = dword_1E9030DA8;
  unint64_t v5 = dword_1E9030DA8 | ((unint64_t)word_1E9030DAC << 32);
  char v6 = byte_1E9030DAE;
  *(void *)a1 = static Text.Transition.opacity;
  *(unsigned char *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  char v7 = HIBYTE(word_1E9030DAC);
  *(unsigned char *)(a1 + 13) = HIBYTE(word_1E9030DAC);
  *(unsigned char *)(a1 + 14) = v6;

  return outlined copy of ContentTransition.Storage(v2, v5, v7);
}

uint64_t one-time initialization function for interpolate()
{
  uint64_t result = static ContentTransition.interpolate.getter();
  static Text.Transition.interpolate = v1;
  word_1E9030DBC = v3;
  dword_1E9030DB8 = v2;
  byte_1E9030DBE = v4;
  return result;
}

uint64_t static Text.Transition.interpolate.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for interpolate != -1) {
    swift_once();
  }
  uint64_t v2 = static Text.Transition.interpolate;
  char v3 = word_1E9030DBC;
  int v4 = dword_1E9030DB8;
  unint64_t v5 = dword_1E9030DB8 | ((unint64_t)word_1E9030DBC << 32);
  char v6 = byte_1E9030DBE;
  *(void *)a1 = static Text.Transition.interpolate;
  *(unsigned char *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v4;
  char v7 = HIBYTE(word_1E9030DBC);
  *(unsigned char *)(a1 + 13) = HIBYTE(word_1E9030DBC);
  *(unsigned char *)(a1 + 14) = v6;

  return outlined copy of ContentTransition.Storage(v2, v5, v7);
}

uint64_t View.textTransition(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();

  return swift_release();
}

uint64_t EnvironmentValues.textTransition.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.contentTransition.getter();
  *(void *)a1 = v3;
  *(_WORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 14) = v6;
  return result;
}

uint64_t sub_187F53AC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.contentTransition.getter();
  *(void *)a1 = v3;
  *(_WORD *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 14) = v6;
  return result;
}

uint64_t sub_187F53B20(uint64_t a1)
{
  return key path setter for EnvironmentValues.textTransition : EnvironmentValues, serialized(a1);
}

uint64_t EnvironmentValues.textTransition.setter()
{
  return EnvironmentValues.contentTransition.setter();
}

uint64_t key path setter for EnvironmentValues.textTransition : EnvironmentValues, serialized(uint64_t a1)
{
  return EnvironmentValues.contentTransition.setter();
}

uint64_t (*EnvironmentValues.textTransition.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  EnvironmentValues.contentTransition.getter();
  *(void *)a1 = v4;
  *(_WORD *)(a1 + 12) = v6;
  *(_DWORD *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 14) = v7;
  return EnvironmentValues.textTransition.modify;
}

uint64_t EnvironmentValues.textTransition.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  char v4 = *(unsigned char *)(a1 + 13);
  if ((a2 & 1) == 0) {
    return EnvironmentValues.contentTransition.setter();
  }
  outlined copy of ContentTransition.Storage(v2, v3, v4);
  EnvironmentValues.contentTransition.setter();

  return outlined consume of ContentTransition.Storage(v2, v3, v4);
}

uint64_t EnvironmentValues.textTransitionAddsDrawingGroup.getter()
{
  return EnvironmentValues.contentTransitionAddsDrawingGroup.getter() & 1;
}

uint64_t (*EnvironmentValues.textTransitionAddsDrawingGroup.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = EnvironmentValues.contentTransitionAddsDrawingGroup.getter() & 1;
  return EnvironmentValues.textTransitionAddsDrawingGroup.modify;
}

uint64_t EnvironmentValues.textTransitionAddsDrawingGroup.modify()
{
  return EnvironmentValues.contentTransitionAddsDrawingGroup.setter();
}

uint64_t sub_187F53DEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.contentTransition.getter();
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 12) = v5;
  *(unsigned char *)(a1 + 14) = v6;
  return result;
}

uint64_t sub_187F53E48(uint64_t a1)
{
  return key path setter for EnvironmentValues.textTransition : EnvironmentValues, serialized(a1);
}

uint64_t sub_187F53E60@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.contentTransitionAddsDrawingGroup.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187F53EA0()
{
  return EnvironmentValues.contentTransitionAddsDrawingGroup.setter();
}

uint64_t destroy for Text.Transition(uint64_t a1)
{
  return outlined consume of ContentTransition.Storage(*(void *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32), *(unsigned char *)(a1 + 13));
}

uint64_t initializeBufferWithCopyOfBuffer for Text.Transition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 12);
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(void *)a2, v6 | (v5 << 32), v7);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 12) = v5;
  *(_DWORD *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 13) = v7;
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  return a1;
}

uint64_t assignWithCopy for Text.Transition(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 12);
  uint64_t v6 = *(unsigned int *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 13);
  outlined copy of ContentTransition.Storage(*(void *)a2, v6 | (v5 << 32), v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 12) = v5;
  char v10 = *(unsigned char *)(a1 + 13);
  *(unsigned char *)(a1 + 13) = v7;
  outlined consume of ContentTransition.Storage(v8, v9, v10);
  *(unsigned char *)(a1 + 14) = *(unsigned char *)(a2 + 14);
  return a1;
}

void *__swift_memcpy15_8(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 7) = *(uint64_t *)((char *)a2 + 7);
  *uint64_t result = v2;
  return result;
}

uint64_t assignWithTake for Text.Transition(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  __int16 v5 = *((_WORD *)a2 + 6);
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32);
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v6;
  char v9 = *(unsigned char *)(a1 + 13);
  *(_WORD *)(a1 + 12) = v5;
  outlined consume of ContentTransition.Storage(v7, v8, v9);
  *(unsigned char *)(a1 + 14) = *((unsigned char *)a2 + 14);
  return a1;
}

uint64_t getEnumTagSinglePayload for Text.Transition(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 15)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 14);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Text.Transition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 14) = 0;
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 15) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 15) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 14) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Text.Transition()
{
  return &type metadata for Text.Transition;
}

uint64_t sub_187F5410C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.Transition>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Transition>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Transition>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.Transition> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Transition> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Transition> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.Transition>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Transition> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

BOOL static NSUserActivity.TypedPayloadError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void NSUserActivity.TypedPayloadError.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int NSUserActivity.TypedPayloadError.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void NSUserActivity.typedPayload<A>(_:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  id v7 = objc_msgSend(v3, sel_userInfo);
  if (v7)
  {
    unint64_t v8 = v7;
    uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    type metadata accessor for DictionaryDecoder();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = 0;
    *(void *)(inited + 24) = 0;
    *(unsigned char *)(inited + 32) = 2;
    *(void *)(inited + 40) = 1;
    *(_OWORD *)(inited + 48) = 0u;
    *(_OWORD *)(inited + 64) = 0u;
    *(_OWORD *)(inited + 80) = 0u;
    *(_OWORD *)(inited + 96) = 0u;
    *(void *)(inited + 112) = 0;
    *(void *)(inited + 120) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    type metadata accessor for _ContiguousArrayStorage<(Any, Any)>();
    uint64_t v11 = swift_allocObject();
    uint64_t v12 = MEMORY[0x1E4FBB1A0];
    *(_OWORD *)(v11 + 16) = xmmword_18834BB80;
    *(void *)(v11 + 56) = v12;
    strcpy((char *)(v11 + 32), "__DICTIONARY__");
    *(unsigned char *)(v11 + 47) = -18;
    type metadata accessor for [AnyHashable : Any]();
    *(void *)(v11 + 88) = v13;
    *(void *)(v11 + 64) = v9;
    type metadata accessor for NSDictionary();
    unsigned int v14 = NSDictionary.init(dictionaryLiteral:)();
    DictionaryDecoder.decode<A>(_:from:)(a1, v14, a1, a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    lazy protocol witness table accessor for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError();
    swift_allocError();
    *int v15 = 0;
    swift_willThrow();
  }
}

unint64_t lazy protocol witness table accessor for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError()
{
  unint64_t result = lazy protocol witness table cache variable for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError;
  if (!lazy protocol witness table cache variable for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError;
  if (!lazy protocol witness table cache variable for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(Any, Any)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>)
  {
    type metadata accessor for (Any, Any)();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>);
    }
  }
}

unint64_t type metadata accessor for NSDictionary()
{
  unint64_t result = lazy cache variable for type metadata for NSDictionary;
  if (!lazy cache variable for type metadata for NSDictionary)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
  }
  return result;
}

void NSUserActivity.setTypedPayload<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = v4;
  type metadata accessor for DictionaryEncoder();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 24) = 0;
  *(void *)(inited + 32) = 0;
  *(void *)(inited + 16) = 0;
  *(unsigned char *)(inited + 40) = 2;
  *(void *)(inited + 48) = 1;
  *(_OWORD *)(inited + 56) = 0u;
  *(_OWORD *)(inited + 72) = 0u;
  *(_OWORD *)(inited + 88) = 0u;
  *(_OWORD *)(inited + 104) = 0u;
  *(void *)(inited + 120) = 0;
  *(void *)(inited + 128) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v11 = DictionaryEncoder.encode<A>(_:)(a1, a2, a4);
  if (v5)
  {
    swift_release();
    return;
  }
  uint64_t v12 = v11;
  strcpy((char *)v16, "__DICTIONARY__");
  HIBYTE(v16[0]) = -18;
  id v13 = objc_msgSend(v11, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(), v16[0]);
  swift_unknownObjectRelease();
  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  outlined init with take of Any?((uint64_t)v16, (uint64_t)v17);
  if (v18)
  {
    type metadata accessor for [AnyHashable : Any]();
    if (swift_dynamicCast())
    {
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v6, sel_setUserInfo_, isa);

      swift_setDeallocating();
      outlined consume of DictionaryEncoder.DateEncodingStrategy(*(void *)(inited + 24), *(void *)(inited + 32), *(unsigned __int8 *)(inited + 40));
      outlined consume of DictionaryDecoder.DataDecodingStrategy(*(void *)(inited + 48), *(void *)(inited + 56));
      outlined consume of DictionaryDecoder.NonConformingFloatDecodingStrategy(*(void *)(inited + 64), *(void *)(inited + 72));
      outlined consume of DictionaryDecoder.DataDecodingStrategy(*(void *)(inited + 112), *(void *)(inited + 120));
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v17);
  }
  lazy protocol witness table accessor for type NSUserActivity.TypedPayloadError and conformance NSUserActivity.TypedPayloadError();
  swift_allocError();
  *int v15 = 1;
  swift_willThrow();
  swift_release();
}

unsigned char *storeEnumTagSinglePayload for NSUserActivity.TypedPayloadError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187F54958);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NSUserActivity.TypedPayloadError()
{
  return &type metadata for NSUserActivity.TypedPayloadError;
}

void UIKitRichTextEditor.makeUIView(context:)(_OWORD *a1)
{
  uint64_t v2 = type metadata accessor for AttributedString();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unsigned int v6 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v7 = a1[1];
  long long v59 = *a1;
  long long v60 = v7;
  long long v8 = a1[2];
  long long v9 = a1[1];
  long long v62 = *a1;
  long long v63 = v9;
  char v64 = *((unsigned char *)a1 + 32);
  long long v61 = v8;
  uint64_t v10 = v9;
  uint64_t v49 = v4;
  uint64_t v48 = v3;
  if (v64 == 1)
  {
    MEMORY[0x1F4188790](v4);
    v44[-2] = (id)__ROR8__(v10, 32);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>((uint64_t)&v59);
    outlined retain of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)&v62);
    static Update.ensure<A>(_:)();
    outlined release of PlatformViewRepresentableContext<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)&v62);
    outlined release of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>((uint64_t)&v59);
    uint64_t v11 = *((void *)&v58 + 1);
    uint64_t v10 = v58;
  }
  else
  {
    uint64_t v11 = *((void *)&v63 + 1);
    unsigned long long v58 = __PAIR128__(*((unint64_t *)&v63 + 1), v9);
    swift_retain();
    swift_retain();
  }
  v57[0] = v10;
  v57[1] = v11;
  RichTextAttributeResolver.init(environment:)(v57, &aBlock);
  uint64_t v12 = aBlock;
  uint64_t v13 = v51;
  unsigned int v14 = v52;
  uint64_t v15 = *((void *)&v61 + 1);
  uint64_t v16 = (void *)(*((void *)&v61 + 1) + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver);
  uint64_t v17 = *(void *)(*((void *)&v61 + 1) + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver);
  uint64_t v18 = *(void *)(*((void *)&v61 + 1)
                  + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver
                  + 8);
  uint64_t v19 = *(void *)(*((void *)&v61 + 1)
                  + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver
                  + 16);
  *uint64_t v16 = aBlock;
  v16[1] = v13;
  _OWORD v16[2] = v14;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined consume of RichTextAttributeResolver?(v17, v18, v19);
  id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0888]), sel_init);
  id v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0890]), (SEL)&off_1E53BA618);
  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB0880]), (SEL)&off_1E53BA618);
  objc_msgSend(v20, sel_addTextLayoutManager_, v21);
  id v46 = v21;
  id v45 = v22;
  objc_msgSend(v21, sel_setTextContainer_, v22);
  uint64_t v23 = OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textContentStorage;
  uint64_t v47 = v15;
  uint64_t v24 = *(void **)(v15 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textContentStorage);
  *(void *)(v15 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textContentStorage) = v20;
  v44[0] = v20;

  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0]();
  int v25 = (objc_class *)type metadata accessor for NSSwiftMutableAttributedString(0);
  uint64_t v26 = (char *)objc_allocWithZone(v25);
  uint64_t v27 = &v26[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
  uint64_t v28 = v48;
  uint64_t v29 = v49;
  (*(void (**)(char *, char *, uint64_t))(v48 + 16))(&v26[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage], v6, v49);
  int v30 = &v27[*(int *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) + 20)];
  *(void *)int v30 = v12;
  *((void *)v30 + 1) = v13;
  *((void *)v30 + 2) = v14;
  v56.receiver = v26;
  v56.super_class = v25;
  v44[1] = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v31 = objc_msgSendSuper2(&v56, sel_init);
  int v32 = v6;
  uint64_t v33 = v47;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v32, v29);
  unint64_t v34 = *(void **)(v33 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textStorage);
  *(void *)(v33 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textStorage) = v31;

  int v35 = *(void **)(v33 + v23);
  if (v35)
  {
    unint64_t v36 = (_OWORD *)swift_allocObject();
    long long v37 = v60;
    v36[1] = v59;
    v36[2] = v37;
    v36[3] = v61;
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = partial apply for closure #1 in UIKitRichTextEditor.makeUIView(context:);
    *(void *)(v38 + 24) = v36;
    unsigned int v54 = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
    uint64_t v55 = v38;
    uint64_t aBlock = (void *)MEMORY[0x1E4F143A8];
    uint64_t v51 = 1107296256;
    unint64_t v52 = thunk for @escaping @callee_guaranteed () -> ();
    unsigned int v53 = &block_descriptor_17_4;
    uint64_t v39 = _Block_copy(&aBlock);
    outlined retain of PlatformViewRepresentableContext<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>((uint64_t)&v59);
    id v40 = v35;
    swift_retain();
    swift_release();
    objc_msgSend(v40, sel_performEditingTransactionUsingBlock_, v39);

    _Block_release(v39);
    LOBYTE(v39) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v39 & 1) == 0)
    {
      id v41 = objc_allocWithZone((Class)type metadata accessor for TextEditorTextView());
      unint64_t v42 = v45;
      id v43 = objc_msgSend(v41, sel_initWithFrame_textContainer_, v45, 0.0, 0.0, 0.0, 0.0);
      objc_msgSend(v43, sel_setDelegate_, v33);
      objc_msgSend(v43, sel_setAllowsEditingTextAttributes_, 1);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t UIKitRichTextEditor.updateUIView(_:context:)(char *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  unsigned int v6 = *(void **)(a2 + 40);
  if (*(unsigned char *)(a2 + 32) == 1)
  {
    MEMORY[0x1F4188790](a1);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    id v7 = v6;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);

    uint64_t v4 = v9;
    uint64_t v5 = v10;
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  specialized UIKitTextInputTraits.updateTraits(in:)(v4, v5);
  specialized UITextInputTraits_Private.updatePrivateTraits(in:)(v4, v5);
  uint64_t v9 = v4;
  uint64_t v10 = v5;
  UIKitRichTextEditorCoordinator.update(_:configuration:env:)(a1, v2, &v9);
  uint64_t v9 = v4;
  uint64_t v10 = v5;
  specialized UIKitTextEditorCoordinatorBase.updateInputAccessoryGenerator(textView:env:)(a1, (uint64_t)&v9);
  swift_release();
  return swift_release();
}

uint64_t UIKitRichTextEditorCoordinator.update(_:configuration:env:)(char *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v36 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a3;
  uint64_t v11 = a3[1];
  uint64_t v12 = (uint64_t)&v3[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_configuration];
  swift_beginAccess();
  outlined assign with copy of UIKitRichTextEditor(a2, v12);
  uint64_t result = swift_endAccess();
  long long v37 = v3;
  unsigned int v14 = (uint64_t *)&v3[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver];
  if (!*(void *)&v3[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver + 16])
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t *v14 = v10;
  v14[1] = v11;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  *(void *)&v54[0] = v10;
  *((void *)&v54[0] + 1) = v11;
  specialized UIKitTextEditorCoordinatorBase.updateFindInteraction(textView:env:)(a1, (uint64_t)v54);
  uint64_t v15 = TextEditorTextView.helper.getter();
  *(void *)&long long v39 = v10;
  *((void *)&v39 + 1) = v11;
  swift_retain();
  swift_retain();
  ScrollEnvironmentProperties.init(environment:)((uint64_t)&v39, (uint64_t)v54);
  uint64_t v16 = (uint64_t)&v15[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_properties];
  swift_beginAccess();
  outlined init with copy of ScrollEnvironmentProperties(v16, (uint64_t)&v39);
  swift_beginAccess();
  outlined assign with copy of ScrollEnvironmentProperties((uint64_t)v54, v16);
  swift_endAccess();
  ScrollViewHelper.didChangeProperties(from:)((uint64_t)&v39);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v54);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v39);

  uint64_t v17 = TextEditorTextView.helper.getter();
  *(void *)&long long v39 = v10;
  *((void *)&v39 + 1) = v11;
  EnvironmentValues.contentMarginProxy.getter((uint64_t)v54);
  uint64_t v18 = &v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins];
  long long v51 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 192];
  long long v52 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 208];
  v53[0] = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 224];
  *(_OWORD *)((char *)v53 + 9) = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 233];
  long long v47 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 128];
  long long v48 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 144];
  long long v49 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 160];
  long long v50 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 176];
  long long v43 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 64];
  long long v44 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 80];
  long long v45 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 96];
  long long v46 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 112];
  long long v39 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins];
  long long v40 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 16];
  long long v41 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 32];
  long long v42 = *(_OWORD *)&v17[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_contentMargins + 48];
  v18[12] = v54[12];
  v18[13] = v54[13];
  v18[14] = v55[0];
  *(_OWORD *)((char *)v18 + 233) = *(_OWORD *)((char *)v55 + 9);
  v18[8] = v54[8];
  v18[9] = v54[9];
  v18[10] = v54[10];
  v18[11] = v54[11];
  void v18[4] = v54[4];
  v18[5] = v54[5];
  v18[6] = v54[6];
  v18[7] = v54[7];
  *uint64_t v18 = v54[0];
  v18[1] = v54[1];
  v18[2] = v54[2];
  v18[3] = v54[3];
  ScrollViewHelper.didChangeMargins(from:)(&v39);

  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F41638]);
  uint64_t result = MEMORY[0x18C113DA0]();
  uint64_t v19 = v14[2];
  if (!v19)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v21 = *v14;
  uint64_t v20 = v14[1];
  id v22 = (objc_class *)type metadata accessor for NSSwiftMutableAttributedString(0);
  uint64_t v23 = (char *)objc_allocWithZone(v22);
  uint64_t v24 = &v23[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage];
  uint64_t v25 = v36;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&v23[OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage], v9, v36);
  uint64_t v26 = &v24[*(int *)(type metadata accessor for _NSSwiftAttributedStringStorage(0) + 20)];
  *(void *)uint64_t v26 = v21;
  *((void *)v26 + 1) = v20;
  *((void *)v26 + 2) = v19;
  v38.receiver = v23;
  v38.super_class = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v27 = objc_msgSendSuper2(&v38, sel_init);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  uint64_t v28 = v37;
  uint64_t v29 = *(void **)&v37[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textContentStorage];
  if (v29)
  {
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = v28;
    *(void *)(v30 + 24) = v27;
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = partial apply for closure #1 in UIKitRichTextEditorCoordinator.update(_:configuration:env:);
    *(void *)(v31 + 24) = v30;
    *(void *)&long long v41 = partial apply for thunk for @callee_guaranteed () -> ();
    *((void *)&v41 + 1) = v31;
    *(void *)&long long v39 = MEMORY[0x1E4F143A8];
    *((void *)&v39 + 1) = 1107296256;
    *(void *)&long long v40 = thunk for @escaping @callee_guaranteed () -> ();
    *((void *)&v40 + 1) = &block_descriptor_61;
    int v32 = _Block_copy(&v39);
    id v33 = v29;
    id v34 = v28;
    id v35 = v27;
    swift_retain();
    swift_release();
    objc_msgSend(v33, sel_performEditingTransactionUsingBlock_, v32);

    _Block_release(v32);
    LOBYTE(v35) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if ((v35 & 1) == 0) {
      return result;
    }
    __break(1u);
    goto LABEL_6;
  }
LABEL_8:
  __break(1u);
  return result;
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitRichTextEditor@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  MEMORY[0x1F4188790](a1 - 8);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UIKitRichTextEditor(v2, (uint64_t)v5, type metadata accessor for UIKitRichTextEditor);
  id v6 = objc_allocWithZone((Class)type metadata accessor for UIKitRichTextEditorCoordinator(0));
  id result = UIKitRichTextEditorCoordinator.init(configuration:)((uint64_t)v5);
  *a2 = result;
  return result;
}

uint64_t protocol witness for UIViewRepresentable._overrideSizeThatFits(_:in:uiView:) in conformance UIKitRichTextEditor(uint64_t *a1)
{
  uint64_t v2 = _ProposedSize.width.getter();
  if ((v3 & 1) == 0) {
    *a1 = v2;
  }
  uint64_t result = _ProposedSize.height.getter();
  if ((v5 & 1) == 0) {
    a1[1] = result;
  }
  return result;
}

id UIKitRichTextEditorCoordinator.init(configuration:)(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v1[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textStorage] = 0;
  *(void *)&v1[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textContentStorage] = 0;
  uint64_t v4 = &v1[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver];
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = 0;
  uint64_t v5 = OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_helper;
  id v6 = objc_allocWithZone((Class)type metadata accessor for ScrollViewHelper());
  uint64_t v7 = v1;
  *(void *)&v1[v5] = ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(0, 1, 0, 1, 0, 1, 0, 1, 2);
  swift_unknownObjectWeakInit();
  outlined init with copy of UIKitRichTextEditor(a1, (uint64_t)&v7[OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_configuration], type metadata accessor for UIKitRichTextEditor);

  v10.receiver = v7;
  v10.super_class = ObjectType;
  id v8 = objc_msgSendSuper2(&v10, sel_init);
  outlined destroy of UIKitRichTextEditor(a1, type metadata accessor for UIKitRichTextEditor);
  return v8;
}

Swift::Void __swiftcall UIKitRichTextEditorCoordinator.textViewDidChange(_:)(UITextView *a1)
{
  uint64_t v3 = type metadata accessor for UIKitRichTextEditor(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for _NSSwiftAttributedStringStorage(0);
  MEMORY[0x1F4188790](v6 - 8);
  id v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t v12 = type metadata accessor for AttributedString();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v33 - v17;
  double v20 = MEMORY[0x1F4188790](v19);
  id v22 = (char *)&v33 - v21;
  uint64_t v23 = [(UITextView *)a1 textStorage];
  type metadata accessor for NSSwiftAttributedString(0);
  uint64_t v24 = swift_dynamicCastClass();
  if (v24)
  {
    id v33 = v15;
    id v34 = v5;
    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v25(v18, v24 + OBJC_IVAR____TtC7SwiftUI23NSSwiftAttributedString__storage, v12);
  }
  else
  {
    type metadata accessor for NSSwiftMutableAttributedString(0);
    uint64_t v26 = swift_dynamicCastClass();
    if (!v26)
    {

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
      goto LABEL_8;
    }
    id v33 = v15;
    id v34 = v5;
    uint64_t v27 = v26 + OBJC_IVAR____TtC7SwiftUI30NSSwiftMutableAttributedString__storage;
    swift_beginAccess();
    outlined init with copy of UIKitRichTextEditor(v27, (uint64_t)v8, type metadata accessor for _NSSwiftAttributedStringStorage);

    uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v25(v18, (uint64_t)v8, v12);
    outlined destroy of UIKitRichTextEditor((uint64_t)v8, type metadata accessor for _NSSwiftAttributedStringStorage);
  }
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v28(v11, v18, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) != 1)
  {
    v28(v22, v11, v12);
    uint64_t v29 = v1 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_configuration;
    swift_beginAccess();
    uint64_t v30 = (uint64_t)v34;
    outlined init with copy of UIKitRichTextEditor(v29, (uint64_t)v34, type metadata accessor for UIKitRichTextEditor);
    uint64_t v31 = v33;
    v25(v33, (uint64_t)v22, v12);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    int v32 = *(void (**)(char *, uint64_t))(v13 + 8);
    v32(v31, v12);
    outlined destroy of UIKitRichTextEditor(v30, type metadata accessor for UIKitRichTextEditor);
    v32(v22, v12);
    return;
  }
LABEL_8:
  outlined destroy of AttributedString?((uint64_t)v11);
}

void closure #1 in UIKitRichTextEditorCoordinator.update(_:configuration:env:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textStorage);
  if (v2)
  {
    id v4 = v2;
    objc_msgSend(v4, sel_replaceCharactersInRange_withAttributedString_, 0, objc_msgSend(v4, sel_length), a2);
  }
  else
  {
    __break(1u);
  }
}

uint64_t UIKitRichTextEditorCoordinator.__ivar_destroyer()
{
  outlined destroy of UIKitRichTextEditor(v0 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_configuration, type metadata accessor for UIKitRichTextEditor);

  outlined consume of RichTextAttributeResolver?(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver + 8), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_attributeResolver + 16));

  return swift_unknownObjectWeakDestroy();
}

uint64_t ObjC metadata update function for UIKitRichTextEditorCoordinator()
{
  return type metadata accessor for UIKitRichTextEditorCoordinator(0);
}

uint64_t type metadata accessor for UIKitRichTextEditorCoordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitRichTextEditorCoordinator);
}

void type metadata completion function for UIKitRichTextEditorCoordinator()
{
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F41638]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitRichTextEditor(uint64_t *a1, uint64_t *a2)
{
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F41638]);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    uint64_t v7 = *(int *)(v4 + 32);
    id v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for AttributedString();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_retain();
    swift_retain();
    v11(v8, v9, v10);
  }
  return a1;
}

uint64_t destroy for UIKitRichTextEditor(uint64_t a1)
{
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F41638]);
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  uint64_t v4 = type metadata accessor for AttributedString();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

void *initializeWithCopy for UIKitRichTextEditor(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  swift_retain();
  v10(v7, v8, v9);
  return a1;
}

void *assignWithCopy for UIKitRichTextEditor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

void *initializeWithTake for UIKitRichTextEditor(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

void *assignWithTake for UIKitRichTextEditor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 40))(v6, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitRichTextEditor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F5656C);
}

uint64_t sub_187F5656C(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UIKitRichTextEditor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F56608);
}

uint64_t sub_187F56608(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UIKitRichTextEditor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for UIKitRichTextEditor);
}

void type metadata completion function for UIKitRichTextEditor()
{
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(319, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>, MEMORY[0x1E4F41638]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t outlined assign with copy of UIKitRichTextEditor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UIKitRichTextEditor(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_187F567C0()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitRichTextEditorCoordinator.update(_:configuration:env:)()
{
  closure #1 in UIKitRichTextEditorCoordinator.update(_:configuration:env:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_187F56808()
{
  return swift_deallocObject();
}

void _UITextInputTraitSetForceDisableDictation(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (objc_opt_respondsToSelector()) {
    [v3 setForceDisableDictation:a2];
  }
}

void _UITextInputTraitSetPreferOnlineDictation(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (objc_opt_respondsToSelector()) {
    [v3 setPreferOnlineDictation:a2];
  }
}

void _UITextInputTraitSetForceSpellingDictation(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (objc_opt_respondsToSelector()) {
    [v3 setForceSpellingDictation:a2];
  }
}

void _UITextInputTraitSetForceEnableDictation(void *a1, uint64_t a2)
{
  id v3 = a1;
  if (objc_opt_respondsToSelector()) {
    [v3 setForceEnableDictation:a2];
  }
}

uint64_t sub_187F569A8()
{
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return swift_deallocObject();
}

id partial apply for closure #1 in UIKitRichTextEditor.makeUIView(context:)()
{
  uint64_t v1 = *(void *)(v0 + 56);
  id result = *(id *)(v1 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textContentStorage);
  if (result) {
    return objc_msgSend(result, sel_setTextStorage_, *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI30UIKitRichTextEditorCoordinator_textStorage));
  }
  __break(1u);
  return result;
}

uint64_t sub_187F56A2C()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of AttributedString?(uint64_t a1)
{
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AttributedString?, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of UIKitRichTextEditor(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of UIKitRichTextEditor(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t AnyListSelection.Storage.__allocating_init(box:)(uint64_t a1)
{
  return AnyListSelection.Storage.init(box:)(a1);
}

void AnyListSelection.StorageBase.isEmpty.getter()
{
}

void AnyListSelection.StorageBase.allowsMultipleSelection.getter()
{
}

void AnyListSelection.StorageBase.count.getter()
{
}

void AnyListSelection.StorageBase.isSelected(value:)()
{
}

void AnyListSelection.StorageBase.canSelect(value:)()
{
}

void AnyListSelection.StorageBase.equals(_:)()
{
}

void AnyListSelection.StorageBase.deselectAll()()
{
}

void AnyListSelection.StorageBase.validateSelection(value:)()
{
}

void AnyListSelection.StorageBase.apply<A>(as:operation:)()
{
}

void AnyListSelection.StorageBase.description.getter()
{
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyListSelection.StorageBase()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 152))();
}

uint64_t AnyListSelection.Storage.count.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 168);
  uint64_t v3 = type metadata accessor for SelectionManagerBox();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v12 - v5;
  uint64_t v7 = (uint64_t)v0 + *(void *)(v1 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v9 = Set.count.getter();
    swift_bridgeObjectRelease();
    return v9;
  }
  if (EnumCaseMultiPayload != 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return 1;
  }
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v6, 1, v2) != 1)
  {
    uint64_t v10 = type metadata accessor for Optional();
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v6, v10);
    return 1;
  }
  return 0;
}

uint64_t AnyListSelection.Storage.allowsMultipleSelection.getter()
{
  return AnyListSelection.Storage.isEmpty.getter((uint64_t (*)(uint64_t))SelectionManagerBox.allowsMultipleSelection.getter);
}

BOOL AnyListSelection.Storage.canSelect(value:)(uint64_t a1)
{
  return specialized AnyNavigationLinkPresentedValue.canBeSelected<A>(in:)(a1, *(void *)(*(void *)v1 + 168));
}

BOOL AnyListSelection.Storage.deselectAll()()
{
  swift_beginAccess();
  type metadata accessor for SelectionManagerBox();
  Swift::Bool v0 = SelectionManagerBox.deselectAll()();
  swift_endAccess();
  return v0;
}

uint64_t AnyListSelection.Storage.validateSelection(value:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = (uint64_t)v1 + *(void *)(*v1 + 184);
  swift_beginAccess();
  AnyNavigationLinkPresentedValue.validateSelection<A>(in:)(v4, a1, *(void *)(v3 + 168), *(void *)(v3 + 176));
  return swift_endAccess();
}

uint64_t AnyListSelection.Storage.apply<A>(as:operation:)(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v45 = a4;
  uint64_t v46 = a5;
  long long v43 = a2;
  uint64_t v44 = a3;
  uint64_t v41 = a1;
  uint64_t v6 = (void *)*v5;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v39 = *(void *)(v7 - 8);
  uint64_t v40 = v7;
  MEMORY[0x1F4188790](v7);
  objc_super v38 = (char *)&v36 - v8;
  uint64_t v9 = v6[21];
  uint64_t v37 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v36 = (char *)&v36 - v14;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v36 - v17;
  long long v42 = (char *)v6[22];
  uint64_t v19 = type metadata accessor for SelectionManagerBox();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  id v22 = (uint64_t *)((char *)&v36 - v21);
  uint64_t v23 = (char *)v5 + v6[23];
  swift_beginAccess();
  (*(void (**)(uint64_t *, char *, uint64_t))(v20 + 16))(v22, v23, v19);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v16 + 32))(v18, v22, v15);
      Optional<A>.apply<A>(as:operation:)(v41, (uint64_t)v43, v44, v15, v45, (uint64_t)v42, v46);
      return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    }
    else
    {
      uint64_t v27 = v36;
      uint64_t v26 = v37;
      (*(void (**)(char *, uint64_t *, uint64_t))(v37 + 32))(v36, v22, v9);
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v12, v27, v9);
      uint64_t v28 = v38;
      uint64_t v29 = v45;
      int v30 = swift_dynamicCast();
      uint64_t v31 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, v30 ^ 1u, 1, v29);
      MEMORY[0x1F4188790](v31);
      *(&v36 - 6) = (char *)v9;
      *(&v36 - 5) = (char *)v29;
      uint64_t v32 = v46;
      *(&v36 - 4) = v42;
      *(&v36 - 3) = (char *)v32;
      uint64_t v33 = v44;
      *(&v36 - 2) = (char *)v43;
      *(&v36 - 1) = (char *)v33;
      uint64_t v34 = v40;
      _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A1) -> (), (uint64_t)(&v36 - 8), MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, v35, (uint64_t)&v47);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v9);
      return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v28, v34);
    }
  }
  else
  {
    Set.apply<A>(as:operation:)(v41, v43, v44, *v22, v9, v45, (uint64_t)v42, v46);
    return swift_bridgeObjectRelease();
  }
}

uint64_t AnyListSelection.Storage.description.getter()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for SelectionManagerBox();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = (char *)v0 + *(void *)(v1 + 184);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v6, v2);
  uint64_t v7 = SelectionManagerBox.description.getter(v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t AnyListSelection.Storage.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 184);
  uint64_t v2 = type metadata accessor for SelectionManagerBox();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

unint64_t AnyListSelection.description.getter(uint64_t a1)
{
  _StringGuts.grow(_:)(20);
  uint64_t v2 = swift_bridgeObjectRelease();
  v3._countAndFlagsBits = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 152))(v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnyListSelection(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 120))(*a1) & 1;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance AnyListSelection()
{
  return AnyListSelection.description.getter(*v0);
}

uint64_t AnyListSelection.contains<A>(id:)(uint64_t a1, uint64_t a2)
{
  double v3 = MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v6 + 16))(v5, v3);
  AnyNavigationLinkPresentedValue.init<A>(_:)((uint64_t)v5);
  char v7 = (*(uint64_t (**)(void))(*(void *)a2 + 104))();
  swift_release();
  return v7 & 1;
}

uint64_t AnyListSelection.apply<A>(as:operation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a4 + 144))(a1, a2, a3, a5, a6);
}

uint64_t protocol witness for Selection.isEmpty.getter in conformance AnyListSelection()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))() & 1;
}

uint64_t protocol witness for Selection.allowsMultiple.getter in conformance AnyListSelection()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 88))() & 1;
}

uint64_t protocol witness for Selection.count.getter in conformance AnyListSelection()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 96))();
}

uint64_t protocol witness for Selection.contains<A>(id:) in conformance AnyListSelection(uint64_t a1)
{
  return AnyListSelection.contains<A>(id:)(a1, *v1);
}

uint64_t protocol witness for Selection.apply<A>(as:operation:) in conformance AnyListSelection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AnyListSelection.apply<A>(as:operation:)(a1, a2, a3, *v5, a4, a5);
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance ToAnyListSelection<A>(uint64_t a1)
{
  return specialized ToAnyListSelection.set(base:newValue:)(a1);
}

uint64_t specialized ToAnyListSelection.set(base:newValue:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SelectionManagerBox();
  uint64_t v3 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  type metadata accessor for AnyListSelection.Storage();
  uint64_t v4 = swift_dynamicCastClassUnconditional();
  uint64_t v5 = v4 + *(void *)(*(void *)v4 + 184);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(a1, v5, v2);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A1) -> ()(uint64_t a1)
{
  return thunk for @callee_guaranteed (@in_guaranteed A1) -> ()(a1, *(uint64_t (**)(void))(v1 + 48));
}

double specialized Dictionary.removeValue(forKey:)@<D0>(unsigned int a1@<W0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v6)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v14;
    }
    uint64_t v10 = (_OWORD *)(*(void *)(v9 + 56) + (v7 << 6));
    long long v11 = v10[1];
    *a2 = *v10;
    a2[1] = v11;
    long long v12 = v10[3];
    a2[2] = v10[2];
    a2[3] = v12;
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t static HostingViewRegistry.shared.getter()
{
  if (one-time initialization token for shared != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t HostingViewRegistry.forEach(_:)(void (*a1)(uint64_t, uint64_t))
{
  swift_beginAccess();
  uint64_t v2 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v2, a1);
  return swift_bridgeObjectRelease();
}

uint64_t HostingViewRegistry.deinit()
{
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t HostingViewRegistry.__deallocating_deinit()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v11++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v11 >= v9) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v5 + 8 * v11);
    if (!v15) {
      break;
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v11 << 6);
LABEL_21:
    outlined init with copy of WeakBox<Swift.AnyObject>(*(void *)(a1 + 56) + 8 * v13, (uint64_t)v23);
    outlined init with take of WeakBox<Swift.AnyObject>((uint64_t)v23, (uint64_t)v22);
    uint64_t v17 = MEMORY[0x18C119DF0](v22);
    if (v17)
    {
      uint64_t v18 = v17;
      swift_getObjectType();
      uint64_t v19 = swift_conformsToProtocol2();
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      if (v19) {
        uint64_t v21 = v18;
      }
      else {
        uint64_t v21 = 0;
      }
      if (v21)
      {
        a2(v21, v20);
        if (v2)
        {
          swift_unknownObjectRelease();
          outlined destroy of WeakBox<Swift.AnyObject>?((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for WeakBox<Swift.AnyObject>);
          return swift_release();
        }
      }
      swift_unknownObjectRelease();
    }
    uint64_t result = outlined destroy of WeakBox<Swift.AnyObject>?((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for WeakBox<Swift.AnyObject>);
  }
  int64_t v16 = v11 + 1;
  if (v11 + 1 >= v9) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15) {
    goto LABEL_19;
  }
  int64_t v16 = v11 + 2;
  if (v11 + 2 >= v9) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15) {
    goto LABEL_19;
  }
  int64_t v16 = v11 + 3;
  if (v11 + 3 >= v9) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15) {
    goto LABEL_19;
  }
  int64_t v16 = v11 + 4;
  if (v11 + 4 >= v9) {
    return swift_release();
  }
  unint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
LABEL_19:
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v9) {
      return swift_release();
    }
    unint64_t v15 = *(void *)(v5 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of HostingViewProtocol.preferenceValue<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of HostingViewProtocol.convertAnchor<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t method lookup function for HostingViewRegistry(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for HostingViewRegistry);
}

uint64_t dispatch thunk of HostingViewRegistry.forEach(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t outlined init with copy of WeakBox<Swift.AnyObject>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<Swift.AnyObject>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t View.scrollViewBoundsModifier<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.scrollViewBoundsModifier<A>(transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ScrollViewBoundsModifier);
}

{
  return View.scrollViewBoundsModifier<A>(transform:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _ScrollViewBoundsModifier2);
}

uint64_t type metadata accessor for _ScrollViewBoundsModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ScrollViewBoundsModifier.transform.getter(uint64_t a1)
{
  return a1;
}

uint64_t _ScrollViewBoundsModifier.transform.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_ScrollViewBoundsModifier.transform.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _ScrollViewBoundsModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v27 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  int v7 = *((_DWORD *)a2 + 6);
  int v8 = *((_DWORD *)a2 + 7);
  int v10 = *((_DWORD *)a2 + 8);
  int v9 = *((_DWORD *)a2 + 9);
  uint64_t v12 = a2[5];
  uint64_t v11 = a2[6];
  int v14 = *((_DWORD *)a2 + 14);
  int v13 = *((_DWORD *)a2 + 15);
  int v16 = *((_DWORD *)a2 + 16);
  int v15 = *((_DWORD *)a2 + 17);
  int v18 = *((_DWORD *)a2 + 18);
  int v17 = *((_DWORD *)a2 + 19);
  int v26 = *((_DWORD *)a2 + 20);
  if (a5 == MEMORY[0x1E4F3F740])
  {
    uint64_t v28 = *a2;
    int v29 = v5;
    uint64_t v30 = v6;
    int v31 = v7;
    int v32 = v8;
    int v33 = v10;
    int v34 = v9;
    uint64_t v35 = v12;
    uint64_t v36 = v11;
    int v37 = v14;
    int v38 = v13;
    int v39 = v16;
    int v40 = v15;
    int v41 = v18;
    int v42 = v17;
    int v43 = v26;
    return a3(a1, &v28);
  }
  else
  {
    int v24 = *((_DWORD *)a2 + 18);
    int v22 = *((_DWORD *)a2 + 17);
    int v23 = *((_DWORD *)a2 + 19);
    int v20 = *((_DWORD *)a2 + 15);
    int v21 = *((_DWORD *)a2 + 16);
    int v25 = *((_DWORD *)a2 + 9);
    type metadata accessor for _ScrollViewBoundsModifier();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    _ViewInputs.position.getter();
    _ViewInputs.transform.getter();
    type metadata accessor for _ScrollViewBoundsModifier.Child();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    uint64_t v28 = v27;
    int v29 = v5;
    uint64_t v30 = v6;
    int v31 = v7;
    int v32 = v8;
    int v33 = v10;
    int v34 = v25;
    uint64_t v35 = v12;
    uint64_t v36 = v11;
    int v37 = v14;
    int v38 = v20;
    int v39 = v21;
    int v40 = v22;
    int v41 = v24;
    int v42 = v23;
    int v43 = v26;
    return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  }
}

uint64_t type metadata accessor for _ScrollViewBoundsModifier.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _ScrollViewBoundsModifier.Child.value.getter()
{
  AGGraphGetValue();
  swift_retain();
  AGGraphGetValue();
  *(double *)&unint64_t v0 = MEMORY[0x18C10C240]();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v1, v0));
  type metadata accessor for _ScrollViewBoundsModifier.Child();
  swift_getWitnessTable();
  Rule.withObservation<A>(do:)();
  return swift_release();
}

uint64_t closure #1 in closure #1 in _ScrollViewBoundsModifier.Child.value.getter(uint64_t (**a1)(unsigned char *), uint64_t a2)
{
  uint64_t v2 = *a1;
  *(void *)int v8 = *(void *)a2;
  *(_OWORD *)&v8[8] = *(_OWORD *)(a2 + 8);
  *(_OWORD *)&v8[24] = *(_OWORD *)(a2 + 24);
  ViewTransform.containingScrollGeometry.getter();
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if ((v20 & 1) == 0)
  {
    *(_OWORD *)int v8 = v13;
    *(_OWORD *)&v8[16] = v14;
    *(_OWORD *)&v8[32] = v15;
    long long v9 = v16;
    long long v10 = v17;
    long long v11 = v18;
    long long v12 = v19;
    ScrollGeometry.bounds.getter();
  }
  *(void *)int v8 = v3;
  *(void *)&v8[8] = v4;
  *(void *)&v8[16] = v5;
  *(void *)&v8[24] = v6;
  v8[32] = v20;
  return v2(v8);
}

uint64_t protocol witness for Rule.value.getter in conformance _ScrollViewBoundsModifier<A>.Child()
{
  return _ScrollViewBoundsModifier.Child.value.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ScrollViewBoundsModifier<A>.Child(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ScrollViewBoundsModifier<A>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static _ScrollViewBoundsModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16));
}

uint64_t View.scrollViewBoundsModifier<A>(transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t, uint64_t))
{
  v11[0] = a1;
  v11[1] = a2;
  uint64_t v9 = a7(0, a4, a6);
  swift_retain();
  MEMORY[0x18C113660](v11, a3, v9, a5);
  return swift_release();
}

uint64_t type metadata accessor for _ScrollViewBoundsModifier2()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t key path getter for _ScrollViewBoundsModifier.transform : <A>_ScrollViewBoundsModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v7 = a3 + a2;
  uint64_t v9 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v7 - 16);
  *(void *)(v10 + 32) = v9;
  *(void *)(v10 + 40) = v8;
  *a5 = a4;
  a5[1] = v10;

  return swift_retain();
}

uint64_t key path setter for _ScrollViewBoundsModifier.transform : <A>_ScrollViewBoundsModifier<A>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a4 + a3;
  uint64_t v10 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v8 - 16);
  *(void *)(v11 + 32) = v10;
  *(void *)(v11 + 40) = v9;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = a6;
  a2[1] = v11;
  return result;
}

uint64_t (*_ScrollViewBoundsModifier2.transform.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _ScrollViewBoundsModifier2._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v9 = *((_DWORD *)a2 + 6);
  int v8 = *((_DWORD *)a2 + 7);
  int v11 = *((_DWORD *)a2 + 8);
  int v10 = *((_DWORD *)a2 + 9);
  uint64_t v13 = a2[5];
  uint64_t v12 = a2[6];
  int v15 = *((_DWORD *)a2 + 14);
  int v14 = *((_DWORD *)a2 + 15);
  int v17 = *((_DWORD *)a2 + 16);
  int v16 = *((_DWORD *)a2 + 17);
  int v19 = *((_DWORD *)a2 + 18);
  int v18 = *((_DWORD *)a2 + 19);
  int v31 = *((_DWORD *)a2 + 20);
  if (a5 == MEMORY[0x1E4F3F740])
  {
    uint64_t v32 = *a2;
    int v33 = v6;
    uint64_t v35 = v7;
    int v36 = v9;
    int v37 = v8;
    int v38 = v11;
    int v39 = v10;
    uint64_t v40 = v13;
    uint64_t v41 = v12;
    int v42 = v15;
    int v43 = v14;
    int v44 = v17;
    int v45 = v16;
    int v46 = v19;
    int v47 = v18;
    int v48 = v31;
    return a3(a1, &v32);
  }
  else
  {
    int v29 = *((_DWORD *)a2 + 19);
    int v23 = *((_DWORD *)a2 + 17);
    int v24 = *((_DWORD *)a2 + 18);
    int v21 = *((_DWORD *)a2 + 14);
    int v22 = *((_DWORD *)a2 + 16);
    int v26 = *((_DWORD *)a2 + 15);
    int v27 = *((_DWORD *)a2 + 6);
    uint64_t v25 = a2[6];
    uint64_t v28 = a2[5];
    int v30 = *((_DWORD *)a2 + 2);
    type metadata accessor for _ScrollViewBoundsModifier2();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    _ViewInputs.position.getter();
    _ViewInputs.transform.getter();
    int v34 = _ViewInputs.size.getter();
    type metadata accessor for _ScrollViewBoundsModifier2.Child();
    swift_getWitnessTable();
    _GraphValue.init<A>(_:)();
    uint64_t v32 = v5;
    int v33 = v30;
    uint64_t v35 = v7;
    int v36 = v27;
    int v37 = v8;
    int v38 = v11;
    int v39 = v10;
    uint64_t v40 = v28;
    uint64_t v41 = v25;
    int v42 = v21;
    int v43 = v26;
    int v44 = v22;
    int v45 = v23;
    int v46 = v24;
    int v47 = v29;
    int v48 = v31;
    return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  }
}

uint64_t type metadata accessor for _ScrollViewBoundsModifier2.Child()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in _ScrollViewBoundsModifier<A>()
{
  return &protocol witness table for _ScrollViewBoundsModifier<A>;
}

uint64_t _ScrollViewBoundsModifier2.Child.value.getter()
{
  AGGraphGetValue();
  swift_retain();
  AGGraphGetValue();
  *(double *)&unint64_t v0 = MEMORY[0x18C10C240]();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v1, v0));
  type metadata accessor for _ScrollViewBoundsModifier2.Child();
  swift_getWitnessTable();
  Rule.withObservation<A>(do:)();
  return swift_release();
}

uint64_t closure #1 in _ScrollViewBoundsModifier2.Child.value.getter()
{
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t closure #1 in closure #1 in _ScrollViewBoundsModifier2.Child.value.getter(uint64_t (**a1)(unsigned char *, double, double), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v7 = Value[1];
  long long v21 = *Value;
  long long v22 = v7;
  double v8 = MEMORY[0x18C114450]();
  double v10 = v9;
  *(void *)int v16 = *(void *)a4;
  *(_OWORD *)&v16[8] = *(_OWORD *)(a4 + 8);
  *(_OWORD *)&v16[24] = *(_OWORD *)(a4 + 24);
  ViewTransform.containingScrollGeometry.getter();
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if ((v28 & 1) == 0)
  {
    *(_OWORD *)int v16 = v21;
    *(_OWORD *)&v16[16] = v22;
    *(_OWORD *)&v16[32] = v23;
    long long v17 = v24;
    long long v18 = v25;
    long long v19 = v26;
    long long v20 = v27;
    ScrollGeometry.bounds.getter();
  }
  *(void *)int v16 = v11;
  *(void *)&v16[8] = v12;
  *(void *)&v16[16] = v13;
  *(void *)&v16[24] = v14;
  v16[32] = v28;
  return v5(v16, v8, v10);
}

uint64_t protocol witness for Rule.value.getter in conformance _ScrollViewBoundsModifier2<A>.Child()
{
  return _ScrollViewBoundsModifier2.Child.value.getter();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _ScrollViewBoundsModifier2<A>.Child(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ScrollViewBoundsModifier2<A>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  return static _ScrollViewBoundsModifier2._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16));
}

_UNKNOWN **base witness table accessor for ViewModifier in _ScrollViewBoundsModifier2<A>()
{
  return &protocol witness table for _ScrollViewBoundsModifier2<A>;
}

uint64_t sub_187F59158@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return key path getter for _ScrollViewBoundsModifier.transform : <A>_ScrollViewBoundsModifier<A>(a1, a2, a3, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGRect?) -> (@out A), a4);
}

uint64_t sub_187F5918C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ScrollViewBoundsModifier.transform : <A>_ScrollViewBoundsModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_1ED48B0D0, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGRect?) -> (@out A));
}

uint64_t sub_187F591C0()
{
  return 16;
}

__n128 sub_187F591CC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187F591D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return key path getter for _ScrollViewBoundsModifier.transform : <A>_ScrollViewBoundsModifier<A>(a1, a2, a3, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGRect?) -> (@out A), a4);
}

uint64_t sub_187F5920C(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _ScrollViewBoundsModifier.transform : <A>_ScrollViewBoundsModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_1ED48B080, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGSize, @in_guaranteed CGRect?) -> (@out A));
}

uint64_t sub_187F59240()
{
  return 16;
}

__n128 sub_187F5924C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187F59258(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA0C8ModifierRd__r__lAA15ModifiedContentVyxAA07_Scrollc6BoundsD0Vyqd__GGAaBHPxAaBHD1__AhaCHPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _ScrollViewBoundsModifier);
}

uint64_t sub_187F59278(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAA0C8ModifierRd__r__lAA15ModifiedContentVyxAA07_Scrollc6BoundsD0Vyqd__GGAaBHPxAaBHD1__AhaCHPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _ScrollViewBoundsModifier2);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAA0C8ModifierRd__r__lAA15ModifiedContentVyxAA07_Scrollc6BoundsD0Vyqd__GGAaBHPxAaBHD1__AhaCHPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in _ScrollViewBoundsModifier<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in _ScrollViewBoundsModifier2<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in _ScrollViewBoundsModifier.Child.value.getter()
{
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t partial apply for closure #1 in closure #1 in _ScrollViewBoundsModifier.Child.value.getter(uint64_t (**a1)(unsigned char *))
{
  return closure #1 in closure #1 in _ScrollViewBoundsModifier.Child.value.getter(a1, *(void *)(v1 + 32));
}

uint64_t partial apply for closure #1 in _ScrollViewBoundsModifier2.Child.value.getter()
{
  return closure #1 in _ScrollViewBoundsModifier2.Child.value.getter();
}

uint64_t partial apply for closure #1 in closure #1 in _ScrollViewBoundsModifier2.Child.value.getter(uint64_t (**a1)(unsigned char *, double, double))
{
  return closure #1 in closure #1 in _ScrollViewBoundsModifier2.Child.value.getter(a1, v1[4], v1[5], v1[6]);
}

uint64_t sub_187F59410()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGSize, @in_guaranteed CGRect?) -> (@out A)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = *(uint64_t (**)(void *, unsigned char *))(v3 + 32);
  *(double *)long long v7 = a2;
  *(double *)&v7[1] = a3;
  outlined init with take of CGRect?(a1, (uint64_t)v6);
  return v4(v7, v6);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGRect?) -> (@out A)(double *a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(unsigned char *, double, double))(v2 + 32);
  double v4 = *a1;
  double v5 = a1[1];
  outlined init with take of CGRect?(a2, (uint64_t)v7);
  return v3(v7, v4, v5);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed CGRect?) -> (@out A)(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(unsigned char *))(v1 + 32);
  outlined init with take of CGRect?(a1, (uint64_t)v4);
  return v2(v4);
}

void static ClarityUIBackButtonActionWrapper.makeBackButtonAction()(void *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4F7A0]), sel_init);
  objc_msgSend(v2, sel_setFlag_forSetting_, BSSettingFlagForBool(), 313000);
  uint64_t v3 = (objc_class *)type metadata accessor for ClarityUIBackButtonAction();
  id v4 = objc_msgSend(objc_allocWithZone(v3), sel_initWithInfo_responder_, v2, 0);

  a1[3] = v3;
  *a1 = v4;
}

void static ClarityUIBackButtonActionWrapper.makeBackButtonAction(isAnimated:)(void *a1@<X8>)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4F7A0]), sel_init);
  objc_msgSend(v2, sel_setFlag_forSetting_, BSSettingFlagForBool(), 313000);
  uint64_t v3 = (objc_class *)type metadata accessor for ClarityUIBackButtonAction();
  id v4 = objc_msgSend(objc_allocWithZone(v3), sel_initWithInfo_responder_, v2, 0);

  a1[3] = v3;
  *a1 = v4;
}

uint64_t type metadata accessor for ClarityUIBackButtonAction()
{
  return self;
}

uint64_t ClarityUIBackButtonActionWrapper.deinit()
{
  return v0;
}

uint64_t ClarityUIBackButtonActionWrapper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClarityUIBackButtonActionWrapper()
{
  return self;
}

uint64_t method lookup function for ClarityUIBackButtonActionWrapper(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ClarityUIBackButtonActionWrapper);
}

id ClarityUIBackButtonAction.init(info:timeout:forResponseOn:withHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, double a5)
{
  if (a3)
  {
    v14[4] = a3;
    v14[5] = a4;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1107296256;
    v14[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    void v14[3] = &block_descriptor_62;
    double v10 = _Block_copy(v14);
    swift_retain();
    swift_release();
  }
  else
  {
    double v10 = 0;
  }
  uint64_t v11 = (objc_class *)type metadata accessor for ClarityUIBackButtonAction();
  v15.receiver = v5;
  v15.super_class = v11;
  id v12 = objc_msgSendSuper2(&v15, sel_initWithInfo_timeout_forResponseOnQueue_withHandler_, a1, a2, v10, a5);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);

  _Block_release(v10);
  return v12;
}

id @objc ClarityUIBackButtonAction.init(xpcDictionary:)(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for ClarityUIBackButtonAction();
  return objc_msgSendSuper2(&v7, *a4, a3);
}

id ClarityUIBackButtonAction.__deallocating_deinit()
{
  return ClarityUIBackButtonAction.__deallocating_deinit(type metadata accessor for ClarityUIBackButtonAction);
}

id @objc ClarityUIBackButtonAction.init()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, sel_init);
}

id ClarityUIBackButtonActionHandler.__deallocating_deinit()
{
  return ClarityUIBackButtonAction.__deallocating_deinit(type metadata accessor for ClarityUIBackButtonActionHandler);
}

id ClarityUIBackButtonAction.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for ClarityUIBackButtonActionHandler()
{
  return self;
}

unint64_t type metadata accessor for BSAction()
{
  unint64_t result = lazy cache variable for type metadata for BSAction;
  if (!lazy cache variable for type metadata for BSAction)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BSAction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BSAction and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type BSAction and conformance NSObject;
  if (!lazy protocol witness table cache variable for type BSAction and conformance NSObject)
  {
    type metadata accessor for BSAction();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BSAction and conformance NSObject);
  }
  return result;
}

void specialized ClarityUIBackButtonActionHandler._respond(to:for:in:from:)(unint64_t a1)
{
  unint64_t v1 = a1;
  v27[15] = (id)MEMORY[0x1E4FBC870];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for BSAction();
    lazy protocol witness table accessor for type BSAction and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    unint64_t v1 = (unint64_t)v27[16];
    long long v26 = v27[17];
    uint64_t v2 = (uint64_t)v27[18];
    id v3 = v27[19];
    unint64_t v4 = (unint64_t)v27[20];
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    long long v26 = (void *)(a1 + 56);
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    id v3 = 0;
  }
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while ((v1 & 0x8000000000000000) != 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_37;
    }
    type metadata accessor for BSAction();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v27[0];
    swift_unknownObjectRelease();
    uint64_t v11 = (char *)v3;
    uint64_t v9 = v4;
    if (!v12) {
      goto LABEL_37;
    }
LABEL_32:
    type metadata accessor for ClarityUIBackButtonAction();
    uint64_t v16 = swift_dynamicCastClass();
    if (!v16) {
      goto LABEL_9;
    }
    long long v17 = (void *)v16;
    id v18 = v12;
    id v19 = objc_msgSend(v17, sel_info);
    if (!v19)
    {

LABEL_9:
      specialized Set._Variant.insert(_:)(v27, v12);

      goto LABEL_10;
    }
    long long v20 = v19;
    objc_msgSend(v19, sel_flagForSetting_, 313000);
    char IsYes = BSSettingFlagIsYes();
    id v22 = objc_msgSend(self, sel_defaultCenter);
    if (one-time initialization token for didPerformBackButtonPress != -1) {
      swift_once();
    }
    uint64_t v23 = static ClarityUI.didPerformBackButtonPress;
    type metadata accessor for _ContiguousArrayStorage<(AnyHashable, Any)>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    v27[0] = (id)0x646574616D696E61;
    v27[1] = (id)0xE800000000000000;
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 96) = MEMORY[0x1E4FBB390];
    *(unsigned char *)(inited + 72) = IsYes;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v22, sel_postNotificationName_object_userInfo_, v23, 0, isa);

LABEL_10:
    id v3 = v11;
    unint64_t v4 = v9;
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | ((void)v3 << 6);
    uint64_t v11 = (char *)v3;
LABEL_31:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_37;
    }
    goto LABEL_32;
  }
  uint64_t v13 = (uint64_t)v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 >= v8) {
      goto LABEL_37;
    }
    unint64_t v14 = v26[v13];
    uint64_t v11 = (char *)v3 + 1;
    if (!v14)
    {
      uint64_t v11 = (char *)v3 + 2;
      if ((uint64_t)v3 + 2 >= v8) {
        goto LABEL_37;
      }
      unint64_t v14 = v26[(void)v11];
      if (!v14)
      {
        uint64_t v11 = (char *)v3 + 3;
        if ((uint64_t)v3 + 3 >= v8) {
          goto LABEL_37;
        }
        unint64_t v14 = v26[(void)v11];
        if (!v14)
        {
          uint64_t v11 = (char *)v3 + 4;
          if ((uint64_t)v3 + 4 >= v8) {
            goto LABEL_37;
          }
          unint64_t v14 = v26[(void)v11];
          if (!v14)
          {
            objc_super v15 = (char *)v3 + 5;
            while ((char *)v8 != v15)
            {
              unint64_t v14 = v26[(void)v15++];
              if (v14)
              {
                uint64_t v11 = v15 - 1;
                goto LABEL_30;
              }
            }
LABEL_37:
            outlined consume of Set<UIPress>.Iterator._Variant();
            return;
          }
        }
      }
    }
LABEL_30:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + ((void)v11 << 6);
    goto LABEL_31;
  }
  __break(1u);
}

uint64_t sub_187F5A044()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned BSActionResponse) -> ()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

ValueMetadata *type metadata accessor for ReplacedRootDismissModifier()
{
  return &type metadata for ReplacedRootDismissModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ReplacedRootDismissModifier()
{
  return &protocol witness table for ReplacedRootDismissModifier;
}

uint64_t static ReplacedRootDismissModifier._makeView(modifier:inputs:body:)(_DWORD *a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void *)a2;
  int v4 = *(_DWORD *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  unsigned int v6 = *(_DWORD *)(a2 + 24);
  unsigned int v19 = *(_DWORD *)(a2 + 36);
  unsigned int v20 = *(_DWORD *)(a2 + 28);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  unsigned int v17 = *(_DWORD *)(a2 + 60);
  unsigned int v18 = *(_DWORD *)(a2 + 56);
  unsigned int v23 = *(_DWORD *)(a2 + 32);
  unsigned int v24 = *(_DWORD *)(a2 + 64);
  unsigned int v16 = *(_DWORD *)(a2 + 68);
  unsigned int v26 = *(_DWORD *)(a2 + 76);
  unsigned int v27 = *(_DWORD *)(a2 + 72);
  int v25 = *(_DWORD *)(a2 + 80);
  LODWORD(v38) = *a1;
  uint64_t v9 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F590];
  type metadata accessor for _GraphValue<ReplacedRootDismissModifier>(0, &lazy cache variable for type metadata for _GraphValue<ReplacedRootDismissModifier>, (uint64_t)&type metadata for ReplacedRootDismissModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<ReplacedRootDismissModifier>(0, &lazy cache variable for type metadata for _GraphValue<NavigationState.StackContent.Key>, (uint64_t)&type metadata for NavigationState.StackContent.Key, v9);
  int v21 = _GraphValue.value.getter();
  lazy protocol witness table accessor for type NavigationAuthority.ViewInputKey and conformance NavigationAuthority.ViewInputKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  type metadata accessor for _GraphValue<ReplacedRootDismissModifier>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
  unint64_t v10 = v38;
  Attribute.init<A>(body:value:flags:update:)();
  unint64_t v38 = v3;
  int v39 = v4;
  unint64_t v40 = v5;
  *(void *)&long long v41 = __PAIR64__(v20, v6);
  *((void *)&v41 + 1) = __PAIR64__(v19, v23);
  uint64_t v42 = v7;
  uint64_t v43 = v8;
  *(void *)&long long v44 = __PAIR64__(v17, v18);
  *((void *)&v44 + 1) = __PAIR64__(v16, v24);
  unint64_t v45 = __PAIR64__(v26, v27);
  int v46 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v11 = AGCreateWeakAttribute();
  unsigned int v12 = v11;
  unint64_t v15 = HIDWORD(v11);
  *(void *)&long long v32 = __PAIR64__(v20, v6);
  *((void *)&v32 + 1) = __PAIR64__(v19, v23);
  uint64_t v33 = v7;
  uint64_t v34 = v8;
  *(void *)&long long v35 = __PAIR64__(v17, v18);
  *((void *)&v35 + 1) = __PAIR64__(v16, v24);
  unint64_t v36 = __PAIR64__(v26, v27);
  int v37 = v25;
  LODWORD(v3) = _ViewInputs.environment.getter();
  type metadata accessor for ViewGraph();
  MEMORY[0x18C114840]();
  unint64_t v28 = __PAIR64__(v15, v12);
  int v29 = v21;
  int v30 = v3;
  unint64_t v31 = v10;
  swift_weakInit();
  swift_release();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ReplacedRootDismissModifier.ChildEnvironment and conformance ReplacedRootDismissModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of ReplacedRootDismissModifier.ChildEnvironment((uint64_t)&v28);
  _ViewInputs.environment.setter();
  unint64_t v28 = v38;
  int v29 = v39;
  unint64_t v31 = v40;
  long long v32 = v41;
  uint64_t v33 = v42;
  uint64_t v34 = v43;
  long long v35 = v44;
  unint64_t v36 = v45;
  int v37 = v46;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v13 = swift_bridgeObjectRetain();
  a3(v13, &v28);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t ReplacedRootDismissModifier.ChildEnvironment.value.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v6 = *Value;
  uint64_t v5 = Value[1];
  uint64_t v23 = *Value;
  uint64_t v24 = v5;
  if (swift_weakLoadStrong())
  {
    type metadata accessor for _GraphValue<ReplacedRootDismissModifier>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
    Weakuint64_t Value = AGGraphGetWeakValue();
    if (WeakValue)
    {
      outlined init with copy of NavigationAuthority?(WeakValue, (uint64_t)&v17);
      if (v18 == 1)
      {
        swift_retain();
        swift_retain();
        swift_release();
        uint64_t result = outlined destroy of NavigationAuthority?((uint64_t)&v17);
      }
      else
      {
        outlined init with take of NavigationAuthority((uint64_t)&v17, (uint64_t)v22);
        uint64_t v9 = AGGraphGetValue();
        uint64_t v10 = *(void *)v9;
        char v11 = *(unsigned char *)(v9 + 8);
        uint64_t v12 = *(void *)(v9 + 16);
        uint64_t v13 = *v2;
        outlined init with copy of NavigationAuthority((uint64_t)v22, (uint64_t)&v21);
        uint64_t v17 = v13;
        uint64_t v18 = v10;
        char v19 = v11;
        uint64_t v20 = v12;
        swift_weakInit();
        type metadata accessor for LocationBox<ReplacedRootDismissModifier.PresentationModeLocation>();
        swift_allocObject();
        swift_retain();
        swift_retain();
        uint64_t v14 = LocationBox.init(_:)();
        int Attribute = AGWeakAttributeGetAttribute();
        char v16 = 0;
        if (Attribute != *MEMORY[0x1E4F4E7A0]) {
          char v16 = *(unsigned char *)AGGraphGetValue() ^ 1;
        }
        uint64_t v17 = 0;
        uint64_t v18 = v14;
        char v19 = v16 & 1;
        type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
        lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
        swift_retain();
        swift_retain();
        PropertyList.subscript.setter();
        uint64_t v5 = v24;
        if (v24)
        {
          swift_retain();
          swift_retain();
          PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          uint64_t v5 = v24;
        }
        else
        {
          swift_release();
          swift_release();
          swift_release();
        }
        uint64_t result = outlined destroy of NavigationAuthority((uint64_t)v22);
        uint64_t v6 = v23;
      }
    }
    else
    {
      swift_retain();
      swift_retain();
      uint64_t result = swift_release();
    }
  }
  else
  {
    swift_retain();
    uint64_t result = swift_retain();
  }
  *a1 = v6;
  a1[1] = v5;
  return result;
}

uint64_t closure #1 in ReplacedRootDismissModifier.PresentationModeLocation.set(_:transaction:)()
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x1E4F4E7A0]) {
    return AGGraphSetValue();
  }
  return result;
}

unsigned char *protocol witness for Location.get() in conformance ReplacedRootDismissModifier.PresentationModeLocation@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (unsigned char *)AGGraphGetWeakValue();
  if (result) {
    char v3 = *result ^ 1;
  }
  else {
    char v3 = 0;
  }
  *a1 = v3 & 1;
  return result;
}

uint64_t protocol witness for Location.update() in conformance ReplacedRootDismissModifier.PresentationModeLocation(unsigned char *a1)
{
  Weakuint64_t Value = (unsigned char *)AGGraphGetWeakValue();
  if (WeakValue) {
    char v3 = *WeakValue ^ 1;
  }
  else {
    char v3 = 0;
  }
  *a1 = v3 & 1;
  return 1;
}

void protocol witness for ViewModifier.body(content:) in conformance ReplacedRootDismissModifier()
{
}

unint64_t lazy protocol witness table accessor for type ReplacedRootDismissModifier.ChildEnvironment and conformance ReplacedRootDismissModifier.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type ReplacedRootDismissModifier.ChildEnvironment and conformance ReplacedRootDismissModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type ReplacedRootDismissModifier.ChildEnvironment and conformance ReplacedRootDismissModifier.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReplacedRootDismissModifier.ChildEnvironment and conformance ReplacedRootDismissModifier.ChildEnvironment);
  }
  return result;
}

void type metadata accessor for _GraphValue<ReplacedRootDismissModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for LocationBox<ReplacedRootDismissModifier.PresentationModeLocation>()
{
  if (!lazy cache variable for type metadata for LocationBox<ReplacedRootDismissModifier.PresentationModeLocation>)
  {
    lazy protocol witness table accessor for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation();
    unint64_t v0 = type metadata accessor for LocationBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<ReplacedRootDismissModifier.PresentationModeLocation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation;
  if (!lazy protocol witness table cache variable for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation;
  if (!lazy protocol witness table cache variable for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ReplacedRootDismissModifier.PresentationModeLocation and conformance ReplacedRootDismissModifier.PresentationModeLocation);
  }
  return result;
}

uint64_t destroy for ReplacedRootDismissModifier.PresentationModeLocation()
{
  swift_weakDestroy();
  swift_release();
  swift_release();

  return swift_weakDestroy();
}

uint64_t initializeWithCopy for ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_weakCopyInit();
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_retain();
  swift_retain();
  swift_weakCopyInit();
  return a1;
}

uint64_t assignWithCopy for ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_weakCopyAssign();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  swift_weakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithTake for ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_weakTakeAssign();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplacedRootDismissModifier.PresentationModeLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplacedRootDismissModifier.PresentationModeLocation()
{
  return &type metadata for ReplacedRootDismissModifier.PresentationModeLocation;
}

uint64_t destroy for ReplacedRootDismissModifier.ChildEnvironment()
{
  return swift_weakDestroy();
}

void *initializeWithCopy for ReplacedRootDismissModifier.ChildEnvironment(void *a1, void *a2, uint64_t a3)
{
  return initializeWithCopy for ReplacedRootDismissModifier.ChildEnvironment(a1, a2, a3, MEMORY[0x1E4FBC940]);
}

_DWORD *assignWithCopy for ReplacedRootDismissModifier.ChildEnvironment(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_weakCopyAssign();
  return a1;
}

void *initializeWithTake for ReplacedRootDismissModifier.ChildEnvironment(void *a1, void *a2, uint64_t a3)
{
  return initializeWithCopy for ReplacedRootDismissModifier.ChildEnvironment(a1, a2, a3, MEMORY[0x1E4FBC950]);
}

void *initializeWithCopy for ReplacedRootDismissModifier.ChildEnvironment(void *a1, void *a2, uint64_t a3, void (*a4)(void *, void *))
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a4(a1 + 3, a2 + 3);
  return a1;
}

uint64_t assignWithTake for ReplacedRootDismissModifier.ChildEnvironment(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_weakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for ReplacedRootDismissModifier.ChildEnvironment()
{
  return &type metadata for ReplacedRootDismissModifier.ChildEnvironment;
}

unsigned char *specialized ReplacedRootDismissModifier.PresentationModeLocation.set(_:transaction:)(unsigned char *result)
{
  if ((*result & 1) == 0)
  {
    if (swift_weakLoadStrong())
    {
      static Transaction.current.getter();
      outlined init with copy of ReplacedRootDismissModifier.PresentationModeLocation(v1, (uint64_t)&v6);
      uint64_t v2 = swift_allocObject();
      outlined init with take of ReplacedRootDismissModifier.PresentationModeLocation((uint64_t)&v6, v2 + 16);
      uint64_t v6 = (uint64_t)partial apply for closure #1 in ReplacedRootDismissModifier.PresentationModeLocation.set(_:transaction:);
      *(void *)&long long v7 = v2;
      default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
      GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
      swift_release();
      swift_release();
      swift_release();
    }
    uint64_t v3 = *(void *)(v1 + 8);
    uint64_t v4 = *(unsigned __int8 *)(v1 + 16);
    uint64_t v5 = *(void *)(v1 + 24);
    uint64_t v6 = 1;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    uint64_t v10 = 0;
    char v11 = 22;
    uint64_t v12 = v3;
    uint64_t v13 = v4;
    uint64_t v14 = v5;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    char v18 = 0;
    uint64_t v19 = 0;
    return (unsigned char *)NavigationAuthority.enqueueRequest(_:)((long long *)&v6);
  }
  return result;
}

uint64_t outlined init with copy of ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_187F5B128()
{
  swift_weakDestroy();
  swift_release();
  swift_release();
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t outlined init with take of ReplacedRootDismissModifier.PresentationModeLocation(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = *(void *)a1;
  long long v4 = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v4;
  swift_weakTakeInit();
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  swift_weakTakeInit();
  return a2;
}

uint64_t partial apply for closure #1 in ReplacedRootDismissModifier.PresentationModeLocation.set(_:transaction:)()
{
  return closure #1 in ReplacedRootDismissModifier.PresentationModeLocation.set(_:transaction:)();
}

uint64_t dispatch thunk of ClarityUIApplicationSceneSettingsProtocol.navigationBarHost.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ClarityUIApplicationSceneSettingsProtocol.listLayout.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ClarityUIApplicationSceneSettingsProtocol.areBadgesEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.isAdminModeEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.isAdminModeEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.listLayout.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.listLayout.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.areBadgesEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of ClarityUIMutableApplicationSceneSettingsProtocol.areBadgesEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ClarityUIApplicationSceneSetting@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized ClarityUIApplicationSceneSetting.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t static ClarityUIApplicationSceneSettingsProtocol.intEnumValue<A>(otherSettings:sceneSetting:defaultValue:)@<X0>(void *a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v18 - v13;
  if (objc_msgSend(a1, sel_objectForSetting_, a2 + 312000, v12))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v20, v21);
    outlined init with copy of Any((uint64_t)v21, (uint64_t)v20);
    type metadata accessor for NSNumber();
    if (swift_dynamicCast())
    {
      id v15 = v19;
      *(void *)&v20[0] = objc_msgSend(v19, sel_integerValue);
      dispatch thunk of RawRepresentable.init(rawValue:)();
      uint64_t v16 = *(void *)(a4 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, a4) != 1)
      {

        __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 32))(a5, v14, a4);
      }
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5, a3, a4);
}

id static ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled(otherSettings:)(void *a1)
{
  return objc_msgSend(a1, sel_BOOLForSetting_, 312001);
}

uint64_t static ClarityUIApplicationSceneSettingsProtocol.navigationBarHost(otherSettings:)@<X0>(void *a1@<X0>, void (*a2)(void)@<X3>, unsigned __int8 a3@<W4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  char v10 = 0;
  a2();
  return static ClarityUIApplicationSceneSettingsProtocol.intEnumValue<A>(otherSettings:sceneSetting:defaultValue:)(a1, a3, (uint64_t)&v10, a4, a5);
}

id static ClarityUIApplicationSceneSettingsProtocol.areBadgesEnabled(otherSettings:)(void *a1)
{
  return objc_msgSend(a1, sel_BOOLForSetting_, 312003);
}

uint64_t static ClarityUIApplicationSceneSettingsProtocol.keyDescription(setting:)()
{
  return String.init<A>(describing:)();
}

uint64_t static ClarityUIApplicationSceneSettingsProtocol.valueDescription(flag:object:setting:)(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 3:
      if (BSSettingFlagIsYes()) {
        uint64_t result = 1702195828;
      }
      else {
        uint64_t result = 0x65736C6166;
      }
      break;
    default:
      outlined init with copy of Any?(a2, (uint64_t)&v4);
      type metadata accessor for Any?();
      uint64_t result = String.init<A>(describing:)();
      break;
  }
  return result;
}

void ClarityUIApplicationSceneSettings.navigationBarHost.getter(uint64_t a1@<X8>)
{
}

void ClarityUIApplicationSceneSettings.listLayout.getter(uint64_t a1@<X8>)
{
}

void ClarityUIApplicationSceneSettings.navigationBarHost.getter(void (*a1)(void)@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v8 = v4;
  id v10 = objc_msgSend(v8, sel_otherSettings);
  char v11 = 0;
  a1();
  static ClarityUIApplicationSceneSettingsProtocol.intEnumValue<A>(otherSettings:sceneSetting:defaultValue:)(v10, a2, (uint64_t)&v11, a3, a4);
}

id ClarityUIApplicationSceneSettings.areBadgesEnabled.getter()
{
  id v1 = objc_msgSend(v0, sel_otherSettings);
  id v2 = objc_msgSend(v1, sel_BOOLForSetting_, 312003);

  return v2;
}

id ClarityUIApplicationSceneSettings.__deallocating_deinit()
{
  return ClarityUIApplicationSceneSettings.__deallocating_deinit(type metadata accessor for ClarityUIApplicationSceneSettings);
}

void protocol witness for ClarityUIApplicationSceneSettingsProtocol.navigationBarHost.getter in conformance ClarityUIApplicationSceneSettings(uint64_t a1@<X8>)
{
}

uint64_t protocol witness for ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled.getter in conformance ClarityUIApplicationSceneSettings(uint64_t a1, uint64_t a2)
{
  return protocol witness for ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled.getter in conformance ClarityUIApplicationSceneSettings(a1, a2, (uint64_t (*)(void))static ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled(otherSettings:));
}

void protocol witness for ClarityUIApplicationSceneSettingsProtocol.listLayout.getter in conformance ClarityUIApplicationSceneSettings(uint64_t a1@<X8>)
{
}

void protocol witness for ClarityUIApplicationSceneSettingsProtocol.navigationBarHost.getter in conformance ClarityUIApplicationSceneSettings(void (*a1)(void)@<X2>, unsigned __int8 a2@<W3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  long long v8 = v4;
  id v10 = objc_msgSend(v8, sel_otherSettings);
  static ClarityUIApplicationSceneSettingsProtocol.navigationBarHost(otherSettings:)(v10, a1, a2, a3, a4);
}

uint64_t protocol witness for ClarityUIApplicationSceneSettingsProtocol.areBadgesEnabled.getter in conformance ClarityUIApplicationSceneSettings(uint64_t a1, uint64_t a2)
{
  return protocol witness for ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled.getter in conformance ClarityUIApplicationSceneSettings(a1, a2, (uint64_t (*)(void))static ClarityUIApplicationSceneSettingsProtocol.areBadgesEnabled(otherSettings:));
}

void (*ClarityUIMutableApplicationSceneSettings.navigationBarHost.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = v1;
  uint64_t v3 = a1 + 9;
  id v4 = objc_msgSend(v1, sel_otherSettings);
  *(unsigned char *)(a1 + 8) = 0;
  lazy protocol witness table accessor for type NavigationBarHost and conformance NavigationBarHost();
  static ClarityUIApplicationSceneSettingsProtocol.intEnumValue<A>(otherSettings:sceneSetting:defaultValue:)(v4, 0, a1 + 8, (uint64_t)&type metadata for NavigationBarHost, v3);

  return ClarityUIMutableApplicationSceneSettings.navigationBarHost.modify;
}

void ClarityUIMutableApplicationSceneSettings.navigationBarHost.modify(uint64_t a1, uint64_t a2)
{
}

void (*ClarityUIMutableApplicationSceneSettings.isAdminModeEnabled.modify(uint64_t a1))(id *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  id v3 = objc_msgSend(v1, sel_otherSettings);
  unsigned __int8 v4 = objc_msgSend(v3, sel_BOOLForSetting_, 312001);

  *(unsigned char *)(a1 + 8) = v4;
  return ClarityUIMutableApplicationSceneSettings.isAdminModeEnabled.modify;
}

void ClarityUIMutableApplicationSceneSettings.isAdminModeEnabled.modify(id *a1, uint64_t a2)
{
}

void (*ClarityUIMutableApplicationSceneSettings.listLayout.modify(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = v1;
  uint64_t v3 = a1 + 9;
  id v4 = objc_msgSend(v1, sel_otherSettings);
  *(unsigned char *)(a1 + 8) = 0;
  lazy protocol witness table accessor for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout();
  static ClarityUIApplicationSceneSettingsProtocol.intEnumValue<A>(otherSettings:sceneSetting:defaultValue:)(v4, 2u, a1 + 8, (uint64_t)&type metadata for MultimodalListStyle.Layout, v3);

  return ClarityUIMutableApplicationSceneSettings.listLayout.modify;
}

void ClarityUIMutableApplicationSceneSettings.listLayout.modify(uint64_t a1, uint64_t a2)
{
}

void ClarityUIMutableApplicationSceneSettings.navigationBarHost.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 9);
  id v6 = objc_msgSend(*(id *)a1, sel_otherSettings);
  id v5 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v4);
  objc_msgSend(v6, sel_setObject_forSetting_, v5, a3);
}

void (*ClarityUIMutableApplicationSceneSettings.areBadgesEnabled.modify(uint64_t a1))(id *a1, uint64_t a2)
{
  *(void *)a1 = v1;
  id v3 = objc_msgSend(v1, sel_otherSettings);
  unsigned __int8 v4 = objc_msgSend(v3, sel_BOOLForSetting_, 312003);

  *(unsigned char *)(a1 + 8) = v4;
  return ClarityUIMutableApplicationSceneSettings.areBadgesEnabled.modify;
}

void ClarityUIMutableApplicationSceneSettings.areBadgesEnabled.modify(id *a1, uint64_t a2)
{
}

void ClarityUIMutableApplicationSceneSettings.isAdminModeEnabled.modify(id *a1, uint64_t a2, uint64_t a3)
{
  id v4 = objc_msgSend(*a1, sel_otherSettings);
  objc_msgSend(v4, sel_setFlag_forSetting_, BSSettingFlagForBool(), a3);
}

id @objc ClarityUIApplicationSceneSettings.keyDescription(forSetting:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  if (specialized ClarityUIApplicationSceneSetting.init(rawValue:)(a3) != 4)
  {
    uint64_t v10 = static ClarityUIApplicationSceneSettingsProtocol.keyDescription(setting:)();
    uint64_t v12 = v13;
    goto LABEL_5;
  }
  v16.receiver = a1;
  v16.super_class = (Class)a4();
  id v7 = a1;
  id v8 = objc_msgSendSuper2(&v16, sel_keyDescriptionForSetting_, a3);
  if (v8)
  {
    long long v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

LABEL_5:
    uint64_t v14 = (void *)MEMORY[0x18C115780](v10, v12);
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }

  uint64_t v14 = 0;
LABEL_7:

  return v14;
}

uint64_t ClarityUIApplicationSceneSettings.valueDescription(for:object:ofSetting:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  unint64_t v7 = a3 - 312000;
  if (v7 <= 3) {
    return static ClarityUIApplicationSceneSettingsProtocol.valueDescription(flag:object:setting:)(a1, a2, v7);
  }
  uint64_t v10 = outlined init with copy of Any?(a2, (uint64_t)v22);
  uint64_t v11 = v23;
  if (v23)
  {
    uint64_t v12 = __swift_project_boxed_opaque_existential_1(v22, v23);
    uint64_t v13 = *(void *)(v11 - 8);
    double v14 = MEMORY[0x1F4188790](v12);
    objc_super v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v13 + 16))(v16, v14);
    uint64_t v17 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
    uint64_t v10 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  else
  {
    uint64_t v17 = 0;
  }
  uint64_t v18 = (objc_class *)a4(v10);
  v21.receiver = v4;
  v21.super_class = v18;
  id v19 = objc_msgSendSuper2(&v21, sel_valueDescriptionForFlag_object_ofSetting_, a1, v17, a3);
  swift_unknownObjectRelease();
  if (!v19) {
    return 0;
  }
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v8;
}

id @objc ClarityUIApplicationSceneSettings.valueDescription(for:object:ofSetting:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  if (a4)
  {
    id v10 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    id v11 = a1;
  }
  uint64_t v12 = ClarityUIApplicationSceneSettings.valueDescription(for:object:ofSetting:)(a3, (uint64_t)v17, a5, a6);
  uint64_t v14 = v13;

  outlined destroy of Any?((uint64_t)v17);
  if (v14)
  {
    uint64_t v15 = (void *)MEMORY[0x18C115780](v12, v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v15 = 0;
  }

  return v15;
}

id @objc ClarityUIApplicationSceneSettings.mutableCopy(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5 = objc_allocWithZone((Class)a4());

  return objc_msgSend(v5, sel_initWithSettings_, a1);
}

id @objc ClarityUIApplicationSceneSettings.init(settings:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  v6.receiver = a1;
  v6.super_class = (Class)a4();
  return objc_msgSendSuper2(&v6, sel_initWithSettings_, a3);
}

id @objc ClarityUIApplicationSceneSettings.init()(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  v4.receiver = a1;
  v4.super_class = (Class)a3();
  return objc_msgSendSuper2(&v4, sel_init);
}

id ClarityUIMutableApplicationSceneSettings.__deallocating_deinit()
{
  return ClarityUIApplicationSceneSettings.__deallocating_deinit(type metadata accessor for ClarityUIMutableApplicationSceneSettings);
}

id ClarityUIApplicationSceneSettings.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for ClarityUIMutableApplicationSceneSettings()
{
  return self;
}

void protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.setter in conformance ClarityUIMutableApplicationSceneSettings(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.modify in conformance ClarityUIMutableApplicationSceneSettings(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ClarityUIMutableApplicationSceneSettings.navigationBarHost.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.isAdminModeEnabled.setter in conformance ClarityUIMutableApplicationSceneSettings(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.isAdminModeEnabled.modify in conformance ClarityUIMutableApplicationSceneSettings(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ClarityUIMutableApplicationSceneSettings.isAdminModeEnabled.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.listLayout.setter in conformance ClarityUIMutableApplicationSceneSettings(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
}

void protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.navigationBarHost.setter in conformance ClarityUIMutableApplicationSceneSettings(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a1;
  id v7 = objc_msgSend(v4, sel_otherSettings);
  id v8 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v6);
  objc_msgSend(v7, sel_setObject_forSetting_, v8, a4);
}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.listLayout.modify in conformance ClarityUIMutableApplicationSceneSettings(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ClarityUIMutableApplicationSceneSettings.listLayout.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.areBadgesEnabled.setter in conformance ClarityUIMutableApplicationSceneSettings(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.isAdminModeEnabled.setter in conformance ClarityUIMutableApplicationSceneSettings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = objc_msgSend(v4, sel_otherSettings);
  objc_msgSend(v6, sel_setFlag_forSetting_, BSSettingFlagForBool(), a4);
}

uint64_t (*protocol witness for ClarityUIMutableApplicationSceneSettingsProtocol.areBadgesEnabled.modify in conformance ClarityUIMutableApplicationSceneSettings(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ClarityUIMutableApplicationSceneSettings.areBadgesEnabled.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ClarityUIApplicationSceneSettingsProtocol.isAdminModeEnabled.getter in conformance ClarityUIApplicationSceneSettings(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v5 = objc_msgSend(v3, sel_otherSettings);
  LOBYTE(a3) = a3();

  return a3 & 1;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationBarHost and conformance NavigationBarHost()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationBarHost and conformance NavigationBarHost;
  if (!lazy protocol witness table cache variable for type NavigationBarHost and conformance NavigationBarHost)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationBarHost and conformance NavigationBarHost);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationBarHost and conformance NavigationBarHost;
  if (!lazy protocol witness table cache variable for type NavigationBarHost and conformance NavigationBarHost)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationBarHost and conformance NavigationBarHost);
  }
  return result;
}

uint64_t specialized ClarityUIApplicationSceneSetting.init(rawValue:)(uint64_t a1)
{
  if ((unint64_t)(a1 - 312000) >= 4) {
    return 4;
  }
  else {
    return a1 - 312000;
  }
}

unsigned char *storeEnumTagSinglePayload for ClarityUIApplicationSceneSetting(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187F5C734);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClarityUIApplicationSceneSetting()
{
  return &type metadata for ClarityUIApplicationSceneSetting;
}

unint64_t lazy protocol witness table accessor for type ClarityUIApplicationSceneSetting and conformance ClarityUIApplicationSceneSetting()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIApplicationSceneSetting and conformance ClarityUIApplicationSceneSetting;
  if (!lazy protocol witness table cache variable for type ClarityUIApplicationSceneSetting and conformance ClarityUIApplicationSceneSetting)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIApplicationSceneSetting and conformance ClarityUIApplicationSceneSetting);
  }
  return result;
}

uint64_t EnvironmentValues.editMode.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.editMode.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
  outlined copy of Binding<NavigationSplitViewColumn>?(v2, v3);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of Binding<NavigationSplitViewColumn>?(v2, v3);
}

BOOL EditMode.isEditing.getter()
{
  return *v0 != 0;
}

BOOL static EditMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void EditMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int EditMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void (*EnvironmentValues.editMode.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[6] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.editMode.modify;
}

void EnvironmentValues.editMode.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (*a1)[6];
  uint64_t v5 = **a1;
  uint64_t v6 = (*a1)[1];
  v3[3] = v5;
  char v7 = *((unsigned char *)v3 + 16);
  v3[4] = v6;
  *((unsigned char *)v3 + 40) = v7;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
  outlined copy of Binding<NavigationSplitViewColumn>?(v5, v6);
  if (a2)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(v5, v6);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined consume of Binding<NavigationSplitViewColumn>?(v5, v6);
    uint64_t v8 = *v3;
    uint64_t v9 = v3[1];
  }
  else
  {
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    uint64_t v8 = v5;
    uint64_t v9 = v6;
  }
  outlined consume of Binding<NavigationSplitViewColumn>?(v8, v9);

  free(v3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance EditModeScopeModifier.TransformModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance EditModeScopeModifier.TransformModifier()
{
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a3, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationCompactColumnKey>, (uint64_t)&type metadata for NavigationCompactColumnKey, (uint64_t)&protocol witness table for NavigationCompactColumnKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationCompactColumnKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility>, (uint64_t)&type metadata for EnvironmentValues.__Key_tabViewSidebarVisibility, (uint64_t)&protocol witness table for EnvironmentValues.__Key_tabViewSidebarVisibility, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v3;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
  outlined copy of Text.Suffix.Storage(a1, a2, a3);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchSuffixKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v3 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EditMode and conformance EditMode()
{
  unint64_t result = lazy protocol witness table cache variable for type EditMode and conformance EditMode;
  if (!lazy protocol witness table cache variable for type EditMode and conformance EditMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EditMode and conformance EditMode);
  }
  return result;
}

uint64_t assignWithTake for EditModeScopeModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for EditModeKey()
{
  return &type metadata for EditModeKey;
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FindContext.Key>);
  outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FindContext.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FindContext.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v2;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>);
  outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey>, (uint64_t)&type metadata for EnvironmentValues.FileDialogCustomizationIDKey, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogCustomizationIDKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>, (uint64_t)&type metadata for TextContentTypeKey, (uint64_t)&protocol witness table for TextContentTypeKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UserInteractionActivityKey>, (uint64_t)&type metadata for UserInteractionActivityKey, (uint64_t)&protocol witness table for UserInteractionActivityKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<UserInteractionActivityKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a3, a4, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogMessageKey>, (uint64_t)&type metadata for EnvironmentValues.FileDialogMessageKey, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogMessageKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogMessageKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a3, a4, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogConfirmationLabelKey>, (uint64_t)&type metadata for EnvironmentValues.FileDialogConfirmationLabelKey, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogConfirmationLabelKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogConfirmationLabelKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, a2, a3, a4, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileExporterFilenameLabelKey>, (uint64_t)&type metadata for EnvironmentValues.FileExporterFilenameLabelKey, (uint64_t)&protocol witness table for EnvironmentValues.FileExporterFilenameLabelKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileExporterFilenameLabelKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t *a5, uint64_t a6, uint64_t a7, unint64_t *a8)
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a5);
  outlined copy of Text?(a1, a2, a3, a4);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a8, a5);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v8 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a5, a2);
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v5;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a5, a2);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t outlined retain of HeaderFooterConfiguration(uint64_t a1)
{
  return a1;
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, unint64_t *a6)
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a3);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a6, a3);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v6 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t *outlined retain of DialogSuppressionConfiguration?(uint64_t *a1)
{
  return a1;
}

uint64_t assignWithTake for EditModeScopeModifier.TransformModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in EditModeScopeModifier.TransformModifier()
{
  return &protocol witness table for EditModeScopeModifier.TransformModifier;
}

uint64_t PlainTextFieldStyle._body(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TextField<_TextFieldStyleLabel>(a1, a2);
}

uint64_t associated type witness table accessor for TextFieldStyle._Body : View in PlainTextFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PlainTextFieldStyle()
{
  return &type metadata for PlainTextFieldStyle;
}

unint64_t lazy protocol witness table accessor for type PlainTextFieldStyle.BodyContent and conformance PlainTextFieldStyle.BodyContent()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainTextFieldStyle.BodyContent and conformance PlainTextFieldStyle.BodyContent;
  if (!lazy protocol witness table cache variable for type PlainTextFieldStyle.BodyContent and conformance PlainTextFieldStyle.BodyContent)
  {
    type metadata accessor for PlainTextFieldStyle.BodyContent(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainTextFieldStyle.BodyContent and conformance PlainTextFieldStyle.BodyContent);
  }
  return result;
}

uint64_t LabeledView.init(label:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for LabeledView();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t LabeledView.init(content:label:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v14(v11);
  a1(v15);
  return LabeledView.init(label:content:)((uint64_t)v13, (uint64_t)v9, a2, a3, a4);
}

uint64_t LabeledView.body.getter(void *a1)
{
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = type metadata accessor for LabeledContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  double v11 = &v16[-v10];
  uint64_t v22 = v3;
  uint64_t v23 = v4;
  uint64_t v13 = a1[4];
  uint64_t v12 = a1[5];
  uint64_t v24 = v13;
  uint64_t v25 = v12;
  uint64_t v26 = v1;
  uint64_t v17 = v3;
  uint64_t v18 = v4;
  uint64_t v19 = v13;
  uint64_t v20 = v12;
  uint64_t v21 = v1;
  LabeledContent<>.init(content:label:)(partial apply for closure #1 in LabeledView.body.getter, (uint64_t (*)(uint64_t))partial apply for closure #2 in LabeledView.body.getter, (uint64_t)v8);
  uint64_t v27 = v13;
  uint64_t v28 = v12;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(unsigned char *, uint64_t))v14)(v11, v5);
}

uint64_t closure #1 in LabeledView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = v8;
  v14[1] = v9;
  v14[2] = v10;
  void v14[3] = v11;
  uint64_t v12 = type metadata accessor for LabeledView();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v12 + 52));
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a3);
}

uint64_t partial apply for closure #1 in LabeledView.body.getter()
{
  return partial apply for closure #1 in LabeledView.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in LabeledView.body.getter);
}

uint64_t closure #2 in LabeledView.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t partial apply for closure #2 in LabeledView.body.getter()
{
  return partial apply for closure #1 in LabeledView.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in LabeledView.body.getter);
}

uint64_t partial apply for closure #1 in LabeledView.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t LabeledView<>.init(_:content:)@<X0>(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in LabeledView<>.init(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - v9;
  v11(v8);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, a3);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, a3);
}

uint64_t partial apply for closure #1 in LabeledView<>.init(_:content:)()
{
  return closure #1 in LabeledView<>.init(_:content:)(v0[4], v0[5], v0[2]);
}

uint64_t LabeledView<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
}

uint64_t closure #1 in LabeledView<>.init<A>(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - v9;
  v11(v8);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, a3);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, a3);
}

uint64_t partial apply for closure #1 in LabeledView<>.init<A>(_:content:)()
{
  return closure #1 in LabeledView<>.init<A>(_:content:)(v0[6], v0[7], v0[2]);
}

uint64_t LabeledView<>.init<A>(_:value:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v17 = v11;
  closure #1 in LabeledView<>.init<A>(_:value:)(a1, (uint64_t)v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v18[0];
  uint64_t v13 = v18[1];
  char v14 = v19;
  uint64_t v15 = v20;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v10 & 1;
  *(void *)(a3 + 24) = v17;
  *(void *)(a3 + 32) = v12;
  *(void *)(a3 + 40) = v13;
  *(unsigned char *)(a3 + 48) = v14;
  *(void *)(a3 + 56) = v15;
  return result;
}

uint64_t closure #1 in LabeledView<>.init<A>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

double LabeledView<>.init<A, B>(_:value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(void *)(a3 - 8);
  double v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = &v24[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, double))(v14 + 16))(v17, a1, v15);
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a2;
  LabeledView<>.init<A>(_:content:)((uint64_t)v17, MEMORY[0x1E4F41420], a3, (uint64_t)&v30);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a2, a4);
  char v18 = v31;
  uint64_t v19 = v32;
  char v20 = v34;
  uint64_t v21 = v35;
  double result = *(double *)&v30;
  long long v23 = v33;
  *(_OWORD *)a7 = v30;
  *(unsigned char *)(a7 + 16) = v18;
  *(void *)(a7 + 24) = v19;
  *(_OWORD *)(a7 + 32) = v23;
  *(unsigned char *)(a7 + 48) = v20;
  *(void *)(a7 + 56) = v21;
  return result;
}

uint64_t closure #2 in LabeledView<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #2 in LabeledView<>.init<A>(_:content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in LabeledView<>.init<A>(_:content:)(*(void *)(v1 + 48), a1);
}

uint64_t LabeledView<>.init<A>(_:value:format:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v20 = v8;
  uint64_t v10 = v9;
  char v18 = v11;
  closure #1 in LabeledView<>.init<A>(_:value:format:)(a1, a2, a3, (uint64_t)v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v12 = v21[0];
  uint64_t v13 = v21[1];
  char v14 = v22;
  uint64_t v15 = v23;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a2, a3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);
  *(void *)a4 = v19;
  *(void *)(a4 + 8) = v10;
  *(unsigned char *)(a4 + 16) = v18 & 1;
  *(void *)(a4 + 24) = v20;
  *(void *)(a4 + 32) = v12;
  *(void *)(a4 + 40) = v13;
  *(unsigned char *)(a4 + 48) = v14;
  *(void *)(a4 + 56) = v15;
  return result;
}

uint64_t closure #1 in LabeledView<>.init<A>(_:value:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v19 - v13, a1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  uint64_t result = Text.init<A>(_:format:)();
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v16;
  *(unsigned char *)(a4 + 16) = v17 & 1;
  *(void *)(a4 + 24) = v18;
  return result;
}

double LabeledView<>.init<A, B>(_:value:format:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v30 = a8;
  uint64_t v17 = *(void *)(a4 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  uint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, a1, v21, v18);
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v35 = v30;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  LabeledView<>.init<A>(_:content:)((uint64_t)v20, MEMORY[0x1E4F41420], a4, (uint64_t)&v38);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a3, a5);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a2, AssociatedTypeWitness);
  char v23 = v39;
  uint64_t v24 = v40;
  char v25 = v42;
  uint64_t v26 = v43;
  double result = *(double *)&v38;
  long long v28 = v41;
  *(_OWORD *)a9 = v38;
  *(unsigned char *)(a9 + 16) = v23;
  *(void *)(a9 + 24) = v24;
  *(_OWORD *)(a9 + 32) = v28;
  *(unsigned char *)(a9 + 48) = v25;
  *(void *)(a9 + 56) = v26;
  return result;
}

uint64_t closure #1 in LabeledView<>.init<A, B>(_:value:format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, double))(v14 + 16))((char *)&v19 - v13, a1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2, a3);
  uint64_t result = Text.init<A>(_:format:)();
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v16;
  *(unsigned char *)(a4 + 16) = v17 & 1;
  *(void *)(a4 + 24) = v18;
  return result;
}

uint64_t partial apply for closure #1 in LabeledView<>.init<A, B>(_:value:format:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in LabeledView<>.init<A, B>(_:value:format:)(v1[7], v1[8], v1[3], a1);
}

uint64_t associated type witness table accessor for View.Body : View in LabeledView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for LabeledView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for LabeledView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187F60850);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          char v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for LabeledView()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187F60890()
{
  return swift_getWitnessTable();
}

void static ToolbarDefaultItemKind.title.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

unint64_t lazy protocol witness table accessor for type [ToolbarDefaultItemKind.Kind] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ToolbarDefaultItemKind.Kind] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ToolbarDefaultItemKind.Kind] and conformance [A])
  {
    type metadata accessor for [ToolbarDefaultItemKind.Kind]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToolbarDefaultItemKind.Kind] and conformance [A]);
  }
  return result;
}

void type metadata accessor for [ToolbarDefaultItemKind.Kind]()
{
  if (!lazy cache variable for type metadata for [ToolbarDefaultItemKind.Kind])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarDefaultItemKind.Kind]);
    }
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance ToolbarDefaultItemKind.Kind(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance ToolbarDefaultItemKind.Kind;
}

uint64_t getEnumTagSinglePayload for ShadowListDataSource(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187F60B38);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ShadowListDataSource(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              int v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *int v19 = v20;
            }
            else
            {
              unsigned int v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187F60D3CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for ListDiffable.RowIDs.Sequence.Element : Hashable in ShadowListDataSource<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs.Sequence.Element : Hashable in ShadowListDataSource<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t ShadowListDataSource.performDrop(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v2, v5, v7);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 + 24) + 160))(a1, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

Swift::Void __swiftcall ShadowListDataSource.commitUpdates()()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  uint64_t v6 = *(void *)(updated - 8);
  double v7 = MEMORY[0x1F4188790](updated);
  uint64_t v9 = &v10[-v8];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v6 + 16))(&v10[-v8], v2, updated, v7);
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  uint64_t v13 = v2;
  ShadowListUpdateRecorder.withBase(do:)((void (*)(char *))partial apply for closure #1 in ShadowListDataSource.commitUpdates(), (uint64_t)v10, updated);
  ShadowListUpdateRecorder.clearUpdates()();
  (*(void (**)(uint64_t, unsigned char *, uint64_t))(v6 + 40))(v2, v9, updated);
}

Swift::Void __swiftcall ShadowListDataSource.discardUpdatesForDeletion()()
{
  type metadata accessor for ShadowListUpdateRecorder();

  ShadowListUpdateRecorder.clearUpdates()();
}

uint64_t ShadowListDataSource.configureGlobalHeader(_:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, v3, v7, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 + 24) + 80))(a1, a2, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t closure #1 in ShadowListDataSource.commitUpdates()(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  long long v85 = a2;
  uint64_t v80 = a1;
  uint64_t v82 = a4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  unsigned int v83 = *(char **)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v69 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v88 = (char *)&v58 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v87 = (char *)&v58 - v11;
  MEMORY[0x1F4188790](v12);
  char v86 = (char *)&v58 - v13;
  uint64_t v77 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v68 = (char *)&v58 - v15;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v17);
  unint64_t v67 = (char *)&v58 - v18;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v20 = swift_getAssociatedConformanceWitness();
  uint64_t v89 = AssociatedTypeWitness;
  v93[0] = AssociatedTypeWitness;
  v93[1] = v6;
  uint64_t v79 = v6;
  v93[2] = AssociatedConformanceWitness;
  v93[3] = v20;
  uint64_t v21 = type metadata accessor for ListUpdate();
  uint64_t v90 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v91 = (char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v92 = (char *)&v58 - v24;
  uint64_t v81 = a3;
  uint64_t v25 = *(void *)&v85[*(int *)(type metadata accessor for ShadowListUpdateRecorder() + 36)];
  uint64_t v26 = swift_bridgeObjectRetain();
  if (!MEMORY[0x18C115CB0](v26, v21)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v27 = 0;
  unsigned int v84 = (void (**)(char *, char *, uint64_t))(v90 + 32);
  long long v85 = (char *)(v90 + 16);
  uint64_t v76 = (void (**)(void))(v16 + 32);
  uint64_t v75 = (void (**)(char *, char *, uint64_t))(v77 + 32);
  unint64_t v65 = (void (**)(void))(v16 + 16);
  char v64 = (void (**)(char *, char *, uint64_t))(v77 + 16);
  uint64_t v63 = v82 + 184;
  long long v62 = (void (**)(char *, uint64_t))(v83 + 8);
  uint64_t v74 = (void (**)(char *, uint64_t))(v77 + 8);
  uint64_t v73 = (void (**)(char *, uint64_t))(v16 + 8);
  uint64_t v61 = v82 + 192;
  long long v60 = (void (**)(char *, uint64_t))(v90 + 8);
  uint64_t v77 = v25;
  uint64_t v66 = v21;
  while (1)
  {
    Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)();
    if (IsNativeType)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v90 + 16))(v92, v25+ ((*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80))+ *(void *)(v90 + 72) * v27, v21);
      uint64_t v34 = v27 + 1;
      if (__OFADD__(v27, 1)) {
        goto LABEL_14;
      }
      goto LABEL_7;
    }
    uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
    if (v59 != 8) {
      break;
    }
    v93[0] = result;
    (*(void (**)(char *, void *, uint64_t))v85)(v92, v93, v21);
    swift_unknownObjectRelease();
    uint64_t v34 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
LABEL_14:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_7:
    (*v84)(v91, v92, v21);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      long long v28 = &v91[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v29 = v67;
      uint64_t v30 = v89;
      ((void (*)(char *))*v76)(v67);
      uint64_t v31 = v68;
      uint64_t v32 = v79;
      (*v75)(v68, v28, v79);
      (*(void (**)(char *, char *, uint64_t))(v82 + 192))(v29, v31, v81);
      uint64_t v25 = v77;
      (*v74)(v31, v32);
      (*v73)(v29, v30);
    }
    else if (EnumCaseMultiPayload == 5)
    {
      uint64_t v36 = TupleTypeMetadata2;
      uint64_t v37 = &v91[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v38 = *(int *)(v36 + 48);
      char v39 = &v86[v38];
      uint64_t v71 = &v86[v38];
      uint64_t v40 = &v91[v38];
      long long v41 = *v76;
      (*v76)();
      uint64_t v72 = v34;
      char v42 = *v75;
      uint64_t v43 = v40;
      uint64_t v44 = v79;
      (*v75)(v39, v43, v79);
      uint64_t v45 = *(int *)(v36 + 48);
      int v46 = &v87[v45];
      uint64_t v70 = &v87[v45];
      uint64_t v47 = &v37[v45];
      uint64_t v48 = v89;
      v41();
      v42(v46, v47, v44);
      unsigned int v83 = &v88[*(int *)(v36 + 48)];
      long long v49 = v83;
      long long v50 = *v65;
      (*v65)();
      long long v51 = *v64;
      (*v64)(v49, v71, v44);
      long long v52 = v69;
      unsigned int v53 = &v69[*(int *)(v36 + 48)];
      ((void (*)(char *, char *, uint64_t))v50)(v69, v87, v48);
      uint64_t v21 = v66;
      v51(v53, v70, v44);
      (*(void (**)(char *, char *, char *, char *, uint64_t))(v82 + 184))(v88, v83, v52, v53, v81);
      uint64_t v25 = v77;
      unsigned int v54 = *v62;
      (*v62)(v87, v36);
      v54(v86, v36);
      uint64_t v55 = *v74;
      (*v74)(v53, v44);
      objc_super v56 = *v73;
      (*v73)(v52, v48);
      v55(v83, v44);
      v56(v88, v48);
      uint64_t v34 = v72;
    }
    else
    {
      (*v60)(v91, v21);
    }
    ++v27;
    if (v34 == MEMORY[0x18C115CB0](v25, v21)) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t ShadowListDataSource.configureHeader(_:transaction:forSectionAt:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(a4 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = *(void *)(v6 - 8);
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v16, v4, v6, v14);
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  ShadowListUpdateRecorder.initialIndex(_:)(a3, updated, v11);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v7 + 88))(v19, v20, v11, v6, v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v6);
}

uint64_t ShadowListDataSource.configureFooter(_:transaction:forSectionAt:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(a4 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = *(void *)(v6 - 8);
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v16, v4, v6, v14);
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  ShadowListUpdateRecorder.initialIndex(_:)(a3, updated, v11);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v7 + 96))(v19, v20, v11, v6, v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v6);
}

uint64_t ShadowListDataSource.firstIndexPath<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v4, v9, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 24) + 120))(a1, a3, a4, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t ShadowListDataSource.firstIndexPath(viewListID:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v2, v5, v7);
  v13[0] = *a1;
  v13[1] = v11;
  (*(void (**)(void *, uint64_t))(*(void *)(a2 + 24) + 128))(v13, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t ShadowListDataSource.firstCollectionViewIndex(of:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v10 + 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v2, v5, v7);
  v14[0] = *a1;
  v14[1] = v11;
  uint64_t v12 = (*(uint64_t (**)(void *, uint64_t))(*(void *)(a2 + 24) + 136))(v14, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return v12;
}

uint64_t ShadowListDataSource.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4;
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v4, v9, v11);
  LOBYTE(v5) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 + 24) + 144))(a1, a2, a3, v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  return v5 & 1;
}

uint64_t ShadowListDataSource.deleteCell(forRow:)(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v48 = v3;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v49 = v4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v53 = swift_getAssociatedTypeWitness();
  uint64_t v6 = v53;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v55 = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for ListUpdate();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  uint64_t v45 = v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v40 = (char *)&v36 - v9;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v43 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  long long v50 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  double v14 = (char *)&v36 - v13;
  v16.n128_f64[0] = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v20 = v19;
  uint64_t v38 = (char *)&v36 + *(int *)(v19 + 48) - v17;
  uint64_t v21 = v38;
  uint64_t v51 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v22 = *(void (**)(void))(v51 + 16);
  ((void (*)(char *, uint64_t, uint64_t, __n128))v22)((char *)&v36 - v17, v46, AssociatedTypeWitness, v16);
  char v39 = v22;
  uint64_t v46 = *(void *)(v6 - 8);
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v37(v21, v47, v6);
  uint64_t v23 = *(int *)(v20 + 48);
  uint64_t v24 = v20;
  uint64_t v42 = v20;
  uint64_t v25 = (uint64_t)v40;
  long long v41 = &v40[v23];
  uint64_t v26 = &v14[v23];
  uint64_t v47 = &v14[v23];
  ((void (*)(char *, char *, uint64_t))v22)(v14, v18, AssociatedTypeWitness);
  uint64_t v27 = v26;
  long long v28 = v38;
  uint64_t v29 = v6;
  uint64_t v30 = v6;
  uint64_t v31 = v37;
  v37(v27, v38, v29);
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v25, v14, AssociatedTypeWitness);
  uint64_t v32 = &v50[*(int *)(v24 + 48)];
  v39();
  v31(v32, v28, v30);
  uint64_t v33 = v46;
  (*(void (**)(char *, char *, uint64_t))(v46 + 32))(v41, v32, v30);
  uint64_t v34 = v44;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ShadowListUpdateRecorder();
  ShadowListUpdateRecorder.recordUpdate(_:)(v25);
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v25, v34);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v42);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v50, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v47, v30);
}

uint64_t ShadowListDataSource.canMoveCell(forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v52 = a1;
  uint64_t v53 = a2;
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v54 = *(void *)(a3 + 24);
  uint64_t v4 = *(void *)(v54 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v58 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v51 = (uint64_t)&v41 - v5;
  uint64_t v50 = v4;
  swift_getAssociatedTypeWitness();
  uint64_t v46 = v3;
  swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v57 = *(void *)(v6 - 8);
  uint64_t v7 = v57;
  MEMORY[0x1F4188790](v6);
  uint64_t v48 = (uint64_t)&v41 - v8;
  uint64_t v55 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v49 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  double v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v41 - v17;
  uint64_t v20 = *(int *)(v19 + 48);
  uint64_t v47 = v19;
  uint64_t v21 = (char *)&v41 + v20 - v17;
  long long v41 = v21;
  uint64_t v42 = v6;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  uint64_t v45 = (char *)&v41 - v17;
  v22((char *)&v41 - v17, v52, v6, v16);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
  uint64_t v24 = v21;
  uint64_t v25 = AssociatedTypeWitness;
  v23(v24, v53, AssociatedTypeWitness);
  uint64_t v26 = v11;
  uint64_t v27 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v26, v56, v46);
  uint64_t v28 = (uint64_t)&v14[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v22)(v14, v18, v6);
  uint64_t v29 = v25;
  v23((char *)v28, (uint64_t)v41, v25);
  uint64_t v30 = v27;
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  uint64_t v32 = v48;
  uint64_t v33 = v51;
  ShadowListUpdateRecorder.initialIndex(_:)(v48, v51, (uint64_t)v14, v28, updated);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
  v58 += 8;
  v34(v28, v29);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v57 + 8);
  v57 += 8;
  uint64_t v36 = v42;
  v35(v14, v42);
  uint64_t v37 = v33;
  uint64_t v38 = v33;
  char v39 = v44;
  LOBYTE(v22) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 168))(v32, v38, v30);
  v34(v37, v29);
  v35((char *)v32, v36);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v30);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v45, v47);
  return v22 & 1;
}

uint64_t ShadowListDataSource.canMoveCell(from:to:)(uint64_t a1, char *a2, void (*a3)(char *, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v66 = a3;
  uint64_t updated = (char *)a4;
  unint64_t v65 = a2;
  uint64_t v63 = a1;
  uint64_t v5 = *(void *)(a5 + 16);
  uint64_t v69 = *(void *)(a5 + 24);
  uint64_t v6 = *(void *)(v69 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v78 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v68 = (uint64_t)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v81 = (uint64_t)&v58 - v10;
  uint64_t v62 = v6;
  swift_getAssociatedTypeWitness();
  uint64_t v72 = v5;
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v82 = *(void *)(v11 - 8);
  uint64_t v12 = v82;
  MEMORY[0x1F4188790](v11);
  uint64_t v77 = (uint64_t)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v79 = (uint64_t)&v58 - v15;
  uint64_t v73 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v71 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = AssociatedTypeWitness;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v64 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v58 - v22;
  double v25 = MEMORY[0x1F4188790](v24);
  uint64_t v75 = (char *)&v58 - v26;
  long long v60 = (char *)&v58 + *(int *)(v27 + 48) - v26;
  uint64_t v28 = v60;
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v29((char *)&v58 - v26, v63, v11, v25);
  uint64_t v30 = *(void (**)(char *, char *, uint64_t))(v78 + 16);
  v30(v28, v65, AssociatedTypeWitness);
  uint64_t v31 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v74 = TupleTypeMetadata2;
  uint64_t v32 = v23;
  uint64_t v76 = v23;
  uint64_t v33 = &v23[v31];
  unint64_t v65 = v33;
  uint64_t v70 = v11;
  uint64_t v61 = (void (*)(char *, char *, uint64_t))v29;
  ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v29)(v32, v66, v11);
  v30(v33, updated, AssociatedTypeWitness);
  uint64_t v34 = (void (*)(uint64_t, char *, uint64_t))v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v71, v80, v72);
  uint64_t v35 = (uint64_t)&v20[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v29)(v20, v75, v11);
  uint64_t v36 = v59;
  v34(v35, v60, v59);
  uint64_t updated = (char *)type metadata accessor for ShadowListUpdateRecorder();
  ShadowListUpdateRecorder.initialIndex(_:)(v79, v81, (uint64_t)v20, v35, (uint64_t)updated);
  uint64_t v78 = *(void *)(v78 + 8);
  ((void (*)(uint64_t, uint64_t))v78)(v35, v36);
  uint64_t v37 = v82 + 8;
  uint64_t v66 = *(void (**)(char *, uint64_t))(v82 + 8);
  uint64_t v38 = v70;
  v66(v20, v70);
  uint64_t v82 = v37;
  uint64_t v39 = (uint64_t)&v20[*(int *)(v74 + 48)];
  v61(v20, v76, v38);
  uint64_t v40 = v36;
  v34(v39, v65, v36);
  uint64_t v41 = v77;
  uint64_t v42 = v68;
  ShadowListUpdateRecorder.initialIndex(_:)(v77, v68, (uint64_t)v20, v39, (uint64_t)updated);
  uint64_t v43 = v39;
  uint64_t v44 = (void (*)(uint64_t, uint64_t))v78;
  ((void (*)(uint64_t, uint64_t))v78)(v43, v40);
  uint64_t v45 = v38;
  uint64_t v46 = (void (*)(uint64_t, uint64_t))v66;
  v66(v20, v45);
  uint64_t v47 = v79;
  uint64_t v48 = v81;
  uint64_t v49 = v41;
  uint64_t v50 = v42;
  uint64_t v51 = v42;
  uint64_t v53 = v71;
  uint64_t v52 = v72;
  LODWORD(v80) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 176))(v79, v81, v49, v50, v72);
  v44(v51, v40);
  uint64_t v54 = v70;
  v46(v77, v70);
  v44(v48, v40);
  v46(v47, v54);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v53, v52);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v64 + 8);
  uint64_t v56 = v74;
  v55(v76, v74);
  v55(v75, v56);
  return v80 & 1;
}

uint64_t ShadowListDataSource.moveCell(fromRowAt:to:)(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v43 = a4;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v38 = a1;
  uint64_t v5 = *(void *)(a5 + 16);
  uint64_t v6 = *(void *)(*(void *)(a5 + 24) + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v41 = v5;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v46 = AssociatedTypeWitness;
  uint64_t v47 = v8;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v49 = swift_getAssociatedConformanceWitness();
  uint64_t v9 = type metadata accessor for ListUpdate();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v36 = v9;
  uint64_t v37 = v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v33 - v11;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v35 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v45 = (char *)&v33 - v18;
  uint64_t v34 = (char *)&v33 + *(int *)(TupleTypeMetadata2 + 48) - v18;
  uint64_t v19 = v34;
  uint64_t v20 = *(void (**)(double))(*(void *)(AssociatedTypeWitness - 8) + 16);
  v20(v17);
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  uint64_t v33 = v8;
  v21(v19, v39, v8);
  uint64_t v22 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v23 = v15;
  uint64_t v44 = v15;
  uint64_t v24 = &v15[v22];
  uint64_t v39 = v24;
  ((void (*)(char *, uint64_t, uint64_t))v20)(v23, v40, AssociatedTypeWitness);
  v21(v24, v43, v8);
  double v25 = &v12[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v26 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v20)(v12, v45, AssociatedTypeWitness);
  uint64_t v27 = v26;
  uint64_t v28 = v33;
  v21(v27, v34, v33);
  uint64_t v29 = &v25[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v20)(v25, v44, AssociatedTypeWitness);
  v21(v29, v39, v28);
  uint64_t v30 = v36;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for ShadowListUpdateRecorder();
  ShadowListUpdateRecorder.recordUpdate(_:)((uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v12, v30);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v35 + 8);
  v31(v44, TupleTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v31)(v45, TupleTypeMetadata2);
}

uint64_t protocol witness for ListCoreDataSource.firstIndexPath<A>(for:) in conformance ShadowListDataSource<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ShadowListDataSource.firstIndexPath<A>(for:)(a1, a4, a2, a3);
}

uint64_t protocol witness for ListCoreDataSource.firstCollectionViewIndex(of:) in conformance ShadowListDataSource<A>(void *a1, uint64_t a2)
{
  return ShadowListDataSource.firstCollectionViewIndex(of:)(a1, a2);
}

uint64_t associated type witness table accessor for ListCoreDataSource.Cell : UIHostingViewDelegate in ShadowListDataSource<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for ListCoreDataSource.HeaderFooter : PlatformListHeaderFooter in ShadowListDataSource<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t partial apply for closure #1 in ShadowListDataSource.commitUpdates()(uint64_t a1)
{
  return closure #1 in ShadowListDataSource.commitUpdates()(a1, *(char **)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t key path setter for EnvironmentValues.dynamicTypeSize : EnvironmentValues()
{
  return EnvironmentValues.dynamicTypeSize.setter();
}

void BorderedButtonStyle.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
}

void BorderedButtonStyle.init(tint:)()
{
}

uint64_t BorderedButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a1;
  uint64_t v41 = a2;
  uint64_t v38 = type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8;
  MEMORY[0x1F4188790](v38);
  uint64_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v36 - v10;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>();
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>(0);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(0);
  uint64_t v20 = v19 - 8;
  MEMORY[0x1F4188790](v19);
  uint64_t v36 = (uint64_t)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>();
  uint64_t v40 = v22 - 8;
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v37 = (uint64_t)&v36 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *v2;
  char v25 = *((unsigned char *)v2 + 8);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_10(v39, (uint64_t)v4, type metadata accessor for PrimitiveButtonStyleConfiguration);
  char v26 = v4[1];
  *uint64_t v8 = *v4;
  v8[1] = v26;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_10((uint64_t)&v4[*(int *)(v38 + 32)], (uint64_t)&v8[*(int *)(v6 + 44)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_3((uint64_t)v4, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v8, (uint64_t)v11);
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v11, (uint64_t)v15);
  v15[*(int *)(v13 + 44)] = v25;
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v11);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_10((uint64_t)v15, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_3((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>);
  uint64_t v27 = v36;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_10((uint64_t)v18, v36, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>);
  uint64_t v28 = v27 + *(int *)(v20 + 44);
  *(void *)uint64_t v28 = v24;
  *(unsigned char *)(v28 + 8) = 0;
  swift_retain();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_3((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v30 = swift_getKeyPath();
  uint64_t v31 = swift_getKeyPath();
  uint64_t v32 = swift_getKeyPath();
  swift_retain();
  uint64_t v33 = v37;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_10(v27, v37, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>);
  uint64_t v34 = v33 + *(int *)(v40 + 44);
  *(void *)uint64_t v34 = v24;
  *(unsigned char *)(v34 + 8) = 0;
  *(void *)(v34 + 16) = KeyPath;
  *(unsigned char *)(v34 + 24) = 0;
  *(void *)(v34 + 32) = v30;
  *(_WORD *)(v34 + 40) = 0;
  *(void *)(v34 + 48) = v31;
  *(unsigned char *)(v34 + 56) = 0;
  *(void *)(v34 + 64) = v32;
  *(unsigned char *)(v34 + 72) = 0;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_3(v27, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_10(v33, v41, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>);
  return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_3(v33, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>(255);
    type metadata accessor for ButtonStyleContainerModifier<PlatterButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for ButtonStyleContainerModifier<BorderedButtonStyle_Phone>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderedButtonStyle_Phone and conformance BorderedButtonStyle_Phone, (uint64_t)&type metadata for BorderedButtonStyle_Phone, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>);
    }
  }
}

uint64_t sub_187F63F38@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.dynamicTypeSize.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187F63F7C()
{
  return EnvironmentValues.dynamicTypeSize.setter();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in BorderedButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<BorderedButtonStyle_Phone> and conformance ButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>();
    type metadata accessor for ButtonStyleContainerModifier<PlatterButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ButtonContainerIsBorderedInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput, (uint64_t)&type metadata for ButtonContainerIsBorderedInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<BorderedButtonStyle_CarMac>, EmptyModifier>>, ButtonStyleContainerModifier<BorderedButtonStyle_Phone>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  return lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ClarityUIInterfaceIdiom>, ButtonStyleContainerModifier<PlatterButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ButtonStyleContainerModifier<WidgetBorderedButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<WidgetBorderedButtonStyle> and conformance ButtonStyleContainerModifier<A>);
}

double Text.LineStyle.init(nsUnderlineStyle:)@<D0>(_OWORD *a1@<X8>)
{
  Text.LineStyle.init(_nsUnderlineStyle:)();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t NSUnderlineStyle.init(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_release();
  return v1;
}

void static SceneBuilder.buildBlock()()
{
}

void static SceneBuilder.buildOptional<A>(_:)()
{
}

ValueMetadata *type metadata accessor for SceneBuilder()
{
  return &type metadata for SceneBuilder;
}

_UNKNOWN **sub_187F64298()
{
  return &protocol witness table for _EmptyScene;
}

uint64_t TransferableProvider.makeContent()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v37 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v34 = *(void *)(a1 + 48);
  uint64_t v33 = *(void *)(a1 + 56);
  v45[0] = v5;
  v45[1] = v6;
  uint64_t v7 = v5;
  uint64_t v30 = v5;
  uint64_t v8 = v6;
  uint64_t v29 = v6;
  void v45[2] = v34;
  v45[3] = v33;
  type metadata accessor for SharePreview();
  uint64_t v36 = type metadata accessor for Optional();
  uint64_t v35 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = *(void *)(a1 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v13);
  unint64_t v32 = type metadata accessor for NSItemProvider();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = (char *)swift_allocObject();
  uint64_t v16 = *(void *)(a1 + 16);
  *((void *)v15 + 2) = v16;
  *((void *)v15 + 3) = v7;
  uint64_t v17 = *(void *)(a1 + 40);
  *((void *)v15 + 4) = v8;
  *((void *)v15 + 5) = v17;
  uint64_t v18 = v34;
  uint64_t v19 = v33;
  *((void *)v15 + 6) = v34;
  *((void *)v15 + 7) = v19;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v15[v14], (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v20 = NSItemProvider.init<A>(transferable:)();
  uint64_t v21 = v31 + *(int *)(a1 + 68);
  uint64_t v22 = v35;
  uint64_t v23 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v10, v21, v36);
  uint64_t v39 = v16;
  uint64_t v40 = v30;
  uint64_t v41 = v29;
  uint64_t v42 = v17;
  uint64_t v43 = v18;
  uint64_t v44 = v19;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TransferableProvider.makeContent(), (uint64_t)v38, MEMORY[0x1E4FBC248], (uint64_t)&type metadata for AnySharePreview, v24, (uint64_t)v45);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
  char v25 = v37;
  outlined init with take of URLProvider((uint64_t)v45, (uint64_t)(v37 + 1), (uint64_t (*)(void))type metadata accessor for AnySharePreview?);
  *char v25 = v20;
  uint64_t v26 = type metadata accessor for TitleDocumentContent();
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 0, 1, v26);
}

uint64_t closure #1 in TransferableProvider.makeContent()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  v18[0] = a2;
  v18[1] = a3;
  void v18[2] = a4;
  v18[3] = a5;
  uint64_t v12 = type metadata accessor for SharePreview();
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (void *)((char *)v18 - v14);
  (*(void (**)(char *, uint64_t, double))(v16 + 16))((char *)v18 - v14, a1, v13);
  return AnySharePreview.init<A, B>(_:)(v15, a2, a3, a4, a5, a6);
}

uint64_t TransferableProvider.init(document:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for TransferableProvider() + 68);
  type metadata accessor for SharePreview();
  uint64_t v7 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, a2, v7);
}

uint64_t protocol witness for TitleDocumentProvider.makeContent() in conformance URLProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(a1, v1, v3);
  uint64_t v4 = type metadata accessor for TitleDocumentContent();
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, 0, 1, v4);
}

uint64_t View.navigationDocument<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v26 = a4;
  v24[1] = a5;
  uint64_t v25 = a2;
  v24[0] = a1;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v9;
  uint64_t v32 = MEMORY[0x1E4FBC248];
  uint64_t v33 = MEMORY[0x1E4FBC248];
  uint64_t v34 = v10;
  *(void *)&long long v35 = MEMORY[0x1E4F24970];
  *((void *)&v35 + 1) = MEMORY[0x1E4F24970];
  uint64_t v11 = type metadata accessor for TransferableProvider();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v24 - v17;
  (*(void (**)(char *, void, uint64_t, double))(v6 + 16))(v8, v24[0], a3, v16);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 1;
  long long v35 = 0u;
  long long v36 = 0u;
  __int16 v37 = 0;
  TransferableProvider.init(document:preview:)((uint64_t)v8, (uint64_t)&v31, a3, (uint64_t)v18);
  type metadata accessor for NavigationDocumentBox();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v18, v11);
  uint64_t v19 = LimitedAvailabilityCommandContentStorage.__allocating_init(_:)((uint64_t)v14);
  LOBYTE(v31) = 1;
  uint64_t v20 = MEMORY[0x1E4F417F8];
  uint64_t v21 = MEMORY[0x1E4F417F0];
  NavigationPropertiesModifier.init(provider:title:)(v19, (uint64_t)&v31, &v29);
  uint64_t v27 = v29;
  char v28 = v30;
  uint64_t v31 = a3;
  uint64_t v32 = v20;
  uint64_t v33 = v20;
  uint64_t v34 = v21;
  *(void *)&long long v35 = v21;
  uint64_t v22 = type metadata accessor for NavigationPropertiesModifier();
  MEMORY[0x18C113660](&v27, v25, v22, v26);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v18, v11);
}

uint64_t type metadata accessor for TransferableProvider()
{
  return swift_getGenericMetadata();
}

uint64_t View.navigationDocument<A>(_:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v29 = a5;
  uint64_t v27 = a6;
  uint64_t v28 = a3;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v10;
  uint64_t v35 = MEMORY[0x1E4FBC248];
  uint64_t v36 = MEMORY[0x1E4FBC248];
  uint64_t v37 = v11;
  uint64_t v38 = MEMORY[0x1E4F24970];
  uint64_t v39 = MEMORY[0x1E4F24970];
  uint64_t v12 = type metadata accessor for TransferableProvider();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v25 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v25, a4, v17);
  outlined init with copy of SharePreview<Never, Never>(v26, (uint64_t)&v34);
  TransferableProvider.init(document:preview:)((uint64_t)v9, (uint64_t)&v34, a4, (uint64_t)v19);
  type metadata accessor for NavigationDocumentBox();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v19, v12);
  uint64_t v20 = LimitedAvailabilityCommandContentStorage.__allocating_init(_:)((uint64_t)v15);
  LOBYTE(v34) = 1;
  uint64_t v21 = MEMORY[0x1E4F417F8];
  uint64_t v22 = MEMORY[0x1E4F417F0];
  NavigationPropertiesModifier.init(provider:title:)(v20, (uint64_t)&v34, &v32);
  uint64_t v30 = v32;
  char v31 = v33;
  uint64_t v34 = a4;
  uint64_t v35 = v21;
  uint64_t v36 = v21;
  uint64_t v37 = v22;
  uint64_t v38 = v22;
  uint64_t v23 = type metadata accessor for NavigationPropertiesModifier();
  MEMORY[0x18C113660](&v30, v28, v23, v29);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v12);
}

uint64_t outlined init with copy of SharePreview<Never, Never>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SharePreview<Never, Never>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for SharePreview<Never, Never>()
{
  if (!lazy cache variable for type metadata for SharePreview<Never, Never>)
  {
    unint64_t v0 = type metadata accessor for SharePreview();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SharePreview<Never, Never>);
    }
  }
}

uint64_t View.navigationDocument<A, B>(_:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v42 = a6;
  v37[1] = a7;
  uint64_t v38 = a1;
  uint64_t v40 = a9;
  uint64_t v41 = a3;
  uint64_t v39 = a2;
  uint64_t v47 = MEMORY[0x1E4FBC248];
  uint64_t v48 = a5;
  uint64_t v12 = MEMORY[0x1E4FBC248];
  uint64_t v49 = MEMORY[0x1E4F24970];
  uint64_t v50 = a8;
  uint64_t v13 = MEMORY[0x1E4F24970];
  v37[0] = a8;
  uint64_t v15 = type metadata accessor for SharePreview();
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v37 - v17;
  uint64_t v19 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a4;
  uint64_t v48 = v12;
  uint64_t v49 = a5;
  uint64_t v50 = a7;
  uint64_t v51 = v13;
  uint64_t v52 = a8;
  uint64_t v23 = type metadata accessor for TransferableProvider();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v28 = MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)v37 - v29;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v22, v38, a4, v28);
  uint64_t v31 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v18, v39, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v18, 0, 1, v15);
  TransferableProvider.init(document:preview:)((uint64_t)v22, (uint64_t)v18, a4, (uint64_t)v30);
  type metadata accessor for NavigationDocumentBox();
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v26, v30, v23);
  uint64_t v32 = LimitedAvailabilityCommandContentStorage.__allocating_init(_:)((uint64_t)v26);
  LOBYTE(v47) = 1;
  uint64_t v33 = MEMORY[0x1E4F417F8];
  uint64_t v34 = MEMORY[0x1E4F417F0];
  NavigationPropertiesModifier.init(provider:title:)(v32, (uint64_t)&v47, &v45);
  uint64_t v43 = v45;
  char v44 = v46;
  uint64_t v47 = a4;
  uint64_t v48 = v33;
  uint64_t v49 = v33;
  uint64_t v50 = v34;
  uint64_t v51 = v34;
  uint64_t v35 = type metadata accessor for NavigationPropertiesModifier();
  MEMORY[0x18C113660](&v43, v41, v35, v42);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v30, v23);
}

{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  uint64_t v42 = a6;
  v37[1] = a7;
  uint64_t v38 = a1;
  uint64_t v40 = a9;
  uint64_t v41 = a3;
  uint64_t v39 = a2;
  uint64_t v47 = a5;
  uint64_t v48 = MEMORY[0x1E4FBC248];
  uint64_t v12 = MEMORY[0x1E4FBC248];
  uint64_t v49 = a8;
  uint64_t v50 = MEMORY[0x1E4F24970];
  v37[0] = a8;
  uint64_t v14 = MEMORY[0x1E4F24970];
  uint64_t v15 = type metadata accessor for SharePreview();
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v37 - v17;
  uint64_t v19 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v49 = v12;
  uint64_t v50 = a7;
  uint64_t v51 = a8;
  uint64_t v52 = v14;
  uint64_t v23 = type metadata accessor for TransferableProvider();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v28 = MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)v37 - v29;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v22, v38, a4, v28);
  uint64_t v31 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v18, v39, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v18, 0, 1, v15);
  TransferableProvider.init(document:preview:)((uint64_t)v22, (uint64_t)v18, a4, (uint64_t)v30);
  type metadata accessor for NavigationDocumentBox();
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v26, v30, v23);
  uint64_t v32 = LimitedAvailabilityCommandContentStorage.__allocating_init(_:)((uint64_t)v26);
  LOBYTE(v47) = 1;
  uint64_t v33 = MEMORY[0x1E4F417F8];
  uint64_t v34 = MEMORY[0x1E4F417F0];
  NavigationPropertiesModifier.init(provider:title:)(v32, (uint64_t)&v47, &v45);
  uint64_t v43 = v45;
  char v44 = v46;
  uint64_t v47 = a4;
  uint64_t v48 = v33;
  uint64_t v49 = v33;
  uint64_t v50 = v34;
  uint64_t v51 = v34;
  uint64_t v35 = type metadata accessor for NavigationPropertiesModifier();
  MEMORY[0x18C113660](&v43, v41, v35, v42);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v30, v23);
}

uint64_t View.navigationDocument<A, B, C>(_:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v42 = a7;
  v37[4] = a8;
  uint64_t v38 = a1;
  uint64_t v40 = a9;
  uint64_t v41 = a3;
  uint64_t v39 = a2;
  uint64_t v47 = a5;
  uint64_t v48 = a6;
  v37[1] = a5;
  void v37[2] = a6;
  uint64_t v49 = a10;
  uint64_t v50 = a11;
  v37[3] = a11;
  uint64_t v15 = type metadata accessor for SharePreview();
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v37 - v17;
  uint64_t v19 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v50 = a8;
  uint64_t v51 = a10;
  uint64_t v52 = a11;
  uint64_t v23 = type metadata accessor for TransferableProvider();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)v37 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v28 = MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)v37 - v29;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v22, v38, a4, v28);
  uint64_t v31 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v18, v39, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v18, 0, 1, v15);
  TransferableProvider.init(document:preview:)((uint64_t)v22, (uint64_t)v18, a4, (uint64_t)v30);
  type metadata accessor for NavigationDocumentBox();
  (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v26, v30, v23);
  uint64_t v32 = LimitedAvailabilityCommandContentStorage.__allocating_init(_:)((uint64_t)v26);
  LOBYTE(v47) = 1;
  uint64_t v33 = MEMORY[0x1E4F417F8];
  uint64_t v34 = MEMORY[0x1E4F417F0];
  NavigationPropertiesModifier.init(provider:title:)(v32, (uint64_t)&v47, &v45);
  uint64_t v43 = v45;
  char v44 = v46;
  uint64_t v47 = a4;
  uint64_t v48 = v33;
  uint64_t v49 = v33;
  uint64_t v50 = v34;
  uint64_t v51 = v34;
  uint64_t v35 = type metadata accessor for NavigationPropertiesModifier();
  MEMORY[0x18C113660](&v43, v41, v35, v42);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v30, v23);
}

uint64_t View.navigationDocument(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URLProvider();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v8, a1, v9);
  type metadata accessor for NavigationDocumentBox<URLProvider>();
  uint64_t v10 = swift_allocObject();
  outlined init with take of URLProvider((uint64_t)v8, v10 + *(void *)(*(void *)v10 + 112), (uint64_t (*)(void))type metadata accessor for URLProvider);
  uint64_t v13 = v10;
  char v14 = 1;
  type metadata accessor for NavigationPropertiesModifier<URL, EmptyView, EmptyView>();
  MEMORY[0x18C113660](&v13, a2, v11, a3);
  return swift_release();
}

uint64_t type metadata accessor for URLProvider()
{
  uint64_t result = type metadata singleton initialization cache for URLProvider;
  if (!type metadata singleton initialization cache for URLProvider) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata accessor for NavigationDocumentBox<URLProvider>()
{
  if (!lazy cache variable for type metadata for NavigationDocumentBox<URLProvider>)
  {
    type metadata accessor for URLProvider();
    unint64_t v0 = type metadata accessor for NavigationDocumentBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationDocumentBox<URLProvider>);
    }
  }
}

void type metadata accessor for NavigationPropertiesModifier<URL, EmptyView, EmptyView>()
{
  if (!lazy cache variable for type metadata for NavigationPropertiesModifier<URL, EmptyView, EmptyView>)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for NavigationPropertiesModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for NavigationPropertiesModifier<URL, EmptyView, EmptyView>);
    }
  }
}

uint64_t sub_187F65BF0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187F65C80()
{
  return swift_getWitnessTable();
}

uint64_t sub_187F65D10()
{
  return swift_getWitnessTable();
}

uint64_t sub_187F65DA0()
{
  return swift_getWitnessTable();
}

uint64_t initializeBufferWithCopyOfBuffer for URLProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t initializeWithCopy for URLProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for URLProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for URLProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for URLProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for URLProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F6601C);
}

uint64_t sub_187F6601C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for URLProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F6609C);
}

uint64_t sub_187F6609C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for URLProvider()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for TransferableProvider()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for SharePreview();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TransferableProvider(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = a3[4];
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7;
  int v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v6 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  unint64_t v13 = *(_DWORD *)(v11 + 80);
  uint64_t v14 = v9 | v13 | 7;
  uint64_t v15 = v14 + v5;
  uint64_t v16 = (v14 + v5) & ~v14;
  uint64_t v17 = *(unsigned int *)(v7 + 84);
  if (v17) {
    unsigned int v18 = v17 - 1;
  }
  else {
    unsigned int v18 = 0;
  }
  unsigned int v19 = v12 - 1;
  if (!v12) {
    unsigned int v19 = 0;
  }
  if (v18 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v18;
  }
  if (v20 <= 0x7FFFFFFE) {
    int v21 = 2147483646;
  }
  else {
    int v21 = v20;
  }
  size_t v22 = *(void *)(v7 + 64);
  if (v17) {
    size_t v23 = v22;
  }
  else {
    size_t v23 = v22 + 1;
  }
  unint64_t v24 = (v23 + v13 + ((v9 + 64) & ~(unint64_t)v9)) & ~v13;
  if (v12) {
    uint64_t v25 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  else {
    uint64_t v25 = *(void *)(*(void *)(v6 - 8) + 64) + 1;
  }
  size_t v26 = v24 + v25;
  unint64_t v27 = v24 + v25 + v16;
  uint64_t v28 = v14 | *(_DWORD *)(v4 + 80);
  if (v28 != 7 || ((*(_DWORD *)(v11 + 80) | v9 | *(_DWORD *)(v4 + 80)) & 0x100000) != 0 || v27 > 0x18)
  {
    uint64_t v31 = *a2;
    *a1 = *a2;
    uint64_t v32 = (uint64_t *)(v31 + ((v28 + 16) & ~v28));
    swift_retain();
    return v32;
  }
  size_t __n = v26;
  size_t v55 = v23;
  size_t v58 = v23 + v13;
  uint64_t v59 = v8;
  size_t v56 = v25;
  uint64_t v60 = a3[3];
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v34 = ~v14;
  uint64_t v62 = a3[4];
  unint64_t v63 = ~(unint64_t)v9;
  uint64_t v57 = ~v13;
  (*(void (**)(uint64_t *))(v4 + 16))(a1);
  uint64_t v64 = a1;
  uint64_t v36 = (_OWORD *)(((unint64_t)a1 + v15) & v34);
  uint64_t v37 = (_OWORD *)(((unint64_t)a2 + v15) & v34);
  if (v20 <= 0x7FFFFFFE)
  {
    unint64_t v38 = *((void *)v37 + 3);
    if (v38 >= 0xFFFFFFFF) {
      LODWORD(v38) = -1;
    }
    unint64_t v39 = v63;
    uint64_t v32 = v64;
    if ((v38 + 1) >= 2) {
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  unint64_t v39 = v63;
  unint64_t v40 = (v10 + (((unint64_t)v37 + 39) & 0xFFFFFFFFFFFFFFF8) + 32) & v63;
  if (v18 == v21)
  {
    uint64_t v32 = v64;
    if (v17 >= 2
      && (*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v59 + 48))(v40, v17, v60) >= 2)
    {
LABEL_40:
      memcpy(v36, v37, __n);
      return v32;
    }
  }
  else
  {
    uint64_t v32 = v64;
    if (v12 >= 2
      && (*(unsigned int (**)(size_t, uint64_t, uint64_t))(v61 + 48))((v58 + v40) & v57, v12, v62) > 1)
    {
      goto LABEL_40;
    }
  }
LABEL_38:
  unint64_t v41 = *((void *)v37 + 3);
  if (v41 < 0xFFFFFFFF)
  {
    long long v42 = v37[1];
    _OWORD *v36 = *v37;
    v36[1] = v42;
  }
  else
  {
    *((void *)v36 + 3) = v41;
    (**(void (***)(_OWORD *, _OWORD *))(v41 - 8))(v36, v37);
  }
  unint64_t v43 = ((unint64_t)v36 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = ((unint64_t)v37 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v44 + 24) < 0xFFFFFFFFuLL)
  {
    long long v48 = *(_OWORD *)(v44 + 16);
    *(_OWORD *)unint64_t v43 = *(_OWORD *)v44;
    *(_OWORD *)(v43 + 16) = v48;
  }
  else
  {
    uint64_t v45 = *(void *)v44;
    uint64_t v46 = *(void *)(v44 + 8);
    char v47 = *(unsigned char *)(v44 + 16);
    outlined copy of Text.Storage(*(void *)v44, v46, v47);
    *(void *)unint64_t v43 = v45;
    *(void *)(v43 + 8) = v46;
    *(unsigned char *)(v43 + 16) = v47;
    *(void *)(v43 + 24) = *(void *)(v44 + 24);
    swift_bridgeObjectRetain();
  }
  uint64_t v49 = (void *)((v10 + 32 + v43) & v39);
  uint64_t v50 = (const void *)((v10 + 32 + v44) & v39);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v59 + 48))(v50, 1, v60))
  {
    memcpy(v49, v50, v55);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v59 + 16))(v49, v50, v60);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v49, 0, 1, v60);
  }
  uint64_t v32 = v64;
  uint64_t v51 = (void *)(((unint64_t)v49 + v58) & v57);
  uint64_t v52 = (const void *)(((unint64_t)v50 + v58) & v57);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v61 + 48))(v52, 1, v62))
  {
    memcpy(v51, v52, v56);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v61 + 16))(v51, v52, v62);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v61 + 56))(v51, 0, 1, v62);
  }
  return v32;
}

uint64_t destroy for TransferableProvider(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v7 = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t result = *(void *)(v6 - 8);
  uint64_t v11 = *(unsigned __int8 *)(result + 80);
  uint64_t v12 = *(unsigned int *)(v8 + 84);
  uint64_t v28 = result;
  unsigned int v13 = *(_DWORD *)(result + 84);
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = (v5 + a1 + (v9 | v11 | 7)) & ~(v9 | v11 | 7);
  unsigned int v16 = v12 - 1;
  if (!v12) {
    unsigned int v16 = 0;
  }
  unsigned int v17 = v13 - 1;
  if (!v13) {
    unsigned int v17 = 0;
  }
  if (v16 > v17) {
    unsigned int v17 = v16;
  }
  uint64_t v18 = ~v9;
  uint64_t v19 = ~v11;
  if (v17 > 0x7FFFFFFE)
  {
    unint64_t v21 = (v9 + ((v15 + 39) & 0xFFFFFFFFFFFFFFF8) + 32) & v18;
    if (v16 == v17)
    {
      if (v12 >= 2)
      {
        uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v21, v12, v7);
        if (result >= 2) {
          return result;
        }
      }
    }
    else if (v13 >= 2)
    {
      uint64_t v22 = v12 ? v11 : v11 + 1;
      uint64_t result = (*(uint64_t (**)(unint64_t))(v28 + 48))((v22 + v14 + v21) & v19);
      if (result > 1) {
        return result;
      }
    }
    goto LABEL_21;
  }
  unint64_t v20 = *(void *)(v15 + 24);
  if (v20 >= 0xFFFFFFFF) {
    LODWORD(v20) = -1;
  }
  if ((v20 + 1) < 2)
  {
LABEL_21:
    if (*(void *)(v15 + 24) >= 0xFFFFFFFFuLL) {
      __swift_destroy_boxed_opaque_existential_1(v15);
    }
    unint64_t v23 = (v15 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v23 + 24) >= 0xFFFFFFFFuLL)
    {
      outlined consume of Text.Storage(*(void *)v23, *(void *)(v23 + 8), *(unsigned char *)(v23 + 16));
      swift_bridgeObjectRelease();
    }
    uint64_t v24 = (v9 + v23 + 32) & v18;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v24, 1, v7)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v24, v7);
    }
    if (v12) {
      uint64_t v25 = v11;
    }
    else {
      uint64_t v25 = v11 + 1;
    }
    uint64_t v26 = (v25 + v14 + v24) & v19;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v6);
    if (!result)
    {
      unint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8);
      return v27(v26, v6);
    }
  }
  return result;
}

uint64_t initializeWithCopy for TransferableProvider(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = a3[3];
  uint64_t v9 = a3[4];
  uint64_t v63 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(void *)(v9 - 8);
  uint64_t v13 = v12;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v11 | v14 | 7;
  uint64_t v16 = v15 + v7;
  unsigned int v17 = (_OWORD *)((v16 + a1) & ~v15);
  uint64_t v18 = (unint64_t *)((v16 + a2) & ~v15);
  unsigned int v19 = *(_DWORD *)(v10 + 84);
  unsigned int v20 = v19 - 1;
  if (!v19) {
    unsigned int v20 = 0;
  }
  uint64_t v21 = *(unsigned int *)(v12 + 84);
  unsigned int v22 = v21 - 1;
  if (!v21) {
    unsigned int v22 = 0;
  }
  if (v20 > v22) {
    unsigned int v22 = v20;
  }
  size_t v23 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v24 = ~v14;
  size_t v25 = *(void *)(*(void *)(v9 - 8) + 64);
  if (v22 <= 0x7FFFFFFE) {
    int v26 = 2147483646;
  }
  else {
    int v26 = v22;
  }
  uint64_t v58 = ~v11;
  if (v22 > 0x7FFFFFFE)
  {
    unint64_t v28 = (v11 + (((unint64_t)v18 + 39) & 0xFFFFFFFFFFFFFFF8) + 32) & ~v11;
    if (v20 == v26)
    {
      if (v19 < 2) {
        goto LABEL_24;
      }
      unsigned int v64 = *(_DWORD *)(v10 + 84);
      size_t v59 = v23;
      unsigned int v29 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v10 + 48))(v28, v19, v63);
      size_t v23 = v59;
      uint64_t v24 = ~v14;
      unsigned int v19 = v64;
      if (v29 < 2) {
        goto LABEL_24;
      }
    }
    else
    {
      if (v21 < 2) {
        goto LABEL_24;
      }
      uint64_t v30 = v19 ? *(unsigned __int8 *)(v12 + 80) : v14 + 1;
      unsigned int v65 = *(_DWORD *)(v10 + 84);
      size_t v60 = v23;
      unsigned int v31 = (*(uint64_t (**)(size_t, uint64_t, uint64_t))(v12 + 48))((v30 + v23 + v28) & v24, v21, v9);
      size_t v23 = v60;
      uint64_t v24 = ~v14;
      unsigned int v19 = v65;
      if (v31 <= 1) {
        goto LABEL_24;
      }
    }
LABEL_26:
    uint64_t v33 = ((v11 + 64) & ~v11) + v14;
    if (!v19) {
      ++v33;
    }
    size_t v34 = (v33 + v23) & v24;
    if (v21) {
      size_t v35 = v25;
    }
    else {
      size_t v35 = v25 + 1;
    }
    size_t v36 = v35 + v34;
    uint64_t v37 = v17;
    unint64_t v38 = v18;
    goto LABEL_49;
  }
  unint64_t v27 = v18[3];
  if (v27 >= 0xFFFFFFFF) {
    LODWORD(v27) = -1;
  }
  if ((v27 + 1) >= 2) {
    goto LABEL_26;
  }
LABEL_24:
  unint64_t v32 = v18[3];
  size_t v56 = v25;
  uint64_t v57 = v14;
  size_t v61 = v23;
  uint64_t v62 = v24;
  unsigned int v66 = v19;
  if (v32 < 0xFFFFFFFF)
  {
    long long v39 = *((_OWORD *)v18 + 1);
    *unsigned int v17 = *(_OWORD *)v18;
    v17[1] = v39;
  }
  else
  {
    *((void *)v17 + 3) = v32;
    (**(void (***)(_OWORD *, unint64_t *))(v32 - 8))(v17, v18);
  }
  unint64_t v40 = ((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v41 = ((unint64_t)v18 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v41 + 24) < 0xFFFFFFFFuLL)
  {
    long long v47 = *(_OWORD *)(v41 + 16);
    *(_OWORD *)unint64_t v40 = *(_OWORD *)v41;
    *(_OWORD *)(v40 + 16) = v47;
  }
  else
  {
    uint64_t v42 = *(void *)v41;
    uint64_t v43 = *(void *)(v41 + 8);
    uint64_t v55 = v13;
    int v44 = v21;
    uint64_t v21 = v9;
    uint64_t v45 = a1;
    char v46 = *(unsigned char *)(v41 + 16);
    outlined copy of Text.Storage(*(void *)v41, v43, v46);
    *(void *)unint64_t v40 = v42;
    *(void *)(v40 + 8) = v43;
    *(unsigned char *)(v40 + 16) = v46;
    a1 = v45;
    uint64_t v9 = v21;
    LODWORD(v21) = v44;
    uint64_t v13 = v55;
    *(void *)(v40 + 24) = *(void *)(v41 + 24);
    swift_bridgeObjectRetain();
  }
  long long v48 = (void *)((v11 + 32 + v40) & v58);
  uint64_t v49 = (const void *)((v11 + 32 + v41) & v58);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v49, 1, v63))
  {
    if (v66) {
      size_t v50 = v61;
    }
    else {
      size_t v50 = v61 + 1;
    }
    memcpy(v48, v49, v50);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v48, v49, v63);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v48, 0, 1, v63);
    if (v66) {
      size_t v50 = v61;
    }
    else {
      size_t v50 = v61 + 1;
    }
  }
  size_t v51 = v50 + v57;
  uint64_t v52 = (void *)(((unint64_t)v48 + v50 + v57) & v62);
  uint64_t v53 = (unint64_t *)(((unint64_t)v49 + v51) & v62);
  if (!(*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v13 + 48))(v53, 1, v9))
  {
    (*(void (**)(void *, unint64_t *, uint64_t))(v13 + 16))(v52, v53, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v52, 0, 1, v9);
    return a1;
  }
  if (v21) {
    size_t v36 = v56;
  }
  else {
    size_t v36 = v56 + 1;
  }
  uint64_t v37 = v52;
  unint64_t v38 = v53;
LABEL_49:
  memcpy(v37, v38, v36);
  return a1;
}

uint64_t assignWithCopy for TransferableProvider(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v95 = a3[3];
  uint64_t v96 = a3[4];
  uint64_t v8 = *(void *)(v95 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v96 - 8);
  uint64_t v11 = v10;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = v9 | v12 | 7;
  uint64_t v14 = v13 + v7;
  uint64_t v93 = a1;
  uint64_t v15 = (v14 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  uint64_t v17 = *(unsigned int *)(v8 + 84);
  if (v17) {
    unsigned int v18 = v17 - 1;
  }
  else {
    unsigned int v18 = 0;
  }
  uint64_t v19 = *(unsigned int *)(v10 + 84);
  unsigned int v20 = v19 - 1;
  if (!v19) {
    unsigned int v20 = 0;
  }
  if (v18 > v20) {
    unsigned int v20 = v18;
  }
  uint64_t v21 = ~v9;
  uint64_t v91 = (v9 + 64) & ~v9;
  size_t v97 = *(void *)(*(void *)(v95 - 8) + 64);
  uint64_t v98 = ~v12;
  uint64_t v99 = *(unsigned __int8 *)(v10 + 80);
  size_t v92 = *(void *)(v10 + 64);
  if (v20 <= 0x7FFFFFFE) {
    int v22 = 2147483646;
  }
  else {
    int v22 = v20;
  }
  unsigned int v94 = *(_DWORD *)(v10 + 84);
  if (v20 > 0x7FFFFFFE)
  {
    uint64_t v27 = v9 + 32;
    unint64_t v28 = (v9 + 32 + ((v15 + 39) & 0xFFFFFFFFFFFFFFF8)) & v21;
    if (v18 == v22)
    {
      if (v17 < 2) {
        goto LABEL_31;
      }
      unsigned int v29 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v28, v17, v95);
    }
    else
    {
      if (v19 < 2) {
        goto LABEL_31;
      }
      uint64_t v33 = *(unsigned __int8 *)(v10 + 80);
      if (!v17) {
        uint64_t v33 = v12 + 1;
      }
      unsigned int v29 = (*(uint64_t (**)(size_t, uint64_t, uint64_t))(v10 + 48))((v33 + v97 + v28) & v98, v19, v96);
    }
    LODWORD(v19) = v94;
    if (v29 >= 2)
    {
      unint64_t v44 = (v27 + ((v16 + 39) & 0xFFFFFFFFFFFFFFF8)) & v21;
      if (v18 == v22)
      {
        if (v17 >= 2)
        {
          unsigned int v45 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v44, v17, v95);
          LODWORD(v19) = v94;
          if (v45 >= 2) {
            goto LABEL_23;
          }
        }
      }
      else if (v94 >= 2)
      {
        uint64_t v76 = v99;
        if (!v17) {
          uint64_t v76 = v99 + 1;
        }
        unsigned int v77 = (*(uint64_t (**)(size_t))(v11 + 48))((v76 + v97 + v44) & v98);
        LODWORD(v19) = v94;
        if (v77 > 1) {
          goto LABEL_23;
        }
      }
      goto LABEL_93;
    }
LABEL_31:
    unint64_t v34 = (v27 + ((v16 + 39) & 0xFFFFFFFFFFFFFFF8)) & v21;
    if (v18 == v22)
    {
      if (v17 >= 2
        && (*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v34, v17, v95) >= 2)
      {
        goto LABEL_42;
      }
    }
    else if (v19 >= 2)
    {
      uint64_t v35 = v99;
      if (!v17) {
        uint64_t v35 = v99 + 1;
      }
      if ((*(unsigned int (**)(size_t, void, uint64_t))(v11 + 48))((v35 + v97 + v34) & v98, v94, v96) > 1) {
        goto LABEL_42;
      }
    }
    goto LABEL_39;
  }
  unint64_t v23 = *(void *)(v15 + 24);
  if (v23 >= 0xFFFFFFFF) {
    LODWORD(v23) = -1;
  }
  unsigned int v24 = v23 + 1;
  unint64_t v25 = *(void *)(v16 + 24);
  if (v25 >= 0xFFFFFFFF) {
    LODWORD(v25) = -1;
  }
  unsigned int v26 = v25 + 1;
  if (v24 >= 2)
  {
    if (v26 >= 2)
    {
LABEL_23:
      uint64_t v30 = v91 + v99;
      if (!v17) {
        ++v30;
      }
      BOOL v31 = v19 == 0;
      uint64_t v32 = (v30 + v97) & v98;
      goto LABEL_54;
    }
LABEL_93:
    unint64_t v78 = *(void *)(v16 + 24);
    if (v78 < 0xFFFFFFFF)
    {
      long long v79 = *(_OWORD *)(v16 + 16);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *(_OWORD *)(v15 + 16) = v79;
    }
    else
    {
      *(void *)(v15 + 24) = v78;
      (**(void (***)(uint64_t, uint64_t))(v78 - 8))(v15, v16);
    }
    unint64_t v80 = (v15 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v81 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v81 + 24) < 0xFFFFFFFFuLL)
    {
      long long v85 = *(_OWORD *)(v81 + 16);
      *(_OWORD *)unint64_t v80 = *(_OWORD *)v81;
      *(_OWORD *)(v80 + 16) = v85;
    }
    else
    {
      uint64_t v82 = *(void *)v81;
      uint64_t v83 = *(void *)(v81 + 8);
      char v84 = *(unsigned char *)(v81 + 16);
      outlined copy of Text.Storage(*(void *)v81, v83, v84);
      *(void *)unint64_t v80 = v82;
      *(void *)(v80 + 8) = v83;
      *(unsigned char *)(v80 + 16) = v84;
      *(void *)(v80 + 24) = *(void *)(v81 + 24);
      swift_bridgeObjectRetain();
    }
    char v86 = (void *)((v9 + 32 + v80) & v21);
    uint64_t v87 = (v9 + 32 + v81) & v21;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v87, 1, v95))
    {
      if (v17) {
        size_t v88 = v97;
      }
      else {
        size_t v88 = v97 + 1;
      }
      memcpy(v86, (const void *)((v9 + 32 + v81) & v21), v88);
    }
    else
    {
      (*(void (**)(void *, unint64_t, uint64_t))(v8 + 16))(v86, (v9 + 32 + v81) & v21, v95);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v86, 0, 1, v95);
      if (v17) {
        size_t v88 = v97;
      }
      else {
        size_t v88 = v97 + 1;
      }
    }
    size_t v89 = v88 + v99;
    uint64_t v71 = (void *)(((unint64_t)v86 + v88 + v99) & v98);
    uint64_t v72 = (void *)((v89 + v87) & v98);
    if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(v11 + 48))(v72, 1, v96))
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v71, v72, v96);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v71, 0, 1, v96);
      return v93;
    }
    goto LABEL_108;
  }
  if (v26 >= 2)
  {
LABEL_42:
    if (*(void *)(v15 + 24) >= 0xFFFFFFFFuLL) {
      __swift_destroy_boxed_opaque_existential_1(v15);
    }
    unint64_t v37 = (v15 + 39) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v37 + 24) >= 0xFFFFFFFFuLL)
    {
      outlined consume of Text.Storage(*(void *)v37, *(void *)(v37 + 8), *(unsigned char *)(v37 + 16));
      swift_bridgeObjectRelease();
    }
    uint64_t v38 = (v9 + v37 + 32) & v21;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v38, 1, v95)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v38, v95);
    }
    if (v17) {
      size_t v39 = v97;
    }
    else {
      size_t v39 = v97 + 1;
    }
    if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v11 + 48))((v39 + v99 + v38) & v98, 1, v96)) {
      (*(void (**)(size_t, uint64_t))(v11 + 8))((v39 + v99 + v38) & v98, v96);
    }
    BOOL v31 = v94 == 0;
    uint64_t v32 = (v91 + v99 + v39) & v98;
LABEL_54:
    size_t v40 = v92;
    if (v31) {
      size_t v40 = v92 + 1;
    }
    size_t v41 = v40 + v32;
    uint64_t v42 = (void *)v15;
    uint64_t v43 = (const void *)v16;
    goto LABEL_112;
  }
LABEL_39:
  unint64_t v36 = *(void *)(v16 + 24);
  if (*(void *)(v15 + 24) < 0xFFFFFFFFuLL)
  {
    if (v36 >= 0xFFFFFFFF)
    {
      *(void *)(v15 + 24) = v36;
      (**(void (***)(uint64_t, uint64_t))(v36 - 8))(v15, v16);
      goto LABEL_65;
    }
  }
  else
  {
    if (v36 >= 0xFFFFFFFF)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)v15, (uint64_t *)v16);
      goto LABEL_65;
    }
    __swift_destroy_boxed_opaque_existential_1(v15);
  }
  long long v46 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v46;
LABEL_65:
  unint64_t v47 = (v15 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v48 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v49 = *(void *)(v48 + 24);
  if (*(void *)(v47 + 24) < 0xFFFFFFFFuLL)
  {
    if (v49 >= 0xFFFFFFFF)
    {
      uint64_t v56 = *(void *)v48;
      uint64_t v57 = *(void *)(v48 + 8);
      char v58 = *(unsigned char *)(v48 + 16);
      outlined copy of Text.Storage(*(void *)v48, v57, v58);
      *(void *)unint64_t v47 = v56;
      *(void *)(v47 + 8) = v57;
      *(unsigned char *)(v47 + 16) = v58;
      *(void *)(v47 + 24) = *(void *)(v48 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_72;
    }
  }
  else
  {
    if (v49 >= 0xFFFFFFFF)
    {
      uint64_t v50 = *(void *)v48;
      uint64_t v51 = *(void *)(v48 + 8);
      char v52 = *(unsigned char *)(v48 + 16);
      outlined copy of Text.Storage(*(void *)v48, v51, v52);
      uint64_t v53 = *(void *)v47;
      uint64_t v54 = *(void *)(v47 + 8);
      char v55 = *(unsigned char *)(v47 + 16);
      *(void *)unint64_t v47 = v50;
      *(void *)(v47 + 8) = v51;
      *(unsigned char *)(v47 + 16) = v52;
      outlined consume of Text.Storage(v53, v54, v55);
      *(void *)(v47 + 24) = *(void *)(v48 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_72;
    }
    outlined consume of Text.Storage(*(void *)v47, *(void *)(v47 + 8), *(unsigned char *)(v47 + 16));
    swift_bridgeObjectRelease();
  }
  long long v59 = *(_OWORD *)(v48 + 16);
  *(_OWORD *)unint64_t v47 = *(_OWORD *)v48;
  *(_OWORD *)(v47 + 16) = v59;
LABEL_72:
  size_t v60 = (void *)((v9 + 32 + v47) & v21);
  size_t v61 = (void *)((v9 + 32 + v48) & v21);
  uint64_t v62 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v63 = v62(v60, 1, v95);
  int v64 = v62(v61, 1, v95);
  if (v63)
  {
    uint64_t v65 = v96;
    uint64_t v66 = v98;
    if (!v64)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v60, v61, v95);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v60, 0, 1, v95);
      size_t v67 = v97;
      goto LABEL_81;
    }
  }
  else
  {
    uint64_t v65 = v96;
    uint64_t v66 = v98;
    if (!v64)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v60, v61, v95);
      size_t v67 = v97;
      goto LABEL_81;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v60, v95);
  }
  size_t v67 = v97;
  if (v17) {
    size_t v68 = v97;
  }
  else {
    size_t v68 = v97 + 1;
  }
  memcpy(v60, v61, v68);
LABEL_81:
  if (v17) {
    size_t v69 = v67;
  }
  else {
    size_t v69 = v67 + 1;
  }
  uint64_t v70 = v69 + v99;
  uint64_t v71 = (void *)(((unint64_t)v60 + v70) & v66);
  uint64_t v72 = (void *)(((unint64_t)v61 + v70) & v66);
  uint64_t v73 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v74 = v73(v71, 1, v65);
  int v75 = v73(v72, 1, v65);
  if (!v74)
  {
    if (!v75)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v71, v72, v65);
      return v93;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v71, v65);
    goto LABEL_108;
  }
  if (v75)
  {
LABEL_108:
    if (v94) {
      size_t v41 = v92;
    }
    else {
      size_t v41 = v92 + 1;
    }
    uint64_t v42 = v71;
    uint64_t v43 = v72;
LABEL_112:
    memcpy(v42, v43, v41);
    return v93;
  }
  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v71, v72, v65);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v71, 0, 1, v65);
  return v93;
}

uint64_t initializeWithTake for TransferableProvider(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = a3[3];
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v57 = a3[4];
  uint64_t v58 = a1;
  uint64_t v12 = *(void *)(v57 - 8);
  uint64_t v13 = v12;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v10 | v14 | 7;
  uint64_t v16 = v15 + v7;
  uint64_t v17 = (_OWORD *)((v16 + a1) & ~v15);
  unsigned int v18 = (unint64_t *)((v16 + a2) & ~v15);
  uint64_t v19 = *(unsigned int *)(v9 + 84);
  unsigned int v20 = v19 - 1;
  if (!v19) {
    unsigned int v20 = 0;
  }
  uint64_t v21 = *(unsigned int *)(v12 + 84);
  unsigned int v22 = v21 - 1;
  if (!v21) {
    unsigned int v22 = 0;
  }
  if (v20 > v22) {
    unsigned int v22 = v20;
  }
  uint64_t v23 = ~v10;
  size_t v24 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v25 = ~v14;
  uint64_t v11 = *(void *)(v57 - 8);
  size_t v26 = *(void *)(v11 + 64);
  if (v22 <= 0x7FFFFFFE) {
    int v27 = 2147483646;
  }
  else {
    int v27 = v22;
  }
  if (v22 > 0x7FFFFFFE)
  {
    unint64_t v29 = (v10 + (((unint64_t)v18 + 39) & 0xFFFFFFFFFFFFFFF8) + 32) & v23;
    if (v20 == v27)
    {
      if (v19 < 2) {
        goto LABEL_24;
      }
      size_t v50 = *(void *)(v11 + 64);
      size_t v53 = *(void *)(*(void *)(v8 - 8) + 64);
      unsigned int v30 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v29, v19, v8);
      size_t v24 = v53;
      uint64_t v25 = ~v14;
      size_t v26 = v50;
      if (v30 < 2) {
        goto LABEL_24;
      }
    }
    else
    {
      if (v21 < 2) {
        goto LABEL_24;
      }
      uint64_t v31 = v19 ? *(unsigned __int8 *)(v12 + 80) : v14 + 1;
      size_t v51 = *(void *)(v11 + 64);
      size_t v54 = *(void *)(*(void *)(v8 - 8) + 64);
      unsigned int v32 = (*(uint64_t (**)(size_t, uint64_t, uint64_t))(v12 + 48))((v31 + v24 + v29) & v25, v21, v57);
      size_t v24 = v54;
      uint64_t v25 = ~v14;
      size_t v26 = v51;
      if (v32 <= 1) {
        goto LABEL_24;
      }
    }
LABEL_29:
    uint64_t v40 = ((v10 + 64) & ~v10) + v14;
    if (!v19) {
      ++v40;
    }
    size_t v41 = (v40 + v24) & v25;
    if (v21) {
      size_t v42 = v26;
    }
    else {
      size_t v42 = v26 + 1;
    }
    size_t v43 = v42 + v41;
    unint64_t v44 = v17;
    unsigned int v45 = v18;
    goto LABEL_43;
  }
  unint64_t v28 = v18[3];
  if (v28 >= 0xFFFFFFFF) {
    LODWORD(v28) = -1;
  }
  if ((v28 + 1) >= 2) {
    goto LABEL_29;
  }
LABEL_24:
  size_t v55 = v24;
  uint64_t v56 = v25;
  size_t v52 = v26;
  long long v33 = *((_OWORD *)v18 + 1);
  *uint64_t v17 = *(_OWORD *)v18;
  v17[1] = v33;
  unint64_t v34 = (_OWORD *)(((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v35 = (_OWORD *)(((unint64_t)v18 + 39) & 0xFFFFFFFFFFFFFFF8);
  long long v36 = v35[1];
  *unint64_t v34 = *v35;
  v34[1] = v36;
  unint64_t v37 = (void *)(((unint64_t)v34 + v10 + 32) & v23);
  uint64_t v38 = (const void *)(((unint64_t)v35 + v10 + 32) & v23);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v38, 1, v8))
  {
    if (v19) {
      size_t v39 = v55;
    }
    else {
      size_t v39 = v55 + 1;
    }
    memcpy(v37, v38, v39);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v37, v38, v8);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v37, 0, 1, v8);
    if (v19) {
      size_t v39 = v55;
    }
    else {
      size_t v39 = v55 + 1;
    }
  }
  size_t v46 = v39 + v14;
  unint64_t v47 = (void *)(((unint64_t)v37 + v39 + v14) & v56);
  unint64_t v48 = (unint64_t *)(((unint64_t)v38 + v46) & v56);
  if (!(*(unsigned int (**)(unint64_t *, uint64_t, uint64_t))(v13 + 48))(v48, 1, v57))
  {
    (*(void (**)(void *, unint64_t *, uint64_t))(v13 + 32))(v47, v48, v57);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v47, 0, 1, v57);
    return v58;
  }
  if (v21) {
    size_t v43 = v52;
  }
  else {
    size_t v43 = v52 + 1;
  }
  unint64_t v44 = v47;
  unsigned int v45 = v48;
LABEL_43:
  memcpy(v44, v45, v43);
  return v58;
}

uint64_t assignWithTake for TransferableProvider(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v92 = a3[3];
  uint64_t v9 = *(void *)(v92 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = a3[4];
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = v10 | v13 | 7;
  uint64_t v15 = v14 + v7;
  uint64_t v90 = a1;
  uint64_t v16 = (v15 + a1) & ~v14;
  uint64_t v17 = (_OWORD *)((v15 + a2) & ~v14);
  uint64_t v18 = *(unsigned int *)(v9 + 84);
  if (v18) {
    unsigned int v19 = v18 - 1;
  }
  else {
    unsigned int v19 = 0;
  }
  uint64_t v93 = *(void *)(v11 - 8);
  unsigned int v94 = *(_DWORD *)(v12 + 84);
  unsigned int v20 = v94 - 1;
  if (!v94) {
    unsigned int v20 = 0;
  }
  if (v19 > v20) {
    unsigned int v20 = v19;
  }
  uint64_t v21 = ~v10;
  uint64_t v88 = (v10 + 64) & ~v10;
  uint64_t v8 = *(void *)(v92 - 8);
  size_t v22 = *(void *)(v8 + 64);
  uint64_t v91 = ~v13;
  size_t v89 = *(void *)(*(void *)(v11 - 8) + 64);
  if (v20 <= 0x7FFFFFFE) {
    int v23 = 2147483646;
  }
  else {
    int v23 = v20;
  }
  if (v20 <= 0x7FFFFFFE)
  {
    unint64_t v24 = *(void *)(v16 + 24);
    if (v24 >= 0xFFFFFFFF) {
      LODWORD(v24) = -1;
    }
    unsigned int v25 = v24 + 1;
    unint64_t v26 = *((void *)v17 + 3);
    if (v26 >= 0xFFFFFFFF) {
      LODWORD(v26) = -1;
    }
    unsigned int v27 = v26 + 1;
    if (v25 < 2)
    {
      uint64_t v28 = v11;
      uint64_t v29 = *(void *)(v11 - 8);
      if (v27 < 2) {
        goto LABEL_41;
      }
      goto LABEL_46;
    }
    if (v27 >= 2)
    {
LABEL_23:
      uint64_t v34 = v88 + v13;
      if (!v18) {
        ++v34;
      }
      BOOL v35 = v94 == 0;
      uint64_t v36 = (v34 + v22) & v91;
      goto LABEL_58;
    }
LABEL_90:
    long long v77 = v17[1];
    *(_OWORD *)uint64_t v16 = *v17;
    *(_OWORD *)(v16 + 16) = v77;
    unint64_t v78 = (_OWORD *)((v16 + 39) & 0xFFFFFFFFFFFFFFF8);
    long long v79 = (_OWORD *)(((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8);
    long long v80 = v79[1];
    *unint64_t v78 = *v79;
    v78[1] = v80;
    unint64_t v81 = (void *)(((unint64_t)v78 + v10 + 32) & v21);
    uint64_t v82 = (const void *)(((unint64_t)v79 + v10 + 32) & v21);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v82, 1, v92))
    {
      if (v18) {
        size_t v83 = v22;
      }
      else {
        size_t v83 = v22 + 1;
      }
      memcpy(v81, v82, v83);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v81, v82, v92);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v81, 0, 1, v92);
      if (v18) {
        size_t v83 = v22;
      }
      else {
        size_t v83 = v22 + 1;
      }
    }
    size_t v84 = v83 + v13;
    uint64_t v70 = (void *)(((unint64_t)v81 + v83 + v13) & v91);
    uint64_t v71 = (void *)(((unint64_t)v82 + v84) & v91);
    if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(v93 + 48))(v71, 1, v11))
    {
      (*(void (**)(void *, void *, uint64_t))(v93 + 32))(v70, v71, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v93 + 56))(v70, 0, 1, v11);
      return v90;
    }
    goto LABEL_99;
  }
  size_t v87 = *(void *)(v8 + 64);
  uint64_t v30 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v31 = v10 + 32;
  unint64_t v32 = (v10 + 32 + ((v16 + 39) & 0xFFFFFFFFFFFFFFF8)) & v21;
  if (v19 == v23)
  {
    if (v18 < 2) {
      goto LABEL_32;
    }
    unsigned int v33 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v32, v18, v92);
  }
  else
  {
    if (v94 < 2) {
      goto LABEL_32;
    }
    if (v18) {
      uint64_t v37 = *(unsigned __int8 *)(v12 + 80);
    }
    else {
      uint64_t v37 = v30 + 1;
    }
    unsigned int v33 = (*(uint64_t (**)(size_t, void, uint64_t))(v12 + 48))((v37 + v87 + v32) & v91, v94, v11);
  }
  uint64_t v21 = ~v10;
  if (v33 >= 2)
  {
    unint64_t v58 = (v31 + (((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8)) & ~v10;
    if (v19 == v23)
    {
      uint64_t v13 = v30;
      size_t v22 = v87;
      if (v18 >= 2)
      {
        unsigned int v59 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v58, v18, v92);
        uint64_t v21 = ~v10;
        if (v59 >= 2) {
          goto LABEL_23;
        }
      }
    }
    else
    {
      uint64_t v13 = v30;
      size_t v22 = v87;
      if (v94 >= 2)
      {
        uint64_t v75 = v18 ? v13 : v13 + 1;
        unsigned int v76 = (*(uint64_t (**)(size_t, void, uint64_t))(v93 + 48))((v75 + v87 + v58) & v91, v94, v11);
        uint64_t v21 = ~v10;
        if (v76 > 1) {
          goto LABEL_23;
        }
      }
    }
    goto LABEL_90;
  }
LABEL_32:
  unint64_t v38 = (v31 + (((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8)) & v21;
  if (v19 == v23)
  {
    uint64_t v28 = v11;
    uint64_t v29 = v93;
    uint64_t v13 = v30;
    size_t v22 = v87;
    if (v18 >= 2)
    {
      unsigned int v39 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v38, v18, v92);
      uint64_t v21 = ~v10;
      if (v39 >= 2)
      {
LABEL_46:
        if (*(void *)(v16 + 24) >= 0xFFFFFFFFuLL)
        {
          __swift_destroy_boxed_opaque_existential_1(v16);
          uint64_t v21 = ~v10;
        }
        unint64_t v50 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
        if (*(void *)(v50 + 24) >= 0xFFFFFFFFuLL)
        {
          outlined consume of Text.Storage(*(void *)v50, *(void *)(v50 + 8), *(unsigned char *)(v50 + 16));
          swift_bridgeObjectRelease();
          uint64_t v21 = ~v10;
        }
        uint64_t v51 = (v10 + v50 + 32) & v21;
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v51, 1, v92)) {
          (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v51, v92);
        }
        if (v18) {
          size_t v52 = v22;
        }
        else {
          size_t v52 = v22 + 1;
        }
        if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v29 + 48))((v52 + v13 + v51) & v91, 1, v28)) {
          (*(void (**)(size_t, uint64_t))(v29 + 8))((v52 + v13 + v51) & v91, v28);
        }
        BOOL v35 = v94 == 0;
        uint64_t v36 = (v88 + v13 + v52) & v91;
LABEL_58:
        size_t v53 = v89;
        if (v35) {
          size_t v53 = v89 + 1;
        }
        size_t v54 = v53 + v36;
        size_t v55 = (void *)v16;
        uint64_t v56 = v17;
        goto LABEL_103;
      }
    }
  }
  else
  {
    uint64_t v28 = v11;
    uint64_t v29 = v93;
    uint64_t v13 = v30;
    size_t v22 = v87;
    if (v94 >= 2)
    {
      uint64_t v40 = v18 ? v13 : v13 + 1;
      unsigned int v41 = (*(uint64_t (**)(size_t, void, uint64_t))(v93 + 48))((v40 + v87 + v38) & v91, v94, v28);
      uint64_t v21 = ~v10;
      if (v41 > 1) {
        goto LABEL_46;
      }
    }
  }
LABEL_41:
  if (*(void *)(v16 + 24) >= 0xFFFFFFFFuLL)
  {
    __swift_destroy_boxed_opaque_existential_1(v16);
    uint64_t v21 = ~v10;
  }
  long long v42 = v17[1];
  *(_OWORD *)uint64_t v16 = *v17;
  *(_OWORD *)(v16 + 16) = v42;
  unint64_t v43 = (v16 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = ((unint64_t)v17 + 39) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v86 = v28;
  if (*(void *)(v43 + 24) < 0xFFFFFFFFuLL)
  {
    size_t v45 = v22;
    long long v57 = *(_OWORD *)(v44 + 16);
    *(_OWORD *)unint64_t v43 = *(_OWORD *)v44;
    *(_OWORD *)(v43 + 16) = v57;
  }
  else
  {
    size_t v45 = v22;
    if (*(void *)(v44 + 24) < 0xFFFFFFFFuLL)
    {
      outlined consume of Text.Storage(*(void *)v43, *(void *)(v43 + 8), *(unsigned char *)(v43 + 16));
      swift_bridgeObjectRelease();
      long long v60 = *(_OWORD *)(v44 + 16);
      *(_OWORD *)unint64_t v43 = *(_OWORD *)v44;
      *(_OWORD *)(v43 + 16) = v60;
    }
    else
    {
      char v46 = *(unsigned char *)(v44 + 16);
      uint64_t v47 = *(void *)v43;
      uint64_t v48 = *(void *)(v43 + 8);
      char v49 = *(unsigned char *)(v43 + 16);
      *(_OWORD *)unint64_t v43 = *(_OWORD *)v44;
      *(unsigned char *)(v43 + 16) = v46;
      outlined consume of Text.Storage(v47, v48, v49);
      *(void *)(v43 + 24) = *(void *)(v44 + 24);
      swift_bridgeObjectRelease();
    }
    uint64_t v21 = ~v10;
  }
  size_t v61 = (void *)((v10 + 32 + v43) & v21);
  uint64_t v62 = (void *)((v10 + 32 + v44) & v21);
  int v63 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  int v64 = v63(v61, 1, v92);
  int v65 = v63(v62, 1, v92);
  if (v64)
  {
    uint64_t v66 = v93;
    if (!v65)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 32))(v61, v62, v92);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v61, 0, 1, v92);
      goto LABEL_77;
    }
  }
  else
  {
    uint64_t v66 = v93;
    if (!v65)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(v61, v62, v92);
      goto LABEL_77;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(v61, v92);
  }
  if (v18) {
    size_t v67 = v45;
  }
  else {
    size_t v67 = v45 + 1;
  }
  memcpy(v61, v62, v67);
LABEL_77:
  if (v18) {
    size_t v68 = v45;
  }
  else {
    size_t v68 = v45 + 1;
  }
  uint64_t v69 = v68 + v13;
  uint64_t v70 = (void *)(((unint64_t)v61 + v69) & v91);
  uint64_t v71 = (void *)(((unint64_t)v62 + v69) & v91);
  uint64_t v72 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v66 + 48);
  int v73 = v72(v70, 1, v86);
  int v74 = v72(v71, 1, v86);
  if (!v73)
  {
    if (!v74)
    {
      (*(void (**)(void *, void *, uint64_t))(v66 + 40))(v70, v71, v86);
      return v90;
    }
    (*(void (**)(void *, uint64_t))(v66 + 8))(v70, v86);
    goto LABEL_99;
  }
  if (v74)
  {
LABEL_99:
    if (v94) {
      size_t v54 = v89;
    }
    else {
      size_t v54 = v89 + 1;
    }
    size_t v55 = v70;
    uint64_t v56 = v71;
LABEL_103:
    memcpy(v55, v56, v54);
    return v90;
  }
  (*(void (**)(void *, void *, uint64_t))(v66 + 32))(v70, v71, v86);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v70, 0, 1, v86);
  return v90;
}

uint64_t getEnumTagSinglePayload for TransferableProvider(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3[3] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  uint64_t v9 = a3[4];
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  unsigned int v12 = v11 - 1;
  if (!v11) {
    unsigned int v12 = 0;
  }
  if (v8 <= v12) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = v8;
  }
  if (v13 <= 0x7FFFFFFE) {
    int v14 = 2147483646;
  }
  else {
    int v14 = v13;
  }
  if (v14 - 1 <= v5) {
    unsigned int v15 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v15 = v14 - 1;
  }
  uint64_t v16 = *(void *)(*(void *)(a3[3] - 8) + 64);
  if (!v7) {
    ++v16;
  }
  uint64_t v17 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = *(unsigned __int8 *)(v10 + 80);
  if (v11) {
    uint64_t v19 = *(void *)(*(void *)(v9 - 8) + 64);
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v9 - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v20 = v17 | v18 | 7;
  uint64_t v21 = v20 + *(void *)(*(void *)(a3[2] - 8) + 64);
  uint64_t v22 = v16 + v18;
  int v23 = a2 - v15;
  if (a2 <= v15) {
    goto LABEL_40;
  }
  uint64_t v24 = v19 + (v21 & ~v20) + ((v22 + ((v17 + 64) & ~v17)) & ~v18);
  char v25 = 8 * v24;
  if (v24 > 3) {
    goto LABEL_23;
  }
  unsigned int v27 = ((v23 + ~(-1 << v25)) >> v25) + 1;
  if (HIWORD(v27))
  {
    int v26 = *(_DWORD *)((char *)a1 + v24);
    if (v26) {
      goto LABEL_30;
    }
  }
  else
  {
    if (v27 <= 0xFF)
    {
      if (v27 < 2) {
        goto LABEL_40;
      }
LABEL_23:
      int v26 = *((unsigned __int8 *)a1 + v24);
      if (!*((unsigned char *)a1 + v24)) {
        goto LABEL_40;
      }
LABEL_30:
      int v28 = (v26 - 1) << v25;
      if (v24 > 3) {
        int v28 = 0;
      }
      if (v24)
      {
        if (v24 <= 3) {
          int v29 = v24;
        }
        else {
          int v29 = 4;
        }
        switch(v29)
        {
          case 2:
            int v30 = *a1;
            break;
          case 3:
            int v30 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v30 = *(_DWORD *)a1;
            break;
          default:
            int v30 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v30 = 0;
      }
      return v15 + (v30 | v28) + 1;
    }
    int v26 = *(unsigned __int16 *)((char *)a1 + v24);
    if (*(unsigned __int16 *)((char *)a1 + v24)) {
      goto LABEL_30;
    }
  }
LABEL_40:
  if (v5 < v14 - 1)
  {
    if (v13 <= 0x7FFFFFFE)
    {
      unint64_t v31 = *(void *)((((unint64_t)a1 + v21) & ~v20) + 0x18);
      if (v31 >= 0xFFFFFFFF) {
        LODWORD(v31) = -1;
      }
      if ((v31 + 1) >= 2)
      {
        uint64_t result = (v31 - 1);
        if (v31 > 1) {
          return result;
        }
      }
      return 0;
    }
    unint64_t v34 = (v17 + (((((unint64_t)a1 + v21) & ~v20) + 39) & 0xFFFFFFFFFFFFFFF8) + 32) & ~v17;
    if (v8 == v14)
    {
      if (v7 < 2) {
        return 0;
      }
      unsigned int v35 = (*(uint64_t (**)(unint64_t))(v6 + 48))(v34);
      if (v35 < 2) {
        return 0;
      }
    }
    else
    {
      if (v11 < 2) {
        return 0;
      }
      unsigned int v35 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48))((v22 + v34) & ~v18, v11, v9);
      if (v35 < 2) {
        return 0;
      }
    }
    BOOL v36 = v35 != 1;
    uint64_t result = v35 - 2;
    if (result != 0 && v36) {
      return result;
    }
    return 0;
  }
  unsigned int v33 = *(uint64_t (**)(void))(v4 + 48);

  return v33();
}

void storeEnumTagSinglePayload for TransferableProvider(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(a4[2] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a4[3] - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v12 = a4[4];
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int *)(v13 + 84);
  uint64_t v15 = *(void *)(*(void *)(a4[2] - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = *(void *)(v13 + 64);
  unsigned int v19 = v14 - 1;
  if (!v14) {
    unsigned int v19 = 0;
  }
  if (v11 <= v19) {
    unsigned int v20 = v19;
  }
  else {
    unsigned int v20 = v11;
  }
  if (v20 <= 0x7FFFFFFE) {
    unsigned int v21 = 2147483646;
  }
  else {
    unsigned int v21 = v20;
  }
  unsigned int v22 = v21 - 1;
  if (v21 - 1 <= v8) {
    unsigned int v23 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v23 = v21 - 1;
  }
  if (v10) {
    uint64_t v24 = *(void *)(*(void *)(a4[3] - 8) + 64);
  }
  else {
    uint64_t v24 = *(void *)(*(void *)(a4[3] - 8) + 64) + 1;
  }
  uint64_t v25 = v16 | v17 | 7;
  uint64_t v26 = v25 + v15;
  uint64_t v27 = (v25 + v15) & ~v25;
  uint64_t v28 = v24 + v17;
  if (!v14) {
    ++v18;
  }
  size_t v29 = v18 + ((v28 + ((v16 + 64) & ~v16)) & ~v17);
  size_t v30 = v29 + v27;
  BOOL v31 = a3 >= v23;
  unsigned int v32 = a3 - v23;
  if (v32 == 0 || !v31)
  {
LABEL_30:
    if (v23 < a2) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v30 > 3)
  {
    int v6 = 1;
    if (v23 < a2) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  unsigned int v33 = ((v32 + ~(-1 << (8 * v30))) >> (8 * v30)) + 1;
  if (!HIWORD(v33))
  {
    int v6 = v33 > 1;
    if (v33 >= 0x100) {
      int v6 = 2;
    }
    goto LABEL_30;
  }
  int v6 = 4;
  if (v23 < a2)
  {
LABEL_31:
    unsigned int v34 = ~v23 + a2;
    if (v30 < 4)
    {
      int v35 = (v34 >> (8 * v30)) + 1;
      if (v30)
      {
        int v36 = v34 & ~(-1 << (8 * v30));
        bzero(a1, v30);
        if (v30 == 3)
        {
          *(_WORD *)a1 = v36;
          a1[2] = BYTE2(v36);
        }
        else if (v30 == 2)
        {
          *(_WORD *)a1 = v36;
        }
        else
        {
          *a1 = v36;
        }
      }
    }
    else
    {
      bzero(a1, v30);
      *(_DWORD *)a1 = v34;
      int v35 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v30] = v35;
        return;
      case 2:
        *(_WORD *)&a1[v30] = v35;
        return;
      case 3:
        goto LABEL_90;
      case 4:
        *(_DWORD *)&a1[v30] = v35;
        return;
      default:
        return;
    }
  }
LABEL_24:
  switch(v6)
  {
    case 1:
      a1[v30] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 2:
      *(_WORD *)&a1[v30] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 3:
LABEL_90:
      __break(1u);
      JUMPOUT(0x187F68E74);
    case 4:
      *(_DWORD *)&a1[v30] = 0;
      goto LABEL_38;
    default:
LABEL_38:
      if (a2)
      {
LABEL_39:
        if (v8 >= v22)
        {
          unsigned int v41 = *(void (**)(char *))(v7 + 56);
          v41(a1);
        }
        else
        {
          uint64_t v37 = (unsigned char *)((unint64_t)&a1[v26] & ~v25);
          if (v22 >= a2)
          {
            uint64_t v42 = a2 + 1;
            if (v42 <= v21)
            {
              if (a2 != -1)
              {
                if (v20 > 0x7FFFFFFE)
                {
                  unint64_t v45 = (v16 + ((unint64_t)(v37 + 39) & 0xFFFFFFFFFFFFFFF8) + 32) & ~v16;
                  if (v11 == v21)
                  {
                    if (v10 >= 2)
                    {
                      uint64_t v46 = a2 + 2;
                      uint64_t v47 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
                      v47(v45, v46);
                    }
                  }
                  else if (v14 >= 2)
                  {
                    unint64_t v48 = (v28 + v45) & ~v17;
                    uint64_t v49 = a2 + 2;
                    unint64_t v50 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
                    v50(v48, v49, v14, v12);
                  }
                }
                else if (v42 > 0x7FFFFFFE)
                {
                  *(_OWORD *)uint64_t v37 = 0u;
                  *((_OWORD *)v37 + 1) = 0u;
                  *(_DWORD *)uint64_t v37 = a2 - 2147483646;
                }
                else
                {
                  *((void *)v37 + 3) = v42;
                }
              }
            }
            else
            {
              if (v29 <= 3) {
                int v43 = ~(-1 << (8 * v29));
              }
              else {
                int v43 = -1;
              }
              if (v29)
              {
                int v39 = v43 & (a2 - v21);
                if (v29 <= 3) {
                  int v44 = v18 + ((v28 + ((v16 + 64) & ~v16)) & ~v17);
                }
                else {
                  int v44 = 4;
                }
                bzero(v37, v29);
                switch(v44)
                {
                  case 2:
LABEL_77:
                    *(_WORD *)uint64_t v37 = v39;
                    break;
                  case 3:
LABEL_78:
                    *(_WORD *)uint64_t v37 = v39;
                    void v37[2] = BYTE2(v39);
                    break;
                  case 4:
LABEL_79:
                    *(_DWORD *)uint64_t v37 = v39;
                    break;
                  default:
LABEL_65:
                    *uint64_t v37 = v39;
                    break;
                }
              }
            }
          }
          else
          {
            if (v29 <= 3) {
              int v38 = ~(-1 << (8 * v29));
            }
            else {
              int v38 = -1;
            }
            if (v29)
            {
              int v39 = v38 & (a2 - v21);
              if (v29 <= 3) {
                int v40 = v18 + ((v28 + ((v16 + 64) & ~v16)) & ~v17);
              }
              else {
                int v40 = 4;
              }
              bzero(v37, v29);
              switch(v40)
              {
                case 2:
                  goto LABEL_77;
                case 3:
                  goto LABEL_78;
                case 4:
                  goto LABEL_79;
                default:
                  goto LABEL_65;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_187F68EBC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  long long v12 = *(_OWORD *)(v0 + 32);
  uint64_t v3 = (int *)(type metadata accessor for TransferableProvider() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v0 + v4, v2);
  uint64_t v5 = v0 + v4 + v3[19];
  uint64_t v6 = type metadata accessor for SharePreview();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
  {
    if (*(void *)(v5 + 24)) {
      __swift_destroy_boxed_opaque_existential_1(v5);
    }
    if (*(void *)(v5 + 56))
    {
      outlined consume of Text.Storage(*(void *)(v5 + 32), *(void *)(v5 + 40), *(unsigned char *)(v5 + 48));
      swift_bridgeObjectRelease();
    }
    uint64_t v7 = v5 + *(int *)(v6 + 56);
    uint64_t v8 = *(void *)(v1 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v7, 1, v1)) {
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v1);
    }
    uint64_t v9 = v5 + *(int *)(v6 + 60);
    uint64_t v10 = *(void *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, void))(v10 + 48))(v9, 1, v12)) {
      (*(void (**)(uint64_t, void))(v10 + 8))(v9, v12);
    }
  }
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in TransferableProvider.makeContent()@<X0>(uint64_t a1@<X8>)
{
  long long v7 = *(_OWORD *)(v1 + 16);
  uint64_t v3 = *(void *)(type metadata accessor for TransferableProvider() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v5(a1, v4);
}

uint64_t partial apply for closure #1 in TransferableProvider.makeContent()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in TransferableProvider.makeContent()(a1, v2[3], v2[4], v2[6], v2[7], a2);
}

uint64_t outlined init with take of URLProvider(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void type metadata accessor for AnySharePreview?()
{
  if (!lazy cache variable for type metadata for AnySharePreview?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnySharePreview?);
    }
  }
}

uint64_t static DefaultTabViewStyle._makeView<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeView(view:inputs:)();
}

void type metadata accessor for _TabViewStyleWriter<SystemTabViewStyle>()
{
  if (!lazy cache variable for type metadata for _TabViewStyleWriter<SystemTabViewStyle>)
  {
    unint64_t v0 = type metadata accessor for _TabViewStyleWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TabViewStyleWriter<SystemTabViewStyle>);
    }
  }
}

uint64_t type metadata accessor for DefaultTabViewStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static DefaultTabViewStyle._makeViewList<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

uint64_t DefaultTabViewStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TabViewValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t DefaultTabViewStyle.Body.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v18[1] = a3;
  uint64_t v5 = type metadata accessor for TabViewStyleConfiguration();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v18 - v7;
  void v18[2] = &type metadata for DefaultTabViewStyle;
  v18[3] = a1;
  void v18[4] = &protocol witness table for DefaultTabViewStyle;
  v18[5] = a2;
  uint64_t v9 = type metadata accessor for _TabViewValue();
  MEMORY[0x1F4188790](v9 - 8);
  unsigned int v11 = (char *)v18 - v10;
  uint64_t v12 = type metadata accessor for ResolvedTabView();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v18 - v14;
  DefaultTabViewStyle.Body.base.getter((uint64_t)v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
  uint64_t v16 = ResolvedTabView.init(configuration:)((uint64_t)v8, (uint64_t)v15);
  View.tabViewStyle<A>(_:)(v16, v12, (uint64_t)&type metadata for SystemTabViewStyle, (uint64_t)&protocol witness table for ResolvedTabView<A>);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DefaultTabViewStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ResolvedTabView();
  type metadata accessor for _TabViewStyleWriter<SystemTabViewStyle>();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance DefaultTabViewStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultTabViewStyle.Body.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

ValueMetadata *type metadata accessor for DefaultTabViewStyle()
{
  return &type metadata for DefaultTabViewStyle;
}

uint64_t base witness table accessor for _AttributeBody in DefaultTabViewStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t key path getter for EnvironmentValues.textEditorStyle : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.textEditorStyle.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.textEditorStyle : EnvironmentValues()
{
  return EnvironmentValues.textEditorStyle.setter();
}

uint64_t PlainTextEditorStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UIKitTextEditor(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>();
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI28TextEditorStyleConfigurationVWOcTm_0(a1, (uint64_t)v6, type metadata accessor for TextEditorStyleConfiguration);
  uint64_t KeyPath = swift_getKeyPath();
  _s7SwiftUI28TextEditorStyleConfigurationVWOcTm_0((uint64_t)v6, (uint64_t)v10, type metadata accessor for UIKitTextEditor);
  uint64_t v12 = &v10[*(int *)(v8 + 44)];
  *(void *)uint64_t v12 = KeyPath;
  v12[8] = 0;
  outlined destroy of UIKitTextEditor((uint64_t)v6, type metadata accessor for UIKitTextEditor);
  uint64_t v13 = swift_getKeyPath();
  _s7SwiftUI28TextEditorStyleConfigurationVWOcTm_0((uint64_t)v10, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
  type metadata accessor for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>();
  uint64_t v15 = (uint64_t *)(a2 + *(int *)(v14 + 36));
  *uint64_t v15 = v13;
  v15[1] = (uint64_t)closure #1 in PlainTextEditorStyle.makeBody(configuration:);
  double v15[2] = 0;
  return outlined destroy of UIKitTextEditor((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
}

uint64_t sub_187F69C5C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.textEditorStyle.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187F69C9C()
{
  return EnvironmentValues.textEditorStyle.setter();
}

uint64_t closure #1 in PlainTextEditorStyle.makeBody(configuration:)(uint64_t result)
{
  if (!*(unsigned char *)(result + 8)) {
    *(unsigned char *)(result + 8) = 2;
  }
  return result;
}

uint64_t associated type witness table accessor for TextEditorStyle.Body : View in PlainTextEditorStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for TextEditorStyle.makeBody(configuration:) in conformance PlainTextEditorStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UIKitTextEditor(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>();
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI28TextEditorStyleConfigurationVWOcTm_0(a1, (uint64_t)v6, type metadata accessor for TextEditorStyleConfiguration);
  uint64_t KeyPath = swift_getKeyPath();
  _s7SwiftUI28TextEditorStyleConfigurationVWOcTm_0((uint64_t)v6, (uint64_t)v10, type metadata accessor for UIKitTextEditor);
  uint64_t v12 = &v10[*(int *)(v8 + 44)];
  *(void *)uint64_t v12 = KeyPath;
  v12[8] = 0;
  outlined destroy of UIKitTextEditor((uint64_t)v6, type metadata accessor for UIKitTextEditor);
  uint64_t v13 = swift_getKeyPath();
  _s7SwiftUI28TextEditorStyleConfigurationVWOcTm_0((uint64_t)v10, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
  type metadata accessor for ModifiedContent<ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>();
  uint64_t v15 = (uint64_t *)(a2 + *(int *)(v14 + 36));
  *uint64_t v15 = v13;
  v15[1] = (uint64_t)closure #1 in PlainTextEditorStyle.makeBody(configuration:);
  double v15[2] = 0;
  return outlined destroy of UIKitTextEditor((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitTextEditor, _EnvironmentKeyWritingModifier<TextEditorBorderStyle>>);
}

ValueMetadata *type metadata accessor for PlainTextEditorStyle()
{
  return &type metadata for PlainTextEditorStyle;
}

uint64_t closure #1 in TimelineView<>.init(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v20[1] = a3;
  unsigned int v21 = a2;
  uint64_t v22 = a5;
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context();
  uint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v20 - v14;
  uint64_t v16 = type metadata accessor for TimelineView.Context();
  uint64_t v18 = *(void *)(v16 - 8);
  uint64_t result = v16 - 8;
  if (*(void *)(v18 + 64) == v8)
  {
    outlined init with copy of TimelineView<PeriodicTimelineSchedule, Never>.Context(a1, (uint64_t)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    v21((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    outlined destroy of TimelineView<PeriodicTimelineSchedule, Never>.Context((uint64_t)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    static ViewBuilder.buildExpression<A>(_:)(v12);
    unsigned int v19 = *(void (**)(char *, uint64_t))(v9 + 8);
    v19(v12, a4);
    static ViewBuilder.buildExpression<A>(_:)(v15);
    return ((uint64_t (*)(char *, uint64_t))v19)(v15, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  void v20[2];
  void (*v21)(char *);
  uint64_t v22;

  v20[1] = a3;
  unsigned int v21 = a2;
  uint64_t v22 = a5;
  type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context();
  uint64_t v8 = *(void *)(*(void *)(v7 - 8) + 64);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v20 - v14;
  uint64_t v16 = type metadata accessor for TimelineView.Context();
  uint64_t v18 = *(void *)(v16 - 8);
  uint64_t result = v16 - 8;
  if (*(void *)(v18 + 64) == v8)
  {
    outlined init with copy of TimelineView<EveryMinuteTimelineSchedule, Never>.Context(a1, (uint64_t)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    v21((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    outlined destroy of TimelineView<EveryMinuteTimelineSchedule, Never>.Context((uint64_t)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for TimelineView<EveryMinuteTimelineSchedule, Never>.Context);
    static ViewBuilder.buildExpression<A>(_:)(v12);
    unsigned int v19 = *(void (**)(char *, uint64_t))(v9 + 8);
    v19(v12, a4);
    static ViewBuilder.buildExpression<A>(_:)(v15);
    return ((uint64_t (*)(char *, uint64_t))v19)(v15, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_187F6A200()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TimelineView<>.init(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in TimelineView<>.init(_:content:)(a1, *(void (**)(char *))(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 24), a2);
}

uint64_t outlined init with copy of TimelineView<PeriodicTimelineSchedule, Never>.Context(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TimelineView<PeriodicTimelineSchedule, Never>.Context();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t key path getter for EnvironmentValues.locale : EnvironmentValues()
{
  return EnvironmentValues.locale.getter();
}

uint64_t key path setter for EnvironmentValues.locale : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x1E4F27A78], MEMORY[0x1E4F40098]);
}

uint64_t key path getter for EnvironmentValues.calendar : EnvironmentValues()
{
  return EnvironmentValues.calendar.getter();
}

uint64_t key path setter for EnvironmentValues.calendar : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F400A8]);
}

uint64_t key path getter for EnvironmentValues.timeZone : EnvironmentValues()
{
  return EnvironmentValues.timeZone.getter();
}

uint64_t key path setter for EnvironmentValues.timeZone : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x1E4F27D68], MEMORY[0x1E4F400C0]);
}

uint64_t key path setter for EnvironmentValues.locale : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(char *))
{
  uint64_t v8 = a5(0);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, double))(v12 + 16))((char *)&v14 - v10, a1, v9);
  return a6(v11);
}

uint64_t WheelDatePickerStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of DatePickerStyleConfiguration(a1, a2);
  uint64_t v3 = (int *)type metadata accessor for UIKitDatePicker(0);
  *(void *)(a2 + v3[5]) = 1;
  uint64_t v4 = (uint64_t *)(a2 + v3[6]);
  *uint64_t v4 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78]);
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = (uint64_t *)(a2 + v3[7]);
  *uint64_t v5 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0]);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (uint64_t *)(a2 + v3[8]);
  *uint64_t v6 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68]);

  return swift_storeEnumTagMultiPayload();
}

uint64_t outlined init with copy of DatePickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DatePickerStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187F6A63C()
{
  return EnvironmentValues.locale.getter();
}

uint64_t sub_187F6A670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x1E4F27A78], MEMORY[0x1E4F40098]);
}

uint64_t sub_187F6A6B0()
{
  return EnvironmentValues.calendar.getter();
}

uint64_t sub_187F6A6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F400A8]);
}

uint64_t sub_187F6A724()
{
  return EnvironmentValues.timeZone.getter();
}

uint64_t sub_187F6A758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.locale : EnvironmentValues(a1, a2, a3, a4, MEMORY[0x1E4F27D68], MEMORY[0x1E4F400C0]);
}

uint64_t associated type witness table accessor for DatePickerStyle.Body : View in WheelDatePickerStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DatePickerStyle.makeBody(configuration:) in conformance WheelDatePickerStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of DatePickerStyleConfiguration(a1, a2);
  uint64_t v3 = (int *)type metadata accessor for UIKitDatePicker(0);
  *(void *)(a2 + v3[5]) = 1;
  uint64_t v4 = (uint64_t *)(a2 + v3[6]);
  *uint64_t v4 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78]);
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = (uint64_t *)(a2 + v3[7]);
  *uint64_t v5 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0]);
  swift_storeEnumTagMultiPayload();
  uint64_t v6 = (uint64_t *)(a2 + v3[8]);
  *uint64_t v6 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68]);

  return swift_storeEnumTagMultiPayload();
}

ValueMetadata *type metadata accessor for WheelDatePickerStyle()
{
  return &type metadata for WheelDatePickerStyle;
}

unint64_t lazy protocol witness table accessor for type UIKitDatePicker and conformance UIKitDatePicker()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitDatePicker and conformance UIKitDatePicker;
  if (!lazy protocol witness table cache variable for type UIKitDatePicker and conformance UIKitDatePicker)
  {
    type metadata accessor for UIKitDatePicker(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitDatePicker and conformance UIKitDatePicker);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityIdentifier(_:placement:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v7 = *a3;
  v10[0] = a1;
  v10[1] = a2;
  char v11 = v7;
  unint64_t v8 = lazy protocol witness table accessor for type AccessibilityIdentifierStorage? and conformance <A> A?();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40A98], (uint64_t)v10, 1, a4, MEMORY[0x1E4F40A98], MEMORY[0x1E4F40A90], v8, a5);
}

uint64_t View.accessibilityIdentifier(_:isEnabled:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a1;
  v6[1] = a2;
  char v7 = 0;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40A98], (uint64_t)v6, a3, a4, MEMORY[0x1E4F40A98], a5);
}

uint64_t ModifiedContent<>.accessibilityIdentifier(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v10[0] = a1;
  v10[1] = a2;
  char v11 = 0;
  unint64_t v8 = lazy protocol witness table accessor for type AccessibilityIdentifierStorage? and conformance <A> A?();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40A98], (uint64_t)v10, a3, a4, MEMORY[0x1E4F40A98], MEMORY[0x1E4F40A90], v8, a5);
}

uint64_t TabContent.accessibilityIdentifier(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v11[0] = a1;
  v11[1] = a2;
  char v12 = 0;
  lazy protocol witness table accessor for type AccessibilityIdentifierStorage? and conformance <A> A?();
  return TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)v11, a3, a4, a5, a6);
}

uint64_t Scene.accessibilityIdentifier(_:isEnabled:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  v9[0] = a1;
  v9[1] = a2;
  char v10 = 0;
  char v11 = a3;
  type metadata accessor for AccessibilityScenePropertiesModifier<AccessibilityProperties.IdentifierKey>(0, &lazy cache variable for type metadata for AccessibilityScenePropertiesModifier<AccessibilityProperties.IdentifierKey>, (uint64_t (*)(uint64_t, void, void, unint64_t))type metadata accessor for AccessibilityScenePropertiesModifier);
  return Scene.modifier<A>(_:)(v9, a4, v7, a5);
}

uint64_t sub_187F6AB7C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for AccessibilityScenePropertiesModifier<AccessibilityProperties.IdentifierKey>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void, void, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type AccessibilityIdentifierStorage? and conformance <A> A?();
    unint64_t v7 = a3(a1, MEMORY[0x1E4F40A98], MEMORY[0x1E4F40A90], v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_187F6AC70()
{
  return swift_getWitnessTable();
}

uint64_t key path setter for EnvironmentValues.listRowSpacing : EnvironmentValues(uint64_t a1)
{
  return EnvironmentValues.listRowSpacing.setter(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t View.listRowSpacing(_:)()
{
  return swift_release();
}

uint64_t sub_187F6ADB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = EnvironmentValues.listRowSpacing.getter(a1, a2);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5 & 1;
  return result;
}

uint64_t sub_187F6ADE8(uint64_t a1)
{
  return EnvironmentValues.listRowSpacing.setter(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t (*EnvironmentValues.listRowSpacing.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
    _s7SwiftUI22EnvironmentPropertyKeyVyAA14ListRowSpacing33_1F5CF552B45C3ADB33DFD14469AB7BE9LLVGACyxGAA0dE0AAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
    _s7SwiftUI22EnvironmentPropertyKeyVyAA14ListRowSpacing33_1F5CF552B45C3ADB33DFD14469AB7BE9LLVGACyxGAA0dE0AAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v4 = *((unsigned char *)v3 + 24);
  *uint64_t v3 = v3[2];
  *((unsigned char *)v3 + 8) = v4;
  return EnvironmentValues.listRowSpacing.modify;
}

uint64_t EnvironmentValues.listRowSpacing.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
    _s7SwiftUI22EnvironmentPropertyKeyVyAA14ListRowSpacing33_1F5CF552B45C3ADB33DFD14469AB7BE9LLVGACyxGAA0dE0AAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
    _s7SwiftUI22EnvironmentPropertyKeyVyAA14ListRowSpacing33_1F5CF552B45C3ADB33DFD14469AB7BE9LLVGACyxGAA0dE0AAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.listRowSpacing.setter()
{
  type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
  _s7SwiftUI22EnvironmentPropertyKeyVyAA14ListRowSpacing33_1F5CF552B45C3ADB33DFD14469AB7BE9LLVGACyxGAA0dE0AAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues._listRowSpacing.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
    _s7SwiftUI22EnvironmentPropertyKeyVyAA14ListRowSpacing33_1F5CF552B45C3ADB33DFD14469AB7BE9LLVGACyxGAA0dE0AAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
    _s7SwiftUI22EnvironmentPropertyKeyVyAA14ListRowSpacing33_1F5CF552B45C3ADB33DFD14469AB7BE9LLVGACyxGAA0dE0AAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v4 = *((unsigned char *)v3 + 24);
  *uint64_t v3 = v3[2];
  *((unsigned char *)v3 + 8) = v4;
  return EnvironmentValues.listRowSpacing.modify;
}

void EnvironmentValues.listRowSpacing.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[4];
  char v3 = *((unsigned char *)*a1 + 8);
  (*a1)[2] = **a1;
  v1[24] = v3;
  type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>();
  _s7SwiftUI22EnvironmentPropertyKeyVyAA14ListRowSpacing33_1F5CF552B45C3ADB33DFD14469AB7BE9LLVGACyxGAA0dE0AAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowSpacing> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ListRowSpacing>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t sub_187F6B468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return keypath_get_2Tm_0(a1, a2, EnvironmentValues.listRowSpacing.getter, a3);
}

uint64_t sub_187F6B480@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return keypath_get_2Tm_0(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues._listRowSpacing.getter, a3);
}

uint64_t keypath_get_2Tm_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, uint64_t a4@<X8>)
{
  uint64_t result = a3(a1, a2);
  *(void *)a4 = result;
  *(unsigned char *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t sub_187F6B4E0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat?>)
  {
    type metadata accessor for CGFloat?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat?>);
    }
  }
}

void type metadata accessor for CGFloat?()
{
  if (!lazy cache variable for type metadata for CGFloat?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?);
    }
  }
}

ValueMetadata *type metadata accessor for ListRowSpacing()
{
  return &type metadata for ListRowSpacing;
}

void View.onNavigationIconChange(perform:)()
{
}

void View.onNavigationSubtitleChange(perform:)()
{
}

void View.onNavigationTitleChange(perform:)()
{
}

uint64_t assignWithCopy for CheckmarkToggleStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  char v16 = *(unsigned char *)(a2 + 64);
  outlined copy of Environment<HoverEffectContext?>.Content(v12, v13, v14, v15, v16);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 48);
  uint64_t v20 = *(void *)(a1 + 56);
  char v21 = *(unsigned char *)(a1 + 64);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  *(void *)(a1 + 48) = v14;
  *(void *)(a1 + 56) = v15;
  *(unsigned char *)(a1 + 64) = v16;
  outlined consume of Environment<HoverEffectContext?>.Content(v17, v18, v19, v20, v21);
  uint64_t v22 = *(void *)(a2 + 72);
  LOBYTE(v13) = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<Bool>.Content(v22, v13);
  uint64_t v23 = *(void *)(a1 + 72);
  char v24 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = v22;
  *(unsigned char *)(a1 + 80) = v13;
  outlined consume of Environment<Bool>.Content(v23, v24);
  uint64_t v25 = *(void *)(a2 + 88);
  LOBYTE(v13) = *(unsigned char *)(a2 + 96);
  outlined copy of Environment<Bool>.Content(v25, v13);
  uint64_t v26 = *(void *)(a1 + 88);
  char v27 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 88) = v25;
  *(unsigned char *)(a1 + 96) = v13;
  outlined consume of Environment<Bool>.Content(v26, v27);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for CheckmarkToggleStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  char v11 = *((unsigned char *)a2 + 64);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 56);
  char v16 = *(unsigned char *)(a1 + 64);
  long long v17 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v17;
  *(unsigned char *)(a1 + 64) = v11;
  outlined consume of Environment<HoverEffectContext?>.Content(v12, v13, v14, v15, v16);
  char v18 = *((unsigned char *)a2 + 80);
  uint64_t v19 = *(void *)(a1 + 72);
  char v20 = *(unsigned char *)(a1 + 80);
  *(void *)(a1 + 72) = a2[9];
  *(unsigned char *)(a1 + 80) = v18;
  outlined consume of Environment<Bool>.Content(v19, v20);
  char v21 = *((unsigned char *)a2 + 96);
  uint64_t v22 = *(void *)(a1 + 88);
  char v23 = *(unsigned char *)(a1 + 96);
  *(void *)(a1 + 88) = a2[11];
  *(unsigned char *)(a1 + 96) = v21;
  outlined consume of Environment<Bool>.Content(v22, v23);
  *(void *)(a1 + 104) = a2[13];
  *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for CheckmarkToggleStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 113)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CheckmarkToggleStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 112) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 113) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 113) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in CheckmarkToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t CheckmarkToggleStyle.adjustedCheckmarkWidth.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 24);
  outlined copy of Environment<Bool>.Content(v1, v2);
  specialized Environment.wrappedValue.getter(v1, v2, &v4);
  outlined consume of Environment<Bool>.Content(v1, v2);
  _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E4FBC958], MEMORY[0x1E4F3F620]);
  return ScaledMetric.wrappedValue.getter();
}

uint64_t CheckmarkToggleStyle.makeBody(configuration:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>();
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  char v7 = (_WORD *)((char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v8 = a1[3];
  long long v59 = a1[2];
  long long v60 = v8;
  long long v9 = a1[5];
  long long v61 = a1[4];
  long long v62 = v9;
  long long v10 = a1[1];
  long long v57 = *a1;
  long long v58 = v10;
  long long v11 = *(_OWORD *)(v2 + 80);
  v63[4] = *(_OWORD *)(v2 + 64);
  v63[5] = v11;
  v63[6] = *(_OWORD *)(v2 + 96);
  char v64 = *(unsigned char *)(v2 + 112);
  long long v12 = *(_OWORD *)(v2 + 16);
  v63[0] = *(_OWORD *)v2;
  v63[1] = v12;
  long long v13 = *(_OWORD *)(v2 + 48);
  v63[2] = *(_OWORD *)(v2 + 32);
  v63[3] = v13;
  uint64_t v14 = (_OWORD *)swift_allocObject();
  long long v15 = a1[3];
  void v14[3] = a1[2];
  void v14[4] = v15;
  long long v16 = a1[5];
  v14[5] = a1[4];
  void v14[6] = v16;
  long long v17 = a1[1];
  v14[1] = *a1;
  void v14[2] = v17;
  *char v7 = 256;
  type metadata accessor for Button<ToggleStyleConfiguration.Label>(0, &lazy cache variable for type metadata for Button<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v19 = (void *)((char *)v7 + *(int *)(v18 + 36));
  *uint64_t v19 = partial apply for closure #1 in CheckmarkToggleStyle.menuContent(configuration:);
  v19[1] = v14;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  char v20 = (_WORD *)((char *)v7 + *(int *)(v5 + 60));
  char v21 = (_OWORD *)swift_allocObject();
  long long v22 = v60;
  v21[3] = v59;
  v21[4] = v22;
  long long v23 = v62;
  v21[5] = v61;
  v21[6] = v23;
  long long v24 = v58;
  v21[1] = v57;
  void v21[2] = v24;
  *char v20 = 256;
  type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>();
  uint64_t v26 = v25;
  char v27 = (void *)((char *)v20 + *(int *)(v25 + 36));
  *char v27 = partial apply for closure #1 in CheckmarkToggleStyle.defaultContent(configuration:);
  v27[1] = v21;
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = (_OWORD *)((char *)v20 + *(int *)(v26 + 40));
  outlined retain of ToggleStyleConfiguration(&v57);
  outlined retain of ToggleStyleConfiguration(&v57);
  swift_retain();
  uint64_t v29 = static VerticalAlignment.center.getter();
  closure #1 in closure #2 in CheckmarkToggleStyle.defaultContent(configuration:)(&v57, (uint64_t)v63, (uint64_t)v65);
  *(_OWORD *)&v67[167] = v65[10];
  *(_OWORD *)&v67[183] = v65[11];
  *(_OWORD *)&v67[199] = v65[12];
  *(_OWORD *)&v67[103] = v65[6];
  *(_OWORD *)&v67[119] = v65[7];
  *(_OWORD *)&v67[135] = v65[8];
  *(_OWORD *)&v67[151] = v65[9];
  *(_OWORD *)&v67[39] = v65[2];
  *(_OWORD *)&v67[55] = v65[3];
  *(_OWORD *)&v67[71] = v65[4];
  *(_OWORD *)&v67[87] = v65[5];
  *(_OWORD *)&v67[7] = v65[0];
  *(_OWORD *)&v67[23] = v65[1];
  *(_OWORD *)((char *)&v70[10] + 1) = *(_OWORD *)&v67[160];
  *(_OWORD *)((char *)&v70[11] + 1) = *(_OWORD *)&v67[176];
  *(_OWORD *)((char *)&v70[12] + 1) = *(_OWORD *)&v67[192];
  *(_OWORD *)((char *)&v70[6] + 1) = *(_OWORD *)&v67[96];
  *(_OWORD *)((char *)&v70[7] + 1) = *(_OWORD *)&v67[112];
  *(_OWORD *)((char *)&v70[8] + 1) = *(_OWORD *)&v67[128];
  *(_OWORD *)((char *)&v70[9] + 1) = *(_OWORD *)&v67[144];
  *(_OWORD *)((char *)&v70[2] + 1) = *(_OWORD *)&v67[32];
  *(_OWORD *)((char *)&v70[3] + 1) = *(_OWORD *)&v67[48];
  *(_OWORD *)((char *)&v70[4] + 1) = *(_OWORD *)&v67[64];
  *(_OWORD *)((char *)&v70[5] + 1) = *(_OWORD *)&v67[80];
  *(_OWORD *)((char *)v70 + 1) = *(_OWORD *)v67;
  char v68 = 1;
  v67[215] = v66;
  long long v69 = (unint64_t)v29;
  LOBYTE(v70[0]) = 1;
  *(void *)((char *)&v70[13] + 1) = *(void *)&v67[208];
  *(_OWORD *)((char *)&v70[1] + 1) = *(_OWORD *)&v67[16];
  static Color.primary.getter();
  type metadata accessor for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>();
  lazy protocol witness table accessor for type TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>);
  View.defaultForegroundColor(_:)();
  swift_release();
  outlined release of TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>(v65);
  swift_release();
  v70[11] = v53;
  v70[12] = v54;
  v70[13] = v55;
  long long v71 = v56;
  v70[7] = v49;
  v70[8] = v50;
  v70[9] = v51;
  v70[10] = v52;
  v70[3] = v45;
  v70[4] = v46;
  v70[5] = v47;
  v70[6] = v48;
  long long v69 = v41;
  v70[0] = v42;
  v70[1] = v43;
  v70[2] = v44;
  long long v30 = v54;
  v28[12] = v53;
  v28[13] = v30;
  long long v31 = v71;
  v28[14] = v70[13];
  v28[15] = v31;
  long long v32 = v70[8];
  v28[8] = v70[7];
  v28[9] = v32;
  long long v33 = v70[10];
  v28[10] = v70[9];
  v28[11] = v33;
  long long v34 = v70[4];
  v28[4] = v70[3];
  v28[5] = v34;
  long long v35 = v70[6];
  _DWORD v28[6] = v70[5];
  v28[7] = v35;
  long long v36 = v70[0];
  *uint64_t v28 = v69;
  v28[1] = v36;
  long long v37 = v70[2];
  v28[2] = v70[1];
  _OWORD v28[3] = v37;
  outlined init with copy of StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>((uint64_t)v7, v40);
  return outlined destroy of StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>((uint64_t)v7);
}

uint64_t closure #1 in closure #2 in CheckmarkToggleStyle.defaultContent(configuration:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  char v8 = specialized Environment.wrappedValue.getter(v6, v7);
  outlined consume of Environment<Bool>.Content(v6, v7);
  if (v8) {
    uint64_t v47 = 0;
  }
  else {
    uint64_t v47 = static Color.tertiary.getter();
  }
  uint64_t KeyPath = swift_getKeyPath();
  _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0x72616D6B63656863;
  *(void *)(v9 + 24) = 0xE90000000000006BLL;
  *(_DWORD *)(v9 + 32) = 0;
  *(unsigned char *)(v9 + 36) = 1;
  *(_OWORD *)(v9 + 40) = xmmword_18834C6B0;
  *(_OWORD *)(v9 + 56) = xmmword_1883B6C60;
  *(_OWORD *)(v9 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v9 + 88) = 0;
  uint64_t v10 = *(void *)(a2 + 16);
  char v11 = *(unsigned char *)(a2 + 24);
  outlined retain of CheckmarkToggleStyle(a2);
  outlined copy of Environment<Bool>.Content(v10, v11);
  specialized Environment.wrappedValue.getter(v10, v11, &v59);
  outlined consume of Environment<Bool>.Content(v10, v11);
  unsigned int v12 = v59;
  outlined release of CheckmarkToggleStyle(a2);
  BOOL v45 = v12 < 9;
  uint64_t v44 = swift_getKeyPath();
  static Font.PrivateTextStyle.emphasizedBody.getter();
  long long v13 = (void *)v59;
  *(void *)&long long v48 = v59;
  LOBYTE(v74) = 4;
  uint64_t v43 = static Font.system(_:design:weight:)();

  uint64_t v42 = swift_getKeyPath();
  uint64_t v41 = static Color.accentColor.getter();
  uint64_t v40 = swift_getKeyPath();
  long long v14 = *(_OWORD *)(a2 + 80);
  long long v63 = *(_OWORD *)(a2 + 64);
  long long v15 = *(_OWORD *)(a2 + 96);
  long long v64 = v14;
  long long v65 = v15;
  LOBYTE(v66) = *(unsigned char *)(a2 + 112);
  long long v16 = *(_OWORD *)(a2 + 16);
  long long v59 = *(_OWORD *)a2;
  long long v60 = v16;
  long long v17 = *(_OWORD *)(a2 + 48);
  long long v61 = *(_OWORD *)(a2 + 32);
  long long v62 = v17;
  CheckmarkToggleStyle.adjustedCheckmarkWidth.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v18 = v74;
  char v19 = v75;
  uint64_t v20 = v76;
  char v21 = v77;
  uint64_t v22 = v78;
  uint64_t v39 = v79;
  long long v80 = *a1;
  char v81 = *((unsigned char *)a1 + 16);
  long long v59 = *a1;
  LOBYTE(v60) = *((unsigned char *)a1 + 16);
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v24 = v23;
  MEMORY[0x18C113DA0](&v48);
  int v25 = v48;
  _SymbolEffect.HiddenConfiguration.init()();
  LODWORD(v59) = v48;
  WORD2(v59) = WORD2(v48);
  _SymbolEffect.HiddenConfiguration.flags.setter();
  uint64_t v26 = 0x100000000;
  if (!BYTE4(v59)) {
    uint64_t v26 = 0;
  }
  uint64_t v27 = 0x10000000000;
  if (v25) {
    uint64_t v27 = 0;
  }
  uint64_t v28 = v27 | v59 | v26;
  long long v59 = v80;
  LOBYTE(v60) = v81;
  MEMORY[0x18C113DA0](&v48, v24);
  if ((_BYTE)v48) {
    double v29 = 1.0;
  }
  else {
    double v29 = 0.0;
  }
  uint64_t v30 = swift_getKeyPath();
  *(void *)&long long v48 = v9;
  *((void *)&v48 + 1) = v44;
  LOBYTE(v49) = v45;
  *((void *)&v49 + 1) = v42;
  *(void *)&long long v50 = v43;
  *((void *)&v50 + 1) = v40;
  *(void *)&long long v51 = v41;
  *((void *)&v51 + 1) = v18;
  LOBYTE(v52) = v19;
  *((void *)&v52 + 1) = v20;
  LOBYTE(v53) = v21;
  *((void *)&v53 + 1) = v22;
  *(void *)&long long v54 = v39;
  long long v55 = 0uLL;
  *((void *)&v54 + 1) = v28;
  long long v56 = xmmword_18835EE10;
  v57[4] = 1;
  *(_DWORD *)long long v57 = 0;
  *(double *)&v57[8] = v29;
  *(void *)&v57[16] = v30;
  v57[24] = 0;
  char v58 = 0;
  long long v31 = v52;
  long long v32 = v53;
  *(_OWORD *)(a3 + 136) = v54;
  *(_OWORD *)(a3 + 120) = v32;
  *(_OWORD *)(a3 + 104) = v31;
  long long v33 = v50;
  *(_OWORD *)(a3 + 88) = v51;
  *(_OWORD *)(a3 + 193) = *(_OWORD *)&v57[9];
  long long v34 = v56;
  *(_OWORD *)(a3 + 184) = *(_OWORD *)v57;
  *(_OWORD *)(a3 + 168) = v34;
  *(_OWORD *)(a3 + 152) = 0uLL;
  long long v35 = v48;
  long long v36 = v49;
  *(_OWORD *)(a3 + 72) = v33;
  *(_OWORD *)(a3 + 56) = v36;
  *(_OWORD *)(a3 + 40) = v35;
  char v37 = v58;
  *(void *)a3 = KeyPath;
  *(void *)(a3 + 8) = v47;
  *(void *)(a3 + 16) = 0x4030000000000000;
  *(unsigned char *)(a3 + 24) = v37;
  *(void *)(a3 + 32) = 0xBFF0000000000000;
  *(void *)&long long v59 = v9;
  *((void *)&v59 + 1) = v44;
  LOBYTE(v60) = v45;
  *((void *)&v60 + 1) = v42;
  *(void *)&long long v61 = v43;
  *((void *)&v61 + 1) = v40;
  *(void *)&long long v62 = v41;
  *((void *)&v62 + 1) = v18;
  LOBYTE(v63) = v19;
  *((void *)&v63 + 1) = v20;
  LOBYTE(v64) = v21;
  *((void *)&v64 + 1) = v22;
  *(void *)&long long v65 = v39;
  uint64_t v66 = 0;
  uint64_t v67 = 0;
  *((void *)&v65 + 1) = v28;
  long long v68 = xmmword_18835EE10;
  char v70 = 1;
  int v69 = 0;
  double v71 = v29;
  uint64_t v72 = v30;
  char v73 = 0;
  swift_retain();
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(&v48);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(&v59);
  swift_release();
  return swift_release();
}

void *closure #1 in CheckmarkToggleStyle.defaultContent(configuration:)(void *a1)
{
  outlined retain of ToggleStyleConfiguration(a1);
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v3 = v2;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v5, v3);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of ToggleStyleConfiguration(a1);
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>)
  {
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F410E8]);
    type metadata accessor for Button<ToggleStyleConfiguration.Label>(255, &lazy cache variable for type metadata for Button<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>);
    }
  }
}

void type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>();
    lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_5(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>();
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>, (void (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>()
{
  if (!lazy cache variable for type metadata for TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>)
  {
    type metadata accessor for (ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>);
    }
  }
}

void type metadata accessor for (ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>))
  {
    type metadata accessor for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>();
    type metadata accessor for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>));
    }
  }
}

void type metadata accessor for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_5(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

void type metadata accessor for Button<ToggleStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>);
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
    type metadata accessor for StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_5(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

void type metadata accessor for StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type CheckmarkAnimationPredicate and conformance CheckmarkAnimationPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CheckmarkAnimationPredicate and conformance CheckmarkAnimationPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type CheckmarkAnimationPredicate and conformance CheckmarkAnimationPredicate;
  if (!lazy protocol witness table cache variable for type CheckmarkAnimationPredicate and conformance CheckmarkAnimationPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CheckmarkAnimationPredicate and conformance CheckmarkAnimationPredicate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>();
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *partial apply for closure #1 in CheckmarkToggleStyle.menuContent(configuration:)()
{
  return closure #1 in CheckmarkToggleStyle.defaultContent(configuration:)((void *)(v0 + 16));
}

void *outlined release of TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>(void *a1)
{
  uint64_t v5 = a1[19];
  uint64_t v6 = a1[18];
  uint64_t v3 = a1[21];
  uint64_t v4 = a1[20];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of SymbolEffect?(v6, v5, v4, v3);
  swift_release();
  return a1;
}

uint64_t outlined init with copy of StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>(uint64_t a1)
{
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t key path getter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187F6D090@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundColor : EnvironmentValues, serialized()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t sub_187F6D0E8()
{
  return EnvironmentValues.foregroundColor.setter();
}

uint64_t outlined retain of CheckmarkToggleStyle(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  char v8 = *(unsigned char *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  char v10 = *(unsigned char *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  char v12 = *(unsigned char *)(a1 + 96);
  outlined copy of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<HoverEffectContext?>.Content(v4, v5, v6, v7, v8);
  outlined copy of Environment<Bool>.Content(v9, v10);
  outlined copy of Environment<Bool>.Content(v13, v12);
  return a1;
}

uint64_t outlined release of CheckmarkToggleStyle(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  char v8 = *(unsigned char *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  char v10 = *(unsigned char *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  char v12 = *(unsigned char *)(a1 + 96);
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<HoverEffectContext?>.Content(v4, v5, v6, v7, v8);
  outlined consume of Environment<Bool>.Content(v9, v10);
  outlined consume of Environment<Bool>.Content(v13, v12);
  return a1;
}

void *outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(void *a1)
{
  uint64_t v2 = a1[15];
  uint64_t v5 = a1[14];
  uint64_t v6 = a1[13];
  uint64_t v3 = a1[16];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of SymbolEffect?(v6, v5, v2, v3);
  swift_retain();
  return a1;
}

void *outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>(void *a1)
{
  uint64_t v2 = a1[15];
  uint64_t v5 = a1[14];
  uint64_t v6 = a1[13];
  uint64_t v3 = a1[16];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of SymbolEffect?(v6, v5, v2, v3);
  swift_release();
  return a1;
}

void *type metadata accessor for CheckmarkAnimationPredicate()
{
  return &unk_1ED44E808;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>> and conformance <> StaticIf<A, B, C>();
    lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>();
    _s7SwiftUI16ImageProviderBoxCyAA0C0V05NamedcD0VGMaTm_0(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>>();
    lazy protocol witness table accessor for type Button<ToggleStyleConfiguration.Label> and conformance Button<A>();
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>> and conformance Button<A>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, Button<ToggleStyleConfiguration.Label>, Button<ModifiedContent<HStack<TupleView<(ModifiedContent<ToggleStyleConfiguration.Label, _EnvironmentKeyWritingModifier<Color?>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _FrameLayout>, StaticIf<CheckmarkAnimationPredicate, _SymbolEffectModifier, EmptyModifier>>, OpacityRendererEffect>, DisableAccessibilityNodesModifier>, _EnvironmentKeyWritingModifier<Bool>>)>>, _EnvironmentKeyWritingModifier<Color?>>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Button<ToggleStyleConfiguration.Label> and conformance Button<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Button<ToggleStyleConfiguration.Label> and conformance Button<A>;
  if (!lazy protocol witness table cache variable for type Button<ToggleStyleConfiguration.Label> and conformance Button<A>)
  {
    type metadata accessor for Button<ToggleStyleConfiguration.Label>(255, &lazy cache variable for type metadata for Button<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Button<ToggleStyleConfiguration.Label> and conformance Button<A>);
  }
  return result;
}

uint64_t specialized static CheckmarkAnimationPredicate.evaluate(inputs:)()
{
  _GraphInputs.interfaceIdiom.getter();
  if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0
    || (_GraphInputs.interfaceIdiom.getter(), (AnyInterfaceIdiom.accepts<A>(_:)() & 1) != 0))
  {
    if (static StyleContextAcceptsPredicate.evaluate(inputs:)()) {
      char v0 = 1;
    }
    else {
      char v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
    }
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t sub_187F6D7F8()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for ToolbarRemovingModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187F6D928);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in ToolbarRemovingModifier()
{
  return &protocol witness table for ToolbarRemovingModifier;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarRemovingModifier.SidebarToggleRemover@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t v2 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for _GraphValue<ToolbarRemovingModifier>(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, MEMORY[0x1E4FBB718]);
  char v3 = *(unsigned char *)AGGraphGetValue();
  type metadata accessor for _GraphValue<ToolbarRemovingModifier>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, v2);
  Weakuint64_t Value = AGGraphGetWeakValue();
  char v5 = 6;
  if (WeakValue)
  {
    uint64_t v6 = *(void *)(WeakValue + 8);
    if (v6 == 6) {
      char v5 = 6;
    }
    else {
      char v5 = v6;
    }
  }
  uint64_t v7 = swift_allocObject();
  *(unsigned char *)(v7 + 16) = v3;
  *(unsigned char *)(v7 + 17) = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in ToolbarRemovingModifier.SidebarToggleRemover.value.getter;
  *(void *)(result + 24) = v7;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarRemovingModifier.TitleRemover@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  type metadata accessor for _GraphValue<ToolbarRemovingModifier>(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, MEMORY[0x1E4FBB718]);
  char v2 = *(unsigned char *)AGGraphGetValue();
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 16) = v2;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = _s7SwiftUI23ToolbarRemovingModifier33_E54E8F0036C88C06FCE06176D1A5D36FLLV12TitleRemoverV5valueyyAA010NavigationO7StorageVSgzcvgyAJzcfU_TA_0;
  *(void *)(result + 24) = v3;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance ToolbarRemovingModifier()
{
}

uint64_t sub_187F6DBB8()
{
  return swift_deallocObject();
}

uint64_t sub_187F6DBC8()
{
  return swift_deallocObject();
}

uint64_t sub_187F6DBD8()
{
  swift_release();

  return swift_deallocObject();
}

void *type metadata accessor for ToolbarRemovingModifier.SidebarToggleRemover()
{
  return &unk_1ED4410C8;
}

void *type metadata accessor for ToolbarRemovingModifier.TitleRemover()
{
  return &unk_1ED4410A0;
}

uint64_t PresentationOptionsPreference.sheetConfigurationChanged(from:)(uint64_t a1)
{
  outlined init with copy of PresentationOptionsPreference?(a1, (uint64_t)v56);
  if (*(void *)&v56[0])
  {
    v63[6] = v61;
    v64[0] = v62[0];
    *(_OWORD *)((char *)v64 + 9) = *(_OWORD *)((char *)v62 + 9);
    v63[2] = v57;
    v63[3] = v58;
    v63[4] = v59;
    v63[5] = v60;
    v63[0] = v56[0];
    v63[1] = v56[1];
    int v2 = *(unsigned __int8 *)(v1 + 40);
    int v3 = BYTE8(v57);
    if (v2 == 6)
    {
      if (BYTE8(v57) == 6)
      {
        outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v56);
        outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v54);
        goto LABEL_9;
      }
    }
    else if (BYTE8(v57) != 6)
    {
      outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v56);
      outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v54);
      if (v2 == v3)
      {
LABEL_9:
        int v5 = BYTE9(v57);
        outlined destroy of PresentationOptionsPreference((uint64_t)v56);
        int v6 = v55;
        BOOL v7 = v55 == 6;
        outlined destroy of PresentationOptionsPreference((uint64_t)v54);
        if (v5 != 6) {
          BOOL v7 = v6 != 6 && v5 == v6;
        }
        outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v52);
        outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v50);
        if (v7)
        {
          id v9 = v53;
          id v10 = v51;
          if (v53 == (id)2)
          {
            outlined copy of PresentationDimmingBehavior?(v51);
            outlined destroy of PresentationOptionsPreference((uint64_t)v50);
            outlined destroy of PresentationOptionsPreference((uint64_t)v52);
            if (v10 == (id)2) {
              goto LABEL_39;
            }
            goto LABEL_32;
          }
          if (v51 == (id)2)
          {
            outlined copy of Image.Location(v53);
            outlined destroy of PresentationOptionsPreference((uint64_t)v50);
            outlined destroy of PresentationOptionsPreference((uint64_t)v52);
            id v10 = v9;
LABEL_32:
            char v12 = v10;
LABEL_51:
            outlined consume of PresentationDimmingBehavior?(v12);
            goto LABEL_22;
          }
          if (v53)
          {
            if (v53 != (id)1)
            {
              if ((unint64_t)v51 >= 2)
              {
                uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v26 = v25;
                if (v24 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v26 == v27) {
                  char v28 = 1;
                }
                else {
                  char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
                }
                outlined copy of PresentationDimmingBehavior?(v9);
                outlined copy of PresentationDimmingBehavior?(v10);
                outlined copy of PresentationDimmingBehavior?(v9);
                outlined copy of PresentationDimmingBehavior?(v10);
                outlined copy of PresentationDimmingBehavior?(v9);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                outlined consume of PresentationDimmingBehavior?(v10);
                outlined consume of PresentationDimmingBehavior?(v9);
                outlined consume of PresentationDimmingBehavior?(v10);
                outlined destroy of PresentationOptionsPreference((uint64_t)v50);
                outlined destroy of PresentationOptionsPreference((uint64_t)v52);
                outlined consume of PresentationDimmingBehavior?(v9);
                outlined consume of PresentationDimmingBehavior?(v9);
                outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v47);
                outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v44);
                if (v28)
                {
LABEL_40:
                  double v13 = v48;
                  char v14 = v49;
                  outlined destroy of PresentationOptionsPreference((uint64_t)v47);
                  double v15 = v45;
                  char v16 = v46;
                  outlined destroy of PresentationOptionsPreference((uint64_t)v44);
                  if ((v14 & 1) == 0) {
                    char v16 = (v13 == v15) & ~v16;
                  }
                  outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v41);
                  outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v38);
                  if (v16)
                  {
                    double v17 = v42;
                    char v18 = v43;
                    outlined destroy of PresentationOptionsPreference((uint64_t)v41);
                    double v19 = v39;
                    char v20 = v40;
                    outlined destroy of PresentationOptionsPreference((uint64_t)v38);
                    if ((v18 & 1) == 0) {
                      char v20 = (v17 == v19) & ~v20;
                    }
                    outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v37);
                    outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v36);
                    if (v20)
                    {
                      int v21 = v37[57];
                      outlined destroy of PresentationOptionsPreference((uint64_t)v37);
                      int v22 = v36[57];
                      outlined destroy of PresentationOptionsPreference((uint64_t)v36);
                      outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v34);
                      outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v32);
                      if ((v21 != 2) == (v22 != 2))
                      {
                        if (v35) {
                          int v23 = v35 == 1;
                        }
                        else {
                          int v23 = *(void *)(v34[0] + 16) > 1uLL;
                        }
                        if (v33) {
                          int v29 = v33 == 1;
                        }
                        else {
                          int v29 = *(void *)(v32[0] + 16) > 1uLL;
                        }
                        outlined destroy of PresentationOptionsPreference((uint64_t)v34);
                        outlined destroy of PresentationOptionsPreference((uint64_t)v32);
                        outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v31);
                        outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v30);
                        if (v23 == v29)
                        {
                          char v4 = specialized static Set.== infix(_:_:)(v31[0], v30[0]) ^ 1;
                          goto LABEL_28;
                        }
LABEL_27:
                        char v4 = 1;
LABEL_28:
                        outlined destroy of PresentationOptionsPreference((uint64_t)v63);
                        outlined destroy of PresentationOptionsPreference((uint64_t)v31);
                        outlined destroy of PresentationOptionsPreference((uint64_t)v30);
                        return v4 & 1;
                      }
LABEL_26:
                      outlined destroy of PresentationOptionsPreference((uint64_t)v34);
                      outlined destroy of PresentationOptionsPreference((uint64_t)v32);
                      outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v31);
                      outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v30);
                      goto LABEL_27;
                    }
LABEL_25:
                    outlined destroy of PresentationOptionsPreference((uint64_t)v36);
                    outlined destroy of PresentationOptionsPreference((uint64_t)v37);
                    outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v34);
                    outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v32);
                    goto LABEL_26;
                  }
LABEL_24:
                  outlined destroy of PresentationOptionsPreference((uint64_t)v38);
                  outlined destroy of PresentationOptionsPreference((uint64_t)v41);
                  outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v37);
                  outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v36);
                  goto LABEL_25;
                }
LABEL_23:
                outlined destroy of PresentationOptionsPreference((uint64_t)v44);
                outlined destroy of PresentationOptionsPreference((uint64_t)v47);
                outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v41);
                outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v38);
                goto LABEL_24;
              }
              goto LABEL_50;
            }
            if (v51 != (id)1)
            {
LABEL_50:
              outlined copy of PresentationDimmingBehavior?(v53);
              outlined copy of Image.Location(v9);
              outlined destroy of PresentationOptionsPreference((uint64_t)v50);
              outlined destroy of PresentationOptionsPreference((uint64_t)v52);
              outlined consume of PresentationDimmingBehavior?(v9);
              char v12 = v9;
              goto LABEL_51;
            }
          }
          else if (v51)
          {
            goto LABEL_50;
          }
          outlined copy of PresentationDimmingBehavior?(v53);
          outlined copy of Image.Location(v9);
          outlined destroy of PresentationOptionsPreference((uint64_t)v50);
          outlined destroy of PresentationOptionsPreference((uint64_t)v52);
          outlined consume of PresentationDimmingBehavior?(v9);
          outlined consume of PresentationDimmingBehavior?(v9);
LABEL_39:
          outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v47);
          outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v44);
          goto LABEL_40;
        }
LABEL_21:
        outlined destroy of PresentationOptionsPreference((uint64_t)v50);
        outlined destroy of PresentationOptionsPreference((uint64_t)v52);
LABEL_22:
        outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v47);
        outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v44);
        goto LABEL_23;
      }
LABEL_20:
      outlined destroy of PresentationOptionsPreference((uint64_t)v54);
      outlined destroy of PresentationOptionsPreference((uint64_t)v56);
      outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v52);
      outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v50);
      goto LABEL_21;
    }
    outlined init with copy of PresentationOptionsPreference(v1, (uint64_t)v56);
    outlined init with copy of PresentationOptionsPreference((uint64_t)v63, (uint64_t)v54);
    goto LABEL_20;
  }
  outlined destroy of PresentationOptionsPreference?((uint64_t)v56);
  char v4 = 1;
  return v4 & 1;
}

uint64_t PresentationOptionsPreference.differenceMessage(from:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  int v3 = a1;
  v144 = (void *)0xE900000000000063;
  uint64_t v4 = *(void *)v1;
  uint64_t v149 = *a1;
  uint64_t v148 = *(void *)v1;
  uint64_t v146 = v1;
  if ((specialized static Set.== infix(_:_:)(*(void *)v1, *a1) & 1) == 0)
  {
    swift_beginAccess();
    v5._countAndFlagsBits = 0xD000000000000016;
    v5._object = (void *)0x800000018833CD90;
    String.append(_:)(v5);
    swift_endAccess();
    int64_t v6 = *(void *)(v4 + 16);
    if (v6)
    {
      uint64_t v150 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
      uint64_t v7 = specialized Set.startIndex.getter(v4);
      uint64_t v9 = v8;
      char v11 = v10 & 1;
      uint64_t v147 = v4 + 56;
      do
      {
        if (v7 < 0 || v7 >= 1 << *(unsigned char *)(v4 + 32))
        {
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
LABEL_167:
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
          JUMPOUT(0x187F6F61CLL);
        }
        if (((*(void *)(v147 + (((unint64_t)v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v7) & 1) == 0) {
          goto LABEL_165;
        }
        if (*(_DWORD *)(v4 + 36) != v9) {
          goto LABEL_166;
        }
        char v12 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v7);
        uint64_t v13 = *v12;
        unint64_t v14 = v12[1];
        unint64_t v15 = 0xD000000000000026;
        unint64_t v16 = 0x800000018833CCE0;
        switch(v14 >> 62)
        {
          case 1uLL:
            uint64_t v152 = 0x20746867696548;
            unint64_t v17 = 0xE700000000000000;
            goto LABEL_11;
          case 2uLL:
            break;
          case 3uLL:
            if (v13 | v14 ^ 0xC000000000000000)
            {
              if (v14 == 0xC000000000000000 && v13 == 1)
              {
                unint64_t v16 = 0xE500000000000000;
                unint64_t v15 = 0x656772614CLL;
              }
              else
              {
                unint64_t v16 = 0xE700000000000000;
                unint64_t v15 = 0x6E776F6E6B6E55;
              }
            }
            else
            {
              unint64_t v16 = 0xE600000000000000;
              unint64_t v15 = 0x6D756964654DLL;
            }
            break;
          default:
            uint64_t v152 = 0x6E6F697463617246;
            unint64_t v17 = 0xE900000000000020;
LABEL_11:
            unint64_t v154 = v17;
            v18._countAndFlagsBits = Double.description.getter();
            String.append(_:)(v18);
            swift_bridgeObjectRelease();
            unint64_t v15 = v152;
            unint64_t v16 = v154;
            break;
        }
        unint64_t v20 = *(void *)(v150 + 16);
        unint64_t v19 = *(void *)(v150 + 24);
        if (v20 >= v19 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1);
        }
        *(void *)(v150 + 16) = v20 + 1;
        uint64_t v21 = v150 + 16 * v20;
        *(void *)(v21 + 32) = v15;
        *(void *)(v21 + 40) = v16;
        uint64_t v4 = v148;
        uint64_t v22 = specialized _NativeSet.index(after:)(v7, v9, v11 & 1, v148);
        uint64_t v7 = v22;
        uint64_t v9 = v23;
        char v11 = v24 & 1;
        --v6;
      }
      while (v6);
      outlined consume of Set<UIOpenURLContext>.Index._Variant(v22, v23, v24 & 1);
      swift_bridgeObjectRelease();
      int v3 = a1;
      uint64_t v2 = v1;
    }
    else
    {
      int v3 = a1;
    }
    type metadata accessor for String?(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v26 = BidirectionalCollection<>.joined(separator:)();
    char v28 = v27;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v29._countAndFlagsBits = v26;
    v29._object = v28;
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 10;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    swift_endAccess();
    swift_beginAccess();
    v31._countAndFlagsBits = 0xD000000000000016;
    v31._object = (void *)0x800000018833CD90;
    String.append(_:)(v31);
    swift_endAccess();
    int64_t v32 = *(void *)(v149 + 16);
    if (v32)
    {
      uint64_t v151 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v32, 0);
      uint64_t v33 = v149;
      uint64_t v34 = specialized Set.startIndex.getter(v149);
      uint64_t v36 = v35;
      char v38 = v37 & 1;
      do
      {
        if (v34 < 0 || v34 >= 1 << *(unsigned char *)(v33 + 32)) {
          goto LABEL_167;
        }
        if (((*(void *)(v149 + 56 + (((unint64_t)v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v34) & 1) == 0) {
          goto LABEL_168;
        }
        if (*(_DWORD *)(v33 + 36) != v36) {
          goto LABEL_169;
        }
        double v39 = (uint64_t *)(*(void *)(v33 + 48) + 16 * v34);
        uint64_t v40 = *v39;
        unint64_t v41 = v39[1];
        unint64_t v42 = 0xD000000000000026;
        unint64_t v43 = 0x800000018833CCE0;
        switch(v41 >> 62)
        {
          case 1uLL:
            uint64_t v153 = 0x20746867696548;
            unint64_t v44 = 0xE700000000000000;
            goto LABEL_34;
          case 2uLL:
            break;
          case 3uLL:
            if (v40 | v41 ^ 0xC000000000000000)
            {
              if (v41 == 0xC000000000000000 && v40 == 1)
              {
                unint64_t v43 = 0xE500000000000000;
                unint64_t v42 = 0x656772614CLL;
              }
              else
              {
                unint64_t v43 = 0xE700000000000000;
                unint64_t v42 = 0x6E776F6E6B6E55;
              }
            }
            else
            {
              unint64_t v43 = 0xE600000000000000;
              unint64_t v42 = 0x6D756964654DLL;
            }
            break;
          default:
            unint64_t v44 = 0xE900000000000020;
            uint64_t v153 = 0x6E6F697463617246;
LABEL_34:
            unint64_t v155 = v44;
            v45._countAndFlagsBits = Double.description.getter();
            String.append(_:)(v45);
            swift_bridgeObjectRelease();
            unint64_t v42 = v153;
            unint64_t v43 = v155;
            break;
        }
        unint64_t v47 = *(void *)(v151 + 16);
        unint64_t v46 = *(void *)(v151 + 24);
        if (v47 >= v46 >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1);
        }
        *(void *)(v151 + 16) = v47 + 1;
        uint64_t v48 = v151 + 16 * v47;
        *(void *)(v48 + 32) = v42;
        *(void *)(v48 + 40) = v43;
        uint64_t v49 = specialized _NativeSet.index(after:)(v34, v36, v38 & 1, v149);
        uint64_t v33 = v149;
        uint64_t v34 = v49;
        uint64_t v36 = v50;
        char v38 = v51 & 1;
        --v32;
      }
      while (v32);
      outlined consume of Set<UIOpenURLContext>.Index._Variant(v49, v50, v51 & 1);
      swift_bridgeObjectRelease();
      int v3 = a1;
      uint64_t v2 = v1;
    }
    uint64_t v53 = BidirectionalCollection<>.joined(separator:)();
    unsigned __int8 v55 = v54;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v56._countAndFlagsBits = v53;
    v56._object = v55;
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    v57._countAndFlagsBits = 10;
    v57._object = (void *)0xE100000000000000;
    String.append(_:)(v57);
    swift_endAccess();
  }
  uint64_t v58 = 0x6974616D6F747541;
  uint64_t v59 = *(unsigned __int8 *)(v2 + 40);
  int v60 = *((unsigned __int8 *)v3 + 40);
  if (v59 == 6)
  {
    uint64_t v61 = v149;
  }
  else
  {
    uint64_t v61 = v149;
    if (v60 == 6 || v59 != v60)
    {
      swift_beginAccess();
      v67._countAndFlagsBits = 0xD00000000000002BLL;
      v67._object = (void *)0x800000018833CDB0;
      String.append(_:)(v67);
      swift_endAccess();
      long long v68 = (void *)0xE900000000000063;
      uint64_t v69 = 0x6974616D6F747541;
      switch(v59)
      {
        case 1:
          long long v68 = (void *)0xE400000000000000;
          uint64_t v69 = 1701736270;
          break;
        case 2:
          long long v68 = (void *)0xE700000000000000;
          uint64_t v69 = 0x7265766F706F50;
          break;
        case 3:
          long long v68 = (void *)0xE500000000000000;
          uint64_t v69 = 0x7465656853;
          break;
        case 4:
          long long v68 = (void *)0x800000018833CD30;
          uint64_t v69 = 0xD000000000000011;
          break;
        case 5:
          uint64_t v69 = 0xD000000000000010;
          long long v68 = (void *)0x800000018833CD10;
          break;
        default:
          break;
      }
      swift_beginAccess();
      v62._countAndFlagsBits = v69;
      v62._object = v68;
      String.append(_:)(v62);
      swift_bridgeObjectRelease();
      v63._countAndFlagsBits = 10;
      v63._object = (void *)0xE100000000000000;
      String.append(_:)(v63);
      swift_endAccess();
      swift_beginAccess();
      v64._countAndFlagsBits = 0xD00000000000002BLL;
      v64._object = (void *)0x800000018833CDB0;
      String.append(_:)(v64);
      swift_endAccess();
      uint64_t v65 = 0x6974616D6F747541;
      uint64_t v66 = (void *)0xE900000000000063;
      switch(v60)
      {
        case 0:
        case 6:
          break;
        case 1:
          uint64_t v66 = (void *)0xE400000000000000;
          uint64_t v65 = 1701736270;
          break;
        case 2:
          uint64_t v66 = (void *)0xE700000000000000;
          uint64_t v65 = 0x7265766F706F50;
          break;
        case 3:
          uint64_t v66 = (void *)0xE500000000000000;
          uint64_t v65 = 0x7465656853;
          break;
        case 4:
          uint64_t v66 = (void *)0x800000018833CD30;
          uint64_t v65 = 0xD000000000000011;
          break;
        case 5:
          uint64_t v65 = 0xD000000000000010;
          uint64_t v66 = (void *)0x800000018833CD10;
          break;
        default:
LABEL_170:
          JUMPOUT(0);
      }
      swift_beginAccess();
      v70._countAndFlagsBits = v65;
      v70._object = v66;
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      v71._countAndFlagsBits = 10;
      v71._object = (void *)0xE100000000000000;
      String.append(_:)(v71);
      swift_endAccess();
      uint64_t v61 = v149;
      int v3 = a1;
    }
  }
  uint64_t v72 = *(unsigned __int8 *)(v1 + 41);
  int v73 = *((unsigned __int8 *)v3 + 41);
  if (v72 != 6 && (v73 == 6 || v72 != v73))
  {
    swift_beginAccess();
    v77._countAndFlagsBits = 0xD000000000000029;
    v77._object = (void *)0x800000018833CDE0;
    String.append(_:)(v77);
    swift_endAccess();
    uint64_t v78 = (void *)0xE900000000000063;
    uint64_t v79 = 0x6974616D6F747541;
    switch(v72)
    {
      case 1:
        uint64_t v78 = (void *)0xE400000000000000;
        uint64_t v79 = 1701736270;
        break;
      case 2:
        uint64_t v78 = (void *)0xE700000000000000;
        uint64_t v79 = 0x7265766F706F50;
        break;
      case 3:
        uint64_t v78 = (void *)0xE500000000000000;
        uint64_t v79 = 0x7465656853;
        break;
      case 4:
        uint64_t v78 = (void *)0x800000018833CD30;
        uint64_t v79 = 0xD000000000000011;
        break;
      case 5:
        uint64_t v79 = 0xD000000000000010;
        uint64_t v78 = (void *)0x800000018833CD10;
        break;
      default:
        break;
    }
    swift_beginAccess();
    v74._countAndFlagsBits = v79;
    v74._object = v78;
    String.append(_:)(v74);
    swift_bridgeObjectRelease();
    v75._countAndFlagsBits = 10;
    v75._object = (void *)0xE100000000000000;
    String.append(_:)(v75);
    swift_endAccess();
    swift_beginAccess();
    v76._countAndFlagsBits = 0xD000000000000029;
    v76._object = (void *)0x800000018833CDE0;
    String.append(_:)(v76);
    swift_endAccess();
    int v3 = a1;
    switch(v73)
    {
      case 0:
      case 6:
        goto LABEL_73;
      case 1:
        v144 = (void *)0xE400000000000000;
        uint64_t v58 = 1701736270;
        goto LABEL_73;
      case 2:
        v144 = (void *)0xE700000000000000;
        uint64_t v58 = 0x7265766F706F50;
        goto LABEL_73;
      case 3:
        v144 = (void *)0xE500000000000000;
        uint64_t v58 = 0x7465656853;
        goto LABEL_73;
      case 4:
        v144 = (void *)0x800000018833CD30;
        uint64_t v58 = 0xD000000000000011;
        goto LABEL_73;
      case 5:
        uint64_t v58 = 0xD000000000000010;
        v144 = (void *)0x800000018833CD10;
LABEL_73:
        swift_beginAccess();
        v80._countAndFlagsBits = v58;
        v80._object = v144;
        String.append(_:)(v80);
        swift_bridgeObjectRelease();
        v81._countAndFlagsBits = 10;
        v81._object = (void *)0xE100000000000000;
        String.append(_:)(v81);
        swift_endAccess();
        uint64_t v61 = v149;
        break;
      default:
        goto LABEL_170;
    }
  }
  uint64_t v82 = v1;
  size_t v83 = *(void **)(v1 + 48);
  size_t v84 = (void *)v3[6];
  if (v83 == (void *)2)
  {
    if (v84 == (void *)2) {
      goto LABEL_97;
    }
    goto LABEL_78;
  }
  if (v84 == (void *)2) {
    goto LABEL_78;
  }
  if (!v83)
  {
    if (!v84) {
      goto LABEL_97;
    }
    goto LABEL_78;
  }
  if (v83 == (void *)1)
  {
    if (v84 == (void *)1) {
      goto LABEL_97;
    }
    goto LABEL_78;
  }
  if ((unint64_t)v84 < 2) {
    goto LABEL_78;
  }
  uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v141 = v140;
  if (v139 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v141 == v142) {
    char v143 = 1;
  }
  else {
    char v143 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  outlined copy of PresentationDimmingBehavior?(v83);
  outlined copy of PresentationDimmingBehavior?(v83);
  outlined copy of PresentationDimmingBehavior?(v84);
  outlined copy of PresentationDimmingBehavior?(v83);
  outlined copy of PresentationDimmingBehavior?(v84);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PresentationDimmingBehavior?(v84);
  outlined consume of PresentationDimmingBehavior?(v83);
  outlined consume of PresentationDimmingBehavior?(v84);
  outlined consume of PresentationDimmingBehavior?(v83);
  outlined consume of PresentationDimmingBehavior?(v83);
  uint64_t v61 = v149;
  int v3 = a1;
  if ((v143 & 1) == 0)
  {
LABEL_78:
    swift_beginAccess();
    v85._countAndFlagsBits = 0xD000000000000023;
    v85._object = (void *)0x800000018833CE10;
    String.append(_:)(v85);
    swift_endAccess();
    uint64_t v86 = *(void *)(v146 + 48);
    if (!v86 || v86 == 2)
    {
      uint64_t v88 = (void *)0xE800000000000000;
      uint64_t v87 = 0x64656C6261736944;
    }
    else
    {
      if (v86 == 1) {
        uint64_t v87 = 0x64656C62616E45;
      }
      else {
        uint64_t v87 = 0xD000000000000011;
      }
      if (v86 == 1) {
        uint64_t v88 = (void *)0xE700000000000000;
      }
      else {
        uint64_t v88 = (void *)0x800000018833CEB0;
      }
    }
    swift_beginAccess();
    v89._countAndFlagsBits = v87;
    v89._object = v88;
    String.append(_:)(v89);
    swift_bridgeObjectRelease();
    v90._countAndFlagsBits = 10;
    v90._object = (void *)0xE100000000000000;
    String.append(_:)(v90);
    swift_endAccess();
    swift_beginAccess();
    v91._countAndFlagsBits = 0xD000000000000023;
    v91._object = (void *)0x800000018833CE10;
    String.append(_:)(v91);
    swift_endAccess();
    uint64_t v92 = v3[6];
    if (!v92 || v92 == 2)
    {
      unsigned int v94 = (void *)0xE800000000000000;
      uint64_t v93 = 0x64656C6261736944;
    }
    else
    {
      if (v92 == 1) {
        uint64_t v93 = 0x64656C62616E45;
      }
      else {
        uint64_t v93 = 0xD000000000000011;
      }
      if (v92 == 1) {
        unsigned int v94 = (void *)0xE700000000000000;
      }
      else {
        unsigned int v94 = (void *)0x800000018833CEB0;
      }
    }
    swift_beginAccess();
    v95._countAndFlagsBits = v93;
    v95._object = v94;
    String.append(_:)(v95);
    swift_bridgeObjectRelease();
    v96._countAndFlagsBits = 10;
    v96._object = (void *)0xE100000000000000;
    String.append(_:)(v96);
    swift_endAccess();
    uint64_t v61 = v149;
  }
LABEL_97:
  char v97 = *(unsigned char *)(v146 + 72);
  char v98 = *((unsigned char *)v3 + 72);
  if (v97)
  {
    if (v3[9]) {
      goto LABEL_109;
    }
  }
  else if ((v3[9] & 1) == 0 && *(double *)(v146 + 64) == *((double *)v3 + 8))
  {
    goto LABEL_109;
  }
  uint64_t v99 = 0x746C7561666544;
  swift_beginAccess();
  v100._countAndFlagsBits = 0xD00000000000001ALL;
  v100._object = (void *)0x800000018833CE40;
  String.append(_:)(v100);
  swift_endAccess();
  if (v97)
  {
    uint64_t v101 = (void *)0xE700000000000000;
    uint64_t v102 = 0x746C7561666544;
  }
  else
  {
    uint64_t v102 = Double.description.getter();
    uint64_t v101 = v103;
  }
  swift_beginAccess();
  v104._countAndFlagsBits = v102;
  v104._object = v101;
  String.append(_:)(v104);
  swift_bridgeObjectRelease();
  v105._countAndFlagsBits = 10;
  v105._object = (void *)0xE100000000000000;
  String.append(_:)(v105);
  swift_endAccess();
  swift_beginAccess();
  v106._countAndFlagsBits = 0xD00000000000001ALL;
  v106._object = (void *)0x800000018833CE40;
  String.append(_:)(v106);
  swift_endAccess();
  if (v98)
  {
    uint64_t v107 = (void *)0xE700000000000000;
  }
  else
  {
    uint64_t v99 = Double.description.getter();
    uint64_t v107 = v108;
  }
  int v3 = a1;
  uint64_t v82 = v146;
  swift_beginAccess();
  v109._countAndFlagsBits = v99;
  v109._object = v107;
  String.append(_:)(v109);
  swift_bridgeObjectRelease();
  v110._countAndFlagsBits = 10;
  v110._object = (void *)0xE100000000000000;
  String.append(_:)(v110);
  swift_endAccess();
  uint64_t v61 = v149;
LABEL_109:
  int v111 = *(unsigned __int8 *)(v82 + 57);
  int v112 = *((unsigned __int8 *)v3 + 57);
  if (v112 == 2)
  {
    if (v111 == 2) {
      goto LABEL_120;
    }
  }
  else if (v111 != 2)
  {
    goto LABEL_120;
  }
  swift_beginAccess();
  v113._countAndFlagsBits = 0xD000000000000020;
  v113._object = (void *)0x800000018833CE60;
  String.append(_:)(v113);
  if (v111 == 1) {
    uint64_t v114 = 0x73657A69736552;
  }
  else {
    uint64_t v114 = 0x736C6C6F726353;
  }
  unint64_t v115 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v114);
  swift_bridgeObjectRelease();
  v116._countAndFlagsBits = 10;
  v116._object = (void *)0xE100000000000000;
  String.append(_:)(v116);
  swift_endAccess();
  swift_beginAccess();
  v117._countAndFlagsBits = 0xD000000000000020;
  v117._object = (void *)0x800000018833CE60;
  String.append(_:)(v117);
  if (v112 == 1) {
    uint64_t v118 = 0x73657A69736552;
  }
  else {
    uint64_t v118 = 0x736C6C6F726353;
  }
  unint64_t v119 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v118);
  swift_bridgeObjectRelease();
  v120._countAndFlagsBits = 10;
  v120._object = (void *)0xE100000000000000;
  String.append(_:)(v120);
  swift_endAccess();
  uint64_t v61 = v149;
LABEL_120:
  int v121 = *(unsigned __int8 *)(v82 + 58);
  if (*(unsigned char *)(v82 + 58))
  {
    if (v121 == 1)
    {
      BOOL v122 = 1;
      int v123 = *((unsigned __int8 *)v3 + 58);
      if (*((unsigned char *)v3 + 58)) {
        goto LABEL_123;
      }
LABEL_129:
      LOBYTE(v122) = v122 ^ (*(void *)(v61 + 16) < 2uLL);
      goto LABEL_130;
    }
    BOOL v122 = 0;
    int v123 = *((unsigned __int8 *)v3 + 58);
    if (!*((unsigned char *)v3 + 58)) {
      goto LABEL_129;
    }
  }
  else
  {
    BOOL v122 = *(void *)(v148 + 16) > 1uLL;
    int v123 = *((unsigned __int8 *)v3 + 58);
    if (!*((unsigned char *)v3 + 58)) {
      goto LABEL_129;
    }
  }
LABEL_123:
  if (v123 != 1)
  {
    if (!v122) {
      goto LABEL_146;
    }
LABEL_131:
    uint64_t v124 = 0x656C6269736956;
    swift_beginAccess();
    v125._countAndFlagsBits = 0xD00000000000001BLL;
    v125._object = (void *)0x800000018833CE90;
    String.append(_:)(v125);
    if (v121)
    {
      if (v121 == 1)
      {
LABEL_133:
        unint64_t v126 = 0xE700000000000000;
        uint64_t v127 = 0x656C6269736956;
        goto LABEL_140;
      }
    }
    else if (*(void *)(v148 + 16) > 1uLL)
    {
      goto LABEL_133;
    }
    unint64_t v126 = 0xE600000000000000;
    uint64_t v127 = 0x6E6564646948;
LABEL_140:
    unint64_t v128 = v126;
    String.append(_:)(*(Swift::String *)&v127);
    swift_bridgeObjectRelease();
    v129._countAndFlagsBits = 10;
    v129._object = (void *)0xE100000000000000;
    String.append(_:)(v129);
    swift_endAccess();
    swift_beginAccess();
    v130._countAndFlagsBits = 0xD00000000000001BLL;
    v130._object = (void *)0x800000018833CE90;
    String.append(_:)(v130);
    if (v123)
    {
      if (v123 == 1)
      {
LABEL_142:
        v131 = (void *)0xE700000000000000;
LABEL_145:
        v132._countAndFlagsBits = v124;
        v132._object = v131;
        String.append(_:)(v132);
        swift_bridgeObjectRelease();
        v133._countAndFlagsBits = 10;
        v133._object = (void *)0xE100000000000000;
        String.append(_:)(v133);
        swift_endAccess();
        goto LABEL_146;
      }
    }
    else if (*(void *)(v149 + 16) > 1uLL)
    {
      goto LABEL_142;
    }
    v131 = (void *)0xE600000000000000;
    uint64_t v124 = 0x6E6564646948;
    goto LABEL_145;
  }
LABEL_130:
  if (!v122) {
    goto LABEL_131;
  }
LABEL_146:
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v134._countAndFlagsBits = 0xD00000000000001BLL;
  v134._object = (void *)0x800000018833CD70;
  String.append(_:)(v134);
  swift_bridgeObjectRelease();
  v135._countAndFlagsBits = 2570;
  v135._object = (void *)0xE200000000000000;
  String.append(_:)(v135);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v136._countAndFlagsBits = 0xD00000000000001ELL;
  v136._object = (void *)0x800000018833CD50;
  String.append(_:)(v136);
  swift_bridgeObjectRelease();
  v137._countAndFlagsBits = 2570;
  v137._object = (void *)0xE200000000000000;
  String.append(_:)(v137);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 10;
}

unint64_t PresentationDetent.Identifier.description.getter(uint64_t a1, unint64_t a2)
{
  unint64_t result = 0xD000000000000026;
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v4 = 0x20746867696548;
      goto LABEL_4;
    case 2uLL:
      return result;
    case 3uLL:
      BOOL v6 = a2 == 0xC000000000000000 && a1 == 1;
      uint64_t v7 = 0x656772614CLL;
      if (!v6) {
        uint64_t v7 = 0x6E776F6E6B6E55;
      }
      if (a1 | a2 ^ 0xC000000000000000) {
        unint64_t result = v7;
      }
      else {
        unint64_t result = 0x6D756964654DLL;
      }
      break;
    default:
      uint64_t v4 = 0x6E6F697463617246;
LABEL_4:
      unint64_t v8 = v4;
      v5._countAndFlagsBits = Double.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      unint64_t result = v8;
      break;
  }
  return result;
}

unint64_t PresentationAdaptation.Kind.description.getter(char a1)
{
  unint64_t result = 0x6974616D6F747541;
  switch(a1)
  {
    case 1:
      unint64_t result = 1701736270;
      break;
    case 2:
      unint64_t result = 0x7265766F706F50;
      break;
    case 3:
      unint64_t result = 0x7465656853;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationDetent.Identifier()
{
  return PresentationDetent.Identifier.description.getter(*(void *)v0, *(void *)(v0 + 8));
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationAdaptation.Kind()
{
  return PresentationAdaptation.Kind.description.getter(*v0);
}

uint64_t outlined destroy of PresentationOptionsPreference?(uint64_t a1)
{
  type metadata accessor for String?(0, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id outlined copy of PresentationDimmingBehavior?(id result)
{
  if (result != (id)2) {
    return outlined copy of Image.Location(result);
  }
  return result;
}

void outlined consume of PresentationDimmingBehavior?(id a1)
{
  if (a1 != (id)2) {
    outlined consume of Image.Location(a1);
  }
}

uint64_t assignWithCopy for BarItemView(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v4 = *(void **)(a1 + 80);
  Swift::String v5 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v5;
  id v6 = v5;

  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

ValueMetadata *type metadata accessor for BarItemView()
{
  return &type metadata for BarItemView;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV5EntryVG_AJ2IDVs5NeverOTg503_s7d4UI13f115BridgeC11makeStorage33_558B6B1E48F37C8B0E16B128287879E0LL2in4from8strategyAA0C0O08LocationF0VAJ03BarS0O_SayAA0cF0V5H66VGxtFAR2IDVARcfu0_33_2e12c960fb4b0a3abd8a514624e1a4d3ArUTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v17;
    uint64_t v4 = *(void *)(type metadata accessor for ToolbarStorage.Entry(0) - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      ToolbarStorage.Entry.id.getter((uint64_t)v15);
      uint64_t v17 = v2;
      unint64_t v8 = *(void *)(v2 + 16);
      unint64_t v7 = *(void *)(v2 + 24);
      if (v8 >= v7 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
        uint64_t v2 = v17;
      }
      *(void *)(v2 + 16) = v8 + 1;
      uint64_t v9 = v2 + 88 * v8;
      long long v10 = v15[1];
      *(_OWORD *)(v9 + 32) = v15[0];
      *(_OWORD *)(v9 + 48) = v10;
      long long v11 = v15[2];
      long long v12 = v15[3];
      long long v13 = v15[4];
      *(unsigned char *)(v9 + 112) = v16;
      *(_OWORD *)(v9 + 80) = v12;
      *(_OWORD *)(v9 + 96) = v13;
      *(_OWORD *)(v9 + 64) = v11;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV5EntryV_SitG_AJs5NeverOTg503_s7d4UI14fg2V5h21VSiAEIgnyr_AE_SitAEs5i130OIegnrzr_TR03_s7a4UI13c106BridgeC26filterAndSortMatchingItems33_558B6B1E48F37C8B0E16B128287879E0LL2in10newStorage7contextSayAA0cU0l46E52VGAA0C0O11BarLocationO_AjO0X7ContextVtFA2L_P16XEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    uint64_t v7 = v16;
    type metadata accessor for (ToolbarStorage.Entry, Int)();
    uint64_t v9 = *(void *)(v8 - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    do
    {
      _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v10, (uint64_t)v5, type metadata accessor for ToolbarStorage.Entry);
      uint64_t v16 = v7;
      unint64_t v13 = *(void *)(v7 + 16);
      unint64_t v12 = *(void *)(v7 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        uint64_t v7 = v16;
      }
      *(void *)(v7 + 16) = v13 + 1;
      outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v5, v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v13, type metadata accessor for ToolbarStorage.Entry);
      v10 += v11;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t specialized Sequence.filter(_:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  unint64_t v4 = a3;
  uint64_t v19 = MEMORY[0x1E4FBC860];
  if (a3 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v16 = v4 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v4 & 0xC000000000000001;
      unint64_t v15 = v4;
      while (v17)
      {
        id v9 = (id)MEMORY[0x18C117680](v8, v4);
LABEL_9:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        id v18 = v9;
        uint64_t v12 = a2;
        char v13 = a1(&v18);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v4 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v8;
        if (v11 == v7)
        {
          uint64_t v12 = v19;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v16 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_19:
  uint64_t v12 = MEMORY[0x1E4FBC860];
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

void specialized Sequence.filter(_:)(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  double v39 = a1;
  uint64_t v40 = a2;
  uint64_t v5 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v35 = (uint64_t)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v33 - v9;
  MEMORY[0x1F4188790](v11);
  char v13 = (char *)&v33 - v12;
  int64_t v14 = 0;
  uint64_t v15 = a3;
  uint64_t v16 = *(void *)(a3 + 64);
  uint64_t v37 = a3 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v36 = MEMORY[0x1E4FBC860];
  unint64_t v41 = MEMORY[0x1E4FBC860];
  unint64_t v19 = v18 & v16;
  int64_t v38 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v20 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v14++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v14 >= v38) {
      goto LABEL_32;
    }
    unint64_t v23 = *(void *)(v37 + 8 * v14);
    if (!v23) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_19:
    uint64_t v25 = *(void *)(v6 + 72);
    _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(*(void *)(v15 + 56) + v25 * v21, (uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v10, (uint64_t)v13, type metadata accessor for ToolbarStorage.Entry);
    char v26 = v39(v13);
    if (v3)
    {
      outlined destroy of ToolbarStorage.Entry((uint64_t)v13, type metadata accessor for ToolbarStorage.Entry);
      swift_release();
LABEL_32:
      swift_release();
      return;
    }
    if (v26)
    {
      outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v13, v35, type metadata accessor for ToolbarStorage.Entry);
      unint64_t v27 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v27 + 16) + 1, 1);
      }
      unint64_t v28 = v41;
      unint64_t v30 = *(void *)(v41 + 16);
      unint64_t v29 = *(void *)(v41 + 24);
      unint64_t v31 = v30 + 1;
      if (v30 >= v29 >> 1)
      {
        unint64_t v36 = v30 + 1;
        unint64_t v34 = v30;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        unint64_t v31 = v36;
        unint64_t v30 = v34;
        unint64_t v28 = v41;
      }
      *(void *)(v28 + 16) = v31;
      uint64_t v32 = *(unsigned __int8 *)(v6 + 80);
      unint64_t v36 = v28;
      outlined init with take of (ToolbarStorage.Entry, Int)(v35, v28 + ((v32 + 32) & ~v32) + v30 * v25, type metadata accessor for ToolbarStorage.Entry);
    }
    else
    {
      outlined destroy of ToolbarStorage.Entry((uint64_t)v13, type metadata accessor for ToolbarStorage.Entry);
    }
  }
  int64_t v24 = v14 + 1;
  if (v14 + 1 >= v38) {
    goto LABEL_32;
  }
  unint64_t v23 = *(void *)(v37 + 8 * v24);
  if (v23) {
    goto LABEL_17;
  }
  int64_t v24 = v14 + 2;
  if (v14 + 2 >= v38) {
    goto LABEL_32;
  }
  unint64_t v23 = *(void *)(v37 + 8 * v24);
  if (v23) {
    goto LABEL_17;
  }
  int64_t v24 = v14 + 3;
  if (v14 + 3 >= v38) {
    goto LABEL_32;
  }
  unint64_t v23 = *(void *)(v37 + 8 * v24);
  if (v23) {
    goto LABEL_17;
  }
  int64_t v24 = v14 + 4;
  if (v14 + 4 >= v38) {
    goto LABEL_32;
  }
  unint64_t v23 = *(void *)(v37 + 8 * v24);
  if (v23)
  {
LABEL_17:
    int64_t v14 = v24;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v14 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v14 >= v38) {
      goto LABEL_32;
    }
    unint64_t v23 = *(void *)(v37 + 8 * v14);
    ++v24;
    if (v23) {
      goto LABEL_18;
    }
  }
LABEL_34:
  __break(1u);
}

uint64_t specialized ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v17 = MEMORY[0x1E4FBC870];
  __int16 v18 = 0;
  char v19 = 0;
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v15);
  uint64_t v5 = &v2[direct field offset for ToolbarBridge.lastEnvironment];
  swift_beginAccess();
  uint64_t v6 = *((void *)v5 + 1);
  EnvironmentValues.horizontalSizeClass.getter();
  v15[80] = v12[0];
  v14[1] = v6;
  EnvironmentValues.verticalSizeClass.getter();
  swift_endAccess();
  v15[81] = v12[0];
  v14[0] = a1;
  PreferenceValues.subscript.getter();
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(*(uint64_t *)&v13[1], *((uint64_t *)&v13[1] + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1E4FBC860];
  specialized Set.formUnion<A>(_:)(MEMORY[0x1E4FBC860]);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v16 = v7;
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v15, (uint64_t)v13);
  uint64_t v8 = (uint64_t)v3 + direct field offset for ToolbarBridge.updateContext;
  swift_beginAccess();
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v13, v8);
  swift_endAccess();
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v15, (uint64_t)v14);
  memset((char *)v13 + 8, 0, 96);
  *(void *)&v13[0] = v3;
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v14, (uint64_t)v12);
  uint64_t v9 = v3;
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v12, (uint64_t)v13 + 8);
  specialized closure #1 in ToolbarBridge.preferencesDidChange(_:context:)((char *)v13, v9, a1, (uint64_t)&v17, v15);
  outlined destroy of EmptyToolbarStrategy((uint64_t)v13);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v14);
  uint64_t v10 = v17;
  memset(v13, 0, 96);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v13, v8);
  swift_endAccess();
  outlined destroy of Toolbar.UpdateContext((uint64_t)v15);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized ToolbarStrategy.makeBarContext(storage:preferences:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = MEMORY[0x1E4FBB1A0];
  outlined init with take of ToolbarStorage.Entry.ID?(a1, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0]);
  outlined init with take of ToolbarStorage.Entry.ID?((uint64_t)v20, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for String?, v6);
  BOOL v18 = v22 != 0;
  *(_DWORD *)char v19 = 0x1000000;
  *(_WORD *)&v19[4] = 1;
  uint64_t v7 = *v3;
  if (*v3)
  {
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0((uint64_t)(v3 + 1), (uint64_t)v15, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v16)
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v15, (uint64_t)v17);
      id v8 = v7;
      specialized closure #1 in ToolbarStrategy.makeBarContext(storage:preferences:)((uint64_t)v8, (uint64_t)v17, (uint64_t)&v18, a2);

      uint64_t result = outlined destroy of Toolbar.UpdateContext((uint64_t)v17);
      char v10 = v19[0];
      char v11 = v19[1];
      char v12 = v19[2];
      __int16 v13 = *(_WORD *)&v19[3];
      char v14 = v19[5];
      *(unsigned char *)a3 = v18;
      *(unsigned char *)(a3 + 1) = v10;
      *(unsigned char *)(a3 + 2) = v11;
      *(unsigned char *)(a3 + 3) = v12;
      *(_WORD *)(a3 + 4) = v13;
      *(unsigned char *)(a3 + 6) = v14;
      return result;
    }
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v15, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, MEMORY[0x1E4FBB718]);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in ToolbarStrategy.makeBarContext(storage:preferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_WORD *)(a3 + 4) = *(_WORD *)(a2 + 80);
  uint64_t v7 = MEMORY[0x18C119DF0](a2 + 64);
  if (v7)
  {
    id v8 = (void *)v7;
    if (UIViewController.hasOrWillHaveBackItem(overrides:)(a2))
    {
      char v9 = 1;
LABEL_9:

      goto LABEL_10;
    }
    id v10 = objc_msgSend(v8, sel_navigationItem);
    id v11 = objc_msgSend(v10, sel_leftBarButtonItems);

    if (!v11)
    {
      char v9 = 0;
      goto LABEL_9;
    }
    type metadata accessor for UIBarButtonItem();
    unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    __int16 v13 = specialized Sequence.first(where:)(v12);
    swift_bridgeObjectRelease();

    if (v13)
    {
      char v9 = 1;
      id v8 = v13;
      goto LABEL_9;
    }
  }
  char v9 = 0;
LABEL_10:
  *(unsigned char *)(a3 + 2) = v9;
  v41[0] = a4;
  PreferenceValues.subscript.getter();
  uint64_t v32 = a3;
  *(unsigned char *)(a3 + 1) = v42[0];
  uint64_t v14 = swift_bridgeObjectRetain();
  uint64_t v15 = specialized Sequence.compactMap<A>(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v16 = specialized Set.init<A>(_:)((uint64_t)v15);
  swift_bridgeObjectRelease();
  uint64_t v17 = v16 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & *(void *)(v16 + 56);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v23 = 0;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_35;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v26 >= v21) {
      goto LABEL_40;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v21) {
        goto LABEL_40;
      }
      unint64_t v27 = *(void *)(v17 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v21) {
          goto LABEL_40;
        }
        unint64_t v27 = *(void *)(v17 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v21) {
            goto LABEL_40;
          }
          unint64_t v27 = *(void *)(v17 + 8 * v23);
          if (!v27)
          {
            int64_t v23 = v26 + 4;
            if (v26 + 4 >= v21) {
              goto LABEL_40;
            }
            unint64_t v27 = *(void *)(v17 + 8 * v23);
            if (!v27)
            {
              int64_t v23 = v26 + 5;
              if (v26 + 5 >= v21) {
                goto LABEL_40;
              }
              unint64_t v27 = *(void *)(v17 + 8 * v23);
              if (!v27) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_34:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_35:
    outlined init with copy of ToolbarItemPlacement.Role(*(void *)(v16 + 48) + 48 * v25, (uint64_t)v42);
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v42, (uint64_t)v41);
    uint64_t v37 = 6;
    long long v38 = 0u;
    long long v39 = 0u;
    char v40 = 2;
    char v29 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v41, (uint64_t)&v37);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v37);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v41, (uint64_t)&v37);
    if (v29)
    {
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v37);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v41);
LABEL_39:
      swift_release();
      uint64_t result = swift_bridgeObjectRelease();
      char v31 = 1;
LABEL_41:
      *(unsigned char *)(v32 + 3) = v31;
      return result;
    }
    uint64_t v33 = 22;
    long long v34 = 0u;
    long long v35 = 0u;
    char v36 = 2;
    char v30 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)&v37, (uint64_t)&v33);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v33);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v37);
    uint64_t result = outlined destroy of ToolbarItemPlacement.Role((uint64_t)v41);
    if (v30) {
      goto LABEL_39;
    }
  }
  int64_t v28 = v26 + 6;
  if (v28 >= v21)
  {
LABEL_40:
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    char v31 = 0;
    goto LABEL_41;
  }
  unint64_t v27 = *(void *)(v17 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_34;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v21) {
      goto LABEL_40;
    }
    unint64_t v27 = *(void *)(v17 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_34;
    }
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(char *a1, char *a2, uint64_t a3, uint64_t a4, char *a5)
{
  char v40 = a1;
  unint64_t v41 = a5;
  id v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3FD10];
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for PreferenceValues.Value<ToolbarStorage.NavigationProperties?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.NavigationProperties?, MEMORY[0x1E4F3FD10]);
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v38 - v11;
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for PreferenceValues.Value<ToolbarStorage.SearchItem?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.SearchItem?, v8);
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v38 - v15;
  uint64_t v17 = &a2[direct field offset for ToolbarBridge.adaptorTracker];
  swift_beginAccess();
  uint64_t v18 = a2;
  specialized VersionSeedTracker.didChange(_:action:)(a3, v17, (uint64_t)v18, a4);
  swift_endAccess();

  uint64_t v19 = *(void *)&v18[direct field offset for ToolbarBridge.navigationAdaptor];
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v42 = v10;
  uint64_t v43 = a3;
  if (!v20) {
    goto LABEL_5;
  }
  long long v38 = v12;
  uint64_t v39 = a4;
  uint64_t v21 = v19 + 32;
  swift_bridgeObjectRetain();
  char v22 = 0;
  do
  {
    outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v21, (uint64_t)v48);
    outlined init with copy of TableColumnList((uint64_t)v48, (uint64_t)v45);
    outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v48);
    uint64_t v23 = v46;
    uint64_t v24 = v47;
    __swift_project_boxed_opaque_existential_1(v45, v46);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v24 + 8))(&v44, v23, v24);
    v22 |= v44;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
    v21 += 48;
    --v20;
  }
  while (v20);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v12 = v38;
  a4 = v39;
  if ((v22 & 2) == 0)
  {
LABEL_5:
    int64_t v26 = &v18[direct field offset for ToolbarBridge.searchTracker];
    swift_beginAccess();
    uint64_t v27 = v43;
    v45[0] = v43;
    PreferenceValues.subscript.getter();
    int v28 = *(_DWORD *)&v16[*(int *)(v14 + 28)];
    if (*(_DWORD *)v26 == -1 || v28 == -1 || *(_DWORD *)v26 != v28)
    {
      *(_DWORD *)int64_t v26 = v28;
      uint64_t v31 = (uint64_t)&v18[direct field offset for ToolbarBridge.searchItem];
      swift_beginAccess();
      outlined assign with copy of ToolbarStorage.SearchItem?((uint64_t)v16, v31, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
      swift_endAccess();
    }
    outlined destroy of ToolbarStorage.Entry?((uint64_t)v16, &lazy cache variable for type metadata for PreferenceValues.Value<ToolbarStorage.SearchItem?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.SearchItem?, MEMORY[0x1E4F3FD10]);
    uint64_t v32 = swift_endAccess();
    MEMORY[0x1F4188790](v32);
    uint64_t v33 = v40;
    *(&v38 - 6) = v18;
    *(&v38 - 5) = v33;
    long long v34 = v41;
    *(&v38 - 4) = (char *)v27;
    *(&v38 - 3) = v34;
    *(&v38 - 2) = (char *)a4;
    swift_beginAccess();
    specialized VersionSeedTracker.didChange(_:action:)(v27, (void (*)(void *))partial apply for specialized closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:));
    swift_endAccess();
    long long v35 = &v18[direct field offset for ToolbarBridge.titleTracker];
    swift_beginAccess();
    v45[0] = v27;
    PreferenceValues.subscript.getter();
    int v36 = *(_DWORD *)&v12[*(int *)(v42 + 28)];
    if (*(_DWORD *)v35 == -1 || v36 == -1 || *(_DWORD *)v35 != v36)
    {
      *(_DWORD *)long long v35 = v36;
      uint64_t v37 = (uint64_t)&v18[direct field offset for ToolbarBridge.navigationProperties];
      swift_beginAccess();
      outlined assign with copy of ToolbarStorage.SearchItem?((uint64_t)v12, v37, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
      swift_endAccess();
      *(unsigned char *)(a4 + 10) = 0;
    }
    outlined destroy of ToolbarStorage.Entry?((uint64_t)v12, &lazy cache variable for type metadata for PreferenceValues.Value<ToolbarStorage.NavigationProperties?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.NavigationProperties?, MEMORY[0x1E4F3FD10]);
    return swift_endAccess();
  }
  return result;
}

uint64_t specialized closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(unsigned char *)(a1 + 48) & 1;
  uint64_t v12 = a2 + direct field offset for ToolbarBridge.toolbarStorage;
  uint64_t v13 = *(void *)(a2 + direct field offset for ToolbarBridge.toolbarStorage);
  uint64_t v14 = *(void *)(a2 + direct field offset for ToolbarBridge.toolbarStorage + 8);
  uint64_t v15 = *(void *)(a2 + direct field offset for ToolbarBridge.toolbarStorage + 16);
  uint64_t v16 = *(void *)(a2 + direct field offset for ToolbarBridge.toolbarStorage + 24);
  uint64_t v17 = *(void *)(a2 + direct field offset for ToolbarBridge.toolbarStorage + 32);
  uint64_t v18 = *(void *)(a2 + direct field offset for ToolbarBridge.toolbarStorage + 40);
  long long v19 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a1;
  *(_OWORD *)(v12 + 16) = v19;
  *(void *)(v12 + 32) = v8;
  *(void *)(v12 + 40) = v9;
  *(void *)(v12 + 48) = v11;
  *(void *)(v12 + 56) = v10;
  outlined retain of ToolbarStorage(a1);
  uint64_t v20 = v13;
  uint64_t v21 = a2;
  outlined consume of ToolbarStorage?(v20, v14, v15, v16, v17, v18);
  specialized ToolbarStrategy.makeBarContext(storage:preferences:)(a1, a4, (uint64_t)&v75);
  uint64_t v22 = v75;
  uint64_t v23 = v79;
  uint64_t v24 = v80;
  int v25 = v81;
  int v65 = v76;
  uint64_t v26 = 256;
  if (!v76) {
    uint64_t v26 = 0;
  }
  uint64_t v27 = v26 | v75;
  int v61 = v78;
  int v62 = v77;
  uint64_t v28 = 0x10000;
  if (!v77) {
    uint64_t v28 = 0;
  }
  uint64_t v29 = 0x1000000;
  if (!v78) {
    uint64_t v29 = 0;
  }
  uint64_t v30 = v27 | v28 | v29;
  unint64_t v31 = v30 | ((unint64_t)v79 << 32) | ((unint64_t)v80 << 40);
  BOOL v32 = v81 != 0;
  uint64_t v33 = v21 + direct field offset for ToolbarBridge.lastBarContext;
  *(_DWORD *)uint64_t v33 = v30;
  *(_WORD *)(v33 + 4) = WORD2(v31);
  *(unsigned char *)(v33 + 6) = BYTE6(v31) | v32;
  outlined init with copy of Toolbar.UpdateContext(a5, (uint64_t)&v75);
  unint64_t v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  long long v35 = *(_OWORD *)(a1 + 16);
  long long v71 = *(_OWORD *)a1;
  long long v72 = v35;
  long long v36 = *(_OWORD *)(a1 + 48);
  long long v73 = *(_OWORD *)(a1 + 32);
  long long v74 = v36;
  outlined retain of ToolbarStorage(a1);
  ToolbarStorage.removeRequestedDefaultItems()();
  *(void *)&v82[0] = specialized static Toolbar.BarLocation.allCases.getter();
  uint64_t v37 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v37);
  uint64_t v38 = *(void *)(*(void *)&v82[0] + 16);
  if (v38)
  {
    uint64_t v68 = v21;
    uint64_t v39 = (uint64_t *)(v21 + direct field offset for ToolbarBridge.allowedLocations);
    uint64_t v40 = v22;
    uint64_t v41 = *(void *)&v82[0] + 32;
    swift_beginAccess();
    uint64_t v42 = 0x1000000000000;
    if (!v25) {
      uint64_t v42 = 0;
    }
    uint64_t v43 = v42 | (v24 << 40) | (v23 << 32);
    uint64_t v44 = 0x1000000;
    if (!v61) {
      uint64_t v44 = 0;
    }
    uint64_t v45 = 0x10000;
    if (!v62) {
      uint64_t v45 = 0;
    }
    uint64_t v46 = v44 | v45;
    uint64_t v47 = 256;
    if (!v65) {
      uint64_t v47 = 0;
    }
    unint64_t v66 = v43 | v46 | v47 | v40;
    do
    {
      outlined init with copy of Toolbar.BarLocation(v41, (uint64_t)v70);
      uint64_t v48 = *v39;
      swift_bridgeObjectRetain();
      char v49 = specialized Set.contains(_:)((uint64_t)v70, v48);
      swift_bridgeObjectRelease();
      if (v49)
      {
        v82[0] = v71;
        v82[1] = v72;
        v82[2] = v73;
        v82[3] = v74;
        outlined retain of ToolbarStorage((uint64_t)v82);
        uint64_t v50 = specialized ToolbarBridge.filterAndSortMatchingItems(in:newStorage:context:)((uint64_t)v70, (uint64_t)v82, v66);
        outlined release of ToolbarStorage((uint64_t)v82);
        uint64_t v51 = specialized ToolbarStrategy.makeEntries(in:from:)(v70, v50);
        long long v52 = specialized ToolbarBridge.makeStorage(in:from:strategy:)((uint64_t)v70, v51);
        uint64_t v54 = v53;
        uint64_t v56 = v55;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined init with copy of Toolbar.BarLocation((uint64_t)v70, (uint64_t)v69);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v52, v54, v56, (uint64_t)v69, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        outlined destroy of Toolbar.BarLocation((uint64_t)v69);
      }
      outlined destroy of Toolbar.BarLocation((uint64_t)v70);
      v41 += 40;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
    uint64_t v21 = v68;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  long long v58 = v72;
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v58, *((uint64_t *)&v58 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v59 = (unint64_t *)(v21 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  *uint64_t v59 = v34;
  swift_bridgeObjectRelease();
  outlined destroy of Toolbar.UpdateContext((uint64_t)&v75);
  *(void *)a6 = MEMORY[0x1E4FBC870];
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(a6 + 8) = 1;
  return result;
}

char *specialized ToolbarBridge.makeStorage(in:from:strategy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v147 = a2;
  uint64_t v151 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v151 - 8);
  MEMORY[0x1F4188790](v151);
  uint64_t v150 = (char *)&v146 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v176);
  uint64_t v173 = (uint64_t)&v146 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  v180 = (char *)&v146 - v8;
  uint64_t v9 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v170 = (uint64_t)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v169 = (uint64_t)&v146 - v12;
  uint64_t v183 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v186 = *(void *)(v183 - 8);
  MEMORY[0x1F4188790](v183);
  uint64_t v14 = (char *)&v146 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v174 = (uint64_t)&v146 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v188 = (uint64_t)&v146 - v18;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v146 - v20;
  uint64_t v184 = a1;
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)v195);
  uint64_t v22 = (uint64_t *)(v2 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  uint64_t v23 = *v22;
  if (*(void *)(v23 + 16) && (uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v195), (v25 & 1) != 0))
  {
    uint64_t v26 = (uint64_t *)(*(void *)(v23 + 56) + 24 * v24);
    uint64_t v28 = *v26;
    unint64_t v27 = v26[1];
    unint64_t v29 = v26[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v28 = MEMORY[0x1E4FBC860];
    unint64_t v27 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    unint64_t v29 = specialized Dictionary.init(dictionaryLiteral:)(v28);
  }
  swift_endAccess();
  outlined destroy of Toolbar.BarLocation((uint64_t)v195);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = specialized Sequence.compactMap<A>(_:)(v28, v27);
  swift_bridgeObjectRelease();
  unint64_t v166 = v29;
  swift_bridgeObjectRelease();
  unint64_t v146 = v27;
  swift_bridgeObjectRelease();
  uint64_t v31 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV5EntryVG_AJ2IDVs5NeverOTg503_s7d4UI13f115BridgeC11makeStorage33_558B6B1E48F37C8B0E16B128287879E02in4from8strategyAA0C0O08LocationF0VAJ03BarS0O_SayAA0cF0V5H66VGxtFAR2IDVARcfu0_33_2e12c960fb4b0a3abd8a514624e1a4d3ArUTf3nnnpk_nTf1cn_n(v147);
  uint64_t v32 = MEMORY[0x1E4FBC860];
  v195[0] = MEMORY[0x1E4FBC860];
  specialized CollectionChanges.formChanges<A, B>(from:to:)((uint64_t)v30, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v33 = v195[0];
  memset(v195, 0, sizeof(v195));
  long long v196 = xmmword_188382680;
  char v34 = specialized static Toolbar.BarLocation.== infix(_:_:)(v184, (uint64_t)v195);
  outlined destroy of Toolbar.BarLocation((uint64_t)v195);
  unint64_t v189 = specialized Dictionary.init(dictionaryLiteral:)(v32);
  unint64_t v155 = specialized Dictionary.init(dictionaryLiteral:)(v32);
  uint64_t v35 = *(void *)(v33 + 16);
  if (!v35)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v38 = (char *)MEMORY[0x1E4FBC860];
    goto LABEL_182;
  }
  uint64_t v167 = v28;
  if (v34) {
    char v36 = 0;
  }
  else {
    char v36 = 2;
  }
  uint64_t v156 = v33 + 32;
  v185 = &v197;
  uint64_t v158 = v35;
  uint64_t v172 = v35 - 1;
  uint64_t v149 = (void (**)(char *, uint64_t))(v4 + 8);
  uint64_t v157 = v33;
  swift_bridgeObjectRetain();
  unint64_t v37 = 0;
  uint64_t v38 = (char *)MEMORY[0x1E4FBC860];
  long long v182 = xmmword_18838AA10;
  unint64_t v168 = 0x800000018833CF90;
  uint64_t v39 = (uint64_t)v180;
  v161 = v14;
  v181 = v21;
LABEL_14:
  if (v37 >= *(void *)(v157 + 16)) {
    goto LABEL_196;
  }
  uint64_t v41 = v156 + 40 * v37;
  int v42 = *(unsigned __int8 *)(v41 + 32);
  if (!*(unsigned char *)(v41 + 32)) {
    goto LABEL_12;
  }
  int64_t v44 = *(void *)v41;
  int64_t v43 = *(void *)(v41 + 8);
  int64_t v187 = v43;
  if (v42 != 1)
  {
    uint64_t v82 = *(void *)(v41 + 16);
    uint64_t v81 = *(void *)(v41 + 24);
    int64_t v171 = v82;
    char v203 = 0;
    if (v44 == v43) {
      goto LABEL_11;
    }
    if (v43 < v44)
    {
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
      goto LABEL_203;
    }
    if (v44 >= v43)
    {
LABEL_203:
      __break(1u);
      goto LABEL_204;
    }
    uint64_t v83 = v81 - v171;
    if (v81 == v171)
    {
LABEL_11:
      uint64_t v39 = (uint64_t)v180;
LABEL_12:
      uint64_t v40 = v158;
      goto LABEL_13;
    }
    if (v81 <= v171)
    {
LABEL_204:
      __break(1u);
LABEL_205:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
LABEL_206:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      JUMPOUT(0x187F72A0CLL);
    }
    uint64_t v84 = 0;
    uint64_t v85 = 0;
    uint64_t v164 = v147 + ((*(unsigned __int8 *)(v186 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80));
    unint64_t v86 = *(void *)(v147 + 16);
    int64_t v160 = v43 - 1;
    uint64_t v163 = v167 + 16 * v44;
    BOOL v87 = v86 >= v171;
    unint64_t v88 = v86 - v171;
    if (!v87) {
      unint64_t v88 = 0;
    }
    unint64_t v165 = v88;
    uint64_t v179 = -v171;
    uint64_t v162 = 16 * v171;
    uint64_t v148 = v83 - 1;
    uint64_t v159 = v83;
    unint64_t v175 = v37;
    while (1)
    {
      if (v83 == v85) {
        goto LABEL_188;
      }
      uint64_t v199 = 0;
      uint64_t v200 = 0;
      uint64_t v201 = 0;
      long long v202 = v182;
      outlined init with copy of Toolbar.BarLocation(v184, (uint64_t)v195);
      outlined init with copy of Toolbar.BarLocation((uint64_t)&v199, (uint64_t)v185);
      switch((uint64_t)v196)
      {
        case 0:
          if (!v198) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 1:
          if (v198 == 1) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 2:
          if (v198 == 2) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 3:
          if (v198 == 3) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 4:
          if (v198 == 4) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 5:
          if (v198 == 5) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 6:
          if (v198 == 6) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 7:
          if (v198 == 7) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 8:
          if (v198 == 8) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 9:
          if (v198 == 9) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 10:
          if (v198 == 10) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 11:
          if (v198 == 11) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 12:
          if (v198 == 12) {
            goto LABEL_135;
          }
          goto LABEL_131;
        case 13:
          if (v198 != 13) {
            goto LABEL_131;
          }
          goto LABEL_135;
        case 14:
          if (v198 == 14) {
            goto LABEL_135;
          }
          goto LABEL_131;
        default:
          outlined init with copy of Toolbar.BarLocation((uint64_t)v195, (uint64_t)v194);
          if (v198 < 0xF)
          {
            outlined destroy of AnyHashable((uint64_t)v194);
LABEL_131:
            outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v195, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
LABEL_132:
            outlined destroy of Toolbar.BarLocation((uint64_t)&v199);
            if (v44 < 0) {
              goto LABEL_189;
            }
            goto LABEL_141;
          }
          long long v89 = *((_OWORD *)v185 + 1);
          long long v191 = *(_OWORD *)v185;
          long long v192 = v89;
          uint64_t v193 = *((void *)v185 + 4);
          char v90 = MEMORY[0x18C1174E0](v194, &v191);
          outlined destroy of AnyHashable((uint64_t)&v191);
          outlined destroy of AnyHashable((uint64_t)v194);
          if ((v90 & 1) == 0)
          {
            outlined destroy of Toolbar.BarLocation((uint64_t)v195);
            goto LABEL_132;
          }
LABEL_135:
          outlined destroy of Toolbar.BarLocation((uint64_t)v195);
          outlined destroy of Toolbar.BarLocation((uint64_t)&v199);
          if (v148 == v85) {
            char v91 = 1;
          }
          else {
            char v91 = v36;
          }
          if (v37 == v172) {
            char v36 = v91;
          }
          if (v44 < 0) {
            goto LABEL_189;
          }
LABEL_141:
          if ((unint64_t)(v44 + v85) >= *(void *)(v167 + 16)) {
            goto LABEL_190;
          }
          if (v165 == v85) {
            goto LABEL_191;
          }
          int64_t v177 = v44 + v85;
          unint64_t v92 = v171 + v85;
          uint64_t v190 = v84;
          uint64_t v94 = *(void *)(v163 + v84 + 32);
          uint64_t v93 = *(void *)(v163 + v84 + 40);
          uint64_t v178 = *(void *)(v186 + 72);
          uint64_t v95 = v174;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v164 + v178 * (v171 + v85), v174, type metadata accessor for ToolbarStorage.Entry);
          *(unsigned char *)(v95 + *(int *)(v183 + 20)) = v36;
          unint64_t v96 = v166;
          uint64_t v97 = *(void *)(v166 + 16);
          swift_bridgeObjectRetain();
          if (v97)
          {
            swift_bridgeObjectRetain();
            unint64_t v98 = specialized __RawDictionaryStorage.find<A>(_:)(v94, v93);
            if (v99)
            {
              uint64_t v153 = v38;
              uint64_t v100 = *(void *)(v96 + 56) + 16 * v98;
              char v101 = *(unsigned char *)(v100 + 8);
              id v154 = *(id *)v100;
              id v102 = v154;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRetain();
              id v152 = v102;
              unint64_t v103 = v155;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v195[0] = v103;
              uint64_t v105 = v94;
              unint64_t v107 = specialized __RawDictionaryStorage.find<A>(_:)(v94, v93);
              uint64_t v108 = *(void *)(v103 + 16);
              BOOL v109 = (v106 & 1) == 0;
              uint64_t v110 = v108 + v109;
              if (__OFADD__(v108, v109)) {
                goto LABEL_198;
              }
              char v111 = v106;
              if (*(void *)(v103 + 24) >= v110)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  specialized _NativeDictionary.copy()();
                }
              }
              else
              {
                specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v110, isUniquelyReferenced_nonNull_native);
                unint64_t v112 = specialized __RawDictionaryStorage.find<A>(_:)(v105, v93);
                if ((v111 & 1) != (v113 & 1)) {
                  goto LABEL_206;
                }
                unint64_t v107 = v112;
              }
              id v114 = v154;
              unint64_t v115 = (void *)v195[0];
              unint64_t v155 = v195[0];
              if (v111)
              {
                uint64_t v116 = *(void *)(v195[0] + 56) + 16 * v107;

                *(void *)uint64_t v116 = v114;
                *(unsigned char *)(v116 + 8) = v101;
                uint64_t v94 = v105;
              }
              else
              {
                *(void *)(v195[0] + 8 * (v107 >> 6) + 64) |= 1 << v107;
                Swift::String v117 = (uint64_t *)(v115[6] + 16 * v107);
                *Swift::String v117 = v105;
                v117[1] = v93;
                uint64_t v118 = v115[7] + 16 * v107;
                *(void *)uint64_t v118 = v114;
                *(unsigned char *)(v118 + 8) = v101;
                uint64_t v119 = v115[2];
                BOOL v79 = __OFADD__(v119, 1);
                uint64_t v120 = v119 + 1;
                if (v79) {
                  goto LABEL_199;
                }
                uint64_t v94 = v105;
                v115[2] = v120;
                swift_bridgeObjectRetain();
              }

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v38 = v153;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
          uint64_t v121 = v190;
          unint64_t v122 = *((void *)v38 + 2);
          if (v122 < v92) {
            goto LABEL_192;
          }
          swift_bridgeObjectRetain();
          int v123 = (char *)swift_isUniquelyReferenced_nonNull_native();
          if (!v123 || v122 >= *((void *)v38 + 3) >> 1) {
            uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v123, v122 + 1, 1, v38);
          }
          unint64_t v124 = v44;
          Swift::String v125 = &v38[v162 + v121];
          unint64_t v126 = (uint64_t *)(v125 + 32);
          swift_arrayDestroy();
          uint64_t v127 = v179 + *((void *)v38 + 2);
          if (v127 < 0) {
            goto LABEL_205;
          }
          memmove(v125 + 48, v126, 16 * v127);
          unint64_t v128 = v38;
          ++*((void *)v38 + 2);
          *unint64_t v126 = v94;
          *((void *)v125 + 5) = v93;
          uint64_t v129 = (uint64_t)v161;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v174, (uint64_t)v161, type metadata accessor for ToolbarStorage.Entry);
          unint64_t v130 = v189;
          int v131 = swift_isUniquelyReferenced_nonNull_native();
          v195[0] = v130;
          uint64_t v132 = v94;
          unint64_t v134 = specialized __RawDictionaryStorage.find<A>(_:)(v94, v93);
          uint64_t v135 = *(void *)(v130 + 16);
          BOOL v136 = (v133 & 1) == 0;
          uint64_t v137 = v135 + v136;
          if (__OFADD__(v135, v136)) {
            goto LABEL_193;
          }
          char v138 = v133;
          if (*(void *)(v130 + 24) >= v137)
          {
            if ((v131 & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v137, v131);
            unint64_t v139 = specialized __RawDictionaryStorage.find<A>(_:)(v132, v93);
            if ((v138 & 1) != (v140 & 1)) {
              goto LABEL_206;
            }
            unint64_t v134 = v139;
          }
          uint64_t v38 = v128;
          uint64_t v141 = (void *)v195[0];
          int64_t v44 = v124;
          unint64_t v189 = v195[0];
          if (v138)
          {
            outlined assign with take of ToolbarStorage.Entry(v129, *(void *)(v195[0] + 56) + v134 * v178);
          }
          else
          {
            *(void *)(v195[0] + 8 * (v134 >> 6) + 64) |= 1 << v134;
            uint64_t v142 = (uint64_t *)(v141[6] + 16 * v134);
            *uint64_t v142 = v132;
            v142[1] = v93;
            outlined init with take of (ToolbarStorage.Entry, Int)(v129, v141[7] + v134 * v178, type metadata accessor for ToolbarStorage.Entry);
            uint64_t v143 = v141[2];
            BOOL v79 = __OFADD__(v143, 1);
            uint64_t v144 = v143 + 1;
            if (v79) {
              goto LABEL_197;
            }
            v141[2] = v144;
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of ToolbarStorage.Entry(v174, type metadata accessor for ToolbarStorage.Entry);
          char v36 = 2;
          uint64_t v21 = v181;
          if ((v203 & 1) != 0 || v177 + 1 == v187)
          {
            unint64_t v37 = v175;
            goto LABEL_11;
          }
          unint64_t v37 = v175;
          if (v177 + 1 < v124) {
            goto LABEL_194;
          }
          if (v177 == v160) {
            goto LABEL_195;
          }
          ++v85;
          uint64_t v84 = v190 + 16;
          --v179;
          uint64_t v83 = v159;
          if (v159 == v85) {
            goto LABEL_11;
          }
          break;
      }
    }
  }
  uint64_t v40 = v158;
  if (v44 == v43) {
    goto LABEL_13;
  }
  if (v43 < v44) {
    goto LABEL_200;
  }
  if (v44 >= v43) {
    goto LABEL_202;
  }
  unint64_t v175 = v37;
  uint64_t v178 = v147 + ((*(unsigned __int8 *)(v186 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v186 + 80));
  unint64_t v45 = *(void *)(v147 + 16);
  if (v44 > v45) {
    unint64_t v45 = v44;
  }
  uint64_t v179 = -(uint64_t)v45;
  int64_t v46 = -v44;
  int64_t v177 = -v43;
  uint64_t v190 = 16 * v44;
  int64_t v171 = 1 - v43;
  while (2)
  {
    if (v44 >= v43)
    {
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
LABEL_187:
      __break(1u);
LABEL_188:
      __break(1u);
LABEL_189:
      __break(1u);
LABEL_190:
      __break(1u);
LABEL_191:
      __break(1u);
LABEL_192:
      __break(1u);
LABEL_193:
      __break(1u);
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
      goto LABEL_201;
    }
    uint64_t v199 = 0;
    uint64_t v200 = 0;
    uint64_t v201 = 0;
    long long v202 = v182;
    outlined init with copy of Toolbar.BarLocation(v184, (uint64_t)v195);
    outlined init with copy of Toolbar.BarLocation((uint64_t)&v199, (uint64_t)v185);
    switch((uint64_t)v196)
    {
      case 0:
        if (v198) {
          goto LABEL_58;
        }
        goto LABEL_61;
      case 1:
        if (v198 == 1) {
          goto LABEL_61;
        }
        goto LABEL_58;
      case 2:
        if (v198 == 2) {
          goto LABEL_61;
        }
        goto LABEL_58;
      case 3:
        if (v198 == 3) {
          goto LABEL_61;
        }
        goto LABEL_58;
      case 4:
        if (v198 == 4) {
          goto LABEL_61;
        }
        goto LABEL_58;
      case 5:
        if (v198 == 5) {
          goto LABEL_61;
        }
        goto LABEL_58;
      case 6:
        if (v198 == 6) {
          goto LABEL_61;
        }
        goto LABEL_58;
      case 7:
        if (v198 == 7) {
          goto LABEL_61;
        }
        goto LABEL_58;
      case 8:
        if (v198 == 8) {
          goto LABEL_61;
        }
        goto LABEL_58;
      case 9:
        if (v198 == 9) {
          goto LABEL_61;
        }
        goto LABEL_58;
      case 10:
        if (v198 != 10) {
          goto LABEL_58;
        }
        goto LABEL_61;
      case 11:
        if (v198 == 11) {
          goto LABEL_61;
        }
        goto LABEL_58;
      case 12:
        if (v198 == 12) {
          goto LABEL_61;
        }
        goto LABEL_58;
      case 13:
        if (v198 == 13) {
          goto LABEL_61;
        }
        goto LABEL_58;
      case 14:
        if (v198 == 14) {
          goto LABEL_61;
        }
        goto LABEL_58;
      default:
        outlined init with copy of Toolbar.BarLocation((uint64_t)v195, (uint64_t)v194);
        if (v198 < 0xF)
        {
          outlined destroy of AnyHashable((uint64_t)v194);
LABEL_58:
          outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v195, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
          goto LABEL_59;
        }
        long long v47 = *((_OWORD *)v185 + 1);
        long long v191 = *(_OWORD *)v185;
        long long v192 = v47;
        uint64_t v193 = *((void *)v185 + 4);
        char v48 = MEMORY[0x18C1174E0](v194, &v191);
        outlined destroy of AnyHashable((uint64_t)&v191);
        outlined destroy of AnyHashable((uint64_t)v194);
        if ((v48 & 1) == 0)
        {
          outlined destroy of Toolbar.BarLocation((uint64_t)v195);
LABEL_59:
          outlined destroy of Toolbar.BarLocation((uint64_t)&v199);
          goto LABEL_66;
        }
LABEL_61:
        outlined destroy of Toolbar.BarLocation((uint64_t)v195);
        outlined destroy of Toolbar.BarLocation((uint64_t)&v199);
        if (v171 == v46) {
          char v49 = 1;
        }
        else {
          char v49 = v36;
        }
        if (v175 == v172) {
          char v36 = v49;
        }
LABEL_66:
        if (v179 == v46) {
          goto LABEL_184;
        }
        uint64_t v50 = *(void *)(v186 + 72);
        _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v178 + v50 * v44, (uint64_t)v21, type metadata accessor for ToolbarStorage.Entry);
        v21[*(int *)(v183 + 20)] = v36;
        _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0((uint64_t)v21, v39, type metadata accessor for ToolbarStorage.Entry.Kind);
        if (swift_getEnumCaseMultiPayload())
        {
          outlined destroy of ToolbarStorage.Entry(v39, type metadata accessor for ToolbarStorage.Entry.Kind);
          uint64_t v51 = v173;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0((uint64_t)v21, v173, type metadata accessor for ToolbarStorage.Entry.Kind);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          outlined destroy of ToolbarStorage.Entry(v51, type metadata accessor for ToolbarStorage.Entry.Kind);
          if (EnumCaseMultiPayload == 2)
          {
            uint64_t v53 = 0xE600000000000000;
            uint64_t v54 = 0x686372616573;
          }
          else
          {
            MEMORY[0x18C112B90](0xD000000000000014, v168);
            uint64_t v54 = 0;
            uint64_t v53 = 0xE000000000000000;
          }
        }
        else
        {
          uint64_t v55 = v170;
          outlined init with take of (ToolbarStorage.Entry, Int)(v39, v170, type metadata accessor for ToolbarStorage.Item);
          uint64_t v56 = v169;
          outlined init with take of (ToolbarStorage.Entry, Int)(v55, v169, type metadata accessor for ToolbarStorage.Item);
          uint64_t v53 = *(void *)(v56 + 40);
          if (v53)
          {
            uint64_t v54 = *(void *)(v56 + 32);
            swift_bridgeObjectRetain();
          }
          else
          {
            Swift::String v57 = v150;
            UUID.init()();
            uint64_t v54 = UUID.uuidString.getter();
            uint64_t v53 = v58;
            (*v149)(v57, v151);
          }
          outlined destroy of ToolbarStorage.Entry(v56, type metadata accessor for ToolbarStorage.Item);
        }
        unint64_t v59 = *((void *)v38 + 2);
        if (v59 < v44) {
          goto LABEL_185;
        }
        swift_bridgeObjectRetain();
        int v60 = (char *)swift_isUniquelyReferenced_nonNull_native();
        if (!v60 || v59 >= *((void *)v38 + 3) >> 1) {
          uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v60, v59 + 1, 1, v38);
        }
        int64_t v61 = v44;
        int v62 = &v38[v190];
        Swift::String v63 = (uint64_t *)&v38[v190 + 32];
        swift_arrayDestroy();
        uint64_t v64 = v46 + *((void *)v38 + 2);
        if (v64 < 0) {
          goto LABEL_205;
        }
        memmove(v62 + 48, v63, 16 * v64);
        int v65 = v38;
        ++*((void *)v38 + 2);
        *Swift::String v63 = v54;
        *((void *)v62 + 5) = v53;
        _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0((uint64_t)v21, v188, type metadata accessor for ToolbarStorage.Entry);
        swift_bridgeObjectRetain();
        unint64_t v66 = v189;
        int v67 = swift_isUniquelyReferenced_nonNull_native();
        v195[0] = v66;
        unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v53);
        uint64_t v70 = *(void *)(v66 + 16);
        BOOL v71 = (v68 & 1) == 0;
        uint64_t v72 = v70 + v71;
        if (__OFADD__(v70, v71)) {
          goto LABEL_186;
        }
        char v73 = v68;
        if (*(void *)(v66 + 24) >= v72)
        {
          if ((v67 & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v72, v67);
          unint64_t v74 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v53);
          if ((v73 & 1) != (v75 & 1)) {
            goto LABEL_206;
          }
          unint64_t v69 = v74;
        }
        uint64_t v38 = v65;
        unsigned __int8 v76 = (void *)v195[0];
        unint64_t v189 = v195[0];
        if (v73)
        {
          outlined assign with take of ToolbarStorage.Entry(v188, *(void *)(v195[0] + 56) + v69 * v50);
        }
        else
        {
          *(void *)(v195[0] + 8 * (v69 >> 6) + 64) |= 1 << v69;
          unsigned __int8 v77 = (uint64_t *)(v76[6] + 16 * v69);
          *unsigned __int8 v77 = v54;
          v77[1] = v53;
          outlined init with take of (ToolbarStorage.Entry, Int)(v188, v76[7] + v69 * v50, type metadata accessor for ToolbarStorage.Entry);
          uint64_t v78 = v76[2];
          BOOL v79 = __OFADD__(v78, 1);
          uint64_t v80 = v78 + 1;
          if (v79) {
            goto LABEL_187;
          }
          v76[2] = v80;
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v21 = v181;
        outlined destroy of ToolbarStorage.Entry((uint64_t)v181, type metadata accessor for ToolbarStorage.Entry);
        swift_bridgeObjectRelease();
        --v46;
        v190 += 16;
        int64_t v44 = v61 + 1;
        char v36 = 2;
        uint64_t v39 = (uint64_t)v180;
        int64_t v43 = v187;
        if (v177 != v46) {
          continue;
        }
        uint64_t v40 = v158;
        unint64_t v37 = v175;
LABEL_13:
        if (++v37 != v40) {
          goto LABEL_14;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_182:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v38;
    }
  }
}

uint64_t key path getter for ToolbarStorage.Entry.id : ToolbarStorage.Entry@<X0>(uint64_t a1@<X8>)
{
  return ToolbarStorage.Entry.id.getter(a1);
}

unint64_t specialized ToolbarBridge.entries(in:)(uint64_t a1)
{
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)v9);
  uint64_t v2 = (uint64_t *)(v1 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  uint64_t v3 = *v2;
  if (*(void *)(*v2 + 16) && (uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v5 & 1) != 0))
  {
    unint64_t v6 = *(void *)(*(void *)(v3 + 56) + 24 * v4 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
    unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    specialized Dictionary.init(dictionaryLiteral:)(v7);
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Toolbar.BarLocation((uint64_t)v9);
  return v6;
}

uint64_t specialized ToolbarStrategy.makeContent(entry:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v21 - v16;
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(a1, (uint64_t)v11, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ToolbarStorage.Entry((uint64_t)v11, type metadata accessor for ToolbarStorage.Entry.Kind);
    _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(a1, (uint64_t)v8, type metadata accessor for ToolbarStorage.Entry.Kind);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    outlined destroy of ToolbarStorage.Entry((uint64_t)v8, type metadata accessor for ToolbarStorage.Entry.Kind);
    if (EnumCaseMultiPayload == 2)
    {
      return 0x686372616573;
    }
    else
    {
      MEMORY[0x18C112B90](0xD000000000000014, 0x800000018833CF90);
      return 0;
    }
  }
  else
  {
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v11, (uint64_t)v14, type metadata accessor for ToolbarStorage.Item);
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v14, (uint64_t)v17, type metadata accessor for ToolbarStorage.Item);
    if (*((void *)v17 + 5))
    {
      uint64_t v19 = *((void *)v17 + 4);
      swift_bridgeObjectRetain();
    }
    else
    {
      UUID.init()();
      uint64_t v19 = UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    outlined destroy of ToolbarStorage.Entry((uint64_t)v17, type metadata accessor for ToolbarStorage.Item);
  }
  return v19;
}

uint64_t static ToolbarReader._makeView(view:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  char v49 = a7;
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  unint64_t v68 = a3;
  uint64_t v69 = a4;
  uint64_t v47 = a4;
  uint64_t v70 = a5;
  *(void *)&long long v71 = a6;
  uint64_t v48 = a6;
  uint64_t v11 = type metadata accessor for ToolbarReader.ToolbarConfiguration();
  unint64_t v46 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v45 = (uint64_t)v44 - v12;
  LODWORD(v50) = *a1;
  LODWORD(v12) = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  int v16 = *(_DWORD *)(a2 + 80);
  unint64_t v68 = *(void *)a2;
  uint64_t v70 = v13;
  long long v71 = *(_OWORD *)(a2 + 24);
  uint64_t v72 = v15;
  uint64_t v73 = v14;
  long long v74 = *(_OWORD *)(a2 + 56);
  uint64_t v75 = *(void *)(a2 + 72);
  uint64_t v17 = a3;
  LODWORD(v69) = v12;
  int v76 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  PreferenceKeys.add(_:)();
  uint64_t v53 = a5;
  if (static ToolbarEdges.contains(_:)(0, a3, a5)) {
    PreferenceKeys.add(_:)();
  }
  if (static ToolbarEdges.contains(_:)(1, a3, v53)) {
    PreferenceKeys.add(_:)();
  }
  PreferenceValueAttribute.init(source:)();
  unint64_t v64 = v55;
  LOBYTE(v65) = v56;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  uint64_t v18 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F40DB8];
  type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(0, &lazy cache variable for type metadata for PreferenceValueAttribute<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F40DB8]);
  lazy protocol witness table accessor for type PreferenceValueAttribute<ToolbarKey> and conformance PreferenceValueAttribute<A>();
  unsigned int v52 = Attribute.init<A>(body:value:flags:update:)();
  PreferenceValueAttribute.init(source:)();
  unint64_t v64 = v55;
  LOBYTE(v65) = v56;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(0, &lazy cache variable for type metadata for PreferenceValueAttribute<SearchKey>, (uint64_t)&type metadata for SearchKey, (uint64_t)&protocol witness table for SearchKey, v18);
  lazy protocol witness table accessor for type PreferenceValueAttribute<SearchKey> and conformance PreferenceValueAttribute<A>();
  unsigned int v51 = Attribute.init<A>(body:value:flags:update:)();
  PreferenceValueAttribute.init(source:)();
  unint64_t v64 = v55;
  LOBYTE(v65) = v56;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(0, (unint64_t *)&lazy cache variable for type metadata for PreferenceValueAttribute<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey, v18);
  lazy protocol witness table accessor for type PreferenceValueAttribute<NavigationBarAppearanceKey> and conformance PreferenceValueAttribute<A>();
  int v19 = Attribute.init<A>(body:value:flags:update:)();
  PreferenceValueAttribute.init(source:)();
  unint64_t v64 = v55;
  LOBYTE(v65) = v56;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(0, &lazy cache variable for type metadata for PreferenceValueAttribute<BottomBarAppearanceKey>, (uint64_t)&type metadata for BottomBarAppearanceKey, (uint64_t)&protocol witness table for BottomBarAppearanceKey, v18);
  lazy protocol witness table accessor for type PreferenceValueAttribute<BottomBarAppearanceKey> and conformance PreferenceValueAttribute<A>();
  unsigned int v20 = Attribute.init<A>(body:value:flags:update:)();
  uint64_t v21 = v45;
  uint64_t v22 = v47;
  uint64_t v23 = v48;
  unint64_t v24 = ToolbarReader.ToolbarConfiguration.init()(v45);
  MEMORY[0x1F4188790](v24);
  *(void *)&v44[-4] = v11;
  uint64_t v25 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v21, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)&v44[-8], v11, MEMORY[0x1E4FBC248], v25, MEMORY[0x1E4FBC278], v26);
  (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v21, v11);
  unsigned int v27 = v55;
  LODWORD(v46) = v55;
  type metadata accessor for ViewGraph();
  MEMORY[0x18C114840]();
  UpdateCycleDetector.init()();
  int v28 = v65;
  LOBYTE(v21) = BYTE4(v65);
  unint64_t v55 = __PAIR64__(v52, v27);
  unint64_t v56 = __PAIR64__(v20, v51);
  v44[3] = v20;
  LODWORD(v45) = v19;
  LODWORD(v57) = v19;
  swift_weakInit();
  uint64_t v29 = swift_release();
  *((void *)&v58 + 1) = v64;
  LODWORD(v59) = v28;
  BYTE4(v59) = v21;
  MEMORY[0x1F4188790](v29);
  unint64_t v64 = v17;
  unint64_t v65 = v22;
  uint64_t v30 = v53;
  uint64_t v66 = v53;
  uint64_t v67 = v23;
  uint64_t v31 = type metadata accessor for ToolbarReader.ApplyUpdatesToExternalTarget();
  *(void *)&v44[-4] = v31;
  *(void *)&v44[-2] = swift_getWitnessTable();
  type metadata accessor for ToolbarStorage.Entry.ID?(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v55, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)&v44[-8], v31, MEMORY[0x1E4FBC248], v32, MEMORY[0x1E4FBC278], v33);
  (*(void (**)(unint64_t *, uint64_t))(*(void *)(v31 - 8) + 8))(&v55, v31);
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  LODWORD(v64) = v50;
  unint64_t v55 = v17;
  unint64_t v56 = v22;
  uint64_t v57 = v30;
  *(void *)&long long v58 = v23;
  type metadata accessor for ToolbarReader();
  type metadata accessor for _GraphValue();
  uint64_t v34 = _GraphValue.value.getter();
  unint64_t v64 = __PAIR64__(v34, v46);
  MEMORY[0x1F4188790](v34);
  unint64_t v55 = v17;
  unint64_t v56 = v22;
  uint64_t v57 = v30;
  *(void *)&long long v58 = v23;
  *(void *)&v44[-8] = type metadata accessor for ToolbarReader.PrimitiveReader();
  unint64_t v55 = v17;
  unint64_t v56 = v22;
  uint64_t v57 = v30;
  *(void *)&long long v58 = v23;
  uint64_t PrimitiveReader = type metadata accessor for ToolbarReader.MakePrimitiveReader();
  *(void *)&v44[-6] = PrimitiveReader;
  *(void *)&v44[-4] = swift_getWitnessTable();
  uint64_t v36 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v64, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)&v44[-12], PrimitiveReader, MEMORY[0x1E4FBC248], v36, MEMORY[0x1E4FBC278], v37);
  _GraphValue.init(_:)();
  unint64_t v46 = v68;
  unint64_t v55 = v68;
  LODWORD(v56) = v69;
  uint64_t v50 = v70;
  uint64_t v57 = v70;
  long long v58 = v71;
  uint64_t v59 = v72;
  uint64_t v60 = v73;
  long long v61 = v74;
  uint64_t v62 = v75;
  int v63 = v76;
  uint64_t v38 = v53;
  static ToolbarReader.PrimitiveReader._makeView(view:inputs:)(v54, (uint64_t *)&v55, v17, v22, v53, v23, (uint64_t)&v64);
  unint64_t v39 = v64;
  unsigned int v40 = v65;
  unsigned int v41 = HIDWORD(v65);
  unint64_t v55 = v64;
  unint64_t v56 = v65;
  _ViewOutputs.subscript.getter();
  static PreferenceValueAttribute.setSource(_:of:)();
  unint64_t v55 = v39;
  unint64_t v56 = __PAIR64__(v41, v40);
  _ViewOutputs.subscript.getter();
  static PreferenceValueAttribute.setSource(_:of:)();
  if (static ToolbarEdges.contains(_:)(0, v17, v38))
  {
    unint64_t v55 = v39;
    unint64_t v56 = __PAIR64__(v41, v40);
    _ViewOutputs.subscript.getter();
    static PreferenceValueAttribute.setSource(_:of:)();
  }
  if (static ToolbarEdges.contains(_:)(1, v17, v53))
  {
    unint64_t v55 = v39;
    unint64_t v56 = __PAIR64__(v41, v40);
    _ViewOutputs.subscript.getter();
    static PreferenceValueAttribute.setSource(_:of:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  int64_t v43 = v49;
  *char v49 = v39;
  *((_DWORD *)v43 + 2) = v40;
  *((_DWORD *)v43 + 3) = v41;
  return result;
}

unint64_t ToolbarReader.ToolbarConfiguration.init()@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = *((void *)&static ToolbarKey.defaultValue + 1);
  uint64_t v3 = qword_1EB308398;
  uint64_t v4 = unk_1EB3083A0;
  uint64_t v5 = qword_1EB3083A8;
  uint64_t v6 = unk_1EB3083B0;
  char v7 = byte_1EB3083B8;
  uint64_t v8 = qword_1EB3083C0;
  *(void *)a1 = static ToolbarKey.defaultValue;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = (int *)type metadata accessor for ToolbarReader.ToolbarConfiguration();
  uint64_t v10 = v9[13];
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v3, v4);
  uint64_t v11 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  uint64_t v13 = __swift_project_value_buffer(v12, (uint64_t)static SearchKey.defaultValue);
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v13, a1 + v10, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  uint64_t v14 = v9[14];
  uint64_t v15 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + v14) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v16 = v9[15];
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *(void *)(a1 + v16) = result;
  return result;
}

uint64_t ToolbarReader.ApplyUpdatesToExternalTarget.target.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ToolbarReader.ToolbarConfiguration();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t ToolbarReader.ApplyUpdatesToExternalTarget.search.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  uint64_t Value = AGGraphGetValue();
  return _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(Value, a1, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
}

uint64_t ToolbarReader.ApplyUpdatesToExternalTarget.updateValue()(void *a1)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  unint64_t v65 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v64 = (uint64_t)v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v54 - v5;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v61 = a1[2];
  *(void *)&long long v75 = v61;
  *((void *)&v75 + 1) = v7;
  uint64_t v58 = v7;
  uint64_t v60 = v8;
  *(void *)&long long v76 = v8;
  *((void *)&v76 + 1) = v9;
  uint64_t v59 = v9;
  uint64_t v10 = (int *)type metadata accessor for ToolbarReader.ToolbarConfiguration();
  uint64_t v11 = *((void *)v10 - 1);
  MEMORY[0x1F4188790](v10);
  unint64_t v55 = (char *)v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54[1] = v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (long long *)((char *)v54 - v14);
  ToolbarReader.ApplyUpdatesToExternalTarget.target.getter((uint64_t)v54 - v14);
  uint64_t v16 = *(void *)((char *)v15 + v10[14]);
  uint64_t v57 = v11;
  uint64_t v17 = *(void (**)(long long *, int *))(v11 + 8);
  swift_bridgeObjectRetain();
  v17(v15, v10);
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  int v62 = specialized static Dictionary<>.== infix(_:_:)(v16, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ToolbarReader.ApplyUpdatesToExternalTarget.target.getter((uint64_t)v15);
  uint64_t v21 = *(void *)((char *)v15 + v10[15]);
  swift_bridgeObjectRetain();
  v17(v15, v10);
  v54[0] = v19;
  uint64_t v22 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  int v63 = specialized static Dictionary<>.== infix(_:_:)(v21, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  ToolbarReader.ApplyUpdatesToExternalTarget.target.getter((uint64_t)v15);
  long long v23 = v15[1];
  long long v75 = *v15;
  long long v76 = v23;
  long long v24 = v15[3];
  long long v77 = v15[2];
  long long v78 = v24;
  outlined retain of ToolbarStorage((uint64_t)&v75);
  v17(v15, v10);
  uint64_t Value = AGGraphGetValue();
  uint64_t v26 = *(void *)(Value + 32);
  uint64_t v27 = *(void *)(Value + 40);
  char v28 = *(unsigned char *)(Value + 48);
  uint64_t v29 = *(void *)(Value + 56);
  long long v30 = *(_OWORD *)(Value + 16);
  v66[0] = *(_OWORD *)Value;
  v66[1] = v30;
  uint64_t v67 = v26;
  uint64_t v68 = v27;
  char v69 = v28;
  uint64_t v70 = v29;
  outlined retain of ToolbarStorage((uint64_t)v66);
  LOBYTE(v22) = ToolbarStorage.identityEquals(_:)(v66);
  outlined release of ToolbarStorage((uint64_t)v66);
  outlined release of ToolbarStorage((uint64_t)&v75);
  ToolbarReader.ApplyUpdatesToExternalTarget.target.getter((uint64_t)v15);
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0((uint64_t)v15 + v10[13], (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  unint64_t v56 = v17;
  v17(v15, v10);
  uint64_t v31 = v64;
  ToolbarReader.ApplyUpdatesToExternalTarget.search.getter(v64);
  int v32 = AGCompareValues();
  outlined destroy of ToolbarStorage.Entry(v31, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  uint64_t result = outlined destroy of ToolbarStorage.Entry((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  if ((v22 & 1) == 0 || !v32 || (v63 & 1) == 0 || (v62 & 1) == 0)
  {
    uint64_t result = UpdateCycleDetector.dispatch(label:isDebug:)();
    if (result)
    {
      uint64_t v34 = AGGraphGetValue();
      uint64_t v35 = *(void *)(v34 + 32);
      uint64_t v36 = *(void *)(v34 + 40);
      char v37 = *(unsigned char *)(v34 + 48);
      uint64_t v38 = *(void *)(v34 + 56);
      long long v39 = *(_OWORD *)(v34 + 16);
      long long v71 = *(_OWORD *)v34;
      long long v72 = v39;
      *(void *)&long long v73 = v35;
      *((void *)&v73 + 1) = v36;
      LOBYTE(v74) = v37;
      *((void *)&v74 + 1) = v38;
      uint64_t v40 = (uint64_t)v6;
      ToolbarReader.ApplyUpdatesToExternalTarget.search.getter((uint64_t)v6);
      uint64_t v41 = *(void *)AGGraphGetValue();
      uint64_t v42 = *(void *)AGGraphGetValue();
      long long v43 = v74;
      double v15[2] = v73;
      v15[3] = v43;
      long long v44 = v72;
      *uint64_t v15 = v71;
      v15[1] = v44;
      uint64_t v45 = v58;
      uint64_t v79 = v61;
      uint64_t v80 = v58;
      uint64_t v81 = v60;
      uint64_t v82 = v59;
      unint64_t v46 = (int *)type metadata accessor for ToolbarReader.ToolbarConfiguration();
      outlined init with take of (ToolbarStorage.Entry, Int)(v40, (uint64_t)v15 + v46[13], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
      *(void *)((char *)v15 + v46[14]) = v41;
      *(void *)((char *)v15 + v46[15]) = v42;
      outlined retain of ToolbarStorage((uint64_t)&v71);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v47 = AGCreateWeakAttribute();
      LODWORD(v42) = v47;
      unint64_t v65 = HIDWORD(v47);
      uint64_t v48 = swift_allocObject();
      swift_weakLoadStrong();
      swift_weakInit();
      swift_release();
      uint64_t v49 = v57;
      uint64_t v50 = v55;
      (*(void (**)(char *, long long *, int *))(v57 + 16))(v55, v15, v10);
      unint64_t v51 = (*(unsigned __int8 *)(v49 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
      uint64_t v52 = swift_allocObject();
      *(void *)(v52 + 16) = v61;
      *(void *)(v52 + 24) = v45;
      uint64_t v53 = v59;
      *(void *)(v52 + 32) = v60;
      *(void *)(v52 + 40) = v53;
      *(void *)(v52 + 48) = v48;
      LODWORD(v53) = v65;
      *(_DWORD *)(v52 + 56) = v42;
      *(_DWORD *)(v52 + 60) = v53;
      (*(void (**)(unint64_t, char *, int *))(v49 + 32))(v52 + v51, v50, v10);
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      v56(v15, v10);
      return swift_release();
    }
  }
  return result;
}

uint64_t ToolbarStorage.identityEquals(_:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v56 = (uint64_t)&v43 - v9;
  type metadata accessor for (ToolbarStorage.Entry?, ToolbarStorage.Entry?)();
  uint64_t v54 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v57 = (uint64_t)&v43 - v17;
  uint64_t v18 = v1[1];
  uint64_t v19 = a1[1];
  if (v18)
  {
    if (!v19) {
      return 0;
    }
    if (*v1 != *a1 || v18 != v19)
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t result = 0;
      if ((v20 & 1) == 0) {
        return result;
      }
    }
  }
  else if (v19)
  {
    return 0;
  }
  outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)(v1 + 2), (uint64_t)v70, (uint64_t (*)(void))type metadata accessor for Binding<Int>?);
  outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v70, (uint64_t)v71, (uint64_t (*)(void))type metadata accessor for Binding<Int>?);
  uint64_t v22 = v72;
  if (v72) {
    swift_retain();
  }
  outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)(a1 + 2), (uint64_t)v69, (uint64_t (*)(void))type metadata accessor for Binding<Int>?);
  outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v69, (uint64_t)v73, (uint64_t (*)(void))type metadata accessor for Binding<Int>?);
  uint64_t v52 = v7;
  if (v74)
  {
    swift_retain();
    if (v22)
    {
      swift_retain();
      char v23 = dispatch thunk of AnyLocation.isEqual(to:)();
      swift_release_n();
      swift_release();
      if (v23) {
        goto LABEL_15;
      }
      return 0;
    }
LABEL_33:
    swift_release();
    return 0;
  }
  if (v22) {
    goto LABEL_33;
  }
LABEL_15:
  uint64_t v50 = v15;
  uint64_t v24 = v2[5];
  uint64_t v67 = a1[5];
  uint64_t v68 = v24;
  uint64_t v43 = v67;
  uint64_t v44 = v24;
  unint64_t v25 = *(void *)(v24 + 16);
  unint64_t v26 = *(void *)(v67 + 16);
  outlined retain of [Text.Modifier]((uint64_t)&v68);
  uint64_t result = outlined retain of [Text.Modifier]((uint64_t)&v67);
  unint64_t v27 = 0;
  unint64_t v28 = 0;
  unint64_t v55 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  unint64_t v51 = (uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  unint64_t v47 = &v64;
  uint64_t v48 = &v66;
  uint64_t v53 = &v61;
  uint64_t v49 = v5;
  unint64_t v45 = v26;
  for (i = v25; ; unint64_t v25 = i)
  {
    if (v28 == v25)
    {
      uint64_t v29 = *v55;
      uint64_t result = (*v55)(v57, 1, 1, v4);
      unint64_t v28 = v25;
      BOOL v30 = v27 >= v26;
      if (v27 == v26) {
        goto LABEL_19;
      }
      goto LABEL_22;
    }
    if (v28 >= v25) {
      break;
    }
    uint64_t v33 = v57;
    _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v44+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v28++, v57, type metadata accessor for ToolbarStorage.Entry);
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
    uint64_t result = v29(v33, 0, 1, v4);
    BOOL v30 = v27 >= v26;
    if (v27 == v26)
    {
LABEL_19:
      uint64_t v31 = 1;
      unint64_t v27 = v26;
      uint64_t v32 = (uint64_t)v50;
      goto LABEL_24;
    }
LABEL_22:
    if (v30) {
      goto LABEL_45;
    }
    uint64_t v32 = (uint64_t)v50;
    _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v43+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v27, (uint64_t)v50, type metadata accessor for ToolbarStorage.Entry);
    uint64_t v31 = 0;
    ++v27;
LABEL_24:
    v29(v32, v31, 1, v4);
    uint64_t v34 = (uint64_t)&v12[*(int *)(v54 + 48)];
    uint64_t v35 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
    outlined init with take of WeakBox<UIBarButtonItem>(v57, (uint64_t)v12, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB718]);
    outlined init with take of WeakBox<UIBarButtonItem>(v32, v34, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, v35);
    uint64_t v36 = *v51;
    int v37 = (*v51)(v12, 1, v4);
    int v38 = v36((char *)v34, 1, v4);
    if (v37 == 1)
    {
      if (v38 == 1)
      {
        outlined release of _LazyLayout_Placements((uint64_t)&v67);
        outlined release of _LazyLayout_Placements((uint64_t)&v68);
        return 1;
      }
      outlined destroy of ToolbarStorage.Entry?(v34, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB718]);
      goto LABEL_41;
    }
    if (v38 == 1)
    {
      uint64_t v42 = (uint64_t)v12;
      goto LABEL_40;
    }
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v12, v56, type metadata accessor for ToolbarStorage.Entry);
    uint64_t v39 = (uint64_t)v52;
    outlined init with take of (ToolbarStorage.Entry, Int)(v34, (uint64_t)v52, type metadata accessor for ToolbarStorage.Entry);
    ToolbarStorage.Entry.id.getter((uint64_t)v65);
    ToolbarStorage.Entry.id.getter((uint64_t)v63);
    char v40 = MEMORY[0x18C1174E0](v65, v63);
    uint64_t v5 = v49;
    if ((v40 & 1) == 0) {
      goto LABEL_39;
    }
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0((uint64_t)v48, (uint64_t)v60, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0((uint64_t)v47, (uint64_t)v53, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if (v60[40] == 255)
    {
      if (v62 != 255) {
        goto LABEL_38;
      }
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v60, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
    }
    else
    {
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0((uint64_t)v60, (uint64_t)v59, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      if (v62 == 255)
      {
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)v59);
LABEL_38:
        outlined destroy of (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?)((uint64_t)v60, (unint64_t *)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?), &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
LABEL_39:
        outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v63);
        outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v65);
        outlined destroy of ToolbarStorage.Entry(v39, type metadata accessor for ToolbarStorage.Entry);
        uint64_t v42 = v56;
LABEL_40:
        outlined destroy of ToolbarStorage.Entry(v42, type metadata accessor for ToolbarStorage.Entry);
LABEL_41:
        outlined release of _LazyLayout_Placements((uint64_t)&v67);
        outlined release of _LazyLayout_Placements((uint64_t)&v68);
        return 0;
      }
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)v53, (uint64_t)v58);
      char v41 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v59, (uint64_t)v58);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v58);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v59);
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v60, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
      if ((v41 & 1) == 0) {
        goto LABEL_39;
      }
    }
    outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v63);
    outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v65);
    outlined destroy of ToolbarStorage.Entry(v39, type metadata accessor for ToolbarStorage.Entry);
    uint64_t result = outlined destroy of ToolbarStorage.Entry(v56, type metadata accessor for ToolbarStorage.Entry);
    unint64_t v26 = v45;
  }
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

unint64_t implicit closure #5 in implicit closure #4 in ToolbarReader.ApplyUpdatesToExternalTarget.updateValue()()
{
  return 0xD000000000000014;
}

uint64_t closure #1 in ToolbarReader.ApplyUpdatesToExternalTarget.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = a3;
  uint64_t v21 = a2;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v11 = type metadata accessor for ToolbarReader.ToolbarConfiguration();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - v13;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v15 = type metadata accessor for ToolbarReader.Mutation();
  uint64_t v20 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (uint64_t *)((char *)&v19 - v16);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E4F4E7A0])
    {
      return swift_release();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v19, v11);
      ToolbarReader.Mutation.init(target:newValue:)(v21, (uint64_t)v14, v17);
      static Transaction.current.getter();
      char v22 = 0;
      swift_getWitnessTable();
      default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
      GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
      swift_release();
      swift_release();
      return (*(uint64_t (**)(void *, uint64_t))(v20 + 8))(v17, v15);
    }
  }
  return result;
}

uint64_t ToolbarReader.Mutation.init(target:newValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for ToolbarReader.Mutation() + 52);
  uint64_t v5 = type metadata accessor for ToolbarReader.ToolbarConfiguration();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t ToolbarReader.Mutation.apply()(void *a1)
{
  int Attribute = AGWeakAttributeGetAttribute();
  BOOL v4 = Attribute == *MEMORY[0x1E4F4E7A0];
  if (Attribute == *MEMORY[0x1E4F4E7A0]) {
    int v5 = 0;
  }
  else {
    int v5 = Attribute;
  }
  int v17 = v5;
  BOOL v18 = v4;
  uint64_t v6 = a1[3];
  uint64_t v11 = a1[2];
  uint64_t v12 = v6;
  uint64_t v7 = a1[5];
  uint64_t v13 = a1[4];
  uint64_t v14 = v7;
  uint64_t v15 = v1;
  v16[0] = v11;
  v16[1] = v6;
  _OWORD v16[2] = v13;
  v16[3] = v7;
  type metadata accessor for ToolbarReader.ToolbarConfiguration();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ToolbarReader.Mutation.apply(), (uint64_t)&v10, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, v8, (uint64_t)v16);
}

uint64_t closure #1 in ToolbarReader.Mutation.apply()(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v12 = type metadata accessor for ToolbarReader.ToolbarConfiguration();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = &v20[-v14];
  LODWORD(a1) = *a1;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v16 = type metadata accessor for ToolbarReader.Mutation();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2 + *(int *)(v16 + 52), v12);
  uint64_t v21 = v12;
  int v22 = (int)a1;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v15, (uint64_t)partial apply for closure #1 in Attribute.setValue(_:), (uint64_t)v20, v12, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v17);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t ToolbarReader.Mutation.combine<A>(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v25 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a2 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  BOOL v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v13, a1, a3, v16);
  char v20 = swift_dynamicCast();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v20)
  {
    v21(v10, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v10, a2);
    long long v22 = *(_OWORD *)(a2 + 32);
    v25[0] = *(_OWORD *)(a2 + 16);
    v25[1] = v22;
    uint64_t v23 = type metadata accessor for ToolbarReader.ToolbarConfiguration();
    if (static WeakAttribute.== infix(_:_:)())
    {
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 40))(v3 + *(int *)(a2 + 52), &v18[*(int *)(a2 + 52)], v23);
      return 1;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, a2);
  }
  else
  {
    v21(v10, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  return 0;
}

uint64_t protocol witness for GraphMutation.combine<A>(with:) in conformance ToolbarReader<A, B>.Mutation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ToolbarReader.Mutation.combine<A>(with:)(a1, a4, a2);
}

uint64_t static ToolbarReader.PrimitiveReader._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v48 = a7;
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  int v11 = *a1;
  uint64_t v12 = *a2;
  int v13 = *((_DWORD *)a2 + 2);
  uint64_t v63 = a2[2];
  unsigned int v14 = *((_DWORD *)a2 + 6);
  unsigned int v61 = *((_DWORD *)a2 + 7);
  unsigned int v62 = v14;
  int v15 = *((_DWORD *)a2 + 8);
  int v59 = *((_DWORD *)a2 + 9);
  int v60 = v15;
  uint64_t v58 = a2[5];
  uint64_t v56 = a2[6];
  int v57 = *((_DWORD *)a2 + 14);
  int v55 = *((_DWORD *)a2 + 15);
  int v54 = *((_DWORD *)a2 + 16);
  int v53 = *((_DWORD *)a2 + 17);
  int v52 = *((_DWORD *)a2 + 18);
  int v51 = *((_DWORD *)a2 + 19);
  int v50 = *((_DWORD *)a2 + 20);
  int v64 = v11;
  HIDWORD(v70) = HIDWORD(a3);
  uint64_t v71 = a4;
  uint64_t v72 = a5;
  unint64_t v73 = a6;
  type metadata accessor for ToolbarReader.PrimitiveReader();
  uint64_t v16 = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #1 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)(1, a3, a4, a5, a6);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  LODWORD(v70) = v11;
  _GraphValue.value.getter();
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  if (*(void *)(*(void *)(v17 - 8) + 64)) {
    closure #2 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)(1, a3, a4, a5, a6);
  }
  int v45 = AGGraphCreateOffsetAttribute2();
  _GraphValue.value.getter();
  closure #3 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)(1, a3, a4, a5, a6);
  int v41 = AGGraphCreateOffsetAttribute2();
  _GraphValue.value.getter();
  closure #4 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)(1, a3, a4, a5, a6);
  int v44 = v11;
  int v37 = AGGraphCreateOffsetAttribute2();
  int v49 = v13;
  uint64_t v40 = a5;
  uint64_t v38 = a3;
  uint64_t v39 = a6;
  uint64_t v36 = a4;
  uint64_t v43 = v16;
  swift_getKeyPath();
  uint64_t v47 = v12;
  int v42 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  int v74 = v60;
  int v75 = v59;
  uint64_t v76 = v58;
  uint64_t v77 = v56;
  int v78 = v57;
  int v79 = v55;
  int v80 = v54;
  int v81 = v53;
  int v82 = v52;
  int v83 = v51;
  int v84 = v50;
  swift_getKeyPath();
  int v18 = _ViewInputs.mapEnvironment<A>(_:)();
  uint64_t v19 = swift_release();
  int v64 = v41;
  int v65 = v37;
  MEMORY[0x1F4188790](v19);
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  uint64_t v72 = a5;
  unint64_t v73 = a6;
  uint64_t Appearances = type metadata accessor for ToolbarReader.MakeAppearances();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<[ToolbarPlacement.Role : ToolbarAppearanceConfiguration]>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v64, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v33, Appearances, MEMORY[0x1E4FBC248], v20, MEMORY[0x1E4FBC278], v21);
  int v41 = v70;
  LODWORD(v70) = v44;
  uint64_t v22 = _GraphValue.value.getter();
  int v23 = v22;
  int v64 = OffsetAttribute2;
  int v65 = v45;
  int v66 = v42;
  int v67 = v18;
  id v68 = 0;
  int v69 = 0;
  MEMORY[0x1F4188790](v22);
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  uint64_t v72 = a5;
  unint64_t v73 = a6;
  uint64_t updated = type metadata accessor for ToolbarReader.UpdateToolbarBridge();
  uint64_t Appearances = updated;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for ToolbarStorage.Entry.ID?(0, &lazy cache variable for type metadata for Attribute<ToolbarProxy.Value>, (uint64_t)&type metadata for ToolbarProxy.Value, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v64, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v33, updated, MEMORY[0x1E4FBC248], v25, MEMORY[0x1E4FBC278], v26);

  int v64 = v23;
  int v65 = v70;
  int v66 = v41;
  MEMORY[0x1F4188790](v27);
  v33[0] = a4;
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  uint64_t v72 = a5;
  unint64_t v73 = a6;
  uint64_t View = type metadata accessor for ToolbarReader.MakeView();
  v33[1] = View;
  uint64_t Appearances = swift_getWitnessTable();
  uint64_t v29 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v64, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v32, View, MEMORY[0x1E4FBC248], v29, MEMORY[0x1E4FBC278], v30);
  _GraphValue.init(_:)();
  uint64_t v70 = v47;
  LODWORD(v71) = v49;
  uint64_t v72 = v63;
  unint64_t v73 = __PAIR64__(v61, v62);
  int v74 = v60;
  int v75 = v59;
  uint64_t v76 = v58;
  uint64_t v77 = v56;
  int v78 = v57;
  int v79 = v55;
  int v80 = v54;
  int v81 = v53;
  int v82 = v52;
  int v83 = v51;
  int v84 = v50;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t))(a6 + 24))(&v64, &v70, a4, a6);
}

uint64_t closure #1 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a2;
  uint64_t v11 = a3;
  uint64_t v12 = a4;
  uint64_t v13 = a5;
  void v9[2] = type metadata accessor for ToolbarReader.PrimitiveReader();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, (uint64_t)&type metadata for ToolbarStorage, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v10;
}

uint64_t closure #2 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v6 = type metadata accessor for ToolbarReader.PrimitiveReader();
  uint64_t v7 = a1 + *(int *)(v6 + 52);
  void v13[2] = v6;
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v9, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v14;
}

uint64_t closure #3 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v6 = type metadata accessor for ToolbarReader.PrimitiveReader();
  uint64_t v7 = a1 + *(int *)(v6 + 56);
  void v13[2] = v6;
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v9, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v14;
}

uint64_t closure #4 in static ToolbarReader.PrimitiveReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  uint64_t v16 = a4;
  uint64_t v17 = a5;
  uint64_t v6 = type metadata accessor for ToolbarReader.PrimitiveReader();
  uint64_t v7 = a1 + *(int *)(v6 + 60);
  void v13[2] = v6;
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_17, (uint64_t)v13, v9, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v14;
}

uint64_t key path getter for EnvironmentValues.toolbarUpdateContext : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarUpdateContextKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarUpdateContextKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t ToolbarReader.PrimitiveReader.init(toolbar:search:navigationBar:bottomBar:reader:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  long long v11 = a1[1];
  *a6 = *a1;
  a6[1] = v11;
  long long v12 = a1[3];
  a6[2] = a1[2];
  a6[3] = v12;
  uint64_t v13 = (int *)type metadata accessor for ToolbarReader.PrimitiveReader();
  outlined init with take of (ToolbarStorage.Entry, Int)(a2, (uint64_t)a6 + v13[13], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  *(void *)((char *)a6 + v13[14]) = a3;
  *(void *)((char *)a6 + v13[15]) = a4;
  uint64_t v14 = (char *)a6 + v13[16];
  uint64_t v15 = type metadata accessor for ToolbarReader();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a5, v15);
}

uint64_t ToolbarReader.MakePrimitiveReader.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ToolbarReader.ToolbarConfiguration();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t ToolbarReader.MakePrimitiveReader.reader.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ToolbarReader();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ToolbarReader<A, B>.PrimitiveReader@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static ToolbarReader.PrimitiveReader._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ToolbarReader<A, B>.PrimitiveReader()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToolbarReader<A, B>.PrimitiveReader()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

void protocol witness for View.body.getter in conformance ToolbarReader<A, B>.PrimitiveReader()
{
}

uint64_t ToolbarReader.MakePrimitiveReader.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _OWORD *a6@<X8>)
{
  v33[1] = a1;
  int v37 = a6;
  *(void *)&long long v39 = a2;
  *((void *)&v39 + 1) = a3;
  *(void *)&long long v40 = a4;
  *((void *)&v40 + 1) = a5;
  uint64_t v10 = type metadata accessor for ToolbarReader();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v36 = (uint64_t)v33 - v11;
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v38 = (uint64_t)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v39 = a2;
  *((void *)&v39 + 1) = a3;
  *(void *)&long long v40 = a4;
  void v33[2] = a4;
  *((void *)&v40 + 1) = a5;
  uint64_t v14 = (int *)type metadata accessor for ToolbarReader.ToolbarConfiguration();
  uint64_t v15 = *((void *)v14 - 1);
  MEMORY[0x1F4188790](v14);
  uint64_t v35 = (uint64_t)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v33 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v33 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)v33 - v24;
  ToolbarReader.MakePrimitiveReader.configuration.getter((uint64_t)v33 - v24);
  long long v26 = *((_OWORD *)v25 + 1);
  long long v39 = *(_OWORD *)v25;
  long long v40 = v26;
  long long v27 = *((_OWORD *)v25 + 3);
  long long v41 = *((_OWORD *)v25 + 2);
  long long v42 = v27;
  outlined retain of ToolbarStorage((uint64_t)&v39);
  unint64_t v28 = *(void (**)(char *, int *))(v15 + 8);
  v28(v25, v14);
  ToolbarReader.MakePrimitiveReader.configuration.getter((uint64_t)v22);
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0((uint64_t)&v22[v14[13]], v38, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  v28(v22, v14);
  ToolbarReader.MakePrimitiveReader.configuration.getter((uint64_t)v19);
  uint64_t v34 = *(void *)&v19[v14[15]];
  swift_bridgeObjectRetain();
  v28(v19, v14);
  uint64_t v29 = v35;
  ToolbarReader.MakePrimitiveReader.configuration.getter(v35);
  uint64_t v30 = *(void *)(v29 + v14[14]);
  swift_bridgeObjectRetain();
  v28((char *)v29, v14);
  uint64_t v31 = v36;
  ToolbarReader.MakePrimitiveReader.reader.getter(v36);
  return ToolbarReader.PrimitiveReader.init(toolbar:search:navigationBar:bottomBar:reader:)(&v39, v38, v34, v30, v31, v37);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance ToolbarReader<A, B>.MakePrimitiveReader@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ToolbarReader.PrimitiveReader();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarReader<A, B>.MakePrimitiveReader@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  return ToolbarReader.MakePrimitiveReader.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a2);
}

id ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(uint64_t *a1)
{
  uint64_t v2 = *(void **)(v1 + 16);
  if (v2)
  {
    id v3 = *(id *)(v1 + 16);
  }
  else
  {
    id updated = closure #1 in ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(v1, a1[2], a1[3], a1[4]);
    *(void *)(v1 + 16) = updated;
    id v3 = updated;
    uint64_t v2 = 0;
  }
  id v5 = v2;
  return v3;
}

id closure #1 in ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(0, &lazy cache variable for type metadata for ToolbarBridge<EmptyToolbarStrategy>, (uint64_t)&type metadata for EmptyToolbarStrategy, (uint64_t)&protocol witness table for EmptyToolbarStrategy, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ToolbarBridge);
  id v9 = objc_msgSend(objc_allocWithZone(v8), sel_init);
  id v10 = *(id *)(a1 + 16);
  specialized ToolbarReader.UpdateToolbarBridge.configure(bridge:)((uint64_t)v9, a2, a3, a4);

  return v9;
}

void ToolbarReader.UpdateToolbarBridge.updateValue()(uint64_t *a1)
{
  char updated = ToolbarReader.UpdateToolbarBridge.updateBridgeIfNeeded()(a1);
  if (!AGGraphGetOutputValue() || (updated & 1) != 0)
  {
    id v3 = ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(a1);
    AGGraphSetOutputValue();
  }
}

uint64_t ToolbarReader.UpdateToolbarBridge.updateBridgeIfNeeded()(uint64_t *a1)
{
  uint64_t v2 = v1;
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for PreferenceValues.Value<ToolbarStorage.SearchItem?>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarStorage.SearchItem?, MEMORY[0x1E4F3FD10]);
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v61 - v6;
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  MEMORY[0x1F4188790](v8);
  id v10 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v79 = (uint64_t)&v61 - v12;
  MEMORY[0x1F4188790](v13);
  int v78 = (char *)&v61 - v14;
  type metadata accessor for ToolbarStorage.Entry.ID?(0, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0(Value, (uint64_t)v82, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  if (!v86)
  {
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v82, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, MEMORY[0x1E4FBB718]);
    return 0;
  }
  int v64 = v7;
  uint64_t v65 = v5;
  outlined init with take of Toolbar.UpdateContext((uint64_t)v82, (uint64_t)v87);
  uint64_t v77 = a1;
  char updated = (char *)ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(a1);
  uint64_t v17 = *(void *)&updated[direct field offset for ToolbarBridge.toolbarStorage + 8];
  uint64_t v18 = *(void *)&updated[direct field offset for ToolbarBridge.toolbarStorage + 16];
  uint64_t v19 = *(void *)&updated[direct field offset for ToolbarBridge.toolbarStorage + 24];
  uint64_t v20 = *(void *)&updated[direct field offset for ToolbarBridge.toolbarStorage + 32];
  uint64_t v21 = *(void *)&updated[direct field offset for ToolbarBridge.toolbarStorage + 40];
  uint64_t v22 = *(void *)&updated[direct field offset for ToolbarBridge.toolbarStorage + 56];
  outlined copy of ToolbarStorage?(*(void *)&updated[direct field offset for ToolbarBridge.toolbarStorage], v17, v18, v19, v20, v21);

  uint64_t v23 = MEMORY[0x1E4FBC870];
  uint64_t v24 = MEMORY[0x1E4FBC860];
  if (v21) {
    uint64_t v25 = v17;
  }
  else {
    uint64_t v25 = 0;
  }
  uint64_t v67 = v25;
  if (v21) {
    uint64_t v26 = v18;
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v68 = v26;
  if (v21) {
    uint64_t v27 = v19;
  }
  else {
    uint64_t v27 = 0;
  }
  uint64_t v69 = v27;
  if (v21) {
    uint64_t v28 = v20;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v70 = v28;
  if (v21) {
    uint64_t v24 = v21;
  }
  uint64_t v72 = v24;
  if (v21) {
    uint64_t v23 = v22;
  }
  uint64_t v71 = v23;
  uint64_t v29 = AGGraphGetValue();
  BOOL v30 = 0;
  uint64_t v32 = *(void *)(v29 + 8);
  uint64_t v31 = *(void *)(v29 + 16);
  uint64_t v34 = *(void *)(v29 + 24);
  uint64_t v33 = *(void *)(v29 + 32);
  uint64_t v35 = *(void *)(v29 + 40);
  uint64_t v36 = *(void *)(v29 + 56);
  if (v37)
  {
    if (*(void *)(v72 + 16)) {
      BOOL v30 = 1;
    }
    else {
      BOOL v30 = *(void *)(v35 + 16) != 0;
    }
  }
  uint64_t v62 = *(void *)v29;
  int v63 = *(unsigned __int8 *)(v29 + 48);
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v31, v34);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v66 = v32;
  swift_bridgeObjectRetain();
  uint64_t v74 = v31;
  uint64_t v75 = v34;
  uint64_t v73 = v33;
  outlined copy of Binding<NavigationSplitViewColumn>?(v31, v34);
  uint64_t v76 = v35;
  swift_bridgeObjectRetain();
  uint64_t v38 = v36;
  swift_bridgeObjectRetain();
  id v39 = ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(v77);
  uint64_t v40 = (uint64_t)v39 + direct field offset for ToolbarBridge.searchItem;
  swift_beginAccess();
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v40, (uint64_t)v78, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);

  uint64_t v41 = AGGraphGetValue();
  LOBYTE(v39) = v42;
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v41, v79, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  BOOL v43 = 0;
  if (v39)
  {
    uint64_t v44 = type metadata accessor for ToolbarStorage.SearchItem(0);
    int v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 48);
    BOOL v43 = 1;
    if (v45(v78, 1, v44) == 1)
    {
      _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v79, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
      BOOL v43 = v45(v10, 1, v44) != 1;
      outlined destroy of ToolbarStorage.Entry((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
    }
  }
  int v46 = *(_DWORD *)(v2 + 24);
  type metadata accessor for ToolbarStorage.Entry.ID?(0, &lazy cache variable for type metadata for UserInterfaceSizeClass?, MEMORY[0x1E4F409E8], MEMORY[0x1E4FBB718]);
  int v47 = *(unsigned __int8 *)AGGraphGetValue();
  uint64_t v48 = (char *)ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(v77);
  int v49 = &v48[direct field offset for ToolbarBridge.lastEnvironment];
  swift_beginAccess();
  long long v81 = *(_OWORD *)v49;
  EnvironmentValues.horizontalSizeClass.getter();
  int v50 = v80;
  swift_endAccess();

  if (v50 == 2)
  {
    if (!v30 && !v43)
    {
LABEL_33:
      swift_bridgeObjectRelease();
      uint64_t v58 = v74;
      uint64_t v59 = v75;
      outlined consume of Binding<NavigationSplitViewColumn>?(v74, v75);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Binding<NavigationSplitViewColumn>?(v68, v69);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of Binding<NavigationSplitViewColumn>?(v58, v59);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of ToolbarStorage.Entry(v79, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
      outlined destroy of Toolbar.UpdateContext((uint64_t)v87);
      outlined destroy of ToolbarStorage.Entry((uint64_t)v78, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
      return 0;
    }
  }
  else if (v47 != 2 && !v30 && !v43 && ((v50 ^ v47) & 1) == 0)
  {
    goto LABEL_33;
  }
  *(_DWORD *)(v2 + 24) = v46 + 1;
  PreferenceValues.init()();
  v82[0] = v62;
  v82[1] = v66;
  v82[2] = v74;
  v82[3] = v75;
  v82[4] = v73;
  _OWORD v82[5] = v76;
  char v83 = v63;
  uint64_t v61 = v38;
  uint64_t v84 = v38;
  int v85 = v46 + 1;
  PreferenceValues.subscript.setter();
  uint64_t v51 = (uint64_t)v64;
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v79, (uint64_t)v64, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  *(_DWORD *)(v51 + *(int *)(v65 + 28)) = v46 + 1;
  PreferenceValues.subscript.setter();
  EnvironmentValues.init()();
  LOBYTE(v82[0]) = v47;
  EnvironmentValues.horizontalSizeClass.setter();
  int v52 = v77;
  int v53 = (char *)ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(v77);
  long long v54 = v81;
  int v55 = &v53[direct field offset for ToolbarBridge.lastEnvironment];
  uint64_t v56 = 1;
  swift_beginAccess();
  *(_OWORD *)int v55 = v54;
  swift_retain();
  swift_retain();

  swift_release();
  swift_release();
  id v57 = ToolbarReader.UpdateToolbarBridge.toolbarBridge.getter(v52);
  specialized ToolbarBridge.preferencesDidChange(_:context:)(v80, (uint64_t)v87);
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v74, v75);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v68, v69);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarStorage.Entry(v79, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v87);
  outlined destroy of ToolbarStorage.Entry((uint64_t)v78, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  return v56;
}

unint64_t ToolbarReader.MakeAppearances.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  if (static ToolbarEdges.contains(_:)(0, a2, a4))
  {
    memset(v48, 0, sizeof(v48));
    type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
    long long v56 = 0u;
    long long v57 = 0u;
    uint64_t v58 = 0;
    uint64_t Value = AGGraphGetValue();
    uint64_t v8 = *(void *)Value;
    if (*(void *)(*(void *)Value + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v56);
      if (v10)
      {
        uint64_t v11 = *(void *)(v8 + 56) + 80 * v9;
        char v36 = *(unsigned char *)v11;
        uint64_t v12 = *(void *)(v11 + 8);
        uint64_t v13 = *(void *)(v11 + 16);
        char v39 = *(unsigned char *)(v11 + 24);
        uint64_t v37 = *(void *)(v11 + 32);
        uint64_t v38 = *(void *)(v11 + 48);
        char v14 = *(unsigned char *)(v11 + 57);
        char v15 = *(unsigned char *)(v11 + 58);
        uint64_t v16 = *(void *)(v11 + 64);
        char v17 = *(unsigned char *)(v11 + 72);
        char v42 = *(unsigned char *)(v11 + 40);
        char v44 = *(unsigned char *)(v11 + 56);
        swift_retain();
        swift_retain();
        swift_retain();
        char v18 = v36;
        swift_bridgeObjectRelease();
LABEL_7:
        outlined destroy of ToolbarPlacement.Role((uint64_t)&v56);
        LOBYTE(v56) = v18;
        *((void *)&v56 + 1) = v12;
        *(void *)&long long v57 = v13;
        BYTE8(v57) = v39;
        uint64_t v58 = v37;
        char v59 = v42;
        uint64_t v60 = v38;
        char v61 = v44;
        char v62 = v14;
        char v63 = v15;
        uint64_t v64 = v16;
        char v65 = v17;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v46[0] = v6;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v56, (uint64_t)v48, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        outlined destroy of ToolbarPlacement.Role((uint64_t)v48);
        goto LABEL_8;
      }
      swift_bridgeObjectRelease();
    }
    char v17 = 0;
    uint64_t v16 = 0;
    char v15 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    char v39 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    char v18 = 0;
    char v42 = 1;
    char v44 = 1;
    char v14 = 2;
    goto LABEL_7;
  }
LABEL_8:
  if (static ToolbarEdges.contains(_:)(1, a2, a4))
  {
    memset(v46, 0, sizeof(v46));
    long long v47 = xmmword_188382680;
    memset(v48, 0, 24);
    *(_OWORD *)&v48[24] = xmmword_188382680;
    type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
    uint64_t v20 = AGGraphGetValue();
    uint64_t v21 = *(void *)v20;
    if (*(void *)(*(void *)v20 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v48);
      if (v23)
      {
        uint64_t v24 = *(void *)(v21 + 56) + 80 * v22;
        uint64_t v25 = *(void *)(v24 + 8);
        uint64_t v26 = *(void *)(v24 + 16);
        char v40 = *(unsigned char *)v24;
        char v41 = *(unsigned char *)(v24 + 24);
        uint64_t v27 = *(void *)(v24 + 32);
        uint64_t v28 = *(void *)(v24 + 48);
        char v29 = *(unsigned char *)(v24 + 57);
        char v30 = *(unsigned char *)(v24 + 58);
        uint64_t v31 = *(void *)(v24 + 64);
        char v32 = *(unsigned char *)(v24 + 72);
        char v45 = *(unsigned char *)(v24 + 40);
        char v43 = *(unsigned char *)(v24 + 56);
        swift_retain();
        swift_retain();
        swift_retain();
        char v33 = v40;
        swift_bridgeObjectRelease();
LABEL_14:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v48);
        v48[0] = v33;
        *(void *)&v48[8] = v25;
        *(void *)&v48[16] = v26;
        v48[24] = v41;
        *(void *)&v48[32] = v27;
        char v49 = v45;
        uint64_t v50 = v28;
        char v51 = v43;
        char v52 = v29;
        char v53 = v30;
        uint64_t v54 = v31;
        char v55 = v32;
        char v34 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v48, (uint64_t)v46, v34);
        swift_bridgeObjectRelease();
        outlined destroy of ToolbarPlacement.Role((uint64_t)v46);
        return v6;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v27 = 0;
    char v41 = 0;
    uint64_t v26 = 0;
    uint64_t v25 = 0;
    char v33 = 0;
    uint64_t v28 = 0;
    char v30 = 0;
    uint64_t v31 = 0;
    char v32 = 0;
    char v45 = 1;
    char v43 = 1;
    char v29 = 2;
    goto LABEL_14;
  }
  return v6;
}

unint64_t protocol witness for Rule.value.getter in conformance ToolbarReader<A, B>.MakeAppearances@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result = ToolbarReader.MakeAppearances.value.getter(*v2, a1[2], a1[3], a1[4]);
  *a2 = result;
  return result;
}

uint64_t ToolbarReader.MakeView.value.getter()
{
  return Rule.withObservation<A>(do:)();
}

uint64_t closure #1 in ToolbarReader.MakeView.value.getter()
{
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t closure #1 in closure #1 in ToolbarReader.MakeView.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(int *)(type metadata accessor for ToolbarReader.PrimitiveReader() + 64);
  uint64_t v7 = type metadata accessor for ToolbarReader();
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result != *MEMORY[0x1E4F4E7A0]) {
    return (*(uint64_t (**)(unint64_t, uint64_t))(a1 + v6 + *(int *)(v7 + 52)))(a2 & 0xFFFFFFFF00000000 | result, a3);
  }
  __break(1u);
  return result;
}

uint64_t ToolbarReader.init(edges:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for ToolbarReader();
  uint64_t v9 = (void *)(a5 + *(int *)(result + 52));
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarReader<A, B>.MakeView()
{
  return ToolbarReader.MakeView.value.getter();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ToolbarReader<A, B>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, unint64_t *a4@<X8>)
{
  return static ToolbarReader._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ToolbarReader<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ToolbarReader<A, B>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

void protocol witness for View.body.getter in conformance ToolbarReader<A, B>()
{
}

uint64_t protocol witness for ToolbarStrategy.updateContext.getter in conformance EmptyToolbarStrategy@<X0>(uint64_t a1@<X8>)
{
  return _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0(v1 + 8, a1, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
}

uint64_t protocol witness for ToolbarStrategy.updateLocations() in conformance EmptyToolbarStrategy()
{
  return MEMORY[0x1E4FBC870];
}

uint64_t ToolbarProxy.appearance(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t result = AGGraphGetInputValue();
  uint64_t v5 = *(void *)result;
  if (!*(void *)(*(void *)result + 16)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v7 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
LABEL_7:
    *(unsigned char *)a2 = 0;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 0;
    *(unsigned char *)(a2 + 40) = 1;
    *(void *)(a2 + 48) = 0;
    *(unsigned char *)(a2 + 56) = 1;
    *(_WORD *)(a2 + 57) = 2;
    *(void *)(a2 + 64) = 0;
    *(unsigned char *)(a2 + 72) = 0;
    return result;
  }
  uint64_t v8 = *(void *)(v5 + 56) + 80 * v6;
  char v9 = *(unsigned char *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v8 + 16);
  char v12 = *(unsigned char *)(v8 + 24);
  uint64_t v13 = *(void *)(v8 + 32);
  char v14 = *(unsigned char *)(v8 + 40);
  uint64_t v15 = *(void *)(v8 + 48);
  char v16 = *(unsigned char *)(v8 + 56);
  __int16 v17 = *(_WORD *)(v8 + 57);
  uint64_t v18 = *(void *)(v8 + 64);
  LOBYTE(v8) = *(unsigned char *)(v8 + 72);
  *(unsigned char *)a2 = v9;
  *(void *)(a2 + 8) = v10;
  *(void *)(a2 + 16) = v11;
  *(unsigned char *)(a2 + 24) = v12;
  *(void *)(a2 + 32) = v13;
  *(unsigned char *)(a2 + 40) = v14;
  *(void *)(a2 + 48) = v15;
  *(unsigned char *)(a2 + 56) = v16;
  *(_WORD *)(a2 + 57) = v17;
  *(void *)(a2 + 64) = v18;
  *(unsigned char *)(a2 + 72) = v8;
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_bridgeObjectRelease();
}

uint64_t ToolbarProxy.count(in:placement:)(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0(a2, (uint64_t)v11, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  if (v11[40] == 255)
  {
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v11, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
    id v8 = *(id *)AGGraphGetInputValue();
    uint64_t v7 = specialized ToolbarBridge.entryCount(in:)(a1);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v11, (uint64_t)v12);
    id v3 = *(id *)AGGraphGetInputValue();
    unint64_t v4 = specialized ToolbarBridge.entries(in:)(a1);

    MEMORY[0x1F4188790](v5);
    void v10[2] = v12;
    specialized Sequence.filter(_:)((uint64_t (*)(char *))partial apply for closure #1 in ToolbarProxy.count(in:placement:), (uint64_t)v10, v4);
    uint64_t v7 = *(void *)(v6 + 16);
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v12);
  }
  return v7;
}

uint64_t closure #1 in ToolbarProxy.count(in:placement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v7 - 8);
  char v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v12 = (char *)v15 - v11;
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(a1, (uint64_t)v6, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ToolbarStorage.Entry((uint64_t)v6, type metadata accessor for ToolbarStorage.Entry.Kind);
    char v13 = 0;
  }
  else
  {
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v6, (uint64_t)v9, type metadata accessor for ToolbarStorage.Item);
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v9, (uint64_t)v12, type metadata accessor for ToolbarStorage.Item);
    char v13 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)(v12 + 48), a2);
    outlined destroy of ToolbarStorage.Entry((uint64_t)v12, type metadata accessor for ToolbarStorage.Item);
  }
  return v13 & 1;
}

uint64_t ToolbarProxy.callAsFunction(in:placement:showSeparator:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  char v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = MEMORY[0x1E4FBC860];
  uint64_t v10 = *(void **)AGGraphGetInputValue();
  uint64_t v18 = a2;
  uint64_t v19 = &v24;
  id v11 = v10;
  specialized ToolbarBridge.adjustEntries(in:_:)(a1, (void (*)(uint64_t, uint64_t *))partial apply for closure #1 in ToolbarProxy.callAsFunction(in:placement:showSeparator:), (uint64_t)v17);

  uint64_t v12 = v24;
  uint64_t v13 = *(void *)(v24 + 16);
  if (v13)
  {
    _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v24+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * (v13 - 1), (uint64_t)v9, type metadata accessor for ToolbarStorage.Entry);
    ToolbarStorage.Entry.id.getter((uint64_t)v22);
    outlined destroy of ToolbarStorage.Entry((uint64_t)v9, type metadata accessor for ToolbarStorage.Entry);
    uint64_t v12 = v24;
  }
  else
  {
    char v23 = 0;
    memset(v22, 0, sizeof(v22));
  }
  uint64_t KeyPath = swift_getKeyPath();
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0((uint64_t)v22, (uint64_t)v21, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
  uint64_t v15 = swift_allocObject();
  *(unsigned char *)(v15 + 16) = a3 & 1;
  outlined init with take of ToolbarStorage.Entry.ID?((uint64_t)v21, v15 + 24, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
  v21[0] = v12;
  uint64_t v20 = KeyPath;
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [ToolbarStorage.Entry] and conformance [A]();
  lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID();
  swift_bridgeObjectRetain();
  ForEach.init(_:idGenerator:content:)();
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v22, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBB718]);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in ToolbarProxy.callAsFunction(in:placement:showSeparator:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v37 = a4;
  uint64_t v6 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  char v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v35 - v17;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v35 - v20;
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(a1, (uint64_t)v12, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (!swift_getEnumCaseMultiPayload())
  {
    char v36 = v9;
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v12, (uint64_t)v18, type metadata accessor for ToolbarStorage.Item);
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v18, (uint64_t)v21, type metadata accessor for ToolbarStorage.Item);
    int v23 = *(unsigned __int8 *)(a3 + 40);
    _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0((uint64_t)v21, (uint64_t)v15, type metadata accessor for ToolbarStorage.Item);
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0(a3, (uint64_t)v44, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    uint64_t v12 = v21;
    if (v23 != 255)
    {
      uint64_t v35 = v21;
      outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v15 + 48), (uint64_t)v43);
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0((uint64_t)v43, (uint64_t)v40, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0((uint64_t)v44, (uint64_t)v41, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      if (v40[40] == 255)
      {
        char v32 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v43, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
        _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v44, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v32);
        outlined destroy of ToolbarStorage.Entry((uint64_t)v15, type metadata accessor for ToolbarStorage.Item);
        if (v42 == 255)
        {
          _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v40, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
          uint64_t v12 = v35;
          goto LABEL_9;
        }
      }
      else
      {
        _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0((uint64_t)v40, (uint64_t)v39, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
        if (v42 != 255)
        {
          outlined init with take of ToolbarItemPlacement.Role((uint64_t)v41, (uint64_t)v38);
          char v24 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v39, (uint64_t)v38);
          outlined destroy of ToolbarItemPlacement.Role((uint64_t)v38);
          uint64_t v25 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
          _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v43, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
          _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v44, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v25);
          outlined destroy of ToolbarStorage.Entry((uint64_t)v15, type metadata accessor for ToolbarStorage.Item);
          outlined destroy of ToolbarItemPlacement.Role((uint64_t)v39);
          _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v40, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v25);
          uint64_t v12 = v35;
          if ((v24 & 1) == 0) {
            goto LABEL_18;
          }
LABEL_9:
          uint64_t v26 = (uint64_t)v36;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(a1, (uint64_t)v36, type metadata accessor for ToolbarStorage.Entry);
          uint64_t v27 = v37;
          uint64_t v28 = *v37;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *uint64_t v27 = v28;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t v28 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
            *uint64_t v27 = v28;
          }
          unint64_t v31 = v28[2];
          unint64_t v30 = v28[3];
          if (v31 >= v30 >> 1)
          {
            uint64_t v28 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1, v28);
            *uint64_t v27 = v28;
          }
          v28[2] = v31 + 1;
          outlined init with take of (ToolbarStorage.Entry, Int)(v26, (uint64_t)v28+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v31, type metadata accessor for ToolbarStorage.Entry);
          goto LABEL_18;
        }
        char v33 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v43, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
        _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v44, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v33);
        outlined destroy of ToolbarStorage.Entry((uint64_t)v15, type metadata accessor for ToolbarStorage.Item);
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)v39);
      }
      outlined destroy of (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?)((uint64_t)v40, (unint64_t *)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?), &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      uint64_t v12 = v35;
LABEL_18:
      uint64_t v22 = type metadata accessor for ToolbarStorage.Item;
      return outlined destroy of ToolbarStorage.Entry((uint64_t)v12, v22);
    }
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v44, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
    outlined destroy of ToolbarStorage.Entry((uint64_t)v15, type metadata accessor for ToolbarStorage.Item);
    goto LABEL_9;
  }
  uint64_t v22 = type metadata accessor for ToolbarStorage.Entry.Kind;
  return outlined destroy of ToolbarStorage.Entry((uint64_t)v12, v22);
}

uint64_t closure #2 in ToolbarProxy.callAsFunction(in:placement:showSeparator:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ToolbarStorage.Entry(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(a1, (uint64_t)v13, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v13, (uint64_t)v16, type metadata accessor for ToolbarStorage.Item);
    outlined init with copy of _ViewList_View((uint64_t)(v16 + 104), (uint64_t)v41);
    outlined destroy of ToolbarStorage.Entry((uint64_t)v16, type metadata accessor for ToolbarStorage.Item);
    char v17 = *(unsigned char *)(a1 + *(int *)(v8 + 20));
    _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(a1, (uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0(a3, (uint64_t)v40, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
    if (a2)
    {
      ToolbarStorage.Entry.id.getter((uint64_t)v39);
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0((uint64_t)v39, (uint64_t)&v27, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0((uint64_t)v40, (uint64_t)&v33, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
      if (*((void *)&v28 + 1))
      {
        _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0((uint64_t)&v27, (uint64_t)v26, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
        if (*((void *)&v34 + 1))
        {
          void v24[2] = v35;
          _OWORD v24[3] = v36;
          void v24[4] = v37;
          char v25 = v38;
          v24[0] = v33;
          v24[1] = v34;
          BOOL v18 = specialized static ToolbarStorage.Entry.ID.== infix(_:_:)((uint64_t)v26, (uint64_t)v24);
          outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v24);
          uint64_t v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
          _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v39, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBB718]);
          _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v40, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, v19);
          outlined destroy of ToolbarStorage.Entry((uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
          outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v26);
          _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)&v27, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, v19);
          char v20 = !v18;
LABEL_12:
          swift_unknownObjectWeakInit();
          swift_unknownObjectWeakAssign();
          outlined init with take of WeakBox<UIBarButtonItem>((uint64_t)v40, (uint64_t)&v33 + 8, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>, (uint64_t (*)(uint64_t))type metadata accessor for UIBarButtonItem, MEMORY[0x1E4F41720]);
          long long v29 = v41[2];
          long long v30 = v41[3];
          long long v31 = v41[4];
          uint64_t v32 = v42;
          long long v27 = v41[0];
          long long v28 = v41[1];
          LOBYTE(v33) = v17;
          BYTE1(v33) = v20 & 1;
          return outlined init with take of BarItemView((uint64_t)&v27, a4);
        }
        uint64_t v22 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v39, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBB718]);
        _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v40, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, v22);
        outlined destroy of ToolbarStorage.Entry((uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
        outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v26);
LABEL_11:
        outlined destroy of (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?)((uint64_t)&v27, &lazy cache variable for type metadata for (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?), &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID);
        char v20 = 1;
        goto LABEL_12;
      }
      uint64_t v21 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v39, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBB718]);
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v40, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, v21);
      outlined destroy of ToolbarStorage.Entry((uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
      if (*((void *)&v34 + 1)) {
        goto LABEL_11;
      }
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)&v27, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBB718]);
    }
    else
    {
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v40, &lazy cache variable for type metadata for ToolbarStorage.Entry.ID?, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBB718]);
      outlined destroy of ToolbarStorage.Entry((uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
    }
    char v20 = 0;
    goto LABEL_12;
  }
  uint64_t result = outlined destroy of ToolbarStorage.Entry((uint64_t)v13, type metadata accessor for ToolbarStorage.Entry.Kind);
  __break(1u);
  return result;
}

uint64_t closure #1 in ToolbarProxy.callAsFunction<A>(in:placement:range:)(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v7 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v27 - v18;
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(a1, (uint64_t)v13, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload())
  {
    char v20 = type metadata accessor for ToolbarStorage.Entry.Kind;
    uint64_t v21 = (uint64_t)v13;
  }
  else
  {
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v13, (uint64_t)v16, type metadata accessor for ToolbarStorage.Item);
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v16, (uint64_t)v19, type metadata accessor for ToolbarStorage.Item);
    if (specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)(v19 + 48), a3))
    {
      _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(a1, (uint64_t)v10, type metadata accessor for ToolbarStorage.Entry);
      uint64_t v22 = *a4;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a4 = v22;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v22 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
        *a4 = v22;
      }
      unint64_t v25 = v22[2];
      unint64_t v24 = v22[3];
      if (v25 >= v24 >> 1)
      {
        uint64_t v22 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v22);
        *a4 = v22;
      }
      void v22[2] = v25 + 1;
      outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v10, (uint64_t)v22+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(void *)(v8 + 72) * v25, type metadata accessor for ToolbarStorage.Entry);
    }
    char v20 = type metadata accessor for ToolbarStorage.Item;
    uint64_t v21 = (uint64_t)v19;
  }
  return outlined destroy of ToolbarStorage.Entry(v21, v20);
}

uint64_t closure #2 in ToolbarProxy.callAsFunction<A>(in:placement:range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(a1, (uint64_t)v6, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t result = outlined destroy of ToolbarStorage.Entry((uint64_t)v6, type metadata accessor for ToolbarStorage.Entry.Kind);
    __break(1u);
  }
  else
  {
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v6, (uint64_t)v9, type metadata accessor for ToolbarStorage.Item);
    outlined init with copy of _ViewList_View((uint64_t)(v9 + 104), (uint64_t)v14);
    outlined destroy of ToolbarStorage.Entry((uint64_t)v9, type metadata accessor for ToolbarStorage.Item);
    char v10 = *(unsigned char *)(a1 + *(int *)(type metadata accessor for ToolbarStorage.Entry(0) + 20));
    swift_unknownObjectWeakInit();
    uint64_t v11 = swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<UIBarButtonItem>(v11, (uint64_t)&v20, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>, (uint64_t (*)(uint64_t))type metadata accessor for UIBarButtonItem, MEMORY[0x1E4F41720]);
    _OWORD v16[2] = v14[2];
    v16[3] = v14[3];
    void v16[4] = v14[4];
    uint64_t v17 = v15;
    v16[0] = v14[0];
    v16[1] = v14[1];
    char v18 = v10;
    char v19 = 0;
    return outlined init with take of BarItemView((uint64_t)v16, a2);
  }
  return result;
}

uint64_t ToolbarProxy.visibility(in:)(uint64_t a1)
{
  ToolbarProxy.appearance(in:)(a1, (uint64_t)v14);
  int v2 = v14[0];
  swift_release();
  swift_release();
  swift_release();
  if (v2 == 2) {
    return 2;
  }
  outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)v14);
  if (v15 == 3)
  {
    uint64_t v9 = *(void **)AGGraphGetInputValue();
    memset(v13, 0, 24);
    *(_OWORD *)((char *)&v13[1] + 8) = xmmword_18838A9E0;
  }
  else
  {
    if (v15)
    {
      outlined destroy of ToolbarPlacement.Role((uint64_t)v14);
      return 2;
    }
    id v3 = *(void **)AGGraphGetInputValue();
    memset(v13, 0, 24);
    *(_OWORD *)((char *)&v13[1] + 8) = xmmword_18838AA10;
    id v4 = v3;
    BOOL v5 = specialized ToolbarBridge.hasEntries(in:)((uint64_t)v13);

    outlined destroy of Toolbar.BarLocation((uint64_t)v13);
    if (v5) {
      return 1;
    }
    uint64_t v6 = *(void **)AGGraphGetInputValue();
    memset(v13, 0, 24);
    *(_OWORD *)((char *)&v13[1] + 8) = xmmword_188382680;
    id v7 = v6;
    BOOL v8 = specialized ToolbarBridge.hasEntries(in:)((uint64_t)v13);

    outlined destroy of Toolbar.BarLocation((uint64_t)v13);
    if (v8) {
      return 1;
    }
    uint64_t v9 = *(void **)AGGraphGetInputValue();
    memset(v13, 0, 40);
  }
  id v10 = v9;
  BOOL v11 = specialized ToolbarBridge.hasEntries(in:)((uint64_t)v13);

  outlined destroy of Toolbar.BarLocation((uint64_t)v13);
  if (v11) {
    return 1;
  }
  return 2;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ToolbarScopeModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ToolbarScopeModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type ToolbarScopeModifier and conformance ToolbarScopeModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

void protocol witness for ViewModifier.body(content:) in conformance ToolbarScopeModifier()
{
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance ToolbarScopeModifier()
{
  return PreferencesInputs.remove<A>(_:)();
}

uint64_t type metadata accessor for ToolbarReader()
{
  return swift_getGenericMetadata();
}

uint64_t protocol witness for Rule.value.getter in conformance BarItemModifier.Transform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  int v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in BarItemModifier.Transform.value.getter;
  *(void *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance BarItemModifier()
{
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BarEdgeReader<A>()
{
  return protocol witness for static View._viewListCount(inputs:) in conformance ViewThatFits<A>();
}

void protocol witness for View.body.getter in conformance BarEdgeReader<A>()
{
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance BarEdgeInput(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 4);
  uint64_t result = *(unsigned __int8 *)(a2 + 4);
  if ((v3 & 1) == 0) {
    return (*(_DWORD *)a1 == *(_DWORD *)a2) & ~result;
  }
  return result;
}

uint64_t partial apply for closure #1 in ToolbarProxy.callAsFunction(in:placement:showSeparator:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in ToolbarProxy.callAsFunction(in:placement:showSeparator:)(a1, a2, *(void *)(v2 + 16), *(void ***)(v2 + 24));
}

uint64_t sub_187F796EC@<X0>(uint64_t a1@<X8>)
{
  return ToolbarStorage.Entry.id.getter(a1);
}

uint64_t sub_187F79710()
{
  if (*(void *)(v0 + 48))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 24);
    if (*(unsigned char *)(v0 + 104) == 1) {
      __swift_destroy_boxed_opaque_existential_1(v0 + 64);
    }
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ToolbarProxy.callAsFunction(in:placement:showSeparator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in ToolbarProxy.callAsFunction(in:placement:showSeparator:)(a1, *(unsigned char *)(v2 + 16), v2 + 24, a2);
}

unint64_t lazy protocol witness table accessor for type [ToolbarStorage.Entry] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [ToolbarStorage.Entry] and conformance [A];
  if (!lazy protocol witness table cache variable for type [ToolbarStorage.Entry] and conformance [A])
  {
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [ToolbarStorage.Entry] and conformance [A]);
  }
  return result;
}

uint64_t outlined init with take of BarItemView(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v6 = *(_OWORD *)(a1 + 64);
  *(void *)(a2 + 80) = *(void *)(a1 + 80);
  *(_OWORD *)(a2 + 48) = v5;
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 88);
  swift_unknownObjectWeakTakeInit();
  return a2;
}

uint64_t outlined destroy of (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?)(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for (ToolbarStorage.Entry.ID?, ToolbarStorage.Entry.ID?)(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for ToolbarStorage.Entry.ID?(255, a3, a4, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t partial apply for closure #1 in ToolbarProxy.count(in:placement:)(uint64_t a1)
{
  return closure #1 in ToolbarProxy.count(in:placement:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_187F7AF94()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI4ViewPAAE36accessibilityShowsLargeContentVieweryQrAA013AccessibilityfgC8BehaviorOFyAA0ifgC4TreeOzcfU_TA_0(uint64_t a1)
{
  return closure #1 in View.accessibilityShowsLargeContentViewer(_:)(a1, *(unsigned __int8 *)(v1 + 16));
}

ValueMetadata *type metadata accessor for ToolbarProxy.Value()
{
  return &type metadata for ToolbarProxy.Value;
}

uint64_t getEnumTagSinglePayload for ToolbarReader(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187F7B108);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ToolbarReader(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x187F7B2FCLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          char v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *char v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

unsigned char *assignWithCopy for BarItemModifier(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

unsigned char *initializeWithTake for BarItemModifier(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakTakeInit();
  return a1;
}

unsigned char *assignWithTake for BarItemModifier(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for BarItemModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[16]) {
    return (*(_DWORD *)a1 + 254);
  }
  if (*a1 <= 2u) {
    int v3 = 2;
  }
  else {
    int v3 = *a1;
  }
  int v4 = v3 - 3;
  if (*a1 < 2u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t sub_187F7B408()
{
  return lazy protocol witness table accessor for type BothFeatures<_SemanticFeature_v4, InferredToolbarUserDefaultFeature> and conformance BothFeatures<A, B>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)>>);
}

_UNKNOWN **base witness table accessor for ViewModifier in BarItemModifier()
{
  return &protocol witness table for BarItemModifier;
}

_UNKNOWN **base witness table accessor for View in ToolbarReader<A, B>()
{
  return &protocol witness table for ToolbarReader<A, B>;
}

_UNKNOWN **base witness table accessor for ViewModifier in ToolbarScopeModifier()
{
  return &protocol witness table for ToolbarScopeModifier;
}

unint64_t lazy protocol witness table accessor for type ToolbarScopeModifier and conformance ToolbarScopeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarScopeModifier and conformance ToolbarScopeModifier;
  if (!lazy protocol witness table cache variable for type ToolbarScopeModifier and conformance ToolbarScopeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarScopeModifier and conformance ToolbarScopeModifier);
  }
  return result;
}

uint64_t type metadata accessor for ToolbarReader.ToolbarConfiguration()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type PreferenceValueAttribute<ToolbarKey> and conformance PreferenceValueAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PreferenceValueAttribute<ToolbarKey> and conformance PreferenceValueAttribute<A>;
  if (!lazy protocol witness table cache variable for type PreferenceValueAttribute<ToolbarKey> and conformance PreferenceValueAttribute<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(255, &lazy cache variable for type metadata for PreferenceValueAttribute<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F40DB8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceValueAttribute<ToolbarKey> and conformance PreferenceValueAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreferenceValueAttribute<SearchKey> and conformance PreferenceValueAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PreferenceValueAttribute<SearchKey> and conformance PreferenceValueAttribute<A>;
  if (!lazy protocol witness table cache variable for type PreferenceValueAttribute<SearchKey> and conformance PreferenceValueAttribute<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(255, &lazy cache variable for type metadata for PreferenceValueAttribute<SearchKey>, (uint64_t)&type metadata for SearchKey, (uint64_t)&protocol witness table for SearchKey, MEMORY[0x1E4F40DB8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceValueAttribute<SearchKey> and conformance PreferenceValueAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreferenceValueAttribute<NavigationBarAppearanceKey> and conformance PreferenceValueAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PreferenceValueAttribute<NavigationBarAppearanceKey> and conformance PreferenceValueAttribute<A>;
  if (!lazy protocol witness table cache variable for type PreferenceValueAttribute<NavigationBarAppearanceKey> and conformance PreferenceValueAttribute<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(255, (unint64_t *)&lazy cache variable for type metadata for PreferenceValueAttribute<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey, MEMORY[0x1E4F40DB8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceValueAttribute<NavigationBarAppearanceKey> and conformance PreferenceValueAttribute<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreferenceValueAttribute<BottomBarAppearanceKey> and conformance PreferenceValueAttribute<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PreferenceValueAttribute<BottomBarAppearanceKey> and conformance PreferenceValueAttribute<A>;
  if (!lazy protocol witness table cache variable for type PreferenceValueAttribute<BottomBarAppearanceKey> and conformance PreferenceValueAttribute<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(255, &lazy cache variable for type metadata for PreferenceValueAttribute<BottomBarAppearanceKey>, (uint64_t)&type metadata for BottomBarAppearanceKey, (uint64_t)&protocol witness table for BottomBarAppearanceKey, MEMORY[0x1E4F40DB8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreferenceValueAttribute<BottomBarAppearanceKey> and conformance PreferenceValueAttribute<A>);
  }
  return result;
}

uint64_t type metadata accessor for ToolbarReader.ApplyUpdatesToExternalTarget()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ToolbarReader.PrimitiveReader()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ToolbarReader.MakePrimitiveReader()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187F7B73C(uint64_t a1)
{
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOcTm_0(a1, (uint64_t)v2, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  return EnvironmentValues.toolbarUpdateContext.setter((uint64_t)v2);
}

uint64_t type metadata accessor for ToolbarReader.MakeAppearances()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ToolbarReader.UpdateToolbarBridge()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ToolbarReader.MakeView()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarUpdateContextKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarUpdateContextKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for External<HorizontalEdge?>()
{
  if (!lazy cache variable for type metadata for External<HorizontalEdge?>)
  {
    type metadata accessor for ToolbarStorage.Entry.ID?(255, &lazy cache variable for type metadata for HorizontalEdge?, MEMORY[0x1E4F3F960], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<HorizontalEdge?>);
    }
  }
}

uint64_t sub_187F7BB08()
{
  return swift_deallocObject();
}

uint64_t sub_187F7BB18()
{
  swift_release();

  return swift_deallocObject();
}

void *type metadata accessor for BarItemModifier.Transform()
{
  return &unk_1ED4195F8;
}

void *type metadata accessor for BarEdgeInput()
{
  return &unk_1ED410A18;
}

void destroy for ToolbarReader.UpdateToolbarBridge(uint64_t a1)
{
}

uint64_t initializeWithCopy for ToolbarReader.UpdateToolbarBridge(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  int v3 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ToolbarReader.UpdateToolbarBridge(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  id v4 = *(void **)(a1 + 16);
  int v5 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v5;
  id v6 = v5;

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for ToolbarReader.UpdateToolbarBridge(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  id v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarReader.UpdateToolbarBridge(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarReader.UpdateToolbarBridge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 28) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

void type metadata completion function for ToolbarReader.PrimitiveReader()
{
  type metadata accessor for ToolbarStorage.SearchItem?(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for ToolbarReader();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarReader.PrimitiveReader(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  uint64_t v10 = v8;
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  int v13 = *(_DWORD *)(v12 + 80);
  uint64_t v14 = v13 & 0xF8;
  uint64_t v15 = v14 | 7;
  uint64_t v16 = *(void *)(v12 + 64);
  int v17 = (v13 | v8) & 0x100000;
  if ((v14 | 7 | v8) == 7 && v17 == 0)
  {
    uint64_t v19 = v8 | 7;
    unint64_t v112 = v8 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v20 = ((v8 + 16) & v112)
        + ((((v8 + 9) & ~(unint64_t)v8) + v11) & 0xFFFFFFFFFFFFFFFCLL);
    if (((v16 + 7) & 0xFFFFFFFFFFFFFFF8)
       + ((v14
         + 15
         + ((((v8 + 64) & ~v19)
           + ((((((((((v20 + 16) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
             + 191) & 0xFFFFFFFFFFFFFFF8)
           + 88
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v15)
       + 16 <= 0x18)
    {
      unint64_t v109 = ((v8 + 16) & v112)
           + ((((v8 + 9) & ~(unint64_t)v8) + v11) & 0xFFFFFFFFFFFFFFFCLL);
      uint64_t v111 = v6;
      unint64_t __n = ((((((((((v20 + 16) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
            + 191) & 0xFFFFFFFFFFFFFFF8)
          + 88;
      uint64_t v114 = v14 + 15;
      uint64_t v115 = v16 + 7;
      uint64_t v116 = *(void *)(*(void *)(a3 + 16) - 8);
      uint64_t v117 = *(void *)(a3 + 16);
      uint64_t v21 = ~v19;
      uint64_t v22 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v22;
      uint64_t v23 = a2[3];
      swift_bridgeObjectRetain();
      uint64_t v110 = v11;
      if (v23)
      {
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v23;
        *(void *)(a1 + 32) = a2[4];
        swift_retain();
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
        *(void *)(a1 + 32) = a2[4];
      }
      uint64_t v25 = ~v10;
      *(void *)(a1 + 40) = a2[5];
      *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
      *(void *)(a1 + 56) = a2[7];
      uint64_t v26 = (uint64_t)a2 + v19;
      uint64_t v27 = (a1 + v19 + 64) & v21;
      long long v28 = (void *)((v26 + 64) & v21);
      long long v29 = (uint64_t *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v9 & 0x80000000) != 0)
      {
        int v36 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((v10 + (((((unint64_t)v29 + v10 + 8) & v112) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v25, v9, v111);
        uint64_t v31 = ~v15;
        if (v36)
        {
LABEL_15:
          uint64_t v32 = v27;
          unint64_t v33 = __n;
          memcpy((void *)v27, v28, __n);
          long long v34 = v28;
          uint64_t v35 = v114;
LABEL_33:
          *(void *)(v33 + v32) = *(void *)((char *)v34 + v33);
          char v99 = (void *)((v33 + v32 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v100 = (void *)(((unint64_t)v34 + v33 + 15) & 0xFFFFFFFFFFFFFFF8);
          *char v99 = *v100;
          unint64_t v101 = ((unint64_t)v99 + v35) & v31;
          unint64_t v102 = ((unint64_t)v100 + v35) & v31;
          unint64_t v103 = *(void (**)(unint64_t, unint64_t, uint64_t))(v116 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v103(v101, v102, v117);
          Swift::String v104 = (void *)((v115 + v102) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v105 = v104[1];
          char v106 = (void *)((v115 + v101) & 0xFFFFFFFFFFFFFFF8);
          *char v106 = *v104;
          v106[1] = v105;
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v30 = *v29;
        if ((unint64_t)*v29 >= 0xFFFFFFFF) {
          LODWORD(v30) = -1;
        }
        uint64_t v31 = ~v15;
        if (v30 != -1) {
          goto LABEL_15;
        }
      }
      uint64_t v108 = v31;
      uint64_t v32 = v27;
      *(void *)uint64_t v27 = *v28;
      long long v37 = (void *)((v27 + 15) & 0xFFFFFFFFFFFFFFF8);
      *long long v37 = *v29;
      uint64_t v38 = ((unint64_t)v37 + v10 + 8) & v112;
      uint64_t v39 = ((unint64_t)v29 + v10 + 8) & v112;
      *(unsigned char *)uint64_t v38 = *(unsigned char *)v39;
      *(unsigned char *)(v38 | 1) = *(unsigned char *)(v39 | 1);
      *(unsigned char *)(v38 | 2) = *(unsigned char *)(v39 | 2);
      *(unsigned char *)(v38 | 3) = *(unsigned char *)(v39 | 3);
      unint64_t v40 = (v38 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v41 = (v39 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v42 = *(_DWORD *)v41;
      *(unsigned char *)(v40 + 4) = *(unsigned char *)(v41 + 4);
      *(_DWORD *)unint64_t v40 = v42;
      uint64_t v43 = (v10 + 5 + v40) & v25;
      uint64_t v44 = (v10 + 5 + v41) & v25;
      unint64_t v45 = (unint64_t)v28;
      int v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
      swift_retain();
      swift_retain();
      v46(v43, v44, v111);
      *(unsigned char *)(v43 + v110) = *(unsigned char *)(v44 + v110);
      unint64_t v47 = (v43 + v110) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v48 = (v44 + v110) & 0xFFFFFFFFFFFFFFFCLL;
      int v49 = *(_DWORD *)(v48 + 4);
      *(unsigned char *)(v47 + 8) = *(unsigned char *)(v48 + 8);
      *(_DWORD *)(v47 + 4) = v49;
      uint64_t v50 = (void *)(((v27 | 7) + v109 + 9) & 0xFFFFFFFFFFFFFFF8);
      long long v34 = (void *)v45;
      char v51 = (void *)(((v45 | 7) + v109 + 9) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v50 = *v51;
      unint64_t v52 = ((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v53 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v54 = *(unsigned __int8 *)(v53 + 8);
      swift_bridgeObjectRetain();
      if (v54 > 1)
      {
        uint64_t v57 = *(void *)v53;
        *(unsigned char *)(v52 + 8) = *(unsigned char *)(v53 + 8);
        *(void *)unint64_t v52 = v57;
      }
      else
      {
        char v55 = v54 != 0;
        uint64_t v56 = *(void *)v53;
        outlined copy of PlatformItemCollection.Storage(v56, v55);
        *(void *)unint64_t v52 = v56;
        *(unsigned char *)(v52 + 8) = v55;
      }
      unint64_t v58 = ((unint64_t)v50 + 31) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v59 = ((unint64_t)v51 + 31) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v60 = *(unsigned __int8 *)(v59 + 8);
      if (v60 > 1)
      {
        uint64_t v63 = *(void *)v59;
        *(unsigned char *)(v58 + 8) = *(unsigned char *)(v59 + 8);
        *(void *)unint64_t v58 = v63;
      }
      else
      {
        BOOL v61 = v60 != 0;
        uint64_t v62 = *(void *)v59;
        outlined copy of PlatformItemCollection.Storage(*(void *)v59, v60 != 0);
        *(void *)unint64_t v58 = v62;
        *(unsigned char *)(v58 + 8) = v61;
      }
      unint64_t v64 = ((unint64_t)v50 + 47) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v65 = ((unint64_t)v51 + 47) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v66 = *(void *)v65;
      uint64_t v67 = *(void *)(v65 + 8);
      char v68 = *(unsigned char *)(v65 + 16);
      outlined copy of Text.Storage(*(void *)v65, v67, v68);
      *(void *)unint64_t v64 = v66;
      *(void *)(v64 + 8) = v67;
      *(unsigned char *)(v64 + 16) = v68;
      *(void *)(v64 + 24) = *(void *)(v65 + 24);
      uint64_t v69 = (void *)((v64 + 39) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v70 = (void *)((v65 + 39) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v69 = *v70;
      v69[1] = v70[1];
      unint64_t v71 = ((unint64_t)v69 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v72 = ((unint64_t)v70 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v73 = *(void *)v72;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      if (v73 < 0xFFFFFFFF)
      {
        long long v77 = *(_OWORD *)(v72 + 16);
        *(_OWORD *)unint64_t v71 = *(_OWORD *)v72;
        *(_OWORD *)(v71 + 16) = v77;
        long long v78 = *(_OWORD *)(v72 + 32);
        long long v79 = *(_OWORD *)(v72 + 48);
        long long v80 = *(_OWORD *)(v72 + 64);
        *(void *)(v71 + 80) = *(void *)(v72 + 80);
        *(_OWORD *)(v71 + 48) = v79;
        *(_OWORD *)(v71 + 64) = v80;
        *(_OWORD *)(v71 + 32) = v78;
      }
      else
      {
        uint64_t v74 = *(void *)(v72 + 8);
        *(void *)unint64_t v71 = v73;
        *(void *)(v71 + 8) = v74;
        *(_DWORD *)(v71 + 16) = *(_DWORD *)(v72 + 16);
        *(void *)(v71 + 24) = *(void *)(v72 + 24);
        uint64_t v75 = *(void **)(v72 + 32);
        *(void *)(v71 + 32) = v75;
        *(void *)(v71 + 40) = *(void *)(v72 + 40);
        *(_DWORD *)(v71 + 48) = *(_DWORD *)(v72 + 48);
        *(void *)(v71 + 56) = *(void *)(v72 + 56);
        *(_DWORD *)(v71 + 64) = *(_DWORD *)(v72 + 64);
        *(_DWORD *)(v71 + 68) = *(_DWORD *)(v72 + 68);
        *(_DWORD *)(v71 + 72) = *(_DWORD *)(v72 + 72);
        *(_DWORD *)(v71 + 76) = *(_DWORD *)(v72 + 76);
        *(void *)(v71 + 80) = *(void *)(v72 + 80);
        id v76 = v75;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      unint64_t v81 = (v71 + 95) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v82 = (v72 + 95) & 0xFFFFFFFFFFFFFFF8;
      if (*(void *)v82 < 0xFFFFFFFFuLL)
      {
        long long v86 = *(_OWORD *)(v82 + 16);
        *(_OWORD *)unint64_t v81 = *(_OWORD *)v82;
        *(_OWORD *)(v81 + 16) = v86;
        long long v87 = *(_OWORD *)(v82 + 32);
        long long v88 = *(_OWORD *)(v82 + 48);
        long long v89 = *(_OWORD *)(v82 + 64);
        *(void *)(v81 + 80) = *(void *)(v82 + 80);
        *(_OWORD *)(v81 + 48) = v88;
        *(_OWORD *)(v81 + 64) = v89;
        *(_OWORD *)(v81 + 32) = v87;
      }
      else
      {
        uint64_t v83 = *(void *)(v82 + 8);
        *(void *)unint64_t v81 = *(void *)v82;
        *(void *)(v81 + 8) = v83;
        *(_DWORD *)(v81 + 16) = *(_DWORD *)(v82 + 16);
        *(void *)(v81 + 24) = *(void *)(v82 + 24);
        uint64_t v84 = *(void **)(v82 + 32);
        *(void *)(v81 + 32) = v84;
        *(void *)(v81 + 40) = *(void *)(v82 + 40);
        *(_DWORD *)(v81 + 48) = *(_DWORD *)(v82 + 48);
        *(void *)(v81 + 56) = *(void *)(v82 + 56);
        *(_DWORD *)(v81 + 64) = *(_DWORD *)(v82 + 64);
        *(_DWORD *)(v81 + 68) = *(_DWORD *)(v82 + 68);
        *(_DWORD *)(v81 + 72) = *(_DWORD *)(v82 + 72);
        *(_DWORD *)(v81 + 76) = *(_DWORD *)(v82 + 76);
        *(void *)(v81 + 80) = *(void *)(v82 + 80);
        id v85 = v84;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      *(unsigned char *)(v81 + 88) = *(unsigned char *)(v82 + 88);
      unint64_t v90 = (v71 + 191) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v91 = (v72 + 191) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v33 = __n;
      uint64_t v35 = v114;
      if (*(void *)v91 < 0xFFFFFFFFuLL)
      {
        long long v95 = *(_OWORD *)(v91 + 16);
        *(_OWORD *)unint64_t v90 = *(_OWORD *)v91;
        *(_OWORD *)(v90 + 16) = v95;
        long long v96 = *(_OWORD *)(v91 + 32);
        long long v97 = *(_OWORD *)(v91 + 48);
        long long v98 = *(_OWORD *)(v91 + 64);
        *(void *)(v90 + 80) = *(void *)(v91 + 80);
        *(_OWORD *)(v90 + 48) = v97;
        *(_OWORD *)(v90 + 64) = v98;
        *(_OWORD *)(v90 + 32) = v96;
      }
      else
      {
        uint64_t v92 = *(void *)(v91 + 8);
        *(void *)unint64_t v90 = *(void *)v91;
        *(void *)(v90 + 8) = v92;
        *(_DWORD *)(v90 + 16) = *(_DWORD *)(v91 + 16);
        *(void *)(v90 + 24) = *(void *)(v91 + 24);
        uint64_t v93 = *(void **)(v91 + 32);
        *(void *)(v90 + 32) = v93;
        *(void *)(v90 + 40) = *(void *)(v91 + 40);
        *(_DWORD *)(v90 + 48) = *(_DWORD *)(v91 + 48);
        *(void *)(v90 + 56) = *(void *)(v91 + 56);
        *(_DWORD *)(v90 + 64) = *(_DWORD *)(v91 + 64);
        *(_DWORD *)(v90 + 68) = *(_DWORD *)(v91 + 68);
        *(_DWORD *)(v90 + 72) = *(_DWORD *)(v91 + 72);
        *(_DWORD *)(v90 + 76) = *(_DWORD *)(v91 + 76);
        *(void *)(v90 + 80) = *(void *)(v91 + 80);
        id v94 = v93;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      uint64_t v31 = v108;
      goto LABEL_33;
    }
  }
  uint64_t v24 = *a2;
  *(void *)a1 = *a2;
  a1 = v24 + (((v15 | v8) + 16) & ~(v15 | v8));
LABEL_34:
  swift_retain();
  return a1;
}

uint64_t destroy for ToolbarReader.PrimitiveReader(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = (a1 + (v6 | 7) + 64) & ~(v6 | 7);
  unint64_t v8 = *(_DWORD *)(v5 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v9 = ~v6;
  unint64_t v10 = ((v6 + 16) & v8) + ((((v6 + 9) & ~v6) + *(void *)(v5 + 64)) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v11 = (uint64_t *)((v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    unint64_t v13 = v10 + 9;
    if ((*(unsigned int (**)(unint64_t))(v5 + 48))((v6
                                                                     + (((((unint64_t)v11 + v6 + 8) & v8) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                     + 5) & v9))
    {
LABEL_7:
      unint64_t v14 = v13 + 7;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v12 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    unint64_t v13 = v10 + 9;
    if (v12 != -1) {
      goto LABEL_7;
    }
  }
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + (((((unint64_t)v11 + v6 + 8) & v8) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v9, v4);
  unint64_t v14 = v13 + 7;
  unint64_t v15 = (v13 + 7 + v7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v17 = *(unsigned __int8 *)(v16 + 8);
  if (v17 <= 1) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v16, v17 != 0);
  }
  unint64_t v18 = (v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v19 = *(unsigned __int8 *)(v18 + 8);
  if (v19 <= 1) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v18, v19 != 0);
  }
  unint64_t v20 = (v15 + 47) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v21 = (((v20 + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v21 >= 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  unint64_t v22 = (v21 + 95) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v22 >= 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  unint64_t v23 = (v21 + 191) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v23 >= 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v24 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v25 = *(_DWORD *)(v24 + 80) & 0xF8 | 7;
  (*(void (**)(unint64_t))(v24 + 8))((((v7
                                                        + (((((((((v14 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                                                              + 39) & 0xFFFFFFFFFFFFFFF8)
                                                            + 23) & 0xFFFFFFFFFFFFFFF8)
                                                          + 191) & 0xFFFFFFFFFFFFFFF8)
                                                        + 103) & 0xFFFFFFFFFFFFFFF8)
                                                      + v25
                                                      + 8) & ~v25);

  return swift_release();
}

uint64_t initializeWithCopy for ToolbarReader.PrimitiveReader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  uint64_t v103 = a3;
  if (v7)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = (v11 | 7) + 64;
  uint64_t v104 = a1;
  uint64_t v105 = (void *)((v12 + a1) & ~(v11 | 7));
  uint64_t v13 = (v12 + a2) & ~(v11 | 7);
  unint64_t v14 = *(_DWORD *)(v9 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v15 = ~v11;
  uint64_t v101 = *(void *)(v9 + 64);
  unint64_t v102 = ((v11 + 16) & v14) + ((((v11 + 9) & ~v11) + v101) & 0xFFFFFFFFFFFFFFFCLL) + 16;
  unint64_t v16 = ((((((((v102 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 191) & 0xFFFFFFFFFFFFFFF8;
  char v106 = (void *)v13;
  unsigned int v17 = (uint64_t *)((v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((v10 & 0x80000000) != 0)
  {
    int v23 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))((v11 + (((((unint64_t)v17 + v11 + 8) & v14) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v15, v10, v8);
    size_t v19 = v16 + 88;
    if (v23)
    {
LABEL_8:
      unint64_t v20 = v105;
      unint64_t v21 = v106;
      memcpy(v105, v106, v19);
      uint64_t v22 = v103;
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    size_t v19 = v16 + 88;
    if (v18 != -1) {
      goto LABEL_8;
    }
  }
  *uint64_t v105 = *v106;
  uint64_t v24 = (void *)(((unint64_t)v105 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v17;
  uint64_t v25 = ((unint64_t)v24 + v11 + 8) & v14;
  uint64_t v26 = ((unint64_t)v17 + v11 + 8) & v14;
  *(unsigned char *)uint64_t v25 = *(unsigned char *)v26;
  *(unsigned char *)(v25 | 1) = *(unsigned char *)(v26 | 1);
  *(unsigned char *)(v25 | 2) = *(unsigned char *)(v26 | 2);
  *(unsigned char *)(v25 | 3) = *(unsigned char *)(v26 | 3);
  unint64_t v27 = (v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v28 = (v26 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  int v29 = *(_DWORD *)v28;
  *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
  *(_DWORD *)unint64_t v27 = v29;
  uint64_t v30 = (v11 + 5 + v27) & v15;
  uint64_t v31 = (v11 + 5 + v28) & v15;
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  swift_retain();
  swift_retain();
  v32(v30, v31, v8);
  *(unsigned char *)(v30 + v101) = *(unsigned char *)(v31 + v101);
  unint64_t v33 = (v30 + v101) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v34 = (v31 + v101) & 0xFFFFFFFFFFFFFFFCLL;
  int v35 = *(_DWORD *)(v34 + 4);
  *(unsigned char *)(v33 + 8) = *(unsigned char *)(v34 + 8);
  *(_DWORD *)(v33 + 4) = v35;
  int v36 = (void *)(((unint64_t)v105 + v102) & 0xFFFFFFFFFFFFFFF8);
  long long v37 = (void *)(((unint64_t)v106 + v102) & 0xFFFFFFFFFFFFFFF8);
  void *v36 = *v37;
  unint64_t v38 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = ((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v40 = *(unsigned __int8 *)(v39 + 8);
  swift_bridgeObjectRetain();
  if (v40 > 1)
  {
    uint64_t v43 = *(void *)v39;
    *(unsigned char *)(v38 + 8) = *(unsigned char *)(v39 + 8);
    *(void *)unint64_t v38 = v43;
  }
  else
  {
    char v41 = v40 != 0;
    uint64_t v42 = *(void *)v39;
    outlined copy of PlatformItemCollection.Storage(*(void *)v39, v41);
    *(void *)unint64_t v38 = v42;
    *(unsigned char *)(v38 + 8) = v41;
  }
  unint64_t v44 = ((unint64_t)v36 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = ((unint64_t)v37 + 31) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v46 = *(unsigned __int8 *)(v45 + 8);
  if (v46 > 1)
  {
    uint64_t v49 = *(void *)v45;
    *(unsigned char *)(v44 + 8) = *(unsigned char *)(v45 + 8);
    *(void *)unint64_t v44 = v49;
  }
  else
  {
    BOOL v47 = v46 != 0;
    uint64_t v48 = *(void *)v45;
    outlined copy of PlatformItemCollection.Storage(*(void *)v45, v46 != 0);
    *(void *)unint64_t v44 = v48;
    *(unsigned char *)(v44 + 8) = v47;
  }
  unint64_t v50 = ((unint64_t)v36 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v51 = ((unint64_t)v37 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v52 = *(void *)v51;
  uint64_t v53 = *(void *)(v51 + 8);
  char v54 = *(unsigned char *)(v51 + 16);
  outlined copy of Text.Storage(*(void *)v51, v53, v54);
  *(void *)unint64_t v50 = v52;
  *(void *)(v50 + 8) = v53;
  *(unsigned char *)(v50 + 16) = v54;
  *(void *)(v50 + 24) = *(void *)(v51 + 24);
  char v55 = (void *)((v50 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v56 = (void *)((v51 + 39) & 0xFFFFFFFFFFFFFFF8);
  *char v55 = *v56;
  v55[1] = v56[1];
  unint64_t v57 = ((unint64_t)v55 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v58 = ((unint64_t)v56 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v59 = *(void *)v58;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v59 < 0xFFFFFFFF)
  {
    long long v63 = *(_OWORD *)(v58 + 16);
    *(_OWORD *)unint64_t v57 = *(_OWORD *)v58;
    *(_OWORD *)(v57 + 16) = v63;
    long long v64 = *(_OWORD *)(v58 + 32);
    long long v65 = *(_OWORD *)(v58 + 48);
    long long v66 = *(_OWORD *)(v58 + 64);
    *(void *)(v57 + 80) = *(void *)(v58 + 80);
    *(_OWORD *)(v57 + 48) = v65;
    *(_OWORD *)(v57 + 64) = v66;
    *(_OWORD *)(v57 + 32) = v64;
  }
  else
  {
    uint64_t v60 = *(void *)(v58 + 8);
    *(void *)unint64_t v57 = v59;
    *(void *)(v57 + 8) = v60;
    *(_DWORD *)(v57 + 16) = *(_DWORD *)(v58 + 16);
    *(void *)(v57 + 24) = *(void *)(v58 + 24);
    BOOL v61 = *(void **)(v58 + 32);
    *(void *)(v57 + 32) = v61;
    *(void *)(v57 + 40) = *(void *)(v58 + 40);
    *(_DWORD *)(v57 + 48) = *(_DWORD *)(v58 + 48);
    *(void *)(v57 + 56) = *(void *)(v58 + 56);
    *(_DWORD *)(v57 + 64) = *(_DWORD *)(v58 + 64);
    *(_DWORD *)(v57 + 68) = *(_DWORD *)(v58 + 68);
    *(_DWORD *)(v57 + 72) = *(_DWORD *)(v58 + 72);
    *(_DWORD *)(v57 + 76) = *(_DWORD *)(v58 + 76);
    *(void *)(v57 + 80) = *(void *)(v58 + 80);
    id v62 = v61;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  unint64_t v67 = (v57 + 95) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v68 = (v58 + 95) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v68 < 0xFFFFFFFFuLL)
  {
    long long v72 = *(_OWORD *)(v68 + 16);
    *(_OWORD *)unint64_t v67 = *(_OWORD *)v68;
    *(_OWORD *)(v67 + 16) = v72;
    long long v73 = *(_OWORD *)(v68 + 32);
    long long v74 = *(_OWORD *)(v68 + 48);
    long long v75 = *(_OWORD *)(v68 + 64);
    *(void *)(v67 + 80) = *(void *)(v68 + 80);
    *(_OWORD *)(v67 + 48) = v74;
    *(_OWORD *)(v67 + 64) = v75;
    *(_OWORD *)(v67 + 32) = v73;
  }
  else
  {
    uint64_t v69 = *(void *)(v68 + 8);
    *(void *)unint64_t v67 = *(void *)v68;
    *(void *)(v67 + 8) = v69;
    *(_DWORD *)(v67 + 16) = *(_DWORD *)(v68 + 16);
    *(void *)(v67 + 24) = *(void *)(v68 + 24);
    uint64_t v70 = *(void **)(v68 + 32);
    *(void *)(v67 + 32) = v70;
    *(void *)(v67 + 40) = *(void *)(v68 + 40);
    *(_DWORD *)(v67 + 48) = *(_DWORD *)(v68 + 48);
    *(void *)(v67 + 56) = *(void *)(v68 + 56);
    *(_DWORD *)(v67 + 64) = *(_DWORD *)(v68 + 64);
    *(_DWORD *)(v67 + 68) = *(_DWORD *)(v68 + 68);
    *(_DWORD *)(v67 + 72) = *(_DWORD *)(v68 + 72);
    *(_DWORD *)(v67 + 76) = *(_DWORD *)(v68 + 76);
    *(void *)(v67 + 80) = *(void *)(v68 + 80);
    id v71 = v70;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(v67 + 88) = *(unsigned char *)(v68 + 88);
  unint64_t v76 = (v57 + 191) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v77 = (v58 + 191) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = v103;
  unint64_t v20 = v105;
  unint64_t v21 = v106;
  if (*(void *)v77 < 0xFFFFFFFFuLL)
  {
    long long v81 = *(_OWORD *)(v77 + 16);
    *(_OWORD *)unint64_t v76 = *(_OWORD *)v77;
    *(_OWORD *)(v76 + 16) = v81;
    long long v82 = *(_OWORD *)(v77 + 32);
    long long v83 = *(_OWORD *)(v77 + 48);
    long long v84 = *(_OWORD *)(v77 + 64);
    *(void *)(v76 + 80) = *(void *)(v77 + 80);
    *(_OWORD *)(v76 + 48) = v83;
    *(_OWORD *)(v76 + 64) = v84;
    *(_OWORD *)(v76 + 32) = v82;
  }
  else
  {
    uint64_t v78 = *(void *)(v77 + 8);
    *(void *)unint64_t v76 = *(void *)v77;
    *(void *)(v76 + 8) = v78;
    *(_DWORD *)(v76 + 16) = *(_DWORD *)(v77 + 16);
    *(void *)(v76 + 24) = *(void *)(v77 + 24);
    long long v79 = *(void **)(v77 + 32);
    *(void *)(v76 + 32) = v79;
    *(void *)(v76 + 40) = *(void *)(v77 + 40);
    *(_DWORD *)(v76 + 48) = *(_DWORD *)(v77 + 48);
    *(void *)(v76 + 56) = *(void *)(v77 + 56);
    *(_DWORD *)(v76 + 64) = *(_DWORD *)(v77 + 64);
    *(_DWORD *)(v76 + 68) = *(_DWORD *)(v77 + 68);
    *(_DWORD *)(v76 + 72) = *(_DWORD *)(v77 + 72);
    *(_DWORD *)(v76 + 76) = *(_DWORD *)(v77 + 76);
    *(void *)(v76 + 80) = *(void *)(v77 + 80);
    id v80 = v79;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
LABEL_25:
  *(void *)((char *)v20 + v19) = *(void *)((char *)v21 + v19);
  id v85 = (void *)(((unint64_t)v20 + v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v86 = (void *)(((unint64_t)v21 + v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v85 = *v86;
  uint64_t v87 = *(void *)(v22 + 16);
  long long v88 = *(void (**)(unint64_t, unint64_t, uint64_t))(*(void *)(v87 - 8) + 16);
  uint64_t v89 = *(void *)(v87 - 8) + 16;
  uint64_t v90 = *(_DWORD *)(*(void *)(v87 - 8) + 80) & 0xF8;
  uint64_t v91 = v90 + 15;
  unint64_t v92 = (unint64_t)v85 + v90 + 15;
  unint64_t v93 = ~v90 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v94 = v92 & v93;
  unint64_t v95 = ((unint64_t)v86 + v91) & v93;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v88(v94, v95, v87);
  uint64_t v96 = *(void *)(v89 + 48) + 7;
  long long v97 = (void *)((v96 + v94) & 0xFFFFFFFFFFFFFFF8);
  long long v98 = (void *)((v96 + v95) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v99 = v98[1];
  *long long v97 = *v98;
  v97[1] = v99;
  swift_retain();
  return v104;
}

void *assignWithCopy for ToolbarReader.PrimitiveReader(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *a1 = *(void *)a2;
  a1[1] = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + 2;
  uint64_t v7 = (_OWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  if (v5[3])
  {
    if (v8)
    {
      v5[2] = *(void *)(a2 + 16);
      swift_retain();
      swift_release();
      v5[3] = *(void *)(a2 + 24);
      swift_retain();
      swift_release();
      v5[4] = *(void *)(a2 + 32);
    }
    else
    {
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)(v5 + 2), &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
      uint64_t v9 = *(void *)(a2 + 32);
      *uint64_t v6 = *v7;
      v5[4] = v9;
    }
  }
  else if (v8)
  {
    v5[2] = *(void *)(a2 + 16);
    v5[3] = *(void *)(a2 + 24);
    v5[4] = *(void *)(a2 + 32);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v10 = *v7;
    v5[4] = *(void *)(a2 + 32);
    *uint64_t v6 = v10;
  }
  v5[5] = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((unsigned char *)v5 + 48) = *(unsigned char *)(a2 + 48);
  v5[7] = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = type metadata accessor for AttributedString();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(_DWORD *)(v12 + 80);
  uint64_t v15 = (v14 | 7) + 64;
  unint64_t v16 = (void *)(((unint64_t)v5 + v15) & ~(v14 | 7));
  uint64_t v17 = (v15 + a2) & ~(v14 | 7);
  unint64_t v18 = *(_DWORD *)(v12 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v19 = *(void *)(v12 + 64);
  size_t v20 = ((((((((((((v14 + 16) & v18) + ((((v14 + 9) & ~v14) + v19) & 0xFFFFFFFFFFFFFFFCLL) + 16) & 0xFFFFFFFFFFFFFFF8)
              + 47) & 0xFFFFFFFFFFFFFFF8)
            + 39) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 191) & 0xFFFFFFFFFFFFFFF8)
      + 88;
  unint64_t v21 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v216 = ((v14 + 16) & v18) + ((((v14 + 9) & ~v14) + v19) & 0xFFFFFFFFFFFFFFFCLL) + 16;
  v217 = (char *)v17;
  uint64_t v214 = v12;
  uint64_t v215 = v11;
  uint64_t v213 = ~v14;
  if ((v13 & 0x80000000) != 0)
  {
    uint64_t v205 = *(void *)(*(void *)(v11 - 8) + 64);
    uint64_t v37 = v11;
    size_t v210 = v20;
    unint64_t v38 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
    int v204 = v38((v14 + 5 + (((((unint64_t)v21 + v14 + 8) & v18) + 7) & 0xFFFFFFFFFFFFFFFCLL)) & ~v14, v13, v11);
    uint64_t v22 = (uint64_t *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v39 = v37;
    uint64_t v19 = v205;
    int v24 = v38((v14 + 5 + (((((unint64_t)v22 + v14 + 8) & v18) + 7) & 0xFFFFFFFFFFFFFFFCLL)) & ~v14, v13, v39);
    size_t v20 = v210;
    if (!v204) {
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v22 = (uint64_t *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = *v22;
    if ((unint64_t)*v22 >= 0xFFFFFFFF) {
      LODWORD(v23) = -1;
    }
    int v24 = v23 + 1;
    if (*v21 > 0xFFFFFFFEuLL)
    {
LABEL_12:
      if (v24)
      {
        swift_release();
        swift_release();
        (*(void (**)(unint64_t, uint64_t))(v214 + 8))((v14 + (((((unint64_t)v21 + v14 + 8) & v18) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v213, v215);
        uint64_t v25 = v16;
        unint64_t v26 = ((unint64_t)v16 + v216) & 0xFFFFFFFFFFFFFFF8;
        swift_bridgeObjectRelease();
        unint64_t v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
        unsigned int v28 = *(unsigned __int8 *)(v27 + 8);
        if (v28 <= 1) {
          outlined consume of PlatformItemCollection.Storage(*(void *)v27, v28 != 0);
        }
        unint64_t v29 = (v26 + 31) & 0xFFFFFFFFFFFFFFF8;
        unsigned int v30 = *(unsigned __int8 *)(v29 + 8);
        uint64_t v31 = v217;
        if (v30 <= 1) {
          outlined consume of PlatformItemCollection.Storage(*(void *)v29, v30 != 0);
        }
        unint64_t v32 = (v26 + 47) & 0xFFFFFFFFFFFFFFF8;
        outlined consume of Text.Storage(*(void *)v32, *(void *)(v32 + 8), *(unsigned char *)(v32 + 16));
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        unint64_t v33 = (((v32 + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
        if (*(void *)v33 >= 0xFFFFFFFFuLL)
        {

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
        }
        unint64_t v34 = (v33 + 95) & 0xFFFFFFFFFFFFFFF8;
        if (*(void *)v34 >= 0xFFFFFFFFuLL)
        {

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
        }
        unint64_t v35 = (v33 + 191) & 0xFFFFFFFFFFFFFFF8;
        if (*(void *)v35 >= 0xFFFFFFFFuLL)
        {

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
        }
        unint64_t v16 = v25;
        int v36 = v25;
        goto LABEL_27;
      }
      size_t v212 = v20;
      *unint64_t v16 = *(void *)v217;
      swift_retain();
      swift_release();
      *unint64_t v21 = *v22;
      swift_retain();
      swift_release();
      uint64_t v57 = ((unint64_t)v21 + v14 + 8) & v18;
      uint64_t v58 = ((unint64_t)v22 + v14 + 8) & v18;
      *(unsigned char *)uint64_t v57 = *(unsigned char *)v58;
      *(unsigned char *)(v57 | 1) = *(unsigned char *)(v58 | 1);
      *(unsigned char *)(v57 | 2) = *(unsigned char *)(v58 | 2);
      *(unsigned char *)(v57 | 3) = *(unsigned char *)(v58 | 3);
      unint64_t v59 = (v57 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v60 = (v58 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v61 = *(_DWORD *)v60;
      *(unsigned char *)(v59 + 4) = *(unsigned char *)(v60 + 4);
      *(_DWORD *)unint64_t v59 = v61;
      uint64_t v62 = (v14 + 5 + v59) & v213;
      uint64_t v63 = (v14 + 5 + v60) & v213;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v214 + 24))(v62, v63, v215);
      *(unsigned char *)(v62 + v19) = *(unsigned char *)(v63 + v19);
      unint64_t v64 = (v62 + v19) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v65 = (v63 + v19) & 0xFFFFFFFFFFFFFFFCLL;
      *(_DWORD *)(v64 + 4) = *(_DWORD *)(v65 + 4);
      *(unsigned char *)(v64 + 8) = *(unsigned char *)(v65 + 8);
      v209 = v16;
      long long v66 = (void *)(((unint64_t)v16 + v216) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v67 = (void *)((unint64_t)&v217[v216] & 0xFFFFFFFFFFFFFFF8);
      void *v66 = *v67;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      unint64_t v68 = ((unint64_t)v66 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v69 = ((unint64_t)v67 + 15) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v70 = *(unsigned __int8 *)(v68 + 8);
      unsigned int v71 = *(unsigned __int8 *)(v69 + 8);
      if (v70 > 1)
      {
        if (v71 <= 1)
        {
          BOOL v118 = v71 != 0;
          uint64_t v119 = *(void *)v69;
          outlined copy of PlatformItemCollection.Storage(*(void *)v69, v71 != 0);
          *(void *)unint64_t v68 = v119;
          *(unsigned char *)(v68 + 8) = v118;
          goto LABEL_51;
        }
      }
      else
      {
        if (v71 <= 1)
        {
          BOOL v72 = v71 != 0;
          uint64_t v73 = *(void *)v69;
          outlined copy of PlatformItemCollection.Storage(*(void *)v69, v71 != 0);
          uint64_t v74 = *(void *)v68;
          char v75 = *(unsigned char *)(v68 + 8);
          *(void *)unint64_t v68 = v73;
          *(unsigned char *)(v68 + 8) = v72;
          outlined consume of PlatformItemCollection.Storage(v74, v75);
          goto LABEL_51;
        }
        outlined consume of PlatformItemCollection.Storage(*(void *)v68, v70 & 1);
      }
      uint64_t v120 = *(void *)v69;
      *(unsigned char *)(v68 + 8) = *(unsigned char *)(v69 + 8);
      *(void *)unint64_t v68 = v120;
LABEL_51:
      unint64_t v121 = ((unint64_t)v66 + 31) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v122 = ((unint64_t)v67 + 31) & 0xFFFFFFFFFFFFFFF8;
      unsigned int v123 = *(unsigned __int8 *)(v121 + 8);
      unsigned int v124 = *(unsigned __int8 *)(v122 + 8);
      if (v123 > 1)
      {
        if (v124 <= 1)
        {
          BOOL v129 = v124 != 0;
          uint64_t v130 = *(void *)v122;
          outlined copy of PlatformItemCollection.Storage(*(void *)v122, v124 != 0);
          *(void *)unint64_t v121 = v130;
          *(unsigned char *)(v121 + 8) = v129;
          goto LABEL_58;
        }
      }
      else
      {
        if (v124 <= 1)
        {
          BOOL v125 = v124 != 0;
          uint64_t v126 = *(void *)v122;
          outlined copy of PlatformItemCollection.Storage(*(void *)v122, v124 != 0);
          uint64_t v127 = *(void *)v121;
          char v128 = *(unsigned char *)(v121 + 8);
          *(void *)unint64_t v121 = v126;
          *(unsigned char *)(v121 + 8) = v125;
          outlined consume of PlatformItemCollection.Storage(v127, v128);
          goto LABEL_58;
        }
        outlined consume of PlatformItemCollection.Storage(*(void *)v121, v123 & 1);
      }
      uint64_t v131 = *(void *)v122;
      *(unsigned char *)(v121 + 8) = *(unsigned char *)(v122 + 8);
      *(void *)unint64_t v121 = v131;
LABEL_58:
      uint64_t v132 = v5;
      unint64_t v133 = ((unint64_t)v66 + 47) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v134 = ((unint64_t)v67 + 47) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v135 = *(void *)v134;
      uint64_t v136 = *(void *)(v134 + 8);
      char v137 = *(unsigned char *)(v134 + 16);
      outlined copy of Text.Storage(*(void *)v134, v136, v137);
      uint64_t v138 = *(void *)v133;
      uint64_t v139 = *(void *)(v133 + 8);
      char v140 = *(unsigned char *)(v133 + 16);
      *(void *)unint64_t v133 = v135;
      *(void *)(v133 + 8) = v136;
      *(unsigned char *)(v133 + 16) = v137;
      outlined consume of Text.Storage(v138, v139, v140);
      *(void *)(v133 + 24) = *(void *)(v134 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v141 = (void *)((v133 + 39) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v142 = (void *)((v134 + 39) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v141 = *v142;
      swift_retain();
      swift_release();
      v141[1] = v142[1];
      swift_retain();
      swift_release();
      unint64_t v143 = ((unint64_t)v141 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v144 = ((unint64_t)v142 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v145 = *(void *)v144;
      if (*(void *)v143 < 0xFFFFFFFFuLL)
      {
        if (v145 < 0xFFFFFFFF)
        {
          long long v157 = *(_OWORD *)(v144 + 16);
          *(_OWORD *)unint64_t v143 = *(_OWORD *)v144;
          *(_OWORD *)(v143 + 16) = v157;
          long long v158 = *(_OWORD *)(v144 + 32);
          long long v159 = *(_OWORD *)(v144 + 48);
          long long v160 = *(_OWORD *)(v144 + 64);
          *(void *)(v143 + 80) = *(void *)(v144 + 80);
          *(_OWORD *)(v143 + 48) = v159;
          *(_OWORD *)(v143 + 64) = v160;
          *(_OWORD *)(v143 + 32) = v158;
        }
        else
        {
          uint64_t v150 = *(void *)(v144 + 8);
          *(void *)unint64_t v143 = v145;
          *(void *)(v143 + 8) = v150;
          *(_DWORD *)(v143 + 16) = *(_DWORD *)(v144 + 16);
          *(void *)(v143 + 24) = *(void *)(v144 + 24);
          uint64_t v151 = *(void **)(v144 + 32);
          *(void *)(v143 + 32) = v151;
          *(void *)(v143 + 40) = *(void *)(v144 + 40);
          *(_DWORD *)(v143 + 48) = *(_DWORD *)(v144 + 48);
          *(void *)(v143 + 56) = *(void *)(v144 + 56);
          *(_DWORD *)(v143 + 64) = *(_DWORD *)(v144 + 64);
          *(_DWORD *)(v143 + 68) = *(_DWORD *)(v144 + 68);
          *(_DWORD *)(v143 + 72) = *(_DWORD *)(v144 + 72);
          *(_DWORD *)(v143 + 76) = *(_DWORD *)(v144 + 76);
          *(void *)(v143 + 80) = *(void *)(v144 + 80);
          id v152 = v151;
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
        }
        size_t v20 = v212;
      }
      else
      {
        size_t v20 = v212;
        if (v145 < 0xFFFFFFFF)
        {

          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          long long v153 = *(_OWORD *)(v144 + 16);
          *(_OWORD *)unint64_t v143 = *(_OWORD *)v144;
          *(_OWORD *)(v143 + 16) = v153;
          long long v154 = *(_OWORD *)(v144 + 32);
          long long v155 = *(_OWORD *)(v144 + 48);
          long long v156 = *(_OWORD *)(v144 + 64);
          *(void *)(v143 + 80) = *(void *)(v144 + 80);
          *(_OWORD *)(v143 + 48) = v155;
          *(_OWORD *)(v143 + 64) = v156;
          *(_OWORD *)(v143 + 32) = v154;
        }
        else
        {
          uint64_t v146 = *(void *)(v144 + 8);
          *(void *)unint64_t v143 = v145;
          *(void *)(v143 + 8) = v146;
          *(_DWORD *)(v143 + 16) = *(_DWORD *)(v144 + 16);
          *(void *)(v143 + 24) = *(void *)(v144 + 24);
          uint64_t v147 = *(void **)(v144 + 32);
          uint64_t v148 = *(void **)(v143 + 32);
          *(void *)(v143 + 32) = v147;
          id v149 = v147;

          *(void *)(v143 + 40) = *(void *)(v144 + 40);
          swift_retain();
          swift_release();
          *(_DWORD *)(v143 + 48) = *(_DWORD *)(v144 + 48);
          *(void *)(v143 + 56) = *(void *)(v144 + 56);
          swift_retain();
          swift_release();
          *(_DWORD *)(v143 + 64) = *(_DWORD *)(v144 + 64);
          *(_DWORD *)(v143 + 68) = *(_DWORD *)(v144 + 68);
          *(_DWORD *)(v143 + 72) = *(_DWORD *)(v144 + 72);
          *(_DWORD *)(v143 + 76) = *(_DWORD *)(v144 + 76);
          *(void *)(v143 + 80) = *(void *)(v144 + 80);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
      }
      unint64_t v161 = (v143 + 95) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v162 = (v144 + 95) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v163 = *(void *)v162;
      if (*(void *)v161 < 0xFFFFFFFFuLL)
      {
        if (v163 >= 0xFFFFFFFF)
        {
          uint64_t v168 = *(void *)(v162 + 8);
          *(void *)unint64_t v161 = v163;
          *(void *)(v161 + 8) = v168;
          *(_DWORD *)(v161 + 16) = *(_DWORD *)(v162 + 16);
          *(void *)(v161 + 24) = *(void *)(v162 + 24);
          uint64_t v169 = *(void **)(v162 + 32);
          *(void *)(v161 + 32) = v169;
          *(void *)(v161 + 40) = *(void *)(v162 + 40);
          *(_DWORD *)(v161 + 48) = *(_DWORD *)(v162 + 48);
          *(void *)(v161 + 56) = *(void *)(v162 + 56);
          *(_DWORD *)(v161 + 64) = *(_DWORD *)(v162 + 64);
          *(_DWORD *)(v161 + 68) = *(_DWORD *)(v162 + 68);
          *(_DWORD *)(v161 + 72) = *(_DWORD *)(v162 + 72);
          *(_DWORD *)(v161 + 76) = *(_DWORD *)(v162 + 76);
          *(void *)(v161 + 80) = *(void *)(v162 + 80);
          id v170 = v169;
          swift_retain();
          swift_retain();
          size_t v20 = v212;
          swift_bridgeObjectRetain();
          goto LABEL_73;
        }
      }
      else
      {
        if (v163 >= 0xFFFFFFFF)
        {
          uint64_t v164 = *(void *)(v162 + 8);
          *(void *)unint64_t v161 = v163;
          *(void *)(v161 + 8) = v164;
          *(_DWORD *)(v161 + 16) = *(_DWORD *)(v162 + 16);
          *(void *)(v161 + 24) = *(void *)(v162 + 24);
          unint64_t v165 = *(void **)(v162 + 32);
          unint64_t v166 = *(void **)(v161 + 32);
          *(void *)(v161 + 32) = v165;
          id v167 = v165;

          *(void *)(v161 + 40) = *(void *)(v162 + 40);
          swift_retain();
          swift_release();
          *(_DWORD *)(v161 + 48) = *(_DWORD *)(v162 + 48);
          *(void *)(v161 + 56) = *(void *)(v162 + 56);
          swift_retain();
          swift_release();
          *(_DWORD *)(v161 + 64) = *(_DWORD *)(v162 + 64);
          *(_DWORD *)(v161 + 68) = *(_DWORD *)(v162 + 68);
          *(_DWORD *)(v161 + 72) = *(_DWORD *)(v162 + 72);
          *(_DWORD *)(v161 + 76) = *(_DWORD *)(v162 + 76);
          *(void *)(v161 + 80) = *(void *)(v162 + 80);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          goto LABEL_73;
        }

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      long long v171 = *(_OWORD *)(v162 + 16);
      *(_OWORD *)unint64_t v161 = *(_OWORD *)v162;
      *(_OWORD *)(v161 + 16) = v171;
      long long v172 = *(_OWORD *)(v162 + 32);
      long long v173 = *(_OWORD *)(v162 + 48);
      long long v174 = *(_OWORD *)(v162 + 64);
      *(void *)(v161 + 80) = *(void *)(v162 + 80);
      *(_OWORD *)(v161 + 48) = v173;
      *(_OWORD *)(v161 + 64) = v174;
      *(_OWORD *)(v161 + 32) = v172;
LABEL_73:
      *(unsigned char *)(v161 + 88) = *(unsigned char *)(v162 + 88);
      unint64_t v175 = (v143 + 191) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v176 = (v144 + 191) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v177 = *(void *)v176;
      if (*(void *)v175 < 0xFFFFFFFFuLL)
      {
        uint64_t v5 = v132;
        uint64_t v31 = v217;
        if (v177 >= 0xFFFFFFFF)
        {
          uint64_t v182 = *(void *)(v176 + 8);
          *(void *)unint64_t v175 = v177;
          *(void *)(v175 + 8) = v182;
          *(_DWORD *)(v175 + 16) = *(_DWORD *)(v176 + 16);
          *(void *)(v175 + 24) = *(void *)(v176 + 24);
          uint64_t v183 = *(void **)(v176 + 32);
          *(void *)(v175 + 32) = v183;
          *(void *)(v175 + 40) = *(void *)(v176 + 40);
          *(_DWORD *)(v175 + 48) = *(_DWORD *)(v176 + 48);
          *(void *)(v175 + 56) = *(void *)(v176 + 56);
          *(_DWORD *)(v175 + 64) = *(_DWORD *)(v176 + 64);
          *(_DWORD *)(v175 + 68) = *(_DWORD *)(v176 + 68);
          *(_DWORD *)(v175 + 72) = *(_DWORD *)(v176 + 72);
          *(_DWORD *)(v175 + 76) = *(_DWORD *)(v176 + 76);
          *(void *)(v175 + 80) = *(void *)(v176 + 80);
          id v184 = v183;
          swift_retain();
          swift_retain();
          size_t v20 = v212;
          swift_bridgeObjectRetain();
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v5 = v132;
        uint64_t v31 = v217;
        if (v177 >= 0xFFFFFFFF)
        {
          uint64_t v178 = *(void *)(v176 + 8);
          *(void *)unint64_t v175 = v177;
          *(void *)(v175 + 8) = v178;
          *(_DWORD *)(v175 + 16) = *(_DWORD *)(v176 + 16);
          *(void *)(v175 + 24) = *(void *)(v176 + 24);
          uint64_t v179 = *(void **)(v176 + 32);
          v180 = *(void **)(v175 + 32);
          *(void *)(v175 + 32) = v179;
          id v181 = v179;

          *(void *)(v175 + 40) = *(void *)(v176 + 40);
          swift_retain();
          swift_release();
          *(_DWORD *)(v175 + 48) = *(_DWORD *)(v176 + 48);
          *(void *)(v175 + 56) = *(void *)(v176 + 56);
          swift_retain();
          swift_release();
          *(_DWORD *)(v175 + 64) = *(_DWORD *)(v176 + 64);
          *(_DWORD *)(v175 + 68) = *(_DWORD *)(v176 + 68);
          *(_DWORD *)(v175 + 72) = *(_DWORD *)(v176 + 72);
          *(_DWORD *)(v175 + 76) = *(_DWORD *)(v176 + 76);
          *(void *)(v175 + 80) = *(void *)(v176 + 80);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
LABEL_80:
          unint64_t v16 = v209;
          goto LABEL_81;
        }

        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
      }
      long long v185 = *(_OWORD *)(v176 + 16);
      *(_OWORD *)unint64_t v175 = *(_OWORD *)v176;
      *(_OWORD *)(v175 + 16) = v185;
      long long v186 = *(_OWORD *)(v176 + 32);
      long long v187 = *(_OWORD *)(v176 + 48);
      long long v188 = *(_OWORD *)(v176 + 64);
      *(void *)(v175 + 80) = *(void *)(v176 + 80);
      *(_OWORD *)(v175 + 48) = v187;
      *(_OWORD *)(v175 + 64) = v188;
      *(_OWORD *)(v175 + 32) = v186;
      goto LABEL_80;
    }
  }
  if (v24)
  {
    int v36 = v16;
    uint64_t v31 = v217;
LABEL_27:
    memcpy(v36, v31, v20);
    goto LABEL_81;
  }
  size_t v211 = v20;
  uint64_t v206 = a3;
  v207 = v5;
  *unint64_t v16 = *(void *)v217;
  *unint64_t v21 = *v22;
  uint64_t v40 = ((unint64_t)v21 + v14 + 8) & v18;
  uint64_t v41 = ((unint64_t)v22 + v14 + 8) & v18;
  *(unsigned char *)uint64_t v40 = *(unsigned char *)v41;
  *(unsigned char *)(v40 | 1) = *(unsigned char *)(v41 | 1);
  *(unsigned char *)(v40 | 2) = *(unsigned char *)(v41 | 2);
  *(unsigned char *)(v40 | 3) = *(unsigned char *)(v41 | 3);
  unint64_t v42 = (v40 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v43 = (v41 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  int v44 = *(_DWORD *)v43;
  *(unsigned char *)(v42 + 4) = *(unsigned char *)(v43 + 4);
  *(_DWORD *)unint64_t v42 = v44;
  uint64_t v45 = (v14 + 5 + v42) & v213;
  uint64_t v46 = (v14 + 5 + v43) & v213;
  BOOL v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v214 + 16);
  swift_retain();
  swift_retain();
  v47(v45, v46, v215);
  *(unsigned char *)(v45 + v19) = *(unsigned char *)(v46 + v19);
  unint64_t v48 = (v45 + v19) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v49 = (v46 + v19) & 0xFFFFFFFFFFFFFFFCLL;
  int v50 = *(_DWORD *)(v49 + 4);
  *(unsigned char *)(v48 + 8) = *(unsigned char *)(v49 + 8);
  *(_DWORD *)(v48 + 4) = v50;
  v208 = v16;
  unint64_t v51 = (void *)(((unint64_t)v16 + v216) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = v217;
  uint64_t v52 = (void *)((unint64_t)&v217[v216] & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v51 = *v52;
  unint64_t v53 = ((unint64_t)v51 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v54 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v55 = *(unsigned __int8 *)(v54 + 8);
  swift_bridgeObjectRetain();
  if (v55 > 1)
  {
    uint64_t v76 = *(void *)v54;
    *(unsigned char *)(v53 + 8) = *(unsigned char *)(v54 + 8);
    *(void *)unint64_t v53 = v76;
  }
  else
  {
    uint64_t v56 = *(void *)v54;
    outlined copy of PlatformItemCollection.Storage(*(void *)v54, v55 != 0);
    *(void *)unint64_t v53 = v56;
    *(unsigned char *)(v53 + 8) = v55 != 0;
  }
  unint64_t v77 = ((unint64_t)v51 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v78 = ((unint64_t)v52 + 31) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v79 = *(unsigned __int8 *)(v78 + 8);
  a3 = v206;
  uint64_t v5 = v207;
  if (v79 > 1)
  {
    uint64_t v82 = *(void *)v78;
    *(unsigned char *)(v77 + 8) = *(unsigned char *)(v78 + 8);
    *(void *)unint64_t v77 = v82;
  }
  else
  {
    BOOL v80 = v79 != 0;
    uint64_t v81 = *(void *)v78;
    outlined copy of PlatformItemCollection.Storage(*(void *)v78, v79 != 0);
    *(void *)unint64_t v77 = v81;
    *(unsigned char *)(v77 + 8) = v80;
  }
  unint64_t v83 = ((unint64_t)v51 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v84 = ((unint64_t)v52 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v85 = *(void *)v84;
  uint64_t v86 = *(void *)(v84 + 8);
  char v87 = *(unsigned char *)(v84 + 16);
  outlined copy of Text.Storage(*(void *)v84, v86, v87);
  *(void *)unint64_t v83 = v85;
  *(void *)(v83 + 8) = v86;
  *(unsigned char *)(v83 + 16) = v87;
  *(void *)(v83 + 24) = *(void *)(v84 + 24);
  long long v88 = (void *)((v83 + 39) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v89 = (void *)((v84 + 39) & 0xFFFFFFFFFFFFFFF8);
  void *v88 = *v89;
  v88[1] = v89[1];
  unint64_t v90 = ((unint64_t)v88 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v91 = ((unint64_t)v89 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v92 = *(void *)v91;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  if (v92 < 0xFFFFFFFF)
  {
    long long v96 = *(_OWORD *)(v91 + 16);
    *(_OWORD *)unint64_t v90 = *(_OWORD *)v91;
    *(_OWORD *)(v90 + 16) = v96;
    long long v97 = *(_OWORD *)(v91 + 32);
    long long v98 = *(_OWORD *)(v91 + 48);
    long long v99 = *(_OWORD *)(v91 + 64);
    *(void *)(v90 + 80) = *(void *)(v91 + 80);
    *(_OWORD *)(v90 + 48) = v98;
    *(_OWORD *)(v90 + 64) = v99;
    *(_OWORD *)(v90 + 32) = v97;
  }
  else
  {
    uint64_t v93 = *(void *)(v91 + 8);
    *(void *)unint64_t v90 = v92;
    *(void *)(v90 + 8) = v93;
    *(_DWORD *)(v90 + 16) = *(_DWORD *)(v91 + 16);
    *(void *)(v90 + 24) = *(void *)(v91 + 24);
    unint64_t v94 = *(void **)(v91 + 32);
    *(void *)(v90 + 32) = v94;
    *(void *)(v90 + 40) = *(void *)(v91 + 40);
    *(_DWORD *)(v90 + 48) = *(_DWORD *)(v91 + 48);
    *(void *)(v90 + 56) = *(void *)(v91 + 56);
    *(_DWORD *)(v90 + 64) = *(_DWORD *)(v91 + 64);
    *(_DWORD *)(v90 + 68) = *(_DWORD *)(v91 + 68);
    *(_DWORD *)(v90 + 72) = *(_DWORD *)(v91 + 72);
    *(_DWORD *)(v90 + 76) = *(_DWORD *)(v91 + 76);
    *(void *)(v90 + 80) = *(void *)(v91 + 80);
    id v95 = v94;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  unint64_t v100 = (v90 + 95) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v101 = (v91 + 95) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v101 < 0xFFFFFFFFuLL)
  {
    long long v105 = *(_OWORD *)(v101 + 16);
    *(_OWORD *)unint64_t v100 = *(_OWORD *)v101;
    *(_OWORD *)(v100 + 16) = v105;
    long long v106 = *(_OWORD *)(v101 + 32);
    long long v107 = *(_OWORD *)(v101 + 48);
    long long v108 = *(_OWORD *)(v101 + 64);
    *(void *)(v100 + 80) = *(void *)(v101 + 80);
    *(_OWORD *)(v100 + 48) = v107;
    *(_OWORD *)(v100 + 64) = v108;
    *(_OWORD *)(v100 + 32) = v106;
  }
  else
  {
    uint64_t v102 = *(void *)(v101 + 8);
    *(void *)unint64_t v100 = *(void *)v101;
    *(void *)(v100 + 8) = v102;
    *(_DWORD *)(v100 + 16) = *(_DWORD *)(v101 + 16);
    *(void *)(v100 + 24) = *(void *)(v101 + 24);
    uint64_t v103 = *(void **)(v101 + 32);
    *(void *)(v100 + 32) = v103;
    *(void *)(v100 + 40) = *(void *)(v101 + 40);
    *(_DWORD *)(v100 + 48) = *(_DWORD *)(v101 + 48);
    *(void *)(v100 + 56) = *(void *)(v101 + 56);
    *(_DWORD *)(v100 + 64) = *(_DWORD *)(v101 + 64);
    *(_DWORD *)(v100 + 68) = *(_DWORD *)(v101 + 68);
    *(_DWORD *)(v100 + 72) = *(_DWORD *)(v101 + 72);
    *(_DWORD *)(v100 + 76) = *(_DWORD *)(v101 + 76);
    *(void *)(v100 + 80) = *(void *)(v101 + 80);
    id v104 = v103;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(v100 + 88) = *(unsigned char *)(v101 + 88);
  unint64_t v109 = (v90 + 191) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v110 = (v91 + 191) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v110 < 0xFFFFFFFFuLL)
  {
    long long v114 = *(_OWORD *)(v110 + 16);
    *(_OWORD *)unint64_t v109 = *(_OWORD *)v110;
    *(_OWORD *)(v109 + 16) = v114;
    long long v115 = *(_OWORD *)(v110 + 32);
    long long v116 = *(_OWORD *)(v110 + 48);
    long long v117 = *(_OWORD *)(v110 + 64);
    *(void *)(v109 + 80) = *(void *)(v110 + 80);
    *(_OWORD *)(v109 + 48) = v116;
    *(_OWORD *)(v109 + 64) = v117;
    *(_OWORD *)(v109 + 32) = v115;
  }
  else
  {
    uint64_t v111 = *(void *)(v110 + 8);
    *(void *)unint64_t v109 = *(void *)v110;
    *(void *)(v109 + 8) = v111;
    *(_DWORD *)(v109 + 16) = *(_DWORD *)(v110 + 16);
    *(void *)(v109 + 24) = *(void *)(v110 + 24);
    unint64_t v112 = *(void **)(v110 + 32);
    *(void *)(v109 + 32) = v112;
    *(void *)(v109 + 40) = *(void *)(v110 + 40);
    *(_DWORD *)(v109 + 48) = *(_DWORD *)(v110 + 48);
    *(void *)(v109 + 56) = *(void *)(v110 + 56);
    *(_DWORD *)(v109 + 64) = *(_DWORD *)(v110 + 64);
    *(_DWORD *)(v109 + 68) = *(_DWORD *)(v110 + 68);
    *(_DWORD *)(v109 + 72) = *(_DWORD *)(v110 + 72);
    *(_DWORD *)(v109 + 76) = *(_DWORD *)(v110 + 76);
    *(void *)(v109 + 80) = *(void *)(v110 + 80);
    id v113 = v112;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  unint64_t v16 = v208;
  size_t v20 = v211;
LABEL_81:
  *(void *)((char *)v16 + v20) = *(void *)&v31[v20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v189 = (void *)(((unint64_t)v16 + v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v190 = (void *)((unint64_t)&v31[v20 + 15] & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v189 = *v190;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v191 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v192 = v191 + 24;
  uint64_t v193 = *(_DWORD *)(v191 + 80) & 0xF8;
  uint64_t v194 = v193 + 15;
  unint64_t v195 = (unint64_t)v189 + v193 + 15;
  unint64_t v196 = ~v193 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v197 = v195 & v196;
  unint64_t v198 = ((unint64_t)v190 + v194) & v196;
  (*(void (**)(unint64_t, unint64_t))(v191 + 24))(v195 & v196, v198);
  uint64_t v199 = *(void *)(v192 + 40) + 7;
  uint64_t v200 = (void *)((v199 + v197) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v201 = (void *)((v199 + v198) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v202 = v201[1];
  *uint64_t v200 = *v201;
  v200[1] = v202;
  swift_retain();
  swift_release();
  return v5;
}

_OWORD *initializeWithTake for ToolbarReader.PrimitiveReader(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  long long v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 64;
  uint64_t v11 = (void *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  uint64_t v12 = (void *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  unint64_t v13 = *(_DWORD *)(v8 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v14 = *(void *)(v8 + 64);
  unint64_t v15 = ((v9 + 16) & v13) + ((((v9 + 9) & ~v9) + v14) & 0xFFFFFFFFFFFFFFFCLL) + 16;
  unint64_t v16 = ((((((((v15 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 191) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v73 = ~v9;
  uint64_t v74 = v7;
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    uint64_t v18 = *v17;
    if ((unint64_t)*v17 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    size_t v19 = v16 + 88;
    if (v18 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    void *v11 = *v12;
    size_t v20 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *size_t v20 = *v17;
    uint64_t v21 = ((unint64_t)v20 + v9 + 8) & v13;
    uint64_t v22 = ((unint64_t)v17 + v9 + 8) & v13;
    *(unsigned char *)uint64_t v21 = *(unsigned char *)v22;
    *(unsigned char *)(v21 | 1) = *(unsigned char *)(v22 | 1);
    *(unsigned char *)(v21 | 2) = *(unsigned char *)(v22 | 2);
    *(unsigned char *)(v21 | 3) = *(unsigned char *)(v22 | 3);
    unint64_t v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    int v25 = *(_DWORD *)v24;
    *(unsigned char *)(v23 + 4) = *(unsigned char *)(v24 + 4);
    *(_DWORD *)unint64_t v23 = v25;
    uint64_t v26 = v9 + 5;
    uint64_t v27 = (v9 + 5 + v23) & v73;
    unint64_t v28 = (v26 + v24) & v73;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 32))(v27, v28, v74);
    *(unsigned char *)(v27 + v14) = *(unsigned char *)(v28 + v14);
    unint64_t v29 = (v27 + v14) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v30 = (v28 + v14) & 0xFFFFFFFFFFFFFFFCLL;
    int v31 = *(_DWORD *)(v30 + 4);
    *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
    *(_DWORD *)(v29 + 4) = v31;
    unint64_t v32 = (void *)(((unint64_t)v11 + v15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v33 = (void *)(((unint64_t)v12 + v15) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v32 = *v33;
    unint64_t v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v35 = ((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = *(void *)v35;
    *(unsigned char *)(v34 + 8) = *(unsigned char *)(v35 + 8);
    *(void *)unint64_t v34 = v36;
    unint64_t v37 = ((unint64_t)v32 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v38 = ((unint64_t)v33 + 31) & 0xFFFFFFFFFFFFFFF8;
    LOBYTE(v34) = *(unsigned char *)(v38 + 8);
    *(void *)unint64_t v37 = *(void *)v38;
    *(unsigned char *)(v37 + 8) = v34;
    uint64_t v39 = (_OWORD *)(((unint64_t)v32 + 47) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v40 = (_OWORD *)(((unint64_t)v33 + 47) & 0xFFFFFFFFFFFFFFF8);
    long long v41 = v40[1];
    _OWORD *v39 = *v40;
    v39[1] = v41;
    unint64_t v42 = (_OWORD *)(((unint64_t)v39 + 39) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v43 = (_OWORD *)(((unint64_t)v40 + 39) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v42 = *v43;
    unint64_t v44 = ((unint64_t)v42 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v45 = ((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF8;
    long long v46 = *(_OWORD *)(v45 + 16);
    *(_OWORD *)unint64_t v44 = *(_OWORD *)v45;
    *(_OWORD *)(v44 + 16) = v46;
    long long v48 = *(_OWORD *)(v45 + 48);
    long long v47 = *(_OWORD *)(v45 + 64);
    long long v49 = *(_OWORD *)(v45 + 32);
    *(void *)(v44 + 80) = *(void *)(v45 + 80);
    *(_OWORD *)(v44 + 48) = v48;
    *(_OWORD *)(v44 + 64) = v47;
    *(_OWORD *)(v44 + 32) = v49;
    unint64_t v50 = (v44 + 95) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v51 = (v45 + 95) & 0xFFFFFFFFFFFFFFF8;
    long long v52 = *(_OWORD *)(v51 + 16);
    *(_OWORD *)unint64_t v50 = *(_OWORD *)v51;
    *(_OWORD *)(v50 + 16) = v52;
    long long v54 = *(_OWORD *)(v51 + 48);
    long long v53 = *(_OWORD *)(v51 + 64);
    long long v55 = *(_OWORD *)(v51 + 32);
    *(void *)(v50 + 80) = *(void *)(v51 + 80);
    *(_OWORD *)(v50 + 48) = v54;
    *(_OWORD *)(v50 + 64) = v53;
    *(_OWORD *)(v50 + 32) = v55;
    *(unsigned char *)(v50 + 88) = *(unsigned char *)(v51 + 88);
    unint64_t v56 = (v44 + 191) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v57 = (v45 + 191) & 0xFFFFFFFFFFFFFFF8;
    long long v58 = *(_OWORD *)(v57 + 32);
    long long v59 = *(_OWORD *)(v57 + 48);
    long long v60 = *(_OWORD *)(v57 + 64);
    *(void *)(v56 + 80) = *(void *)(v57 + 80);
    *(_OWORD *)(v56 + 48) = v59;
    *(_OWORD *)(v56 + 64) = v60;
    *(_OWORD *)(v56 + 32) = v58;
    long long v61 = *(_OWORD *)(v57 + 16);
    *(_OWORD *)unint64_t v56 = *(_OWORD *)v57;
    *(_OWORD *)(v56 + 16) = v61;
    goto LABEL_8;
  }
  size_t v19 = v16 + 88;
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))((v9
                                                                    + (((((unint64_t)v17 + v9 + 8) & v13) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                    + 5) & ~v9))
    goto LABEL_7;
LABEL_5:
  memcpy(v11, v12, v19);
LABEL_8:
  *(void *)((char *)v11 + v19) = *(void *)((char *)v12 + v19);
  uint64_t v62 = (void *)(((unint64_t)v11 + v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v63 = (void *)(((unint64_t)v12 + v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v62 = *v63;
  uint64_t v64 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v65 = v64 + 32;
  uint64_t v66 = *(_DWORD *)(v64 + 80) & 0xF8;
  uint64_t v67 = v66 + 15;
  unint64_t v68 = (unint64_t)v62 + v66 + 15;
  unint64_t v69 = ~v66 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v70 = v68 & v69;
  unint64_t v71 = ((unint64_t)v63 + v67) & v69;
  (*(void (**)(unint64_t, unint64_t))(v64 + 32))(v68 & v69, v71);
  *(_OWORD *)((*(void *)(v65 + 32) + 7 + v70) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v65 + 32)
                                                                                       + 7
                                                                                       + v71) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ToolbarReader.PrimitiveReader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a2 + 24))
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_release();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_release();
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      goto LABEL_6;
    }
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1(a1 + 16, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
LABEL_6:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(_DWORD *)(v8 + 80);
  uint64_t v11 = (v10 | 7) + 64;
  uint64_t v12 = (void *)((v11 + a1) & ~(v10 | 7));
  uint64_t v13 = (v11 + a2) & ~(v10 | 7);
  unint64_t v14 = *(_DWORD *)(v8 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v15 = *(void *)(v8 + 64);
  unint64_t v16 = (((v10 + 9) & ~v10) + v15) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v17 = ((v10 + 16) & v14) + v16 + 16;
  unint64_t v167 = (((((((((v17 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 191) & 0xFFFFFFFFFFFFFFF8)
       + 88;
  uint64_t v18 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v168 = (void *)v13;
  uint64_t v165 = v8;
  uint64_t v166 = v7;
  unint64_t v163 = v14;
  uint64_t v164 = ~v10;
  if ((v9 & 0x80000000) != 0)
  {
    uint64_t v36 = v7;
    uint64_t v159 = a3;
    uint64_t v161 = (v11 + a1) & ~(v10 | 7);
    uint64_t v158 = ((v10 + 16) & v14) + v16 + 16;
    unint64_t v37 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    unint64_t v38 = *(_DWORD *)(v8 + 80) & 0xFCLL ^ 0xFFFFFFFFFFFFFFFCLL;
    int v39 = v37((v10 + 5 + (((((unint64_t)v18 + v10 + 8) & v14) + 7) & 0xFFFFFFFFFFFFFFFCLL)) & ~v10, v9, v7);
    uint64_t v40 = v37;
    int v157 = v39;
    size_t v19 = (void *)((v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = (void *)v161;
    uint64_t v17 = v158;
    int v21 = v40((v10 + 5 + (((((unint64_t)v19 + v10 + 8) & v38) + 7) & 0xFFFFFFFFFFFFFFFCLL)) & ~v10, v9, v36);
    a3 = v159;
    if (!v157) {
      goto LABEL_10;
    }
LABEL_23:
    if (!v21)
    {
      *uint64_t v12 = *v168;
      *uint64_t v18 = *v19;
      uint64_t v41 = ((unint64_t)v18 + v10 + 8) & v163;
      unint64_t v28 = v168;
      uint64_t v42 = ((unint64_t)v19 + v10 + 8) & v163;
      *(unsigned char *)uint64_t v41 = *(unsigned char *)v42;
      *(unsigned char *)(v41 | 1) = *(unsigned char *)(v42 | 1);
      *(unsigned char *)(v41 | 2) = *(unsigned char *)(v42 | 2);
      *(unsigned char *)(v41 | 3) = *(unsigned char *)(v42 | 3);
      unint64_t v43 = (v41 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v44 = (v42 + 7) & 0xFFFFFFFFFFFFFFFCLL;
      int v45 = *(_DWORD *)v44;
      *(unsigned char *)(v43 + 4) = *(unsigned char *)(v44 + 4);
      *(_DWORD *)unint64_t v43 = v45;
      uint64_t v46 = (v10 + 5 + v43) & v164;
      unint64_t v47 = v10 + 5 + v44;
      uint64_t v48 = v17;
      uint64_t v49 = a3;
      unint64_t v50 = v47 & v164;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v165 + 32))(v46, v47 & v164, v166);
      uint64_t v51 = v50 + v15;
      a3 = v49;
      *(unsigned char *)(v46 + v15) = *(unsigned char *)v51;
      unint64_t v52 = (v46 + v15) & 0xFFFFFFFFFFFFFFFCLL;
      v51 &= 0xFFFFFFFFFFFFFFFCLL;
      int v53 = *(_DWORD *)(v51 + 4);
      *(unsigned char *)(v52 + 8) = *(unsigned char *)(v51 + 8);
      *(_DWORD *)(v52 + 4) = v53;
      long long v54 = (void *)(((unint64_t)v12 + v48) & 0xFFFFFFFFFFFFFFF8);
      long long v55 = (void *)(((unint64_t)v168 + v48) & 0xFFFFFFFFFFFFFFF8);
      *long long v54 = *v55;
      unint64_t v56 = ((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v57 = ((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v58 = *(void *)v57;
      *(unsigned char *)(v56 + 8) = *(unsigned char *)(v57 + 8);
      *(void *)unint64_t v56 = v58;
      unint64_t v59 = ((unint64_t)v54 + 31) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v60 = ((unint64_t)v55 + 31) & 0xFFFFFFFFFFFFFFF8;
      LOBYTE(v56) = *(unsigned char *)(v60 + 8);
      *(void *)unint64_t v59 = *(void *)v60;
      *(unsigned char *)(v59 + 8) = v56;
      long long v61 = (_OWORD *)(((unint64_t)v54 + 47) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v62 = (_OWORD *)(((unint64_t)v55 + 47) & 0xFFFFFFFFFFFFFFF8);
      long long v63 = v62[1];
      *long long v61 = *v62;
      v61[1] = v63;
      uint64_t v64 = (_OWORD *)(((unint64_t)v61 + 39) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v65 = (_OWORD *)(((unint64_t)v62 + 39) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v64 = *v65;
      unint64_t v66 = ((unint64_t)v64 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v67 = ((unint64_t)v65 + 23) & 0xFFFFFFFFFFFFFFF8;
      long long v68 = *(_OWORD *)(v67 + 16);
      *(_OWORD *)unint64_t v66 = *(_OWORD *)v67;
      *(_OWORD *)(v66 + 16) = v68;
      long long v70 = *(_OWORD *)(v67 + 48);
      long long v69 = *(_OWORD *)(v67 + 64);
      long long v71 = *(_OWORD *)(v67 + 32);
      *(void *)(v66 + 80) = *(void *)(v67 + 80);
      *(_OWORD *)(v66 + 48) = v70;
      *(_OWORD *)(v66 + 64) = v69;
      *(_OWORD *)(v66 + 32) = v71;
      unint64_t v72 = (v66 + 95) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v73 = (v67 + 95) & 0xFFFFFFFFFFFFFFF8;
      long long v74 = *(_OWORD *)(v73 + 16);
      *(_OWORD *)unint64_t v72 = *(_OWORD *)v73;
      *(_OWORD *)(v72 + 16) = v74;
      long long v76 = *(_OWORD *)(v73 + 48);
      long long v75 = *(_OWORD *)(v73 + 64);
      long long v77 = *(_OWORD *)(v73 + 32);
      *(void *)(v72 + 80) = *(void *)(v73 + 80);
      *(_OWORD *)(v72 + 48) = v76;
      *(_OWORD *)(v72 + 64) = v75;
      *(_OWORD *)(v72 + 32) = v77;
      *(unsigned char *)(v72 + 88) = *(unsigned char *)(v73 + 88);
      unint64_t v78 = (v66 + 191) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v79 = (v67 + 191) & 0xFFFFFFFFFFFFFFF8;
      long long v80 = *(_OWORD *)(v79 + 32);
      long long v81 = *(_OWORD *)(v79 + 48);
      long long v82 = *(_OWORD *)(v79 + 64);
      *(void *)(v78 + 80) = *(void *)(v79 + 80);
      *(_OWORD *)(v78 + 48) = v81;
      *(_OWORD *)(v78 + 64) = v82;
      *(_OWORD *)(v78 + 32) = v80;
      long long v83 = *(_OWORD *)(v79 + 16);
      *(_OWORD *)unint64_t v78 = *(_OWORD *)v79;
      *(_OWORD *)(v78 + 16) = v83;
      size_t v29 = v167;
      goto LABEL_53;
    }
    unint64_t v34 = v12;
    unint64_t v28 = v168;
    unint64_t v35 = v168;
    size_t v29 = v167;
    goto LABEL_25;
  }
  size_t v19 = (void *)((v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = *v19;
  if (*v19 >= 0xFFFFFFFFuLL) {
    LODWORD(v20) = -1;
  }
  int v21 = v20 + 1;
  if (*v18 <= 0xFFFFFFFEuLL) {
    goto LABEL_23;
  }
LABEL_10:
  if (v21)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v165 + 8))((v10 + (((((unint64_t)v18 + v10 + 8) & v163) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & v164, v166);
    uint64_t v22 = v12;
    unint64_t v23 = ((unint64_t)v12 + v17) & 0xFFFFFFFFFFFFFFF8;
    swift_bridgeObjectRelease();
    unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v25 = *(unsigned __int8 *)(v24 + 8);
    if (v25 <= 1) {
      outlined consume of PlatformItemCollection.Storage(*(void *)v24, v25 != 0);
    }
    unint64_t v26 = (v23 + 31) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v27 = *(unsigned __int8 *)(v26 + 8);
    unint64_t v28 = v168;
    size_t v29 = v167;
    if (v27 <= 1) {
      outlined consume of PlatformItemCollection.Storage(*(void *)v26, v27 != 0);
    }
    unint64_t v30 = (v23 + 47) & 0xFFFFFFFFFFFFFFF8;
    outlined consume of Text.Storage(*(void *)v30, *(void *)(v30 + 8), *(unsigned char *)(v30 + 16));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v31 = (((v30 + 39) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v31 >= 0xFFFFFFFFuLL)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    unint64_t v32 = (v31 + 95) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v32 >= 0xFFFFFFFFuLL)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    unint64_t v33 = (v31 + 191) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v33 >= 0xFFFFFFFFuLL)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = v22;
    unint64_t v34 = v22;
    unint64_t v35 = v168;
LABEL_25:
    memcpy(v34, v35, v29);
    goto LABEL_53;
  }
  uint64_t v160 = a3;
  *uint64_t v12 = *v168;
  swift_release();
  *uint64_t v18 = *v19;
  swift_release();
  uint64_t v84 = ((unint64_t)v18 + v10 + 8) & v163;
  uint64_t v85 = ((unint64_t)v19 + v10 + 8) & v163;
  *(unsigned char *)uint64_t v84 = *(unsigned char *)v85;
  *(unsigned char *)(v84 | 1) = *(unsigned char *)(v85 | 1);
  *(unsigned char *)(v84 | 2) = *(unsigned char *)(v85 | 2);
  *(unsigned char *)(v84 | 3) = *(unsigned char *)(v85 | 3);
  unint64_t v86 = (v84 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v87 = (v85 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  int v88 = *(_DWORD *)v87;
  *(unsigned char *)(v86 + 4) = *(unsigned char *)(v87 + 4);
  *(_DWORD *)unint64_t v86 = v88;
  uint64_t v89 = (v10 + 5 + v86) & v164;
  uint64_t v90 = (v10 + 5 + v87) & v164;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v165 + 40))(v89, v90, v166);
  *(unsigned char *)(v89 + v15) = *(unsigned char *)(v90 + v15);
  unint64_t v91 = (v89 + v15) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v92 = (v90 + v15) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)(v91 + 4) = *(_DWORD *)(v92 + 4);
  *(unsigned char *)(v91 + 8) = *(unsigned char *)(v92 + 8);
  unint64_t v162 = v12;
  uint64_t v93 = (void *)(((unint64_t)v12 + v17) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v28 = v168;
  unint64_t v94 = (void *)(((unint64_t)v168 + v17) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v93 = *v94;
  swift_bridgeObjectRelease();
  unint64_t v95 = ((unint64_t)v93 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v96 = ((unint64_t)v94 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v97 = *(unsigned __int8 *)(v95 + 8);
  if (v97 > 1)
  {
    uint64_t v101 = *(void *)v96;
    *(unsigned char *)(v95 + 8) = *(unsigned char *)(v96 + 8);
    *(void *)unint64_t v95 = v101;
    a3 = v160;
  }
  else
  {
    unsigned int v98 = *(unsigned __int8 *)(v96 + 8);
    a3 = v160;
    char v99 = v97 & 1;
    if (v98 > 1)
    {
      outlined consume of PlatformItemCollection.Storage(*(void *)v95, v99);
      uint64_t v102 = *(void *)v96;
      *(unsigned char *)(v95 + 8) = *(unsigned char *)(v96 + 8);
      *(void *)unint64_t v95 = v102;
    }
    else
    {
      uint64_t v100 = *(void *)v95;
      *(void *)unint64_t v95 = *(void *)v96;
      *(unsigned char *)(v95 + 8) = v98 != 0;
      outlined consume of PlatformItemCollection.Storage(v100, v99);
    }
  }
  unint64_t v103 = ((unint64_t)v93 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v104 = ((unint64_t)v94 + 31) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v105 = *(unsigned __int8 *)(v103 + 8);
  if (v105 <= 1)
  {
    unsigned int v106 = *(unsigned __int8 *)(v104 + 8);
    char v107 = v105 & 1;
    if (v106 <= 1)
    {
      uint64_t v108 = *(void *)v103;
      *(void *)unint64_t v103 = *(void *)v104;
      *(unsigned char *)(v103 + 8) = v106 != 0;
      outlined consume of PlatformItemCollection.Storage(v108, v107);
      goto LABEL_37;
    }
    outlined consume of PlatformItemCollection.Storage(*(void *)v103, v107);
  }
  uint64_t v109 = *(void *)v104;
  *(unsigned char *)(v103 + 8) = *(unsigned char *)(v104 + 8);
  *(void *)unint64_t v103 = v109;
LABEL_37:
  unint64_t v110 = ((unint64_t)v93 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v111 = ((unint64_t)v94 + 47) & 0xFFFFFFFFFFFFFFF8;
  char v112 = *(unsigned char *)(v111 + 16);
  uint64_t v113 = *(void *)v110;
  uint64_t v114 = *(void *)(v110 + 8);
  char v115 = *(unsigned char *)(v110 + 16);
  *(_OWORD *)unint64_t v110 = *(_OWORD *)v111;
  *(unsigned char *)(v110 + 16) = v112;
  outlined consume of Text.Storage(v113, v114, v115);
  *(void *)(v110 + 24) = *(void *)(v111 + 24);
  swift_bridgeObjectRelease();
  long long v116 = (void *)((v110 + 39) & 0xFFFFFFFFFFFFFFF8);
  long long v117 = (void *)((v111 + 39) & 0xFFFFFFFFFFFFFFF8);
  *long long v116 = *v117;
  swift_release();
  v116[1] = v117[1];
  swift_release();
  unint64_t v118 = ((unint64_t)v116 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v119 = ((unint64_t)v117 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v118 >= 0xFFFFFFFFuLL)
  {
    if (*(void *)v119 >= 0xFFFFFFFFuLL)
    {
      uint64_t v120 = *(void *)(v119 + 8);
      *(void *)unint64_t v118 = *(void *)v119;
      *(void *)(v118 + 8) = v120;
      *(_DWORD *)(v118 + 16) = *(_DWORD *)(v119 + 16);
      *(void *)(v118 + 24) = *(void *)(v119 + 24);
      unint64_t v121 = *(void **)(v118 + 32);
      *(void *)(v118 + 32) = *(void *)(v119 + 32);

      *(void *)(v118 + 40) = *(void *)(v119 + 40);
      swift_release();
      *(_DWORD *)(v118 + 48) = *(_DWORD *)(v119 + 48);
      *(void *)(v118 + 56) = *(void *)(v119 + 56);
      swift_release();
      *(_DWORD *)(v118 + 64) = *(_DWORD *)(v119 + 64);
      *(_DWORD *)(v118 + 68) = *(_DWORD *)(v119 + 68);
      *(_DWORD *)(v118 + 72) = *(_DWORD *)(v119 + 72);
      *(_DWORD *)(v118 + 76) = *(_DWORD *)(v119 + 76);
      *(void *)(v118 + 80) = *(void *)(v119 + 80);
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  long long v122 = *(_OWORD *)(v119 + 16);
  *(_OWORD *)unint64_t v118 = *(_OWORD *)v119;
  *(_OWORD *)(v118 + 16) = v122;
  long long v123 = *(_OWORD *)(v119 + 32);
  long long v124 = *(_OWORD *)(v119 + 48);
  long long v125 = *(_OWORD *)(v119 + 64);
  *(void *)(v118 + 80) = *(void *)(v119 + 80);
  *(_OWORD *)(v118 + 48) = v124;
  *(_OWORD *)(v118 + 64) = v125;
  *(_OWORD *)(v118 + 32) = v123;
LABEL_42:
  unint64_t v126 = (v118 + 95) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v127 = (v119 + 95) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v126 >= 0xFFFFFFFFuLL)
  {
    if (*(void *)v127 >= 0xFFFFFFFFuLL)
    {
      uint64_t v128 = *(void *)(v127 + 8);
      *(void *)unint64_t v126 = *(void *)v127;
      *(void *)(v126 + 8) = v128;
      *(_DWORD *)(v126 + 16) = *(_DWORD *)(v127 + 16);
      *(void *)(v126 + 24) = *(void *)(v127 + 24);
      BOOL v129 = *(void **)(v126 + 32);
      *(void *)(v126 + 32) = *(void *)(v127 + 32);

      *(void *)(v126 + 40) = *(void *)(v127 + 40);
      swift_release();
      *(_DWORD *)(v126 + 48) = *(_DWORD *)(v127 + 48);
      *(void *)(v126 + 56) = *(void *)(v127 + 56);
      swift_release();
      *(_DWORD *)(v126 + 64) = *(_DWORD *)(v127 + 64);
      *(_DWORD *)(v126 + 68) = *(_DWORD *)(v127 + 68);
      *(_DWORD *)(v126 + 72) = *(_DWORD *)(v127 + 72);
      *(_DWORD *)(v126 + 76) = *(_DWORD *)(v127 + 76);
      *(void *)(v126 + 80) = *(void *)(v127 + 80);
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  long long v130 = *(_OWORD *)(v127 + 16);
  *(_OWORD *)unint64_t v126 = *(_OWORD *)v127;
  *(_OWORD *)(v126 + 16) = v130;
  long long v131 = *(_OWORD *)(v127 + 32);
  long long v132 = *(_OWORD *)(v127 + 48);
  long long v133 = *(_OWORD *)(v127 + 64);
  *(void *)(v126 + 80) = *(void *)(v127 + 80);
  *(_OWORD *)(v126 + 48) = v132;
  *(_OWORD *)(v126 + 64) = v133;
  *(_OWORD *)(v126 + 32) = v131;
LABEL_47:
  *(unsigned char *)(v126 + 88) = *(unsigned char *)(v127 + 88);
  unint64_t v134 = (v118 + 191) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v135 = (v119 + 191) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v134 < 0xFFFFFFFFuLL)
  {
    long long v138 = *(_OWORD *)(v135 + 16);
    *(_OWORD *)unint64_t v134 = *(_OWORD *)v135;
    *(_OWORD *)(v134 + 16) = v138;
    long long v139 = *(_OWORD *)(v135 + 32);
    long long v140 = *(_OWORD *)(v135 + 48);
    long long v141 = *(_OWORD *)(v135 + 64);
    *(void *)(v134 + 80) = *(void *)(v135 + 80);
    *(_OWORD *)(v134 + 48) = v140;
    *(_OWORD *)(v134 + 64) = v141;
    *(_OWORD *)(v134 + 32) = v139;
    uint64_t v12 = v162;
    size_t v29 = v167;
  }
  else
  {
    size_t v29 = v167;
    if (*(void *)v135 < 0xFFFFFFFFuLL)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      long long v142 = *(_OWORD *)(v135 + 16);
      *(_OWORD *)unint64_t v134 = *(_OWORD *)v135;
      *(_OWORD *)(v134 + 16) = v142;
      long long v143 = *(_OWORD *)(v135 + 32);
      long long v144 = *(_OWORD *)(v135 + 48);
      long long v145 = *(_OWORD *)(v135 + 64);
      *(void *)(v134 + 80) = *(void *)(v135 + 80);
      *(_OWORD *)(v134 + 48) = v144;
      *(_OWORD *)(v134 + 64) = v145;
      *(_OWORD *)(v134 + 32) = v143;
    }
    else
    {
      uint64_t v136 = *(void *)(v135 + 8);
      *(void *)unint64_t v134 = *(void *)v135;
      *(void *)(v134 + 8) = v136;
      *(_DWORD *)(v134 + 16) = *(_DWORD *)(v135 + 16);
      *(void *)(v134 + 24) = *(void *)(v135 + 24);
      char v137 = *(void **)(v134 + 32);
      *(void *)(v134 + 32) = *(void *)(v135 + 32);

      *(void *)(v134 + 40) = *(void *)(v135 + 40);
      swift_release();
      *(_DWORD *)(v134 + 48) = *(_DWORD *)(v135 + 48);
      *(void *)(v134 + 56) = *(void *)(v135 + 56);
      swift_release();
      *(_DWORD *)(v134 + 64) = *(_DWORD *)(v135 + 64);
      *(_DWORD *)(v134 + 68) = *(_DWORD *)(v135 + 68);
      *(_DWORD *)(v134 + 72) = *(_DWORD *)(v135 + 72);
      *(_DWORD *)(v134 + 76) = *(_DWORD *)(v135 + 76);
      *(void *)(v134 + 80) = *(void *)(v135 + 80);
      swift_bridgeObjectRelease();
    }
    uint64_t v12 = v162;
  }
LABEL_53:
  *(void *)((char *)v12 + v29) = *(void *)((char *)v28 + v29);
  swift_bridgeObjectRelease();
  uint64_t v146 = (void *)(((unint64_t)v12 + v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v147 = (void *)(((unint64_t)v28 + v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v146 = *v147;
  swift_bridgeObjectRelease();
  uint64_t v148 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v149 = v148 + 40;
  uint64_t v150 = *(_DWORD *)(v148 + 80) & 0xF8;
  uint64_t v151 = v150 + 15;
  unint64_t v152 = (unint64_t)v146 + v150 + 15;
  unint64_t v153 = ~v150 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v154 = v152 & v153;
  unint64_t v155 = ((unint64_t)v147 + v151) & v153;
  (*(void (**)(unint64_t, unint64_t))(v148 + 40))(v152 & v153, v155);
  *(_OWORD *)((*(void *)(v149 + 24) + 7 + v154) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v149 + 24)
                                                                                         + 7
                                                                                         + v155) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarReader.PrimitiveReader(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for AttributedString() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0x7FFFFFFF) {
    int v9 = 0x7FFFFFFF;
  }
  else {
    int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  int v12 = *(_DWORD *)(v6 + 80);
  uint64_t v13 = *(void *)(v6 + 64);
  unsigned int v14 = v9 - 1;
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  if (v14 <= v15) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = v9 - 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(_DWORD *)(v6 + 80);
  uint64_t v18 = v12 | 7;
  unint64_t v19 = v12 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v20 = (((((((((((v17 + 16) & v19) + ((((v17 + 9) & ~v17) + v13) & 0xFFFFFFFFFFFFFFFCLL) + 16) & 0xFFFFFFFFFFFFFFF8)
             + 47) & 0xFFFFFFFFFFFFFFF8)
           + 39) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 191) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(_DWORD *)(v10 + 80) & 0xF8;
  unint64_t v22 = ~v21 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = v21 + 15;
  if (v16 < a2)
  {
    unint64_t v24 = ((*(void *)(v10 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)
        + ((v23 + ((v20 + ((v17 + 64) & ~v18) + 103) & 0xFFFFFFFFFFFFFFF8)) & v22)
        + 16;
    if ((v24 & 0xFFFFFFF8) != 0) {
      unsigned int v25 = 2;
    }
    else {
      unsigned int v25 = a2 - v16 + 1;
    }
    if (v25 >= 0x10000) {
      unsigned int v26 = 4;
    }
    else {
      unsigned int v26 = 2;
    }
    if (v25 < 0x100) {
      unsigned int v26 = 1;
    }
    if (v25 >= 2) {
      uint64_t v27 = v26;
    }
    else {
      uint64_t v27 = 0;
    }
    switch(v27)
    {
      case 1:
        int v28 = *((unsigned __int8 *)a1 + v24);
        if (!*((unsigned char *)a1 + v24)) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v28 = *(unsigned __int16 *)((char *)a1 + v24);
        if (*(_WORD *)((char *)a1 + v24)) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187F7F708);
      case 4:
        int v28 = *(int *)((char *)a1 + v24);
        if (!v28) {
          break;
        }
LABEL_28:
        int v30 = v28 - 1;
        if ((v24 & 0xFFFFFFF8) != 0)
        {
          int v30 = 0;
          int v31 = *a1;
        }
        else
        {
          int v31 = 0;
        }
        return v16 + (v31 | v30) + 1;
      default:
        break;
    }
  }
  if ((v16 & 0x80000000) != 0)
  {
    uint64_t v33 = ((unint64_t)a1 + v18 + 64) & ~v18;
    if (v14 >= v15)
    {
      uint64_t v36 = (uint64_t *)((v33 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v8 & 0x80000000) != 0)
      {
        unsigned int v38 = (*(uint64_t (**)(unint64_t))(v7 + 48))((v17
                                                                     + (((((unint64_t)v36 + v17 + 8) & v19) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                                     + 5) & ~v17);
      }
      else
      {
        uint64_t v37 = *v36;
        if ((unint64_t)*v36 >= 0xFFFFFFFF) {
          LODWORD(v37) = -1;
        }
        unsigned int v38 = v37 + 1;
      }
      if (v38 >= 2) {
        return v38 - 1;
      }
      else {
        return 0;
      }
    }
    else
    {
      unint64_t v34 = (v23 + ((v33 + v20 + 103) & 0xFFFFFFFFFFFFFFF8)) & v22;
      unint64_t v35 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 48);
      return v35(v34, v11);
    }
  }
  else
  {
    unint64_t v32 = *((void *)a1 + 5);
    if (v32 >= 0xFFFFFFFF) {
      LODWORD(v32) = -1;
    }
    return (v32 + 1);
  }
}

void storeEnumTagSinglePayload for ToolbarReader.PrimitiveReader(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for AttributedString() - 8);
  uint64_t v9 = v8;
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v12 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  int v14 = *(_DWORD *)(v8 + 80);
  uint64_t v15 = *(void *)(v8 + 64);
  unsigned int v16 = v11 - 1;
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v12 + 84);
  }
  if (v16 <= v17) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = v11 - 1;
  }
  uint64_t v19 = v14;
  uint64_t v20 = v14 | 7;
  unint64_t v21 = v14 & 0xFC ^ 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v22 = (((((((((((v14 + 16) & v21)
               + ((((v14 + 9) & ~(unint64_t)v14) + v15) & 0xFFFFFFFFFFFFFFFCLL)
               + 16) & 0xFFFFFFFFFFFFFFF8)
             + 47) & 0xFFFFFFFFFFFFFFF8)
           + 39) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 191) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(_DWORD *)(v12 + 80) & 0xF8;
  unint64_t v24 = ~v23 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = v23 + 15;
  unint64_t v26 = (v23 + 15 + ((v22 + ((v14 + 64) & ~v20) + 103) & 0xFFFFFFFFFFFFFFF8)) & v24;
  size_t v27 = ((*(void *)(v12 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  size_t v28 = v26 + v27;
  if (v18 >= a3)
  {
    int v31 = 0;
    int v32 = a2 - v18;
    if (a2 <= v18) {
      goto LABEL_23;
    }
LABEL_27:
    if (v28) {
      int v34 = 1;
    }
    else {
      int v34 = v32;
    }
    if (v28)
    {
      int v35 = ~v18 + a2;
      bzero(a1, v28);
      *a1 = v35;
    }
    switch(v31)
    {
      case 1:
        *((unsigned char *)a1 + v28) = v34;
        break;
      case 2:
        *(_WORD *)((char *)a1 + v28) = v34;
        break;
      case 3:
LABEL_65:
        __break(1u);
        JUMPOUT(0x187F7FB20);
      case 4:
        *(_DWORD *)((char *)a1 + v28) = v34;
        break;
      default:
        return;
    }
    return;
  }
  if (v28) {
    unsigned int v29 = 2;
  }
  else {
    unsigned int v29 = a3 - v18 + 1;
  }
  if (v29 >= 0x10000) {
    int v30 = 4;
  }
  else {
    int v30 = 2;
  }
  if (v29 < 0x100) {
    int v30 = 1;
  }
  if (v29 >= 2) {
    int v31 = v30;
  }
  else {
    int v31 = 0;
  }
  int v32 = a2 - v18;
  if (a2 > v18) {
    goto LABEL_27;
  }
LABEL_23:
  size_t v33 = v22 + 88;
  switch(v31)
  {
    case 1:
      *((unsigned char *)a1 + v28) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)((char *)a1 + v28) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
      goto LABEL_65;
    case 4:
      *(_DWORD *)((char *)a1 + v28) = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (!a2) {
        return;
      }
LABEL_36:
      if ((v18 & 0x80000000) == 0)
      {
        if ((a2 & 0x80000000) != 0)
        {
          *((void *)a1 + 7) = 0;
          *(_OWORD *)(a1 + 10) = 0u;
          *(_OWORD *)(a1 + 6) = 0u;
          *(_OWORD *)(a1 + 2) = 0u;
          *(void *)a1 = a2 ^ 0x80000000;
        }
        else
        {
          *((void *)a1 + 5) = (a2 - 1);
        }
        return;
      }
      uint64_t v36 = (_DWORD *)(((unint64_t)a1 + v20 + 64) & ~v20);
      if (v16 >= v17)
      {
        if (v16 < a2 || (int)a2 + 1 > v11)
        {
          if (!v33) {
            return;
          }
          int v38 = a2 - v11;
          int v39 = v36;
          size_t v27 = v33;
          goto LABEL_52;
        }
        if (a2 != -1)
        {
          uint64_t v41 = (void *)(((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8);
          if ((v10 & 0x80000000) != 0)
          {
            uint64_t v42 = *(void (**)(unint64_t))(v9 + 56);
            v42((v19 + (((((unint64_t)v41 + v19 + 8) & v21) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v19);
          }
          else if (a2 + 1 < 0)
          {
            void *v41 = (a2 - 0x7FFFFFFF);
          }
          else
          {
            void *v41 = a2;
          }
        }
      }
      else
      {
        uint64_t v37 = v25 + (((unint64_t)v36 + v33 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v36 = (_DWORD *)(v37 & v24);
        if (v17 < a2)
        {
          if (!v27) {
            return;
          }
          int v38 = ~v17 + a2;
          int v39 = (void *)(v37 & v24);
LABEL_52:
          bzero(v39, v27);
          _DWORD *v36 = v38;
          return;
        }
        uint64_t v40 = *(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 56);
        v40(v37 & v24, a2, v13);
      }
      break;
  }
}

uint64_t initializeWithCopy for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ToolbarReader.ApplyUpdatesToExternalTarget(a1, a2, a3, MEMORY[0x1E4FBC940]);
}

uint64_t assignWithCopy for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_weakCopyAssign();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

uint64_t initializeWithTake for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ToolbarReader.ApplyUpdatesToExternalTarget(a1, a2, a3, MEMORY[0x1E4FBC950]);
}

uint64_t initializeWithCopy for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  a4(a1 + 24, a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 37) = *(void *)(a2 + 37);
  return a1;
}

uint64_t assignWithTake for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_weakTakeAssign();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 44) = *(unsigned char *)(a2 + 44);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 45)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 44);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarReader.ApplyUpdatesToExternalTarget(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 44) = 0;
    *(_DWORD *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 45) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 45) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 44) = a2 + 1;
    }
  }
  return result;
}

void type metadata completion function for ToolbarReader.ToolbarConfiguration()
{
  type metadata accessor for ToolbarStorage.SearchItem?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarReader.ToolbarConfiguration(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = v9 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    swift_bridgeObjectRetain();
    if (v8)
    {
      *(void *)(a1 + 16) = a2[2];
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = a2[4];
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(void *)(a1 + 32) = a2[4];
    }
    *(void *)(a1 + 40) = a2[5];
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    *(void *)(a1 + 56) = a2[7];
    uint64_t v10 = v6[13];
    unsigned int v11 = (void *)(a1 + v10);
    uint64_t v90 = a2;
    uint64_t v12 = (uint64_t *)((char *)a2 + v10);
    uint64_t v13 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
    uint64_t v14 = *((void *)v13 - 1);
    uint64_t v15 = *(unsigned int (**)(void *, uint64_t, int *))(v14 + 48);
    unsigned int v16 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      type metadata accessor for ToolbarStorage.SearchItem?(0);
      memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64));
      unsigned int v18 = v90;
    }
    else
    {
      uint64_t v87 = v14;
      int v88 = v6;
      uint64_t v19 = *v12;
      uint64_t v20 = v12[1];
      void *v11 = v19;
      v11[1] = v20;
      _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
      uint64_t v22 = *(int *)(v21 + 32);
      uint64_t v23 = v16;
      unint64_t v24 = (char *)v11 + v22;
      uint64_t v89 = v11;
      uint64_t v25 = (uint64_t)v23 + v22;
      *unint64_t v24 = *((unsigned char *)v23 + v22);
      v24[1] = *((unsigned char *)v23 + v22 + 1);
      *((_WORD *)v24 + 1) = *(_WORD *)((char *)v23 + v22 + 2);
      v24[8] = *((unsigned char *)v23 + v22 + 8);
      *((_DWORD *)v24 + 1) = *(_DWORD *)((char *)v23 + v22 + 4);
      unint64_t v26 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v27 = v26[9];
      uint64_t v85 = v25 + v27;
      unint64_t v86 = &v24[v27];
      uint64_t v28 = type metadata accessor for AttributedString();
      unsigned int v29 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16);
      swift_retain();
      swift_retain();
      v29(v86, v85, v28);
      v24[v26[10]] = *(unsigned char *)(v25 + v26[10]);
      uint64_t v30 = v26[11];
      int v31 = &v24[v30];
      uint64_t v32 = v25 + v30;
      v31[4] = *(unsigned char *)(v32 + 4);
      *(_DWORD *)int v31 = *(_DWORD *)v32;
      *(void *)((char *)v89 + v13[5]) = *(void *)((char *)v23 + v13[5]);
      uint64_t v33 = v13[6];
      int v34 = (char *)v89 + v33;
      uint64_t v35 = (uint64_t)v23 + v33;
      int v36 = *((unsigned __int8 *)v23 + v33 + 8);
      swift_bridgeObjectRetain();
      if (v36 == 255)
      {
        *(void *)int v34 = *(void *)v35;
        v34[8] = *(unsigned char *)(v35 + 8);
      }
      else
      {
        char v37 = v36 & 1;
        uint64_t v38 = *(void *)v35;
        outlined copy of PlatformItemCollection.Storage(v38, v37);
        *(void *)int v34 = v38;
        v34[8] = v37;
      }
      int v39 = (char *)v23;
      uint64_t v40 = v13[7];
      uint64_t v41 = (char *)v89 + v40;
      uint64_t v42 = (void *)((char *)v23 + v40);
      int v43 = *((unsigned __int8 *)v42 + 8);
      if (v43 == 255)
      {
        *(void *)uint64_t v41 = *v42;
        v41[8] = *((unsigned char *)v42 + 8);
      }
      else
      {
        char v44 = v43 & 1;
        uint64_t v45 = *v42;
        outlined copy of PlatformItemCollection.Storage(*v42, v43 & 1);
        *(void *)uint64_t v41 = v45;
        int v39 = (char *)v23;
        v41[8] = v44;
      }
      uint64_t v46 = v13[8];
      unint64_t v47 = (char *)v89 + v46;
      uint64_t v48 = &v39[v46];
      uint64_t v49 = *(void *)&v39[v46];
      uint64_t v50 = *(void *)&v39[v46 + 8];
      uint64_t v51 = v39;
      char v52 = v39[v46 + 16];
      outlined copy of Text.Storage(v49, v50, v52);
      *(void *)unint64_t v47 = v49;
      *((void *)v47 + 1) = v50;
      v47[16] = v52;
      *((void *)v47 + 3) = *((void *)v48 + 3);
      uint64_t v53 = v13[9];
      long long v54 = (void *)((char *)v89 + v53);
      long long v55 = &v51[v53];
      uint64_t v56 = *((void *)v55 + 1);
      *long long v54 = *(void *)v55;
      v54[1] = v56;
      uint64_t v57 = v13[10];
      uint64_t v58 = (char *)v89 + v57;
      unint64_t v59 = &v51[v57];
      uint64_t v60 = *(void *)&v51[v57];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      if (v60)
      {
        uint64_t v61 = *((void *)v59 + 1);
        *(void *)uint64_t v58 = v60;
        *((void *)v58 + 1) = v61;
        *((_DWORD *)v58 + 4) = *((_DWORD *)v59 + 4);
        uint64_t v62 = (void *)*((void *)v59 + 4);
        *((void *)v58 + 3) = *((void *)v59 + 3);
        *((void *)v58 + 4) = v62;
        *((void *)v58 + 5) = *((void *)v59 + 5);
        *((_DWORD *)v58 + 12) = *((_DWORD *)v59 + 12);
        *((void *)v58 + 7) = *((void *)v59 + 7);
        *((_OWORD *)v58 + 4) = *((_OWORD *)v59 + 4);
        *((void *)v58 + 10) = *((void *)v59 + 10);
        id v63 = v62;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v64 = *((_OWORD *)v59 + 3);
        *((_OWORD *)v58 + 2) = *((_OWORD *)v59 + 2);
        *((_OWORD *)v58 + 3) = v64;
        *((_OWORD *)v58 + 4) = *((_OWORD *)v59 + 4);
        *((void *)v58 + 10) = *((void *)v59 + 10);
        long long v65 = *((_OWORD *)v59 + 1);
        *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
        *((_OWORD *)v58 + 1) = v65;
      }
      uint64_t v6 = v88;
      unint64_t v66 = v23;
      unsigned int v18 = v90;
      uint64_t v67 = v13[11];
      long long v68 = (char *)v89 + v67;
      uint64_t v69 = (uint64_t)v23 + v67;
      if (*(void *)v69)
      {
        uint64_t v70 = *(void *)(v69 + 8);
        *(void *)long long v68 = *(void *)v69;
        *((void *)v68 + 1) = v70;
        *((_DWORD *)v68 + 4) = *(_DWORD *)(v69 + 16);
        long long v71 = *(void **)(v69 + 32);
        *((void *)v68 + 3) = *(void *)(v69 + 24);
        *((void *)v68 + 4) = v71;
        *((void *)v68 + 5) = *(void *)(v69 + 40);
        *((_DWORD *)v68 + 12) = *(_DWORD *)(v69 + 48);
        *((void *)v68 + 7) = *(void *)(v69 + 56);
        *((_OWORD *)v68 + 4) = *(_OWORD *)(v69 + 64);
        *((void *)v68 + 10) = *(void *)(v69 + 80);
        id v72 = v71;
        swift_retain();
        unint64_t v66 = v23;
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v73 = *(_OWORD *)(v69 + 48);
        *((_OWORD *)v68 + 2) = *(_OWORD *)(v69 + 32);
        *((_OWORD *)v68 + 3) = v73;
        *((_OWORD *)v68 + 4) = *(_OWORD *)(v69 + 64);
        *((void *)v68 + 10) = *(void *)(v69 + 80);
        long long v74 = *(_OWORD *)(v69 + 16);
        *(_OWORD *)long long v68 = *(_OWORD *)v69;
        *((_OWORD *)v68 + 1) = v74;
      }
      *((unsigned char *)v89 + v13[12]) = *((unsigned char *)v66 + v13[12]);
      uint64_t v75 = v13[13];
      long long v76 = (char *)v89 + v75;
      uint64_t v77 = (uint64_t)v66 + v75;
      if (*(void *)v77)
      {
        uint64_t v78 = *(void *)(v77 + 8);
        *(void *)long long v76 = *(void *)v77;
        *((void *)v76 + 1) = v78;
        *((_DWORD *)v76 + 4) = *(_DWORD *)(v77 + 16);
        unint64_t v79 = *(void **)(v77 + 32);
        *((void *)v76 + 3) = *(void *)(v77 + 24);
        *((void *)v76 + 4) = v79;
        *((void *)v76 + 5) = *(void *)(v77 + 40);
        *((_DWORD *)v76 + 12) = *(_DWORD *)(v77 + 48);
        *((void *)v76 + 7) = *(void *)(v77 + 56);
        *((_OWORD *)v76 + 4) = *(_OWORD *)(v77 + 64);
        *((void *)v76 + 10) = *(void *)(v77 + 80);
        id v80 = v79;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v81 = *(_OWORD *)(v77 + 48);
        *((_OWORD *)v76 + 2) = *(_OWORD *)(v77 + 32);
        *((_OWORD *)v76 + 3) = v81;
        *((_OWORD *)v76 + 4) = *(_OWORD *)(v77 + 64);
        *((void *)v76 + 10) = *(void *)(v77 + 80);
        long long v82 = *(_OWORD *)(v77 + 16);
        *(_OWORD *)long long v76 = *(_OWORD *)v77;
        *((_OWORD *)v76 + 1) = v82;
      }
      (*(void (**)(void *, void, uint64_t, int *))(v87 + 56))(v89, 0, 1, v13);
    }
    uint64_t v83 = v6[15];
    *(void *)(a1 + v6[14]) = *(uint64_t *)((char *)v18 + v6[14]);
    *(void *)(a1 + v83) = *(uint64_t *)((char *)v18 + v83);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ToolbarReader.ToolbarConfiguration(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 52);
  int v5 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v5 - 1) + 48))(v4, 1, v5))
  {
    swift_release();
    swift_release();
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v7 = *(int *)(v6 + 32);
    uint64_t v8 = v4 + *(int *)(type metadata accessor for SearchFieldState(0) + 36) + v7;
    uint64_t v9 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    swift_bridgeObjectRelease();
    uint64_t v10 = v4 + v5[6];
    int v11 = *(unsigned __int8 *)(v10 + 8);
    if (v11 != 255) {
      outlined consume of PlatformItemCollection.Storage(*(void *)v10, v11 & 1);
    }
    uint64_t v12 = v4 + v5[7];
    int v13 = *(unsigned __int8 *)(v12 + 8);
    if (v13 != 255) {
      outlined consume of PlatformItemCollection.Storage(*(void *)v12, v13 & 1);
    }
    outlined consume of Text.Storage(*(void *)(v4 + v5[8]), *(void *)(v4 + v5[8] + 8), *(unsigned char *)(v4 + v5[8] + 16));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v14 = v4 + v5[10];
    if (*(void *)v14)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = v4 + v5[11];
    if (*(void *)v15)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v16 = v4 + v5[13];
    if (*(void *)v16)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ToolbarReader.ToolbarConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v7)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v7;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v8 = *(int *)(a3 + 52);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v84 = a2;
  uint64_t v10 = (void *)(a2 + v8);
  int v11 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  uint64_t v12 = *((void *)v11 - 1);
  int v13 = *(unsigned int (**)(void *, uint64_t, int *))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    uint64_t v15 = a3;
    uint64_t v16 = v84;
  }
  else
  {
    uint64_t v81 = v12;
    uint64_t v82 = a3;
    uint64_t v17 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v17;
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v19 = *(int *)(v18 + 32);
    uint64_t v20 = (char *)v9 + v19;
    uint64_t v83 = v9;
    uint64_t v21 = (char *)v10 + v19;
    *uint64_t v20 = *((unsigned char *)v10 + v19);
    v20[1] = *((unsigned char *)v10 + v19 + 1);
    *((_WORD *)v20 + 1) = *(_WORD *)((char *)v10 + v19 + 2);
    v20[8] = *((unsigned char *)v10 + v19 + 8);
    *((_DWORD *)v20 + 1) = *(_DWORD *)((char *)v10 + v19 + 4);
    uint64_t v22 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v23 = v22[9];
    unint64_t v79 = &v21[v23];
    id v80 = &v20[v23];
    uint64_t v24 = type metadata accessor for AttributedString();
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
    swift_retain();
    swift_retain();
    v25(v80, v79, v24);
    v20[v22[10]] = v21[v22[10]];
    uint64_t v26 = v22[11];
    uint64_t v27 = &v20[v26];
    uint64_t v28 = &v21[v26];
    v27[4] = v28[4];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    *(void *)((char *)v83 + v11[5]) = *(void *)((char *)v10 + v11[5]);
    uint64_t v29 = v11[6];
    uint64_t v30 = (char *)v83 + v29;
    int v31 = (char *)v10 + v29;
    int v32 = *((unsigned __int8 *)v10 + v29 + 8);
    swift_bridgeObjectRetain();
    if (v32 == 255)
    {
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
    }
    else
    {
      char v33 = v32 & 1;
      uint64_t v34 = *(void *)v31;
      outlined copy of PlatformItemCollection.Storage(v34, v33);
      *(void *)uint64_t v30 = v34;
      v30[8] = v33;
    }
    uint64_t v35 = v11[7];
    int v36 = (char *)v83 + v35;
    char v37 = (char *)v10 + v35;
    int v38 = v37[8];
    if (v38 == 255)
    {
      *(void *)int v36 = *(void *)v37;
      v36[8] = v37[8];
    }
    else
    {
      char v39 = v38 & 1;
      uint64_t v40 = *(void *)v37;
      outlined copy of PlatformItemCollection.Storage(*(void *)v37, v38 & 1);
      *(void *)int v36 = v40;
      v36[8] = v39;
    }
    uint64_t v41 = v11[8];
    uint64_t v42 = (char *)v83 + v41;
    int v43 = (char *)v10 + v41;
    uint64_t v44 = *(void *)((char *)v10 + v41);
    uint64_t v45 = *(void *)((char *)v10 + v41 + 8);
    char v46 = *((unsigned char *)v10 + v41 + 16);
    outlined copy of Text.Storage(v44, v45, v46);
    *(void *)uint64_t v42 = v44;
    *((void *)v42 + 1) = v45;
    v42[16] = v46;
    *((void *)v42 + 3) = *((void *)v43 + 3);
    uint64_t v47 = v11[9];
    uint64_t v48 = (void *)((char *)v83 + v47);
    uint64_t v49 = (void *)((char *)v10 + v47);
    uint64_t v50 = v49[1];
    *uint64_t v48 = *v49;
    v48[1] = v50;
    uint64_t v51 = v11;
    uint64_t v52 = v11[10];
    uint64_t v53 = (char *)v83 + v52;
    long long v54 = (char *)v10 + v52;
    uint64_t v55 = *(void *)((char *)v10 + v52);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v55)
    {
      uint64_t v56 = *((void *)v54 + 1);
      *(void *)uint64_t v53 = v55;
      *((void *)v53 + 1) = v56;
      *((_DWORD *)v53 + 4) = *((_DWORD *)v54 + 4);
      uint64_t v57 = (void *)*((void *)v54 + 4);
      *((void *)v53 + 3) = *((void *)v54 + 3);
      *((void *)v53 + 4) = v57;
      *((void *)v53 + 5) = *((void *)v54 + 5);
      *((_DWORD *)v53 + 12) = *((_DWORD *)v54 + 12);
      *((void *)v53 + 7) = *((void *)v54 + 7);
      *((_OWORD *)v53 + 4) = *((_OWORD *)v54 + 4);
      *((void *)v53 + 10) = *((void *)v54 + 10);
      id v58 = v57;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v59 = *((_OWORD *)v54 + 3);
      *((_OWORD *)v53 + 2) = *((_OWORD *)v54 + 2);
      *((_OWORD *)v53 + 3) = v59;
      *((_OWORD *)v53 + 4) = *((_OWORD *)v54 + 4);
      *((void *)v53 + 10) = *((void *)v54 + 10);
      long long v60 = *((_OWORD *)v54 + 1);
      *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v60;
    }
    uint64_t v15 = v82;
    uint64_t v61 = v51[11];
    uint64_t v62 = (char *)v83 + v61;
    id v63 = (char *)v10 + v61;
    if (*(void *)v63)
    {
      uint64_t v64 = *((void *)v63 + 1);
      *(void *)uint64_t v62 = *(void *)v63;
      *((void *)v62 + 1) = v64;
      *((_DWORD *)v62 + 4) = *((_DWORD *)v63 + 4);
      long long v65 = (void *)*((void *)v63 + 4);
      *((void *)v62 + 3) = *((void *)v63 + 3);
      *((void *)v62 + 4) = v65;
      *((void *)v62 + 5) = *((void *)v63 + 5);
      *((_DWORD *)v62 + 12) = *((_DWORD *)v63 + 12);
      *((void *)v62 + 7) = *((void *)v63 + 7);
      *((_OWORD *)v62 + 4) = *((_OWORD *)v63 + 4);
      *((void *)v62 + 10) = *((void *)v63 + 10);
      id v66 = v65;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v67 = *((_OWORD *)v63 + 3);
      *((_OWORD *)v62 + 2) = *((_OWORD *)v63 + 2);
      *((_OWORD *)v62 + 3) = v67;
      *((_OWORD *)v62 + 4) = *((_OWORD *)v63 + 4);
      *((void *)v62 + 10) = *((void *)v63 + 10);
      long long v68 = *((_OWORD *)v63 + 1);
      *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
      *((_OWORD *)v62 + 1) = v68;
    }
    *((unsigned char *)v83 + v51[12]) = *((unsigned char *)v10 + v51[12]);
    uint64_t v69 = v51[13];
    uint64_t v70 = (char *)v83 + v69;
    long long v71 = (char *)v10 + v69;
    if (*(void *)v71)
    {
      uint64_t v72 = *((void *)v71 + 1);
      *(void *)uint64_t v70 = *(void *)v71;
      *((void *)v70 + 1) = v72;
      *((_DWORD *)v70 + 4) = *((_DWORD *)v71 + 4);
      long long v73 = (void *)*((void *)v71 + 4);
      *((void *)v70 + 3) = *((void *)v71 + 3);
      *((void *)v70 + 4) = v73;
      *((void *)v70 + 5) = *((void *)v71 + 5);
      *((_DWORD *)v70 + 12) = *((_DWORD *)v71 + 12);
      *((void *)v70 + 7) = *((void *)v71 + 7);
      *((_OWORD *)v70 + 4) = *((_OWORD *)v71 + 4);
      *((void *)v70 + 10) = *((void *)v71 + 10);
      id v74 = v73;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v75 = *((_OWORD *)v71 + 3);
      *((_OWORD *)v70 + 2) = *((_OWORD *)v71 + 2);
      *((_OWORD *)v70 + 3) = v75;
      *((_OWORD *)v70 + 4) = *((_OWORD *)v71 + 4);
      *((void *)v70 + 10) = *((void *)v71 + 10);
      long long v76 = *((_OWORD *)v71 + 1);
      *(_OWORD *)uint64_t v70 = *(_OWORD *)v71;
      *((_OWORD *)v70 + 1) = v76;
    }
    uint64_t v16 = v84;
    (*(void (**)(void *, void, uint64_t, int *))(v81 + 56))(v83, 0, 1, v51);
  }
  uint64_t v77 = *(int *)(v15 + 60);
  *(void *)(a1 + *(int *)(v15 + 56)) = *(void *)(v16 + *(int *)(v15 + 56));
  *(void *)(a1 + v77) = *(void *)(v16 + v77);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ToolbarReader.ToolbarConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)(a1 + 16);
  uint64_t v7 = (_OWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v8)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      swift_release();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_retain();
      swift_release();
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
    }
    else
    {
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1(a1 + 16, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
      uint64_t v9 = *(void *)(a2 + 32);
      *uint64_t v6 = *v7;
      *(void *)(a1 + 32) = v9;
    }
  }
  else if (v8)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v10 = *v7;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *uint64_t v6 = v10;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[13];
  uint64_t v12 = (void *)(a1 + v11);
  int v13 = (void *)(a2 + v11);
  uint64_t v14 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  uint64_t v15 = *((void *)v14 - 1);
  uint64_t v16 = *(uint64_t (**)(void *, uint64_t, int *))(v15 + 48);
  int v17 = v16(v12, 1, v14);
  int v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      uint64_t v202 = v15;
      char v203 = a3;
      *uint64_t v12 = *v13;
      v12[1] = v13[1];
      _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
      uint64_t v20 = *(int *)(v19 + 32);
      int v204 = v14;
      uint64_t v205 = v12;
      uint64_t v21 = (char *)v12 + v20;
      uint64_t v22 = (char *)v13 + v20;
      *uint64_t v21 = *((unsigned char *)v13 + v20);
      v21[1] = *((unsigned char *)v13 + v20 + 1);
      void v21[2] = *((unsigned char *)v13 + v20 + 2);
      v21[3] = *((unsigned char *)v13 + v20 + 3);
      LODWORD(v20) = *(_DWORD *)((char *)v13 + v20 + 4);
      unsigned char v21[8] = v22[8];
      *((_DWORD *)v21 + 1) = v20;
      uint64_t v206 = v13;
      uint64_t v23 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v24 = v23[9];
      uint64_t v25 = &v21[v24];
      uint64_t v26 = &v22[v24];
      uint64_t v27 = type metadata accessor for AttributedString();
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
      swift_retain();
      swift_retain();
      v28(v25, v26, v27);
      v21[v23[10]] = v22[v23[10]];
      uint64_t v29 = v23[11];
      uint64_t v30 = &v21[v29];
      int v31 = &v22[v29];
      char v32 = v31[4];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      v30[4] = v32;
      *(void *)((char *)v205 + v204[5]) = *(void *)((char *)v206 + v204[5]);
      uint64_t v33 = v204[6];
      uint64_t v34 = (char *)v205 + v33;
      uint64_t v35 = (char *)v206 + v33;
      int v36 = *((unsigned __int8 *)v206 + v33 + 8);
      swift_bridgeObjectRetain();
      if (v36 == 255)
      {
        uint64_t v37 = *(void *)v35;
        v34[8] = v35[8];
        *(void *)uint64_t v34 = v37;
      }
      else
      {
        char v59 = v36 & 1;
        uint64_t v60 = *(void *)v35;
        outlined copy of PlatformItemCollection.Storage(v60, v59);
        *(void *)uint64_t v34 = v60;
        v34[8] = v59;
      }
      uint64_t v61 = v204[7];
      uint64_t v62 = (char *)v205 + v61;
      id v63 = (char *)v206 + v61;
      int v64 = v63[8];
      a3 = v203;
      if (v64 == 255)
      {
        uint64_t v65 = *(void *)v63;
        v62[8] = v63[8];
        *(void *)uint64_t v62 = v65;
      }
      else
      {
        char v66 = v64 & 1;
        uint64_t v67 = *(void *)v63;
        outlined copy of PlatformItemCollection.Storage(*(void *)v63, v64 & 1);
        *(void *)uint64_t v62 = v67;
        v62[8] = v66;
      }
      uint64_t v68 = v204[8];
      uint64_t v69 = (char *)v205 + v68;
      uint64_t v70 = (char *)v206 + v68;
      uint64_t v71 = *(void *)((char *)v206 + v68);
      uint64_t v72 = *(void *)((char *)v206 + v68 + 8);
      char v73 = *((unsigned char *)v206 + v68 + 16);
      outlined copy of Text.Storage(v71, v72, v73);
      *(void *)uint64_t v69 = v71;
      *((void *)v69 + 1) = v72;
      v69[16] = v73;
      *((void *)v69 + 3) = *((void *)v70 + 3);
      uint64_t v74 = v204[9];
      long long v75 = (void *)((char *)v205 + v74);
      long long v76 = (void *)((char *)v206 + v74);
      *long long v75 = *v76;
      v75[1] = v76[1];
      uint64_t v77 = v204[10];
      uint64_t v78 = (char *)v205 + v77;
      unint64_t v79 = (char *)v206 + v77;
      uint64_t v80 = *(void *)((char *)v206 + v77);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      if (v80)
      {
        uint64_t v81 = *((void *)v79 + 1);
        *(void *)uint64_t v78 = v80;
        *((void *)v78 + 1) = v81;
        *((_DWORD *)v78 + 4) = *((_DWORD *)v79 + 4);
        *((void *)v78 + 3) = *((void *)v79 + 3);
        uint64_t v82 = (void *)*((void *)v79 + 4);
        *((void *)v78 + 4) = v82;
        *((void *)v78 + 5) = *((void *)v79 + 5);
        *((_DWORD *)v78 + 12) = *((_DWORD *)v79 + 12);
        *((void *)v78 + 7) = *((void *)v79 + 7);
        *((_DWORD *)v78 + 16) = *((_DWORD *)v79 + 16);
        *((_DWORD *)v78 + 17) = *((_DWORD *)v79 + 17);
        *((_DWORD *)v78 + 18) = *((_DWORD *)v79 + 18);
        *((_DWORD *)v78 + 19) = *((_DWORD *)v79 + 19);
        *((void *)v78 + 10) = *((void *)v79 + 10);
        id v83 = v82;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v84 = *((_OWORD *)v79 + 1);
        *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
        *((_OWORD *)v78 + 1) = v84;
        long long v85 = *((_OWORD *)v79 + 2);
        long long v86 = *((_OWORD *)v79 + 3);
        long long v87 = *((_OWORD *)v79 + 4);
        *((void *)v78 + 10) = *((void *)v79 + 10);
        *((_OWORD *)v78 + 3) = v86;
        *((_OWORD *)v78 + 4) = v87;
        *((_OWORD *)v78 + 2) = v85;
      }
      uint64_t v88 = v204[11];
      uint64_t v89 = (char *)v205 + v88;
      uint64_t v90 = (char *)v206 + v88;
      if (*(void *)v90)
      {
        uint64_t v91 = *((void *)v90 + 1);
        *(void *)uint64_t v89 = *(void *)v90;
        *((void *)v89 + 1) = v91;
        *((_DWORD *)v89 + 4) = *((_DWORD *)v90 + 4);
        *((void *)v89 + 3) = *((void *)v90 + 3);
        unint64_t v92 = (void *)*((void *)v90 + 4);
        *((void *)v89 + 4) = v92;
        *((void *)v89 + 5) = *((void *)v90 + 5);
        *((_DWORD *)v89 + 12) = *((_DWORD *)v90 + 12);
        *((void *)v89 + 7) = *((void *)v90 + 7);
        *((_DWORD *)v89 + 16) = *((_DWORD *)v90 + 16);
        *((_DWORD *)v89 + 17) = *((_DWORD *)v90 + 17);
        *((_DWORD *)v89 + 18) = *((_DWORD *)v90 + 18);
        *((_DWORD *)v89 + 19) = *((_DWORD *)v90 + 19);
        *((void *)v89 + 10) = *((void *)v90 + 10);
        id v93 = v92;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v94 = *((_OWORD *)v90 + 1);
        *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
        *((_OWORD *)v89 + 1) = v94;
        long long v95 = *((_OWORD *)v90 + 2);
        long long v96 = *((_OWORD *)v90 + 3);
        long long v97 = *((_OWORD *)v90 + 4);
        *((void *)v89 + 10) = *((void *)v90 + 10);
        *((_OWORD *)v89 + 3) = v96;
        *((_OWORD *)v89 + 4) = v97;
        *((_OWORD *)v89 + 2) = v95;
      }
      *((unsigned char *)v205 + v204[12]) = *((unsigned char *)v206 + v204[12]);
      uint64_t v98 = v204[13];
      char v99 = (char *)v205 + v98;
      uint64_t v100 = (char *)v206 + v98;
      if (*(void *)v100)
      {
        uint64_t v101 = *((void *)v100 + 1);
        *(void *)char v99 = *(void *)v100;
        *((void *)v99 + 1) = v101;
        *((_DWORD *)v99 + 4) = *((_DWORD *)v100 + 4);
        *((void *)v99 + 3) = *((void *)v100 + 3);
        uint64_t v102 = (void *)*((void *)v100 + 4);
        *((void *)v99 + 4) = v102;
        *((void *)v99 + 5) = *((void *)v100 + 5);
        *((_DWORD *)v99 + 12) = *((_DWORD *)v100 + 12);
        *((void *)v99 + 7) = *((void *)v100 + 7);
        *((_DWORD *)v99 + 16) = *((_DWORD *)v100 + 16);
        *((_DWORD *)v99 + 17) = *((_DWORD *)v100 + 17);
        *((_DWORD *)v99 + 18) = *((_DWORD *)v100 + 18);
        *((_DWORD *)v99 + 19) = *((_DWORD *)v100 + 19);
        *((void *)v99 + 10) = *((void *)v100 + 10);
        id v103 = v102;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v104 = *((_OWORD *)v100 + 1);
        *(_OWORD *)char v99 = *(_OWORD *)v100;
        *((_OWORD *)v99 + 1) = v104;
        long long v105 = *((_OWORD *)v100 + 2);
        long long v106 = *((_OWORD *)v100 + 3);
        long long v107 = *((_OWORD *)v100 + 4);
        *((void *)v99 + 10) = *((void *)v100 + 10);
        *((_OWORD *)v99 + 3) = v106;
        *((_OWORD *)v99 + 4) = v107;
        *((_OWORD *)v99 + 2) = v105;
      }
      (*(void (**)(void *, void, uint64_t, int *))(v202 + 56))(v205, 0, 1, v204);
      goto LABEL_32;
    }
LABEL_14:
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v12, v13, *(void *)(*(void *)(v38 - 8) + 64));
    goto LABEL_32;
  }
  if (v18)
  {
    outlined destroy of ToolbarStorage.Entry((uint64_t)v12, type metadata accessor for ToolbarStorage.SearchItem);
    goto LABEL_14;
  }
  *uint64_t v12 = *v13;
  swift_retain();
  swift_release();
  v12[1] = v13[1];
  swift_retain();
  swift_release();
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v40 = *(int *)(v39 + 32);
  uint64_t v41 = (char *)v12 + v40;
  uint64_t v42 = (char *)v13 + v40;
  char *v41 = *((unsigned char *)v13 + v40);
  v41[1] = *((unsigned char *)v13 + v40 + 1);
  v41[2] = *((unsigned char *)v13 + v40 + 2);
  v41[3] = *((unsigned char *)v13 + v40 + 3);
  LODWORD(v40) = *(_DWORD *)((char *)v13 + v40 + 4);
  v41[8] = v42[8];
  *((_DWORD *)v41 + 1) = v40;
  int v43 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v44 = v43[9];
  uint64_t v45 = &v41[v44];
  v207 = v13;
  char v46 = &v42[v44];
  uint64_t v47 = type metadata accessor for AttributedString();
  uint64_t v48 = v46;
  uint64_t v49 = v207;
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 24))(v45, v48, v47);
  v41[v43[10]] = v42[v43[10]];
  uint64_t v50 = v43[11];
  uint64_t v51 = &v41[v50];
  uint64_t v52 = &v42[v50];
  *(_DWORD *)uint64_t v51 = *(_DWORD *)v52;
  v51[4] = v52[4];
  *(void *)((char *)v12 + v14[5]) = *(void *)((char *)v207 + v14[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v53 = v14[6];
  uint64_t v54 = (uint64_t)v12 + v53;
  uint64_t v55 = (char *)v207 + v53;
  int v56 = *((unsigned __int8 *)v12 + v53 + 8);
  int v57 = *((unsigned __int8 *)v207 + v53 + 8);
  if (v56 == 255)
  {
    if (v57 == 255)
    {
      uint64_t v109 = *(void *)v55;
      *(unsigned char *)(v54 + 8) = v55[8];
      *(void *)uint64_t v54 = v109;
    }
    else
    {
      char v114 = v57 & 1;
      uint64_t v115 = *(void *)v55;
      outlined copy of PlatformItemCollection.Storage(*(void *)v55, v57 & 1);
      *(void *)uint64_t v54 = v115;
      uint64_t v49 = v207;
      *(unsigned char *)(v54 + 8) = v114;
    }
  }
  else if (v57 == 255)
  {
    outlined destroy of PlatformItemCollection(v54);
    char v58 = v55[8];
    *(void *)uint64_t v54 = *(void *)v55;
    *(unsigned char *)(v54 + 8) = v58;
  }
  else
  {
    char v110 = v57 & 1;
    uint64_t v111 = *(void *)v55;
    outlined copy of PlatformItemCollection.Storage(*(void *)v55, v57 & 1);
    uint64_t v112 = *(void *)v54;
    char v113 = *(unsigned char *)(v54 + 8);
    *(void *)uint64_t v54 = v111;
    uint64_t v49 = v207;
    *(unsigned char *)(v54 + 8) = v110;
    outlined consume of PlatformItemCollection.Storage(v112, v113);
  }
  uint64_t v116 = v14[7];
  uint64_t v117 = (uint64_t)v12 + v116;
  uint64_t v118 = (uint64_t)v49 + v116;
  int v119 = *((unsigned __int8 *)v12 + v116 + 8);
  int v120 = *((unsigned __int8 *)v49 + v116 + 8);
  if (v119 == 255)
  {
    if (v120 == 255)
    {
      uint64_t v122 = *(void *)v118;
      *(unsigned char *)(v117 + 8) = *(unsigned char *)(v118 + 8);
      *(void *)uint64_t v117 = v122;
    }
    else
    {
      char v127 = v120 & 1;
      uint64_t v128 = *(void *)v118;
      outlined copy of PlatformItemCollection.Storage(*(void *)v118, v120 & 1);
      *(void *)uint64_t v117 = v128;
      uint64_t v49 = v207;
      *(unsigned char *)(v117 + 8) = v127;
    }
  }
  else if (v120 == 255)
  {
    outlined destroy of PlatformItemCollection(v117);
    char v121 = *(unsigned char *)(v118 + 8);
    *(void *)uint64_t v117 = *(void *)v118;
    *(unsigned char *)(v117 + 8) = v121;
  }
  else
  {
    char v123 = v120 & 1;
    uint64_t v124 = *(void *)v118;
    outlined copy of PlatformItemCollection.Storage(*(void *)v118, v120 & 1);
    uint64_t v125 = *(void *)v117;
    char v126 = *(unsigned char *)(v117 + 8);
    *(void *)uint64_t v117 = v124;
    uint64_t v49 = v207;
    *(unsigned char *)(v117 + 8) = v123;
    outlined consume of PlatformItemCollection.Storage(v125, v126);
  }
  uint64_t v129 = v14[8];
  long long v130 = (char *)v12 + v129;
  uint64_t v131 = (uint64_t)v49 + v129;
  uint64_t v132 = *(void *)((char *)v49 + v129);
  uint64_t v133 = *(void *)((char *)v49 + v129 + 8);
  char v134 = *((unsigned char *)v49 + v129 + 16);
  outlined copy of Text.Storage(v132, v133, v134);
  uint64_t v135 = *(void *)v130;
  uint64_t v136 = *((void *)v130 + 1);
  char v137 = v130[16];
  *(void *)long long v130 = v132;
  *((void *)v130 + 1) = v133;
  v130[16] = v134;
  long long v138 = v207;
  outlined consume of Text.Storage(v135, v136, v137);
  *((void *)v130 + 3) = *(void *)(v131 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v139 = v14[9];
  long long v140 = (char *)v12 + v139;
  long long v141 = (char *)v207 + v139;
  *(void *)((char *)v12 + v139) = *(void *)((char *)v207 + v139);
  swift_retain();
  swift_release();
  *((void *)v140 + 1) = *((void *)v141 + 1);
  swift_retain();
  swift_release();
  uint64_t v142 = v14[10];
  uint64_t v143 = (uint64_t)v12 + v142;
  long long v144 = (char *)v207 + v142;
  uint64_t v145 = *(void *)((char *)v12 + v142);
  uint64_t v146 = *(void *)((char *)v207 + v142);
  if (v145)
  {
    if (v146)
    {
      uint64_t v147 = *((void *)v144 + 1);
      *(void *)uint64_t v143 = v146;
      *(void *)(v143 + 8) = v147;
      *(_DWORD *)(v143 + 16) = *((_DWORD *)v144 + 4);
      *(void *)(v143 + 24) = *((void *)v144 + 3);
      uint64_t v148 = (void *)*((void *)v144 + 4);
      uint64_t v149 = *(void **)(v143 + 32);
      *(void *)(v143 + 32) = v148;
      id v150 = v148;

      *(void *)(v143 + 40) = *((void *)v144 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v143 + 48) = *((_DWORD *)v144 + 12);
      *(void *)(v143 + 56) = *((void *)v144 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v143 + 64) = *((_DWORD *)v144 + 16);
      *(_DWORD *)(v143 + 68) = *((_DWORD *)v144 + 17);
      *(_DWORD *)(v143 + 72) = *((_DWORD *)v144 + 18);
      *(_DWORD *)(v143 + 76) = *((_DWORD *)v144 + 19);
      *(void *)(v143 + 80) = *((void *)v144 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v143);
      long long v154 = *((_OWORD *)v144 + 1);
      *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
      *(_OWORD *)(v143 + 16) = v154;
      long long v156 = *((_OWORD *)v144 + 3);
      long long v155 = *((_OWORD *)v144 + 4);
      long long v157 = *((_OWORD *)v144 + 2);
      *(void *)(v143 + 80) = *((void *)v144 + 10);
      *(_OWORD *)(v143 + 48) = v156;
      *(_OWORD *)(v143 + 64) = v155;
      *(_OWORD *)(v143 + 32) = v157;
    }
  }
  else if (v146)
  {
    uint64_t v151 = *((void *)v144 + 1);
    *(void *)uint64_t v143 = v146;
    *(void *)(v143 + 8) = v151;
    *(_DWORD *)(v143 + 16) = *((_DWORD *)v144 + 4);
    *(void *)(v143 + 24) = *((void *)v144 + 3);
    unint64_t v152 = (void *)*((void *)v144 + 4);
    *(void *)(v143 + 32) = v152;
    *(void *)(v143 + 40) = *((void *)v144 + 5);
    *(_DWORD *)(v143 + 48) = *((_DWORD *)v144 + 12);
    *(void *)(v143 + 56) = *((void *)v144 + 7);
    *(_DWORD *)(v143 + 64) = *((_DWORD *)v144 + 16);
    *(_DWORD *)(v143 + 68) = *((_DWORD *)v144 + 17);
    *(_DWORD *)(v143 + 72) = *((_DWORD *)v144 + 18);
    *(_DWORD *)(v143 + 76) = *((_DWORD *)v144 + 19);
    *(void *)(v143 + 80) = *((void *)v144 + 10);
    id v153 = v152;
    swift_retain();
    long long v138 = v207;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v158 = *((_OWORD *)v144 + 1);
    *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
    *(_OWORD *)(v143 + 16) = v158;
    long long v159 = *((_OWORD *)v144 + 2);
    long long v160 = *((_OWORD *)v144 + 3);
    long long v161 = *((_OWORD *)v144 + 4);
    *(void *)(v143 + 80) = *((void *)v144 + 10);
    *(_OWORD *)(v143 + 48) = v160;
    *(_OWORD *)(v143 + 64) = v161;
    *(_OWORD *)(v143 + 32) = v159;
  }
  uint64_t v162 = v14[11];
  uint64_t v163 = (uint64_t)v12 + v162;
  uint64_t v164 = (uint64_t)v138 + v162;
  uint64_t v165 = *(void *)((char *)v12 + v162);
  uint64_t v166 = *(void *)((char *)v138 + v162);
  if (v165)
  {
    if (v166)
    {
      uint64_t v167 = *(void *)(v164 + 8);
      *(void *)uint64_t v163 = v166;
      *(void *)(v163 + 8) = v167;
      *(_DWORD *)(v163 + 16) = *(_DWORD *)(v164 + 16);
      *(void *)(v163 + 24) = *(void *)(v164 + 24);
      uint64_t v168 = *(void **)(v164 + 32);
      uint64_t v169 = *(void **)(v163 + 32);
      *(void *)(v163 + 32) = v168;
      id v170 = v168;

      *(void *)(v163 + 40) = *(void *)(v164 + 40);
      swift_retain();
      swift_release();
      *(_DWORD *)(v163 + 48) = *(_DWORD *)(v164 + 48);
      *(void *)(v163 + 56) = *(void *)(v164 + 56);
      swift_retain();
      swift_release();
      *(_DWORD *)(v163 + 64) = *(_DWORD *)(v164 + 64);
      *(_DWORD *)(v163 + 68) = *(_DWORD *)(v164 + 68);
      *(_DWORD *)(v163 + 72) = *(_DWORD *)(v164 + 72);
      *(_DWORD *)(v163 + 76) = *(_DWORD *)(v164 + 76);
      *(void *)(v163 + 80) = *(void *)(v164 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v163);
      long long v174 = *(_OWORD *)(v164 + 16);
      *(_OWORD *)uint64_t v163 = *(_OWORD *)v164;
      *(_OWORD *)(v163 + 16) = v174;
      long long v176 = *(_OWORD *)(v164 + 48);
      long long v175 = *(_OWORD *)(v164 + 64);
      long long v177 = *(_OWORD *)(v164 + 32);
      *(void *)(v163 + 80) = *(void *)(v164 + 80);
      *(_OWORD *)(v163 + 48) = v176;
      *(_OWORD *)(v163 + 64) = v175;
      *(_OWORD *)(v163 + 32) = v177;
    }
  }
  else if (v166)
  {
    uint64_t v171 = *(void *)(v164 + 8);
    *(void *)uint64_t v163 = v166;
    *(void *)(v163 + 8) = v171;
    *(_DWORD *)(v163 + 16) = *(_DWORD *)(v164 + 16);
    *(void *)(v163 + 24) = *(void *)(v164 + 24);
    long long v172 = *(void **)(v164 + 32);
    *(void *)(v163 + 32) = v172;
    *(void *)(v163 + 40) = *(void *)(v164 + 40);
    *(_DWORD *)(v163 + 48) = *(_DWORD *)(v164 + 48);
    *(void *)(v163 + 56) = *(void *)(v164 + 56);
    *(_DWORD *)(v163 + 64) = *(_DWORD *)(v164 + 64);
    *(_DWORD *)(v163 + 68) = *(_DWORD *)(v164 + 68);
    *(_DWORD *)(v163 + 72) = *(_DWORD *)(v164 + 72);
    *(_DWORD *)(v163 + 76) = *(_DWORD *)(v164 + 76);
    *(void *)(v163 + 80) = *(void *)(v164 + 80);
    id v173 = v172;
    swift_retain();
    long long v138 = v207;
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v178 = *(_OWORD *)(v164 + 16);
    *(_OWORD *)uint64_t v163 = *(_OWORD *)v164;
    *(_OWORD *)(v163 + 16) = v178;
    long long v179 = *(_OWORD *)(v164 + 32);
    long long v180 = *(_OWORD *)(v164 + 48);
    long long v181 = *(_OWORD *)(v164 + 64);
    *(void *)(v163 + 80) = *(void *)(v164 + 80);
    *(_OWORD *)(v163 + 48) = v180;
    *(_OWORD *)(v163 + 64) = v181;
    *(_OWORD *)(v163 + 32) = v179;
  }
  *((unsigned char *)v12 + v14[12]) = *((unsigned char *)v138 + v14[12]);
  uint64_t v182 = v14[13];
  uint64_t v183 = (uint64_t)v12 + v182;
  uint64_t v184 = (uint64_t)v138 + v182;
  uint64_t v185 = *(void *)((char *)v12 + v182);
  uint64_t v186 = *(void *)((char *)v138 + v182);
  if (v185)
  {
    if (v186)
    {
      uint64_t v187 = *(void *)(v184 + 8);
      *(void *)uint64_t v183 = v186;
      *(void *)(v183 + 8) = v187;
      *(_DWORD *)(v183 + 16) = *(_DWORD *)(v184 + 16);
      *(void *)(v183 + 24) = *(void *)(v184 + 24);
      long long v188 = *(void **)(v184 + 32);
      unint64_t v189 = *(void **)(v183 + 32);
      *(void *)(v183 + 32) = v188;
      id v190 = v188;

      *(void *)(v183 + 40) = *(void *)(v184 + 40);
      swift_retain();
      swift_release();
      *(_DWORD *)(v183 + 48) = *(_DWORD *)(v184 + 48);
      *(void *)(v183 + 56) = *(void *)(v184 + 56);
      swift_retain();
      swift_release();
      *(_DWORD *)(v183 + 64) = *(_DWORD *)(v184 + 64);
      *(_DWORD *)(v183 + 68) = *(_DWORD *)(v184 + 68);
      *(_DWORD *)(v183 + 72) = *(_DWORD *)(v184 + 72);
      *(_DWORD *)(v183 + 76) = *(_DWORD *)(v184 + 76);
      *(void *)(v183 + 80) = *(void *)(v184 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v183);
      long long v194 = *(_OWORD *)(v184 + 16);
      *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
      *(_OWORD *)(v183 + 16) = v194;
      long long v196 = *(_OWORD *)(v184 + 48);
      long long v195 = *(_OWORD *)(v184 + 64);
      long long v197 = *(_OWORD *)(v184 + 32);
      *(void *)(v183 + 80) = *(void *)(v184 + 80);
      *(_OWORD *)(v183 + 48) = v196;
      *(_OWORD *)(v183 + 64) = v195;
      *(_OWORD *)(v183 + 32) = v197;
    }
  }
  else if (v186)
  {
    uint64_t v191 = *(void *)(v184 + 8);
    *(void *)uint64_t v183 = v186;
    *(void *)(v183 + 8) = v191;
    *(_DWORD *)(v183 + 16) = *(_DWORD *)(v184 + 16);
    *(void *)(v183 + 24) = *(void *)(v184 + 24);
    uint64_t v192 = *(void **)(v184 + 32);
    *(void *)(v183 + 32) = v192;
    *(void *)(v183 + 40) = *(void *)(v184 + 40);
    *(_DWORD *)(v183 + 48) = *(_DWORD *)(v184 + 48);
    *(void *)(v183 + 56) = *(void *)(v184 + 56);
    *(_DWORD *)(v183 + 64) = *(_DWORD *)(v184 + 64);
    *(_DWORD *)(v183 + 68) = *(_DWORD *)(v184 + 68);
    *(_DWORD *)(v183 + 72) = *(_DWORD *)(v184 + 72);
    *(_DWORD *)(v183 + 76) = *(_DWORD *)(v184 + 76);
    *(void *)(v183 + 80) = *(void *)(v184 + 80);
    id v193 = v192;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v198 = *(_OWORD *)(v184 + 16);
    *(_OWORD *)uint64_t v183 = *(_OWORD *)v184;
    *(_OWORD *)(v183 + 16) = v198;
    long long v199 = *(_OWORD *)(v184 + 32);
    long long v200 = *(_OWORD *)(v184 + 48);
    long long v201 = *(_OWORD *)(v184 + 64);
    *(void *)(v183 + 80) = *(void *)(v184 + 80);
    *(_OWORD *)(v183 + 48) = v200;
    *(_OWORD *)(v183 + 64) = v201;
    *(_OWORD *)(v183 + 32) = v199;
  }
LABEL_32:
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for ToolbarReader.ToolbarConfiguration(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  uint64_t v8 = *(int *)(a3 + 52);
  uint64_t v9 = (void *)((char *)a1 + v8);
  long long v10 = (void *)((char *)a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  uint64_t v12 = *((void *)v11 - 1);
  if ((*(unsigned int (**)(void *, uint64_t, int *))(v12 + 48))(v10, 1, v11))
  {
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v14;
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v16 = *(int *)(v15 + 32);
    int v17 = (char *)v9 + v16;
    uint64_t v56 = v3;
    int v18 = (char *)v10 + v16;
    *int v17 = *((unsigned char *)v10 + v16);
    v17[1] = *((unsigned char *)v10 + v16 + 1);
    *((_WORD *)v17 + 1) = *(_WORD *)((char *)v10 + v16 + 2);
    v17[8] = *((unsigned char *)v10 + v16 + 8);
    *((_DWORD *)v17 + 1) = *(_DWORD *)((char *)v10 + v16 + 4);
    uint64_t v55 = v12;
    uint64_t v19 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v20 = v19[9];
    uint64_t v21 = &v17[v20];
    uint64_t v22 = &v18[v20];
    uint64_t v23 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
    v17[v19[10]] = v18[v19[10]];
    uint64_t v24 = v19[11];
    uint64_t v25 = &v17[v24];
    uint64_t v26 = &v18[v24];
    uint64_t v3 = v56;
    uint64_t v25[4] = v26[4];
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
    *(void *)((char *)v9 + v11[5]) = *(void *)((char *)v10 + v11[5]);
    uint64_t v27 = v11[6];
    uint64_t v28 = (char *)v9 + v27;
    uint64_t v29 = (char *)v10 + v27;
    v28[8] = v29[8];
    *(void *)uint64_t v28 = *(void *)v29;
    uint64_t v30 = v11[7];
    int v31 = (char *)v9 + v30;
    char v32 = (char *)v10 + v30;
    v31[8] = v32[8];
    *(void *)int v31 = *(void *)v32;
    uint64_t v33 = v11[8];
    uint64_t v34 = (_OWORD *)((char *)v9 + v33);
    uint64_t v35 = (_OWORD *)((char *)v10 + v33);
    long long v36 = v35[1];
    *uint64_t v34 = *v35;
    v34[1] = v36;
    *(_OWORD *)((char *)v9 + v11[9]) = *(_OWORD *)((char *)v10 + v11[9]);
    uint64_t v37 = v11[10];
    uint64_t v38 = (char *)v9 + v37;
    uint64_t v39 = (char *)v10 + v37;
    long long v40 = *((_OWORD *)v39 + 1);
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
    *((_OWORD *)v38 + 1) = v40;
    *((void *)v38 + 10) = *((void *)v39 + 10);
    long long v41 = *((_OWORD *)v39 + 4);
    long long v42 = *((_OWORD *)v39 + 2);
    *((_OWORD *)v38 + 3) = *((_OWORD *)v39 + 3);
    *((_OWORD *)v38 + 4) = v41;
    *((_OWORD *)v38 + 2) = v42;
    uint64_t v43 = v11[11];
    uint64_t v44 = (char *)v9 + v43;
    uint64_t v45 = (char *)v10 + v43;
    long long v46 = *((_OWORD *)v45 + 3);
    *((_OWORD *)v44 + 2) = *((_OWORD *)v45 + 2);
    *((_OWORD *)v44 + 3) = v46;
    *((_OWORD *)v44 + 4) = *((_OWORD *)v45 + 4);
    *((void *)v44 + 10) = *((void *)v45 + 10);
    long long v47 = *((_OWORD *)v45 + 1);
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    *((_OWORD *)v44 + 1) = v47;
    *((unsigned char *)v9 + v11[12]) = *((unsigned char *)v10 + v11[12]);
    uint64_t v48 = v11[13];
    uint64_t v49 = (char *)v9 + v48;
    uint64_t v50 = (char *)v10 + v48;
    long long v51 = *((_OWORD *)v50 + 3);
    *((_OWORD *)v49 + 2) = *((_OWORD *)v50 + 2);
    *((_OWORD *)v49 + 3) = v51;
    *((_OWORD *)v49 + 4) = *((_OWORD *)v50 + 4);
    *((void *)v49 + 10) = *((void *)v50 + 10);
    long long v52 = *((_OWORD *)v50 + 1);
    *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
    *((_OWORD *)v49 + 1) = v52;
    (*(void (**)(void *, void, uint64_t, int *))(v55 + 56))(v9, 0, 1, v11);
  }
  uint64_t v53 = *(int *)(v3 + 60);
  *(void *)((char *)a1 + *(int *)(v3 + 56)) = *(void *)((char *)a2 + *(int *)(v3 + 56));
  *(void *)((char *)a1 + v53) = *(void *)((char *)a2 + v53);
  return a1;
}

uint64_t assignWithTake for ToolbarReader.ToolbarConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a2 + 24))
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_release();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_release();
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      goto LABEL_6;
    }
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1(a1 + 16, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
LABEL_6:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[13];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  long long v10 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, int *))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (v14)
    {
      outlined destroy of ToolbarStorage.Entry((uint64_t)v8, type metadata accessor for ToolbarStorage.SearchItem);
      goto LABEL_11;
    }
    uint64_t v56 = v9;
    uint64_t v116 = a3;
    *uint64_t v8 = *v9;
    swift_release();
    v8[1] = v9[1];
    swift_release();
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v58 = *(int *)(v57 + 32);
    char v59 = (char *)v8 + v58;
    uint64_t v60 = (char *)v9 + v58;
    *char v59 = *((unsigned char *)v9 + v58);
    v59[1] = *((unsigned char *)v9 + v58 + 1);
    *((_WORD *)v59 + 1) = *(_WORD *)((char *)v9 + v58 + 2);
    v59[8] = *((unsigned char *)v9 + v58 + 8);
    *((_DWORD *)v59 + 1) = *(_DWORD *)((char *)v9 + v58 + 4);
    uint64_t v61 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v62 = v61[9];
    id v63 = &v59[v62];
    int v64 = &v60[v62];
    uint64_t v65 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 40))(v63, v64, v65);
    v59[v61[10]] = v60[v61[10]];
    uint64_t v66 = v61[11];
    uint64_t v67 = &v59[v66];
    uint64_t v68 = &v60[v66];
    *(_DWORD *)uint64_t v67 = *(_DWORD *)v68;
    v67[4] = v68[4];
    *(void *)((char *)v8 + v10[5]) = *(void *)((char *)v56 + v10[5]);
    swift_bridgeObjectRelease();
    uint64_t v69 = v10[6];
    uint64_t v70 = (uint64_t)v8 + v69;
    uint64_t v71 = (char *)v56 + v69;
    int v72 = *((unsigned __int8 *)v8 + v69 + 8);
    if (v72 != 255)
    {
      int v73 = v71[8];
      if (v73 != 255)
      {
        uint64_t v74 = *(void *)v70;
        *(void *)uint64_t v70 = *(void *)v71;
        *(unsigned char *)(v70 + 8) = v73 & 1;
        outlined consume of PlatformItemCollection.Storage(v74, v72 & 1);
LABEL_18:
        uint64_t v75 = v10[7];
        uint64_t v76 = (uint64_t)v8 + v75;
        uint64_t v77 = (char *)v56 + v75;
        int v78 = *((unsigned __int8 *)v8 + v75 + 8);
        if (v78 != 255)
        {
          int v79 = v77[8];
          if (v79 != 255)
          {
            uint64_t v80 = *(void *)v76;
            *(void *)uint64_t v76 = *(void *)v77;
            *(unsigned char *)(v76 + 8) = v79 & 1;
            outlined consume of PlatformItemCollection.Storage(v80, v78 & 1);
LABEL_23:
            uint64_t v81 = v10[8];
            uint64_t v82 = (char *)v8 + v81;
            id v83 = (char *)v56 + v81;
            LOBYTE(v81) = *((unsigned char *)v56 + v81 + 16);
            uint64_t v84 = *(void *)v82;
            uint64_t v85 = *((void *)v82 + 1);
            char v86 = v82[16];
            *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
            v82[16] = v81;
            outlined consume of Text.Storage(v84, v85, v86);
            *((void *)v82 + 3) = *((void *)v83 + 3);
            swift_bridgeObjectRelease();
            uint64_t v87 = v10[9];
            uint64_t v88 = (char *)v8 + v87;
            uint64_t v89 = (char *)v56 + v87;
            *(void *)((char *)v8 + v87) = *(void *)((char *)v56 + v87);
            swift_release();
            *((void *)v88 + 1) = *((void *)v89 + 1);
            swift_release();
            uint64_t v90 = v10[10];
            uint64_t v91 = (uint64_t)v8 + v90;
            unint64_t v92 = (char *)v56 + v90;
            if (*(void *)((char *)v8 + v90))
            {
              if (*(void *)v92)
              {
                uint64_t v93 = *((void *)v92 + 1);
                *(void *)uint64_t v91 = *(void *)v92;
                *(void *)(v91 + 8) = v93;
                *(_DWORD *)(v91 + 16) = *((_DWORD *)v92 + 4);
                uint64_t v94 = *((void *)v92 + 4);
                long long v95 = *(void **)(v91 + 32);
                *(void *)(v91 + 24) = *((void *)v92 + 3);
                *(void *)(v91 + 32) = v94;

                *(void *)(v91 + 40) = *((void *)v92 + 5);
                swift_release();
                *(_DWORD *)(v91 + 48) = *((_DWORD *)v92 + 12);
                *(void *)(v91 + 56) = *((void *)v92 + 7);
                swift_release();
                *(_OWORD *)(v91 + 64) = *((_OWORD *)v92 + 4);
                *(void *)(v91 + 80) = *((void *)v92 + 10);
                swift_bridgeObjectRelease();
                goto LABEL_28;
              }
              outlined destroy of BoundInputsView(v91);
            }
            long long v96 = *((_OWORD *)v92 + 3);
            *(_OWORD *)(v91 + 32) = *((_OWORD *)v92 + 2);
            *(_OWORD *)(v91 + 48) = v96;
            *(_OWORD *)(v91 + 64) = *((_OWORD *)v92 + 4);
            *(void *)(v91 + 80) = *((void *)v92 + 10);
            long long v97 = *((_OWORD *)v92 + 1);
            *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
            *(_OWORD *)(v91 + 16) = v97;
LABEL_28:
            a3 = v116;
            uint64_t v98 = v10[11];
            uint64_t v99 = (uint64_t)v8 + v98;
            uint64_t v100 = (char *)v56 + v98;
            if (*(void *)((char *)v8 + v98))
            {
              if (*(void *)v100)
              {
                uint64_t v101 = *((void *)v100 + 1);
                *(void *)uint64_t v99 = *(void *)v100;
                *(void *)(v99 + 8) = v101;
                *(_DWORD *)(v99 + 16) = *((_DWORD *)v100 + 4);
                uint64_t v102 = *((void *)v100 + 4);
                id v103 = *(void **)(v99 + 32);
                *(void *)(v99 + 24) = *((void *)v100 + 3);
                *(void *)(v99 + 32) = v102;

                *(void *)(v99 + 40) = *((void *)v100 + 5);
                swift_release();
                *(_DWORD *)(v99 + 48) = *((_DWORD *)v100 + 12);
                *(void *)(v99 + 56) = *((void *)v100 + 7);
                swift_release();
                *(_OWORD *)(v99 + 64) = *((_OWORD *)v100 + 4);
                *(void *)(v99 + 80) = *((void *)v100 + 10);
                swift_bridgeObjectRelease();
                goto LABEL_33;
              }
              outlined destroy of BoundInputsView(v99);
            }
            long long v104 = *((_OWORD *)v100 + 3);
            *(_OWORD *)(v99 + 32) = *((_OWORD *)v100 + 2);
            *(_OWORD *)(v99 + 48) = v104;
            *(_OWORD *)(v99 + 64) = *((_OWORD *)v100 + 4);
            *(void *)(v99 + 80) = *((void *)v100 + 10);
            long long v105 = *((_OWORD *)v100 + 1);
            *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
            *(_OWORD *)(v99 + 16) = v105;
LABEL_33:
            *((unsigned char *)v8 + v10[12]) = *((unsigned char *)v56 + v10[12]);
            uint64_t v106 = v10[13];
            uint64_t v107 = (uint64_t)v8 + v106;
            uint64_t v108 = (char *)v56 + v106;
            if (*(void *)v107)
            {
              if (*(void *)v108)
              {
                uint64_t v109 = *((void *)v108 + 1);
                *(void *)uint64_t v107 = *(void *)v108;
                *(void *)(v107 + 8) = v109;
                *(_DWORD *)(v107 + 16) = *((_DWORD *)v108 + 4);
                uint64_t v110 = *((void *)v108 + 4);
                uint64_t v111 = *(void **)(v107 + 32);
                *(void *)(v107 + 24) = *((void *)v108 + 3);
                *(void *)(v107 + 32) = v110;

                *(void *)(v107 + 40) = *((void *)v108 + 5);
                swift_release();
                *(_DWORD *)(v107 + 48) = *((_DWORD *)v108 + 12);
                *(void *)(v107 + 56) = *((void *)v108 + 7);
                swift_release();
                *(_OWORD *)(v107 + 64) = *((_OWORD *)v108 + 4);
                *(void *)(v107 + 80) = *((void *)v108 + 10);
                swift_bridgeObjectRelease();
                goto LABEL_12;
              }
              outlined destroy of BoundInputsView(v107);
            }
            long long v112 = *((_OWORD *)v108 + 3);
            *(_OWORD *)(v107 + 32) = *((_OWORD *)v108 + 2);
            *(_OWORD *)(v107 + 48) = v112;
            *(_OWORD *)(v107 + 64) = *((_OWORD *)v108 + 4);
            *(void *)(v107 + 80) = *((void *)v108 + 10);
            long long v113 = *((_OWORD *)v108 + 1);
            *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
            *(_OWORD *)(v107 + 16) = v113;
            goto LABEL_12;
          }
          outlined destroy of PlatformItemCollection(v76);
        }
        *(void *)uint64_t v76 = *(void *)v77;
        *(unsigned char *)(v76 + 8) = v77[8];
        goto LABEL_23;
      }
      outlined destroy of PlatformItemCollection(v70);
    }
    *(void *)uint64_t v70 = *(void *)v71;
    *(unsigned char *)(v70 + 8) = v71[8];
    goto LABEL_18;
  }
  if (v14)
  {
LABEL_11:
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v8, v9, *(void *)(*(void *)(v54 - 8) + 64));
    goto LABEL_12;
  }
  uint64_t v15 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v15;
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v17 = *(int *)(v16 + 32);
  uint64_t v115 = a3;
  int v18 = (char *)v8 + v17;
  uint64_t v19 = v9;
  uint64_t v20 = (char *)v9 + v17;
  *int v18 = *v20;
  v18[1] = v20[1];
  *((_WORD *)v18 + 1) = *((_WORD *)v20 + 1);
  v18[8] = v20[8];
  *((_DWORD *)v18 + 1) = *((_DWORD *)v20 + 1);
  uint64_t v21 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v22 = v21[9];
  char v114 = &v18[v22];
  uint64_t v23 = &v20[v22];
  uint64_t v24 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v114, v23, v24);
  v18[v21[10]] = v20[v21[10]];
  uint64_t v25 = v21[11];
  uint64_t v26 = &v18[v25];
  a3 = v115;
  uint64_t v27 = &v20[v25];
  unsigned char v26[4] = v27[4];
  *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
  *(void *)((char *)v8 + v10[5]) = *(void *)((char *)v19 + v10[5]);
  uint64_t v28 = v10[6];
  uint64_t v29 = (char *)v8 + v28;
  uint64_t v30 = (char *)v19 + v28;
  v29[8] = v30[8];
  *(void *)uint64_t v29 = *(void *)v30;
  uint64_t v31 = v10[7];
  char v32 = (char *)v8 + v31;
  uint64_t v33 = (char *)v19 + v31;
  v32[8] = v33[8];
  *(void *)char v32 = *(void *)v33;
  uint64_t v34 = v10[8];
  uint64_t v35 = (_OWORD *)((char *)v8 + v34);
  long long v36 = (_OWORD *)((char *)v19 + v34);
  long long v37 = v36[1];
  _OWORD *v35 = *v36;
  v35[1] = v37;
  *(_OWORD *)((char *)v8 + v10[9]) = *(_OWORD *)((char *)v19 + v10[9]);
  uint64_t v38 = v10[10];
  uint64_t v39 = (char *)v8 + v38;
  long long v40 = (char *)v19 + v38;
  long long v41 = *((_OWORD *)v40 + 1);
  *(_OWORD *)uint64_t v39 = *(_OWORD *)v40;
  *((_OWORD *)v39 + 1) = v41;
  *((void *)v39 + 10) = *((void *)v40 + 10);
  long long v42 = *((_OWORD *)v40 + 4);
  long long v43 = *((_OWORD *)v40 + 2);
  *((_OWORD *)v39 + 3) = *((_OWORD *)v40 + 3);
  *((_OWORD *)v39 + 4) = v42;
  *((_OWORD *)v39 + 2) = v43;
  uint64_t v44 = v10[11];
  uint64_t v45 = (char *)v8 + v44;
  long long v46 = (char *)v19 + v44;
  long long v47 = *((_OWORD *)v46 + 3);
  *((_OWORD *)v45 + 2) = *((_OWORD *)v46 + 2);
  *((_OWORD *)v45 + 3) = v47;
  *((_OWORD *)v45 + 4) = *((_OWORD *)v46 + 4);
  *((void *)v45 + 10) = *((void *)v46 + 10);
  long long v48 = *((_OWORD *)v46 + 1);
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  *((_OWORD *)v45 + 1) = v48;
  *((unsigned char *)v8 + v10[12]) = *((unsigned char *)v19 + v10[12]);
  uint64_t v49 = v10[13];
  uint64_t v50 = (char *)v8 + v49;
  long long v51 = (char *)v19 + v49;
  long long v52 = *((_OWORD *)v51 + 3);
  *((_OWORD *)v50 + 2) = *((_OWORD *)v51 + 2);
  *((_OWORD *)v50 + 3) = v52;
  *((_OWORD *)v50 + 4) = *((_OWORD *)v51 + 4);
  *((void *)v50 + 10) = *((void *)v51 + 10);
  long long v53 = *((_OWORD *)v51 + 1);
  *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
  *((_OWORD *)v50 + 1) = v53;
  (*(void (**)(void *, void, uint64_t, int *))(v11 + 56))(v8, 0, 1, v10);
LABEL_12:
  *(void *)(a1 + a3[14]) = *(void *)(a2 + a3[14]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarReader.ToolbarConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F826DC);
}

uint64_t sub_187F826DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 52);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarReader.ToolbarConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F827A0);
}

uint64_t sub_187F827A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 40) = (a2 - 1);
  }
  else
  {
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 52);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

ValueMetadata *type metadata accessor for EmptyToolbarStrategy()
{
  return &type metadata for EmptyToolbarStrategy;
}

ValueMetadata *type metadata accessor for ToolbarProxy()
{
  return &type metadata for ToolbarProxy;
}

_UNKNOWN **base witness table accessor for View in ToolbarReader<A, B>.PrimitiveReader()
{
  return &protocol witness table for ToolbarReader<A, B>.PrimitiveReader;
}

uint64_t base witness table accessor for _AttributeBody in ToolbarReader<A, B>.MakeView()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ToolbarReader<A, B>.UpdateToolbarBridge()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ToolbarReader<A, B>.MakeAppearances()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ToolbarReader<A, B>.MakePrimitiveReader()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ToolbarReader<A, B>.ApplyUpdatesToExternalTarget()
{
  return swift_getWitnessTable();
}

uint64_t specialized ToolbarBridge.filterAndSortMatchingItems(in:newStorage:context:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v88 = a1;
  type metadata accessor for (ToolbarStorage.Entry, Int)();
  uint64_t v68 = *(void *)(v4 - 8);
  uint64_t v69 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v78 = (uint64_t)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v72 = (uint64_t)&v64 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v73 = (uint64_t)&v64 - v12;
  uint64_t v86 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v86);
  uint64_t v93 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v64 - v15;
  uint64_t v17 = type metadata accessor for ToolbarStorage.Item(0);
  uint64_t v66 = *(void *)(v17 - 8);
  uint64_t v67 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v77 = (uint64_t)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v64 - v20;
  uint64_t v22 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v25 = (char *)&v64 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = swift_bridgeObjectRetain();
  uint64_t v27 = 0;
  uint64_t v28 = specialized _ArrayProtocol.filter(_:)(v26);
  swift_bridgeObjectRelease();
  uint64_t v92 = *(void *)(v28 + 16);
  if (!v92)
  {
    swift_bridgeObjectRelease();
    uint64_t v61 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_186;
  }
  uint64_t v65 = 0;
  unint64_t v29 = a3;
  unint64_t v30 = 0;
  uint64_t v85 = BYTE4(v29);
  unint64_t v90 = v28 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  uint64_t v91 = v23;
  uint64_t v71 = v73 + 16;
  uint64_t v75 = v21 + 48;
  uint64_t v76 = v21;
  unsigned int v82 = (v29 >> 8) & 1;
  int v83 = v29 & 1;
  unsigned int v80 = BYTE3(v29) & 1;
  unsigned int v81 = WORD1(v29) & 1;
  unint64_t v84 = v29;
  uint64_t v79 = HIWORD(v29) & 1;
  uint64_t v89 = (void *)MEMORY[0x1E4FBC860];
  uint64_t v31 = MEMORY[0x1E4FBC870];
  uint64_t v70 = v8;
  uint64_t v32 = (uint64_t)v93;
  uint64_t v87 = v28;
  while (1)
  {
    if (v30 >= *(void *)(v28 + 16))
    {
      __break(1u);
      goto LABEL_189;
    }
    _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v90 + *(void *)(v91 + 72) * v30, (uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
    _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0((uint64_t)v25, (uint64_t)v16, type metadata accessor for ToolbarStorage.Entry.Kind);
    if (swift_getEnumCaseMultiPayload()) {
      break;
    }
    uint64_t v39 = v77;
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v16, v77, type metadata accessor for ToolbarStorage.Item);
    uint64_t v40 = v39;
    uint64_t v41 = (uint64_t)v76;
    outlined init with take of (ToolbarStorage.Entry, Int)(v40, (uint64_t)v76, type metadata accessor for ToolbarStorage.Item);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v75, (uint64_t)&v97);
    long long v37 = type metadata accessor for ToolbarStorage.Item;
    uint64_t v38 = v41;
    uint64_t v28 = v87;
LABEL_15:
    outlined destroy of ToolbarStorage.Entry(v38, v37);
    uint64_t v32 = (uint64_t)v93;
    if (v100 == 255) {
      goto LABEL_4;
    }
    unint64_t v42 = v84 >> 40;
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)&v97, (uint64_t)v104);
    LOBYTE(v97) = v83;
    BYTE1(v97) = v82;
    BYTE2(v97) = v81;
    BYTE3(v97) = v80;
    BYTE4(v97) = v85;
    BYTE5(v97) = v42;
    BYTE6(v97) = v79;
    uint64_t v43 = Toolbar.BarLocation.priority(for:context:)((uint64_t)v104, (unsigned __int8 *)&v97);
    if (v44)
    {
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v104);
      outlined destroy of ToolbarStorage.Entry((uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
      goto LABEL_169;
    }
    uint64_t v74 = v43;
    if (*(void *)(v31 + 16))
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      ToolbarItemPlacement.Role.hash(into:)();
      Swift::Int v45 = Hasher._finalize()();
      uint64_t v46 = -1 << *(unsigned char *)(v31 + 32);
      unint64_t v47 = v45 & ~v46;
      if ((*(void *)(v31 + 56 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47))
      {
        uint64_t v48 = ~v46;
        do
        {
          outlined init with copy of ToolbarItemPlacement.Role(*(void *)(v31 + 48) + 48 * v47, (uint64_t)v103);
          outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v103, (uint64_t)&v97);
          outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v104, (uint64_t)v101);
          if (v100)
          {
            if (v100 == 1)
            {
              outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v97, (uint64_t)v96);
              if (v102 == 1)
              {
                v94[0] = *(_OWORD *)v101;
                v94[1] = *(_OWORD *)&v101[16];
                uint64_t v95 = *(void *)&v101[32];
                char v49 = MEMORY[0x18C1174E0](v96, v94);
                outlined destroy of AnyHashable((uint64_t)v94);
                outlined destroy of AnyHashable((uint64_t)v96);
                if (v49) {
                  goto LABEL_153;
                }
LABEL_30:
                outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v97);
                goto LABEL_22;
              }
              outlined destroy of AnyHashable((uint64_t)v96);
            }
            else
            {
              if (!(*((void *)&v98 + 1) | v99 | (unint64_t)v97 | (unint64_t)v98 | *((void *)&v97 + 1)))
              {
                if (v102 == 2)
                {
                  int8x16_t v51 = vorrq_s8(*(int8x16_t *)&v101[8], *(int8x16_t *)&v101[24]);
                  if (!(*(void *)&vorr_s8(*(int8x8_t *)v51.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)) | *(void *)v101))
                  {
LABEL_153:
                    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v97);
                    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v103);
                    swift_bridgeObjectRelease();
                    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v104);
                    outlined destroy of ToolbarStorage.Entry((uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
                    uint64_t v8 = v70;
                    uint64_t v28 = v87;
                    uint64_t v32 = (uint64_t)v93;
                    goto LABEL_5;
                  }
                }
                goto LABEL_21;
              }
              uint64_t v50 = *((void *)&v98 + 1) | v99 | v98 | *((void *)&v97 + 1);
              if ((void)v97 != 1 || v50)
              {
                if ((void)v97 != 2 || v50)
                {
                  if ((void)v97 != 3 || v50)
                  {
                    if ((void)v97 != 4 || v50)
                    {
                      if ((void)v97 != 5 || v50)
                      {
                        if ((void)v97 != 6 || v50)
                        {
                          if ((void)v97 != 7 || v50)
                          {
                            if ((void)v97 != 8 || v50)
                            {
                              if ((void)v97 != 9 || v50)
                              {
                                if ((void)v97 != 10 || v50)
                                {
                                  if ((void)v97 != 11 || v50)
                                  {
                                    if ((void)v97 != 12 || v50)
                                    {
                                      if ((void)v97 != 13 || v50)
                                      {
                                        if ((void)v97 != 14 || v50)
                                        {
                                          if ((void)v97 != 15 || v50)
                                          {
                                            if ((void)v97 != 16 || v50)
                                            {
                                              if ((void)v97 != 17 || v50)
                                              {
                                                if ((void)v97 != 18 || v50)
                                                {
                                                  if ((void)v97 != 19 || v50)
                                                  {
                                                    if ((void)v97 != 20 || v50)
                                                    {
                                                      if ((void)v97 != 21 || v50)
                                                      {
                                                        if ((void)v97 != 22 || v50)
                                                        {
                                                          if ((void)v97 != 23 || v50)
                                                          {
                                                            if (v102 == 2 && *(void *)v101 == 24)
                                                            {
LABEL_152:
                                                              int8x16_t v52 = vorrq_s8(*(int8x16_t *)&v101[8], *(int8x16_t *)&v101[24]);
                                                              if (!*(void *)&vorr_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)))goto LABEL_153; {
                                                            }
                                                              }
                                                          }
                                                          else if (v102 == 2 && *(void *)v101 == 23)
                                                          {
                                                            goto LABEL_152;
                                                          }
                                                        }
                                                        else if (v102 == 2 && *(void *)v101 == 22)
                                                        {
                                                          goto LABEL_152;
                                                        }
                                                      }
                                                      else if (v102 == 2 && *(void *)v101 == 21)
                                                      {
                                                        goto LABEL_152;
                                                      }
                                                    }
                                                    else if (v102 == 2 && *(void *)v101 == 20)
                                                    {
                                                      goto LABEL_152;
                                                    }
                                                  }
                                                  else if (v102 == 2 && *(void *)v101 == 19)
                                                  {
                                                    goto LABEL_152;
                                                  }
                                                }
                                                else if (v102 == 2 && *(void *)v101 == 18)
                                                {
                                                  goto LABEL_152;
                                                }
                                              }
                                              else if (v102 == 2 && *(void *)v101 == 17)
                                              {
                                                goto LABEL_152;
                                              }
                                            }
                                            else if (v102 == 2 && *(void *)v101 == 16)
                                            {
                                              goto LABEL_152;
                                            }
                                          }
                                          else if (v102 == 2 && *(void *)v101 == 15)
                                          {
                                            goto LABEL_152;
                                          }
                                        }
                                        else if (v102 == 2 && *(void *)v101 == 14)
                                        {
                                          goto LABEL_152;
                                        }
                                      }
                                      else if (v102 == 2 && *(void *)v101 == 13)
                                      {
                                        goto LABEL_152;
                                      }
                                    }
                                    else if (v102 == 2 && *(void *)v101 == 12)
                                    {
                                      goto LABEL_152;
                                    }
                                  }
                                  else if (v102 == 2 && *(void *)v101 == 11)
                                  {
                                    goto LABEL_152;
                                  }
                                }
                                else if (v102 == 2 && *(void *)v101 == 10)
                                {
                                  goto LABEL_152;
                                }
                              }
                              else if (v102 == 2 && *(void *)v101 == 9)
                              {
                                goto LABEL_152;
                              }
                            }
                            else if (v102 == 2 && *(void *)v101 == 8)
                            {
                              goto LABEL_152;
                            }
                          }
                          else if (v102 == 2 && *(void *)v101 == 7)
                          {
                            goto LABEL_152;
                          }
                        }
                        else if (v102 == 2 && *(void *)v101 == 6)
                        {
                          goto LABEL_152;
                        }
                      }
                      else if (v102 == 2 && *(void *)v101 == 5)
                      {
                        goto LABEL_152;
                      }
                    }
                    else if (v102 == 2 && *(void *)v101 == 4)
                    {
                      goto LABEL_152;
                    }
                  }
                  else if (v102 == 2 && *(void *)v101 == 3)
                  {
                    goto LABEL_152;
                  }
                }
                else if (v102 == 2 && *(void *)v101 == 2)
                {
                  goto LABEL_152;
                }
              }
              else if (v102 == 2 && *(void *)v101 == 1)
              {
                goto LABEL_152;
              }
            }
          }
          else
          {
            outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v97, (uint64_t)v96);
            if (!v102)
            {
              if (LOBYTE(v96[0]) == v101[0]) {
                goto LABEL_153;
              }
              goto LABEL_30;
            }
          }
LABEL_21:
          outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)&v97, (unint64_t *)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role));
LABEL_22:
          outlined destroy of ToolbarItemPlacement.Role((uint64_t)v103);
          unint64_t v47 = (v47 + 1) & v48;
        }
        while (((*(void *)(v31 + 56 + ((v47 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v47) & 1) != 0);
      }
      swift_bridgeObjectRelease();
      uint64_t v28 = v87;
    }
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v104, (uint64_t)&v97);
    if (!v100)
    {
LABEL_162:
      outlined init with copy of Toolbar.BarLocation(v88, (uint64_t)&v97);
      switch(*((void *)&v98 + 1))
      {
        case 0:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_163;
        case 1:
        case 8:
        case 9:
        case 0xALL:
        case 0xBLL:
        case 0xCLL:
        case 0xDLL:
        case 0xELL:
          goto LABEL_164;
        case 2:
        case 3:
          if ((static SemanticFeature.isEnabled.getter() & 1) == 0 && v85 != 2 && (v84 & 0x100000000) == 0)
          {
LABEL_163:
            outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v104, (uint64_t)v103);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v96[0] = v31;
            specialized _NativeSet.update(with:isUnique:)((uint64_t)v103, isUniquelyReferenced_nonNull_native, (uint64_t)&v97);
            uint64_t v31 = v96[0];
            swift_bridgeObjectRelease();
            _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)&v97, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
          }
          break;
        default:
          outlined destroy of Toolbar.BarLocation((uint64_t)&v97);
          break;
      }
      goto LABEL_164;
    }
    if (v100 == 1)
    {
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v97);
    }
    else
    {
      if (!(*((void *)&v98 + 1) | v99 | (unint64_t)v97 | (unint64_t)v98 | *((void *)&v97 + 1))) {
        goto LABEL_162;
      }
      uint64_t v53 = *((void *)&v98 + 1) | v99 | v98 | *((void *)&v97 + 1);
      if ((unint64_t)(v97 - 1) <= 7 && !v53) {
        goto LABEL_162;
      }
      if (((unint64_t)(v97 - 9) > 9 || v53)
        && ((unint64_t)(v97 - 19) <= 1 && !v53 || (unint64_t)(v97 - 21) > 1 || v53))
      {
        goto LABEL_162;
      }
    }
LABEL_164:
    uint64_t v55 = *(int *)(v69 + 48);
    uint64_t v56 = v78;
    _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0((uint64_t)v25, v78, type metadata accessor for ToolbarStorage.Entry);
    *(void *)(v56 + v55) = v74;
    uint64_t v57 = v89;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v57 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v57[2] + 1, 1, v57);
    }
    unint64_t v59 = v57[2];
    unint64_t v58 = v57[3];
    uint64_t v89 = v57;
    if (v59 >= v58 >> 1) {
      uint64_t v89 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1, v89);
    }
    uint64_t v60 = v89;
    v89[2] = v59 + 1;
    outlined init with take of (ToolbarStorage.Entry, Int)(v78, (uint64_t)v60+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(void *)(v68 + 72) * v59, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v104);
    outlined destroy of ToolbarStorage.Entry((uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
    uint64_t v8 = v70;
LABEL_169:
    uint64_t v32 = (uint64_t)v93;
LABEL_5:
    if (++v30 == v92) {
      goto LABEL_184;
    }
  }
  outlined destroy of ToolbarStorage.Entry((uint64_t)v16, type metadata accessor for ToolbarStorage.Entry.Kind);
  _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0((uint64_t)v25, v32, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of ToolbarStorage.Entry(v32, type metadata accessor for ToolbarStorage.Entry.Kind);
    long long v97 = 0u;
    long long v98 = 0u;
    uint64_t v99 = 0;
    unsigned __int8 v100 = -1;
LABEL_4:
    outlined destroy of ToolbarStorage.Entry((uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)&v97, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
    goto LABEL_5;
  }
  outlined init with take of (ToolbarStorage.Entry, Int)(v32, (uint64_t)v8, type metadata accessor for ToolbarStorage.GroupItem);
  uint64_t v33 = (void *)*((void *)v8 + 9);
  if (v33[2] != 1) {
    goto LABEL_13;
  }
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if (!v33[2]) {
      goto LABEL_183;
    }
LABEL_12:
    *((unsigned char *)v33
    + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))
    + *(int *)(v67 + 60)) = 1;
    *((void *)v8 + 9) = v33;
LABEL_13:
    uint64_t v34 = v72;
    outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v8, v72, type metadata accessor for ToolbarStorage.GroupItem);
    uint64_t v35 = v34;
    uint64_t v36 = v73;
    outlined init with take of (ToolbarStorage.Entry, Int)(v35, v73, type metadata accessor for ToolbarStorage.GroupItem);
    outlined init with copy of ToolbarItemPlacement.Role(v71, (uint64_t)&v97);
    long long v37 = type metadata accessor for ToolbarStorage.GroupItem;
    uint64_t v38 = v36;
    goto LABEL_15;
  }
  uint64_t v33 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v33);
  if (v33[2]) {
    goto LABEL_12;
  }
LABEL_183:
  __break(1u);
LABEL_184:
  swift_bridgeObjectRelease();
  uint64_t v27 = v65;
  uint64_t v61 = v89;
LABEL_186:
  *(void *)&long long v97 = v61;
  swift_bridgeObjectRetain_n();
  specialized MutableCollection<>.sort(by:)((void **)&v97);
  if (v27)
  {
LABEL_189:
    swift_release();
    __break(1u);
    JUMPOUT(0x187F83904);
  }
  swift_bridgeObjectRelease();
  uint64_t v62 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI14ToolbarStorageV5EntryV_SitG_AJs5NeverOTg503_s7d4UI14fg2V5h21VSiAEIgnyr_AE_SitAEs5i130OIegnrzr_TR03_s7a4UI13c106BridgeC26filterAndSortMatchingItems33_558B6B1E48F37C8B0E16B128287879E02in10newStorage7contextSayAA0cU0l46E52VGAA0C0O11BarLocationO_AjO0X7ContextVtFA2L_P16XEfU0_Tf3nnnpf_nTf1cn_n(v97);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v62;
}

uint64_t sub_187F83940()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187F83978()
{
  uint64_t v1 = type metadata accessor for ToolbarReader.ToolbarConfiguration();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_release();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v2 + 24))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v3 = v0 + v2 + *(int *)(v1 + 52);
  uint64_t v4 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, int *))(*((void *)v4 - 1) + 48))(v3, 1, v4))
  {
    swift_release();
    swift_release();
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v6 = *(int *)(v5 + 32);
    unint64_t v7 = v3 + v6 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
    uint64_t v8 = type metadata accessor for AttributedString();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
    unint64_t v9 = v3 + v4[6];
    int v10 = *(unsigned __int8 *)(v9 + 8);
    if (v10 != 255) {
      outlined consume of PlatformItemCollection.Storage(*(void *)v9, v10 & 1);
    }
    unint64_t v11 = v3 + v4[7];
    int v12 = *(unsigned __int8 *)(v11 + 8);
    if (v12 != 255) {
      outlined consume of PlatformItemCollection.Storage(*(void *)v11, v12 & 1);
    }
    outlined consume of Text.Storage(*(void *)(v3 + v4[8]), *(void *)(v3 + v4[8] + 8), *(unsigned char *)(v3 + v4[8] + 16));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t v13 = v3 + v4[10];
    if (*(void *)v13)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    unint64_t v14 = v3 + v4[11];
    if (*(void *)v14)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    unint64_t v15 = v3 + v4[13];
    if (*(void *)v15)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ToolbarReader.ApplyUpdatesToExternalTarget.updateValue()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for ToolbarReader.ToolbarConfiguration() - 8);
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v8 = (uint64_t)v0 + ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in ToolbarReader.ApplyUpdatesToExternalTarget.updateValue()(v6, v7, v8, v1, v2, v3, v4);
}

uint64_t type metadata accessor for ToolbarReader.Mutation()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for (ToolbarStorage.Entry?, ToolbarStorage.Entry?)()
{
  if (!lazy cache variable for type metadata for (ToolbarStorage.Entry?, ToolbarStorage.Entry?))
  {
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(255, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ToolbarStorage.Entry?, ToolbarStorage.Entry?));
    }
  }
}

uint64_t outlined init with take of WeakBox<UIBarButtonItem>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t specialized ToolbarReader.UpdateToolbarBridge.configure(bridge:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = static ToolbarEdges.bars.getter(a2, a4);
  uint64_t v21 = MEMORY[0x1E4FBC870];
  memset(v20, 0, sizeof(v20));
  char v6 = specialized Set.contains(_:)((uint64_t)v20, v5);
  outlined destroy of ToolbarPlacement.Role((uint64_t)v20);
  if (v6)
  {
    type metadata accessor for ToolbarStorage.Entry.ID?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Toolbar.BarLocation>, (uint64_t)&type metadata for Toolbar.BarLocation, MEMORY[0x1E4FBBE00]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_188357320;
    *(void *)(inited + 40) = 0;
    *(void *)(inited + 48) = 0;
    *(void *)(inited + 32) = 0;
    *(void *)(inited + 56) = 3;
    *(_OWORD *)(inited + 64) = 0u;
    *(_OWORD *)(inited + 80) = 0u;
    *(void *)(inited + 96) = 2;
    *(_OWORD *)(inited + 104) = 0u;
    *(_OWORD *)(inited + 120) = 0u;
    *(_OWORD *)(inited + 136) = 0u;
    specialized Set.formUnion<A>(_:)(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
  }
  memset(v20, 0, 24);
  *(_OWORD *)&v20[3] = xmmword_18838AA10;
  char v8 = specialized Set.contains(_:)((uint64_t)v20, v5);
  outlined destroy of ToolbarPlacement.Role((uint64_t)v20);
  if (v8)
  {
    uint64_t v9 = v21;
  }
  else
  {
    memset(v20, 0, 24);
    *(_OWORD *)&v20[3] = xmmword_18834FC50;
    char v10 = specialized Set.contains(_:)((uint64_t)v20, v5);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v20);
    uint64_t v9 = v21;
    if ((v10 & 1) == 0) {
      goto LABEL_7;
    }
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long v19 = xmmword_1883B7030;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeSet.update(with:isUnique:)((uint64_t)&v16, isUniquelyReferenced_nonNull_native, (uint64_t)v20);
  swift_bridgeObjectRelease();
  _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v20, &lazy cache variable for type metadata for Toolbar.BarLocation?, (uint64_t)&type metadata for Toolbar.BarLocation, MEMORY[0x1E4FBB718]);
LABEL_7:
  memset(v20, 0, 24);
  *(_OWORD *)&v20[3] = xmmword_188382680;
  char v12 = specialized Set.contains(_:)((uint64_t)v20, v5);
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v20);
  if (v12)
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    long long v19 = xmmword_18838A9E0;
    char v13 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeSet.update(with:isUnique:)((uint64_t)&v16, v13, (uint64_t)v20);
    swift_bridgeObjectRelease();
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)v20, &lazy cache variable for type metadata for Toolbar.BarLocation?, (uint64_t)&type metadata for Toolbar.BarLocation, MEMORY[0x1E4FBB718]);
  }
  unint64_t v14 = (void *)(a1 + direct field offset for ToolbarBridge.allowedLocations);
  swift_beginAccess();
  void *v14 = v9;
  return swift_bridgeObjectRelease();
}

uint64_t outlined copy of ToolbarStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    swift_bridgeObjectRetain();
    outlined copy of Binding<NavigationSplitViewColumn>?(a3, a4);
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined destroy of EmptyToolbarStrategy(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for specialized closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(_OWORD *a1)
{
  uint64_t v2 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  long long v7 = a1[1];
  v10[0] = *a1;
  v10[1] = v7;
  long long v8 = a1[3];
  void v10[2] = a1[2];
  v10[3] = v8;
  return specialized closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)((uint64_t)v10, v2, v3, v4, v5, v6);
}

uint64_t outlined assign with copy of ToolbarStorage.SearchItem?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ToolbarStorage.Entry?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t outlined init with take of ToolbarStorage.Entry.ID?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for ToolbarStorage.Entry.ID?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for closure #1 in ToolbarReader.MakeView.value.getter()
{
  return closure #1 in ToolbarReader.MakeView.value.getter();
}

uint64_t partial apply for closure #1 in closure #1 in ToolbarReader.MakeView.value.getter(uint64_t a1)
{
  return closure #1 in closure #1 in ToolbarReader.MakeView.value.getter(a1, *(void *)(v1 + 48), *(unsigned int *)(v1 + 56));
}

uint64_t type metadata completion function for ToolbarReader.Mutation()
{
  uint64_t result = type metadata accessor for ToolbarReader.ToolbarConfiguration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolbarReader.Mutation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 52);
    uint64_t v6 = (char *)a1 + v5;
    long long v7 = (char *)a2 + v5;
    uint64_t v8 = *(uint64_t *)((char *)a2 + v5 + 8);
    *(void *)uint64_t v6 = *(uint64_t *)((char *)a2 + v5);
    *((void *)v6 + 1) = v8;
    uint64_t v9 = *(uint64_t *)((char *)a2 + v5 + 24);
    swift_bridgeObjectRetain();
    if (v9)
    {
      *((void *)v6 + 2) = *((void *)v7 + 2);
      *((void *)v6 + 3) = v9;
      *((void *)v6 + 4) = *((void *)v7 + 4);
      swift_retain();
      swift_retain();
    }
    else
    {
      *((_OWORD *)v6 + 1) = *((_OWORD *)v7 + 1);
      *((void *)v6 + 4) = *((void *)v7 + 4);
    }
    *((void *)v6 + 5) = *((void *)v7 + 5);
    v6[48] = v7[48];
    *((void *)v6 + 7) = *((void *)v7 + 7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v11 = (int *)type metadata accessor for ToolbarReader.ToolbarConfiguration();
    uint64_t v12 = v11[13];
    char v13 = &v6[v12];
    unint64_t v14 = &v7[v12];
    unint64_t v15 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
    uint64_t v16 = *((void *)v15 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v16 + 48))(v14, 1, v15))
    {
      type metadata accessor for ToolbarStorage.SearchItem?(0);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      uint64_t v80 = v16;
      unsigned int v81 = v11;
      unsigned int v82 = v3;
      uint64_t v79 = *((void *)v14 + 1);
      *(void *)char v13 = *(void *)v14;
      *((void *)v13 + 1) = v79;
      _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
      uint64_t v19 = *(int *)(v18 + 32);
      uint64_t v20 = &v13[v19];
      int v83 = v13;
      uint64_t v21 = &v14[v19];
      *uint64_t v20 = v14[v19];
      v20[1] = v14[v19 + 1];
      *((_WORD *)v20 + 1) = *(_WORD *)&v14[v19 + 2];
      v20[8] = v14[v19 + 8];
      *((_DWORD *)v20 + 1) = *(_DWORD *)&v14[v19 + 4];
      uint64_t v22 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v23 = v22[9];
      uint64_t v77 = &v21[v23];
      uint64_t v78 = &v20[v23];
      uint64_t v24 = type metadata accessor for AttributedString();
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
      swift_retain();
      swift_retain();
      v25(v78, v77, v24);
      v20[v22[10]] = v21[v22[10]];
      uint64_t v26 = v22[11];
      uint64_t v27 = &v20[v26];
      uint64_t v28 = &v21[v26];
      v27[4] = v28[4];
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      *(void *)((char *)v83 + v15[5]) = *(void *)&v14[v15[5]];
      uint64_t v29 = v15[6];
      unint64_t v30 = (char *)v83 + v29;
      uint64_t v31 = &v14[v29];
      int v32 = v14[v29 + 8];
      swift_bridgeObjectRetain();
      if (v32 == 255)
      {
        *(void *)unint64_t v30 = *(void *)v31;
        v30[8] = v31[8];
      }
      else
      {
        char v33 = v32 & 1;
        uint64_t v34 = *(void *)v31;
        outlined copy of PlatformItemCollection.Storage(v34, v33);
        *(void *)unint64_t v30 = v34;
        v30[8] = v33;
      }
      uint64_t v35 = v15[7];
      uint64_t v36 = (char *)v83 + v35;
      long long v37 = &v14[v35];
      int v38 = v37[8];
      if (v38 == 255)
      {
        *(void *)uint64_t v36 = *(void *)v37;
        v36[8] = v37[8];
      }
      else
      {
        char v39 = v38 & 1;
        uint64_t v40 = *(void *)v37;
        outlined copy of PlatformItemCollection.Storage(*(void *)v37, v38 & 1);
        *(void *)uint64_t v36 = v40;
        v36[8] = v39;
      }
      uint64_t v41 = v15[8];
      unint64_t v42 = (char *)v83 + v41;
      uint64_t v43 = &v14[v41];
      uint64_t v44 = *(void *)&v14[v41];
      uint64_t v45 = *(void *)&v14[v41 + 8];
      char v46 = v14[v41 + 16];
      outlined copy of Text.Storage(v44, v45, v46);
      *(void *)unint64_t v42 = v44;
      *((void *)v42 + 1) = v45;
      v42[16] = v46;
      *((void *)v42 + 3) = *((void *)v43 + 3);
      uint64_t v47 = v15[9];
      uint64_t v48 = (void *)((char *)v83 + v47);
      char v49 = &v14[v47];
      uint64_t v50 = *((void *)v49 + 1);
      *uint64_t v48 = *(void *)v49;
      v48[1] = v50;
      uint64_t v51 = v15[10];
      int8x16_t v52 = (char *)v83 + v51;
      uint64_t v53 = &v14[v51];
      uint64_t v54 = *(void *)&v14[v51];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      if (v54)
      {
        uint64_t v55 = *((void *)v53 + 1);
        *(void *)int8x16_t v52 = v54;
        *((void *)v52 + 1) = v55;
        *((_DWORD *)v52 + 4) = *((_DWORD *)v53 + 4);
        uint64_t v56 = (void *)*((void *)v53 + 4);
        *((void *)v52 + 3) = *((void *)v53 + 3);
        *((void *)v52 + 4) = v56;
        *((void *)v52 + 5) = *((void *)v53 + 5);
        *((_DWORD *)v52 + 12) = *((_DWORD *)v53 + 12);
        *((void *)v52 + 7) = *((void *)v53 + 7);
        *((_OWORD *)v52 + 4) = *((_OWORD *)v53 + 4);
        *((void *)v52 + 10) = *((void *)v53 + 10);
        id v57 = v56;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v58 = *((_OWORD *)v53 + 3);
        *((_OWORD *)v52 + 2) = *((_OWORD *)v53 + 2);
        *((_OWORD *)v52 + 3) = v58;
        *((_OWORD *)v52 + 4) = *((_OWORD *)v53 + 4);
        *((void *)v52 + 10) = *((void *)v53 + 10);
        long long v59 = *((_OWORD *)v53 + 1);
        *(_OWORD *)int8x16_t v52 = *(_OWORD *)v53;
        *((_OWORD *)v52 + 1) = v59;
      }
      uint64_t v60 = v15[11];
      uint64_t v61 = (char *)v83 + v60;
      uint64_t v62 = &v14[v60];
      if (*(void *)v62)
      {
        uint64_t v63 = *((void *)v62 + 1);
        *(void *)uint64_t v61 = *(void *)v62;
        *((void *)v61 + 1) = v63;
        *((_DWORD *)v61 + 4) = *((_DWORD *)v62 + 4);
        uint64_t v64 = (void *)*((void *)v62 + 4);
        *((void *)v61 + 3) = *((void *)v62 + 3);
        *((void *)v61 + 4) = v64;
        *((void *)v61 + 5) = *((void *)v62 + 5);
        *((_DWORD *)v61 + 12) = *((_DWORD *)v62 + 12);
        *((void *)v61 + 7) = *((void *)v62 + 7);
        *((_OWORD *)v61 + 4) = *((_OWORD *)v62 + 4);
        *((void *)v61 + 10) = *((void *)v62 + 10);
        id v65 = v64;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v66 = *((_OWORD *)v62 + 3);
        *((_OWORD *)v61 + 2) = *((_OWORD *)v62 + 2);
        *((_OWORD *)v61 + 3) = v66;
        *((_OWORD *)v61 + 4) = *((_OWORD *)v62 + 4);
        *((void *)v61 + 10) = *((void *)v62 + 10);
        long long v67 = *((_OWORD *)v62 + 1);
        *(_OWORD *)uint64_t v61 = *(_OWORD *)v62;
        *((_OWORD *)v61 + 1) = v67;
      }
      *((unsigned char *)v83 + v15[12]) = v14[v15[12]];
      uint64_t v68 = v15[13];
      uint64_t v69 = (char *)v83 + v68;
      uint64_t v70 = &v14[v68];
      if (*(void *)v70)
      {
        uint64_t v71 = *((void *)v70 + 1);
        *(void *)uint64_t v69 = *(void *)v70;
        *((void *)v69 + 1) = v71;
        *((_DWORD *)v69 + 4) = *((_DWORD *)v70 + 4);
        uint64_t v72 = (void *)*((void *)v70 + 4);
        *((void *)v69 + 3) = *((void *)v70 + 3);
        *((void *)v69 + 4) = v72;
        *((void *)v69 + 5) = *((void *)v70 + 5);
        *((_DWORD *)v69 + 12) = *((_DWORD *)v70 + 12);
        *((void *)v69 + 7) = *((void *)v70 + 7);
        *((_OWORD *)v69 + 4) = *((_OWORD *)v70 + 4);
        *((void *)v69 + 10) = *((void *)v70 + 10);
        id v73 = v72;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v74 = *((_OWORD *)v70 + 3);
        *((_OWORD *)v69 + 2) = *((_OWORD *)v70 + 2);
        *((_OWORD *)v69 + 3) = v74;
        *((_OWORD *)v69 + 4) = *((_OWORD *)v70 + 4);
        *((void *)v69 + 10) = *((void *)v70 + 10);
        long long v75 = *((_OWORD *)v70 + 1);
        *(_OWORD *)uint64_t v69 = *(_OWORD *)v70;
        *((_OWORD *)v69 + 1) = v75;
      }
      unint64_t v11 = v81;
      uint64_t v3 = v82;
      (*(void (**)(void *, void, uint64_t, int *))(v80 + 56))(v83, 0, 1, v15);
    }
    *(void *)&v6[v11[14]] = *(void *)&v7[v11[14]];
    *(void *)&v6[v11[15]] = *(void *)&v7[v11[15]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v3;
}

uint64_t destroy for ToolbarReader.Mutation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 52);
  swift_bridgeObjectRelease();
  if (*(void *)(v2 + 24))
  {
    swift_release();
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for ToolbarReader.ToolbarConfiguration() + 52);
  int v4 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v4 - 1) + 48))(v3, 1, v4))
  {
    swift_release();
    swift_release();
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v6 = v3 + *(int *)(v5 + 32);
    uint64_t v7 = v6 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
    uint64_t v8 = type metadata accessor for AttributedString();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
    uint64_t v9 = v3 + v4[6];
    int v10 = *(unsigned __int8 *)(v9 + 8);
    if (v10 != 255) {
      outlined consume of PlatformItemCollection.Storage(*(void *)v9, v10 & 1);
    }
    uint64_t v11 = v3 + v4[7];
    int v12 = *(unsigned __int8 *)(v11 + 8);
    if (v12 != 255) {
      outlined consume of PlatformItemCollection.Storage(*(void *)v11, v12 & 1);
    }
    outlined consume of Text.Storage(*(void *)(v3 + v4[8]), *(void *)(v3 + v4[8] + 8), *(unsigned char *)(v3 + v4[8] + 16));
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v13 = v3 + v4[10];
    if (*(void *)v13)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v14 = v3 + v4[11];
    if (*(void *)v14)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = v3 + v4[13];
    if (*(void *)v15)
    {

      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ToolbarReader.Mutation(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 52);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = *(void *)((char *)a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)((char *)a2 + v4);
  *((void *)v5 + 1) = v7;
  uint64_t v8 = *(void *)((char *)a2 + v4 + 24);
  swift_bridgeObjectRetain();
  if (v8)
  {
    *((void *)v5 + 2) = *((void *)v6 + 2);
    *((void *)v5 + 3) = v8;
    *((void *)v5 + 4) = *((void *)v6 + 4);
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)v5 + 1) = *((_OWORD *)v6 + 1);
    *((void *)v5 + 4) = *((void *)v6 + 4);
  }
  *((void *)v5 + 5) = *((void *)v6 + 5);
  v5[48] = v6[48];
  *((void *)v5 + 7) = *((void *)v6 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = (int *)type metadata accessor for ToolbarReader.ToolbarConfiguration();
  uint64_t v10 = v9[13];
  uint64_t v11 = &v5[v10];
  int v12 = &v6[v10];
  uint64_t v13 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  uint64_t v14 = *((void *)v13 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v78 = v14;
    uint64_t v79 = v9;
    uint64_t v80 = v3;
    uint64_t v77 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v77;
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v17 = *(int *)(v16 + 32);
    uint64_t v18 = &v11[v17];
    unsigned int v81 = v11;
    uint64_t v19 = &v12[v17];
    *uint64_t v18 = v12[v17];
    v18[1] = v12[v17 + 1];
    *((_WORD *)v18 + 1) = *(_WORD *)&v12[v17 + 2];
    v18[8] = v12[v17 + 8];
    *((_DWORD *)v18 + 1) = *(_DWORD *)&v12[v17 + 4];
    uint64_t v20 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v21 = v20[9];
    long long v75 = &v19[v21];
    uint64_t v76 = &v18[v21];
    uint64_t v22 = type metadata accessor for AttributedString();
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
    swift_retain();
    swift_retain();
    v23(v76, v75, v22);
    v18[v20[10]] = v19[v20[10]];
    uint64_t v24 = v20[11];
    uint64_t v25 = &v18[v24];
    uint64_t v26 = &v19[v24];
    uint64_t v25[4] = v26[4];
    *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
    *(void *)((char *)v81 + v13[5]) = *(void *)&v12[v13[5]];
    uint64_t v27 = v13[6];
    uint64_t v28 = (char *)v81 + v27;
    uint64_t v29 = &v12[v27];
    int v30 = v12[v27 + 8];
    swift_bridgeObjectRetain();
    if (v30 == 255)
    {
      *(void *)uint64_t v28 = *(void *)v29;
      v28[8] = v29[8];
    }
    else
    {
      char v31 = v30 & 1;
      uint64_t v32 = *(void *)v29;
      outlined copy of PlatformItemCollection.Storage(v32, v31);
      *(void *)uint64_t v28 = v32;
      v28[8] = v31;
    }
    uint64_t v33 = v13[7];
    uint64_t v34 = (char *)v81 + v33;
    uint64_t v35 = &v12[v33];
    int v36 = v35[8];
    if (v36 == 255)
    {
      *(void *)uint64_t v34 = *(void *)v35;
      v34[8] = v35[8];
    }
    else
    {
      char v37 = v36 & 1;
      uint64_t v38 = *(void *)v35;
      outlined copy of PlatformItemCollection.Storage(*(void *)v35, v36 & 1);
      *(void *)uint64_t v34 = v38;
      v34[8] = v37;
    }
    uint64_t v39 = v13[8];
    uint64_t v40 = (char *)v81 + v39;
    uint64_t v41 = &v12[v39];
    uint64_t v42 = *(void *)&v12[v39];
    uint64_t v43 = *(void *)&v12[v39 + 8];
    char v44 = v12[v39 + 16];
    outlined copy of Text.Storage(v42, v43, v44);
    *(void *)uint64_t v40 = v42;
    *((void *)v40 + 1) = v43;
    v40[16] = v44;
    *((void *)v40 + 3) = *((void *)v41 + 3);
    uint64_t v45 = v13[9];
    char v46 = (void *)((char *)v81 + v45);
    uint64_t v47 = &v12[v45];
    uint64_t v48 = *((void *)v47 + 1);
    *char v46 = *(void *)v47;
    v46[1] = v48;
    uint64_t v49 = v13[10];
    uint64_t v50 = (char *)v81 + v49;
    uint64_t v51 = &v12[v49];
    uint64_t v52 = *(void *)&v12[v49];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v52)
    {
      uint64_t v53 = *((void *)v51 + 1);
      *(void *)uint64_t v50 = v52;
      *((void *)v50 + 1) = v53;
      *((_DWORD *)v50 + 4) = *((_DWORD *)v51 + 4);
      uint64_t v54 = (void *)*((void *)v51 + 4);
      *((void *)v50 + 3) = *((void *)v51 + 3);
      *((void *)v50 + 4) = v54;
      *((void *)v50 + 5) = *((void *)v51 + 5);
      *((_DWORD *)v50 + 12) = *((_DWORD *)v51 + 12);
      *((void *)v50 + 7) = *((void *)v51 + 7);
      *((_OWORD *)v50 + 4) = *((_OWORD *)v51 + 4);
      *((void *)v50 + 10) = *((void *)v51 + 10);
      id v55 = v54;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v56 = *((_OWORD *)v51 + 3);
      *((_OWORD *)v50 + 2) = *((_OWORD *)v51 + 2);
      *((_OWORD *)v50 + 3) = v56;
      *((_OWORD *)v50 + 4) = *((_OWORD *)v51 + 4);
      *((void *)v50 + 10) = *((void *)v51 + 10);
      long long v57 = *((_OWORD *)v51 + 1);
      *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
      *((_OWORD *)v50 + 1) = v57;
    }
    uint64_t v58 = v13[11];
    long long v59 = (char *)v81 + v58;
    uint64_t v60 = &v12[v58];
    if (*(void *)v60)
    {
      uint64_t v61 = *((void *)v60 + 1);
      *(void *)long long v59 = *(void *)v60;
      *((void *)v59 + 1) = v61;
      *((_DWORD *)v59 + 4) = *((_DWORD *)v60 + 4);
      uint64_t v62 = (void *)*((void *)v60 + 4);
      *((void *)v59 + 3) = *((void *)v60 + 3);
      *((void *)v59 + 4) = v62;
      *((void *)v59 + 5) = *((void *)v60 + 5);
      *((_DWORD *)v59 + 12) = *((_DWORD *)v60 + 12);
      *((void *)v59 + 7) = *((void *)v60 + 7);
      *((_OWORD *)v59 + 4) = *((_OWORD *)v60 + 4);
      *((void *)v59 + 10) = *((void *)v60 + 10);
      id v63 = v62;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v64 = *((_OWORD *)v60 + 3);
      *((_OWORD *)v59 + 2) = *((_OWORD *)v60 + 2);
      *((_OWORD *)v59 + 3) = v64;
      *((_OWORD *)v59 + 4) = *((_OWORD *)v60 + 4);
      *((void *)v59 + 10) = *((void *)v60 + 10);
      long long v65 = *((_OWORD *)v60 + 1);
      *(_OWORD *)long long v59 = *(_OWORD *)v60;
      *((_OWORD *)v59 + 1) = v65;
    }
    *((unsigned char *)v81 + v13[12]) = v12[v13[12]];
    uint64_t v66 = v13[13];
    long long v67 = (char *)v81 + v66;
    uint64_t v68 = &v12[v66];
    if (*(void *)v68)
    {
      uint64_t v69 = *((void *)v68 + 1);
      *(void *)long long v67 = *(void *)v68;
      *((void *)v67 + 1) = v69;
      *((_DWORD *)v67 + 4) = *((_DWORD *)v68 + 4);
      uint64_t v70 = (void *)*((void *)v68 + 4);
      *((void *)v67 + 3) = *((void *)v68 + 3);
      *((void *)v67 + 4) = v70;
      *((void *)v67 + 5) = *((void *)v68 + 5);
      *((_DWORD *)v67 + 12) = *((_DWORD *)v68 + 12);
      *((void *)v67 + 7) = *((void *)v68 + 7);
      *((_OWORD *)v67 + 4) = *((_OWORD *)v68 + 4);
      *((void *)v67 + 10) = *((void *)v68 + 10);
      id v71 = v70;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v72 = *((_OWORD *)v68 + 3);
      *((_OWORD *)v67 + 2) = *((_OWORD *)v68 + 2);
      *((_OWORD *)v67 + 3) = v72;
      *((_OWORD *)v67 + 4) = *((_OWORD *)v68 + 4);
      *((void *)v67 + 10) = *((void *)v68 + 10);
      long long v73 = *((_OWORD *)v68 + 1);
      *(_OWORD *)long long v67 = *(_OWORD *)v68;
      *((_OWORD *)v67 + 1) = v73;
    }
    uint64_t v9 = v79;
    uint64_t v3 = v80;
    (*(void (**)(void *, void, uint64_t, int *))(v78 + 56))(v81, 0, 1, v13);
  }
  *(void *)&v5[v9[14]] = *(void *)&v6[v9[14]];
  *(void *)&v5[v9[15]] = *(void *)&v6[v9[15]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v3;
}

_DWORD *assignWithCopy for ToolbarReader.Mutation(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 52);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(void *)uint64_t v5 = *(void *)((char *)a2 + v4);
  *((void *)v5 + 1) = *(void *)((char *)a2 + v4 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v7 = v5 + 16;
  uint64_t v8 = v6 + 16;
  uint64_t v9 = *((void *)v6 + 3);
  if (*((void *)v5 + 3))
  {
    if (v9)
    {
      *((void *)v5 + 2) = *((void *)v6 + 2);
      swift_retain();
      swift_release();
      *((void *)v5 + 3) = *((void *)v6 + 3);
      swift_retain();
      swift_release();
      *((void *)v5 + 4) = *((void *)v6 + 4);
    }
    else
    {
      _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)(v5 + 16), &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
      uint64_t v10 = *((void *)v6 + 4);
      *uint64_t v7 = *v8;
      *((void *)v5 + 4) = v10;
    }
  }
  else if (v9)
  {
    *((void *)v5 + 2) = *((void *)v6 + 2);
    *((void *)v5 + 3) = *((void *)v6 + 3);
    *((void *)v5 + 4) = *((void *)v6 + 4);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v11 = *v8;
    *((void *)v5 + 4) = *((void *)v6 + 4);
    *uint64_t v7 = v11;
  }
  *((void *)v5 + 5) = *((void *)v6 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5[48] = v6[48];
  *((void *)v5 + 7) = *((void *)v6 + 7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v12 = (int *)type metadata accessor for ToolbarReader.ToolbarConfiguration();
  uint64_t v13 = v12[13];
  uint64_t v14 = &v5[v13];
  uint64_t v15 = &v6[v13];
  uint64_t v16 = type metadata accessor for ToolbarStorage.SearchItem(0);
  uint64_t v209 = *(void *)(v16 - 8);
  uint64_t v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v209 + 48);
  int v18 = v17(v14, 1, v16);
  int v19 = v17(v15, 1, v16);
  if (v18)
  {
    if (!v19)
    {
      char v203 = v12;
      int v204 = v3;
      *(void *)uint64_t v14 = *(void *)v15;
      *((void *)v14 + 1) = *((void *)v15 + 1);
      _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
      uint64_t v21 = *(int *)(v20 + 32);
      uint64_t v22 = &v14[v21];
      uint64_t v206 = v14;
      uint64_t v23 = &v15[v21];
      *uint64_t v22 = v15[v21];
      v22[1] = v15[v21 + 1];
      void v22[2] = v15[v21 + 2];
      void v22[3] = v15[v21 + 3];
      LODWORD(v21) = *(_DWORD *)&v15[v21 + 4];
      char v22[8] = v23[8];
      *((_DWORD *)v22 + 1) = v21;
      size_t v210 = v15;
      uint64_t v24 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v25 = v24[9];
      v207 = (int *)v16;
      uint64_t v26 = &v22[v25];
      uint64_t v27 = &v23[v25];
      uint64_t v28 = type metadata accessor for AttributedString();
      uint64_t v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16);
      swift_retain();
      swift_retain();
      v29(v26, v27, v28);
      v22[v24[10]] = v23[v24[10]];
      uint64_t v30 = v24[11];
      char v31 = &v22[v30];
      uint64_t v32 = &v23[v30];
      char v33 = v32[4];
      *(_DWORD *)char v31 = *(_DWORD *)v32;
      v31[4] = v33;
      *(void *)((char *)v206 + v207[5]) = *(void *)((char *)v210 + v207[5]);
      uint64_t v34 = v207[6];
      uint64_t v35 = (char *)v206 + v34;
      int v36 = (char *)v210 + v34;
      int v37 = *((unsigned __int8 *)v210 + v34 + 8);
      swift_bridgeObjectRetain();
      if (v37 == 255)
      {
        uint64_t v38 = *(void *)v36;
        v35[8] = v36[8];
        *(void *)uint64_t v35 = v38;
      }
      else
      {
        char v60 = v37 & 1;
        uint64_t v61 = *(void *)v36;
        outlined copy of PlatformItemCollection.Storage(v61, v60);
        *(void *)uint64_t v35 = v61;
        v35[8] = v60;
      }
      uint64_t v62 = v207[7];
      id v63 = (char *)v206 + v62;
      long long v64 = (char *)v210 + v62;
      int v65 = v64[8];
      uint64_t v3 = v204;
      if (v65 == 255)
      {
        uint64_t v66 = *(void *)v64;
        v63[8] = v64[8];
        *(void *)id v63 = v66;
      }
      else
      {
        char v67 = v65 & 1;
        uint64_t v68 = *(void *)v64;
        outlined copy of PlatformItemCollection.Storage(*(void *)v64, v65 & 1);
        *(void *)id v63 = v68;
        v63[8] = v67;
      }
      uint64_t v69 = v207[8];
      uint64_t v70 = (char *)v206 + v69;
      id v71 = (char *)v210 + v69;
      uint64_t v72 = *(void *)((char *)v210 + v69);
      uint64_t v73 = *(void *)((char *)v210 + v69 + 8);
      char v74 = *((unsigned char *)v210 + v69 + 16);
      outlined copy of Text.Storage(v72, v73, v74);
      *(void *)uint64_t v70 = v72;
      *((void *)v70 + 1) = v73;
      v70[16] = v74;
      *((void *)v70 + 3) = *((void *)v71 + 3);
      uint64_t v75 = v207[9];
      uint64_t v76 = (void *)((char *)v206 + v75);
      uint64_t v77 = (void *)((char *)v210 + v75);
      *uint64_t v76 = *v77;
      v76[1] = v77[1];
      uint64_t v78 = v207[10];
      uint64_t v79 = (char *)v206 + v78;
      uint64_t v80 = (char *)v210 + v78;
      uint64_t v81 = *(void *)((char *)v210 + v78);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      if (v81)
      {
        uint64_t v82 = *((void *)v80 + 1);
        *(void *)uint64_t v79 = v81;
        *((void *)v79 + 1) = v82;
        *((_DWORD *)v79 + 4) = *((_DWORD *)v80 + 4);
        *((void *)v79 + 3) = *((void *)v80 + 3);
        int v83 = (void *)*((void *)v80 + 4);
        *((void *)v79 + 4) = v83;
        *((void *)v79 + 5) = *((void *)v80 + 5);
        *((_DWORD *)v79 + 12) = *((_DWORD *)v80 + 12);
        *((void *)v79 + 7) = *((void *)v80 + 7);
        *((_DWORD *)v79 + 16) = *((_DWORD *)v80 + 16);
        *((_DWORD *)v79 + 17) = *((_DWORD *)v80 + 17);
        *((_DWORD *)v79 + 18) = *((_DWORD *)v80 + 18);
        *((_DWORD *)v79 + 19) = *((_DWORD *)v80 + 19);
        *((void *)v79 + 10) = *((void *)v80 + 10);
        id v84 = v83;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v85 = *((_OWORD *)v80 + 1);
        *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
        *((_OWORD *)v79 + 1) = v85;
        long long v86 = *((_OWORD *)v80 + 2);
        long long v87 = *((_OWORD *)v80 + 3);
        long long v88 = *((_OWORD *)v80 + 4);
        *((void *)v79 + 10) = *((void *)v80 + 10);
        *((_OWORD *)v79 + 3) = v87;
        *((_OWORD *)v79 + 4) = v88;
        *((_OWORD *)v79 + 2) = v86;
      }
      uint64_t v89 = v207[11];
      unint64_t v90 = (char *)v206 + v89;
      uint64_t v91 = (char *)v210 + v89;
      if (*(void *)v91)
      {
        uint64_t v92 = *((void *)v91 + 1);
        *(void *)unint64_t v90 = *(void *)v91;
        *((void *)v90 + 1) = v92;
        *((_DWORD *)v90 + 4) = *((_DWORD *)v91 + 4);
        *((void *)v90 + 3) = *((void *)v91 + 3);
        uint64_t v93 = (void *)*((void *)v91 + 4);
        *((void *)v90 + 4) = v93;
        *((void *)v90 + 5) = *((void *)v91 + 5);
        *((_DWORD *)v90 + 12) = *((_DWORD *)v91 + 12);
        *((void *)v90 + 7) = *((void *)v91 + 7);
        *((_DWORD *)v90 + 16) = *((_DWORD *)v91 + 16);
        *((_DWORD *)v90 + 17) = *((_DWORD *)v91 + 17);
        *((_DWORD *)v90 + 18) = *((_DWORD *)v91 + 18);
        *((_DWORD *)v90 + 19) = *((_DWORD *)v91 + 19);
        *((void *)v90 + 10) = *((void *)v91 + 10);
        id v94 = v93;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v95 = *((_OWORD *)v91 + 1);
        *(_OWORD *)unint64_t v90 = *(_OWORD *)v91;
        *((_OWORD *)v90 + 1) = v95;
        long long v96 = *((_OWORD *)v91 + 2);
        long long v97 = *((_OWORD *)v91 + 3);
        long long v98 = *((_OWORD *)v91 + 4);
        *((void *)v90 + 10) = *((void *)v91 + 10);
        *((_OWORD *)v90 + 3) = v97;
        *((_OWORD *)v90 + 4) = v98;
        *((_OWORD *)v90 + 2) = v96;
      }
      *((unsigned char *)v206 + v207[12]) = *((unsigned char *)v210 + v207[12]);
      uint64_t v99 = v207[13];
      unsigned __int8 v100 = (char *)v206 + v99;
      uint64_t v101 = (char *)v210 + v99;
      if (*(void *)v101)
      {
        uint64_t v102 = *((void *)v101 + 1);
        *(void *)unsigned __int8 v100 = *(void *)v101;
        *((void *)v100 + 1) = v102;
        *((_DWORD *)v100 + 4) = *((_DWORD *)v101 + 4);
        *((void *)v100 + 3) = *((void *)v101 + 3);
        id v103 = (void *)*((void *)v101 + 4);
        *((void *)v100 + 4) = v103;
        *((void *)v100 + 5) = *((void *)v101 + 5);
        *((_DWORD *)v100 + 12) = *((_DWORD *)v101 + 12);
        *((void *)v100 + 7) = *((void *)v101 + 7);
        *((_DWORD *)v100 + 16) = *((_DWORD *)v101 + 16);
        *((_DWORD *)v100 + 17) = *((_DWORD *)v101 + 17);
        *((_DWORD *)v100 + 18) = *((_DWORD *)v101 + 18);
        *((_DWORD *)v100 + 19) = *((_DWORD *)v101 + 19);
        *((void *)v100 + 10) = *((void *)v101 + 10);
        id v104 = v103;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v105 = *((_OWORD *)v101 + 1);
        *(_OWORD *)unsigned __int8 v100 = *(_OWORD *)v101;
        *((_OWORD *)v100 + 1) = v105;
        long long v106 = *((_OWORD *)v101 + 2);
        long long v107 = *((_OWORD *)v101 + 3);
        long long v108 = *((_OWORD *)v101 + 4);
        *((void *)v100 + 10) = *((void *)v101 + 10);
        *((_OWORD *)v100 + 3) = v107;
        *((_OWORD *)v100 + 4) = v108;
        *((_OWORD *)v100 + 2) = v106;
      }
      int v12 = v203;
      (*(void (**)(void *, void, uint64_t, int *))(v209 + 56))(v206, 0, 1, v207);
      goto LABEL_32;
    }
LABEL_14:
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v14, v15, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_32;
  }
  if (v19)
  {
    outlined destroy of ToolbarStorage.Entry((uint64_t)v14, type metadata accessor for ToolbarStorage.SearchItem);
    goto LABEL_14;
  }
  *(void *)uint64_t v14 = *(void *)v15;
  swift_retain();
  swift_release();
  *((void *)v14 + 1) = *((void *)v15 + 1);
  swift_retain();
  swift_release();
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v41 = *(int *)(v40 + 32);
  uint64_t v42 = &v14[v41];
  v208 = (int *)v16;
  uint64_t v43 = &v15[v41];
  *uint64_t v42 = v15[v41];
  v42[1] = v15[v41 + 1];
  v42[2] = v15[v41 + 2];
  v42[3] = v15[v41 + 3];
  LODWORD(v41) = *(_DWORD *)&v15[v41 + 4];
  v42[8] = v43[8];
  *((_DWORD *)v42 + 1) = v41;
  char v44 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v45 = v44[9];
  char v46 = &v42[v45];
  size_t v211 = v15;
  uint64_t v47 = &v43[v45];
  uint64_t v48 = type metadata accessor for AttributedString();
  uint64_t v49 = v47;
  uint64_t v50 = v211;
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 24))(v46, v49, v48);
  v42[v44[10]] = v43[v44[10]];
  uint64_t v51 = v44[11];
  uint64_t v52 = &v42[v51];
  uint64_t v53 = &v43[v51];
  *(_DWORD *)uint64_t v52 = *(_DWORD *)v53;
  v52[4] = v53[4];
  *(void *)&v14[v208[5]] = *(void *)((char *)v211 + v208[5]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v54 = v208[6];
  uint64_t v55 = (uint64_t)&v14[v54];
  long long v56 = (char *)v211 + v54;
  int v57 = v14[v54 + 8];
  int v58 = *((unsigned __int8 *)v211 + v54 + 8);
  if (v57 == 255)
  {
    if (v58 == 255)
    {
      uint64_t v110 = *(void *)v56;
      *(unsigned char *)(v55 + 8) = v56[8];
      *(void *)uint64_t v55 = v110;
    }
    else
    {
      char v115 = v58 & 1;
      uint64_t v116 = *(void *)v56;
      outlined copy of PlatformItemCollection.Storage(*(void *)v56, v58 & 1);
      *(void *)uint64_t v55 = v116;
      uint64_t v50 = v211;
      *(unsigned char *)(v55 + 8) = v115;
    }
  }
  else if (v58 == 255)
  {
    outlined destroy of PlatformItemCollection(v55);
    char v59 = v56[8];
    *(void *)uint64_t v55 = *(void *)v56;
    *(unsigned char *)(v55 + 8) = v59;
  }
  else
  {
    char v111 = v58 & 1;
    uint64_t v112 = *(void *)v56;
    outlined copy of PlatformItemCollection.Storage(*(void *)v56, v58 & 1);
    uint64_t v113 = *(void *)v55;
    char v114 = *(unsigned char *)(v55 + 8);
    *(void *)uint64_t v55 = v112;
    uint64_t v50 = v211;
    *(unsigned char *)(v55 + 8) = v111;
    outlined consume of PlatformItemCollection.Storage(v113, v114);
  }
  uint64_t v117 = v208[7];
  uint64_t v118 = (uint64_t)&v14[v117];
  uint64_t v119 = (uint64_t)v50 + v117;
  int v120 = v14[v117 + 8];
  int v121 = *((unsigned __int8 *)v50 + v117 + 8);
  uint64_t v205 = v3;
  if (v120 == 255)
  {
    if (v121 == 255)
    {
      uint64_t v123 = *(void *)v119;
      *(unsigned char *)(v118 + 8) = *(unsigned char *)(v119 + 8);
      *(void *)uint64_t v118 = v123;
    }
    else
    {
      char v128 = v121 & 1;
      uint64_t v129 = *(void *)v119;
      outlined copy of PlatformItemCollection.Storage(*(void *)v119, v121 & 1);
      *(void *)uint64_t v118 = v129;
      uint64_t v50 = v211;
      *(unsigned char *)(v118 + 8) = v128;
    }
  }
  else if (v121 == 255)
  {
    outlined destroy of PlatformItemCollection(v118);
    char v122 = *(unsigned char *)(v119 + 8);
    *(void *)uint64_t v118 = *(void *)v119;
    *(unsigned char *)(v118 + 8) = v122;
  }
  else
  {
    char v124 = v121 & 1;
    uint64_t v125 = *(void *)v119;
    outlined copy of PlatformItemCollection.Storage(*(void *)v119, v121 & 1);
    uint64_t v126 = *(void *)v118;
    char v127 = *(unsigned char *)(v118 + 8);
    *(void *)uint64_t v118 = v125;
    uint64_t v50 = v211;
    *(unsigned char *)(v118 + 8) = v124;
    outlined consume of PlatformItemCollection.Storage(v126, v127);
  }
  uint64_t v130 = v208[8];
  uint64_t v131 = &v14[v130];
  uint64_t v132 = (uint64_t)v50 + v130;
  uint64_t v133 = *(void *)((char *)v50 + v130);
  uint64_t v134 = *(void *)((char *)v50 + v130 + 8);
  uint64_t v135 = v50;
  char v136 = *((unsigned char *)v50 + v130 + 16);
  outlined copy of Text.Storage(v133, v134, v136);
  uint64_t v137 = *(void *)v131;
  uint64_t v138 = *((void *)v131 + 1);
  char v139 = v131[16];
  *(void *)uint64_t v131 = v133;
  *((void *)v131 + 1) = v134;
  v131[16] = v136;
  outlined consume of Text.Storage(v137, v138, v139);
  long long v140 = v208;
  *((void *)v131 + 3) = *(void *)(v132 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v141 = v208[9];
  uint64_t v142 = &v14[v141];
  uint64_t v143 = (uint64_t)v135 + v141;
  *(void *)&v14[v141] = *(void *)((char *)v135 + v141);
  swift_retain();
  swift_release();
  *((void *)v142 + 1) = *(void *)(v143 + 8);
  swift_retain();
  swift_release();
  uint64_t v144 = v208[10];
  uint64_t v145 = (uint64_t)&v14[v144];
  uint64_t v146 = (uint64_t)v135 + v144;
  uint64_t v147 = *(void *)&v14[v144];
  uint64_t v148 = *(void *)((char *)v135 + v144);
  if (v147)
  {
    uint64_t v3 = v205;
    if (v148)
    {
      uint64_t v149 = *(void *)(v146 + 8);
      *(void *)uint64_t v145 = v148;
      *(void *)(v145 + 8) = v149;
      *(_DWORD *)(v145 + 16) = *(_DWORD *)(v146 + 16);
      *(void *)(v145 + 24) = *(void *)(v146 + 24);
      id v150 = *(void **)(v146 + 32);
      uint64_t v151 = *(void **)(v145 + 32);
      *(void *)(v145 + 32) = v150;
      id v152 = v150;

      *(void *)(v145 + 40) = *(void *)(v146 + 40);
      swift_retain();
      swift_release();
      *(_DWORD *)(v145 + 48) = *(_DWORD *)(v146 + 48);
      *(void *)(v145 + 56) = *(void *)(v146 + 56);
      swift_retain();
      swift_release();
      *(_DWORD *)(v145 + 64) = *(_DWORD *)(v146 + 64);
      *(_DWORD *)(v145 + 68) = *(_DWORD *)(v146 + 68);
      *(_DWORD *)(v145 + 72) = *(_DWORD *)(v146 + 72);
      *(_DWORD *)(v145 + 76) = *(_DWORD *)(v146 + 76);
      *(void *)(v145 + 80) = *(void *)(v146 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v145);
      long long v156 = *(_OWORD *)(v146 + 16);
      *(_OWORD *)uint64_t v145 = *(_OWORD *)v146;
      *(_OWORD *)(v145 + 16) = v156;
      long long v158 = *(_OWORD *)(v146 + 48);
      long long v157 = *(_OWORD *)(v146 + 64);
      long long v159 = *(_OWORD *)(v146 + 32);
      *(void *)(v145 + 80) = *(void *)(v146 + 80);
      *(_OWORD *)(v145 + 48) = v158;
      *(_OWORD *)(v145 + 64) = v157;
      *(_OWORD *)(v145 + 32) = v159;
    }
  }
  else
  {
    uint64_t v3 = v205;
    if (v148)
    {
      uint64_t v153 = *(void *)(v146 + 8);
      *(void *)uint64_t v145 = v148;
      *(void *)(v145 + 8) = v153;
      *(_DWORD *)(v145 + 16) = *(_DWORD *)(v146 + 16);
      *(void *)(v145 + 24) = *(void *)(v146 + 24);
      long long v154 = *(void **)(v146 + 32);
      *(void *)(v145 + 32) = v154;
      *(void *)(v145 + 40) = *(void *)(v146 + 40);
      *(_DWORD *)(v145 + 48) = *(_DWORD *)(v146 + 48);
      *(void *)(v145 + 56) = *(void *)(v146 + 56);
      *(_DWORD *)(v145 + 64) = *(_DWORD *)(v146 + 64);
      *(_DWORD *)(v145 + 68) = *(_DWORD *)(v146 + 68);
      *(_DWORD *)(v145 + 72) = *(_DWORD *)(v146 + 72);
      *(_DWORD *)(v145 + 76) = *(_DWORD *)(v146 + 76);
      *(void *)(v145 + 80) = *(void *)(v146 + 80);
      id v155 = v154;
      swift_retain();
      swift_retain();
      long long v140 = v208;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v160 = *(_OWORD *)(v146 + 16);
      *(_OWORD *)uint64_t v145 = *(_OWORD *)v146;
      *(_OWORD *)(v145 + 16) = v160;
      long long v161 = *(_OWORD *)(v146 + 32);
      long long v162 = *(_OWORD *)(v146 + 48);
      long long v163 = *(_OWORD *)(v146 + 64);
      *(void *)(v145 + 80) = *(void *)(v146 + 80);
      *(_OWORD *)(v145 + 48) = v162;
      *(_OWORD *)(v145 + 64) = v163;
      *(_OWORD *)(v145 + 32) = v161;
    }
  }
  uint64_t v164 = v140[11];
  uint64_t v165 = (uint64_t)&v14[v164];
  uint64_t v166 = (char *)v211 + v164;
  uint64_t v167 = *(void *)&v14[v164];
  uint64_t v168 = *(void *)((char *)v211 + v164);
  if (v167)
  {
    if (v168)
    {
      uint64_t v169 = *((void *)v166 + 1);
      *(void *)uint64_t v165 = v168;
      *(void *)(v165 + 8) = v169;
      *(_DWORD *)(v165 + 16) = *((_DWORD *)v166 + 4);
      *(void *)(v165 + 24) = *((void *)v166 + 3);
      id v170 = (void *)*((void *)v166 + 4);
      uint64_t v171 = *(void **)(v165 + 32);
      *(void *)(v165 + 32) = v170;
      id v172 = v170;

      *(void *)(v165 + 40) = *((void *)v166 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v165 + 48) = *((_DWORD *)v166 + 12);
      *(void *)(v165 + 56) = *((void *)v166 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v165 + 64) = *((_DWORD *)v166 + 16);
      *(_DWORD *)(v165 + 68) = *((_DWORD *)v166 + 17);
      *(_DWORD *)(v165 + 72) = *((_DWORD *)v166 + 18);
      *(_DWORD *)(v165 + 76) = *((_DWORD *)v166 + 19);
      *(void *)(v165 + 80) = *((void *)v166 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v165);
      long long v176 = *((_OWORD *)v166 + 1);
      *(_OWORD *)uint64_t v165 = *(_OWORD *)v166;
      *(_OWORD *)(v165 + 16) = v176;
      long long v178 = *((_OWORD *)v166 + 3);
      long long v177 = *((_OWORD *)v166 + 4);
      long long v179 = *((_OWORD *)v166 + 2);
      *(void *)(v165 + 80) = *((void *)v166 + 10);
      *(_OWORD *)(v165 + 48) = v178;
      *(_OWORD *)(v165 + 64) = v177;
      *(_OWORD *)(v165 + 32) = v179;
    }
  }
  else if (v168)
  {
    uint64_t v173 = *((void *)v166 + 1);
    *(void *)uint64_t v165 = v168;
    *(void *)(v165 + 8) = v173;
    *(_DWORD *)(v165 + 16) = *((_DWORD *)v166 + 4);
    *(void *)(v165 + 24) = *((void *)v166 + 3);
    long long v174 = (void *)*((void *)v166 + 4);
    *(void *)(v165 + 32) = v174;
    *(void *)(v165 + 40) = *((void *)v166 + 5);
    *(_DWORD *)(v165 + 48) = *((_DWORD *)v166 + 12);
    *(void *)(v165 + 56) = *((void *)v166 + 7);
    *(_DWORD *)(v165 + 64) = *((_DWORD *)v166 + 16);
    *(_DWORD *)(v165 + 68) = *((_DWORD *)v166 + 17);
    *(_DWORD *)(v165 + 72) = *((_DWORD *)v166 + 18);
    *(_DWORD *)(v165 + 76) = *((_DWORD *)v166 + 19);
    *(void *)(v165 + 80) = *((void *)v166 + 10);
    id v175 = v174;
    swift_retain();
    swift_retain();
    long long v140 = v208;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v180 = *((_OWORD *)v166 + 1);
    *(_OWORD *)uint64_t v165 = *(_OWORD *)v166;
    *(_OWORD *)(v165 + 16) = v180;
    long long v181 = *((_OWORD *)v166 + 2);
    long long v182 = *((_OWORD *)v166 + 3);
    long long v183 = *((_OWORD *)v166 + 4);
    *(void *)(v165 + 80) = *((void *)v166 + 10);
    *(_OWORD *)(v165 + 48) = v182;
    *(_OWORD *)(v165 + 64) = v183;
    *(_OWORD *)(v165 + 32) = v181;
  }
  v14[v140[12]] = *((unsigned char *)v211 + v140[12]);
  uint64_t v184 = v140[13];
  uint64_t v185 = (uint64_t)&v14[v184];
  uint64_t v186 = (char *)v211 + v184;
  uint64_t v187 = *(void *)((char *)v211 + v184);
  if (*(void *)v185)
  {
    if (v187)
    {
      uint64_t v188 = *((void *)v186 + 1);
      *(void *)uint64_t v185 = v187;
      *(void *)(v185 + 8) = v188;
      *(_DWORD *)(v185 + 16) = *((_DWORD *)v186 + 4);
      *(void *)(v185 + 24) = *((void *)v186 + 3);
      unint64_t v189 = (void *)*((void *)v186 + 4);
      id v190 = *(void **)(v185 + 32);
      *(void *)(v185 + 32) = v189;
      id v191 = v189;

      *(void *)(v185 + 40) = *((void *)v186 + 5);
      swift_retain();
      swift_release();
      *(_DWORD *)(v185 + 48) = *((_DWORD *)v186 + 12);
      *(void *)(v185 + 56) = *((void *)v186 + 7);
      swift_retain();
      swift_release();
      *(_DWORD *)(v185 + 64) = *((_DWORD *)v186 + 16);
      *(_DWORD *)(v185 + 68) = *((_DWORD *)v186 + 17);
      *(_DWORD *)(v185 + 72) = *((_DWORD *)v186 + 18);
      *(_DWORD *)(v185 + 76) = *((_DWORD *)v186 + 19);
      *(void *)(v185 + 80) = *((void *)v186 + 10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(v185);
      long long v195 = *((_OWORD *)v186 + 1);
      *(_OWORD *)uint64_t v185 = *(_OWORD *)v186;
      *(_OWORD *)(v185 + 16) = v195;
      long long v197 = *((_OWORD *)v186 + 3);
      long long v196 = *((_OWORD *)v186 + 4);
      long long v198 = *((_OWORD *)v186 + 2);
      *(void *)(v185 + 80) = *((void *)v186 + 10);
      *(_OWORD *)(v185 + 48) = v197;
      *(_OWORD *)(v185 + 64) = v196;
      *(_OWORD *)(v185 + 32) = v198;
    }
  }
  else if (v187)
  {
    uint64_t v192 = *((void *)v186 + 1);
    *(void *)uint64_t v185 = v187;
    *(void *)(v185 + 8) = v192;
    *(_DWORD *)(v185 + 16) = *((_DWORD *)v186 + 4);
    *(void *)(v185 + 24) = *((void *)v186 + 3);
    id v193 = (void *)*((void *)v186 + 4);
    *(void *)(v185 + 32) = v193;
    *(void *)(v185 + 40) = *((void *)v186 + 5);
    *(_DWORD *)(v185 + 48) = *((_DWORD *)v186 + 12);
    *(void *)(v185 + 56) = *((void *)v186 + 7);
    *(_DWORD *)(v185 + 64) = *((_DWORD *)v186 + 16);
    *(_DWORD *)(v185 + 68) = *((_DWORD *)v186 + 17);
    *(_DWORD *)(v185 + 72) = *((_DWORD *)v186 + 18);
    *(_DWORD *)(v185 + 76) = *((_DWORD *)v186 + 19);
    *(void *)(v185 + 80) = *((void *)v186 + 10);
    id v194 = v193;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v199 = *((_OWORD *)v186 + 1);
    *(_OWORD *)uint64_t v185 = *(_OWORD *)v186;
    *(_OWORD *)(v185 + 16) = v199;
    long long v200 = *((_OWORD *)v186 + 2);
    long long v201 = *((_OWORD *)v186 + 3);
    long long v202 = *((_OWORD *)v186 + 4);
    *(void *)(v185 + 80) = *((void *)v186 + 10);
    *(_OWORD *)(v185 + 48) = v201;
    *(_OWORD *)(v185 + 64) = v202;
    *(_OWORD *)(v185 + 32) = v200;
  }
LABEL_32:
  *(void *)&v5[v12[14]] = *(void *)&v6[v12[14]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v5[v12[15]] = *(void *)&v6[v12[15]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v3;
}

void *initializeWithTake for ToolbarReader.Mutation(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 52);
  uint64_t v5 = (_OWORD *)((char *)a1 + v4);
  uint64_t v6 = (char *)a2 + v4;
  long long v7 = *(_OWORD *)((char *)a2 + v4 + 48);
  v5[2] = *(_OWORD *)((char *)a2 + v4 + 32);
  v5[3] = v7;
  long long v8 = *(_OWORD *)((char *)a2 + v4 + 16);
  *uint64_t v5 = *(_OWORD *)((char *)a2 + v4);
  v5[1] = v8;
  uint64_t v9 = (int *)type metadata accessor for ToolbarReader.ToolbarConfiguration();
  uint64_t v10 = v9[13];
  long long v11 = (void *)((char *)v5 + v10);
  int v12 = &v6[v10];
  uint64_t v13 = (int *)type metadata accessor for ToolbarStorage.SearchItem(0);
  uint64_t v14 = *((void *)v13 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1, v13))
  {
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    uint64_t v16 = *((void *)v12 + 1);
    void *v11 = *(void *)v12;
    v11[1] = v16;
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v18 = *(int *)(v17 + 32);
    int v57 = v9;
    int v58 = v3;
    int v19 = (char *)v11 + v18;
    uint64_t v20 = &v12[v18];
    *int v19 = v12[v18];
    v19[1] = v12[v18 + 1];
    *((_WORD *)v19 + 1) = *(_WORD *)&v12[v18 + 2];
    v19[8] = v12[v18 + 8];
    *((_DWORD *)v19 + 1) = *(_DWORD *)&v12[v18 + 4];
    uint64_t v56 = v14;
    uint64_t v21 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v22 = v21[9];
    uint64_t v23 = &v19[v22];
    uint64_t v24 = &v20[v22];
    uint64_t v25 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
    v19[v21[10]] = v20[v21[10]];
    uint64_t v26 = v21[11];
    uint64_t v27 = &v19[v26];
    uint64_t v28 = &v20[v26];
    uint64_t v9 = v57;
    uint64_t v3 = v58;
    v27[4] = v28[4];
    *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
    *(void *)((char *)v11 + v13[5]) = *(void *)&v12[v13[5]];
    uint64_t v29 = v13[6];
    uint64_t v30 = (char *)v11 + v29;
    char v31 = &v12[v29];
    v30[8] = v31[8];
    *(void *)uint64_t v30 = *(void *)v31;
    uint64_t v32 = v13[7];
    char v33 = (char *)v11 + v32;
    uint64_t v34 = &v12[v32];
    v33[8] = v34[8];
    *(void *)char v33 = *(void *)v34;
    uint64_t v35 = v13[8];
    int v36 = (_OWORD *)((char *)v11 + v35);
    int v37 = &v12[v35];
    long long v38 = *((_OWORD *)v37 + 1);
    _OWORD *v36 = *(_OWORD *)v37;
    v36[1] = v38;
    *(_OWORD *)((char *)v11 + v13[9]) = *(_OWORD *)&v12[v13[9]];
    uint64_t v39 = v13[10];
    uint64_t v40 = (char *)v11 + v39;
    uint64_t v41 = &v12[v39];
    long long v42 = *((_OWORD *)v41 + 1);
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    *((_OWORD *)v40 + 1) = v42;
    *((void *)v40 + 10) = *((void *)v41 + 10);
    long long v43 = *((_OWORD *)v41 + 4);
    long long v44 = *((_OWORD *)v41 + 2);
    *((_OWORD *)v40 + 3) = *((_OWORD *)v41 + 3);
    *((_OWORD *)v40 + 4) = v43;
    *((_OWORD *)v40 + 2) = v44;
    uint64_t v45 = v13[11];
    char v46 = (char *)v11 + v45;
    uint64_t v47 = &v12[v45];
    long long v48 = *((_OWORD *)v47 + 3);
    *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
    *((_OWORD *)v46 + 3) = v48;
    *((_OWORD *)v46 + 4) = *((_OWORD *)v47 + 4);
    *((void *)v46 + 10) = *((void *)v47 + 10);
    long long v49 = *((_OWORD *)v47 + 1);
    *(_OWORD *)char v46 = *(_OWORD *)v47;
    *((_OWORD *)v46 + 1) = v49;
    *((unsigned char *)v11 + v13[12]) = v12[v13[12]];
    uint64_t v50 = v13[13];
    uint64_t v51 = (char *)v11 + v50;
    uint64_t v52 = &v12[v50];
    long long v53 = *((_OWORD *)v52 + 3);
    *((_OWORD *)v51 + 2) = *((_OWORD *)v52 + 2);
    *((_OWORD *)v51 + 3) = v53;
    *((_OWORD *)v51 + 4) = *((_OWORD *)v52 + 4);
    *((void *)v51 + 10) = *((void *)v52 + 10);
    long long v54 = *((_OWORD *)v52 + 1);
    *(_OWORD *)uint64_t v51 = *(_OWORD *)v52;
    *((_OWORD *)v51 + 1) = v54;
    (*(void (**)(void *, void, uint64_t, int *))(v56 + 56))(v11, 0, 1, v13);
  }
  *(void *)((char *)v5 + v9[14]) = *(void *)&v6[v9[14]];
  *(void *)((char *)v5 + v9[15]) = *(void *)&v6[v9[15]];
  return v3;
}

void *assignWithTake for ToolbarReader.Mutation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 52);
  uint64_t v4 = (char *)a1 + v3;
  uint64_t v5 = (char *)a2 + v3;
  uint64_t v6 = *(void *)((char *)a2 + v3 + 8);
  *(void *)uint64_t v4 = *(void *)((char *)a2 + v3);
  *((void *)v4 + 1) = v6;
  swift_bridgeObjectRelease();
  if (*((void *)v4 + 3))
  {
    if (*((void *)v5 + 3))
    {
      *((void *)v4 + 2) = *((void *)v5 + 2);
      swift_release();
      *((void *)v4 + 3) = *((void *)v5 + 3);
      swift_release();
      *((void *)v4 + 4) = *((void *)v5 + 4);
      goto LABEL_6;
    }
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_1((uint64_t)(v4 + 16), &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
  }
  *((_OWORD *)v4 + 1) = *((_OWORD *)v5 + 1);
  *((void *)v4 + 4) = *((void *)v5 + 4);
LABEL_6:
  *((void *)v4 + 5) = *((void *)v5 + 5);
  swift_bridgeObjectRelease();
  v4[48] = v5[48];
  *((void *)v4 + 7) = *((void *)v5 + 7);
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for ToolbarReader.ToolbarConfiguration();
  uint64_t v8 = *(int *)(v7 + 52);
  uint64_t v9 = &v4[v8];
  uint64_t v10 = &v5[v8];
  uint64_t v11 = type metadata accessor for ToolbarStorage.SearchItem(0);
  uint64_t v117 = *(void *)(v11 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v117 + 48);
  uint64_t v13 = v9;
  int v14 = v12(v9, 1, v11);
  uint64_t v118 = (int *)v11;
  int v15 = v12(v10, 1, v11);
  if (!v14)
  {
    if (v15)
    {
      outlined destroy of ToolbarStorage.Entry((uint64_t)v9, type metadata accessor for ToolbarStorage.SearchItem);
      goto LABEL_11;
    }
    *(void *)uint64_t v9 = *(void *)v10;
    swift_release();
    *((void *)v9 + 1) = *((void *)v10 + 1);
    swift_release();
    _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v60 = *(int *)(v59 + 32);
    uint64_t v61 = &v9[v60];
    uint64_t v62 = &v10[v60];
    *uint64_t v61 = v10[v60];
    v61[1] = v10[v60 + 1];
    *((_WORD *)v61 + 1) = *(_WORD *)&v10[v60 + 2];
    v61[8] = v10[v60 + 8];
    *((_DWORD *)v61 + 1) = *(_DWORD *)&v10[v60 + 4];
    id v63 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v64 = v63[9];
    int v65 = &v61[v64];
    uint64_t v66 = &v62[v64];
    uint64_t v67 = type metadata accessor for AttributedString();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 40))(v65, v66, v67);
    v61[v63[10]] = v62[v63[10]];
    uint64_t v68 = v63[11];
    uint64_t v69 = &v61[v68];
    uint64_t v70 = &v62[v68];
    *(_DWORD *)uint64_t v69 = *(_DWORD *)v70;
    v69[4] = v70[4];
    *(void *)((char *)v13 + v118[5]) = *(void *)&v10[v118[5]];
    swift_bridgeObjectRelease();
    uint64_t v71 = v118[6];
    uint64_t v72 = (uint64_t)v13 + v71;
    uint64_t v73 = &v10[v71];
    int v74 = *((unsigned __int8 *)v13 + v71 + 8);
    if (v74 != 255)
    {
      int v75 = v73[8];
      if (v75 != 255)
      {
        uint64_t v76 = *(void *)v72;
        *(void *)uint64_t v72 = *(void *)v73;
        *(unsigned char *)(v72 + 8) = v75 & 1;
        outlined consume of PlatformItemCollection.Storage(v76, v74 & 1);
LABEL_18:
        uint64_t v77 = v118[7];
        uint64_t v78 = (uint64_t)v13 + v77;
        uint64_t v79 = &v10[v77];
        int v80 = *((unsigned __int8 *)v13 + v77 + 8);
        if (v80 != 255)
        {
          int v81 = v79[8];
          if (v81 != 255)
          {
            uint64_t v82 = *(void *)v78;
            *(void *)uint64_t v78 = *(void *)v79;
            *(unsigned char *)(v78 + 8) = v81 & 1;
            outlined consume of PlatformItemCollection.Storage(v82, v80 & 1);
LABEL_23:
            uint64_t v83 = v118[8];
            id v84 = (char *)v13 + v83;
            long long v85 = &v10[v83];
            LOBYTE(v83) = v10[v83 + 16];
            uint64_t v86 = *(void *)v84;
            uint64_t v87 = *((void *)v84 + 1);
            char v88 = v84[16];
            *(_OWORD *)id v84 = *(_OWORD *)v85;
            v84[16] = v83;
            outlined consume of Text.Storage(v86, v87, v88);
            *((void *)v84 + 3) = *((void *)v85 + 3);
            swift_bridgeObjectRelease();
            uint64_t v89 = v118[9];
            unint64_t v90 = (char *)v13 + v89;
            uint64_t v91 = &v10[v89];
            *(void *)((char *)v13 + v89) = *(void *)&v10[v89];
            swift_release();
            *((void *)v90 + 1) = *((void *)v91 + 1);
            swift_release();
            uint64_t v92 = v118[10];
            uint64_t v93 = (uint64_t)v13 + v92;
            id v94 = &v10[v92];
            if (*(void *)((char *)v13 + v92))
            {
              if (*(void *)v94)
              {
                uint64_t v95 = *((void *)v94 + 1);
                *(void *)uint64_t v93 = *(void *)v94;
                *(void *)(v93 + 8) = v95;
                *(_DWORD *)(v93 + 16) = *((_DWORD *)v94 + 4);
                uint64_t v96 = *((void *)v94 + 4);
                long long v97 = *(void **)(v93 + 32);
                *(void *)(v93 + 24) = *((void *)v94 + 3);
                *(void *)(v93 + 32) = v96;

                *(void *)(v93 + 40) = *((void *)v94 + 5);
                swift_release();
                *(_DWORD *)(v93 + 48) = *((_DWORD *)v94 + 12);
                *(void *)(v93 + 56) = *((void *)v94 + 7);
                swift_release();
                *(_OWORD *)(v93 + 64) = *((_OWORD *)v94 + 4);
                *(void *)(v93 + 80) = *((void *)v94 + 10);
                swift_bridgeObjectRelease();
                goto LABEL_28;
              }
              outlined destroy of BoundInputsView(v93);
            }
            long long v98 = *((_OWORD *)v94 + 3);
            *(_OWORD *)(v93 + 32) = *((_OWORD *)v94 + 2);
            *(_OWORD *)(v93 + 48) = v98;
            *(_OWORD *)(v93 + 64) = *((_OWORD *)v94 + 4);
            *(void *)(v93 + 80) = *((void *)v94 + 10);
            long long v99 = *((_OWORD *)v94 + 1);
            *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
            *(_OWORD *)(v93 + 16) = v99;
LABEL_28:
            uint64_t v29 = v7;
            uint64_t v100 = v118[11];
            uint64_t v101 = (uint64_t)v13 + v100;
            uint64_t v102 = &v10[v100];
            if (*(void *)((char *)v13 + v100))
            {
              if (*(void *)v102)
              {
                uint64_t v103 = *((void *)v102 + 1);
                *(void *)uint64_t v101 = *(void *)v102;
                *(void *)(v101 + 8) = v103;
                *(_DWORD *)(v101 + 16) = *((_DWORD *)v102 + 4);
                uint64_t v104 = *((void *)v102 + 4);
                long long v105 = *(void **)(v101 + 32);
                *(void *)(v101 + 24) = *((void *)v102 + 3);
                *(void *)(v101 + 32) = v104;

                *(void *)(v101 + 40) = *((void *)v102 + 5);
                swift_release();
                *(_DWORD *)(v101 + 48) = *((_DWORD *)v102 + 12);
                *(void *)(v101 + 56) = *((void *)v102 + 7);
                swift_release();
                *(_OWORD *)(v101 + 64) = *((_OWORD *)v102 + 4);
                *(void *)(v101 + 80) = *((void *)v102 + 10);
                swift_bridgeObjectRelease();
                goto LABEL_33;
              }
              outlined destroy of BoundInputsView(v101);
            }
            long long v106 = *((_OWORD *)v102 + 3);
            *(_OWORD *)(v101 + 32) = *((_OWORD *)v102 + 2);
            *(_OWORD *)(v101 + 48) = v106;
            *(_OWORD *)(v101 + 64) = *((_OWORD *)v102 + 4);
            *(void *)(v101 + 80) = *((void *)v102 + 10);
            long long v107 = *((_OWORD *)v102 + 1);
            *(_OWORD *)uint64_t v101 = *(_OWORD *)v102;
            *(_OWORD *)(v101 + 16) = v107;
LABEL_33:
            *((unsigned char *)v13 + v118[12]) = v10[v118[12]];
            uint64_t v108 = v118[13];
            uint64_t v109 = (uint64_t)v13 + v108;
            uint64_t v110 = &v10[v108];
            if (*(void *)((char *)v13 + v108))
            {
              if (*(void *)v110)
              {
                uint64_t v111 = *((void *)v110 + 1);
                *(void *)uint64_t v109 = *(void *)v110;
                *(void *)(v109 + 8) = v111;
                *(_DWORD *)(v109 + 16) = *((_DWORD *)v110 + 4);
                uint64_t v112 = *((void *)v110 + 4);
                uint64_t v113 = *(void **)(v109 + 32);
                *(void *)(v109 + 24) = *((void *)v110 + 3);
                *(void *)(v109 + 32) = v112;

                *(void *)(v109 + 40) = *((void *)v110 + 5);
                swift_release();
                *(_DWORD *)(v109 + 48) = *((_DWORD *)v110 + 12);
                *(void *)(v109 + 56) = *((void *)v110 + 7);
                swift_release();
                *(_OWORD *)(v109 + 64) = *((_OWORD *)v110 + 4);
                *(void *)(v109 + 80) = *((void *)v110 + 10);
                swift_bridgeObjectRelease();
                goto LABEL_12;
              }
              outlined destroy of BoundInputsView(v109);
            }
            long long v114 = *((_OWORD *)v110 + 3);
            *(_OWORD *)(v109 + 32) = *((_OWORD *)v110 + 2);
            *(_OWORD *)(v109 + 48) = v114;
            *(_OWORD *)(v109 + 64) = *((_OWORD *)v110 + 4);
            *(void *)(v109 + 80) = *((void *)v110 + 10);
            long long v115 = *((_OWORD *)v110 + 1);
            *(_OWORD *)uint64_t v109 = *(_OWORD *)v110;
            *(_OWORD *)(v109 + 16) = v115;
            goto LABEL_12;
          }
          outlined destroy of PlatformItemCollection(v78);
        }
        *(void *)uint64_t v78 = *(void *)v79;
        *(unsigned char *)(v78 + 8) = v79[8];
        goto LABEL_23;
      }
      outlined destroy of PlatformItemCollection(v72);
    }
    *(void *)uint64_t v72 = *(void *)v73;
    *(unsigned char *)(v72 + 8) = v73[8];
    goto LABEL_18;
  }
  if (v15)
  {
LABEL_11:
    type metadata accessor for ToolbarStorage.SearchItem?(0);
    memcpy(v9, v10, *(void *)(*(void *)(v57 - 8) + 64));
    uint64_t v29 = v7;
    goto LABEL_12;
  }
  uint64_t v16 = v10;
  uint64_t v17 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = *(void *)v10;
  *((void *)v9 + 1) = v17;
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v19 = *(int *)(v18 + 32);
  uint64_t v116 = v7;
  uint64_t v20 = &v9[v19];
  uint64_t v21 = &v10[v19];
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  *((_WORD *)v20 + 1) = *((_WORD *)v21 + 1);
  v20[8] = v21[8];
  *((_DWORD *)v20 + 1) = *((_DWORD *)v21 + 1);
  uint64_t v22 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v23 = v22[9];
  uint64_t v24 = &v20[v23];
  uint64_t v25 = &v21[v23];
  uint64_t v26 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
  v20[v22[10]] = v21[v22[10]];
  uint64_t v27 = v22[11];
  uint64_t v28 = &v20[v27];
  uint64_t v29 = v116;
  uint64_t v30 = &v21[v27];
  v28[4] = v30[4];
  *(_DWORD *)uint64_t v28 = *(_DWORD *)v30;
  *(void *)((char *)v13 + v118[5]) = *(void *)((char *)v16 + v118[5]);
  uint64_t v31 = v118[6];
  uint64_t v32 = (char *)v13 + v31;
  char v33 = (char *)v16 + v31;
  v32[8] = v33[8];
  *(void *)uint64_t v32 = *(void *)v33;
  uint64_t v34 = v118[7];
  uint64_t v35 = (char *)v13 + v34;
  int v36 = (char *)v16 + v34;
  v35[8] = v36[8];
  *(void *)uint64_t v35 = *(void *)v36;
  uint64_t v37 = v118[8];
  long long v38 = (_OWORD *)((char *)v13 + v37);
  uint64_t v39 = (_OWORD *)((char *)v16 + v37);
  long long v40 = v39[1];
  *long long v38 = *v39;
  v38[1] = v40;
  *(_OWORD *)((char *)v13 + v118[9]) = *(_OWORD *)((char *)v16 + v118[9]);
  uint64_t v41 = v118[10];
  long long v42 = (char *)v13 + v41;
  long long v43 = (char *)v16 + v41;
  long long v44 = *((_OWORD *)v43 + 1);
  *(_OWORD *)long long v42 = *(_OWORD *)v43;
  *((_OWORD *)v42 + 1) = v44;
  *((void *)v42 + 10) = *((void *)v43 + 10);
  long long v45 = *((_OWORD *)v43 + 4);
  long long v46 = *((_OWORD *)v43 + 2);
  *((_OWORD *)v42 + 3) = *((_OWORD *)v43 + 3);
  *((_OWORD *)v42 + 4) = v45;
  *((_OWORD *)v42 + 2) = v46;
  uint64_t v47 = v118[11];
  long long v48 = (char *)v13 + v47;
  long long v49 = (char *)v16 + v47;
  long long v50 = *((_OWORD *)v49 + 3);
  *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
  *((_OWORD *)v48 + 3) = v50;
  *((_OWORD *)v48 + 4) = *((_OWORD *)v49 + 4);
  *((void *)v48 + 10) = *((void *)v49 + 10);
  long long v51 = *((_OWORD *)v49 + 1);
  *(_OWORD *)long long v48 = *(_OWORD *)v49;
  *((_OWORD *)v48 + 1) = v51;
  *((unsigned char *)v13 + v118[12]) = *((unsigned char *)v16 + v118[12]);
  uint64_t v52 = v118[13];
  long long v53 = (char *)v13 + v52;
  long long v54 = (char *)v16 + v52;
  long long v55 = *((_OWORD *)v54 + 3);
  *((_OWORD *)v53 + 2) = *((_OWORD *)v54 + 2);
  *((_OWORD *)v53 + 3) = v55;
  *((_OWORD *)v53 + 4) = *((_OWORD *)v54 + 4);
  *((void *)v53 + 10) = *((void *)v54 + 10);
  long long v56 = *((_OWORD *)v54 + 1);
  *(_OWORD *)long long v53 = *(_OWORD *)v54;
  *((_OWORD *)v53 + 1) = v56;
  (*(void (**)(void *, void, uint64_t))(v117 + 56))(v13, 0, 1);
LABEL_12:
  *(void *)&v4[*(int *)(v29 + 56)] = *(void *)&v5[*(int *)(v29 + 56)];
  swift_bridgeObjectRelease();
  *(void *)&v4[*(int *)(v29 + 60)] = *(void *)&v5[*(int *)(v29 + 60)];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarReader.Mutation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187F86DD8);
}

uint64_t sub_187F86DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 52);
  uint64_t v5 = type metadata accessor for ToolbarReader.ToolbarConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for ToolbarReader.Mutation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187F86E64);
}

uint64_t sub_187F86E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 52);
  uint64_t v6 = type metadata accessor for ToolbarReader.ToolbarConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t partial apply for closure #1 in ToolbarReader.Mutation.apply()(_DWORD *a1)
{
  return closure #1 in ToolbarReader.Mutation.apply()(a1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

double LongPressGesture.minimumDuration.getter()
{
  return *(double *)v0;
}

void LongPressGesture.minimumDuration.setter(double a1)
{
  *unint64_t v1 = a1;
}

uint64_t (*LongPressGesture.minimumDuration.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double LongPressGesture.maximumDistance.getter()
{
  return *(double *)(v0 + 8);
}

void LongPressGesture.maximumDistance.setter(double a1)
{
  *(double *)(v1 + 8) = a1;
}

double (*LongPressGesture.maximumDistance.modify(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *(void *)(v1 + 8);
  return LongPressGesture.maximumDistance.modify;
}

double LongPressGesture.maximumDistance.modify(uint64_t a1)
{
  double result = *(double *)a1;
  *(void *)(*(void *)(a1 + 8) + 8) = *(void *)a1;
  return result;
}

void LongPressGesture.init(minimumDuration:)()
{
}

uint64_t static LongPressGesture._makeGesture(gesture:inputs:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static LongPressGesture._makeGesture(gesture:inputs:)(a1, a2, (void (*)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void))lazy protocol witness table accessor for type LongPressGesture and conformance LongPressGesture, (uint64_t)&type metadata for LongPressGesture, a5, a6, a7, a8);
}

unint64_t lazy protocol witness table accessor for type LongPressGesture and conformance LongPressGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type LongPressGesture and conformance LongPressGesture;
  if (!lazy protocol witness table cache variable for type LongPressGesture and conformance LongPressGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LongPressGesture and conformance LongPressGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LongPressGesture and conformance LongPressGesture;
  if (!lazy protocol witness table cache variable for type LongPressGesture and conformance LongPressGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LongPressGesture and conformance LongPressGesture);
  }
  return result;
}

__n128 LongPressGesture.internalBody.getter@<Q0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = specialized closure #1 in Gesture.longPressPhase();
  *(void *)(a1 + 16) = 0;
  __n128 result = *v1;
  *(__n128 *)(a1 + 24) = *v1;
  *(void *)(a1 + 40) = 16;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

__n128 protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance LongPressGesture@<Q0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = specialized closure #1 in Gesture.longPressPhase();
  *(void *)(a1 + 16) = 0;
  __n128 result = *v1;
  *(__n128 *)(a1 + 24) = *v1;
  *(void *)(a1 + 40) = 16;
  *(unsigned char *)(a1 + 48) = 1;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance LongPressGesture(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance LongPressGesture(a1, a2, a3, a4, (void (*)(uint64_t, void *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void))lazy protocol witness table accessor for type LongPressGesture and conformance LongPressGesture, a6, a7, a8);
}

void protocol witness for Gesture.body.getter in conformance LongPressGesture()
{
}

uint64_t protocol witness for static PressableEventValue.isPressing(_:) in conformance Bool(char *a1)
{
  char v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t result = 0;
  if (v2 != 3) {
    return v1 & 1;
  }
  return result;
}

void View.onLongPressGesture(minimumDuration:pressing:perform:)()
{
}

double DelayedLongPressGesture.minimumDuration.getter()
{
  return *(double *)v0;
}

uint64_t (*DelayedLongPressGesture.minimumDuration.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*DelayedLongPressGesture.maximumDistance.modify(void *a1))()
{
  a1[1] = v1;
  *a1 = *(void *)(v1 + 8);
  return DelayedLongPressGesture.maximumDistance.modify;
}

void DelayedLongPressGesture.init(minimumDuration:)()
{
}

uint64_t static DelayedLongPressGesture._makeGesture(gesture:inputs:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static LongPressGesture._makeGesture(gesture:inputs:)(a1, a2, (void (*)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void))lazy protocol witness table accessor for type DelayedLongPressGesture and conformance DelayedLongPressGesture, (uint64_t)&type metadata for DelayedLongPressGesture, a5, a6, a7, a8);
}

uint64_t static LongPressGesture._makeGesture(gesture:inputs:)(uint64_t a1, void *a2, void (*a3)(uint64_t, void *, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

uint64_t DelayedLongPressGesture.internalBody.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
  uint64_t v3 = v2;
  uint64_t v37 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
  uint64_t v38 = v6;
  uint64_t v39 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
  uint64_t v40 = v9;
  uint64_t v41 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v35 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>();
  uint64_t v42 = v11;
  MEMORY[0x1F4188790](v11);
  int v36 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (uint64_t (*)@<X0>(uint64_t@<X0>, _WORD *@<X8>))*v1;
  default argument 0 of DistanceGesture.init(minimumDistance:maximumDistance:)();
  DistanceGesture.init(minimumDistance:maximumDistance:)();
  uint64_t v14 = v52;
  uint64_t v15 = v53;
  uint64_t v50 = 0;
  long long v48 = 0u;
  long long v49 = 0u;
  char v51 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v48, (uint64_t)v44);
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v44, (uint64_t)&v55);
  v54[0] = v14;
  v54[1] = v15;
  outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)v44);
  outlined destroy of CoordinateSpace((uint64_t)&v48);
  v44[0] = 0;
  long long v45 = specialized closure #1 in Gesture.longPressPhase();
  uint64_t v46 = 0;
  LOBYTE(v48) = 0;
  *((void *)&v48 + 1) = v13;
  *(void *)&long long v49 = 0x7FF0000000000000;
  BYTE8(v49) = 0;
  type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>();
  uint64_t v17 = v16;
  type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
  uint64_t v19 = v18;
  uint64_t v20 = lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>);
  uint64_t v21 = lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
  Gesture.ended<A>(by:)();
  v44[0] = 0;
  long long v45 = v13;
  uint64_t v46 = 0x7FF0000000000000;
  char v47 = 0;
  *(void *)&long long v48 = v17;
  *((void *)&v48 + 1) = v19;
  *(void *)&long long v49 = MEMORY[0x1E4FBB390];
  *((void *)&v49 + 1) = v20;
  uint64_t v22 = MEMORY[0x1E4FBB390];
  uint64_t v50 = v21;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  Gesture.enabled<A>(by:)();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v5, v3);
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  uint64_t v25 = v24;
  *(void *)&long long v48 = v3;
  *((void *)&v48 + 1) = v19;
  *(void *)&long long v49 = v22;
  *((void *)&v49 + 1) = OpaqueTypeConformance2;
  uint64_t v26 = v22;
  uint64_t v50 = v21;
  uint64_t v27 = swift_getOpaqueTypeConformance2();
  uint64_t v28 = lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
  uint64_t v29 = v35;
  uint64_t v30 = v38;
  Gesture.gated<A>(by:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v30);
  *(void *)&long long v48 = v30;
  *((void *)&v48 + 1) = v25;
  *(void *)&long long v49 = v26;
  *((void *)&v49 + 1) = v27;
  uint64_t v50 = v28;
  swift_getOpaqueTypeConformance2();
  uint64_t v31 = (uint64_t)v36;
  uint64_t v32 = v40;
  Gesture.eventFilter<A>(forType:_:)();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v32);
  LOBYTE(v48) = 2;
  lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>);
  Gesture.dependency(_:)();
  _s7SwiftUI15ModifierGestureVyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGWOhTm_0(v31, (uint64_t (*)(void))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>);
  return _s7SwiftUI15ModifierGestureVyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGWOhTm_0((uint64_t)v54, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance DelayedLongPressGesture(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance LongPressGesture(a1, a2, a3, a4, (void (*)(uint64_t, void *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void))lazy protocol witness table accessor for type DelayedLongPressGesture and conformance DelayedLongPressGesture, a6, a7, a8);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance LongPressGesture(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, void *, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, void, void, void, void, void, void, void, void), uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance DelayedLongPressGesture()
{
}

uint64_t View.onDelayedLongPressGesture(minimumDuration:maximumDistance:perform:onPressingChanged:)()
{
  return View.pressableGesture<A>(_:action:pressingAction:)();
}

void View.onDelayedLongPressGesture(minimumDuration:perform:onPressingChanged:)()
{
}

uint64_t SingleLongPressGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v41 = MEMORY[0x1E4F3FBC8];
  uint64_t v51 = v3;
  uint64_t v52 = v6;
  uint64_t v37 = v3;
  uint64_t v7 = v6;
  uint64_t v34 = v6;
  uint64_t v53 = v4;
  uint64_t v54 = v5;
  uint64_t v36 = v5;
  uint64_t v55 = lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
  uint64_t v8 = v55;
  uint64_t v35 = v55;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v42 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  uint64_t v40 = (char *)v31 - v10;
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  uint64_t v12 = v11;
  uint64_t v51 = v3;
  uint64_t v52 = v7;
  uint64_t v53 = v4;
  uint64_t v54 = v5;
  uint64_t v55 = v8;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v14 = lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
  uint64_t v51 = OpaqueTypeMetadata2;
  uint64_t v52 = v12;
  uint64_t v15 = v12;
  v31[0] = v12;
  uint64_t v53 = v4;
  uint64_t v54 = OpaqueTypeConformance2;
  uint64_t v16 = OpaqueTypeConformance2;
  v31[1] = OpaqueTypeConformance2;
  uint64_t v55 = v14;
  uint64_t v17 = swift_getOpaqueTypeMetadata2();
  uint64_t v39 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  char v33 = (char *)v31 - v18;
  uint64_t v19 = type metadata accessor for EventFilter();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v51 = OpaqueTypeMetadata2;
  uint64_t v52 = v15;
  uint64_t v53 = v4;
  uint64_t v54 = v16;
  uint64_t v55 = v14;
  uint64_t v32 = swift_getOpaqueTypeConformance2();
  uint64_t v51 = v19;
  uint64_t v52 = v17;
  uint64_t v53 = WitnessTable;
  uint64_t v54 = v32;
  uint64_t v21 = type metadata accessor for ModifierGesture();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)v31 - v23;
  uint64_t v25 = *(void *)(v38 + *(int *)(a1 + 44));
  default argument 0 of DistanceGesture.init(minimumDistance:maximumDistance:)();
  DistanceGesture.init(minimumDistance:maximumDistance:)();
  uint64_t v26 = v49;
  uint64_t v27 = v50;
  uint64_t v47 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  char v48 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)&v45, (uint64_t)v44);
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v44, (uint64_t)&v53);
  uint64_t v51 = v26;
  uint64_t v52 = v27;
  outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)v44);
  outlined destroy of CoordinateSpace((uint64_t)&v45);
  LOBYTE(v45) = 0;
  *((void *)&v45 + 1) = v25;
  *(void *)&long long v46 = 0x7FF0000000000000;
  BYTE8(v46) = 0;
  swift_checkMetadataState();
  uint64_t v28 = v40;
  Gesture.ended<A>(by:)();
  swift_checkMetadataState();
  uint64_t v29 = v33;
  Gesture.gated<A>(by:)();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v28, OpaqueTypeMetadata2);
  Gesture.eventFilter<A>(forType:_:)();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v17);
  LOBYTE(v45) = 2;
  swift_getWitnessTable();
  Gesture.dependency(_:)();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  return _s7SwiftUI15ModifierGestureVyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGWOhTm_0((uint64_t)&v51, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
}

unint64_t lazy protocol witness table accessor for type DelayedLongPressGesture and conformance DelayedLongPressGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type DelayedLongPressGesture and conformance DelayedLongPressGesture;
  if (!lazy protocol witness table cache variable for type DelayedLongPressGesture and conformance DelayedLongPressGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelayedLongPressGesture and conformance DelayedLongPressGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DelayedLongPressGesture and conformance DelayedLongPressGesture;
  if (!lazy protocol witness table cache variable for type DelayedLongPressGesture and conformance DelayedLongPressGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelayedLongPressGesture and conformance DelayedLongPressGesture);
  }
  return result;
}

void type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>)
  {
    uint64_t v0 = MEMORY[0x1E4F3F7B8];
    type metadata accessor for MapGesture<TappableEvent, Bool>(255, &lazy cache variable for type metadata for MapGesture<TappableEvent, Bool>, MEMORY[0x1E4F3F7B8], MEMORY[0x1E4FBB390], MEMORY[0x1E4F3F370]);
    type metadata accessor for MapGesture<TappableEvent, Bool>(255, &lazy cache variable for type metadata for EventListener<TappableEvent>, v0, MEMORY[0x1E4F3F7B0], MEMORY[0x1E4F3F758]);
    lazy protocol witness table accessor for type MapGesture<TappableEvent, Bool> and conformance MapGesture<A, B>();
    lazy protocol witness table accessor for type EventListener<TappableEvent> and conformance EventListener<A>();
    unint64_t v1 = type metadata accessor for ModifierGesture();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<TappableEvent, Bool> and conformance MapGesture<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type MapGesture<TappableEvent, Bool> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<TappableEvent, Bool> and conformance MapGesture<A, B>)
  {
    type metadata accessor for MapGesture<TappableEvent, Bool>(255, &lazy cache variable for type metadata for MapGesture<TappableEvent, Bool>, MEMORY[0x1E4F3F7B8], MEMORY[0x1E4FBB390], MEMORY[0x1E4F3F370]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<TappableEvent, Bool> and conformance MapGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListener<TappableEvent> and conformance EventListener<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EventListener<TappableEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<TappableEvent> and conformance EventListener<A>)
  {
    type metadata accessor for MapGesture<TappableEvent, Bool>(255, &lazy cache variable for type metadata for EventListener<TappableEvent>, MEMORY[0x1E4F3F7B8], MEMORY[0x1E4F3F7B0], MEMORY[0x1E4F3F758]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<TappableEvent> and conformance EventListener<A>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>)
  {
    uint64_t v0 = MEMORY[0x1E4F3F7B8];
    type metadata accessor for DurationGesture<TappableEvent>(255, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, MEMORY[0x1E4F3F7B8], MEMORY[0x1E4F3FB10]);
    type metadata accessor for MapGesture<TappableEvent, Bool>(255, &lazy cache variable for type metadata for EventListener<TappableEvent>, v0, MEMORY[0x1E4F3F7B0], MEMORY[0x1E4F3F758]);
    lazy protocol witness table accessor for type DurationGesture<TappableEvent> and conformance DurationGesture<A>();
    lazy protocol witness table accessor for type EventListener<TappableEvent> and conformance EventListener<A>();
    unint64_t v1 = type metadata accessor for ModifierGesture();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DurationGesture<TappableEvent> and conformance DurationGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DurationGesture<TappableEvent> and conformance DurationGesture<A>;
  if (!lazy protocol witness table cache variable for type DurationGesture<TappableEvent> and conformance DurationGesture<A>)
  {
    type metadata accessor for DurationGesture<TappableEvent>(255, &lazy cache variable for type metadata for DurationGesture<TappableEvent>, MEMORY[0x1E4F3F7B8], MEMORY[0x1E4F3FB10]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DurationGesture<TappableEvent> and conformance DurationGesture<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CategoryGesture<Bool> and conformance CategoryGesture<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DurationGesture<TappableEvent>(255, a2, MEMORY[0x1E4FBB390], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI15ModifierGestureVyAA015CoordinateSpaceD0Vy12CoreGraphics7CGFloatVGAA08DistanceD0VGWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in LongPressGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in LongPressGesture()
{
  return &protocol witness table for LongPressGesture;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in DelayedLongPressGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in DelayedLongPressGesture()
{
  return &protocol witness table for DelayedLongPressGesture;
}

double sub_187F88A88@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + 8);
  *a2 = result;
  return result;
}

double sub_187F88A94(double *a1, uint64_t a2)
{
  double result = *a1;
  *(double *)(a2 + 8) = *a1;
  return result;
}

ValueMetadata *type metadata accessor for DelayedLongPressGesture()
{
  return &type metadata for DelayedLongPressGesture;
}

uint64_t sub_187F88AB0()
{
  return lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<Bool>, SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CategoryGesture<Bool>, SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>>);
}

void type metadata accessor for ModifierGesture<CategoryGesture<Bool>, SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<Bool>, SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>>)
  {
    uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3FAC8];
    type metadata accessor for DurationGesture<TappableEvent>(255, &lazy cache variable for type metadata for CategoryGesture<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3FAC8]);
    type metadata accessor for SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>();
    lazy protocol witness table accessor for type CategoryGesture<Bool> and conformance CategoryGesture<A>(&lazy protocol witness table cache variable for type CategoryGesture<Bool> and conformance CategoryGesture<A>, &lazy cache variable for type metadata for CategoryGesture<Bool>, v0);
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>> and conformance SingleLongPressGesture<A, B>, (void (*)(uint64_t))type metadata accessor for SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>);
    unint64_t v1 = type metadata accessor for ModifierGesture();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<Bool>, SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>>);
    }
  }
}

void type metadata accessor for SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>()
{
  if (!lazy cache variable for type metadata for SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>)
  {
    type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>);
    unint64_t v0 = type metadata accessor for SingleLongPressGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SingleLongPressGesture<Bool, ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>>);
    }
  }
}

uint64_t type metadata accessor for SingleLongPressGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187F88CC0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA8StaticIfVyAA23GestureContainerFeatureVAaBPAAE012simultaneousF0_9includingQrqd___AA0F4MaskVtAA0F0Rd__lFQOyAA15ModifiedContentVyxAA03AddF8ModifierVyAaLPAAE14truePreferenceyQrqd__mAA0Q3KeyRd__Sb5ValueRtd__lFQOyAA0oF0VyAA09CallbacksF0VyAA09PressablefT033_C70334A42970E36EF599A57E69899EA7LLVySbGGAA09LongPressF0VG_AA013IsCancellablefR0VQo_GG_AA015PrimitiveButtonF0VQo_A10_GAaBHPqd0__AaBHD3_A13_HO_A10_AaBHPxAaBHD1__A9_AA0cO0HPyHCHCHCTm(a1, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>, &lazy protocol witness table cache variable for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
}

void type metadata accessor for MapGesture<TappableEvent, Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_187F88D44()
{
  type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>();
  lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187F88DCC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA8StaticIfVyAA23GestureContainerFeatureVAaBPAAE012simultaneousF0_9includingQrqd___AA0F4MaskVtAA0F0Rd__lFQOyAA15ModifiedContentVyxAA03AddF8ModifierVyAaLPAAE14truePreferenceyQrqd__mAA0Q3KeyRd__Sb5ValueRtd__lFQOyAA0oF0VyAA09CallbacksF0VyAA09PressablefT033_C70334A42970E36EF599A57E69899EA7LLVySbGGAA09LongPressF0VG_AA013IsCancellablefR0VQo_GG_AA015PrimitiveButtonF0VQo_A10_GAaBHPqd0__AaBHD3_A13_HO_A10_AaBHPxAaBHD1__A9_AA0cO0HPyHCHCHCTm(a1, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>, &lazy protocol witness table cache variable for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, DelayedLongPressGesture>(uint64_t a1)
{
}

uint64_t type metadata completion function for SingleLongPressGesture()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SingleLongPressGesture(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for SingleLongPressGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for SingleLongPressGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for SingleLongPressGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for SingleLongPressGesture(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleLongPressGesture(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((((*(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187F89434);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for SingleLongPressGesture(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            uint64_t v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187F895FCLL);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in SingleLongPressGesture<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187F89670()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for DurationGesture<TappableEvent>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_187F896F4()
{
  lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
  swift_getOpaqueTypeMetadata2();
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  swift_getOpaqueTypeConformance2();
  lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
  swift_getOpaqueTypeMetadata2();
  swift_getWitnessTable();
  swift_getOpaqueTypeConformance2();
  type metadata accessor for ModifierGesture();
  swift_getWitnessTable();
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return v2 & 1;
  }
  if (*(unsigned char *)(a2 + 32) == (result & 1)) {
    return 1;
  }
  if (v2 == 1) {
    return 0;
  }
  uint64_t v3 = 33;
  while (1)
  {
    uint64_t v4 = v3 - 31;
    if (__OFADD__(v3 - 32, 1)) {
      break;
    }
    char v5 = *(unsigned char *)(a2 + v3) ^ result;
    if (v5)
    {
      ++v3;
      if (v4 != v2) {
        continue;
      }
    }
    LOBYTE(v2) = v5 ^ 1;
    return v2 & 1;
  }
  __break(1u);
  return result;
}

double specialized ScaledClarityUIMetric.wrappedValue.getter()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = *(unsigned char *)(v0 + 40);
  char v5 = v19;
  uint64_t v6 = *(void *)v0;
  char v7 = *(unsigned char *)(v0 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v0, v7);
  specialized Environment.wrappedValue.getter(v6, v7, &v18);
  outlined consume of Environment<Bool>.Content(v6, v7);
  double v8 = MEMORY[0x18C112CD0](&v19, &v18);
  char v17 = v5;
  char v16 = 7;
  double v9 = v8 / MEMORY[0x18C112CD0](&v17, &v16) * *(double *)(v0 + 32);
  uint64_t v10 = *(void *)(v0 + 16);
  char v11 = *(unsigned char *)(v0 + 24);
  outlined copy of Environment<Bool>.Content(v10, v11);
  double v12 = specialized Environment.wrappedValue.getter(v10, v11);
  outlined consume of Environment<Bool>.Content(v10, v11);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBBEA0], v1);
  double v15 = v9;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v4, v12);
  double v13 = v15;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v13;
}

uint64_t View.multimodalNavigationChrome(shouldDisplay:isAdminModeEnabled:titles:backButtonAction:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return View.multimodalNavigationChrome(shouldDisplay:bottomBarTransitionProgress:backButtonAction:)(a1, a2, a3, 0, 1, a6, a7, a8, a9);
}

uint64_t View.multimodalNavigationChrome(shouldDisplay:backButtonAction:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return View.multimodalNavigationChrome(shouldDisplay:bottomBarTransitionProgress:backButtonAction:)(a1, a2, a3, 0, 1, a4, a5, a6, a7);
}

uint64_t View.multimodalNavigationChrome(shouldDisplay:bottomBarTransitionProgress:backButtonAction:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char v16 = a5 & 1;
  static Binding.constant(_:)();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a6;
  *(void *)(v13 + 24) = a7;
  swift_retain();
  *(void *)&long long v15 = partial apply for closure #1 in UIKitSearchScopeCoordinating<>.onChange(selectedScope:);
  *((void *)&v15 + 1) = v13;
  View.multimodalNavigationChrome(shouldDisplay:isKeyboardVisible:bottomBarTransitionProgress:backButtonAction:)(a1, a2, a3, v20, v21, v22, a4, v16, v15, a8, a9);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_187F89E04()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t View.multimodalNavigationChrome(shouldDisplay:isKeyboardVisible:bottomBarTransitionProgress:backButtonAction:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, long long a9, uint64_t a10, uint64_t a11)
{
  *(void *)&long long v14 = a1;
  *((void *)&v14 + 1) = a2;
  LOBYTE(v15) = a3;
  *((void *)&v15 + 1) = a4;
  *(void *)&long long v16 = a5;
  BYTE8(v16) = a6;
  *(void *)&long long v17 = a7;
  BYTE8(v17) = a8 & 1;
  long long v18 = a9;
  *(void *)&long long v19 = swift_getKeyPath();
  BYTE8(v19) = 0;
  *(void *)&long long v20 = swift_getKeyPath();
  BYTE8(v20) = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v25 = 0;
  uint64_t v13 = 0;
  uint64_t v12[4] = a9;
  v12[5] = v19;
  v12[6] = v20;
  memset(&v12[7], 0, 64);
  v12[0] = v14;
  v12[1] = v15;
  void v12[2] = v16;
  v12[3] = v17;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  MEMORY[0x18C113660](v12, a10, &type metadata for MultimodalNavigationChromeModifier, a11);
  return outlined release of MultimodalNavigationChromeModifier((uint64_t)&v14);
}

uint64_t View.scrollsUnderMultimodalNavigationChrome(scrollInfo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = *(unsigned char *)(a1 + 96);
  long long v4 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v6;
  char v9 = v3;
  return MEMORY[0x18C113660](v8, a2, &unk_1ED465B28, a3);
}

uint64_t closure #1 in MultimodalNavigationChromeModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v87 = a3;
  uint64_t v5 = type metadata accessor for NSNotificationCenter.Publisher();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  double v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v9);
  double v12 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>();
  uint64_t v79 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v81 = (uint64_t)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>(0);
  uint64_t v80 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v83 = (uint64_t)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>, MEMORY[0x1E4F3FBA0]);
  uint64_t v82 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v86 = (uint64_t)&v76 - v18;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>();
  uint64_t v85 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v84 = (uint64_t)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v21 = *(_OWORD *)(a1 + 16);
  v105[0] = *(_OWORD *)a1;
  v105[1] = v21;
  v105[2] = *(_OWORD *)(a1 + 32);
  int v106 = *(_DWORD *)(a1 + 48);
  uint64_t v22 = static HorizontalAlignment.center.getter();
  closure #1 in closure #1 in MultimodalNavigationChromeModifier.body(content:)((long long *)a2, v105, (uint64_t)&v93);
  outlined init with take of BackButtonActionableBar?((uint64_t)&v93, (uint64_t)v107, &lazy cache variable for type metadata for BackButtonActionableBar?, (uint64_t)&unk_1ED43DCE8);
  long long v23 = *(_OWORD *)(a2 + 144);
  long long v101 = *(_OWORD *)(a2 + 128);
  long long v102 = v23;
  long long v103 = *(_OWORD *)(a2 + 160);
  *(void *)&long long v104 = *(void *)(a2 + 176);
  long long v24 = *(_OWORD *)(a2 + 80);
  long long v97 = *(_OWORD *)(a2 + 64);
  long long v98 = v24;
  long long v25 = *(_OWORD *)(a2 + 112);
  long long v99 = *(_OWORD *)(a2 + 96);
  long long v100 = v25;
  long long v26 = *(_OWORD *)(a2 + 16);
  long long v93 = *(_OWORD *)a2;
  long long v94 = v26;
  long long v27 = *(_OWORD *)(a2 + 48);
  long long v95 = *(_OWORD *)(a2 + 32);
  long long v96 = v27;
  if ((MultimodalNavigationChromeModifier.shouldDisplayInCurrentProcess.getter() & 1) != 0
    && (long long v93 = *(_OWORD *)(a2 + 24),
        LOBYTE(v94) = *(unsigned char *)(a2 + 40),
        type metadata accessor for _ContiguousArrayStorage<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]), MEMORY[0x18C113DA0](v91), LOBYTE(v91[0]) != 1))
  {
    LODWORD(v78) = 4;
  }
  else
  {
    LODWORD(v78) = 0;
  }
  outlined init with take of BackButtonActionableBar?((uint64_t)v107, (uint64_t)v91, &lazy cache variable for type metadata for BackButtonActionableBar?, (uint64_t)&unk_1ED43DCE8);
  v91[10] = xmmword_18834FC50;
  LOWORD(v92) = 512;
  *((void *)&v92 + 1) = v22;
  long long v101 = v91[8];
  long long v102 = v91[9];
  long long v97 = v91[4];
  long long v98 = v91[5];
  long long v99 = v91[6];
  long long v100 = v91[7];
  long long v93 = v91[0];
  long long v94 = v91[1];
  long long v95 = v91[2];
  long long v96 = v91[3];
  long long v103 = xmmword_18834FC50;
  long long v104 = v92;
  id v76 = self;
  id v28 = objc_msgSend(v76, sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v29 = swift_allocObject();
  long long v30 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v29 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v29 + 128) = v30;
  long long v31 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v29 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v29 + 96) = v31;
  *(void *)(v29 + 192) = *(void *)(a2 + 176);
  long long v32 = *(_OWORD *)(a2 + 160);
  long long v33 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v29 + 160) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v29 + 176) = v32;
  *(_OWORD *)(v29 + 144) = v33;
  long long v34 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v29 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v29 + 32) = v34;
  long long v35 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v29 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v29 + 64) = v35;
  uint64_t v36 = &v12[*(int *)(v10 + 52)];
  uint64_t v37 = v10;
  uint64_t v77 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v38 = v5;
  v77(v36, v8, v5);
  long long v39 = v102;
  *((_OWORD *)v12 + 8) = v101;
  *((_OWORD *)v12 + 9) = v39;
  long long v40 = v104;
  *((_OWORD *)v12 + 10) = v103;
  *((_OWORD *)v12 + 11) = v40;
  long long v41 = v98;
  *((_OWORD *)v12 + 4) = v97;
  *((_OWORD *)v12 + 5) = v41;
  long long v42 = v100;
  *((_OWORD *)v12 + 6) = v99;
  *((_OWORD *)v12 + 7) = v42;
  long long v43 = v94;
  *(_OWORD *)double v12 = v93;
  *((_OWORD *)v12 + 1) = v43;
  long long v44 = v96;
  *((_OWORD *)v12 + 2) = v95;
  *((_OWORD *)v12 + 3) = v44;
  v12[192] = (char)v78;
  long long v45 = (void (**)(uint64_t))&v12[*(int *)(v37 + 56)];
  *long long v45 = partial apply for closure #2 in closure #1 in MultimodalNavigationChromeModifier.body(content:);
  v45[1] = (void (*)(uint64_t))v29;
  outlined retain of MultimodalNavigationChromeModifier(a2);
  uint64_t v78 = *(void (**)(char *, uint64_t))(v6 + 8);
  v78(v8, v5);
  id v46 = objc_msgSend(v76, sel_defaultCenter);
  NSNotificationCenter.publisher(for:object:)();

  uint64_t v47 = swift_allocObject();
  long long v48 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v47 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v47 + 160) = v48;
  *(_OWORD *)(v47 + 176) = *(_OWORD *)(a2 + 160);
  *(void *)(v47 + 192) = *(void *)(a2 + 176);
  long long v49 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v47 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v47 + 96) = v49;
  long long v50 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v47 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v47 + 128) = v50;
  long long v51 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v47 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v47 + 32) = v51;
  long long v52 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v47 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v47 + 64) = v52;
  uint64_t v53 = v81;
  outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>((uint64_t)v12, v81, (uint64_t (*)(void))type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>);
  uint64_t v54 = v79;
  v77((char *)(v53 + *(int *)(v79 + 52)), v8, v38);
  uint64_t v55 = (void (**)(uint64_t))(v53 + *(int *)(v54 + 56));
  *uint64_t v55 = partial apply for closure #3 in closure #1 in MultimodalNavigationChromeModifier.body(content:);
  v55[1] = (void (*)(uint64_t))v47;
  outlined retain of MultimodalNavigationChromeModifier(a2);
  v78(v8, v38);
  outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>);
  uint64_t v56 = swift_allocObject();
  long long v57 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v56 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v56 + 160) = v57;
  *(_OWORD *)(v56 + 176) = *(_OWORD *)(a2 + 160);
  *(void *)(v56 + 192) = *(void *)(a2 + 176);
  long long v58 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v56 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v56 + 96) = v58;
  long long v59 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v56 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v56 + 128) = v59;
  long long v60 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v56 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v56 + 32) = v60;
  long long v61 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v56 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v56 + 64) = v61;
  uint64_t v62 = v83;
  outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>(v53, v83, (uint64_t (*)(void))type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>);
  id v63 = (uint64_t *(**)(uint64_t *))(v62 + *(int *)(v80 + 36));
  *id v63 = partial apply for closure #4 in closure #1 in MultimodalNavigationChromeModifier.body(content:);
  v63[1] = (uint64_t *(*)(uint64_t *))v56;
  outlined retain of MultimodalNavigationChromeModifier(a2);
  outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)(v53, (uint64_t (*)(void))type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>);
  uint64_t v64 = swift_allocObject();
  long long v65 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v64 + 144) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v64 + 160) = v65;
  *(_OWORD *)(v64 + 176) = *(_OWORD *)(a2 + 160);
  *(void *)(v64 + 192) = *(void *)(a2 + 176);
  long long v66 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v64 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v64 + 96) = v66;
  long long v67 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v64 + 112) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v64 + 128) = v67;
  long long v68 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v64 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v64 + 32) = v68;
  long long v69 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v64 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v64 + 64) = v69;
  uint64_t v70 = v86;
  outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>(v62, v86, (uint64_t (*)(void))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>);
  uint64_t v71 = (void (**)(char *))(v70 + *(int *)(v82 + 36));
  *uint64_t v71 = partial apply for closure #5 in closure #1 in MultimodalNavigationChromeModifier.body(content:);
  v71[1] = (void (*)(char *))v64;
  outlined retain of MultimodalNavigationChromeModifier(a2);
  outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)(v62, (uint64_t (*)(void))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>);
  long long v88 = *(_OWORD *)(a2 + 112);
  outlined retain of MultimodalNavigationChromeModifier(a2);
  type metadata accessor for _ContiguousArrayStorage<Bool>(0, &lazy cache variable for type metadata for State<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  uint64_t v72 = static Animation.coreAnimationDefault(duration:)();
  outlined release of MultimodalNavigationChromeModifier(a2);
  long long v88 = *(_OWORD *)(a2 + 24);
  char v89 = *(unsigned char *)(a2 + 40);
  type metadata accessor for _ContiguousArrayStorage<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v90);
  LOBYTE(v64) = v90;
  uint64_t v73 = v84;
  outlined init with copy of ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>(v70, v84);
  uint64_t v74 = v73 + *(int *)(v85 + 36);
  *(void *)uint64_t v74 = v72;
  *(unsigned char *)(v74 + 8) = v64;
  outlined destroy of ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>(v70);
  return outlined init with take of ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>(v73, v87, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>);
}

uint64_t closure #1 in closure #1 in MultimodalNavigationChromeModifier.body(content:)@<X0>(long long *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = a1[9];
  long long v63 = a1[8];
  long long v64 = v6;
  long long v65 = a1[10];
  uint64_t v66 = *((void *)a1 + 22);
  long long v7 = a1[5];
  v60[2] = a1[4];
  v60[3] = v7;
  long long v8 = a1[7];
  long long v61 = a1[6];
  long long v62 = v8;
  long long v9 = a1[1];
  long long v58 = *a1;
  long long v59 = v9;
  long long v10 = a1[3];
  v60[0] = a1[2];
  v60[1] = v10;
  if (MultimodalNavigationChromeModifier.shouldDisplayInCurrentProcess.getter())
  {
    uint64_t v12 = *((void *)a1 + 8);
    uint64_t v11 = *((void *)a1 + 9);
    long long v58 = *(long long *)((char *)a1 + 24);
    LOBYTE(v59) = *((unsigned char *)a1 + 40);
    type metadata accessor for _ContiguousArrayStorage<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    uint64_t v14 = v13;
    swift_retain();
    MEMORY[0x18C113DA0](&v40, v14);
    char v15 = v40;
    uint64_t v16 = MEMORY[0x1E4FBC958];
    outlined init with take of BackButtonActionableBar?((uint64_t)(a1 + 3), (uint64_t)v67, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958]);
    long long v17 = a1[9];
    long long v58 = a1[8];
    long long v59 = v17;
    v60[0] = a1[10];
    *(void *)&v60[1] = *((void *)a1 + 22);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_6(0, &lazy cache variable for type metadata for State<MultimodalCustomKeyboardActionKeyData?>, &lazy cache variable for type metadata for MultimodalCustomKeyboardActionKeyData?, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKeyData, MEMORY[0x1E4F41580]);
    State.wrappedValue.getter();
    long long v33 = v41;
    long long v34 = v40;
    uint64_t v18 = a3;
    uint64_t v20 = v42;
    unint64_t v19 = v43;
    long long v21 = a2[1];
    long long v58 = *a2;
    long long v59 = v21;
    v60[0] = a2[2];
    LODWORD(v60[1]) = *((_DWORD *)a2 + 12);
    GeometryProxy.size.getter();
    uint64_t v23 = v22;
    *(void *)&long long v58 = v12;
    *((void *)&v58 + 1) = v11;
    LOBYTE(v59) = v15;
    outlined init with take of BackButtonActionableBar?((uint64_t)v67, (uint64_t)&v59 + 8, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, v16);
    *(_OWORD *)((char *)v60 + 8) = v34;
    *(_OWORD *)((char *)&v60[1] + 8) = v33;
    *((void *)&v60[2] + 1) = v20;
    v60[3] = v19;
    a3 = v18;
    *(void *)&long long v61 = v23;
    id v24 = objc_msgSend(self, sel_currentDevice);
    id v25 = objc_msgSend(v24, sel_userInterfaceIdiom);

    BYTE8(v61) = v25 == (id)1;
    double v26 = specialized static BackButtonActionableBar.defaultBodyLeading.getter();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v28 = swift_getKeyPath();
    long long v40 = v58;
    LOBYTE(v41) = v59;
    DWORD1(v41) = *(_DWORD *)&v39[3];
    *(_DWORD *)((char *)&v41 + 1) = *(_DWORD *)v39;
    *((void *)&v41 + 1) = *((void *)&v59 + 1);
    LOBYTE(v42) = v60[0];
    HIDWORD(v42) = *(_DWORD *)&v38[3];
    *(_DWORD *)((char *)&v42 + 1) = *(_DWORD *)v38;
    long long v43 = *(_OWORD *)((char *)v60 + 8);
    long long v44 = *(_OWORD *)((char *)&v60[1] + 8);
    long long v45 = *(_OWORD *)((char *)&v60[2] + 8);
    uint64_t v46 = *((void *)&v60[3] + 1);
    uint64_t v47 = v61;
    char v48 = BYTE8(v61);
    *(_DWORD *)&v49[3] = *(_DWORD *)&v37[3];
    *(_DWORD *)long long v49 = *(_DWORD *)v37;
    uint64_t v50 = KeyPath;
    char v51 = 0;
    *(_DWORD *)&v52[3] = *(_DWORD *)&v36[3];
    *(_DWORD *)long long v52 = *(_DWORD *)v36;
    uint64_t v53 = v28;
    char v54 = 0;
    *(_DWORD *)&v55[3] = *(_DWORD *)&v35[3];
    *(_DWORD *)uint64_t v55 = *(_DWORD *)v35;
    double v56 = v26;
    char v57 = 4;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v40, v29, v30, v31);
  }
  else
  {
    _s7SwiftUI23BackButtonActionableBar33_94927F8A97ECE008E6A618C158753C28LLVSgWOi0_(&v40);
  }
  outlined init with take of BackButtonActionableBar?((uint64_t)&v40, (uint64_t)&v58, &lazy cache variable for type metadata for BackButtonActionableBar?, (uint64_t)&unk_1ED43DCE8);
  return outlined init with take of BackButtonActionableBar?((uint64_t)&v58, a3, &lazy cache variable for type metadata for BackButtonActionableBar?, (uint64_t)&unk_1ED43DCE8);
}

uint64_t MultimodalNavigationChromeModifier.shouldDisplayInCurrentProcess.getter()
{
  uint64_t v1 = v0[1];
  char v2 = *((unsigned char *)v0 + 16);
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  char v5 = *((unsigned char *)v0 + 40);
  uint64_t v6 = v0[12];
  char v7 = *((unsigned char *)v0 + 104);
  uint64_t v11 = *v0;
  uint64_t v12 = v1;
  char v13 = v2;
  type metadata accessor for _ContiguousArrayStorage<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v9 = v8;
  MEMORY[0x18C113DA0](&v14);
  if (v14 != 1) {
    return 0;
  }
  outlined copy of Environment<Bool>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7, &v11);
  outlined consume of Environment<Bool>.Content(v6, v7);
  if (v11 != 1) {
    return 1;
  }
  uint64_t v11 = v3;
  uint64_t v12 = v4;
  char v13 = v5;
  MEMORY[0x18C113DA0](&v14, v9);
  return v14;
}

void MultimodalNavigationChromeModifier.update(for:isKeyboardVisible:)(uint64_t a1, char a2)
{
  long long v4 = *(_OWORD *)(v2 + 128);
  long long v5 = *(_OWORD *)(v2 + 160);
  long long v29 = *(_OWORD *)(v2 + 144);
  long long v30 = v5;
  long long v6 = *(_OWORD *)(v2 + 64);
  long long v7 = *(_OWORD *)(v2 + 96);
  long long v8 = *(_OWORD *)(v2 + 112);
  v26[5] = *(_OWORD *)(v2 + 80);
  v26[6] = v7;
  long long v27 = v8;
  long long v28 = v4;
  long long v9 = *(_OWORD *)(v2 + 16);
  v26[0] = *(_OWORD *)v2;
  v26[1] = v9;
  long long v10 = *(_OWORD *)(v2 + 48);
  v26[2] = *(_OWORD *)(v2 + 32);
  uint64_t v31 = *(void *)(v2 + 176);
  v26[3] = v10;
  unsigned char v26[4] = v6;
  uint64_t v11 = Notification.userInfo.getter();
  if (v11)
  {
    uint64_t v12 = v11;
    id v21 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
    AnyHashable.init<A>(_:)();
    if (*(void *)(v12 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23), (v14 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v12 + 56) + 32 * v13, (uint64_t)&v24);
    }
    else
    {
      long long v24 = 0u;
      long long v25 = 0u;
    }
    outlined destroy of AnyHashable((uint64_t)v23);
    if (*((void *)&v25 + 1))
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      uint64_t v15 = MEMORY[0x1E4FBC840];
      if (swift_dynamicCast())
      {
        uint64_t v16 = v21;
        if (objc_msgSend(v21, sel_BOOLValue))
        {
          id v22 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
          AnyHashable.init<A>(_:)();
          if (*(void *)(v12 + 16)
            && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23), (v18 & 1) != 0))
          {
            outlined init with copy of Any(*(void *)(v12 + 56) + 32 * v17, (uint64_t)&v24);
          }
          else
          {
            long long v24 = 0u;
            long long v25 = 0u;
          }
          swift_bridgeObjectRelease();
          outlined destroy of AnyHashable((uint64_t)v23);
          if (*((void *)&v25 + 1))
          {
            if (swift_dynamicCast())
            {
              uint64_t v19 = *((void *)&v27 + 1);
              swift_retain();
              objc_msgSend(v22, sel_doubleValue);
              v23[0] = v20;
              if (v19) {
                dispatch thunk of AnyLocation.set(_:transaction:)();
              }
              swift_release();
            }
          }
          else
          {
            _sypSgWOhTm_9((uint64_t)&v24, (uint64_t)&lazy cache variable for type metadata for Any?, v15 + 8, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<Bool>);
          }
          LOBYTE(v23[0]) = a2 & 1;
          outlined retain of MultimodalNavigationChromeModifier((uint64_t)v26);
          swift_retain();
          swift_retain();
          dispatch thunk of AnyLocation.set(_:transaction:)();

          swift_release();
          swift_release();
          outlined release of MultimodalNavigationChromeModifier((uint64_t)v26);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      _sypSgWOhTm_9((uint64_t)&v24, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for _ContiguousArrayStorage<Bool>);
    }
  }
}

uint64_t *closure #4 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  long long v4 = *(_OWORD *)(a2 + 144);
  v7[0] = *(_OWORD *)(a2 + 128);
  v7[1] = v4;
  long long v5 = *(_OWORD *)(a2 + 160);
  uint64_t v8 = *(void *)(a2 + 176);
  void v7[2] = v5;
  outlined init with take of ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>((uint64_t)&v8, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for AnyLocation<MultimodalCustomKeyboardActionKeyData?>?);
  uint64_t result = (uint64_t *)outlined init with take of ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(void))type metadata accessor for AnyLocation<MultimodalCustomKeyboardActionKeyData?>?);
  if (v10)
  {
    outlined copy of MultimodalCustomKeyboardActionKeyData?(v2, v3);
    outlined retain of State<MultimodalCustomKeyboardActionKeyData?>((uint64_t *)v7);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined consume of MultimodalCustomKeyboardActionKeyData?(v2, v3);
    return outlined release of State<MultimodalCustomKeyboardActionKeyData?>((uint64_t *)v7);
  }
  return result;
}

void closure #5 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(char *a1, uint64_t a2)
{
  char v3 = *a1;
  LOBYTE(aBlock[0]) = *a1;
  swift_retain();
  outlined retain of MultimodalNavigationChromeModifier(a2);
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  outlined release of MultimodalNavigationChromeModifier(a2);
  long long v4 = *(void **)(a2 + 80);
  char v5 = *(unsigned char *)(a2 + 88);
  outlined copy of Environment<UISceneSession?>.Content(v4, v5);
  long long v6 = specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<UISceneSession?>.Content(v4, v5);
  if (v6)
  {
    id v7 = objc_msgSend(v6, sel_scene, aBlock[0]);

    if (v7)
    {
      id v8 = objc_msgSend(v7, sel__FBSScene);

      if (v8)
      {
        MEMORY[0x1F4188790](v9);
        v13[16] = v3;
        uint64_t v10 = swift_allocObject();
        *(void *)(v10 + 16) = partial apply for closure #1 in closure #5 in closure #1 in MultimodalNavigationChromeModifier.body(content:);
        *(void *)(v10 + 24) = v13;
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = partial apply for closure #1 in FBSScene.updateClarityUIClientSettings(_:);
        *(void *)(v11 + 24) = v10;
        aBlock[4] = partial apply for thunk for @callee_guaranteed (@guaranteed UIMutableTraits) -> ();
        aBlock[5] = v11;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ();
        aBlock[3] = &block_descriptor_63;
        uint64_t v12 = _Block_copy(aBlock);
        swift_retain();
        swift_release();
        objc_msgSend(v8, sel_updateClientSettingsWithBlock_, v12);
        _Block_release(v12);
        LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();

        swift_release();
        swift_release();
        if (v12) {
          __break(1u);
        }
      }
    }
  }
}

uint64_t key path getter for EnvironmentValues.navigationBarHost : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationBarHostKey>, (uint64_t)&type metadata for NavigationBarHostKey, (uint64_t)&protocol witness table for NavigationBarHostKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationBarHostKey>, (uint64_t)&type metadata for NavigationBarHostKey, (uint64_t)&protocol witness table for NavigationBarHostKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.navigationBarHost : EnvironmentValues(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.navigationBarHost.setter((uint64_t)&v2);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance MultimodalNavigationChromeModifier@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 144);
  v15[8] = *(_OWORD *)(v1 + 128);
  v15[9] = v3;
  v15[10] = *(_OWORD *)(v1 + 160);
  uint64_t v16 = *(void *)(v1 + 176);
  long long v4 = *(_OWORD *)(v1 + 80);
  v15[4] = *(_OWORD *)(v1 + 64);
  _OWORD v15[5] = v4;
  long long v5 = *(_OWORD *)(v1 + 112);
  v15[6] = *(_OWORD *)(v1 + 96);
  v15[7] = v5;
  long long v6 = *(_OWORD *)(v1 + 16);
  v15[0] = *(_OWORD *)v1;
  v15[1] = v6;
  long long v7 = *(_OWORD *)(v1 + 48);
  void v15[2] = *(_OWORD *)(v1 + 32);
  v15[3] = v7;
  uint64_t v8 = swift_allocObject();
  long long v9 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(v8 + 144) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v8 + 160) = v9;
  *(_OWORD *)(v8 + 176) = *(_OWORD *)(v1 + 160);
  *(void *)(v8 + 192) = *(void *)(v1 + 176);
  long long v10 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v8 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v8 + 96) = v10;
  long long v11 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v8 + 112) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v8 + 128) = v11;
  long long v12 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v8 + 32) = v12;
  long long v13 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v8 + 64) = v13;
  *a1 = partial apply for closure #1 in MultimodalNavigationChromeModifier.body(content:);
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v8;
  return outlined retain of MultimodalNavigationChromeModifier((uint64_t)v15);
}

void __swiftcall MultimodalNavigationChromeScrollInfo.init(scrollView:representedView:)(SwiftUI::MultimodalNavigationChromeScrollInfo *__return_ptr retstr, UIScrollView *scrollView, UIView *representedView)
{
  [(UIScrollView *)scrollView bounds];
  -[UIScrollView convertRect:toCoordinateSpace:](scrollView, sel_convertRect_toCoordinateSpace_, representedView);
  CGFloat v28 = v7;
  CGFloat v29 = v6;
  CGFloat v26 = v9;
  CGFloat v27 = v8;
  [(UIScrollView *)scrollView contentOffset];
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  [(UIScrollView *)scrollView contentSize];
  CGFloat v15 = v14;
  CGFloat v17 = v16;
  [(UIScrollView *)scrollView adjustedContentInset];
  CGFloat v19 = v18;
  CGFloat v21 = v20;
  CGFloat v23 = v22;
  CGFloat v25 = v24;

  retstr->boundsInRepresentedView.origin.x = v29;
  retstr->boundsInRepresentedView.origin.y = v28;
  retstr->boundsInRepresentedView.size.width = v27;
  retstr->boundsInRepresentedView.size.height = v26;
  retstr->contentOffset.x = v11;
  retstr->contentOffset.y = v13;
  retstr->contentSize.width = v15;
  retstr->contentSize.height = v17;
  retstr->adjustedContentInset.top = v19;
  retstr->adjustedContentInset.left = v21;
  retstr->adjustedContentInset.bottom = v23;
  retstr->adjustedContentInset.right = v25;
}

double static ScrollsUnderMultimodalNavigationChromeModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int v4 = *a1;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 24);
  int v7 = *(_DWORD *)(a2 + 28);
  unsigned int v9 = *(_DWORD *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = *(void *)(a2 + 48);
  unsigned int v37 = *(_DWORD *)(a2 + 36);
  unsigned int v38 = *(_DWORD *)(a2 + 56);
  unsigned int v35 = *(_DWORD *)(a2 + 64);
  unsigned int v36 = *(_DWORD *)(a2 + 60);
  unsigned int v33 = *(_DWORD *)(a2 + 72);
  unsigned int v34 = *(_DWORD *)(a2 + 68);
  int v31 = *(_DWORD *)(a2 + 80);
  unsigned int v32 = *(_DWORD *)(a2 + 76);
  unint64_t v43 = *(void *)a2;
  unint64_t v12 = v43;
  unint64_t v25 = v43;
  LODWORD(v44) = v5;
  int v13 = v5;
  int v24 = v5;
  uint64_t v45 = v6;
  uint64_t v14 = v6;
  uint64_t v23 = v6;
  int v46 = v8;
  int v47 = v7;
  int v15 = v8;
  int v22 = v8;
  int v16 = v7;
  int v26 = v7;
  unsigned int v27 = v9;
  unint64_t v48 = __PAIR64__(v37, v9);
  unsigned int v17 = v9;
  uint64_t v49 = v10;
  unint64_t v50 = v11;
  uint64_t v18 = v10;
  uint64_t v28 = v10;
  unint64_t v19 = v11;
  *(void *)&long long v51 = __PAIR64__(v36, v38);
  *((void *)&v51 + 1) = __PAIR64__(v34, v35);
  *(void *)&long long v52 = __PAIR64__(v32, v33);
  DWORD2(v52) = v31;
  a3(&v40);
  LODWORD(v43) = v4;
  type metadata accessor for _ContiguousArrayStorage<Bool>(0, &lazy cache variable for type metadata for _GraphValue<ScrollsUnderMultimodalNavigationChromeModifier>, (uint64_t)&unk_1ED465B28, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unint64_t v43 = v12;
  LODWORD(v44) = v13;
  uint64_t v45 = v14;
  int v46 = v15;
  int v47 = v16;
  unint64_t v48 = __PAIR64__(v37, v17);
  uint64_t v49 = v18;
  unint64_t v50 = v19;
  *(void *)&long long v51 = __PAIR64__(v36, v38);
  *((void *)&v51 + 1) = __PAIR64__(v34, v35);
  *(void *)&long long v52 = __PAIR64__(v32, v33);
  DWORD2(v52) = v31;
  unsigned int v29 = _ViewInputs.position.getter();
  unint64_t v43 = v25;
  LODWORD(v44) = v24;
  uint64_t v45 = v23;
  int v46 = v22;
  int v47 = v26;
  unint64_t v48 = __PAIR64__(v37, v27);
  uint64_t v49 = v28;
  unint64_t v50 = v19;
  *(void *)&long long v51 = __PAIR64__(v36, v38);
  *((void *)&v51 + 1) = __PAIR64__(v34, v35);
  *(void *)&long long v52 = __PAIR64__(v32, v33);
  DWORD2(v52) = v31;
  unint64_t v43 = __PAIR64__(_ViewInputs.transform.getter(), v29);
  LODWORD(v44) = OffsetAttribute2;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type MultimodalScrollGeometryTransformProvider and conformance MultimodalScrollGeometryTransformProvider();
  LODWORD(v43) = Attribute.init<A>(body:value:flags:update:)();
  HIDWORD(v43) = OffsetAttribute2;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  LOBYTE(v46) = 1;
  unint64_t v48 = 0;
  uint64_t v49 = 0;
  LOBYTE(v50) = 1;
  long long v51 = 0u;
  long long v52 = 0u;
  char v53 = 1;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _ContiguousArrayStorage<Bool>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E4F40498], MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type MultimodalScrollGeometryState and conformance MultimodalScrollGeometryState();
  int v20 = Attribute.init<A>(body:value:flags:update:)();
  unint64_t v43 = v19;
  LODWORD(v44) = v38;
  int v42 = v20;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *(void *)a4 = v40;
  double result = v41;
  a4[1] = v41;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollsUnderMultimodalNavigationChromeModifier()
{
}

double MultimodalScrollGeometryTransformProvider.value.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v10 = *(void *)Value;
  long long v11 = *(_OWORD *)(Value + 8);
  long long v12 = *(_OWORD *)(Value + 24);
  AGGraphGetValue();
  uint64_t v3 = swift_retain();
  *(double *)&unint64_t v4 = MEMORY[0x18C10C240](v3);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v5, v4));
  type metadata accessor for _ContiguousArrayStorage<Bool>(0, &lazy cache variable for type metadata for MultimodalNavigationChromeScrollInfo?, (uint64_t)&type metadata for MultimodalNavigationChromeScrollInfo, MEMORY[0x1E4FBB718]);
  uint64_t v6 = AGGraphGetValue();
  if ((*(unsigned char *)(v6 + 96) & 1) == 0)
  {
    double v7 = UIEdgeInsetsInsetRect(*(double *)v6, *(double *)(v6 + 8), *(double *)(v6 + 16), *(double *)(v6 + 24), *(double *)(v6 + 64), *(double *)(v6 + 72));
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v8, *(unint64_t *)&v7));
  }
  *(void *)a1 = v10;
  *(_OWORD *)(a1 + 8) = v11;
  double result = *(double *)&v12;
  *(_OWORD *)(a1 + 24) = v12;
  return result;
}

double protocol witness for Rule.value.getter in conformance MultimodalScrollGeometryTransformProvider@<D0>(uint64_t a1@<X8>)
{
  return MultimodalScrollGeometryTransformProvider.value.getter(a1);
}

uint64_t MultimodalScrollGeometryState.updateValue()()
{
  type metadata accessor for _ContiguousArrayStorage<Bool>(0, &lazy cache variable for type metadata for MultimodalNavigationChromeScrollInfo?, (uint64_t)&type metadata for MultimodalNavigationChromeScrollInfo, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  if (*(unsigned char *)(Value + 96))
  {
    type metadata accessor for _ContiguousArrayStorage<Bool>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E4F40498], MEMORY[0x1E4FBB320]);
    return AGGraphSetOutputValue();
  }
  else
  {
    double v4 = *(double *)(Value + 32);
    double v3 = *(double *)(Value + 40);
    double v6 = *(double *)(Value + 48);
    double v5 = *(double *)(Value + 56);
    double v12 = UIEdgeInsetsInsetRect(*(double *)Value, *(double *)(Value + 8), *(double *)(Value + 16), *(double *)(Value + 24), *(double *)(Value + 64), *(double *)(Value + 72));
    CGFloat v13 = v7;
    CGFloat v10 = v8;
    CGFloat v11 = v9;
    type metadata accessor for _ContiguousArrayStorage<Bool>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E4F40498], MEMORY[0x1E4FBB320]);
    if (AGGraphGetOutputValue()
      && (*(unsigned char *)(v0 + 24) & 1) == 0
      && *(double *)(v0 + 8) == v4
      && *(double *)(v0 + 16) == v3
      && (*(unsigned char *)(v0 + 48) & 1) == 0
      && *(double *)(v0 + 32) == v6
      && *(double *)(v0 + 40) == v5
      && (*(unsigned char *)(v0 + 88) & 1) == 0
      && (v14.origin.x = v12,
          v14.origin.y = v13,
          v14.size.width = v10,
          v14.size.height = v11,
          uint64_t result = CGRectEqualToRect(*(CGRect *)(v0 + 56), v14),
          (result & 1) != 0))
    {
      *(double *)(v0 + 8) = v4;
      *(double *)(v0 + 16) = v3;
      *(unsigned char *)(v0 + 24) = 0;
      *(double *)(v0 + 32) = v6;
      *(double *)(v0 + 40) = v5;
      *(unsigned char *)(v0 + 48) = 0;
      *(double *)(v0 + 56) = v12;
      *(CGFloat *)(v0 + 64) = v13;
      *(CGFloat *)(v0 + 72) = v10;
      *(CGFloat *)(v0 + 80) = v11;
    }
    else
    {
      ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:)();
      type metadata accessor for _ContiguousArrayStorage<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollGeometryState>, MEMORY[0x1E4F40498], MEMORY[0x1E4FBBE00]);
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_18834BB80;
      AGCreateWeakAttribute();
      ScrollGeometryState.init(geometry:scrollableAxes:transform:)();
      AGGraphSetOutputValue();
      uint64_t result = swift_bridgeObjectRelease();
      *(double *)(v0 + 8) = v4;
      *(double *)(v0 + 16) = v3;
      *(unsigned char *)(v0 + 24) = 0;
      *(double *)(v0 + 32) = v6;
      *(double *)(v0 + 40) = v5;
      *(unsigned char *)(v0 + 48) = 0;
      *(double *)(v0 + 56) = v12;
      *(CGFloat *)(v0 + 64) = v13;
      *(CGFloat *)(v0 + 72) = v10;
      *(CGFloat *)(v0 + 80) = v11;
    }
    *(unsigned char *)(v0 + 88) = 0;
  }
  return result;
}

double MultimodalNavigationTitleBar.body.getter@<D0>(uint64_t a1@<X8>)
{
  long long v3 = v1[5];
  long long v65 = v1[4];
  *(_OWORD *)uint64_t v66 = v3;
  *(_OWORD *)&v66[9] = *(_OWORD *)((char *)v1 + 89);
  long long v4 = v1[1];
  v64[0] = *v1;
  v64[1] = v4;
  long long v5 = v1[3];
  v64[2] = v1[2];
  _OWORD v64[3] = v5;
  uint64_t v50 = static VerticalAlignment.center.getter();
  closure #1 in MultimodalNavigationTitleBar.body.getter((uint64_t)v64, (uint64_t)v51);
  uint64_t v47 = v51[1];
  uint64_t v48 = v51[0];
  char v6 = v52;
  long long v49 = v53;
  char v46 = v54;
  char v7 = v56;
  uint64_t v44 = v57;
  uint64_t v45 = v55;
  uint64_t v42 = v59;
  uint64_t v43 = v58;
  char v8 = v61;
  uint64_t v40 = v62;
  uint64_t v41 = v60;
  char v9 = v63;
  if (one-time initialization token for titleTopPadding != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v38 = v11;
  uint64_t v39 = v10;
  double v36 = v13;
  uint64_t v37 = v12;
  char v14 = static Edge.Set.horizontal.getter();
  if ((BYTE8(v65) & 1) != 0 && one-time initialization token for titleHorizontalPadding != -1) {
    swift_once();
  }
  EdgeInsets.init(_all:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  if (v66[8])
  {
    outlined retain of MultimodalNavigationTitleBar((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
    if (one-time initialization token for titleBottomPadding != -1) {
      swift_once();
    }
    outlined retain of MultimodalNavigationTitleBar((uint64_t)v64, (void (*)(void, void, void, void, void, void, void, void))outlined consume of NavigationTitleStorage?);
  }
  EdgeInsets.init(_all:)();
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v31 = *(void *)&v66[16];
  char v32 = v66[24];
  uint64_t v33 = static Alignment.center.getter();
  LOBYTE(v51[0]) = v32;
  *(void *)a1 = v50;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v48;
  *(void *)(a1 + 32) = v47;
  *(unsigned char *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = v49;
  *(unsigned char *)(a1 + 64) = v46;
  *(void *)(a1 + 72) = v45;
  *(unsigned char *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = v44;
  *(void *)(a1 + 96) = v43;
  *(void *)(a1 + 104) = v42;
  *(void *)(a1 + 112) = v41;
  *(unsigned char *)(a1 + 120) = v8;
  *(void *)(a1 + 128) = v40;
  *(unsigned char *)(a1 + 136) = v9;
  *(unsigned char *)(a1 + 144) = 1;
  *(void *)(a1 + 152) = v39;
  *(void *)(a1 + 160) = v38;
  double result = v36;
  *(void *)(a1 + 168) = v37;
  *(double *)(a1 + 176) = v36;
  *(unsigned char *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 192) = v14;
  *(void *)(a1 + 200) = v16;
  *(void *)(a1 + 208) = v18;
  *(void *)(a1 + 216) = v20;
  *(void *)(a1 + 224) = v22;
  *(unsigned char *)(a1 + 232) = 0;
  *(unsigned char *)(a1 + 240) = 4;
  *(void *)(a1 + 248) = v24;
  *(void *)(a1 + 256) = v26;
  *(void *)(a1 + 264) = v28;
  *(void *)(a1 + 272) = v30;
  *(unsigned char *)(a1 + 280) = 0;
  *(unsigned char *)(a1 + 288) = 1;
  *(void *)(a1 + 296) = v31;
  *(unsigned char *)(a1 + 304) = v51[0];
  *(void *)(a1 + 312) = v33;
  *(void *)(a1 + 320) = v35;
  return result;
}

uint64_t closure #1 in MultimodalNavigationTitleBar.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with take of BackButtonActionableBar?(a1, (uint64_t)v23, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
  outlined init with take of BackButtonActionableBar?((uint64_t)v23, (uint64_t)v27, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
  uint64_t v4 = v29;
  if (v29 == 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    char v7 = 0;
LABEL_6:
    LocalizedStringKey.init(stringLiteral:)();
    type metadata accessor for SwiftUIClass();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v10 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    uint64_t v11 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v13 = v12;
    uint64_t v4 = v14;
    char v8 = v15 & 1;
    outlined consume of Text?(v5, v6, v7, 0);
    uint64_t v5 = v11;
    uint64_t v6 = v13;
    goto LABEL_7;
  }
  uint64_t v5 = v27[0];
  uint64_t v6 = v27[1];
  char v7 = v28;
  if (!v29)
  {
    outlined retain of MultimodalNavigationTitleBar(a1, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
    goto LABEL_6;
  }
  char v8 = v28 & 1;
  outlined retain of MultimodalNavigationTitleBar(a1, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
  outlined copy of Text.Storage(v5, v6, v7 & 1);
  swift_bridgeObjectRetain();
LABEL_7:
  outlined init with take of BackButtonActionableBar?((uint64_t)v23, (uint64_t)v24, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
  if (v25 == 1 || (uint64_t v16 = v26) == 0)
  {
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
    uint64_t v17 = swift_allocObject();
    strcpy((char *)(v17 + 16), "questionmark");
    *(unsigned char *)(v17 + 29) = 0;
    *(_WORD *)(v17 + 30) = -5120;
    *(_DWORD *)(v17 + 32) = 0;
    *(unsigned char *)(v17 + 36) = 1;
    *(_OWORD *)(v17 + 40) = xmmword_18834C6B0;
    *(_OWORD *)(v17 + 56) = xmmword_1883B7C10;
    *(_OWORD *)(v17 + 72) = xmmword_18834C6D0;
    *(unsigned char *)(v17 + 88) = 0;
    outlined retain of MultimodalNavigationTitleBar(a1, (void (*)(void, void, void, void, void, void, void, void))outlined copy of NavigationTitleStorage?);
    uint64_t v16 = AnyView.init<A>(_:)();
    outlined retain of MultimodalNavigationTitleBar(a1, (void (*)(void, void, void, void, void, void, void, void))outlined consume of NavigationTitleStorage?);
  }
  else
  {
    swift_retain();
  }
  uint64_t KeyPath = swift_getKeyPath();
  outlined retain of MultimodalNavigationTitleBar(a1, (void (*)(void, void, void, void, void, void, void, void))outlined consume of NavigationTitleStorage?);
  if (one-time initialization token for clarityUINavigationTitle != -1) {
    swift_once();
  }
  uint64_t v19 = static Font.clarityUINavigationTitle;
  uint64_t v20 = swift_getKeyPath();
  uint64_t v21 = swift_getKeyPath();
  *(void *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v16;
  *(unsigned char *)(a2 + 40) = 1;
  *(void *)(a2 + 48) = KeyPath;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = v20;
  *(void *)(a2 + 72) = v19;
  *(void *)(a2 + 80) = v21;
  *(void *)(a2 + 88) = 3;
  *(unsigned char *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  outlined copy of Text.Storage(v5, v6, v8);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(KeyPath, 0);
  swift_retain();
  swift_retain_n();
  swift_retain();
  outlined consume of Text.Storage(v5, v6, v8);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool>.Content(KeyPath, 0);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t MultimodalNavigationTitleLabelStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MultimodalNavigationTitleBar()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double MultimodalNavigationTitleLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = static VerticalAlignment.firstTextLineCenter.getter();
  if (one-time initialization token for navigationIconToTitleSpacing != -1) {
    swift_once();
  }
  uint64_t v6 = static ClarityUIMetrics.navigationIconToTitleSpacing;
  closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:)(v3, v4, (uint64_t)v17);
  uint64_t v7 = v18;
  char v8 = v19;
  uint64_t v9 = v20;
  char v10 = v21;
  uint64_t v11 = v23;
  double result = v24;
  long long v14 = v17[1];
  long long v13 = v17[2];
  long long v15 = v17[0];
  long long v16 = v22;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = v7;
  *(unsigned char *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v9;
  *(unsigned char *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 104) = v16;
  *(void *)(a1 + 120) = v11;
  *(double *)(a1 + 128) = result;
  return result;
}

double closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  static EdgeInsets.zero.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  a2 &= 1u;
  *(unsigned char *)(v14 + 24) = a2;
  outlined copy of Environment<Bool>.Content(a1, a2);
  specialized Environment.wrappedValue.getter(a1, a2);
  outlined copy of Environment<Bool>.Content(a1, a2);
  specialized Environment.wrappedValue.getter(a1, a2);
  outlined consume of Environment<Bool>.Content(a1, a2);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  outlined copy of Environment<Bool>.Content(a1, a2);
  specialized Environment.wrappedValue.getter(a1, a2);
  outlined consume of Environment<Bool>.Content(a1, a2);
  if (one-time initialization token for navigationIconToTitleSpacing != -1) {
    swift_once();
  }
  View.bodyHeadOutdent(_:)();
  double result = v17;
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v11;
  *(void *)(a3 + 24) = v13;
  *(void *)(a3 + 32) = partial apply for closure #1 in closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:);
  *(void *)(a3 + 40) = v14;
  *(void *)(a3 + 48) = v18;
  *(unsigned char *)(a3 + 56) = v19;
  *(void *)(a3 + 64) = v20;
  *(unsigned char *)(a3 + 72) = v21;
  *(void *)(a3 + 80) = v22;
  *(void *)(a3 + 88) = v23;
  *(void *)(a3 + 96) = v16;
  *(double *)(a3 + 104) = v17;
  return result;
}

double closure #1 in closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v5 = a2 & 1;
  outlined copy of Environment<Bool>.Content(a1, a2 & 1);
  specialized Environment.wrappedValue.getter(a1, v5);
  outlined consume of Environment<Bool>.Content(a1, v5);
  outlined copy of Environment<Bool>.Content(a1, v5);
  specialized Environment.wrappedValue.getter(a1, v5);
  outlined consume of Environment<Bool>.Content(a1, v5);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a3 = v7;
  *(unsigned char *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v9;
  *(unsigned char *)(a3 + 24) = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a3 + 32) = v11;
  return result;
}

double EnvironmentValues.clarityUINavigationTitleIconWidth.getter()
{
  lazy protocol witness table accessor for type EnvironmentValues.ClarityUIIconWidthKey and conformance EnvironmentValues.ClarityUIIconWidthKey();
  EnvironmentValues.subscript.getter();
  return v1;
}

double key path getter for EnvironmentValues.clarityUINavigationTitleIconWidth : EnvironmentValues@<D0>(double *a1@<X8>)
{
  lazy protocol witness table accessor for type EnvironmentValues.ClarityUIIconWidthKey and conformance EnvironmentValues.ClarityUIIconWidthKey();
  EnvironmentValues.subscript.getter();
  double result = v3;
  *a1 = v3;
  return result;
}

double protocol witness for LabelStyle.makeBody(configuration:) in conformance MultimodalNavigationTitleLabelStyle@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = static VerticalAlignment.firstTextLineCenter.getter();
  if (one-time initialization token for navigationIconToTitleSpacing != -1) {
    swift_once();
  }
  uint64_t v6 = static ClarityUIMetrics.navigationIconToTitleSpacing;
  closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:)(v3, v4, (uint64_t)v17);
  uint64_t v7 = v18;
  char v8 = v19;
  uint64_t v9 = v20;
  char v10 = v21;
  uint64_t v11 = v23;
  double result = v24;
  long long v14 = v17[1];
  long long v13 = v17[2];
  long long v15 = v17[0];
  long long v16 = v22;
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = v7;
  *(unsigned char *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = v9;
  *(unsigned char *)(a1 + 96) = v10;
  *(_OWORD *)(a1 + 104) = v16;
  *(void *)(a1 + 120) = v11;
  *(double *)(a1 + 128) = result;
  return result;
}

uint64_t MultimodalCustomKeyboardActionKeyData.title.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultimodalCustomKeyboardActionKeyData.systemImageName.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultimodalCustomKeyboardActionKeyData.action.getter()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_retain();
  return v1;
}

uint64_t MultimodalCustomKeyboardActionKeyData.init(title:systemImageName:action:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

double static MultimodalCustomKeyboardActionKey.defaultValue.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void *static MultimodalCustomKeyboardActionKey.reduce(value:nextValue:)(void *result, void *(*a2)(void *__return_ptr))
{
  char v2 = result;
  uint64_t v3 = result[1];
  if (v3)
  {
    long long v4 = *((_OWORD *)result + 1);
    long long v5 = *((_OWORD *)result + 2);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = v7;
    double result = a2(v7);
    uint64_t v3 = v7[1];
    long long v4 = v8;
    long long v5 = v9;
  }
  *char v2 = *v6;
  v2[1] = v3;
  *((_OWORD *)v2 + 1) = v4;
  *((_OWORD *)v2 + 2) = v5;
  return result;
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance MultimodalCustomKeyboardActionKey(void *result, void *(*a2)(void *__return_ptr))
{
  char v2 = result;
  uint64_t v3 = result[1];
  if (v3)
  {
    long long v4 = *((_OWORD *)result + 1);
    long long v5 = *((_OWORD *)result + 2);
    uint64_t v6 = result;
  }
  else
  {
    uint64_t v6 = v7;
    double result = a2(v7);
    uint64_t v3 = v7[1];
    long long v4 = v8;
    long long v5 = v9;
  }
  *char v2 = *v6;
  v2[1] = v3;
  *((_OWORD *)v2 + 1) = v4;
  *((_OWORD *)v2 + 2) = v5;
  return result;
}

uint64_t static MultimodalChromeVisiblePreferenceKey.defaultValue.getter()
{
  return 1;
}

uint64_t static MultimodalChromeVisiblePreferenceKey.reduce(value:nextValue:)(unsigned char *a1, uint64_t (*a2)(void))
{
  type metadata accessor for _ContiguousArrayStorage<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB70;
  *(unsigned char *)(inited + 32) = *a1;
  uint64_t result = a2();
  *(unsigned char *)(inited + 33) = result & 1;
  uint64_t v6 = *(void *)(inited + 16);
  if (!v6) {
    goto LABEL_4;
  }
  if (*(unsigned char *)(inited + 32) != 1)
  {
    LOBYTE(v7) = 0;
    goto LABEL_13;
  }
  if (v6 == 1)
  {
LABEL_4:
    LOBYTE(v7) = 1;
LABEL_13:
    uint64_t result = swift_setDeallocating();
    *a1 = v7;
    return result;
  }
  uint64_t v8 = 33;
  while (1)
  {
    uint64_t v9 = v8 - 31;
    if (__OFADD__(v8 - 32, 1)) {
      break;
    }
    int v7 = *(unsigned __int8 *)(inited + v8++);
    if (v7 != 1 || v9 == v6) {
      goto LABEL_13;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance MultimodalChromeVisiblePreferenceKey(BOOL *a1, void (*a2)(uint64_t *__return_ptr))
{
  type metadata accessor for _ContiguousArrayStorage<Bool>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB70;
  *(unsigned char *)(inited + 32) = *a1;
  a2(&v6);
  *(unsigned char *)(inited + 33) = v6;
  LOBYTE(a2) = specialized Sequence<>.contains(_:)(0, inited);
  uint64_t result = swift_setDeallocating();
  *a1 = (a2 & 1) == 0;
  return result;
}

uint64_t BackButtonActionableBar.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v36 = a1;
  type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>();
  MEMORY[0x1F4188790](v2 - 8);
  long long v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(0, &lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v35 - v7;
  long long v9 = v1[7];
  long long v43 = v1[6];
  long long v44 = v9;
  v45[0] = v1[8];
  *(_OWORD *)((char *)v45 + 9) = *(long long *)((char *)v1 + 137);
  long long v10 = v1[3];
  long long v39 = v1[2];
  long long v40 = v10;
  long long v11 = v1[5];
  long long v41 = v1[4];
  long long v42 = v11;
  long long v12 = v1[1];
  long long v37 = *v1;
  long long v38 = v12;
  *(void *)long long v4 = static VerticalAlignment.center.getter();
  *((void *)v4 + 1) = 0;
  v4[16] = 1;
  type metadata accessor for _VariadicView.Tree<_HStackLayout, _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>();
  closure #1 in BackButtonActionableBar.body.getter((uint64_t)&v37, (uint64_t)&v4[*(int *)(v13 + 44)]);
  if (one-time initialization token for backButtonPadding != -1) {
    swift_once();
  }
  char v14 = static Edge.Set.all.getter();
  EdgeInsets.init(_all:)();
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
  uint64_t v23 = &v8[*(int *)(v6 + 36)];
  *uint64_t v23 = v14;
  *((void *)v23 + 1) = v16;
  *((void *)v23 + 2) = v18;
  *((void *)v23 + 3) = v20;
  *((void *)v23 + 4) = v22;
  v23[40] = 0;
  outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
  char v24 = v38;
  uint64_t v25 = *((void *)&v38 + 1);
  char v26 = v39;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v28 = static Alignment.center.getter();
  uint64_t v30 = v29;
  uint64_t v31 = v36;
  outlined init with copy of ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>((uint64_t)v8, v36, &lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>>();
  uint64_t v33 = v31 + *(int *)(v32 + 36);
  *(unsigned char *)uint64_t v33 = v24;
  *(void *)(v33 + 8) = v25;
  *(unsigned char *)(v33 + 16) = v26;
  *(void *)(v33 + 24) = KeyPath;
  *(_WORD *)(v33 + 32) = 0;
  *(void *)(v33 + 40) = v28;
  *(void *)(v33 + 48) = v30;
  return _sypSgWOhTm_9((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, (uint64_t)type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, MEMORY[0x1E4F3FA80], (uint64_t (*)(void))type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>);
}

uint64_t closure #1 in BackButtonActionableBar.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v94 = a2;
  type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v91 = (uint64_t *)((char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>();
  uint64_t v89 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (_WORD *)((char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v90 = (uint64_t)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
  MEMORY[0x1F4188790](v10 - 8);
  long long v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v87 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v87 - v17;
  type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>(0);
  MEMORY[0x1F4188790](v19 - 8);
  long long v93 = (char *)&v87 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>();
  uint64_t v88 = v21;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (_WORD *)((char *)&v87 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>();
  MEMORY[0x1F4188790](v24 - 8);
  char v26 = (char *)&v87 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v92 = (uint64_t)&v87 - v28;
  type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>();
  uint64_t v30 = v29;
  MEMORY[0x1F4188790](v29);
  uint64_t v32 = (_WORD *)((char *)&v87 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>();
  MEMORY[0x1F4188790](v33 - 8);
  uint64_t v35 = (char *)&v87 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  if (*(unsigned char *)(a1 + 16))
  {
    uint64_t v66 = (char *)&v87 - v37;
    long long v67 = (_OWORD *)swift_allocObject();
    long long v68 = *(_OWORD *)(a1 + 80);
    v67[5] = *(_OWORD *)(a1 + 64);
    v67[6] = v68;
    long long v69 = *(_OWORD *)(a1 + 48);
    v67[3] = *(_OWORD *)(a1 + 32);
    v67[4] = v69;
    *(_OWORD *)((char *)v67 + 153) = *(_OWORD *)(a1 + 137);
    long long v70 = *(_OWORD *)(a1 + 128);
    long long v71 = *(_OWORD *)(a1 + 96);
    v67[8] = *(_OWORD *)(a1 + 112);
    v67[9] = v70;
    v67[7] = v71;
    long long v72 = *(_OWORD *)(a1 + 16);
    v67[1] = *(_OWORD *)a1;
    v67[2] = v72;
    *uint64_t v32 = 256;
    uint64_t v73 = (void *)((char *)v32 + *(int *)(v30 + 36));
    *uint64_t v73 = partial apply for closure #1 in closure #1 in BackButtonActionableBar.body.getter;
    v73[1] = v67;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    uint64_t v74 = (uint64_t)v32 + *(int *)(v30 + 40);
    outlined retain of BackButtonActionableBar(a1);
    swift_retain();
    closure #2 in closure #1 in BackButtonActionableBar.body.getter(a1, v74);
    swift_release();
    outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>((uint64_t)v32, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>);
    outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v32, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>);
    outlined init with take of ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>((uint64_t)v35, (uint64_t)v66, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    int v75 = (_OWORD *)swift_allocObject();
    long long v76 = *(_OWORD *)(a1 + 80);
    v75[5] = *(_OWORD *)(a1 + 64);
    v75[6] = v76;
    long long v77 = *(_OWORD *)(a1 + 48);
    v75[3] = *(_OWORD *)(a1 + 32);
    v75[4] = v77;
    *(_OWORD *)((char *)v75 + 153) = *(_OWORD *)(a1 + 137);
    long long v78 = *(_OWORD *)(a1 + 128);
    long long v79 = *(_OWORD *)(a1 + 96);
    v75[8] = *(_OWORD *)(a1 + 112);
    v75[9] = v78;
    v75[7] = v79;
    long long v80 = *(_OWORD *)(a1 + 16);
    v75[1] = *(_OWORD *)a1;
    v75[2] = v80;
    *uint64_t v23 = 256;
    uint64_t v81 = v88;
    uint64_t v82 = (uint64_t (**)())((char *)v23 + *(int *)(v88 + 36));
    *uint64_t v82 = partial apply for closure #3 in closure #1 in BackButtonActionableBar.body.getter;
    v82[1] = (uint64_t (*)())v75;
    swift_storeEnumTagMultiPayload();
    uint64_t v83 = (uint64_t)v23 + *(int *)(v81 + 40);
    outlined retain of BackButtonActionableBar(a1);
    swift_retain();
    closure #4 in closure #1 in BackButtonActionableBar.body.getter(a1, v83);
    swift_release();
    outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>((uint64_t)v23, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>);
    outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>);
    uint64_t v84 = v92;
    outlined init with take of ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>((uint64_t)v26, v92, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>);
    outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>((uint64_t)v66, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>(v84, (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>);
    uint64_t v85 = (uint64_t)v93;
    outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>((uint64_t)v35, (uint64_t)v93, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    type metadata accessor for (ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)();
    outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>((uint64_t)v26, v85 + *(int *)(v86 + 48), (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>);
    outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>);
    outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>(v85, v94, (uint64_t (*)(void))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(0, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)(v85, (uint64_t (*)(void))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>);
    outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)(v84, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>);
    return outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
  }
  else
  {
    uint64_t v38 = (uint64_t)v15;
    long long v93 = v12;
    uint64_t v39 = (uint64_t)v18;
    int v40 = *(unsigned char *)(a1 + 104) & 1;
    long long v41 = (_OWORD *)swift_allocObject();
    long long v42 = *(_OWORD *)(a1 + 80);
    _OWORD v41[5] = *(_OWORD *)(a1 + 64);
    void v41[6] = v42;
    long long v43 = *(_OWORD *)(a1 + 48);
    v41[3] = *(_OWORD *)(a1 + 32);
    v41[4] = v43;
    *(_OWORD *)((char *)v41 + 153) = *(_OWORD *)(a1 + 137);
    long long v44 = *(_OWORD *)(a1 + 128);
    long long v45 = *(_OWORD *)(a1 + 96);
    v41[8] = *(_OWORD *)(a1 + 112);
    v41[9] = v44;
    v41[7] = v45;
    long long v46 = *(_OWORD *)(a1 + 16);
    v41[1] = *(_OWORD *)a1;
    v41[2] = v46;
    *uint64_t v7 = 256;
    uint64_t v47 = v89;
    uint64_t v48 = (uint64_t (**)())((char *)v7 + *(int *)(v89 + 36));
    *uint64_t v48 = partial apply for closure #1 in closure #1 in OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.enqueueAction(isVisible:);
    v48[1] = (uint64_t (*)())v41;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    uint64_t v49 = (uint64_t)v7 + *(int *)(v47 + 40);
    outlined retain of BackButtonActionableBar(a1);
    swift_retain();
    closure #6 in closure #1 in BackButtonActionableBar.body.getter((long long *)a1, v49);
    swift_release();
    uint64_t v50 = v90;
    outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>((uint64_t)v7, v90, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>);
    outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>);
    double v51 = 0.0;
    if (v40)
    {
      char v52 = self;
      outlined retain of BackButtonActionableBar(a1);
      id v53 = objc_msgSend(v52, sel_mainScreen);
      objc_msgSend(v53, sel_bounds);
      double v55 = v54;

      outlined release of BackButtonActionableBar(a1);
      double v51 = v55 * 0.5;
    }
    BOOL v56 = v40 == 0;
    uint64_t v57 = static Alignment.center.getter();
    specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, v51, v40 ^ 1, 0.0, 1, v38, 0.0, 1, 0.0, 1, v57, v58);
    outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)(v50, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    outlined init with take of ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>(v38, v39);
    uint64_t v59 = MEMORY[0x1E4F3FE58];
    uint64_t v60 = (uint64_t)v93;
    outlined init with copy of ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>(v39, (uint64_t)v93, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    uint64_t v61 = (uint64_t)v91;
    *uint64_t v91 = 0;
    *(unsigned char *)(v61 + 8) = 0;
    *(unsigned char *)(v61 + 9) = v56;
    type metadata accessor for (Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)();
    uint64_t v63 = v62;
    outlined init with copy of ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>(v60, v61 + *(int *)(v62 + 48), &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    uint64_t v64 = v61 + *(int *)(v63 + 64);
    *(void *)uint64_t v64 = 0;
    *(unsigned char *)(v64 + 8) = 0;
    *(unsigned char *)(v64 + 9) = v56;
    _sypSgWOhTm_9(v60, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (uint64_t)type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, v59, (uint64_t (*)(void))type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>);
    outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>(v61, v94, (uint64_t (*)(void))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(0, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>.Storage, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)(v61, (uint64_t (*)(void))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>);
    return _sypSgWOhTm_9(v39, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (uint64_t)type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, v59, (uint64_t (*)(void))type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>);
  }
}

double closure #2 in closure #1 in BackButtonActionableBar.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *(unsigned char *)(a1 + 16);
  outlined retain of BackButtonActionableBar(a1);
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v6 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  if (v4)
  {
    uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v9 = v16;
    char v11 = v17;
    uint64_t v13 = v18;
    unint64_t v14 = 0xEA00000000006E77;
    uint64_t v15 = 0x6F642E776F727261;
  }
  else
  {
    uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v9 = v8;
    char v11 = v10;
    uint64_t v13 = v12;
    unint64_t v14 = 0xEE00647261776B63;
    uint64_t v15 = 0x61622E776F727261;
  }
  outlined release of BackButtonActionableBar(a1);
  type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v15;
  *(void *)(v19 + 24) = v14;
  *(_DWORD *)(v19 + 32) = 0;
  *(unsigned char *)(v19 + 36) = 1;
  *(_OWORD *)(v19 + 40) = xmmword_18834C6B0;
  *(void *)(v19 + 56) = v15;
  *(void *)(v19 + 64) = v14;
  *(_OWORD *)(v19 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v19 + 88) = 0;
  long long v20 = *(_OWORD *)(a1 + 128);
  long long v36 = *(_OWORD *)(a1 + 112);
  v37[0] = v20;
  *(_OWORD *)((char *)v37 + 9) = *(_OWORD *)(a1 + 137);
  outlined retain of BackButtonActionableBar(a1);
  uint64_t v21 = one-time initialization token for minimumComponentHeight;
  swift_bridgeObjectRetain();
  if (v21 != -1) {
    swift_once();
  }
  if (one-time initialization token for buttonVerticalPadding != -1) {
    swift_once();
  }
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v36, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  specialized ScaledClarityUIMetric.wrappedValue.getter();
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v36, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  specialized static BackButtonActionableBar.defaultBodyLeading.getter();
  outlined release of BackButtonActionableBar(a1);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a2 = v7;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v11 & 1;
  *(void *)(a2 + 24) = v13;
  *(void *)(a2 + 32) = v19;
  *(void *)(a2 + 40) = v23;
  *(unsigned char *)(a2 + 48) = v24;
  *(void *)(a2 + 56) = v25;
  *(unsigned char *)(a2 + 64) = v26;
  *(void *)(a2 + 72) = v27;
  *(unsigned char *)(a2 + 80) = v28;
  *(void *)(a2 + 88) = v29;
  *(unsigned char *)(a2 + 96) = v30;
  *(void *)(a2 + 104) = v31;
  *(unsigned char *)(a2 + 112) = v32;
  *(void *)(a2 + 120) = v33;
  *(unsigned char *)(a2 + 128) = v34;
  double result = *(double *)&v35;
  *(_OWORD *)(a2 + 136) = v35;
  return result;
}

uint64_t BackButtonActionableBar.backButtonText.getter()
{
  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t closure #3 in closure #1 in BackButtonActionableBar.body.getter(uint64_t a1)
{
  (*(void (**)(void))a1)(*(unsigned __int8 *)(a1 + 16));
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_6(0, &lazy cache variable for type metadata for State<MultimodalCustomKeyboardActionKeyData?>, &lazy cache variable for type metadata for MultimodalCustomKeyboardActionKeyData?, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKeyData, MEMORY[0x1E4F41580]);
  uint64_t result = State.wrappedValue.getter();
  if (v4)
  {
    swift_retain();
    uint64_t v2 = outlined consume of MultimodalCustomKeyboardActionKeyData?(v3, v4);
    v5(v2);
    return swift_release();
  }
  return result;
}

double closure #4 in closure #1 in BackButtonActionableBar.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  closure #1 in closure #4 in closure #1 in BackButtonActionableBar.body.getter((uint64_t)&v27);
  long long v4 = *(_OWORD *)(a1 + 56);
  long long v29 = *(_OWORD *)(a1 + 40);
  long long v30 = v4;
  long long v31 = *(_OWORD *)(a1 + 72);
  uint64_t v32 = *(void *)(a1 + 88);
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_6(0, &lazy cache variable for type metadata for State<MultimodalCustomKeyboardActionKeyData?>, &lazy cache variable for type metadata for MultimodalCustomKeyboardActionKeyData?, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKeyData, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  uint64_t v5 = v24;
  if (v24)
  {
    swift_bridgeObjectRetain();
    outlined consume of MultimodalCustomKeyboardActionKeyData?(v23, v24);
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v25;
    *(void *)(v5 + 24) = v26;
    *(_DWORD *)(v5 + 32) = 0;
    *(unsigned char *)(v5 + 36) = 1;
    *(_OWORD *)(v5 + 40) = xmmword_18834C6B0;
    *(void *)(v5 + 56) = v25;
    *(void *)(v5 + 64) = v26;
    *(_OWORD *)(v5 + 72) = xmmword_18834C6D0;
    *(unsigned char *)(v5 + 88) = 0;
    swift_bridgeObjectRetain();
  }
  long long v6 = v27;
  long long v7 = *(_OWORD *)v28;
  char v8 = v28[16];
  long long v9 = *(_OWORD *)(a1 + 128);
  long long v27 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)char v28 = v9;
  *(_OWORD *)&v28[9] = *(_OWORD *)(a1 + 137);
  outlined retain of BackButtonActionableBar(a1);
  if (one-time initialization token for minimumComponentHeight != -1) {
    swift_once();
  }
  if (one-time initialization token for buttonVerticalPadding != -1) {
    swift_once();
  }
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v27, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  specialized ScaledClarityUIMetric.wrappedValue.getter();
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v27, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  specialized static BackButtonActionableBar.defaultBodyLeading.getter();
  outlined release of BackButtonActionableBar(a1);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v10 = v29;
  char v11 = BYTE8(v29);
  uint64_t v12 = v30;
  char v13 = BYTE8(v30);
  uint64_t v14 = v31;
  char v15 = BYTE8(v31);
  uint64_t v16 = v32;
  char v17 = v33;
  uint64_t v18 = v34;
  char v19 = v35;
  uint64_t v20 = v36;
  char v22 = v37;
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v7;
  *(unsigned char *)(a2 + 32) = v8;
  *(void *)(a2 + 40) = v5;
  *(void *)(a2 + 48) = v10;
  *(unsigned char *)(a2 + 56) = v11;
  *(void *)(a2 + 64) = v12;
  *(unsigned char *)(a2 + 72) = v13;
  *(void *)(a2 + 80) = v14;
  *(unsigned char *)(a2 + 88) = v15;
  *(void *)(a2 + 96) = v16;
  *(unsigned char *)(a2 + 104) = v17;
  *(void *)(a2 + 112) = v18;
  *(unsigned char *)(a2 + 120) = v19;
  *(void *)(a2 + 128) = v20;
  *(unsigned char *)(a2 + 136) = v22;
  double result = v38[0];
  *(_OWORD *)(a2 + 144) = *(_OWORD *)v38;
  return result;
}

uint64_t closure #1 in closure #4 in closure #1 in BackButtonActionableBar.body.getter@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_6(0, &lazy cache variable for type metadata for State<MultimodalCustomKeyboardActionKeyData?>, &lazy cache variable for type metadata for MultimodalCustomKeyboardActionKeyData?, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKeyData, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  if (v9)
  {
    swift_bridgeObjectRetain();
    outlined consume of MultimodalCustomKeyboardActionKeyData?(v8, v9);
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t result = Text.init<A>(_:)();
  }
  else
  {
    LocalizedStringKey.init(stringLiteral:)();
    type metadata accessor for SwiftUIClass();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    id v7 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
    uint64_t result = Text.init(_:tableName:bundle:comment:)();
  }
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4 & 1;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v9 == 0;
  return result;
}

double closure #6 in closure #1 in BackButtonActionableBar.body.getter@<D0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v18 = a1[2];
  long long v19 = a1[3];
  long long v20 = a1[4];
  long long v21 = a1[5];
  long long v22 = a1[6];
  long long v16 = *a1;
  long long v17 = a1[1];
  uint64_t v4 = BackButtonActionableBar.backButtonText.getter();
  uint64_t v6 = v5;
  char v8 = v7;
  uint64_t v10 = v9;
  if (a1[1]) {
    uint64_t v11 = 0x6F642E776F727261;
  }
  else {
    uint64_t v11 = 0x61622E776F727261;
  }
  if (a1[1]) {
    unint64_t v12 = 0xEA00000000006E77;
  }
  else {
    unint64_t v12 = 0xEE00647261776B63;
  }
  type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  *(_DWORD *)(v13 + 32) = 0;
  *(unsigned char *)(v13 + 36) = 1;
  *(_OWORD *)(v13 + 40) = xmmword_18834C6B0;
  *(void *)(v13 + 56) = v11;
  *(void *)(v13 + 64) = v12;
  *(_OWORD *)(v13 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v13 + 88) = 0;
  long long v14 = a1[8];
  long long v23 = a1[7];
  v24[0] = v14;
  *(_OWORD *)((char *)v24 + 9) = *(long long *)((char *)a1 + 137);
  swift_bridgeObjectRetain();
  outlined retain of BackButtonActionableBar((uint64_t)a1);
  if (one-time initialization token for minimumComponentHeight != -1) {
    swift_once();
  }
  if (one-time initialization token for buttonVerticalPadding != -1) {
    swift_once();
  }
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v23, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  specialized ScaledClarityUIMetric.wrappedValue.getter();
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v23, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  specialized static BackButtonActionableBar.defaultBodyLeading.getter();
  outlined release of BackButtonActionableBar((uint64_t)a1);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v13;
  *(void *)(a2 + 40) = v16;
  *(unsigned char *)(a2 + 48) = BYTE8(v16);
  *(void *)(a2 + 56) = v17;
  *(unsigned char *)(a2 + 64) = BYTE8(v17);
  *(void *)(a2 + 72) = v18;
  *(unsigned char *)(a2 + 80) = BYTE8(v18);
  *(void *)(a2 + 88) = v19;
  *(unsigned char *)(a2 + 96) = BYTE8(v19);
  *(void *)(a2 + 104) = v20;
  *(unsigned char *)(a2 + 112) = BYTE8(v20);
  *(void *)(a2 + 120) = v21;
  *(unsigned char *)(a2 + 128) = BYTE8(v21);
  double result = *(double *)&v22;
  *(_OWORD *)(a2 + 136) = v22;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BackButtonActionableBar.Background()
{
  type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(0, &lazy cache variable for type metadata for _ClipEffect<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1ED43DB60, MEMORY[0x1E4F3F580]);
  lazy protocol witness table accessor for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>();
  uint64_t v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>> and conformance <> ModifiedContent<A, B>();
    BOOL v2 = v0 != static ModifiedContent<>._viewListCount(inputs:)();
    if ((v3 | v2)) {
      return 0;
    }
  }
  return v0;
}

uint64_t protocol witness for View.body.getter in conformance BackButtonActionableBar.Background@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *((void *)v1 + 3);
  uint64_t v4 = v1[32];
  int v5 = v1[33];
  int v16 = *v1;
  if (v16 == 1)
  {
    uint64_t KeyPath = swift_getKeyPath();
    outlined copy of Environment<CGFloat?>.Content(v3, v4, v5);
    uint64_t v7 = specialized Environment.wrappedValue.getter(v3, v4 | (v5 << 8));
    uint64_t v9 = v8 & 1;
    uint64_t result = outlined consume of Environment<CGFloat?>.Content(v3, v4, v5);
    uint64_t v11 = 0;
    char v12 = 0;
    uint64_t v13 = v9 | 0x10000;
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v14 = v1[16];
    uint64_t v11 = *((void *)v1 + 1);
    outlined copy of Environment<CGFloat?>.Content(v3, v4, v5);
    uint64_t v13 = specialized Environment.wrappedValue.getter(v3, v4 | (v5 << 8));
    char v12 = v15 & 1;
    uint64_t result = outlined consume of Environment<CGFloat?>.Content(v3, v4, v5);
    uint64_t KeyPath = 0;
    uint64_t v7 = 0;
  }
  *(void *)a1 = KeyPath;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = v14;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 41) = v16 ^ 1;
  return result;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance BackButtonActionableBar.KeyboardBackdropView()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  outlined copy of Environment<Bool>.Content(v1, v2);
  specialized Environment.wrappedValue.getter(v1, v2, &v5);
  outlined consume of Environment<Bool>.Content(v1, v2);
  if (v5) {
    uint64_t v3 = 2030;
  }
  else {
    uint64_t v3 = 3901;
  }
  id result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB18C8]), sel_initWithFrame_style_, v3, 0.0, 0.0, 0.0, 0.0);
  if (!result) {
    __break(1u);
  }
  return result;
}

id protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance BackButtonActionableBar.KeyboardBackdropView(void *a1)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  outlined copy of Environment<Bool>.Content(v3, v4);
  specialized Environment.wrappedValue.getter(v3, v4, &v7);
  outlined consume of Environment<Bool>.Content(v3, v4);
  if (v7) {
    uint64_t v5 = 2030;
  }
  else {
    uint64_t v5 = 3901;
  }

  return objc_msgSend(a1, sel_transitionToStyle_, v5);
}

double BackButtonActionableBar.BarShape.path(in:)@<D0>(char a1@<W0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>)
{
  if ((a1 & 1) == 0)
  {
    Path.init(_:)();
    goto LABEL_16;
  }
  if (a3) {
    goto LABEL_6;
  }
  double v15 = a2;
  if (one-time initialization token for minimumDisplayCornerRadius != -1) {
    swift_once();
  }
  double v16 = a2;
  if (*(double *)&static ClarityUIMetrics.minimumDisplayCornerRadius > a2)
  {
LABEL_6:
    if (one-time initialization token for fallbackDisplayCornerRadius == -1)
    {
      double v15 = *(double *)&static ClarityUIMetrics.fallbackDisplayCornerRadius;
      if ((a3 & 1) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      swift_once();
      double v15 = *(double *)&static ClarityUIMetrics.fallbackDisplayCornerRadius;
      if ((a3 & 1) == 0)
      {
LABEL_8:
        double v16 = a2;
        if (one-time initialization token for minimumDisplayCornerRadius != -1) {
          swift_once();
        }
        goto LABEL_10;
      }
    }
LABEL_13:
    double v16 = *(double *)&static ClarityUIMetrics.fallbackDisplayCornerRadius;
    goto LABEL_14;
  }
LABEL_10:
  if (*(double *)&static ClarityUIMetrics.minimumDisplayCornerRadius > v16)
  {
    if (one-time initialization token for fallbackDisplayCornerRadius != -1) {
      swift_once();
    }
    goto LABEL_13;
  }
LABEL_14:
  id v17 = objc_msgSend(self, sel_bezierPathWithRoundedRect_byRoundingCorners_cornerRadii_, 3, a5, a6, a7, a8, v15, v16);
  id v18 = objc_msgSend(v17, sel_CGPath);

  Path.init(_:)();
LABEL_16:
  double result = *(double *)&v20;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v21;
  *(unsigned char *)(a4 + 32) = v22;
  return result;
}

double protocol witness for Shape.path(in:) in conformance BackButtonActionableBar.BarShape@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  BackButtonActionableBar.BarShape.path(in:)(*(unsigned char *)v5, *(double *)(v5 + 8), *(unsigned char *)(v5 + 16), (uint64_t)v9, a2, a3, a4, a5);
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

void protocol witness for View.body.getter in conformance BackButtonActionableBar.BarShape(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)a1 = *(unsigned char *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 17) = 256;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BackButtonActionableBar()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t MultimodalNavigationBackButtonLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for backIconToTitleSpacing != -1) {
    swift_once();
  }
  uint64_t v2 = static ClarityUIMetrics.backIconToTitleSpacing;
  uint64_t v3 = static VerticalAlignment.center.getter();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = result;
  *(void *)(a1 + 32) = 3;
  *(unsigned char *)(a1 + 40) = 0;
  return result;
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance MultimodalNavigationBackButtonLabelStyle@<X0>(uint64_t a1@<X8>)
{
  return MultimodalNavigationBackButtonLabelStyle.makeBody(configuration:)(a1);
}

uint64_t MultimodalNavigationKeyboardLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = static HorizontalAlignment.center.getter();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = result;
  *(void *)(a1 + 32) = 3;
  *(unsigned char *)(a1 + 40) = 0;
  return result;
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance MultimodalNavigationKeyboardLabelStyle@<X0>(uint64_t a1@<X8>)
{
  return MultimodalNavigationKeyboardLabelStyle.makeBody(configuration:)(a1);
}

uint64_t BackButtonStyle.makeBody(configuration:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = a1[1];
  char v5 = a1[2];
  id v6 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  uint64_t v12[4] = closure #1 in static Color.clarityUIButtonBackground.getter;
  v12[5] = 0;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 1107296256;
  void v12[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
  v12[3] = &block_descriptor_95_1;
  char v7 = _Block_copy(v12);
  id v8 = objc_msgSend(v6, sel_initWithDynamicProvider_, v7);
  _Block_release(v7);
  swift_release();
  v12[0] = v8;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  lazy protocol witness table accessor for type UIColor and conformance UIColor();
  Color.init<A>(provider:)();
  uint64_t v9 = Color.opacity(_:)();
  swift_release();
  uint64_t v10 = static Color.primary.getter();
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)a2 = v3;
  *(unsigned char *)(a2 + 1) = v4;
  *(unsigned char *)(a2 + 2) = v5;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = 1;
  *(_WORD *)(a2 + 32) = 257;
  *(void *)(a2 + 40) = result;
  *(_WORD *)(a2 + 48) = 0;
  return result;
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance PrimaryActionButtonStyle@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *a1;
  char v4 = a1[1];
  char v5 = a1[2];
  uint64_t v6 = static Color.blue.getter();
  uint64_t v7 = static Color.white.getter();
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)a2 = v3;
  *(unsigned char *)(a2 + 1) = v4;
  *(unsigned char *)(a2 + 2) = v5;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = 1;
  *(_WORD *)(a2 + 32) = 257;
  *(void *)(a2 + 40) = result;
  *(_WORD *)(a2 + 48) = 0;
  return result;
}

unint64_t closure #1 in static Material.multimodalNavigationChrome.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t BarBackground.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v61 = a1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for _ShadowView();
  uint64_t v75 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v74 = (uint64_t)&v56 - v5;
  uint64_t v76 = v6;
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v78 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v77 = (char *)&v56 - v8;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>, MEMORY[0x1E4F3FBA0]);
  uint64_t v60 = v9;
  uint64_t v56 = v3;
  uint64_t v63 = type metadata accessor for _ClipEffect();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v70 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v59 = (char *)&v56 - v11;
  long long v99 = &protocol witness table for _ShadowView<A>;
  uint64_t v100 = MEMORY[0x1E4F3FA68];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v79 = v7;
  uint64_t v62 = WitnessTable;
  uint64_t v13 = type metadata accessor for _BackgroundModifier();
  uint64_t v71 = v10;
  uint64_t v64 = v13;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v68 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  long long v65 = (char *)&v56 - v15;
  uint64_t v69 = v16;
  uint64_t v73 = type metadata accessor for ModifiedContent();
  uint64_t v72 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  uint64_t v66 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  long long v67 = (char *)&v56 - v19;
  uint64_t v58 = static Alignment.center.getter();
  uint64_t v57 = v20;
  closure #1 in BarBackground.body.getter((unsigned char *)v2, (uint64_t)&v87);
  uint64_t v21 = v87;
  char v22 = v88;
  char v23 = BYTE1(v88);
  uint64_t v24 = v89;
  uint64_t v25 = v90;
  if (*(unsigned char *)(v2 + 16)) {
    double v26 = 1.0;
  }
  else {
    double v26 = *(double *)(v2 + 8) * 0.8;
  }
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v28 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  static Material.coreMaterial(bundle:provider:)();

  uint64_t v29 = v87;
  int v30 = HIDWORD(v88);
  if (*(unsigned char *)(v2 + 16)) {
    double v31 = 0.0;
  }
  else {
    double v31 = *(double *)(v2 + 8);
  }
  unsigned __int8 v33 = v88;
  char v34 = static Edge.Set.all.getter();
  uint64_t v87 = v58;
  uint64_t v88 = v57;
  uint64_t v89 = v21;
  LOBYTE(v90) = v22;
  BYTE1(v90) = v23;
  uint64_t v91 = v24;
  uint64_t v92 = v25;
  uint64_t v35 = v56;
  uint64_t v36 = v59;
  double v93 = v26;
  uint64_t v94 = v29;
  unsigned __int8 v95 = v33;
  int v96 = v30;
  float v32 = v31;
  float v97 = v32;
  char v98 = v34;
  unint64_t v37 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>();
  View.clipShape<A>(_:style:)();
  swift_release();
  outlined consume of Material.ID(v29, v33);
  if (one-time initialization token for clarityUIBarShadowColor != -1) {
    swift_once();
  }
  uint64_t v38 = static Color.clarityUIBarShadowColor;
  if (one-time initialization token for barShadowRadius != -1) {
    swift_once();
  }
  double v39 = *(double *)&static ClarityUIMetrics.barShadowRadius;
  if (one-time initialization token for barShadowOffset != -1) {
    swift_once();
  }
  uint64_t v40 = v74;
  Shape.fillShadow(color:radius:x:y:)(v38, v35, v74, v39, *(double *)&static ClarityUIMetrics.barShadowOffset, *((double *)&static ClarityUIMetrics.barShadowOffset + 1));
  long long v41 = v77;
  uint64_t v42 = v76;
  View.opacity(_:)();
  (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v40, v42);
  static Alignment.center.getter();
  uint64_t v43 = swift_getWitnessTable();
  unint64_t v85 = v37;
  uint64_t v86 = v43;
  uint64_t v44 = v71;
  uint64_t v45 = swift_getWitnessTable();
  long long v46 = v65;
  uint64_t v47 = v79;
  View.background<A>(_:alignment:)();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v41, v47);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v36, v44);
  static Edge.Set.all.getter();
  uint64_t v48 = swift_getWitnessTable();
  uint64_t v83 = v45;
  uint64_t v84 = v48;
  uint64_t v49 = v69;
  uint64_t v50 = swift_getWitnessTable();
  double v51 = v66;
  View.edgesIgnoringSafeArea(_:)();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v46, v49);
  uint64_t v81 = v50;
  uint64_t v82 = MEMORY[0x1E4F40D10];
  uint64_t v52 = v73;
  swift_getWitnessTable();
  id v53 = v67;
  static ViewBuilder.buildExpression<A>(_:)(v51);
  double v54 = *(void (**)(char *, uint64_t))(v72 + 8);
  v54(v51, v52);
  static ViewBuilder.buildExpression<A>(_:)(v53);
  return ((uint64_t (*)(char *, uint64_t))v54)(v53, v52);
}

uint64_t closure #1 in BarBackground.body.getter@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  if (one-time initialization token for clarityUIContentBackground != -1) {
    swift_once();
  }
  BOOL v4 = *a1 == 0;
  uint64_t v5 = 2;
  if (*a1) {
    uint64_t v5 = 256;
  }
  uint64_t v6 = 0x3FC3333333333333;
  *(void *)a2 = static Color.clarityUIContentBackground;
  if (v4) {
    uint64_t v6 = 0;
  }
  *(_WORD *)(a2 + 8) = 256;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;

  return swift_retain();
}

uint64_t thunk for @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ()(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void thunk for @escaping @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ()(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t key path getter for EnvironmentValues.lineLimit : EnvironmentValues, serialized@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.lineLimit : EnvironmentValues, serialized()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t specialized static MultimodalNavigationChromeScrollInfo.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float64x2_t v10 = *(float64x2_t *)(a1 + 80);
  float64x2_t v8 = *(float64x2_t *)(a2 + 80);
  float64x2_t v9 = *(float64x2_t *)(a1 + 64);
  float64x2_t v7 = *(float64x2_t *)(a2 + 64);
  BOOL v4 = CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2);
  char v5 = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 32), *(float64x2_t *)(a2 + 32)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48)))), 0xFuLL))) & 1) != 0&& v4)
  {
    char v5 = vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v9, v7), (int32x4_t)vceqq_f64(v10, v8))), 0xFuLL)));
  }
  return v5 & 1;
}

uint64_t sub_187F903A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.lineLimit.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_187F903D8()
{
  return EnvironmentValues.lineLimit.setter();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in MultimodalNavigationTitleLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in MultimodalNavigationBackButtonLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in MultimodalNavigationKeyboardLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for MultimodalNavigationChromeScrollInfo()
{
  return &type metadata for MultimodalNavigationChromeScrollInfo;
}

uint64_t *assignWithCopy for MultimodalNavigationTitleLabelStyle(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for MultimodalNavigationTitleLabelStyle(a1, a2, a3, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
}

ValueMetadata *type metadata accessor for MultimodalNavigationTitleLabelStyle()
{
  return &type metadata for MultimodalNavigationTitleLabelStyle;
}

uint64_t destroy for MultimodalCustomKeyboardActionKeyData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for MultimodalCustomKeyboardActionKeyData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void *assignWithCopy for MultimodalCustomKeyboardActionKeyData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[5];
  a1[4] = a2[4];
  a1[5] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MultimodalCustomKeyboardActionKeyData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for MultimodalCustomKeyboardActionKeyData()
{
  return &type metadata for MultimodalCustomKeyboardActionKeyData;
}

ValueMetadata *type metadata accessor for MultimodalCustomKeyboardActionKey()
{
  return &type metadata for MultimodalCustomKeyboardActionKey;
}

ValueMetadata *type metadata accessor for MultimodalChromeVisiblePreferenceKey()
{
  return &type metadata for MultimodalChromeVisiblePreferenceKey;
}

ValueMetadata *type metadata accessor for MultimodalNavigationBackButtonLabelStyle()
{
  return &type metadata for MultimodalNavigationBackButtonLabelStyle;
}

ValueMetadata *type metadata accessor for MultimodalNavigationKeyboardLabelStyle()
{
  return &type metadata for MultimodalNavigationKeyboardLabelStyle;
}

uint64_t sub_187F9068C()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier);
  }
  return result;
}

uint64_t sub_187F90744()
{
  return swift_getWitnessTable();
}

uint64_t sub_187F907A8()
{
  return lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>, type metadata accessor for HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>(uint64_t a1)
{
}

void type metadata accessor for (ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>))
  {
    type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>);
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>));
    }
  }
}

void type metadata accessor for MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>()
{
  if (!lazy cache variable for type metadata for MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for MultimodalNavigationStackViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, MEMORY[0x1E4F3F6A0], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187F90A68()
{
  return lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>> and conformance HStack<A>, type metadata accessor for HStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>>);
}

void type metadata accessor for HStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>>(uint64_t a1)
{
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(a4, a5);
    unint64_t v8 = type metadata accessor for HStack();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)()
{
  if (!lazy cache variable for type metadata for (LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>))
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>));
    }
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_6(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>);
    }
  }
}

uint64_t sub_187F90D0C()
{
  return lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>>);
}

void type metadata accessor for VStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>>)
  {
    type metadata accessor for TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>);
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(LabelStyleConfiguration.Icon, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Int?>>)>>);
    }
  }
}

uint64_t destroy for MultimodalNavigationChromeModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(a1 + 80), *(unsigned char *)(a1 + 88));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 96), *(unsigned char *)(a1 + 104));
  swift_release();
  if (*(void *)(a1 + 136))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for MultimodalNavigationChromeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void **)(a2 + 80);
  char v8 = *(unsigned char *)(a2 + 88);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<UISceneSession?>.Content(v7, v8);
  *(void *)(a1 + 80) = v7;
  *(unsigned char *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 96);
  char v10 = *(unsigned char *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v9, v10);
  *(void *)(a1 + 96) = v9;
  *(unsigned char *)(a1 + 104) = v10;
  uint64_t v11 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v11;
  uint64_t v12 = *(void *)(a2 + 136);
  swift_retain();
  if (v12)
  {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = v12;
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    uint64_t v13 = *(void *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(void *)(a1 + 168) = v13;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v14;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  }
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MultimodalNavigationChromeModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void **)(a2 + 80);
  char v7 = *(unsigned char *)(a2 + 88);
  outlined copy of Environment<UISceneSession?>.Content(v6, v7);
  char v8 = *(void **)(a1 + 80);
  char v9 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 88) = v7;
  outlined consume of Environment<UISceneSession?>.Content(v8, v9);
  uint64_t v10 = *(void *)(a2 + 96);
  char v11 = *(unsigned char *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v10, v11);
  uint64_t v12 = *(void *)(a1 + 96);
  char v13 = *(unsigned char *)(a1 + 104);
  *(void *)(a1 + 96) = v10;
  *(unsigned char *)(a1 + 104) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  long long v14 = (_OWORD *)(a1 + 128);
  uint64_t v15 = (_OWORD *)(a2 + 128);
  uint64_t v16 = *(void *)(a2 + 136);
  if (*(void *)(a1 + 136))
  {
    if (v16)
    {
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = *(void *)(a2 + 160);
      *(void *)(a1 + 168) = v17;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of MultimodalCustomKeyboardActionKeyData(a1 + 128);
      long long v20 = *(_OWORD *)(a2 + 144);
      long long v19 = *(_OWORD *)(a2 + 160);
      _OWORD *v14 = *v15;
      *(_OWORD *)(a1 + 144) = v20;
      *(_OWORD *)(a1 + 160) = v19;
    }
  }
  else if (v16)
  {
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    uint64_t v18 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v21 = *v15;
    long long v22 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v22;
    _OWORD *v14 = v21;
  }
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of MultimodalCustomKeyboardActionKeyData(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy184_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[10];
  *(void *)(a1 + 176) = *((void *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for MultimodalNavigationChromeModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 88);
  long long v5 = *(void **)(a1 + 80);
  char v6 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = v4;
  outlined consume of Environment<UISceneSession?>.Content(v5, v6);
  char v7 = *(unsigned char *)(a2 + 104);
  uint64_t v8 = *(void *)(a1 + 96);
  char v9 = *(unsigned char *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_release();
  if (!*(void *)(a1 + 136)) {
    goto LABEL_5;
  }
  uint64_t v10 = *(void *)(a2 + 136);
  if (!v10)
  {
    outlined destroy of MultimodalCustomKeyboardActionKeyData(a1 + 128);
LABEL_5:
    long long v12 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v12;
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    goto LABEL_6;
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v11;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  swift_release();
LABEL_6:
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MultimodalNavigationChromeModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 184)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MultimodalNavigationChromeModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 184) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 184) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MultimodalNavigationChromeModifier()
{
  return &type metadata for MultimodalNavigationChromeModifier;
}

uint64_t getEnumTagSinglePayload for ScrollsUnderMultimodalNavigationChromeModifier(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 97)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ScrollsUnderMultimodalNavigationChromeModifier(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 97) = v3;
  return result;
}

void *type metadata accessor for ScrollsUnderMultimodalNavigationChromeModifier()
{
  return &unk_1ED465B28;
}

_UNKNOWN **base witness table accessor for ViewModifier in ScrollsUnderMultimodalNavigationChromeModifier()
{
  return &protocol witness table for ScrollsUnderMultimodalNavigationChromeModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in MultimodalNavigationChromeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in MultimodalNavigationChromeModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in MultimodalNavigationChromeModifier.body(content:)(a1, v2 + 16, a2);
}

uint64_t outlined retain of MultimodalNavigationChromeModifier(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  char v3 = *(unsigned char *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  char v5 = *(unsigned char *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 136);
  uint64_t v8 = *(void *)(a1 + 128);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<UISceneSession?>.Content(v2, v3);
  outlined copy of Environment<Bool>.Content(v4, v5);
  swift_retain();
  outlined copy of MultimodalCustomKeyboardActionKeyData?(v8, v7);
  swift_retain();
  return a1;
}

uint64_t outlined copy of MultimodalCustomKeyboardActionKeyData?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

void type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>()
{
  if (!lazy cache variable for type metadata for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>)
  {
    type metadata accessor for NSNotificationCenter.Publisher();
    type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, MEMORY[0x1E4F27FC8]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for SubscriptionView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>);
    }
  }
}

void type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>)
  {
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<MultimodalNavigationChromeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier, (uint64_t)&type metadata for MultimodalNavigationChromeModifier, MEMORY[0x1E4F408E0]);
    type metadata accessor for _InsetViewModifier<BackButtonActionableBar?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>);
    }
  }
}

void type metadata accessor for _InsetViewModifier<BackButtonActionableBar?>()
{
  if (!lazy cache variable for type metadata for _InsetViewModifier<BackButtonActionableBar?>)
  {
    type metadata accessor for _ContiguousArrayStorage<Bool>(255, &lazy cache variable for type metadata for BackButtonActionableBar?, (uint64_t)&unk_1ED43DCE8, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type BackButtonActionableBar? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for _InsetViewModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _InsetViewModifier<BackButtonActionableBar?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BackButtonActionableBar? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type BackButtonActionableBar? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type BackButtonActionableBar? and conformance <A> A?)
  {
    type metadata accessor for _ContiguousArrayStorage<Bool>(255, &lazy cache variable for type metadata for BackButtonActionableBar?, (uint64_t)&unk_1ED43DCE8, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type BackButtonActionableBar and conformance BackButtonActionableBar();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonActionableBar? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BackButtonActionableBar and conformance BackButtonActionableBar()
{
  unint64_t result = lazy protocol witness table cache variable for type BackButtonActionableBar and conformance BackButtonActionableBar;
  if (!lazy protocol witness table cache variable for type BackButtonActionableBar and conformance BackButtonActionableBar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonActionableBar and conformance BackButtonActionableBar);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<MultimodalNavigationChromeModifier> and conformance _ViewModifier_Content<A>();
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _InsetViewModifier<BackButtonActionableBar?> and conformance _InsetViewModifier<A>, (void (*)(uint64_t))type metadata accessor for _InsetViewModifier<BackButtonActionableBar?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<MultimodalNavigationChromeModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<MultimodalNavigationChromeModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<MultimodalNavigationChromeModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<MultimodalNavigationChromeModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier, (uint64_t)&type metadata for MultimodalNavigationChromeModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<MultimodalNavigationChromeModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>()
{
  if (!lazy cache variable for type metadata for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>)
  {
    type metadata accessor for NSNotificationCenter.Publisher();
    type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>();
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, MEMORY[0x1E4F27FC8]);
    unint64_t v0 = type metadata accessor for SubscriptionView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4(255);
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>)
  {
    lazy protocol witness table accessor for type MultimodalCustomKeyboardActionKeyData? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for _PreferenceActionModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MultimodalCustomKeyboardActionKeyData? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalCustomKeyboardActionKeyData? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type MultimodalCustomKeyboardActionKeyData? and conformance <A> A?)
  {
    type metadata accessor for _ContiguousArrayStorage<Bool>(255, &lazy cache variable for type metadata for MultimodalCustomKeyboardActionKeyData?, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKeyData, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type MultimodalCustomKeyboardActionKeyData and conformance MultimodalCustomKeyboardActionKeyData();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalCustomKeyboardActionKeyData? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalCustomKeyboardActionKeyData and conformance MultimodalCustomKeyboardActionKeyData()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalCustomKeyboardActionKeyData and conformance MultimodalCustomKeyboardActionKeyData;
  if (!lazy protocol witness table cache variable for type MultimodalCustomKeyboardActionKeyData and conformance MultimodalCustomKeyboardActionKeyData)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalCustomKeyboardActionKeyData and conformance MultimodalCustomKeyboardActionKeyData);
  }
  return result;
}

void type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceActionModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>);
    }
  }
}

void partial apply for closure #2 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(uint64_t a1)
{
}

void partial apply for closure #3 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(uint64_t a1)
{
}

uint64_t *partial apply for closure #4 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(uint64_t *a1)
{
  return closure #4 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(a1, v1 + 16);
}

uint64_t objectdestroy_21Tm()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(v0 + 96), *(unsigned char *)(v0 + 104));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 112), *(unsigned char *)(v0 + 120));
  swift_release();
  if (*(void *)(v0 + 152))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #5 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(char *a1)
{
  closure #5 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(a1, v1 + 16);
}

uint64_t outlined release of MultimodalNavigationChromeModifier(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  char v3 = *(unsigned char *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 96);
  char v5 = *(unsigned char *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 136);
  uint64_t v8 = *(void *)(a1 + 128);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(v2, v3);
  outlined consume of Environment<Bool>.Content(v4, v5);
  swift_release();
  outlined consume of MultimodalCustomKeyboardActionKeyData?(v8, v7);
  swift_release();
  return a1;
}

uint64_t outlined consume of MultimodalCustomKeyboardActionKeyData?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in closure #5 in closure #1 in MultimodalNavigationChromeModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned __int8 *)(v2 + 16);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 32))(v4, ObjectType, a2);
}

uint64_t sub_187F92434()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in FBSScene.updateClarityUIClientSettings(_:)(void *a1)
{
  closure #1 in FBSScene.updateClarityUIClientSettings(_:)(a1, *(void (**)(void *, uint64_t))(v1 + 16));
}

uint64_t sub_187F9244C()
{
  return swift_deallocObject();
}

void type metadata accessor for AnyLocation<MultimodalCustomKeyboardActionKeyData?>?()
{
  if (!lazy cache variable for type metadata for AnyLocation<MultimodalCustomKeyboardActionKeyData?>?)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_6(255, &lazy cache variable for type metadata for AnyLocation<MultimodalCustomKeyboardActionKeyData?>, &lazy cache variable for type metadata for MultimodalCustomKeyboardActionKeyData?, (uint64_t)&type metadata for MultimodalCustomKeyboardActionKeyData, MEMORY[0x1E4F3F458]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyLocation<MultimodalCustomKeyboardActionKeyData?>?);
    }
  }
}

uint64_t *outlined retain of State<MultimodalCustomKeyboardActionKeyData?>(uint64_t *a1)
{
  return a1;
}

uint64_t *outlined release of State<MultimodalCustomKeyboardActionKeyData?>(uint64_t *a1)
{
  return a1;
}

double _s7SwiftUI23BackButtonActionableBar33_94927F8A97ECE008E6A618C158753C28LLVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 137) = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t outlined init with take of BackButtonActionableBar?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for _ContiguousArrayStorage<Bool>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

double specialized static BackButtonActionableBar.defaultBodyLeading.getter()
{
  if ((byte_1E90314E8 & 1) == 0) {
    return *(double *)&static BackButtonActionableBar.cachedDefaultBodyLeading;
  }
  unint64_t v0 = (void *)Font.TextStyle.ctTextStyle.getter();
  uint64_t v1 = (void *)DynamicTypeSize.ctTextSize.getter();
  CTFontDescriptorGetTextStyleSize();

  double result = 0.0;
  static BackButtonActionableBar.cachedDefaultBodyLeading = 0;
  byte_1E90314E8 = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalScrollGeometryTransformProvider and conformance MultimodalScrollGeometryTransformProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalScrollGeometryTransformProvider and conformance MultimodalScrollGeometryTransformProvider;
  if (!lazy protocol witness table cache variable for type MultimodalScrollGeometryTransformProvider and conformance MultimodalScrollGeometryTransformProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalScrollGeometryTransformProvider and conformance MultimodalScrollGeometryTransformProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalScrollGeometryState and conformance MultimodalScrollGeometryState()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalScrollGeometryState and conformance MultimodalScrollGeometryState;
  if (!lazy protocol witness table cache variable for type MultimodalScrollGeometryState and conformance MultimodalScrollGeometryState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalScrollGeometryState and conformance MultimodalScrollGeometryState);
  }
  return result;
}

double UIEdgeInsetsInsetRect(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 + a6;
}

uint64_t sub_187F92798()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));

  return swift_deallocObject();
}

double partial apply for closure #1 in closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in MultimodalNavigationTitleLabelStyle.makeBody(configuration:)(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

unint64_t lazy protocol witness table accessor for type EnvironmentValues.ClarityUIIconWidthKey and conformance EnvironmentValues.ClarityUIIconWidthKey()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentValues.ClarityUIIconWidthKey and conformance EnvironmentValues.ClarityUIIconWidthKey;
  if (!lazy protocol witness table cache variable for type EnvironmentValues.ClarityUIIconWidthKey and conformance EnvironmentValues.ClarityUIIconWidthKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentValues.ClarityUIIconWidthKey and conformance EnvironmentValues.ClarityUIIconWidthKey);
  }
  return result;
}

uint64_t sub_187F92840(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.navigationBarHost.setter((uint64_t)&v2);
}

void *type metadata accessor for EnvironmentValues.ClarityUIIconWidthKey()
{
  return &unk_1ED421D20;
}

uint64_t getEnumTagSinglePayload for MultimodalScrollGeometryState(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MultimodalScrollGeometryState(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 89) = v3;
  return result;
}

void *type metadata accessor for MultimodalScrollGeometryState()
{
  return &unk_1ED455FF0;
}

void *type metadata accessor for MultimodalScrollGeometryTransformProvider()
{
  return &unk_1ED464E58;
}

uint64_t destroy for BackButtonActionableBar(uint64_t a1)
{
  swift_release();
  if (*(void *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
  uint64_t v2 = *(void *)(a1 + 128);
  char v3 = *(unsigned char *)(a1 + 136);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t initializeWithCopy for BackButtonActionableBar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  swift_retain();
  if (v5)
  {
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = v5;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    uint64_t v6 = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v7;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  }
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v9 = *(void *)(a2 + 112);
  char v10 = *(unsigned char *)(a2 + 120);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v9, v10);
  *(void *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 120) = v10;
  uint64_t v11 = *(void *)(a2 + 128);
  char v12 = *(unsigned char *)(a2 + 136);
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(void *)(a1 + 128) = v11;
  *(unsigned char *)(a1 + 136) = v12;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

uint64_t assignWithCopy for BackButtonActionableBar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = (_OWORD *)(a1 + 40);
  long long v7 = (_OWORD *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v8)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v9;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of MultimodalCustomKeyboardActionKeyData(a1 + 40);
      long long v12 = *(_OWORD *)(a2 + 56);
      long long v11 = *(_OWORD *)(a2 + 72);
      *uint64_t v6 = *v7;
      *(_OWORD *)(a1 + 56) = v12;
      *(_OWORD *)(a1 + 72) = v11;
    }
  }
  else if (v8)
  {
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    uint64_t v10 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v13 = *v7;
    long long v14 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v14;
    *uint64_t v6 = v13;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v15 = *(void *)(a2 + 112);
  char v16 = *(unsigned char *)(a2 + 120);
  outlined copy of Environment<Bool>.Content(v15, v16);
  uint64_t v17 = *(void *)(a1 + 112);
  char v18 = *(unsigned char *)(a1 + 120);
  *(void *)(a1 + 112) = v15;
  *(unsigned char *)(a1 + 120) = v16;
  outlined consume of Environment<Bool>.Content(v17, v18);
  uint64_t v19 = *(void *)(a2 + 128);
  char v20 = *(unsigned char *)(a2 + 136);
  outlined copy of Environment<Bool>.Content(v19, v20);
  uint64_t v21 = *(void *)(a1 + 128);
  char v22 = *(unsigned char *)(a1 + 136);
  *(void *)(a1 + 128) = v19;
  *(unsigned char *)(a1 + 136) = v20;
  outlined consume of Environment<Bool>.Content(v21, v22);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

uint64_t assignWithTake for BackButtonActionableBar(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  if (!*(void *)(a1 + 48)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 48);
  if (!v4)
  {
    outlined destroy of MultimodalCustomKeyboardActionKeyData(a1 + 40);
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v6;
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    goto LABEL_6;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
LABEL_6:
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  char v7 = *(unsigned char *)(a2 + 120);
  uint64_t v8 = *(void *)(a1 + 112);
  char v9 = *(unsigned char *)(a1 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  char v10 = *(unsigned char *)(a2 + 136);
  uint64_t v11 = *(void *)(a1 + 128);
  char v12 = *(unsigned char *)(a1 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackButtonActionableBar(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 153)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BackButtonActionableBar(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 152) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 153) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 153) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for BackButtonActionableBar()
{
  return &unk_1ED43DCE8;
}

uint64_t sub_187F92E48()
{
  return lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>> and conformance GeometryReader<A>, type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>>);
}

void type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, (uint64_t (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey> and conformance _PreferenceActionModifier<A>, (void (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _PreferenceActionModifier<MultimodalCustomKeyboardActionKey> and conformance _PreferenceActionModifier<A>, (void (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BackButtonActionableBar()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>()
{
  if (!lazy cache variable for type metadata for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(255, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>> and conformance <> _ConditionalContent<A, B>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>(uint64_t a1)
{
}

void type metadata accessor for (ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>))
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>();
    type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>));
    }
  }
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>)
  {
    type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>();
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<BackButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonStyle and conformance BackButtonStyle, (uint64_t)&type metadata for BackButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    }
  }
}

void type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>)
  {
    type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>);
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>)
  {
    type metadata accessor for Label<Text, Image>();
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle, (uint64_t)&type metadata for MultimodalNavigationKeyboardLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>();
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>);
    lazy protocol witness table accessor for type LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle> and conformance LabelStyleWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle, (uint64_t)&type metadata for MultimodalNavigationKeyboardLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BackButtonStyle and conformance BackButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type BackButtonStyle and conformance BackButtonStyle;
  if (!lazy protocol witness table cache variable for type BackButtonStyle and conformance BackButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonStyle and conformance BackButtonStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)
  {
    type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>();
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<PrimaryActionButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimaryActionButtonStyle and conformance PrimaryActionButtonStyle, (uint64_t)&unk_1ED443070, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>);
    }
  }
}

void type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>)
  {
    type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>);
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>)
  {
    type metadata accessor for Label<_ConditionalContent<Text, Text>, Image?>();
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationKeyboardLabelStyle and conformance MultimodalNavigationKeyboardLabelStyle, (uint64_t)&type metadata for MultimodalNavigationKeyboardLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>);
    }
  }
}

void type metadata accessor for Label<_ConditionalContent<Text, Text>, Image?>()
{
  if (!lazy cache variable for type metadata for Label<_ConditionalContent<Text, Text>, Image?>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>(255, &lazy cache variable for type metadata for _ConditionalContent<Text, Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41420], MEMORY[0x1E4F40578]);
    type metadata accessor for _ContiguousArrayStorage<Bool>(255, &lazy cache variable for type metadata for Image?, MEMORY[0x1E4F41558], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type _ConditionalContent<Text, Text> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type Image? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for Label();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Label<_ConditionalContent<Text, Text>, Image?>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(255, a2, a3);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>();
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type Label<_ConditionalContent<Text, Text>, Image?> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<_ConditionalContent<Text, Text>, Image?>);
    lazy protocol witness table accessor for type LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle> and conformance LabelStyleWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimaryActionButtonStyle and conformance PrimaryActionButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimaryActionButtonStyle and conformance PrimaryActionButtonStyle;
  if (!lazy protocol witness table cache variable for type PrimaryActionButtonStyle and conformance PrimaryActionButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimaryActionButtonStyle and conformance PrimaryActionButtonStyle);
  }
  return result;
}

void type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>(uint64_t a1)
{
}

void type metadata accessor for (Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)()
{
  if (!lazy cache variable for type metadata for (Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?))
  {
    type metadata accessor for _ContiguousArrayStorage<Bool>(255, &lazy cache variable for type metadata for Spacer?, MEMORY[0x1E4F415E0], MEMORY[0x1E4FBB718]);
    type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?));
    }
  }
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>)
  {
    type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>();
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<BackButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonStyle and conformance BackButtonStyle, (uint64_t)&type metadata for BackButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
    }
  }
}

void type metadata accessor for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>)
  {
    type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>> and conformance <> ModifiedContent<A, B>);
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>)
  {
    type metadata accessor for Label<Text, Image>();
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationBackButtonLabelStyle and conformance MultimodalNavigationBackButtonLabelStyle, (uint64_t)&type metadata for MultimodalNavigationBackButtonLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationBackButtonLabelStyle and conformance MultimodalNavigationBackButtonLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalNavigationBackButtonLabelStyle and conformance MultimodalNavigationBackButtonLabelStyle;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationBackButtonLabelStyle and conformance MultimodalNavigationBackButtonLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationBackButtonLabelStyle and conformance MultimodalNavigationBackButtonLabelStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>();
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>);
    lazy protocol witness table accessor for type LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle> and conformance LabelStyleWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle> and conformance LabelStyleWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle> and conformance LabelStyleWritingModifier<A>)
  {
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationBackButtonLabelStyle and conformance MultimodalNavigationBackButtonLabelStyle, (uint64_t)&type metadata for MultimodalNavigationBackButtonLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle> and conformance LabelStyleWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(255, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)> and conformance TupleView<A>, type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<_HStackLayout, _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(255, &lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>, MEMORY[0x1E4F40578]);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, _ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>>)
  {
    type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for _BackgroundModifier<BackButtonActionableBar.Background>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background, (uint64_t)&unk_1ED43DBE0, MEMORY[0x1E4F40558]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background()
{
  unint64_t result = lazy protocol witness table cache variable for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background;
  if (!lazy protocol witness table cache variable for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background);
  }
  return result;
}

uint64_t outlined retain of BackButtonActionableBar(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 112);
  char v5 = *(unsigned char *)(a1 + 120);
  uint64_t v8 = *(void *)(a1 + 128);
  char v7 = *(unsigned char *)(a1 + 136);
  swift_retain();
  outlined copy of MultimodalCustomKeyboardActionKeyData?(v2, v3);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v4, v5);
  outlined copy of Environment<Bool>.Content(v8, v7);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t outlined release of BackButtonActionableBar(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 112);
  char v5 = *(unsigned char *)(a1 + 120);
  uint64_t v8 = *(void *)(a1 + 128);
  char v7 = *(unsigned char *)(a1 + 136);
  swift_release();
  outlined consume of MultimodalCustomKeyboardActionKeyData?(v2, v3);
  swift_release();
  outlined consume of Environment<Bool>.Content(v4, v5);
  outlined consume of Environment<Bool>.Content(v8, v7);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t objectdestroy_78Tm()
{
  swift_release();
  if (*(void *)(v0 + 64))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release();
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 128), *(unsigned char *)(v0 + 136));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 144), *(unsigned char *)(v0 + 152));

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in BackButtonActionableBar.body.getter()
{
  return closure #3 in closure #1 in BackButtonActionableBar.body.getter(v0 + 16);
}

uint64_t outlined init with copy of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, (void (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundModifier<BackButtonActionableBar.Background> and conformance _BackgroundModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackgroundModifier<BackButtonActionableBar.Background> and conformance _BackgroundModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundModifier<BackButtonActionableBar.Background> and conformance _BackgroundModifier<A>)
  {
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for _BackgroundModifier<BackButtonActionableBar.Background>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.Background and conformance BackButtonActionableBar.Background, (uint64_t)&unk_1ED43DBE0, MEMORY[0x1E4F40558]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundModifier<BackButtonActionableBar.Background> and conformance _BackgroundModifier<A>);
  }
  return result;
}

uint64_t destroy for BackButtonActionableBar.Background(uint64_t a1)
{
  return outlined consume of Environment<CGFloat?>.Content(*(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(unsigned char *)(a1 + 33));
}

uint64_t initializeWithCopy for BackButtonActionableBar.Background(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  char v4 = *(unsigned char *)(a2 + 33);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<CGFloat?>.Content(v3, v5, v4);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 33) = v4;
  return a1;
}

uint64_t assignWithCopy for BackButtonActionableBar.Background(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 33);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<CGFloat?>.Content(v4, v6, v5);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 33);
  *(void *)(a1 + 24) = v4;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 33) = v5;
  outlined consume of Environment<CGFloat?>.Content(v7, v9, v8);
  return a1;
}

uint64_t assignWithTake for BackButtonActionableBar.Background(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  char v3 = *(unsigned char *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 33);
  uint64_t v5 = *(void *)(a1 + 24);
  char v6 = *(unsigned char *)(a1 + 33);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 33) = v4;
  outlined consume of Environment<CGFloat?>.Content(v5, v7, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackButtonActionableBar.Background(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[34]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for BackButtonActionableBar.Background(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 34) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for BackButtonActionableBar.Background()
{
  return &unk_1ED43DBE0;
}

void *type metadata accessor for PrimaryActionButtonStyle()
{
  return &unk_1ED443070;
}

ValueMetadata *type metadata accessor for BackButtonStyle()
{
  return &type metadata for BackButtonStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>>();
    lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _BackgroundModifier<BackButtonActionableBar.Background> and conformance _BackgroundModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<_ConditionalContent<Text, Text>, Image?>, LabelStyleWritingModifier<MultimodalNavigationKeyboardLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<PrimaryActionButtonStyle>>)>, TupleView<(Spacer?, ModifiedContent<ModifiedContent<Button<ModifiedContent<ModifiedContent<Label<Text, Image>, LabelStyleWritingModifier<MultimodalNavigationBackButtonLabelStyle>>, _FlexFrameLayout>>, ButtonStyleContainerModifier<BackButtonStyle>>, _FlexFrameLayout>, Spacer?)>>>, _PaddingLayout>, _BackgroundModifier<BackButtonActionableBar.Background>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BackButtonActionableBar.Background()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in PrimaryActionButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in BackButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape()
{
  unint64_t result = lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape;
  if (!lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape;
  if (!lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape;
  if (!lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>;
  if (!lazy protocol witness table cache variable for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>)
  {
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for _ClipEffect<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1ED43DB60, MEMORY[0x1E4F3F580]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for _ClipEffect<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1ED43DB60, MEMORY[0x1E4F3F580]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>(uint64_t a1)
{
}

void type metadata accessor for ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>()
{
  if (!lazy cache variable for type metadata for ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>)
  {
    type metadata accessor for TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)> and conformance TupleView<A>, type metadata accessor for TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>);
    unint64_t v0 = type metadata accessor for ZStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>);
    }
  }
}

void type metadata accessor for TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>(uint64_t a1)
{
}

void type metadata accessor for (_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)()
{
  if (!lazy cache variable for type metadata for (_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?))
  {
    type metadata accessor for _ShapeView<Rectangle, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, Color>);
    type metadata accessor for TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?));
    }
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>)
  {
    type metadata accessor for _ShapeView<Rectangle, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, TintShapeStyle>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>);
    }
  }
}

void type metadata accessor for _ShapeView<Rectangle, Color>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v3 = type metadata accessor for _ShapeView();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>()
{
  if (!lazy cache variable for type metadata for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<Material>, MEMORY[0x1E4F41748], MEMORY[0x1E4F41740], MEMORY[0x1E4F403C0]);
    lazy protocol witness table accessor for type _OpacityShapeStyle<Material> and conformance _OpacityShapeStyle<A>();
    unint64_t v0 = type metadata accessor for _BackgroundStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _OpacityShapeStyle<Material> and conformance _OpacityShapeStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _OpacityShapeStyle<Material> and conformance _OpacityShapeStyle<A>;
  if (!lazy protocol witness table cache variable for type _OpacityShapeStyle<Material> and conformance _OpacityShapeStyle<A>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<Material>, MEMORY[0x1E4F41748], MEMORY[0x1E4F41740], MEMORY[0x1E4F403C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OpacityShapeStyle<Material> and conformance _OpacityShapeStyle<A>);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>(uint64_t a1)
{
}

void type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<SubscriptionView<NSNotificationCenter.Publisher, SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<_ViewModifier_Content<MultimodalNavigationChromeModifier>, _InsetViewModifier<BackButtonActionableBar?>>, _SafeAreaIgnoringLayout>>>, _PreferenceActionModifier<MultimodalCustomKeyboardActionKey>>, _PreferenceActionModifier<MultimodalChromeVisiblePreferenceKey>>, _AnimationModifier<Bool>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>)
  {
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for _ShadowView<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1ED43DB60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ShadowView);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>> and conformance _BackgroundModifier<A>, type metadata accessor for _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>, _BackgroundModifier<ModifiedContent<_ShadowView<BackButtonActionableBar.BarShape>, _OpacityEffect>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _BackgroundStyleModifier<_OpacityShapeStyle<Material>> and conformance _BackgroundStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundStyleModifier<_OpacityShapeStyle<Material>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>, _BackgroundStyleModifier<_OpacityShapeStyle<Material>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect>(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>> and conformance ZStack<A>, (void (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<Rectangle, Color>, ModifiedContent<_ShapeView<Rectangle, TintShapeStyle>, _OpacityEffect>?)>>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata completion function for BarBackground()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for BarBackground(unint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 17) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    *unint64_t v3 = *(void *)a2;
    unint64_t v3 = (void *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    *(unsigned char *)(v9 + 16) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    *(void *)(v9 + 8) = v10;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((a1 & 0xFFFFFFFFFFFFFFF8) + v5 + 17) & ~v5, ((a2 & 0xFFFFFFFFFFFFFFF8) + v5 + 17) & ~v5);
  }
  return v3;
}

uint64_t destroy for BarBackground(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(((a1 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

unint64_t initializeWithCopy for BarBackground(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v4 + 16) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 16))((*(unsigned __int8 *)(v6 + 80) + 17 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

unint64_t assignWithCopy for BarBackground(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v4 + 16) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))((*(unsigned __int8 *)(v6 + 80) + 17 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

unint64_t assignWithTake for BarBackground(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v4 + 16) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(void *)(v4 + 8) = v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))((*(unsigned __int8 *)(v6 + 80) + 17 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for BarBackground(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 17) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((a1 & 0xFFFFFFFFFFFFFFF8) + v6 + 17) & ~v6);
      }
      unsigned int v15 = *(unsigned __int8 *)a1;
      BOOL v16 = v15 >= 2;
      int v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16) {
        return (v17 + 1);
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(unsigned char *)(a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for BarBackground(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 17) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero((void *)a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          *(unsigned char *)(a1 + 2) = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *(unsigned char *)a1 = v17;
        }
      }
    }
    else
    {
      bzero((void *)a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        *(unsigned char *)(a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)(a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)(a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      *(unsigned char *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x187F95BC4);
    case 4:
      *(_DWORD *)(a1 + v10) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v9 + 17) & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else
        {
          *(unsigned char *)a1 = a2 + 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for BarBackground()
{
  return __swift_instantiateGenericMetadata();
}

void *type metadata accessor for BackButtonActionableBar.BarShape()
{
  return &unk_1ED43DB60;
}

uint64_t *assignWithCopy for BackButtonActionableBar.KeyboardBackdropView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for MultimodalNavigationTitleLabelStyle(a1, a2, a3, (void (*)(void, void))outlined copy of Environment<MenuActionDismissBehavior>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool?>.Content);
}

uint64_t *assignWithCopy for MultimodalNavigationTitleLabelStyle(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, void), void (*a5)(uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  unsigned __int8 v8 = *((unsigned char *)a2 + 8);
  a4(*a2, v8);
  uint64_t v9 = *a1;
  uint64_t v10 = *((unsigned __int8 *)a1 + 8);
  *a1 = v7;
  *((unsigned char *)a1 + 8) = v8;
  a5(v9, v10);
  return a1;
}

ValueMetadata *type metadata accessor for BackButtonActionableBar.KeyboardBackdropView()
{
  return &type metadata for BackButtonActionableBar.KeyboardBackdropView;
}

unint64_t lazy protocol witness table accessor for type PlatterButtonStyleView<Color> and conformance PlatterButtonStyleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatterButtonStyleView<Color> and conformance PlatterButtonStyleView<A>;
  if (!lazy protocol witness table cache variable for type PlatterButtonStyleView<Color> and conformance PlatterButtonStyleView<A>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>(255, &lazy cache variable for type metadata for PlatterButtonStyleView<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F414D0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatterButtonStyleView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatterButtonStyleView<Color> and conformance PlatterButtonStyleView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>>();
    lazy protocol witness table accessor for type ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type BarBackground<BackButtonActionableBar.BarShape> and conformance BarBackground<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>>)
  {
    type metadata accessor for ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>();
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for BarBackground<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1ED43DB60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for BarBackground);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>, BarBackground<BackButtonActionableBar.BarShape>>);
    }
  }
}

void type metadata accessor for ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>)
  {
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for _ClipEffect<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1ED43DB60, MEMORY[0x1E4F3F580]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>>();
    lazy protocol witness table accessor for type _ClipEffect<BackButtonActionableBar.BarShape> and conformance _ClipEffect<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<BackButtonActionableBar.KeyboardBackdropView, _ClipEffect<BackButtonActionableBar.BarShape>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BarBackground<BackButtonActionableBar.BarShape> and conformance BarBackground<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type BarBackground<BackButtonActionableBar.BarShape> and conformance BarBackground<A>;
  if (!lazy protocol witness table cache variable for type BarBackground<BackButtonActionableBar.BarShape> and conformance BarBackground<A>)
  {
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for BarBackground<BackButtonActionableBar.BarShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape, (uint64_t)&unk_1ED43DB60, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for BarBackground);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarBackground<BackButtonActionableBar.BarShape> and conformance BarBackground<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BackButtonActionableBar.BarShape()
{
  return lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _ShapeView<BackButtonActionableBar.BarShape, ForegroundStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<BackButtonActionableBar.BarShape, ForegroundStyle>);
}

void type metadata accessor for _ShapeView<BackButtonActionableBar.BarShape, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<BackButtonActionableBar.BarShape, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<BackButtonActionableBar.BarShape, ForegroundStyle>);
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in BarBackground<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for BackButtonActionableBar.BarShape(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape();
  unint64_t result = lazy protocol witness table accessor for type BackButtonActionableBar.BarShape and conformance BackButtonActionableBar.BarShape();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t destroy for MultimodalNavigationTitleBar(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 24);
  if (v2)
  {
    if (v2 == 1) {
      return result;
    }
    outlined consume of Text.Storage(*(void *)result, *(void *)(result + 8), *(unsigned char *)(result + 16));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v1 + 32) != 1) {
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for MultimodalNavigationTitleBar(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[3];
  if (v4)
  {
    if (v4 == 1)
    {
      long long v5 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
      goto LABEL_9;
    }
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    outlined copy of Text.Storage(*a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
  }
  uint64_t v10 = a2[4];
  if (v10 != 1) {
    uint64_t v10 = swift_retain();
  }
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 48) = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  swift_retain();
LABEL_9:
  *(void *)(a1 + 64) = a2[8];
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 80) = a2[10];
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  *(void *)(a1 + 96) = a2[12];
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  return a1;
}

uint64_t assignWithCopy for MultimodalNavigationTitleBar(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *((void *)a2 + 3);
  if (v4 != 1)
  {
    if (v5 == 1)
    {
      outlined destroy of NavigationTitleStorage(a1);
      long long v10 = a2[1];
      long long v9 = a2[2];
      long long v11 = *a2;
      *(_OWORD *)(a1 + 41) = *(long long *)((char *)a2 + 41);
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)a1 = v11;
      goto LABEL_28;
    }
    if (v4)
    {
      if (v5)
      {
        uint64_t v15 = *(void *)a2;
        uint64_t v16 = *((void *)a2 + 1);
        char v17 = *((unsigned char *)a2 + 16);
        outlined copy of Text.Storage(*(void *)a2, v16, v17);
        uint64_t v18 = *(void *)a1;
        uint64_t v19 = *(void *)(a1 + 8);
        char v20 = *(unsigned char *)(a1 + 16);
        *(void *)a1 = v15;
        *(void *)(a1 + 8) = v16;
        *(unsigned char *)(a1 + 16) = v17;
        outlined consume of Text.Storage(v18, v19, v20);
        *(void *)(a1 + 24) = *((void *)a2 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1);
        long long v26 = a2[1];
        *(_OWORD *)a1 = *a2;
        *(_OWORD *)(a1 + 16) = v26;
      }
    }
    else if (v5)
    {
      uint64_t v23 = *(void *)a2;
      uint64_t v24 = *((void *)a2 + 1);
      char v25 = *((unsigned char *)a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v24, v25);
      *(void *)a1 = v23;
      *(void *)(a1 + 8) = v24;
      *(unsigned char *)(a1 + 16) = v25;
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v27 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v27;
    }
    id v28 = (uint64_t *)(a1 + 32);
    uint64_t v29 = *((void *)a2 + 4);
    if (*(void *)(a1 + 32) == 1)
    {
      if (v29 != 1)
      {
        *id v28 = v29;
        swift_retain();
        goto LABEL_27;
      }
      uint64_t v30 = 1;
    }
    else
    {
      if (v29 != 1)
      {
        *id v28 = v29;
        swift_retain();
        swift_release();
        goto LABEL_27;
      }
      outlined destroy of Transaction(a1 + 32);
      uint64_t v30 = *((void *)a2 + 4);
    }
    *id v28 = v30;
LABEL_27:
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    goto LABEL_28;
  }
  if (v5 == 1)
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[2];
    *(_OWORD *)(a1 + 41) = *(long long *)((char *)a2 + 41);
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)a1 = v6;
  }
  else
  {
    if (v5)
    {
      uint64_t v12 = *(void *)a2;
      uint64_t v13 = *((void *)a2 + 1);
      char v14 = *((unsigned char *)a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v13, v14);
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v13;
      *(unsigned char *)(a1 + 16) = v14;
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v21 = a2[1];
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 16) = v21;
    }
    uint64_t v22 = *((void *)a2 + 4);
    if (v22 != 1) {
      uint64_t v22 = swift_retain();
    }
    *(void *)(a1 + 32) = v22;
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    swift_retain();
  }
LABEL_28:
  uint64_t v31 = *((void *)a2 + 8);
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  *(void *)(a1 + 64) = v31;
  uint64_t v32 = *((void *)a2 + 10);
  *(unsigned char *)(a1 + 88) = *((unsigned char *)a2 + 88);
  *(void *)(a1 + 80) = v32;
  uint64_t v33 = *((void *)a2 + 12);
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(void *)(a1 + 96) = v33;
  return a1;
}

uint64_t assignWithTake for MultimodalNavigationTitleBar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4 == 1) {
    goto LABEL_4;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (v5 != 1)
  {
    if (v4)
    {
      if (v5)
      {
        char v7 = *(unsigned char *)(a2 + 16);
        uint64_t v8 = *(void *)a1;
        uint64_t v9 = *(void *)(a1 + 8);
        char v10 = *(unsigned char *)(a1 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(unsigned char *)(a1 + 16) = v7;
        outlined consume of Text.Storage(v8, v9, v10);
        *(void *)(a1 + 24) = v5;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      outlined destroy of Text(a1);
    }
    long long v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
LABEL_10:
    uint64_t v12 = (uint64_t *)(a1 + 32);
    uint64_t v13 = *(void *)(a2 + 32);
    if (*(void *)(a1 + 32) != 1)
    {
      if (v13 != 1)
      {
        *uint64_t v12 = v13;
        swift_release();
        goto LABEL_15;
      }
      outlined destroy of Transaction(a1 + 32);
      uint64_t v13 = 1;
    }
    *uint64_t v12 = v13;
LABEL_15:
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_release();
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    goto LABEL_16;
  }
  outlined destroy of NavigationTitleStorage(a1);
LABEL_4:
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
LABEL_16:
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultimodalNavigationTitleBar(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for MultimodalNavigationTitleBar(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)unint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 105) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MultimodalNavigationTitleBar()
{
  return &type metadata for MultimodalNavigationTitleBar;
}

uint64_t sub_187F967C0()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in MultimodalNavigationTitleBar()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of MultimodalNavigationTitleBar(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void))
{
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>(uint64_t a1)
{
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_6(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_6(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>)
  {
    type metadata accessor for Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>();
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationTitleLabelStyle and conformance MultimodalNavigationTitleLabelStyle, (uint64_t)&type metadata for MultimodalNavigationTitleLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>);
    }
  }
}

void type metadata accessor for Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>()
{
  if (!lazy cache variable for type metadata for Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for _AccessibilityIgnoresInvertColorsViewModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for Label();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for _AccessibilityIgnoresInvertColorsViewModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationTitleLabelStyle and conformance MultimodalNavigationTitleLabelStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalNavigationTitleLabelStyle and conformance MultimodalNavigationTitleLabelStyle;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitleLabelStyle and conformance MultimodalNavigationTitleLabelStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitleLabelStyle and conformance MultimodalNavigationTitleLabelStyle);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _BackgroundModifier<BarBackground<Rectangle>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<BarBackground<Rectangle>>)
  {
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for BarBackground<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for BarBackground);
    lazy protocol witness table accessor for type BarBackground<Rectangle> and conformance BarBackground<A>();
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<BarBackground<Rectangle>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BarBackground<Rectangle> and conformance BarBackground<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type BarBackground<Rectangle> and conformance BarBackground<A>;
  if (!lazy protocol witness table cache variable for type BarBackground<Rectangle> and conformance BarBackground<A>)
  {
    type metadata accessor for _ViewModifier_Content<MultimodalNavigationChromeModifier>(255, &lazy cache variable for type metadata for BarBackground<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for BarBackground);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarBackground<Rectangle> and conformance BarBackground<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>(255);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, (uint64_t (*)(uint64_t))type metadata accessor for _BackgroundModifier<BarBackground<Rectangle>>, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<MultimodalNavigationStackViewHost<ModifiedContent<LabelStyleConfiguration.Icon, _FrameLayout>>, _FrameLayout>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>)>> and conformance HStack<A>(&lazy protocol witness table cache variable for type _BackgroundModifier<BarBackground<Rectangle>> and conformance _BackgroundModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<BarBackground<Rectangle>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Label<Text, ModifiedContent<AnyView, _AccessibilityIgnoresInvertColorsViewModifier>>, LabelStyleWritingModifier<MultimodalNavigationTitleLabelStyle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Int?>>, Spacer)>>, _PaddingLayout>, _PaddingLayout>, _PaddingLayout>, _BackgroundModifier<BarBackground<Rectangle>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void CustomHoverEffect.effectAppearance(_:)()
{
}

uint64_t sub_187F973E8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t type metadata completion function for EnvironmentWritingTableColumnContent()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnvironmentWritingTableColumnContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  unint64_t v13 = ((v8 + v11) & ~v11) + *(void *)(v10 + 64);
  uint64_t v14 = (*(unsigned char *)(v7 + 80) | *(unsigned char *)(v10 + 80));
  if (v14 > 7 || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0 || v13 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  else
  {
    uint64_t v18 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v18, ((unint64_t)a2 + v12) & v18, v9);
  }
  return a1;
}

uint64_t destroy for EnvironmentWritingTableColumnContent(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (*(void *)(v5 + 56) + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

uint64_t initializeWithCopy for EnvironmentWritingTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithCopy for EnvironmentWritingTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t initializeWithTake for EnvironmentWritingTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))((*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithTake for EnvironmentWritingTableColumnContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentWritingTableColumnContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v11;
  if (a2 <= v12) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v12 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v12)
      {
        if (v8 >= v10)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *))(v7 + 48);
          return v23(a1);
        }
        else
        {
          long long v21 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v11, v10);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = (v13 & ~v11) + *(_DWORD *)(v9 + 64);
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v12 + (v20 | v18) + 1;
}

void storeEnumTagSinglePayload for EnvironmentWritingTableColumnContent(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v10) {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v15 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v13;
  size_t v16 = (v15 & ~v13) + *(void *)(v11 + 64);
  if (a3 <= v14)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v14 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v14 < a2)
  {
    unsigned int v18 = ~v14 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187F97FC8);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v10 >= v12)
        {
          uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v9 + 56);
          v23(a1, a2);
        }
        else
        {
          uint64_t v22 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 56);
          v22((unint64_t)&a1[v15] & ~v13, a2, v12);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for EnvironmentWritingTableColumnContent()
{
  return swift_getGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for EnvironmentWritingTableColumnContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in EnvironmentWritingTableColumnContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TableColumnContent.TableRowValue : Identifiable in EnvironmentWritingTableColumnContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t TableColumnContent.environment<A>(key:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unsigned int v14 = (char *)&v17 - v13;
  (*(void (**)(char *, uint64_t, double))(v15 + 16))((char *)&v17 - v13, a2, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v4, a3);
  return EnvironmentWritingTableColumnContent.init(value:content:)((uint64_t)v14, (uint64_t)v10, a3, a4);
}

uint64_t EnvironmentWritingTableColumnContent.init(value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
  uint64_t v9 = type metadata accessor for EnvironmentWritingTableColumnContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + *(int *)(v9 + 52), a2, a3);
}

uint64_t static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v41 = a6;
  uint64_t v52 = a7;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v48 = (char *)&v40 - v15;
  uint64_t v64 = a3;
  uint64_t v65 = a4;
  uint64_t v66 = a5;
  *(void *)&long long v67 = a6;
  uint64_t v16 = type metadata accessor for EnvironmentWritingTableColumnContent.ChildEnvironment();
  uint64_t v50 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v49 = (_DWORD *)((char *)&v40 - v17);
  int v18 = *a1;
  uint64_t v19 = *(void *)a2;
  int v20 = *(_DWORD *)(a2 + 8);
  uint64_t v21 = *(void *)(a2 + 16);
  unsigned int v22 = *(_DWORD *)(a2 + 24);
  unsigned int v23 = *(_DWORD *)(a2 + 28);
  unsigned int v24 = *(_DWORD *)(a2 + 32);
  unsigned int v25 = *(_DWORD *)(a2 + 36);
  uint64_t v26 = *(void *)(a2 + 40);
  uint64_t v27 = *(void *)(a2 + 48);
  LODWORD(v17) = *(_DWORD *)(a2 + 80);
  uint64_t v64 = *(void *)a2;
  int v46 = v20;
  LODWORD(v65) = v20;
  uint64_t v66 = v21;
  unsigned int v45 = v22;
  *(void *)&long long v67 = __PAIR64__(v23, v22);
  unsigned int v44 = v23;
  unsigned int v43 = v24;
  *((void *)&v67 + 1) = __PAIR64__(v25, v24);
  unsigned int v42 = v25;
  uint64_t v68 = v26;
  uint64_t v69 = v27;
  long long v70 = *(_OWORD *)(a2 + 56);
  uint64_t v71 = *(void *)(a2 + 72);
  int v72 = v17;
  int v51 = v18;
  int v54 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v28 = v41;
  swift_bridgeObjectRetain();
  uint64_t v55 = a3;
  uint64_t v53 = a4;
  uint64_t v56 = a4;
  uint64_t v57 = a5;
  *(void *)&long long v58 = v28;
  type metadata accessor for EnvironmentWritingTableColumnContent();
  uint64_t v47 = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)) {
    closure #1 in static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)(1, a3, v53, a5, v28);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  uint64_t v55 = v19;
  LODWORD(v56) = v46;
  uint64_t v57 = v21;
  *(void *)&long long v58 = __PAIR64__(v44, v45);
  *((void *)&v58 + 1) = __PAIR64__(v42, v43);
  uint64_t v59 = v26;
  int v30 = _GraphInputs.environment.getter();
  uint64_t v31 = swift_getAssociatedTypeWitness();
  uint64_t v32 = (uint64_t)v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v48, 1, 1, v31);
  uint64_t v33 = v49;
  uint64_t v34 = v53;
  uint64_t v35 = EnvironmentWritingTableColumnContent.ChildEnvironment.init(newValue:environment:oldValue:)(OffsetAttribute2, v30, v32, v49);
  MEMORY[0x1F4188790](v35);
  *(&v40 - 2) = v16;
  *(&v40 - 1) = swift_getWitnessTable();
  type metadata accessor for Attribute<EnvironmentValues>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v33, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9, (uint64_t)(&v40 - 4), v16, MEMORY[0x1E4FBC248], v36, MEMORY[0x1E4FBC278], v37);
  (*(void (**)(_DWORD *, uint64_t))(v50 + 8))(v33, v16);
  uint64_t v38 = _GraphInputs.environment.setter();
  MEMORY[0x1F4188790](v38);
  *(&v40 - 4) = a3;
  *(&v40 - 3) = v34;
  *(&v40 - 2) = a5;
  *(&v40 - 1) = v28;
  LODWORD(v55) = v51;
  _GraphValue.subscript.getter();
  uint64_t v55 = v64;
  LODWORD(v56) = v65;
  uint64_t v57 = v66;
  long long v58 = v67;
  uint64_t v59 = v68;
  uint64_t v60 = v69;
  long long v61 = v70;
  uint64_t v62 = v71;
  int v63 = v72;
  (*(void (**)(int *, uint64_t *, uint64_t, uint64_t))(v28 + 64))(&v54, &v55, v34, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  _OWORD v9[2] = type metadata accessor for EnvironmentWritingTableColumnContent();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, AssociatedTypeWitness, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v11;
}

uint64_t EnvironmentWritingTableColumnContent.ChildEnvironment.init(newValue:environment:oldValue:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v5 = (char *)a4 + *(int *)(type metadata accessor for EnvironmentWritingTableColumnContent.ChildEnvironment() + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t closure #2 in static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for EnvironmentWritingTableColumnContent();
  uint64_t v8 = a1 + *(int *)(v7 + 52);
  void v12[2] = v7;
  v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t static EnvironmentWritingTableColumnContent._tableColumnCount(inputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = a1[2];
  int v7 = *((_DWORD *)a1 + 20);
  uint64_t v10 = *a1;
  int v11 = v5;
  uint64_t v12 = v6;
  long long v8 = *(_OWORD *)(a1 + 5);
  long long v13 = *(_OWORD *)(a1 + 3);
  long long v14 = v8;
  long long v15 = *(_OWORD *)(a1 + 7);
  uint64_t v16 = a1[9];
  int v17 = v7;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a5 + 72))(&v10, a3, a5);
}

uint64_t EnvironmentWritingTableColumnContent.ChildEnvironment.updateValue()(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v34 = *(void *)(a1 + 16);
  uint64_t v35 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  int v7 = (char *)&v33 - v6;
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v33 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  long long v13 = (char *)&v33 - v12;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v37 = v15;
  uint64_t v16 = Value[1];
  uint64_t v43 = *Value;
  uint64_t v44 = v16;
  uint64_t v17 = AGGraphGetValue();
  char v19 = v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v17, AssociatedTypeWitness);
  uint64_t v39 = a1;
  uint64_t v40 = v1;
  uint64_t v36 = v5;
  if (v19)
  {
    uint64_t v22 = v1 + *(int *)(a1 + 56);
    uint64_t v21 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v22, v38);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, AssociatedTypeWitness) == 1)
    {
      unsigned int v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      swift_retain();
      swift_retain();
      v23(v7, v21);
      char v20 = 1;
    }
    else
    {
      uint64_t v24 = (uint64_t)v33;
      uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v33, v7, AssociatedTypeWitness);
      MEMORY[0x1F4188790](v25);
      *(&v33 - 4) = (char *)AssociatedTypeWitness;
      *(&v33 - 3) = v13;
      *((_DWORD *)&v33 - 4) = 3;
      swift_retain();
      swift_retain();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v24, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)(&v33 - 6), AssociatedTypeWitness, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v26);
      char v27 = v41;
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v24, AssociatedTypeWitness);
      char v20 = v27 ^ 1;
    }
  }
  else
  {
    swift_retain();
    swift_retain();
    char v20 = 0;
    uint64_t v21 = v38;
  }
  Outputuint64_t Value = AGGraphGetOutputValue();
  uint64_t v30 = v39;
  uint64_t v29 = v40;
  if (!OutputValue || (v37 & 1) != 0 || (v20 & 1) != 0)
  {
    specialized EnvironmentValues.subscript.setter(v13, v34, v34, v35);
    uint64_t v41 = v43;
    uint64_t v42 = v44;
    AGGraphSetOutputValue();
    swift_release();
    swift_release();
    uint64_t v32 = v29 + *(int *)(v30 + 56);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v32, v21);
    (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v32, v13, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v32, 0, 1, AssociatedTypeWitness);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, AssociatedTypeWitness);
    swift_release();
    return swift_release();
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance EnvironmentWritingTableColumnContent<A, B>.ChildEnvironment(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance EnvironmentWritingTableColumnContent<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t protocol witness for static TableColumnContent._tableColumnCount(inputs:) in conformance EnvironmentWritingTableColumnContent<A, B>(uint64_t *a1, uint64_t *a2)
{
  return static EnvironmentWritingTableColumnContent._tableColumnCount(inputs:)(a1, a2[2], a2[3], a2[4], a2[5]);
}

uint64_t type metadata accessor for EnvironmentWritingTableColumnContent.ChildEnvironment()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #2 in static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)(uint64_t a1)
{
  return closure #2 in static EnvironmentWritingTableColumnContent._makeContent(content:inputs:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata completion function for EnvironmentWritingTableColumnContent.ChildEnvironment()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EnvironmentWritingTableColumnContent.ChildEnvironment(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  int v9 = v6 & 0x100000;
  if ((v7 | 3uLL) > 7 || v9 != 0 || ((v7 + 8) & ~v7) + v8 > 0x18)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 + 16) & ~(v7 | 3)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = AssociatedTypeWitness;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    long long v14 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v15 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v14 = *v15;
    uint64_t v16 = (void *)(((unint64_t)v14 + v7 + 4) & ~v7);
    uint64_t v17 = (const void *)(((unint64_t)v15 + v7 + 4) & ~v7);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v15 + v7 + 4) & ~v7, 1, AssociatedTypeWitness))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t destroy for EnvironmentWritingTableColumnContent.ChildEnvironment(uint64_t a1)
{
  unint64_t v1 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = v3;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!result)
  {
    int v6 = *(uint64_t (**)(unint64_t, uint64_t))(v7 + 8);
    return v6(v4, AssociatedTypeWitness);
  }
  return result;
}

_DWORD *initializeWithCopy for EnvironmentWritingTableColumnContent.ChildEnvironment(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 4) & ~v7);
  int v9 = (const void *)(((unint64_t)v4 + v7 + 4) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v10 = *(void *)(v6 + 64);
    }
    else {
      size_t v10 = *(void *)(v6 + 64) + 1;
    }
    memcpy(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_DWORD *assignWithCopy for EnvironmentWritingTableColumnContent.ChildEnvironment(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 4) & ~v7);
  int v9 = (void *)(((unint64_t)v4 + v7 + 4) & ~v7);
  size_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v11 = v10(v8, 1, AssociatedTypeWitness);
  int v12 = v10(v9, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    uint64_t v16 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v15 = v6 + 8;
    v16(v8, AssociatedTypeWitness);
    int v13 = *(_DWORD *)(v15 + 76);
    size_t v14 = *(void *)(v15 + 56);
  }
  if (v13) {
    size_t v17 = v14;
  }
  else {
    size_t v17 = v14 + 1;
  }
  memcpy(v8, v9, v17);
  return a1;
}

_DWORD *initializeWithTake for EnvironmentWritingTableColumnContent.ChildEnvironment(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 4) & ~v7);
  int v9 = (const void *)(((unint64_t)v4 + v7 + 4) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v10 = *(void *)(v6 + 64);
    }
    else {
      size_t v10 = *(void *)(v6 + 64) + 1;
    }
    memcpy(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

_DWORD *assignWithTake for EnvironmentWritingTableColumnContent.ChildEnvironment(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 4) & ~v7);
  int v9 = (void *)(((unint64_t)v4 + v7 + 4) & ~v7);
  size_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v11 = v10(v8, 1, AssociatedTypeWitness);
  int v12 = v10(v9, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    uint64_t v16 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v15 = v6 + 8;
    v16(v8, AssociatedTypeWitness);
    int v13 = *(_DWORD *)(v15 + 76);
    size_t v14 = *(void *)(v15 + 56);
  }
  if (v13) {
    size_t v17 = v14;
  }
  else {
    size_t v17 = v14 + 1;
  }
  memcpy(v8, v9, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for EnvironmentWritingTableColumnContent.ChildEnvironment(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  unsigned int v7 = v6 - 1;
  if (!v6) {
    unsigned int v7 = 0;
  }
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!v6) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  if (a2 > v7)
  {
    uint64_t v10 = v9 + ((v8 + 8) & ~v8);
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_8;
    }
    unsigned int v13 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v13))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (v12) {
        goto LABEL_15;
      }
    }
    else
    {
      if (v13 <= 0xFF)
      {
        if (v13 < 2) {
          goto LABEL_25;
        }
LABEL_8:
        int v12 = *((unsigned __int8 *)a1 + v10);
        if (!*((unsigned char *)a1 + v10)) {
          goto LABEL_25;
        }
LABEL_15:
        int v14 = (v12 - 1) << v11;
        if (v10 > 3) {
          int v14 = 0;
        }
        if (v10)
        {
          if (v10 <= 3) {
            int v15 = v10;
          }
          else {
            int v15 = 4;
          }
          switch(v15)
          {
            case 2:
              int v16 = *a1;
              break;
            case 3:
              int v16 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v16 = *(_DWORD *)a1;
              break;
            default:
              int v16 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v16 = 0;
        }
        return v7 + (v16 | v14) + 1;
      }
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_15;
      }
    }
  }
LABEL_25:
  if (v6 < 2) {
    return 0;
  }
  unsigned int v18 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                                               + v8
                                                               + 4) & ~v8);
  if (v18 >= 2) {
    return v18 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for EnvironmentWritingTableColumnContent.ChildEnvironment(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(void *)(v7 + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = v11 + ((v10 + 8) & ~v10);
  if (a3 <= v9) {
    goto LABEL_14;
  }
  if (v12 <= 3)
  {
    unsigned int v13 = ((a3 - v9 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v13))
    {
      int v6 = 4;
      if (v9 >= a2) {
        goto LABEL_22;
      }
      goto LABEL_15;
    }
    if (v13 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v13 > 1;
    }
LABEL_14:
    if (v9 >= a2) {
      goto LABEL_22;
    }
    goto LABEL_15;
  }
  int v6 = 1;
  if (v9 >= a2)
  {
LABEL_22:
    switch(v6)
    {
      case 1:
        a1[v12] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_27;
      case 2:
        *(_WORD *)&a1[v12] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_27;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v12] = 0;
        goto LABEL_26;
      default:
LABEL_26:
        if (a2)
        {
LABEL_27:
          if (v8 >= 2)
          {
            size_t v17 = *(void (**)(unint64_t, void))(v7 + 56);
            v17((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v10 + 4) & ~v10, a2 + 1);
          }
        }
        break;
    }
    return;
  }
LABEL_15:
  unsigned int v14 = ~v9 + a2;
  if (v12 < 4)
  {
    int v15 = (v14 >> (8 * v12)) + 1;
    if (v12)
    {
      int v16 = v14 & ~(-1 << (8 * v12));
      bzero(a1, v12);
      if (v12 == 3)
      {
        *(_WORD *)a1 = v16;
        a1[2] = BYTE2(v16);
      }
      else if (v12 == 2)
      {
        *(_WORD *)a1 = v16;
      }
      else
      {
        *a1 = v16;
      }
    }
  }
  else
  {
    bzero(a1, v12);
    *(_DWORD *)a1 = v14;
    int v15 = 1;
  }
  switch(v6)
  {
    case 1:
      a1[v12] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v12] = v15;
      break;
    case 3:
LABEL_40:
      __break(1u);
      JUMPOUT(0x187F99E14);
    case 4:
      *(_DWORD *)&a1[v12] = v15;
      break;
    default:
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in EnvironmentWritingTableColumnContent<A, B>.ChildEnvironment()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for CollectionViewTableRoot()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CollectionViewTableRoot(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 32);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64);
  unint64_t v12 = ((((v11 + ((v6 + v9) & ~v9) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
    return v4;
  }
  uint64_t v17 = ~v9;
  (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
  unint64_t v18 = ((unint64_t)v4 + v10) & v17;
  unint64_t v19 = ((unint64_t)a2 + v10) & v17;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v18, v19, v7);
  uint64_t v20 = v18 + v11;
  uint64_t v21 = v19 + v11;
  unint64_t v22 = (v18 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v23 + 8) < 0xFFFFFFFFuLL)
  {
    long long v27 = *(_OWORD *)v23;
    long long v28 = *(_OWORD *)(v23 + 16);
    long long v29 = *(_OWORD *)(v23 + 32);
    *(_OWORD *)(v22 + 41) = *(_OWORD *)(v23 + 41);
    *(_OWORD *)(v22 + 16) = v28;
    *(_OWORD *)(v22 + 32) = v29;
    *(_OWORD *)unint64_t v22 = v27;
  }
  else
  {
    *(void *)unint64_t v22 = *(void *)v23;
    *(void *)(v22 + 8) = *(void *)(v23 + 8);
    uint64_t v24 = (long long *)(v23 + 16);
    int v25 = *(unsigned __int8 *)(v23 + 56);
    swift_retain();
    swift_retain();
    if (v25 == 2)
    {
      uint64_t v30 = *(void *)(v23 + 40);
      *(void *)(v22 + 40) = v30;
      *(void *)(v22 + 48) = *(void *)(v23 + 48);
      (**(void (***)(uint64_t, uint64_t))(v30 - 8))(v22 + 16, v23 + 16);
      char v31 = 2;
LABEL_20:
      *(unsigned char *)(v22 + 56) = v31;
      goto LABEL_21;
    }
    if (v25 == 1)
    {
      uint64_t v26 = *(void *)(v23 + 40);
      if (v26)
      {
        *(void *)(v22 + 40) = v26;
        *(void *)(v22 + 48) = *(void *)(v23 + 48);
        (**(void (***)(uint64_t, uint64_t))(v26 - 8))(v22 + 16, v23 + 16);
      }
      else
      {
        long long v32 = *v24;
        long long v33 = *(_OWORD *)(v23 + 32);
        *(void *)(v22 + 48) = *(void *)(v23 + 48);
        *(_OWORD *)(v22 + 16) = v32;
        *(_OWORD *)(v22 + 32) = v33;
      }
      char v31 = 1;
      goto LABEL_20;
    }
    *(void *)(v22 + 16) = *(void *)v24;
    *(unsigned char *)(v22 + 56) = 0;
    swift_bridgeObjectRetain();
  }
LABEL_21:
  unint64_t v34 = (v20 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v21 + 71) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v35 + 8) < 0xFFFFFFFFuLL)
  {
    long long v36 = *(_OWORD *)v35;
    *(void *)(v34 + 16) = *(void *)(v35 + 16);
    *(_OWORD *)unint64_t v34 = v36;
  }
  else
  {
    *(void *)unint64_t v34 = *(void *)v35;
    *(void *)(v34 + 8) = *(void *)(v35 + 8);
    *(void *)(v34 + 16) = *(void *)(v35 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  unint64_t v37 = (v34 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = (v35 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v38 + 8) < 0xFFFFFFFFuLL)
  {
    long long v39 = *(_OWORD *)(v38 + 16);
    *(_OWORD *)unint64_t v37 = *(_OWORD *)v38;
    *(_OWORD *)(v37 + 16) = v39;
  }
  else
  {
    *(void *)unint64_t v37 = *(void *)v38;
    *(void *)(v37 + 8) = *(void *)(v38 + 8);
    *(void *)(v37 + 16) = *(void *)(v38 + 16);
    *(void *)(v37 + 24) = *(void *)(v38 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for CollectionViewTableRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(*(void *)(a2 + 32) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v6 + 8))(v8);
  unint64_t v10 = v8 + *(void *)(v7 + 56);
  unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v11 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_8;
  }
  swift_release();
  swift_release();
  uint64_t result = v11 + 16;
  int v12 = *(unsigned __int8 *)(v11 + 56);
  if (v12 == 2)
  {
LABEL_7:
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(result);
    goto LABEL_8;
  }
  if (v12 == 1)
  {
    if (!*(void *)(v11 + 40)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  if (!*(unsigned char *)(v11 + 56)) {
    uint64_t result = swift_bridgeObjectRelease();
  }
LABEL_8:
  unint64_t v13 = (v10 + 71) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v13 + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (*(void *)(((v13 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for CollectionViewTableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  unint64_t v17 = (v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v14 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v18 + 8) < 0xFFFFFFFFuLL)
  {
    long long v22 = *(_OWORD *)v18;
    long long v23 = *(_OWORD *)(v18 + 16);
    long long v24 = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(v17 + 41) = *(_OWORD *)(v18 + 41);
    *(_OWORD *)(v17 + 16) = v23;
    *(_OWORD *)(v17 + 32) = v24;
    *(_OWORD *)unint64_t v17 = v22;
    goto LABEL_12;
  }
  *(void *)unint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  unint64_t v19 = (void *)(v18 + 16);
  int v20 = *(unsigned __int8 *)(v18 + 56);
  swift_retain();
  swift_retain();
  if (v20 == 2)
  {
    uint64_t v25 = *(void *)(v18 + 40);
    *(void *)(v17 + 40) = v25;
    *(void *)(v17 + 48) = *(void *)(v18 + 48);
    (**(void (***)(uint64_t, uint64_t))(v25 - 8))(v17 + 16, v18 + 16);
    char v26 = 2;
  }
  else
  {
    if (v20 != 1)
    {
      *(void *)(v17 + 16) = *v19;
      *(unsigned char *)(v17 + 56) = 0;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    }
    uint64_t v21 = *(void *)(v18 + 40);
    if (v21)
    {
      *(void *)(v17 + 40) = v21;
      *(void *)(v17 + 48) = *(void *)(v18 + 48);
      (**(void (***)(uint64_t, uint64_t))(v21 - 8))(v17 + 16, v18 + 16);
    }
    else
    {
      long long v27 = *(_OWORD *)v19;
      long long v28 = *(_OWORD *)(v18 + 32);
      *(void *)(v17 + 48) = *(void *)(v18 + 48);
      *(_OWORD *)(v17 + 16) = v27;
      *(_OWORD *)(v17 + 32) = v28;
    }
    char v26 = 1;
  }
  *(unsigned char *)(v17 + 56) = v26;
LABEL_12:
  unint64_t v29 = (v15 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v16 + 71) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v30 + 8) < 0xFFFFFFFFuLL)
  {
    long long v31 = *(_OWORD *)v30;
    *(void *)(v29 + 16) = *(void *)(v30 + 16);
    *(_OWORD *)unint64_t v29 = v31;
  }
  else
  {
    *(void *)unint64_t v29 = *(void *)v30;
    *(void *)(v29 + 8) = *(void *)(v30 + 8);
    *(void *)(v29 + 16) = *(void *)(v30 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  unint64_t v32 = (v29 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = (v30 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v33 + 8) < 0xFFFFFFFFuLL)
  {
    long long v34 = *(_OWORD *)(v33 + 16);
    *(_OWORD *)unint64_t v32 = *(_OWORD *)v33;
    *(_OWORD *)(v32 + 16) = v34;
  }
  else
  {
    *(void *)unint64_t v32 = *(void *)v33;
    *(void *)(v32 + 8) = *(void *)(v33 + 8);
    *(void *)(v32 + 16) = *(void *)(v33 + 16);
    *(void *)(v32 + 24) = *(void *)(v33 + 24);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for CollectionViewTableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  unint64_t v17 = (v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v14 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = *(void *)(v18 + 8);
  if (*(void *)(v17 + 8) >= 0xFFFFFFFFuLL)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      *(void *)unint64_t v17 = *(void *)v18;
      swift_retain();
      swift_release();
      *(void *)(v17 + 8) = *(void *)(v18 + 8);
      swift_retain();
      swift_release();
      if (v17 == v18) {
        goto LABEL_23;
      }
      unint64_t v20 = v17 + 16;
      unint64_t v21 = v18 + 16;
      outlined destroy of SelectionManagerBox<AnyHashable>(v17 + 16);
      int v22 = *(unsigned __int8 *)(v18 + 56);
      if (v22 != 2)
      {
        if (v22 != 1)
        {
LABEL_6:
          *(void *)(v17 + 16) = *(void *)v21;
          *(unsigned char *)(v17 + 56) = 0;
          swift_bridgeObjectRetain();
          goto LABEL_23;
        }
        goto LABEL_10;
      }
      goto LABEL_16;
    }
    swift_release();
    swift_release();
    int v25 = *(unsigned __int8 *)(v17 + 56);
    if (v25 == 2) {
      goto LABEL_18;
    }
    if (v25 != 1)
    {
      if (!*(unsigned char *)(v17 + 56)) {
        swift_bridgeObjectRelease();
      }
      goto LABEL_19;
    }
    if (*(void *)(v17 + 40)) {
LABEL_18:
    }
      __swift_destroy_boxed_opaque_existential_1(v17 + 16);
LABEL_19:
    long long v28 = *(_OWORD *)v18;
    long long v29 = *(_OWORD *)(v18 + 16);
    long long v30 = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(v17 + 41) = *(_OWORD *)(v18 + 41);
    *(_OWORD *)(v17 + 16) = v29;
    *(_OWORD *)(v17 + 32) = v30;
    *(_OWORD *)unint64_t v17 = v28;
    goto LABEL_23;
  }
  if (v19 < 0xFFFFFFFF) {
    goto LABEL_19;
  }
  *(void *)unint64_t v17 = *(void *)v18;
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  unint64_t v20 = v17 + 16;
  unint64_t v21 = v18 + 16;
  int v23 = *(unsigned __int8 *)(v18 + 56);
  swift_retain();
  swift_retain();
  if (v23 != 2)
  {
    if (v23 != 1) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v24 = *(void *)(v18 + 40);
    if (v24)
    {
      *(void *)(v17 + 40) = v24;
      *(void *)(v17 + 48) = *(void *)(v18 + 48);
      (**(void (***)(unint64_t, unint64_t))(v24 - 8))(v20, v21);
    }
    else
    {
      long long v31 = *(_OWORD *)v21;
      long long v32 = *(_OWORD *)(v21 + 16);
      *(void *)(v20 + 32) = *(void *)(v21 + 32);
      *(_OWORD *)unint64_t v20 = v31;
      *(_OWORD *)(v20 + 16) = v32;
    }
    char v27 = 1;
    goto LABEL_22;
  }
LABEL_16:
  uint64_t v26 = *(void *)(v18 + 40);
  *(void *)(v17 + 40) = v26;
  *(void *)(v17 + 48) = *(void *)(v18 + 48);
  (**(void (***)(unint64_t, unint64_t))(v26 - 8))(v20, v21);
  char v27 = 2;
LABEL_22:
  *(unsigned char *)(v17 + 56) = v27;
LABEL_23:
  unint64_t v33 = (void *)((v15 + 71) & 0xFFFFFFFFFFFFFFF8);
  long long v34 = (void *)((v16 + 71) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v35 = v34[1];
  if (v33[1] < 0xFFFFFFFFuLL)
  {
    if (v35 >= 0xFFFFFFFF)
    {
      void *v33 = *v34;
      v33[1] = v34[1];
      void v33[2] = v34[2];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_30;
    }
  }
  else
  {
    if (v35 >= 0xFFFFFFFF)
    {
      void *v33 = *v34;
      swift_retain();
      swift_release();
      v33[1] = v34[1];
      swift_retain();
      swift_release();
      void v33[2] = v34[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  long long v36 = *(_OWORD *)v34;
  void v33[2] = v34[2];
  *(_OWORD *)unint64_t v33 = v36;
LABEL_30:
  unint64_t v37 = (void *)(((unint64_t)v33 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v38 = (void *)(((unint64_t)v34 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v39 = v38[1];
  if (v37[1] < 0xFFFFFFFFuLL)
  {
    if (v39 >= 0xFFFFFFFF)
    {
      *unint64_t v37 = *v38;
      v37[1] = v38[1];
      void v37[2] = v38[2];
      _OWORD v37[3] = v38[3];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_36:
    long long v40 = *((_OWORD *)v38 + 1);
    *(_OWORD *)unint64_t v37 = *(_OWORD *)v38;
    *((_OWORD *)v37 + 1) = v40;
    return a1;
  }
  if (v39 < 0xFFFFFFFF)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_36;
  }
  *unint64_t v37 = *v38;
  swift_retain();
  swift_release();
  v37[1] = v38[1];
  swift_retain();
  swift_release();
  void v37[2] = v38[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _OWORD v37[3] = v38[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of SelectionManagerBox<AnyHashable>(uint64_t a1)
{
  _s7SwiftUI19SelectionManagerBoxOys11AnyHashableVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for CollectionViewTableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 32);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  unint64_t v17 = (_OWORD *)((v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = (long long *)((v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v20 = v18[1];
  long long v19 = v18[2];
  long long v21 = *v18;
  *(_OWORD *)((char *)v17 + 41) = *(long long *)((char *)v18 + 41);
  v17[1] = v20;
  _OWORD v17[2] = v19;
  *unint64_t v17 = v21;
  unint64_t v22 = (v15 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v16 + 71) & 0xFFFFFFFFFFFFFFF8;
  long long v24 = *(_OWORD *)v23;
  *(void *)(v22 + 16) = *(void *)(v23 + 16);
  *(_OWORD *)unint64_t v22 = v24;
  int v25 = (_OWORD *)((v22 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (_OWORD *)((v23 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v27 = v26[1];
  *int v25 = *v26;
  v25[1] = v27;
  return a1;
}

uint64_t assignWithTake for CollectionViewTableRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 24);
  uint64_t v15 = v14 + v12;
  uint64_t v16 = v14 + v13;
  unint64_t v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v17 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_11;
  }
  if (*(void *)(v18 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    int v21 = *(unsigned __int8 *)(v17 + 56);
    if (v21 == 2) {
      goto LABEL_10;
    }
    if (v21 != 1)
    {
      if (!*(unsigned char *)(v17 + 56)) {
        swift_bridgeObjectRelease();
      }
      goto LABEL_11;
    }
    if (*(void *)(v17 + 40)) {
LABEL_10:
    }
      __swift_destroy_boxed_opaque_existential_1(v17 + 16);
LABEL_11:
    long long v22 = *(_OWORD *)v18;
    long long v23 = *(_OWORD *)(v18 + 16);
    long long v24 = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(v17 + 41) = *(_OWORD *)(v18 + 41);
    *(_OWORD *)(v17 + 16) = v23;
    *(_OWORD *)(v17 + 32) = v24;
    *(_OWORD *)unint64_t v17 = v22;
    goto LABEL_12;
  }
  *(void *)unint64_t v17 = *(void *)v18;
  swift_release();
  *(void *)(v17 + 8) = *(void *)(v18 + 8);
  swift_release();
  if (v17 != v18)
  {
    outlined destroy of SelectionManagerBox<AnyHashable>(v17 + 16);
    long long v19 = *(_OWORD *)(v18 + 41);
    long long v20 = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(v17 + 16) = *(_OWORD *)(v18 + 16);
    *(_OWORD *)(v17 + 32) = v20;
    *(_OWORD *)(v17 + 41) = v19;
  }
LABEL_12:
  int v25 = (void *)((v15 + 71) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)((v16 + 71) & 0xFFFFFFFFFFFFFFF8);
  if (v25[1] >= 0xFFFFFFFFuLL)
  {
    if (v26[1] >= 0xFFFFFFFFuLL)
    {
      *int v25 = *v26;
      swift_release();
      v25[1] = v26[1];
      swift_release();
      _OWORD v25[2] = v26[2];
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  long long v27 = *(_OWORD *)v26;
  _OWORD v25[2] = v26[2];
  *(_OWORD *)int v25 = v27;
LABEL_17:
  unint64_t v28 = ((unint64_t)v25 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = ((unint64_t)v26 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v28 + 8) < 0xFFFFFFFFuLL)
  {
LABEL_21:
    long long v30 = *(_OWORD *)(v29 + 16);
    *(_OWORD *)unint64_t v28 = *(_OWORD *)v29;
    *(_OWORD *)(v28 + 16) = v30;
    return a1;
  }
  if (*(void *)(v29 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  *(void *)unint64_t v28 = *(void *)v29;
  swift_release();
  *(void *)(v28 + 8) = *(void *)(v29 + 8);
  swift_release();
  *(void *)(v28 + 16) = *(void *)(v29 + 16);
  swift_bridgeObjectRelease();
  *(void *)(v28 + 24) = *(void *)(v29 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CollectionViewTableRoot(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  if (v8 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v7 + 84);
  }
  if (v11 <= 0x7FFFFFFE) {
    unsigned int v11 = 2147483646;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  if (v11 < a2)
  {
    unint64_t v13 = ((((v10 + (v12 & ~v9) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32;
    unsigned int v14 = a2 - v11;
    uint64_t v15 = v13 & 0xFFFFFFF8;
    if ((v13 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v14 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v13);
        if (!v19) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v13);
        if (v19) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187F9B208);
      case 4:
        int v19 = *(int *)((char *)a1 + v13);
        if (!v19) {
          break;
        }
LABEL_24:
        int v21 = v19 - 1;
        if (v15)
        {
          int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        return v11 + (v22 | v21) + 1;
      default:
        break;
    }
  }
  if (v6 == v11) {
    return (*(uint64_t (**)(int *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v23 = ((unint64_t)a1 + v12) & ~v9;
  if (v8 == v11) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v23);
  }
  unint64_t v24 = *(void *)(((v10 + v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v24 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  if ((v24 + 1) >= 2) {
    return v24;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for CollectionViewTableRoot(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v12 = 2147483646;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + v10;
  unint64_t v14 = ((((v11 + (v13 & ~v10) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32;
  if (v12 >= a3)
  {
    int v18 = 0;
    int v19 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_19:
      switch(v18)
      {
        case 1:
          a1[v14] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v14] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_48;
        case 4:
          *(_DWORD *)&a1[v14] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v7 == v12)
            {
              unint64_t v23 = *(void (**)(void))(v6 + 56);
              v23();
            }
            else
            {
              unint64_t v24 = (unint64_t)&a1[v13] & ~v10;
              if (v9 == v12)
              {
                int v25 = *(void (**)(unint64_t))(v8 + 56);
                v25(v24);
              }
              else
              {
                unint64_t v26 = (v11 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
                if (a2 > 0x7FFFFFFE)
                {
                  double result = 0.0;
                  *(_OWORD *)(v26 + 41) = 0u;
                  *(_OWORD *)(v26 + 16) = 0u;
                  *(_OWORD *)(v26 + 32) = 0u;
                  *(_OWORD *)unint64_t v26 = 0u;
                  *(_DWORD *)unint64_t v26 = a2 - 0x7FFFFFFF;
                }
                else
                {
                  *(void *)(v26 + 8) = a2;
                }
              }
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v15 = a3 - v12;
    if (((((v11 + (v13 & ~v10) + 71) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) == 0xFFFFFFE0) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      int v17 = 4;
    }
    else {
      int v17 = 2;
    }
    if (v16 < 0x100) {
      int v17 = 1;
    }
    if (v16 >= 2) {
      int v18 = v17;
    }
    else {
      int v18 = 0;
    }
    int v19 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_19;
    }
  }
  if (((((v11 + (v13 & ~v10) + 71) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) == 0xFFFFFFE0) {
    int v20 = v19;
  }
  else {
    int v20 = 1;
  }
  if (((((v11 + (v13 & ~v10) + 71) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) != 0xFFFFFFE0)
  {
    unsigned int v21 = ~v12 + a2;
    bzero(a1, ((((v11 + (v13 & ~v10) + 71) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 32);
    *(_DWORD *)a1 = v21;
  }
  switch(v18)
  {
    case 1:
      a1[v14] = v20;
      break;
    case 2:
      *(_WORD *)&a1[v14] = v20;
      break;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x187F9B4DCLL);
    case 4:
      *(_DWORD *)&a1[v14] = v20;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for CollectionViewTableRoot()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **base witness table accessor for View in CollectionViewTableRoot<A, B, C>()
{
  return &protocol witness table for CollectionViewTableRoot<A, B, C>;
}

size_t specialized static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v39 = a8;
  long long v40 = a5;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  uint64_t v42 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v41 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  int v19 = (char *)&v37 - v18;
  uint64_t v20 = type metadata accessor for TableColumnCollection.Entry(0);
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20 - 8);
  unint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 && ((a4 & 1) == 0 || a3))
  {
    uint64_t v38 = v15;
    uint64_t v25 = outlined init with copy of TableColumnCollection(a1, (uint64_t)v44);
    MEMORY[0x1F4188790](v25);
    uint64_t v26 = v39;
    *(&v37 - 8) = a7;
    *(&v37 - 7) = v26;
    *((unsigned char *)&v37 - 48) = a4 & 1;
    *(&v37 - 5) = a2;
    *(&v37 - 4) = a3;
    *(&v37 - 3) = (uint64_t)v40;
    *(&v37 - 2) = a6;
    long long v27 = (void *)specialized Sequence.compactMap<A>(_:)((uint64_t)v44, (void (*)(uint64_t, char *))partial apply for specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:), (uint64_t)(&v37 - 10));
    outlined destroy of EnumeratedSequence<TableColumnCollection>((uint64_t)v44);
    v44[0] = v27;
    if (a3)
    {
      swift_bridgeObjectRetain();
      specialized MutableCollection<>.sort(by:)(v44, a3);
      swift_bridgeObjectRelease();
      long long v27 = v44[0];
    }
    int64_t v28 = v27[2];
    uint64_t v29 = MEMORY[0x1E4FBC860];
    if (v28)
    {
      uint64_t v43 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
      uint64_t v30 = *(unsigned __int8 *)(v38 + 80);
      long long v40 = v27;
      uint64_t v31 = (uint64_t)v27 + ((v30 + 32) & ~v30);
      uint64_t v32 = *(void *)(v38 + 72);
      do
      {
        outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v31, (uint64_t)v19, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
        uint64_t v33 = *(int *)(v42 + 48);
        uint64_t v34 = (uint64_t)&v41[v33];
        outlined init with copy of TableColumnCollection.Entry((uint64_t)&v19[v33], (uint64_t)&v41[v33]);
        outlined init with take of TableCellFormula(v34, (uint64_t)v23, type metadata accessor for TableColumnCollection.Entry);
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        uint64_t v29 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v29 + 16) + 1, 1);
          uint64_t v29 = v43;
        }
        unint64_t v36 = *(void *)(v29 + 16);
        unint64_t v35 = *(void *)(v29 + 24);
        if (v36 >= v35 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
          uint64_t v29 = v43;
        }
        *(void *)(v29 + 16) = v36 + 1;
        outlined init with take of TableCellFormula((uint64_t)v23, v29+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v36, type metadata accessor for TableColumnCollection.Entry);
        v31 += v32;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return v29;
  }
  else
  {
    return specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  }
}

uint64_t specialized static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  uint64_t v41 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  long long v40 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  int v19 = (char *)&v37 - v18;
  uint64_t v20 = type metadata accessor for TableCellFormula();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20 - 8);
  unint64_t v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 && ((a4 & 1) == 0 || a3))
  {
    uint64_t v37 = v15;
    MEMORY[0x1F4188790](v22);
    uint64_t v25 = v39;
    *(&v37 - 8) = v38;
    *(&v37 - 7) = (uint64_t)v25;
    *((unsigned char *)&v37 - 48) = a4 & 1;
    *(&v37 - 5) = a2;
    *(&v37 - 4) = a3;
    *(&v37 - 3) = a5;
    *(&v37 - 2) = a6;
    uint64_t v26 = swift_bridgeObjectRetain();
    long long v27 = specialized Sequence.compactMap<A>(_:)(v26, (void (*)(uint64_t, uint64_t))partial apply for specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:), (uint64_t)(&v37 - 10));
    swift_bridgeObjectRelease();
    uint64_t v43 = v27;
    if (a3)
    {
      swift_bridgeObjectRetain();
      specialized MutableCollection<>.sort(by:)(&v43, a3);
      swift_bridgeObjectRelease();
      long long v27 = v43;
    }
    int64_t v28 = v27[2];
    a1 = MEMORY[0x1E4FBC860];
    if (v28)
    {
      uint64_t v42 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
      uint64_t v29 = *(unsigned __int8 *)(v37 + 80);
      uint64_t v39 = v27;
      uint64_t v30 = (uint64_t)v27 + ((v29 + 32) & ~v29);
      uint64_t v31 = *(void *)(v37 + 72);
      do
      {
        outlined init with copy of (index: Int, element: TableCellFormula, id: TableColumnCustomizationID)(v30, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
        uint64_t v32 = *(int *)(v41 + 48);
        uint64_t v33 = (uint64_t)&v40[v32];
        outlined init with copy of TableCellFormula((uint64_t)&v19[v32], (uint64_t)&v40[v32]);
        outlined init with take of TableCellFormula(v33, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
        outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableCellFormula, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
        a1 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16) + 1, 1);
          a1 = v42;
        }
        unint64_t v35 = *(void *)(a1 + 16);
        unint64_t v34 = *(void *)(a1 + 24);
        if (v35 >= v34 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
          a1 = v42;
        }
        *(void *)(a1 + 16) = v35 + 1;
        outlined init with take of TableCellFormula((uint64_t)v24, a1+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v35, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
        v30 += v31;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t specialized ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  TableDataSourceAdaptor.contextForItem(index:)(a1, a2, (uint64_t)v17);
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?);
  if ((void)v14)
  {
    v11[10] = v15;
    v12[0] = v16[0];
    *(_OWORD *)((char *)v12 + 11) = *(_OWORD *)((char *)v16 + 11);
    v11[6] = v13[6];
    v11[7] = v13[7];
    v11[8] = v13[8];
    v11[9] = v14;
    void v11[2] = v13[2];
    v11[3] = v13[3];
    v11[4] = v13[4];
    v11[5] = v13[5];
    v11[0] = v13[0];
    v11[1] = v13[1];
    specialized _RowVisitationContext.selectionValue(respectSelectionDisabled:)(a3 & 1, (uint64_t)&v8);
    if (*((void *)&v9 + 1))
    {
      long long v18 = v8;
      long long v19 = v9;
      uint64_t v20 = v10;
      outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v11);
      uint64_t result = _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?);
      long long v7 = v19;
      *(_OWORD *)a4 = v18;
      *(_OWORD *)(a4 + 16) = v7;
      *(void *)(a4 + 32) = v20;
      return result;
    }
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v11);
  }
  else
  {
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
  }
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?);
  *(void *)(a4 + 32) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
}

uint64_t specialized ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  specialized ShadowListDataSource.contextForItem(index:)(a1, a2, (uint64_t)v17);
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v17, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?);
  if ((void)v14)
  {
    v11[10] = v15;
    v12[0] = v16[0];
    *(_OWORD *)((char *)v12 + 11) = *(_OWORD *)((char *)v16 + 11);
    v11[6] = v13[6];
    v11[7] = v13[7];
    v11[8] = v13[8];
    v11[9] = v14;
    void v11[2] = v13[2];
    v11[3] = v13[3];
    v11[4] = v13[4];
    v11[5] = v13[5];
    v11[0] = v13[0];
    v11[1] = v13[1];
    specialized _RowVisitationContext.selectionValue(respectSelectionDisabled:)(a3 & 1, (uint64_t)&v8);
    if (*((void *)&v9 + 1))
    {
      long long v18 = v8;
      long long v19 = v9;
      uint64_t v20 = v10;
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
      uint64_t result = _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?);
      long long v7 = v19;
      *(_OWORD *)a4 = v18;
      *(_OWORD *)(a4 + 16) = v7;
      *(void *)(a4 + 32) = v20;
      return result;
    }
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
  }
  else
  {
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
  }
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?);
  *(void *)(a4 + 32) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
}

uint64_t specialized _RowVisitationContext.selectionValue(respectSelectionDisabled:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  v8[0] = *(void *)(v2 + 152);
  char v12 = 1;
  uint64_t result = ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v9 & 1) != 0 || (a1 & 1) == 0)
  {
    outlined init with copy of CollectionDifference<AnyHashable>.Change(v2 + 160, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v2, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _RowVisitationContext);
    if (*((void *)&v10 + 1))
    {
      uint64_t result = outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v8);
      long long v6 = v10;
      *(_OWORD *)a2 = v9;
      *(_OWORD *)(a2 + 16) = v6;
      *(void *)(a2 + 32) = v11;
    }
    else
    {
      uint64_t v7 = v8[19];
      swift_bridgeObjectRetain();
      specialized ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)(1, v7, a2);
      swift_bridgeObjectRelease();
      outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v8);
      return outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    }
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  long long v6;
  void v7[26];
  long long v8;
  long long v9;
  uint64_t v10;
  char v11;

  v7[0] = *(void *)(v2 + 152);
  uint64_t v11 = 1;
  uint64_t result = ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v8 & 1) != 0 || (a1 & 1) == 0)
  {
    outlined init with copy of CollectionDifference<AnyHashable>.Change(v2 + 160, (uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
    if (*((void *)&v9 + 1))
    {
      uint64_t result = _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
      long long v6 = v9;
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v6;
      *(void *)(a2 + 32) = v10;
    }
    else
    {
      specialized ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)(1, v7[19], a2);
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
      return outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    }
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t specialized ViewTraitCollection.listSelectionIdentityValue<A>(for:respectSelectionDisabled:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)&long long v12 = a2;
  uint64_t result = ViewTraitCollection.isAuxiliaryContent.getter();
  if ((result & 1) == 0)
  {
    *(void *)&long long v12 = a2;
    uint64_t result = ViewTraitCollection.value<A>(for:defaultValue:)();
    if ((v11 & 1) != 0 || (a1 & 1) == 0)
    {
      uint64_t result = ViewTraitCollection.tag<A>(for:)();
      if (*((void *)&v13 + 1))
      {
        long long v7 = v13;
        *(_OWORD *)a3 = v12;
        *(_OWORD *)(a3 + 16) = v7;
        *(void *)(a3 + 32) = v14;
        return result;
      }
      outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)&v12, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
      uint64_t result = ViewTraitCollection.value<A>(for:defaultValue:)();
      long long v8 = v12;
      uint64_t v9 = v13;
      if ((void)v12)
      {
        if ((void)v12 != 1)
        {
          long long v10 = *(void (**)(void, void))(*(void *)v12 + 120);
          swift_retain();
          v10(MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB960]);
          outlined consume of NavigationLinkSelectionIdentifier?(v8, *((uint64_t *)&v8 + 1), v9);
          return swift_release();
        }
      }
      else
      {
        uint64_t result = outlined consume of NavigationLinkSelectionIdentifier?(0, *((uint64_t *)&v12 + 1), v13);
      }
    }
  }
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

uint64_t specialized SelectionManagerBox.isSelected(_:)(uint64_t a1)
{
  outlined init with copy of SelectionManagerBox<AnyHashable>(v1, (uint64_t)v23);
  if (!v25)
  {
    char v5 = specialized Set.contains(_:)(a1, *(uint64_t *)&v23[0]);
    swift_bridgeObjectRelease();
    return v5 & 1;
  }
  if (v25 != 1)
  {
    long long v15 = v23[0];
    long long v16 = v23[1];
    uint64_t v17 = v24;
    char v5 = MEMORY[0x18C1174E0](&v15, a1);
    outlined destroy of AnyHashable((uint64_t)&v15);
    return v5 & 1;
  }
  uint64_t v3 = MEMORY[0x1E4FBB960];
  uint64_t v4 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _ss11AnyHashableVSgWObTm_2((uint64_t)v23, (uint64_t)v22, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for MutableBox<UInt32>);
  outlined init with copy of AnyHashable(a1, (uint64_t)v21);
  outlined init with copy of CollectionDifference<AnyHashable>.Change((uint64_t)v22, (uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v3, v4);
  outlined init with copy of CollectionDifference<AnyHashable>.Change((uint64_t)v21, (uint64_t)&v18, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v3, v4);
  if (!*((void *)&v16 + 1))
  {
    uint64_t v7 = MEMORY[0x1E4FBB960];
    long long v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v7, v8);
    if (!*((void *)&v19 + 1))
    {
      outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
      char v5 = 1;
      return v5 & 1;
    }
LABEL_11:
    _ss11AnyHashableVSg_ACtWOhTm_0((uint64_t)&v15, (uint64_t)&lazy cache variable for type metadata for (AnyHashable?, AnyHashable?), (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], (uint64_t (*)(void))type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?));
    char v5 = 0;
    return v5 & 1;
  }
  outlined init with copy of CollectionDifference<AnyHashable>.Change((uint64_t)&v15, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
  if (!*((void *)&v19 + 1))
  {
    uint64_t v9 = MEMORY[0x1E4FBB960];
    long long v10 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v9, v10);
    outlined destroy of AnyHashable((uint64_t)v14);
    goto LABEL_11;
  }
  v12[0] = v18;
  v12[1] = v19;
  uint64_t v13 = v20;
  char v5 = MEMORY[0x18C1174E0](v14, v12);
  outlined destroy of AnyHashable((uint64_t)v12);
  long long v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v3, MEMORY[0x1E4FBB718]);
  outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v3, v6);
  outlined destroy of AnyHashable((uint64_t)v14);
  outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, v3, v6);
  return v5 & 1;
}

uint64_t specialized SelectionManagerBox.select(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  outlined init with take of SelectionManagerBox<AnyHashable>(v2, (uint64_t)v9);
  if (v10)
  {
    if (v10 == 1)
    {
      outlined init with copy of AnyHashable(a1, v2);
      char v4 = 1;
    }
    else
    {
      outlined init with copy of AnyHashable(a1, v2);
      char v4 = 2;
    }
    *(unsigned char *)(v2 + 40) = v4;
    return outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)v9);
  }
  else
  {
    uint64_t v8 = v9[0];
    outlined init with copy of AnyHashable(a1, (uint64_t)v6);
    specialized Set._Variant.insert(_:)((uint64_t)v7, (uint64_t)v6);
    uint64_t result = outlined destroy of AnyHashable((uint64_t)v7);
    *(void *)uint64_t v2 = v8;
    *(unsigned char *)(v2 + 40) = 0;
  }
  return result;
}

double specialized static CollectionViewListUtilities.makeOutputs<A, B>(inputs:coordinator:coordinatorKind:)@<D0>(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, void *a4@<X8>)
{
  LODWORD(v103) = a2;
  long long v104 = a4;
  uint64_t v121 = *MEMORY[0x1E4F143B8];
  LODWORD(v102) = a3 & 1;
  _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_0(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, type metadata accessor for BridgedListState.ScrollTarget, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v93 - v6;
  uint64_t v8 = (int *)type metadata accessor for BridgedListState(0);
  MEMORY[0x1F4188790](v8);
  char v10 = (double *)((char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v112 = *(void *)(a1 + 48);
  int v113 = *(_DWORD *)(a1 + 56);
  *(void *)&v114[0] = *(void *)(a1 + 48);
  DWORD2(v114[0]) = *(_DWORD *)(a1 + 56);
  int v11 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  int v106 = v11;
  if (v11)
  {
    static ScrollGeometry.zero.getter();
    uint64_t v13 = *((void *)&v114[0] + 1);
    uint64_t v12 = *(void *)&v114[0];
    uint64_t v15 = *((void *)&v114[1] + 1);
    uint64_t v14 = *(void *)&v114[1];
    uint64_t v17 = *((void *)&v114[2] + 1);
    uint64_t v16 = *(void *)&v114[2];
    uint64_t v19 = *((void *)&v114[3] + 1);
    uint64_t v18 = *(void *)&v114[3];
    unint64_t v21 = *((void *)&v114[4] + 1);
    uint64_t v20 = *(void *)&v114[4];
    uint64_t v22 = v115;
    uint64_t v23 = v116;
    uint64_t v24 = v117;
    uint64_t v25 = v118;
  }
  uint64_t v93 = v16;
  uint64_t v94 = v17;
  uint64_t v95 = v18;
  uint64_t v96 = v19;
  uint64_t v97 = v20;
  unint64_t v98 = v21;
  uint64_t v99 = v22;
  uint64_t v100 = v23;
  uint64_t v101 = v24;
  uint64_t v105 = v25;
  uint64_t v26 = type metadata accessor for BridgedListState.ScrollTarget(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v7, 1, 1, v26);
  char v27 = static SemanticFeature.isEnabled.getter();
  double v28 = 15.0;
  if (v27) {
    double v28 = 16.0;
  }
  *char v10 = v28;
  _ss11AnyHashableVSgWObTm_2((uint64_t)v7, (uint64_t)v10 + v8[5], (uint64_t)&lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (uint64_t)type metadata accessor for BridgedListState.ScrollTarget, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_0);
  uint64_t v29 = (char *)v10 + v8[6];
  *(void *)uint64_t v29 = v12;
  *((void *)v29 + 1) = v13;
  *((void *)v29 + 2) = v14;
  *((void *)v29 + 3) = v15;
  uint64_t v30 = v94;
  *((void *)v29 + 4) = v93;
  *((void *)v29 + 5) = v30;
  uint64_t v31 = v96;
  *((void *)v29 + 6) = v95;
  *((void *)v29 + 7) = v31;
  unint64_t v32 = v98;
  *((void *)v29 + 8) = v97;
  *((void *)v29 + 9) = v32;
  uint64_t v33 = v100;
  *((void *)v29 + 10) = v99;
  *((void *)v29 + 11) = v33;
  uint64_t v34 = v105;
  *((void *)v29 + 12) = v101;
  *((void *)v29 + 13) = v34;
  v29[112] = (v106 & 1) == 0;
  *(_DWORD *)((char *)v10 + v8[7]) = 0;
  type metadata accessor for External<BridgedListState>(0);
  lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem((unint64_t *)&lazy protocol witness table cache variable for type External<BridgedListState> and conformance External<A>, type metadata accessor for External<BridgedListState>);
  int v106 = Attribute.init<A>(body:value:flags:update:)();
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v10, type metadata accessor for BridgedListState);
  long long v35 = *(_OWORD *)(a1 + 16);
  v114[0] = *(_OWORD *)a1;
  v114[1] = v35;
  v114[2] = *(_OWORD *)(a1 + 32);
  unsigned int v36 = _GraphInputs.scrollPhaseState.getter();
  LODWORD(v101) = *MEMORY[0x1E4F4E7A0];
  if (v36 == v101)
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    ScrollPhaseState.init(phase:velocity:)();
    v119[0] = v114[0];
    *(_OWORD *)&v119[8] = *(_OWORD *)((char *)v114 + 8);
    type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for External<ScrollPhaseState>, MEMORY[0x1E4F3FD68], MEMORY[0x1E4F4E778]);
    lazy protocol witness table accessor for type External<ScrollPhaseState> and conformance External<A>();
    unsigned int v36 = Attribute.init<A>(body:value:flags:update:)();
  }
  LODWORD(v114[0]) = v106;
  swift_unknownObjectWeakInit();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UpdateBridgedState and conformance UpdateBridgedState();
  unsigned int v37 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of UpdateBridgedState((uint64_t)v114);
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  uint64_t v38 = swift_unknownObjectWeakInit();
  outlined init with take of ListScrollViewProvider(v38, (uint64_t)v114);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for UIScrollView?();
  lazy protocol witness table accessor for type ListScrollViewProvider and conformance ListScrollViewProvider();
  int v39 = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v105) = v39;
  outlined destroy of ListScrollViewProvider((uint64_t)v114);
  uint64_t v100 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  type metadata accessor for External<Scrollable>();
  lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem((unint64_t *)&lazy protocol witness table cache variable for type External<Scrollable> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<Scrollable>);
  LODWORD(v99) = Attribute.init<A>(body:value:flags:update:)();
  LODWORD(v114[0]) = v103;
  BYTE4(v114[0]) = v102;
  *((void *)&v114[0] + 1) = __PAIR64__(v36, v37);
  LODWORD(v114[1]) = v39;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, (unint64_t *)&lazy cache variable for type metadata for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ListRepresentable);
  type metadata accessor for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, &lazy cache variable for type metadata for MakeRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for MakeRepresentable);
  lazy protocol witness table accessor for type CollectionViewListScrollable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>> and conformance CollectionViewListScrollable<A, B>(&lazy protocol witness table cache variable for type MakeRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>> and conformance MakeRepresentable<A, B>, &lazy cache variable for type metadata for MakeRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for MakeRepresentable);
  Attribute.init<A>(body:value:flags:update:)();
  long long v40 = *(_OWORD *)(a1 + 48);
  v114[2] = *(_OWORD *)(a1 + 32);
  v114[3] = v40;
  v114[4] = *(_OWORD *)(a1 + 64);
  LODWORD(v115) = *(_DWORD *)(a1 + 80);
  long long v41 = *(_OWORD *)(a1 + 16);
  v114[0] = *(_OWORD *)a1;
  v114[1] = v41;
  outlined retain of _ViewInputs(a1);
  _ViewInputs.scrollable.setter();
  _GraphInputs.scrollPhaseState.setter();
  PreferencesInputs.remove<A>(_:)();
  _GraphValue.init(_:)();
  *(void *)uint64_t v119 = *(void *)&v114[0];
  *(_DWORD *)&v119[8] = DWORD2(v114[0]);
  *(void *)&v119[16] = *(void *)&v114[1];
  *(_OWORD *)&v119[24] = *(_OWORD *)((char *)&v114[1] + 8);
  *(_OWORD *)&v119[40] = *(_OWORD *)((char *)&v114[2] + 8);
  *(_OWORD *)&v119[56] = *(_OWORD *)((char *)&v114[3] + 8);
  *(void *)&v119[72] = *((void *)&v114[4] + 1);
  int v120 = v115;
  static View.makeDebuggableView(view:inputs:)();
  unint64_t v42 = AGCreateWeakAttribute();
  int v43 = v42;
  unint64_t v103 = HIDWORD(v42);
  unint64_t v44 = AGCreateWeakAttribute();
  int v45 = v44;
  unint64_t v102 = HIDWORD(v44);
  unint64_t v46 = AGCreateWeakAttribute();
  int v47 = v46;
  unint64_t v98 = HIDWORD(v46);
  *(_OWORD *)uint64_t v119 = v111;
  _ViewOutputs.subscript.getter();
  unint64_t v48 = AGCreateWeakAttribute();
  int v49 = v48;
  unint64_t v50 = HIDWORD(v48);
  type metadata accessor for MutableBox<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4F3F398]);
  uint64_t v51 = swift_allocObject();
  *(_DWORD *)(v51 + 16) = 0;
  type metadata accessor for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, &lazy cache variable for type metadata for CollectionViewListScrollable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for CollectionViewListScrollable);
  *(void *)&v119[24] = v52;
  *(void *)&v119[32] = lazy protocol witness table accessor for type CollectionViewListScrollable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>> and conformance CollectionViewListScrollable<A, B>(&lazy protocol witness table cache variable for type CollectionViewListScrollable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>> and conformance CollectionViewListScrollable<A, B>, &lazy cache variable for type metadata for CollectionViewListScrollable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for CollectionViewListScrollable);
  uint64_t v53 = swift_allocObject();
  *(void *)uint64_t v119 = v53;
  int v54 = v103;
  *(_DWORD *)(v53 + 16) = v43;
  *(_DWORD *)(v53 + 20) = v54;
  int v55 = v102;
  *(_DWORD *)(v53 + 24) = v45;
  *(_DWORD *)(v53 + 28) = v55;
  int v56 = v98;
  *(_DWORD *)(v53 + 32) = v47;
  *(_DWORD *)(v53 + 36) = v56;
  *(_DWORD *)(v53 + 40) = v49;
  *(_DWORD *)(v53 + 44) = v50;
  *(void *)(v53 + 48) = v51;
  AGGraphSetValue();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v119);
  *(void *)uint64_t v119 = v112;
  *(_DWORD *)&v119[8] = v113;
  char v57 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(void *)uint64_t v119 = v112;
  *(_DWORD *)&v119[8] = v113;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0 || (v57)
  {
    UnaryScrollablePreferenceProvider.init(scrollable:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [Scrollable]();
    lazy protocol witness table accessor for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider();
    int v58 = Attribute.init<A>(body:value:flags:update:)();
    v119[0] = 0;
    _ViewOutputs.subscript.setter();
    if (v57)
    {
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
      uint64_t v59 = Dictionary.init(minimumCapacity:)();
      v119[0] = 0;
      *(_DWORD *)&v119[4] = v58;
      *(void *)&v119[8] = v59;
      type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      _GraphValue.init(_:)();
      int v60 = v107;
      long long v61 = v111;
      *(void *)uint64_t v119 = v112;
      *(_DWORD *)&v119[8] = v113;
      swift_bridgeObjectRetain();
      char v62 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
      if (v62) {
        specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v60, (long long *)a1, v61, *((unint64_t *)&v61 + 1), 0);
      }
      swift_bridgeObjectRelease();
      v119[0] = (v62 & 1) == 0;
      _ViewOutputs.subscript.setter();
    }
  }
  *(_DWORD *)uint64_t v119 = v106;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollGeometryProvider and conformance ScrollGeometryProvider();
  Attribute.init<A>(body:value:flags:update:)();
  long long v63 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v119[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v119[48] = v63;
  *(_OWORD *)&v119[64] = *(_OWORD *)(a1 + 64);
  int v120 = *(_DWORD *)(a1 + 80);
  long long v64 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v119 = *(_OWORD *)a1;
  *(_OWORD *)&v119[16] = v64;
  _ViewInputs.position.getter();
  long long v65 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v119[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v119[48] = v65;
  *(_OWORD *)&v119[64] = *(_OWORD *)(a1 + 64);
  int v120 = *(_DWORD *)(a1 + 80);
  long long v66 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v119 = *(_OWORD *)a1;
  *(_OWORD *)&v119[16] = v66;
  _ViewInputs.transform.getter();
  ScrollGeometryTransformProvider.init(position:transform:)();
  uint64_t v107 = *(void *)v119;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollGeometryTransformProvider and conformance ScrollGeometryTransformProvider();
  Attribute.init<A>(body:value:flags:update:)();
  long long v67 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v119[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v119[48] = v67;
  *(_OWORD *)&v119[64] = *(_OWORD *)(a1 + 64);
  int v120 = *(_DWORD *)(a1 + 80);
  long long v68 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v119 = *(_OWORD *)a1;
  *(_OWORD *)&v119[16] = v68;
  LOBYTE(v107) = 2;
  char v110 = 0;
  _ViewInputs.intern<A>(_:id:)();
  ScrollGeometryStateProvider.init(geometry:scrollableAxes:transform:)();
  uint64_t v107 = *(void *)v119;
  LODWORD(v108) = *(_DWORD *)&v119[8];
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  uint64_t v69 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
  type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for [ScrollGeometryState], MEMORY[0x1E4F40498], MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type ScrollGeometryStateProvider and conformance ScrollGeometryStateProvider();
  uint64_t v70 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)uint64_t v119 = v112;
  *(_DWORD *)&v119[8] = v113;
  MEMORY[0x1F4188790](v70);
  *((_DWORD *)&v93 - 4) = v71;
  outlined retain of [Text.Modifier]((uint64_t)&v112);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  long long v72 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v119[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v119[48] = v72;
  *(_OWORD *)&v119[64] = *(_OWORD *)(a1 + 64);
  int v120 = *(_DWORD *)(a1 + 80);
  long long v73 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v119 = *(_OWORD *)a1;
  *(_OWORD *)&v119[16] = v73;
  _ViewInputs.environment.getter();
  long long v74 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v119[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v119[48] = v74;
  *(_OWORD *)&v119[64] = *(_OWORD *)(a1 + 64);
  int v120 = *(_DWORD *)(a1 + 80);
  long long v75 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v119 = *(_OWORD *)a1;
  *(_OWORD *)&v119[16] = v75;
  _ViewInputs.size.getter();
  long long v76 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v119[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v119[48] = v76;
  *(_OWORD *)&v119[64] = *(_OWORD *)(a1 + 64);
  int v120 = *(_DWORD *)(a1 + 80);
  long long v77 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v119 = *(_OWORD *)a1;
  *(_OWORD *)&v119[16] = v77;
  _ViewInputs.position.getter();
  long long v78 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v119[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v119[48] = v78;
  *(_OWORD *)&v119[64] = *(_OWORD *)(a1 + 64);
  int v120 = *(_DWORD *)(a1 + 80);
  long long v79 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v119 = *(_OWORD *)a1;
  *(_OWORD *)&v119[16] = v79;
  _ViewInputs.transform.getter();
  long long v80 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v119[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v119[48] = v80;
  *(_OWORD *)&v119[64] = *(_OWORD *)(a1 + 64);
  int v120 = *(_DWORD *)(a1 + 80);
  long long v81 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v119 = *(_OWORD *)a1;
  *(_OWORD *)&v119[16] = v81;
  _ViewInputs.safeAreaInsets.getter();
  ResolvedSafeAreaInsets.init(regions:environment:size:position:transform:safeAreaInsets:)();
  uint64_t v107 = *(void *)v119;
  long long v108 = *(_OWORD *)&v119[8];
  int v109 = *(_DWORD *)&v119[24];
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ResolvedSafeAreaInsets and conformance ResolvedSafeAreaInsets();
  int v82 = Attribute.init<A>(body:value:flags:update:)();
  long long v83 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v119[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v119[48] = v83;
  *(_OWORD *)&v119[64] = *(_OWORD *)(a1 + 64);
  int v120 = *(_DWORD *)(a1 + 80);
  long long v84 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v119 = *(_OWORD *)a1;
  *(_OWORD *)&v119[16] = v84;
  int v85 = _ViewInputs.position.getter();
  long long v86 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v119[32] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v119[48] = v86;
  *(_OWORD *)&v119[64] = *(_OWORD *)(a1 + 64);
  int v120 = *(_DWORD *)(a1 + 80);
  long long v87 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v119 = *(_OWORD *)a1;
  *(_OWORD *)&v119[16] = v87;
  int v88 = _ViewInputs.size.getter();
  *(_DWORD *)uint64_t v119 = v105;
  *(_DWORD *)&v119[4] = v85;
  *(_DWORD *)&v119[8] = v88;
  *(_DWORD *)&v119[12] = v82;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for MutableBox<UInt32>(0, &lazy cache variable for type metadata for [ContentScrollViewBox], (uint64_t)&type metadata for ContentScrollViewBox, v69);
  lazy protocol witness table accessor for type ScrollViewPreferenceProvider and conformance ScrollViewPreferenceProvider();
  uint64_t v89 = Attribute.init<A>(body:value:flags:update:)();
  *(void *)uint64_t v119 = v112;
  *(_DWORD *)&v119[8] = v113;
  MEMORY[0x1F4188790](v89);
  *((_DWORD *)&v93 - 4) = v90;
  outlined retain of [Text.Modifier]((uint64_t)&v112);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v91 = v104;
  *long long v104 = v111;
  double result = *((double *)&v111 + 1);
  v91[1] = *((void *)&v111 + 1);
  return result;
}

void specialized UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v77 = a4;
  uint64_t v78 = a3;
  uint64_t v79 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v63[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v63[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  MEMORY[0x1F4188790](v14);
  MEMORY[0x1F4188790](v15);
  uint64_t v20 = (void *)MEMORY[0x1E4FBC8C8];
  if ((*((unsigned char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0xC0)) & 1) == 0)
  {
    uint64_t v69 = &v63[-v17];
    uint64_t v70 = v19;
    uint64_t v71 = v18;
    long long v72 = a1;
    uint64_t v73 = v16;
    long long v74 = v13;
    uint64_t v75 = v11;
    long long v76 = v9;
    uint64_t v65 = v10;
    uint64_t v66 = v7;
    uint64_t v67 = v6;
    uint64_t v21 = v79;
    int v22 = *(unsigned __int8 *)(v79 + 168);
    outlined init with copy of TableDataSourceAdaptor(v79, (uint64_t)v80);
    int v23 = (v81 != 2) & ~v22;
    outlined destroy of TableDataSourceAdaptor((uint64_t)v80);
    uint64_t v24 = (uint64_t)v4 + *(void *)((*v20 & *v4) + 0x88);
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v24, (uint64_t)v80, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v80, (uint64_t)v84);
    int v25 = v84[168];
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v84, (uint64_t)v86);
    int v26 = (v86[169] != 2) & ~v25;
    outlined destroy of TableDataSourceAdaptor((uint64_t)v86);
    outlined destroy of TableDataSourceAdaptor((uint64_t)v84);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v80);
    int v64 = v23;
    int v27 = v23 ^ v26;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v24, (uint64_t)v86, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v86, (uint64_t)v80, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
    specialized ShadowSectionCollection.init(_:)(v80, (uint64_t)v84);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v86);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v84, (uint64_t)v80, &lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowSectionCollection);
    uint64_t v82 = 0;
    uint64_t v83 = v85;
    outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v84);
    double v28 = v4;
    specialized Sequence.first(where:)((uint64_t)v80, v28);
    char v30 = v29;
    long long v68 = v28;

    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v80, (uint64_t (*)(void))type metadata accessor for DefaultIndices<ShadowSectionCollection<TableDataSourceAdaptor>>);
    uint64_t v31 = outlined init with copy of TableDataSourceAdaptor(v21, (uint64_t)v84);
    if (v30)
    {
      MEMORY[0x1F4188790](v31);
      *(void *)&v63[-16] = v84;
      specialized Sequence.first(where:)((uint64_t)partial apply for specialized closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:), (uint64_t)&v63[-32], 0, v32);
      if ((v33 & 1) == 0) {
        int v27 = 1;
      }
    }
    outlined destroy of TableDataSourceAdaptor((uint64_t)v84);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v24, (uint64_t)v80, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v80, (uint64_t)v86);
    uint64_t v34 = v71;
    long long v35 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v71 + 104);
    unsigned int v36 = *MEMORY[0x1E4FB10D0];
    unsigned int v37 = *MEMORY[0x1E4FB10C8];
    if (v86[168]) {
      uint64_t v38 = v36;
    }
    else {
      uint64_t v38 = v37;
    }
    int v39 = v27;
    long long v40 = v69;
    uint64_t v41 = v73;
    v35(v69, v38, v73);
    outlined destroy of TableDataSourceAdaptor((uint64_t)v86);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v80);
    uint64_t v42 = v79;
    if (*(unsigned char *)(v79 + 168)) {
      uint64_t v43 = v36;
    }
    else {
      uint64_t v43 = v37;
    }
    unint64_t v44 = v70;
    v35(v70, v43, v41);
    lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type UICollectionLayoutListConfiguration.Appearance and conformance UICollectionLayoutListConfiguration.Appearance, MEMORY[0x1E4FB10E8]);
    char v45 = dispatch thunk of static Equatable.== infix(_:_:)();
    unint64_t v46 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v46((uint64_t)v44, v41);
    v46((uint64_t)v40, v41);
    int v47 = v72;
    specialized UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(v72, v42, v78, v77 & 1);
    uint64_t v48 = v75;
    int v49 = v76;
    unint64_t v50 = v74;
    if ((v45 & 1) == 0 || v39)
    {
      id v51 = objc_msgSend(v47, sel_collectionViewLayout);
      objc_msgSend(v51, sel_invalidateLayout);

      if (v39)
      {
        id v52 = objc_msgSend(v47, sel_collectionViewLayout);
        self;
        uint64_t v53 = (void *)swift_dynamicCastObjCClassUnconditional();
        char v54 = v64;
        uint64_t v55 = v48;
        id v56 = specialized UICollectionViewListCoordinator.layoutConfiguration(hasGlobalHeader:)(v64);
        objc_msgSend(v53, sel_setConfiguration_, v56);

        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
        char v57 = (void *)static OS_dispatch_queue.main.getter();
        uint64_t v58 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v59 = swift_allocObject();
        *(void *)(v59 + 16) = v58;
        *(void *)(v59 + 24) = v47;
        *(unsigned char *)(v59 + 32) = v54;
        v80[4] = partial apply for specialized closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:);
        v80[5] = v59;
        v80[0] = MEMORY[0x1E4F143A8];
        v80[1] = 1107296256;
        v80[2] = thunk for @escaping @callee_guaranteed () -> ();
        v80[3] = &block_descriptor_64;
        int v60 = _Block_copy(v80);
        id v61 = v47;
        swift_release();
        static DispatchQoS.unspecified.getter();
        v80[0] = MEMORY[0x1E4FBC860];
        lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
        type metadata accessor for [DispatchWorkItemFlags]();
        lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (void (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags]);
        uint64_t v62 = v67;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x18C116870](0, v50, v49, v60);
        _Block_release(v60);

        (*(void (**)(unsigned char *, uint64_t))(v66 + 8))(v49, v62);
        (*(void (**)(unsigned char *, uint64_t))(v55 + 8))(v50, v65);
      }
    }
  }
}

uint64_t specialized Collection.index(atOffset:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 208);
  if (result < 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(v1 + 208);
    while (1)
    {
      uint64_t v4 = *(void *)(v1 + 208);
      if (v6 != v2)
      {
        uint64_t v4 = v6 - 1;
        if (__OFSUB__(v6, 1)) {
          break;
        }
      }
      --v5;
      uint64_t v6 = v4;
      if (v5 <= result) {
        return v4;
      }
    }
    __break(1u);
    return v2;
  }
  if (!result) {
    return v2;
  }
  unint64_t v3 = result - 1;
  uint64_t v4 = *(void *)(v1 + 208);
  while ((v2 ^ 0x7FFFFFFFFFFFFFFFuLL) > v3)
  {
    ++v4;
    if (!--result) {
      return v4;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized ListCoreBatchUpdates.isEmpty.getter()
{
  uint64_t v1 = v0;
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  unint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v32 = (uint64_t)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v31 = (char *)&v31 - v6;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v31 - v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v31 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v31 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v31 - v17;
  char v19 = IndexSet.isEmpty.getter();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v18, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  if ((v19 & 1) == 0)
  {
    outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v18);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v15, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    goto LABEL_9;
  }
  char v20 = IndexSet.isEmpty.getter();
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v18);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v15, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  if ((v20 & 1) == 0)
  {
LABEL_9:
    outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v15);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v12, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    goto LABEL_10;
  }
  uint64_t v21 = *(void *)(*(void *)&v15[v3[10]] + 16);
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v15);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v12, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  if (v21)
  {
LABEL_10:
    outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v12);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v9, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    uint64_t v23 = (uint64_t)v31;
    goto LABEL_11;
  }
  uint64_t v22 = *(void *)(*(void *)&v12[v3[11]] + 16);
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v12);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, (uint64_t)v9, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  uint64_t v23 = (uint64_t)v31;
  if (v22)
  {
LABEL_11:
    outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v9);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, v23, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    goto LABEL_12;
  }
  uint64_t v24 = *(void *)(*(void *)&v9[v3[12]] + 16);
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v9);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v1, v23, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  if (v24)
  {
LABEL_12:
    outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>(v23);
    uint64_t v29 = v1;
    uint64_t v27 = v32;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v29, v32, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    goto LABEL_13;
  }
  uint64_t v25 = *(void *)(*(void *)(v23 + v3[13]) + 16);
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>(v23);
  uint64_t v26 = v1;
  uint64_t v27 = v32;
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v26, v32, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  if (v25)
  {
LABEL_13:
    LOBYTE(v28) = 0;
    goto LABEL_14;
  }
  uint64_t v28 = IndexSet.isEmpty.getter();
LABEL_14:
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>(v27);
  return v28 & 1;
}

uint64_t specialized ListBatchUpdates.formUpdates<A>(from:to:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = *v2;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v7 + 16));
  }
  else
  {
    *unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v7 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v3[3] + 16))
  {
    char v8 = swift_isUniquelyReferenced_nonNull_native();
    v12[0] = v3[3];
    v3[3] = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<Int, (Int, CountingIndex<Int>)>();
    _NativeDictionary.removeAll(isUnique:)(v8);
    v3[3] = v12[0];
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v3[4] + 16))
  {
    char v9 = swift_isUniquelyReferenced_nonNull_native();
    v12[0] = v3[4];
    v3[4] = 0x8000000000000000;
    type metadata accessor for _NativeDictionary<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>();
    _NativeDictionary.removeAll(isUnique:)(v9);
    v3[4] = v12[0];
    swift_bridgeObjectRelease();
  }
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(a1, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  outlined init with copy of TableDataSourceAdaptor(a2, (uint64_t)v11);
  specialized ListBatchUpdates.computeRemovesAndInserts<A>(from:to:)(v12, (uint64_t)v11);
  specialized ListBatchUpdates.computeMoves<A>(from:to:)((uint64_t)v12, (uint64_t)v11);
  outlined destroy of CountingIndexListDataSource<TableDataSourceAdaptor>((uint64_t)v11);
  return _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for CountingIndexListDataSource<ShadowListDataSource<TableDataSourceAdaptor>>);
}

void specialized ListCoreBatchUpdates.formResult<A>(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for (source: IndexPath, destination: IndexPath)();
  uint64_t v55 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v57 = (uint64_t)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  char v54 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v53 = (char *)&v53 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v59 = (char *)&v53 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v58 = (char *)&v53 - v13;
  specialized ListCoreBatchUpdates.resetAll()();
  uint64_t v14 = *a1;
  uint64_t v65 = a1[3];
  uint64_t v66 = v14;
  uint64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    uint64_t v16 = a1[1];
    uint64_t v63 = a1[2];
    uint64_t v64 = v16;
    uint64_t v62 = a1[4];
    outlined retain of [Text.Modifier]((uint64_t)&v62);
    outlined retain of [Text.Modifier]((uint64_t)&v63);
    outlined retain of [Text.Modifier]((uint64_t)&v65);
    outlined retain of [Text.Modifier]((uint64_t)&v66);
    outlined retain of [Text.Modifier]((uint64_t)&v64);
    int v60 = (void (**)(void))(v6 + 32);
    uint64_t v17 = (uint64_t *)(v14 + 64);
    do
    {
      Swift::Int v20 = *(v17 - 3);
      uint64_t v19 = *(v17 - 2);
      char v21 = *((unsigned char *)v17 - 16);
      uint64_t v22 = *v17;
      char v23 = *((unsigned char *)v17 + 8);
      uint64_t v24 = v17[3];
      char v25 = *((unsigned char *)v17 + 32);
      uint64_t v26 = v17[6];
      char v27 = *((unsigned char *)v17 + 56);
      uint64_t v28 = *((unsigned __int8 *)v17 + 57);
      v17 += 12;
      switch(v28)
      {
        case 1:
          if ((v19 & 1) == 0) {
            goto LABEL_4;
          }
          goto LABEL_47;
        case 2:
          if (v21) {
            goto LABEL_48;
          }
          if (v23) {
            goto LABEL_49;
          }
          _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
          uint64_t v30 = *(int *)(v29 + 40);
          uint64_t v31 = *(char **)(v2 + v30);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, v31);
          }
          unint64_t v33 = *((void *)v31 + 2);
          unint64_t v32 = *((void *)v31 + 3);
          if (v33 >= v32 >> 1) {
            uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v31);
          }
          *((void *)v31 + 2) = v33 + 1;
          uint64_t v34 = &v31[16 * v33];
          *((void *)v34 + 4) = v20;
          *((void *)v34 + 5) = v22;
          *(void *)(v2 + v30) = v31;
          break;
        case 3:
          if (v21) {
            goto LABEL_50;
          }
          if (v23) {
            goto LABEL_51;
          }
          MEMORY[0x18C10A880](v22, v20);
          _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
          uint64_t v36 = *(int *)(v35 + 44);
          unsigned int v37 = *(void **)(v2 + v36);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unsigned int v37 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
          }
          unint64_t v39 = v37[2];
          unint64_t v38 = v37[3];
          if (v39 >= v38 >> 1) {
            unsigned int v37 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1, v37);
          }
          void v37[2] = v39 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v37+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v39, v58, v61);
          goto LABEL_33;
        case 4:
          if (v21) {
            goto LABEL_52;
          }
          if (v23) {
            goto LABEL_53;
          }
          MEMORY[0x18C10A880](v22, v20);
          _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
          uint64_t v36 = *(int *)(v40 + 48);
          unsigned int v37 = *(void **)(v2 + v36);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unsigned int v37 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37[2] + 1, 1, v37);
          }
          unint64_t v42 = v37[2];
          unint64_t v41 = v37[3];
          if (v42 >= v41 >> 1) {
            unsigned int v37 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1, v37);
          }
          void v37[2] = v42 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v37+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v42, v59, v61);
LABEL_33:
          *(void *)(v2 + v36) = v37;
          break;
        case 5:
          if (v21) {
            goto LABEL_54;
          }
          if (v23) {
            goto LABEL_55;
          }
          if (v25) {
            goto LABEL_56;
          }
          if (v27) {
            goto LABEL_57;
          }
          uint64_t v43 = v6;
          MEMORY[0x18C10A880](v22, v20);
          unint64_t v44 = v54;
          MEMORY[0x18C10A880](v26, v24);
          uint64_t v45 = v57 + *(int *)(v56 + 48);
          unint64_t v46 = *v60;
          uint64_t v47 = v61;
          (*v60)();
          ((void (*)(uint64_t, char *, uint64_t))v46)(v45, v44, v47);
          _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
          uint64_t v49 = *(int *)(v48 + 52);
          unint64_t v50 = *(void **)(v2 + v49);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v50 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
          }
          uint64_t v6 = v43;
          unint64_t v52 = v50[2];
          unint64_t v51 = v50[3];
          if (v52 >= v51 >> 1) {
            unint64_t v50 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1, v50);
          }
          void v50[2] = v52 + 1;
          outlined init with take of TableCellFormula(v57, (uint64_t)v50+ ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))+ *(void *)(v55 + 72) * v52, (uint64_t (*)(void))type metadata accessor for (source: IndexPath, destination: IndexPath));
          *(void *)(v2 + v49) = v50;
          break;
        case 6:
          if (v19)
          {
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            JUMPOUT(0x187F9F15CLL);
          }
LABEL_4:
          _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
          Swift::Int v18 = v20;
LABEL_5:
          IndexSet.insert(_:)(v18);
          break;
        default:
          if (v19) {
            goto LABEL_46;
          }
          Swift::Int v18 = v20;
          goto LABEL_5;
      }
      --v15;
    }
    while (v15);
    outlined release of _LazyLayout_Placements((uint64_t)&v66);
    outlined release of _LazyLayout_Placements((uint64_t)&v64);
    outlined release of _LazyLayout_Placements((uint64_t)&v63);
    outlined release of _LazyLayout_Placements((uint64_t)&v65);
    outlined release of _LazyLayout_Placements((uint64_t)&v62);
  }
}

void specialized ListCoreBatchUpdates.resetAll()()
{
  uint64_t v1 = v0;
  IndexSet.removeAll()();
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  unint64_t v3 = v2;
  IndexSet.removeAll()();
  uint64_t v4 = (uint64_t *)(v0 + v3[10]);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *v4;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v6 + 16));
  }
  else
  {
    *uint64_t v4 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v6 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = (size_t *)(v1 + v3[11]);
  int v8 = swift_isUniquelyReferenced_nonNull_native();
  size_t v9 = *v7;
  if (v8)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v9 + 16));
  }
  else
  {
    *uint64_t v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v9 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = (size_t *)(v1 + v3[12]);
  int v11 = swift_isUniquelyReferenced_nonNull_native();
  size_t v12 = *v10;
  if (v11)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v12 + 16));
  }
  else
  {
    *uint64_t v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v12 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = (size_t *)(v1 + v3[13]);
  int v14 = swift_isUniquelyReferenced_nonNull_native();
  size_t v15 = *v13;
  if (v14)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v15 + 16));
  }
  else
  {
    size_t *v13 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v15 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  IndexSet.removeAll()();
}

uint64_t specialized ListBatchUpdates.computeRemovesAndInserts<A>(from:to:)(void *a1, uint64_t a2)
{
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)a1, (uint64_t)v115, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  specialized ShadowSectionCollection.init(_:)(v115, (uint64_t)v121);
  uint64_t v4 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  specialized CollectionChanges.formChanges<A, B>(from:to:)((uint64_t)v121, v4, (void (*)(uint64_t *__return_ptr, unsigned char *))protocol witness for OptionSet.init(rawValue:) in conformance UIRectEdge, 0);
  swift_bridgeObjectRelease();
  uint64_t result = _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v121, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
  unint64_t v103 = v2;
  uint64_t v6 = v2[1];
  uint64_t v92 = *(void *)(v6 + 16);
  if (!v92) {
    return result;
  }
  uint64_t v93 = v6 + 32;
  uint64_t v94 = v2[1];
  swift_bridgeObjectRetain();
  uint64_t result = v94;
  unint64_t v7 = 0;
  uint64_t v8 = (uint64_t)a1;
  uint64_t v97 = a2;
LABEL_6:
  if (v7 < *(void *)(result + 16))
  {
    unint64_t v95 = v7;
    size_t v9 = (uint64_t *)(v93 + 96 * v7);
    uint64_t v11 = *v9;
    uint64_t v10 = v9[1];
    uint64_t v12 = v9[2];
    uint64_t v101 = v9[3];
    uint64_t v96 = v9[4];
    uint64_t v99 = v9[5];
    if (!*((unsigned char *)v9 + 89))
    {
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v8, (uint64_t)v115, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
      specialized ShadowSectionCollection.init(_:)(v115, (uint64_t)v113);
      _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v113, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
      v104[25] = 0;
      v104[26] = 0;
      LOBYTE(v104[27]) = v114 == 0;
      v104[28] = v114;
      v104[29] = 0;
      LOBYTE(v104[30]) = 1;
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v113, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
      _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v104, (uint64_t)v105, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
      uint64_t v107 = v11;
      uint64_t v108 = v10;
      char v109 = v12 & 1;
      uint64_t v110 = v101;
      uint64_t v111 = v96;
      char v112 = v99 & 1;
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
      _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v105, (uint64_t)v115, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
      uint64_t v23 = v107;
      uint64_t v24 = v108;
      char v25 = v109;
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v105, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
      v115[31] = v23;
      v115[32] = v24;
      LOBYTE(v115[33]) = v25;
      uint64_t result = (uint64_t)memcpy(v121, v115, 0x109uLL);
      uint64_t v26 = v121[28];
      uint64_t v27 = v121[29];
      int v28 = LOBYTE(v121[30]);
      while (1)
      {
        uint64_t v29 = v121[31];
        uint64_t v30 = v121[32];
        uint64_t v31 = LOBYTE(v121[33]);
        if (v121[31] == v26)
        {
          if (v121[33])
          {
            if (v28) {
              goto LABEL_3;
            }
          }
          else
          {
            if (v121[32] == v27) {
              char v32 = v28;
            }
            else {
              char v32 = 1;
            }
            if ((v32 & 1) == 0)
            {
LABEL_3:
              _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v121, (uint64_t (*)(void))type metadata accessor for IndexingIterator<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>>);
LABEL_4:
              uint64_t v8 = (uint64_t)a1;
              goto LABEL_5;
            }
          }
        }
        uint64_t v33 = v121[31] + 1;
        if (__OFADD__(v121[31], 1)) {
          goto LABEL_120;
        }
        if (v33 == v121[24])
        {
          uint64_t v34 = 0;
        }
        else
        {
          if (v121[33]) {
            goto LABEL_137;
          }
          uint64_t v34 = v121[32] + 1;
          if (__OFADD__(v121[32], 1)) {
            goto LABEL_122;
          }
        }
        ++v121[31];
        v121[32] = v34;
        LOBYTE(v121[33]) = v33 == v121[24];
        uint64_t v35 = *v103;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1, (char *)v35);
          uint64_t v35 = result;
        }
        unint64_t v37 = *(void *)(v35 + 16);
        unint64_t v36 = *(void *)(v35 + 24);
        if (v37 >= v36 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, (char *)v35);
          uint64_t v35 = result;
        }
        *(void *)(v35 + 16) = v37 + 1;
        unint64_t v38 = v35 + 96 * v37;
        *(void *)(v38 + 32) = v29;
        *(void *)(v38 + 40) = v30;
        *(void *)(v38 + 48) = v31;
        *(_OWORD *)(v38 + 56) = 0u;
        *(_OWORD *)(v38 + 72) = 0u;
        *(_OWORD *)(v38 + 88) = 0u;
        *(_OWORD *)(v38 + 104) = 0u;
        *(_WORD *)(v38 + 120) = 0;
        *unint64_t v103 = v35;
      }
    }
    if (*((unsigned char *)v9 + 89) == 1)
    {
      BOOL v13 = v12 & 1;
      uint64_t v14 = *(void *)(v97 + 40);
      uint64_t result = swift_bridgeObjectRetain();
      while (1)
      {
        if (v101 == v11)
        {
          if (v13)
          {
            if (v99) {
              goto LABEL_114;
            }
          }
          else if ((v99 & 1) == 0 && v10 == v96)
          {
LABEL_114:
            swift_bridgeObjectRelease();
            goto LABEL_4;
          }
        }
        uint64_t v15 = v11 + 1;
        if (__OFADD__(v11, 1)) {
          break;
        }
        uint64_t v16 = *(void *)(v14 + 16);
        BOOL v17 = v15 == v16;
        if (v15 == v16)
        {
          uint64_t v18 = 0;
        }
        else
        {
          if (v13) {
            goto LABEL_136;
          }
          uint64_t v18 = v10 + 1;
          if (__OFADD__(v10, 1)) {
            goto LABEL_121;
          }
        }
        uint64_t v19 = *v103;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1, (char *)v19);
          uint64_t v19 = result;
        }
        unint64_t v21 = *(void *)(v19 + 16);
        unint64_t v20 = *(void *)(v19 + 24);
        if (v21 >= v20 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1, (char *)v19);
          uint64_t v19 = result;
        }
        *(void *)(v19 + 16) = v21 + 1;
        unint64_t v22 = v19 + 96 * v21;
        *(void *)(v22 + 32) = v11;
        *(void *)(v22 + 40) = v10;
        *(void *)(v22 + 48) = v13;
        *(_OWORD *)(v22 + 56) = 0u;
        *(_OWORD *)(v22 + 72) = 0u;
        *(_OWORD *)(v22 + 88) = 0u;
        *(_OWORD *)(v22 + 104) = 0u;
        *(_WORD *)(v22 + 120) = 256;
        *unint64_t v103 = v19;
        ++v11;
        uint64_t v10 = v18;
        BOOL v13 = v17;
      }
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      goto LABEL_135;
    }
    char v39 = *((unsigned char *)v9 + 88);
    char v90 = *((unsigned char *)v9 + 64);
    uint64_t v91 = v9[10];
    uint64_t v89 = v9[9];
    unint64_t v40 = v9[6];
    uint64_t v41 = v9[7];
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)a1, (uint64_t)v104, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
    specialized ShadowSectionCollection.init(_:)(v104, (uint64_t)v113);
    _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v113, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
    v104[25] = 0;
    v104[26] = 0;
    LOBYTE(v104[27]) = v114 == 0;
    v104[28] = v114;
    v104[29] = 0;
    LOBYTE(v104[30]) = 1;
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v113, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
    _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v104, (uint64_t)v105, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
    uint64_t v107 = v11;
    uint64_t v108 = v10;
    char v109 = v12 & 1;
    uint64_t v110 = v101;
    uint64_t v111 = v96;
    char v112 = v99 & 1;
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    uint64_t v42 = v97;
    uint64_t v43 = *(void *)(v97 + 40);
    _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v105, (uint64_t)v115, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    v115[31] = v43;
    v115[32] = protocol witness for OptionSet.init(rawValue:) in conformance UIRectEdge;
    v115[33] = 0;
    unint64_t v116 = v40;
    uint64_t v8 = (uint64_t)a1;
    uint64_t v117 = v41;
    BOOL v118 = v90 & 1;
    *(void *)&long long v119 = v89;
    *((void *)&v119 + 1) = v91;
    char v120 = v39 & 1;
    swift_bridgeObjectRetain();
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v105, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v115, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    uint64_t v44 = v115[25];
    uint64_t v45 = v115[26];
    LOBYTE(v43) = v115[27];
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v115, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
    v104[31] = v44;
    v104[32] = v45;
    LOBYTE(v104[33]) = v43;
    memcpy(v121, v104, 0x109uLL);
    long long v122 = *(_OWORD *)&v115[31];
    uint64_t v123 = v115[33];
    unint64_t v124 = v116;
    BOOL v126 = v118;
    long long v127 = v119;
    char v128 = v120;
    uint64_t v125 = v117;
    unint64_t v129 = v116;
    uint64_t v130 = v117;
    BOOL v131 = v118;
    char v132 = 0;
    while (1)
    {
      uint64_t v47 = v121[32];
      uint64_t v48 = LOBYTE(v121[33]);
      uint64_t v49 = v121[31];
      if (v121[31] == v121[28])
      {
        char v50 = v121[30];
        if (v121[33])
        {
          if (LOBYTE(v121[30])) {
            goto LABEL_115;
          }
        }
        else
        {
          if (v121[32] != v121[29]) {
            char v50 = 1;
          }
          if ((v50 & 1) == 0)
          {
LABEL_115:
            char v132 = 1;
LABEL_116:
            _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v121, (uint64_t (*)(void))type metadata accessor for Zip2Sequence<DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>, DefaultIndices<CountingIndexCollection<LazyMapSequence<[TableSections.Item], Int>>>>.Iterator);
LABEL_5:
            uint64_t result = v94;
            unint64_t v7 = v95 + 1;
            if (v95 + 1 == v92) {
              return swift_bridgeObjectRelease();
            }
            goto LABEL_6;
          }
        }
      }
      uint64_t result = _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v121, (uint64_t)v115, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
      uint64_t v51 = v49 + 1;
      if (__OFADD__(v49, 1)) {
        goto LABEL_123;
      }
      if (v51 == v115[24])
      {
        uint64_t v52 = 0;
      }
      else
      {
        if (v48) {
          goto LABEL_138;
        }
        uint64_t v52 = v47 + 1;
        if (__OFADD__(v47, 1)) {
          goto LABEL_132;
        }
      }
      v121[31] = v49 + 1;
      v121[32] = v52;
      LOBYTE(v121[33]) = v51 == v115[24];
      uint64_t result = _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v115, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>>);
      uint64_t v53 = v130;
      char v54 = v131;
      unint64_t v55 = v129;
      if (v129 == (void)v127)
      {
        char v56 = v128;
        if (v131)
        {
          if (v128) {
            goto LABEL_115;
          }
        }
        else
        {
          if (v130 != *((void *)&v127 + 1)) {
            char v56 = 1;
          }
          if ((v56 & 1) == 0) {
            goto LABEL_115;
          }
        }
      }
      unint64_t v57 = v129 + 1;
      if (__OFADD__(v129, 1)) {
        goto LABEL_124;
      }
      uint64_t v58 = *(void *)(v122 + 16);
      if (v57 == v58)
      {
        uint64_t v59 = 0;
      }
      else
      {
        if (v131) {
          goto LABEL_139;
        }
        uint64_t v59 = v130 + 1;
        if (__OFADD__(v130, 1)) {
          goto LABEL_133;
        }
      }
      ++v129;
      uint64_t v130 = v59;
      BOOL v131 = v57 == v58;
      uint64_t v102 = v47;
      uint64_t v100 = v48;
      uint64_t result = specialized ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(v8, v49, v47, v48, v42, v55, v53, v54);
      uint64_t v60 = *(void *)(result + 16);
      uint64_t v61 = *v103;
      int64_t v62 = *(void *)(*v103 + 16);
      int64_t v63 = v62 + v60;
      if (__OFADD__(v62, v60)) {
        goto LABEL_125;
      }
      uint64_t v64 = result;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if (!result || v63 > *(void *)(v61 + 24) >> 1)
      {
        if (v62 <= v63) {
          int64_t v65 = v62 + v60;
        }
        else {
          int64_t v65 = v62;
        }
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v65, 1, (char *)v61);
        uint64_t v61 = result;
      }
      uint64_t v8 = (uint64_t)a1;
      if (*(void *)(v64 + 16))
      {
        uint64_t v66 = *(void *)(v61 + 16);
        if ((*(void *)(v61 + 24) >> 1) - v66 < v60) {
          goto LABEL_131;
        }
        uint64_t result = (uint64_t)memcpy((void *)(v61 + 96 * v66 + 32), (const void *)(v64 + 32), 96 * v60);
        if (v60)
        {
          uint64_t v67 = *(void *)(v61 + 16);
          BOOL v68 = __OFADD__(v67, v60);
          uint64_t v69 = v67 + v60;
          if (v68) {
            goto LABEL_134;
          }
          *(void *)(v61 + 16) = v69;
        }
      }
      else if (v60)
      {
        goto LABEL_126;
      }
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v103 = v61;
      uint64_t v71 = a1[22];
      uint64_t v70 = a1[23];
      if (*(void *)(v70 + 16) || *(void *)(v71 + 16))
      {
        MEMORY[0x1F4188790](result);
        lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
        swift_getKeyPath();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v70, v71);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
        unint64_t v73 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, v49);
        uint64_t v42 = v97;
        uint64_t result = swift_bridgeObjectRelease();
        if ((v73 & 0x8000000000000000) != 0) {
          goto LABEL_127;
        }
      }
      else
      {
        unint64_t v73 = v49;
        if (v49 < 0) {
          goto LABEL_127;
        }
      }
      uint64_t v74 = a1[5];
      if (v73 >= *(void *)(v74 + 16)) {
        goto LABEL_128;
      }
      int v75 = *(unsigned __int8 *)(v74 + 96 * v73 + 40);
      outlined init with copy of TableDataSourceAdaptor((uint64_t)a1, (uint64_t)v115);
      if (v75 == 1)
      {
        uint64_t result = outlined destroy of TableDataSourceAdaptor((uint64_t)v115);
        int v76 = 1;
      }
      else
      {
        outlined init with copy of TableDataSourceAdaptor((uint64_t)v115, (uint64_t)v104);
        if (v73)
        {
          int v76 = 0;
        }
        else
        {
          int v77 = LOBYTE(v104[21]);
          outlined init with copy of TableDataSourceAdaptor((uint64_t)v104, (uint64_t)v105);
          int v76 = (v106 != 2) & ~v77;
          outlined destroy of TableDataSourceAdaptor((uint64_t)v105);
        }
        outlined destroy of TableDataSourceAdaptor((uint64_t)v104);
        uint64_t result = outlined destroy of TableDataSourceAdaptor((uint64_t)v115);
      }
      if ((v55 & 0x8000000000000000) != 0) {
        goto LABEL_129;
      }
      uint64_t v78 = *(void *)(v42 + 40);
      if (v55 >= *(void *)(v78 + 16)) {
        goto LABEL_130;
      }
      int v79 = *(unsigned __int8 *)(v78 + 96 * v55 + 40);
      outlined init with copy of TableDataSourceAdaptor(v42, (uint64_t)v115);
      if (v79 == 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = outlined destroy of TableDataSourceAdaptor((uint64_t)v115);
        if ((v76 & 1) == 0) {
          goto LABEL_104;
        }
      }
      else
      {
        outlined init with copy of TableDataSourceAdaptor((uint64_t)v115, (uint64_t)v104);
        if (v55)
        {
          int v81 = 0;
        }
        else
        {
          int v82 = LOBYTE(v104[21]);
          outlined init with copy of TableDataSourceAdaptor((uint64_t)v104, (uint64_t)v105);
          int v81 = (v106 != 2) & ~v82;
          outlined destroy of TableDataSourceAdaptor((uint64_t)v105);
        }
        outlined destroy of TableDataSourceAdaptor((uint64_t)v104);
        uint64_t isUniquelyReferenced_nonNull_native = outlined destroy of TableDataSourceAdaptor((uint64_t)v115);
        if (v76 != v81)
        {
LABEL_104:
          uint64_t v83 = *v103;
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v83 + 16) + 1, 1, (char *)v83);
            uint64_t v83 = isUniquelyReferenced_nonNull_native;
          }
          unint64_t v85 = *(void *)(v83 + 16);
          unint64_t v84 = *(void *)(v83 + 24);
          if (v85 >= v84 >> 1)
          {
            uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v84 > 1), v85 + 1, 1, (char *)v83);
            uint64_t v83 = isUniquelyReferenced_nonNull_native;
          }
          *(void *)(v83 + 16) = v85 + 1;
          unint64_t v86 = v83 + 96 * v85;
          *(void *)(v86 + 32) = v49;
          *(void *)(v86 + 40) = v102;
          *(void *)(v86 + 48) = v100;
          *(_OWORD *)(v86 + 56) = 0u;
          *(_OWORD *)(v86 + 72) = 0u;
          *(_OWORD *)(v86 + 88) = 0u;
          *(_OWORD *)(v86 + 104) = 0u;
          *(_WORD *)(v86 + 120) = 1536;
          *unint64_t v103 = v83;
        }
      }
      uint64_t v88 = a1[22];
      uint64_t v87 = a1[23];
      if (*(void *)(v87 + 16) || *(void *)(v88 + 16))
      {
        MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native);
        lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
        swift_getKeyPath();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v46 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v87, v88);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
        specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v46, v49);
        swift_bridgeObjectRelease();
      }
      if (v132) {
        goto LABEL_116;
      }
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
  return result;
}

uint64_t specialized ListBatchUpdates.computeMoves<A>(from:to:)(uint64_t a1, uint64_t a2)
{
  void (*v57)(void *__return_ptr, unint64_t);
  char v58;
  unint64_t *v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  unint64_t v63;
  long long v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  char v68;
  unint64_t *v69;
  char v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char **v75;
  char v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  char v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t updated;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  char v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  unint64_t v100;
  char **v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char **v108;
  uint64_t v109;
  uint64_t *v110;
  char **v111;
  char isUniquelyReferenced_nonNull_native;
  char v113;
  unint64_t v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  char v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  char *v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  char v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  BOOL v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char v142;
  unint64_t v143;
  uint64_t v144;
  char **v145;
  int v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v154;
  uint64_t v155;
  long long v156;
  long long v157;
  uint64_t v158;
  unint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  long long v163;
  uint64_t v164;
  uint64_t v165;
  long long v166;
  uint64_t *v167;
  char **v168;
  uint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172[3];
  BOOL v173;
  uint64_t v174;
  uint64_t v175;
  BOOL v176;
  void v177[5];
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  void v181[6];
  void v182[24];
  void v183[2];

  uint64_t v3 = (uint64_t)v2;
  long long v160 = a2;
  long long v161 = a1;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  v183[0] = MEMORY[0x1E4FBC860];
  unint64_t v5 = *v2;
  uint64_t v6 = *(uint64_t **)(v5 + 16);
  if (!v6)
  {
    id v152 = 0;
    unint64_t v7 = 0;
    goto LABEL_127;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    goto LABEL_157;
  }
  while (1)
  {
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    *(void *)uint64_t v3 = v5;
    long long v158 = 0;
    long long v159 = (unint64_t *)(v3 + 32);
    uint64_t v171 = 121;
    uint64_t v167 = v6;
    uint64_t v168 = (char **)v3;
LABEL_8:
    if (v6 != v8) {
      break;
    }
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    __break(1u);
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
LABEL_136:
    __break(1u);
LABEL_137:
    __break(1u);
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
LABEL_154:
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    unint64_t v5 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
  }
  unint64_t v5 = *(void *)v3;
  id v170 = v7;
  if (v8 != (uint64_t *)v7)
  {
    if ((unint64_t)v8 >= *(void *)(v5 + 16)) {
      goto LABEL_130;
    }
    uint64_t v169 = v8;
    uint64_t v13 = *(void *)(v5 + v171 - 89);
    uint64_t v14 = *(void *)(v5 + v171 - 81);
    uint64_t v15 = *(void *)(v5 + v171 - 73);
    uint64_t v3 = *(void *)(v5 + v171 - 65);
    uint64_t v16 = *(void *)(v5 + v171 - 57);
    uint64_t v17 = *(void *)(v5 + v171 - 49);
    uint64_t v18 = *(void *)(v5 + v171 - 41);
    uint64_t v6 = *(uint64_t **)(v5 + v171 - 33);
    uint64_t v19 = *(void *)(v5 + v171 - 25);
    uint64_t v165 = *(void *)(v5 + v171 - 17);
    *(void *)&uint64_t v166 = v19;
    uint64_t v164 = *(void *)(v5 + v171 - 9);
    LODWORD(v163) = *(unsigned __int8 *)(v5 + v171 - 1);
    LODWORD(v162) = *(unsigned __int8 *)(v5 + v171);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v5 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v5);
    }
    unint64_t v7 = v170;
    if (v170 >= *(void *)(v5 + 16)) {
      goto LABEL_131;
    }
    unint64_t v20 = v5 + 96 * v170;
    *(void *)(v20 + 32) = v13;
    *(void *)(v20 + 40) = v14;
    *(void *)(v20 + 48) = v15;
    *(void *)(v20 + 56) = v3;
    *(void *)(v20 + 64) = v16;
    *(void *)(v20 + 72) = v17;
    *(void *)(v20 + 80) = v18;
    *(void *)(v20 + 88) = v6;
    uint64_t v21 = v165;
    *(void *)(v20 + 96) = v166;
    *(void *)(v20 + 104) = v21;
    *(void *)(v20 + 112) = v164;
    *(unsigned char *)(v20 + 120) = v163;
    *(unsigned char *)(v20 + 121) = v162;
    uint64_t v6 = v167;
    uint64_t v3 = (uint64_t)v168;
    *uint64_t v168 = (char *)v5;
    uint64_t v8 = v169;
  }
  if (v7 >= *(void *)(v5 + 16)) {
    goto LABEL_129;
  }
  uint64_t v8 = (uint64_t *)((char *)v8 + 1);
  unint64_t v22 = v5 + 96 * v7;
  unint64_t v24 = *(void *)(v22 + 32);
  uint64_t v23 = *(void *)(v22 + 40);
  uint64_t v25 = *(void *)(v22 + 48);
  uint64_t v26 = *(void *)(v22 + 56);
  char v27 = *(unsigned char *)(v22 + 72);
  uint64_t v28 = *(unsigned char *)(v22 + 48) & 1;
  uint64_t v29 = v27 & 1;
  switch(*(unsigned char *)(v22 + 121))
  {
    case 1:
      if ((v24 & 0x8000000000000000) != 0) {
        goto LABEL_135;
      }
      uint64_t v37 = *(void *)(v160 + 40);
      if (v24 >= *(void *)(v37 + 16)) {
        goto LABEL_137;
      }
      *(void *)&uint64_t v166 = v23;
      uint64_t v38 = v25 & 1;
      uint64_t v6 = (uint64_t *)v24;
      outlined init with copy of TableSections.Item(v37 + 96 * v24 + 32, (uint64_t)v177);
      uint64_t v39 = v3;
      uint64_t v3 = v177[0];
      outlined destroy of TableSections.Item((uint64_t)v177);
      unint64_t v5 = *(void *)(v39 + 24);
      if (!*(void *)(v5 + 16))
      {
        uint64_t v110 = v8;
        uint64_t v111 = v168;
        goto LABEL_89;
      }
      unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
      if ((v41 & 1) == 0)
      {
        uint64_t v110 = v8;
        uint64_t v111 = v168;
LABEL_89:
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v177[0] = v111[3];
        unint64_t v5 = v177[0];
        v111[3] = (char *)0x8000000000000000;
        uint64_t v114 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
        uint64_t v115 = *(void *)(v5 + 16);
        unint64_t v116 = (v113 & 1) == 0;
        uint64_t v117 = v115 + v116;
        if (__OFADD__(v115, v116)) {
          goto LABEL_142;
        }
        BOOL v118 = v113;
        if (*(void *)(v5 + 24) >= v117)
        {
          uint64_t v121 = v170;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            unint64_t v5 = (unint64_t)v177;
            specialized _NativeDictionary.copy()();
            goto LABEL_93;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v117, isUniquelyReferenced_nonNull_native);
          unint64_t v5 = v177[0];
          long long v119 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
          if ((v118 & 1) != (v120 & 1)) {
            goto LABEL_164;
          }
          uint64_t v114 = v119;
LABEL_93:
          uint64_t v121 = v170;
        }
        long long v122 = (char *)v177[0];
        uint64_t v123 = v38 != 0;
        if (v118)
        {
          unint64_t v124 = *(void *)(v177[0] + 56) + 32 * v114;
          *(void *)unint64_t v124 = v121;
          *(void *)(v124 + 8) = v6;
          *(void *)(v124 + 16) = v166;
          *(unsigned char *)(v124 + 24) = v123;
        }
        else
        {
          *(void *)(v177[0] + 8 * (v114 >> 6) + 64) |= 1 << v114;
          *(void *)(*((void *)v122 + 6) + 8 * v114) = v3;
          uint64_t v125 = *((void *)v122 + 7) + 32 * v114;
          *(void *)uint64_t v125 = v121;
          *(void *)(v125 + 8) = v6;
          *(void *)(v125 + 16) = v166;
          *(unsigned char *)(v125 + 24) = v123;
          BOOL v126 = *((void *)v122 + 2);
          long long v127 = __OFADD__(v126, 1);
          char v128 = v126 + 1;
          if (v127) {
            goto LABEL_146;
          }
          *((void *)v122 + 2) = v128;
        }
        uint64_t v3 = (uint64_t)v168;
        v168[3] = v122;
        swift_bridgeObjectRelease();
        unint64_t v7 = v170;
        uint64_t v8 = v110;
        goto LABEL_6;
      }
      uint64_t v42 = *(void *)(v5 + 56) + 32 * v40;
      unint64_t v43 = *(void *)v42;
      if ((*(void *)v42 & 0x8000000000000000) != 0) {
        goto LABEL_148;
      }
      if (v43 >= *((void *)*v168 + 2)) {
        goto LABEL_149;
      }
      if ((*v168)[96 * v43 + 121])
      {
        unint64_t v7 = v170;
        goto LABEL_122;
      }
      uint64_t v169 = v8;
      char v139 = *(void *)(v42 + 8);
      uint64_t v138 = *(void *)(v42 + 16);
      long long v140 = *(unsigned __int8 *)(v42 + 24);
      uint64_t v141 = specialized __RawDictionaryStorage.find<A>(_:)(v3);
      if (v142)
      {
        uint64_t v143 = v141;
        uint64_t v165 = v138;
        uint64_t v144 = v139;
        uint64_t v145 = v168;
        uint64_t v146 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v147 = (uint64_t)v145[3];
        v177[0] = v147;
        v145[3] = (char *)0x8000000000000000;
        if (!v146)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v147 = v177[0];
        }
        specialized _NativeDictionary._delete(at:)(v143, v147);
        v145[3] = (char *)v147;
        swift_bridgeObjectRelease();
        char v139 = v144;
        uint64_t v138 = v165;
      }
      uint64_t v3 = (uint64_t)v168;
      uint64_t v148 = *v168;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v148 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v148);
      }
      uint64_t v149 = v166;
      if (v43 >= *((void *)v148 + 2)) {
        goto LABEL_159;
      }
      id v150 = &v148[96 * v43];
      *((void *)v150 + 4) = v139;
      *((void *)v150 + 5) = v138;
      *((void *)v150 + 6) = v140;
      *((void *)v150 + 7) = v6;
      *((void *)v150 + 8) = v149;
      *((void *)v150 + 9) = v38;
      *((_OWORD *)v150 + 5) = 0u;
      *((_OWORD *)v150 + 6) = 0u;
      *(_OWORD *)(v150 + 105) = 0u;
      v150[121] = 2;
      *(void *)uint64_t v3 = v148;
      uint64_t v151 = specialized ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(v161, v139, v138, v140, v160, (unint64_t)v6, v149, v38);
      unint64_t v5 = (unint64_t)v183;
      specialized Array.append<A>(contentsOf:)(v151);
LABEL_120:
      unint64_t v7 = v170 - 1;
LABEL_5:
      uint64_t v8 = v169;
LABEL_6:
      uint64_t v6 = v167;
LABEL_7:
      ++v7;
      v171 += 96;
      if (v6 != v8) {
        goto LABEL_8;
      }
      id v152 = *(void *)(*(void *)v3 + 16);
      if (v152 < v7) {
        goto LABEL_151;
      }
      uint64_t v4 = v183[0];
LABEL_127:
      specialized Array.replaceSubrange<A>(_:with:)(v7, v152);
      return specialized Array.append<A>(contentsOf:)(v4);
    case 2:
    case 5:
      goto LABEL_162;
    case 3:
      uint64_t v164 = *(void *)(v22 + 64);
      uint64_t v165 = v28;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v161, (uint64_t)v182, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
      specialized ShadowSectionCollection.init(_:)(v182, (uint64_t)v177);
      uint64_t v3 = v178;
      swift_bridgeObjectRetain();
      unint64_t v5 = (unint64_t)v177;
      uint64_t v6 = (uint64_t *)v24;
      unint64_t v33 = specialized ShadowListUpdateRecorder.initialIndex(_:)(v24);
      if ((v33 & 0x8000000000000000) != 0) {
        goto LABEL_132;
      }
      if (v33 >= *(void *)(v3 + 16)) {
        goto LABEL_139;
      }
      uint64_t v169 = v8;
      outlined init with copy of TableSections.Item(v3 + 96 * v33 + 32, (uint64_t)v182);
      uint64_t v34 = v182[0];
      outlined destroy of TableSections.Item((uint64_t)v182);
      swift_bridgeObjectRelease();
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v177, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v161, (uint64_t)v182, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
      unint64_t v35 = specialized ShadowListUpdateRecorder.initialIndex(_:)(v24);
      specialized ShadowRowCollection.init(_:section:)(v182, v35, (uint64_t)v177);
      specialized ShadowRowCollection.subscript.getter(v26, (uint64_t)v181);
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v177, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>);
      uint64_t v3 = (uint64_t)v168;
      unint64_t v5 = (unint64_t)v168[3];
      if (*(void *)(v5 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v34);
        if (v36)
        {
          outlined destroy of TableRowID((uint64_t)v181);
          unint64_t v7 = v170;
          goto LABEL_5;
        }
      }
      uint64_t v48 = v159;
      unint64_t v5 = *v159;
      if (!*(void *)(*v159 + 16)
        || (unint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v181), (v50 & 1) == 0))
      {
        size_t v9 = v48;
        BOOL v10 = v165 != 0;
        outlined init with copy of TableRowID((uint64_t)v181, (uint64_t)v177);
        char v11 = swift_isUniquelyReferenced_nonNull_native();
        v182[0] = *v9;
        *size_t v9 = 0x8000000000000000;
        unint64_t v12 = v170;
        v172[0] = v170;
        v172[1] = v24;
        v172[2] = v23;
        uint64_t v173 = v10;
        long long v174 = v26;
        id v175 = v164;
        long long v176 = v29 != 0;
        unint64_t v5 = (unint64_t)v182;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v172, (uint64_t)v177, v11);
        *size_t v9 = v182[0];
        uint64_t v3 = (uint64_t)v168;
        swift_bridgeObjectRelease();
        outlined destroy of TableRowID((uint64_t)v177);
        outlined destroy of TableRowID((uint64_t)v181);
        unint64_t v7 = v12;
        goto LABEL_5;
      }
      uint64_t v51 = *(void *)(v5 + 56) + 56 * v49;
      unint64_t v52 = *(void *)v51;
      if ((*(void *)v51 & 0x8000000000000000) != 0) {
        goto LABEL_153;
      }
      uint64_t v53 = *(char **)v3;
      if (v52 >= *(void *)(*(void *)v3 + 16)) {
        goto LABEL_154;
      }
      if (v53[96 * v52 + 121] == 4)
      {
        uint64_t v166 = *(_OWORD *)(v51 + 8);
        uint64_t v54 = *(unsigned __int8 *)(v51 + 24);
        long long v163 = *(_OWORD *)(v51 + 32);
        LODWORD(v162) = *(unsigned __int8 *)(v51 + 48);
        unint64_t v5 = (unint64_t)v159;
        specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v181, (uint64_t)v177);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v53 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v53);
        }
        uint64_t v55 = v165;
        if (v52 >= *((void *)v53 + 2)) {
          goto LABEL_160;
        }
        char v56 = &v53[96 * v52];
        *((void *)v56 + 4) = v6;
        *((void *)v56 + 5) = v23;
        *((void *)v56 + 6) = v55;
        *((void *)v56 + 7) = v26;
        *((void *)v56 + 8) = v164;
        *((void *)v56 + 9) = v29;
        *((_OWORD *)v56 + 5) = v166;
        *((void *)v56 + 12) = v54;
        *(_OWORD *)(v56 + 104) = v163;
        v56[120] = v162;
        v56[121] = 5;
        uint64_t v3 = (uint64_t)v168;
        *uint64_t v168 = v53;
        outlined destroy of TableRowID((uint64_t)v181);
        goto LABEL_120;
      }
      outlined destroy of TableRowID((uint64_t)v181);
      uint64_t v8 = v169;
      unint64_t v7 = v170;
LABEL_122:
      uint64_t v6 = v167;
      uint64_t v3 = (uint64_t)v168;
      goto LABEL_7;
    case 4:
      if ((v24 & 0x8000000000000000) != 0) {
        goto LABEL_133;
      }
      unint64_t v5 = *(void *)(v160 + 40);
      if (v24 >= *(void *)(v5 + 16)) {
        goto LABEL_138;
      }
      uint64_t v164 = *(void *)(v22 + 64);
      uint64_t v165 = v28;
      long long v162 = v27 & 1;
      *(void *)&long long v163 = v26;
      *(void *)&uint64_t v166 = v23;
      uint64_t v169 = v8;
      uint64_t v3 = 96;
      outlined init with copy of TableSections.Item(v5 + 32 + 96 * v24, (uint64_t)v177);
      uint64_t v44 = v177[0];
      outlined destroy of TableSections.Item((uint64_t)v177);
      if (v24 >= *(void *)(v5 + 16)) {
        goto LABEL_140;
      }
      uint64_t v45 = v5 + 32 + 96 * v24;
      uint64_t v46 = *(void *)(v45 + 80);
      unint64_t v47 = v163 - v46;
      if (__OFSUB__((void)v163, v46)) {
        goto LABEL_141;
      }
      unint64_t v5 = *(void *)(v45 + 64);
      uint64_t v3 = *(unsigned __int8 *)(v45 + 72);
      if (*(unsigned char *)(v45 + 72))
      {
        if ((v47 & 0x8000000000000000) != 0) {
          goto LABEL_143;
        }
        if (v47 >= *(void *)(v5 + 16)) {
          goto LABEL_144;
        }
        outlined init with copy of TableRowID(v5 + 48 * v47 + 32, (uint64_t)v182);
        swift_bridgeObjectRetain();
      }
      else
      {
        unint64_t v57 = *(void (**)(void *__return_ptr, unint64_t))(*(void *)v5 + 104);
        swift_retain();
        v57(v182, v47);
      }
      outlined init with take of TableRowID((uint64_t)v182, (uint64_t)v177);
      outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v5, v3);
      uint64_t v6 = v167;
      uint64_t v3 = (uint64_t)v168;
      unint64_t v5 = (unint64_t)v168[3];
      if (*(void *)(v5 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v44);
        if (v58)
        {
          outlined destroy of TableRowID((uint64_t)v177);
          uint64_t v8 = v169;
          unint64_t v7 = v170;
          goto LABEL_7;
        }
      }
      uint64_t v59 = v159;
      unint64_t v5 = *v159;
      if (!*(void *)(*v159 + 16)
        || (uint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v177), (v61 & 1) == 0))
      {
        outlined init with copy of TableRowID((uint64_t)v177, (uint64_t)v182);
        int v76 = swift_isUniquelyReferenced_nonNull_native();
        v181[0] = *v59;
        unint64_t v5 = v181[0];
        *uint64_t v59 = 0x8000000000000000;
        uint64_t v78 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v182);
        int v79 = *(void *)(v5 + 16);
        long long v80 = (v77 & 1) == 0;
        int v81 = v79 + v80;
        if (__OFADD__(v79, v80)) {
          goto LABEL_145;
        }
        int v82 = v77;
        if (*(void *)(v5 + 24) >= v81)
        {
          unint64_t v85 = v162;
          unint64_t v86 = v165;
          if ((v76 & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            unint64_t v86 = v165;
            unint64_t v85 = v162;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v81, v76);
          uint64_t v83 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v182);
          if ((v82 & 1) != (v84 & 1)) {
            goto LABEL_163;
          }
          uint64_t v78 = v83;
          unint64_t v85 = v162;
          unint64_t v86 = v165;
        }
        unint64_t v5 = v181[0];
        if (v82)
        {
          BOOL v131 = *(void *)(v181[0] + 56) + 56 * v78;
          *(void *)BOOL v131 = v170;
          *(void *)(v131 + 8) = v24;
          *(void *)(v131 + 16) = v166;
          *(unsigned char *)(v131 + 24) = v86 != 0;
          char v132 = v164;
          *(void *)(v131 + 32) = v163;
          *(void *)(v131 + 40) = v132;
          *(unsigned char *)(v131 + 48) = v85 != 0;
        }
        else
        {
          uint64_t v133 = v85 != 0;
          uint64_t v3 = v86 != 0;
          *(void *)(v181[0] + 8 * (v78 >> 6) + 64) |= 1 << v78;
          outlined init with copy of TableRowID((uint64_t)v182, *(void *)(v5 + 48) + 48 * v78);
          uint64_t v134 = *(void *)(v5 + 56) + 56 * v78;
          *(void *)uint64_t v134 = v170;
          *(void *)(v134 + 8) = v24;
          *(void *)(v134 + 16) = v166;
          *(unsigned char *)(v134 + 24) = v3;
          uint64_t v135 = v164;
          *(void *)(v134 + 32) = v163;
          *(void *)(v134 + 40) = v135;
          *(unsigned char *)(v134 + 48) = v133;
          char v136 = *(void *)(v5 + 16);
          long long v127 = __OFADD__(v136, 1);
          uint64_t v137 = v136 + 1;
          if (v127) {
            goto LABEL_152;
          }
          *(void *)(v5 + 16) = v137;
        }
        *long long v159 = v5;
        swift_bridgeObjectRelease();
        outlined destroy of TableRowID((uint64_t)v182);
LABEL_108:
        outlined destroy of TableRowID((uint64_t)v177);
        goto LABEL_109;
      }
      int64_t v62 = *(void *)(v5 + 56) + 56 * v60;
      int64_t v63 = *(void *)v62;
      if ((*(void *)v62 & 0x8000000000000000) != 0) {
        goto LABEL_155;
      }
      uint64_t v3 = *(void *)v3;
      if (v63 >= *(void *)(v3 + 16)) {
        goto LABEL_156;
      }
      if (*(unsigned char *)(v3 + 96 * v63 + 121) != 3) {
        goto LABEL_108;
      }
      uint64_t v64 = *(_OWORD *)(v62 + 8);
      id v155 = *(unsigned __int8 *)(v62 + 24);
      long long v156 = *(_OWORD *)(v62 + 32);
      long long v157 = v64;
      int64_t v65 = *(unsigned __int8 *)(v62 + 48);
      unint64_t v5 = *v159;
      swift_bridgeObjectRetain();
      uint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v177);
      BOOL v68 = v67;
      swift_bridgeObjectRelease();
      if (v68)
      {
        uint64_t v69 = v159;
        uint64_t v70 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v5 = *v69;
        v182[0] = *v69;
        *uint64_t v69 = 0x8000000000000000;
        if ((v70 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          unint64_t v5 = v182[0];
        }
        outlined destroy of TableRowID(*(void *)(v5 + 48) + 48 * v66);
        specialized _NativeDictionary._delete(at:)(v66, v5);
        *uint64_t v69 = v5;
        swift_bridgeObjectRelease();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
      }
      uint64_t v71 = v165;
      long long v72 = v166;
      unint64_t v73 = v164;
      if (v63 >= *(void *)(v3 + 16)) {
        goto LABEL_161;
      }
      uint64_t v74 = v3 + 96 * v63;
      *(_OWORD *)(v74 + 32) = v157;
      *(void *)(v74 + 48) = v155;
      *(_OWORD *)(v74 + 56) = v156;
      *(void *)(v74 + 72) = v65;
      *(void *)(v74 + 80) = v24;
      *(void *)(v74 + 88) = v72;
      *(void *)(v74 + 96) = v71;
      *(void *)(v74 + 104) = v163;
      *(void *)(v74 + 112) = v73;
      *(unsigned char *)(v74 + 120) = v162;
      *(unsigned char *)(v74 + 121) = 5;
      int v75 = v168;
      *uint64_t v168 = (char *)v3;
      uint64_t v3 = (uint64_t)v75;
      outlined destroy of TableRowID((uint64_t)v177);
      uint64_t v8 = v169;
      unint64_t v7 = v170 - 1;
      goto LABEL_7;
    case 6:
      goto LABEL_7;
    default:
      uint64_t v165 = *(void *)(v22 + 32);
      *(void *)&uint64_t v166 = v23;
      uint64_t v169 = v8;
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v161, (uint64_t)v182, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
      specialized ShadowSectionCollection.init(_:)(v182, (uint64_t)v177);
      uint64_t v31 = v179;
      uint64_t v30 = v180;
      uint64_t v3 = v178;
      if (*(void *)(v180 + 16))
      {
        uint64_t v32 = swift_bridgeObjectRetain();
LABEL_71:
        uint64_t v6 = &v154;
        MEMORY[0x1F4188790](v32);
        lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
        swift_getKeyPath();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v88 = v158;
        uint64_t updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v30, v31);
        long long v158 = v88;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
        unint64_t v5 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, v165);
        swift_bridgeObjectRelease();
        if ((v5 & 0x8000000000000000) != 0) {
          goto LABEL_134;
        }
        goto LABEL_72;
      }
      uint64_t v87 = *(void *)(v179 + 16);
      uint64_t v32 = swift_bridgeObjectRetain();
      if (v87) {
        goto LABEL_71;
      }
      unint64_t v5 = v165;
      if (v165 < 0) {
        goto LABEL_134;
      }
LABEL_72:
      if (v5 >= *(void *)(v3 + 16)) {
        goto LABEL_136;
      }
      char v90 = v25 & 1;
      outlined init with copy of TableSections.Item(v3 + 96 * v5 + 32, (uint64_t)v182);
      uint64_t v91 = v182[0];
      outlined destroy of TableSections.Item((uint64_t)v182);
      swift_bridgeObjectRelease();
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v177, (uint64_t (*)(void))type metadata accessor for CountingIndexCollection<ShadowSectionCollection<TableDataSourceAdaptor>>);
      uint64_t v3 = (uint64_t)v168;
      unint64_t v5 = (unint64_t)v168[3];
      if (!*(void *)(v5 + 16))
      {
        uint64_t v6 = v167;
LABEL_100:
        unint64_t v129 = swift_isUniquelyReferenced_nonNull_native();
        v177[0] = *(void *)(v3 + 24);
        *(void *)(v3 + 24) = 0x8000000000000000;
        unint64_t v5 = (unint64_t)v177;
        uint64_t v130 = v170;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v170, v165, v166, v90, v91, v129);
        *(void *)(v3 + 24) = v177[0];
        swift_bridgeObjectRelease();
        unint64_t v7 = v130;
        uint64_t v8 = v169;
        goto LABEL_7;
      }
      uint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
      uint64_t v6 = v167;
      if ((v93 & 1) == 0) {
        goto LABEL_100;
      }
      uint64_t v94 = *(void *)(v5 + 56) + 32 * v92;
      unint64_t v95 = *(void *)v94;
      if ((*(void *)v94 & 0x8000000000000000) != 0) {
        goto LABEL_147;
      }
      uint64_t v3 = *(void *)v3;
      if (v95 >= *(void *)(v3 + 16)) {
        goto LABEL_150;
      }
      if (*(unsigned char *)(v3 + 96 * v95 + 121) == 1)
      {
        uint64_t v96 = *(void *)(v94 + 8);
        uint64_t v164 = *(void *)(v94 + 16);
        uint64_t v97 = *(unsigned __int8 *)(v94 + 24);
        unint64_t v98 = specialized __RawDictionaryStorage.find<A>(_:)(v91);
        if (v99)
        {
          uint64_t v100 = v98;
          *(void *)&long long v163 = v96;
          uint64_t v101 = v168;
          uint64_t v102 = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v103 = (uint64_t)v101[3];
          v177[0] = v103;
          v101[3] = (char *)0x8000000000000000;
          if ((v102 & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            unint64_t v103 = v177[0];
          }
          specialized _NativeDictionary._delete(at:)(v100, v103);
          v101[3] = (char *)v103;
          swift_bridgeObjectRelease();
          uint64_t v96 = v163;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
        }
        uint64_t v8 = v169;
        long long v104 = v165;
        uint64_t v105 = v166;
        if (v95 >= *(void *)(v3 + 16))
        {
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_163:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
LABEL_164:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          JUMPOUT(0x187FA1214);
        }
        char v106 = v3 + 96 * v95;
        *(void *)(v106 + 32) = v165;
        *(void *)(v106 + 40) = v105;
        *(void *)(v106 + 48) = v90;
        *(void *)(v106 + 56) = v96;
        uint64_t v107 = v164;
        *(void *)(v106 + 64) = v164;
        *(void *)(v106 + 72) = v97;
        *(_OWORD *)(v106 + 80) = 0u;
        *(_OWORD *)(v106 + 96) = 0u;
        *(_OWORD *)(v106 + 105) = 0u;
        *(unsigned char *)(v106 + 121) = 2;
        uint64_t v108 = v168;
        *uint64_t v168 = (char *)v3;
        uint64_t v3 = (uint64_t)v108;
        char v109 = specialized ListBatchUpdates.computeRowRemovesAndInserts<A>(from:sourceSection:to:targetSection:)(v161, v104, v105, v90, v160, v96, v107, v97);
        unint64_t v5 = (unint64_t)v183;
        specialized Array.append<A>(contentsOf:)(v109);
        unint64_t v7 = v170 - 1;
      }
      else
      {
LABEL_109:
        uint64_t v8 = v169;
        unint64_t v7 = v170;
        uint64_t v3 = (uint64_t)v168;
      }
      goto LABEL_7;
  }
}

uint64_t specialized CollectionChanges.formChanges<A, B>(from:to:)(uint64_t a1, void *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *v5;
  uint64_t v12 = specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  uint64_t v13 = v12 + 32;
  Swift::Int v14 = *(void *)(v12 + 16);
  a3 &= 1u;
  outlined copy of ResolvedTableRowIDs.Storage((uint64_t)a2, a3);
  uint64_t v15 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, a3, a4, a5);
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content((uint64_t)a2, a3);
  uint64_t v16 = (char *)specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(v15 + 32, *(void *)(v15 + 16), v13, v14, v11, 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v18 = v17;
  swift_release();
  uint64_t result = swift_release();
  if (!v16)
  {
LABEL_216:
    __break(1u);
LABEL_217:
    __break(1u);
LABEL_218:
    __break(1u);
    return result;
  }
  uint64_t v138 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v16);
  swift_bridgeObjectRelease();
  uint64_t v137 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v18);
  swift_bridgeObjectRelease();
  uint64_t v20 = *(void *)(a1 + 232);
  uint64_t result = specialized ShadowRowCollection.endIndex.getter();
  uint64_t v136 = a4 + a5;
  if (__OFADD__(a4, a5))
  {
LABEL_200:
    __break(1u);
LABEL_201:
    __break(1u);
LABEL_202:
    __break(1u);
LABEL_203:
    __break(1u);
LABEL_204:
    __break(1u);
LABEL_205:
    __break(1u);
LABEL_206:
    __break(1u);
LABEL_207:
    __break(1u);
LABEL_208:
    __break(1u);
LABEL_209:
    __break(1u);
LABEL_210:
    __break(1u);
LABEL_211:
    __break(1u);
LABEL_212:
    __break(1u);
LABEL_213:
    __break(1u);
LABEL_214:
    __break(1u);
LABEL_215:
    __break(1u);
    goto LABEL_216;
  }
  uint64_t v21 = a5;
  int64_t v22 = *(void *)(a1 + 208);
  char v139 = (void *)a1;
  uint64_t v23 = specialized ShadowRowCollection.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v134 = v20;
  if (v20 <= 0 && v21 < 1)
  {
    uint64_t v145 = MEMORY[0x1E4FBC860];
    goto LABEL_6;
  }
  uint64_t v148 = 0;
  uint64_t v150 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v135 = 0;
  unint64_t v144 = 0;
  BOOL v26 = v136 == a4;
  uint64_t v27 = v22 == v23;
  unint64_t v124 = v137 + 32;
  uint64_t v125 = v138 + 32;
  uint64_t v145 = MEMORY[0x1E4FBC860];
  uint64_t v133 = a4;
  uint64_t v151 = a4;
  uint64_t v28 = 0;
  int64_t v29 = v22;
  int64_t v30 = v22;
  LOBYTE(v31) = v27;
  uint64_t v32 = v134;
  int64_t v130 = v22;
  uint64_t v131 = v21;
LABEL_8:
  BOOL v146 = v26;
  uint64_t v34 = v150;
  uint64_t v33 = v151;
  char v132 = (uint64_t *)&v124[16 * v144];
  while (2)
  {
    while (2)
    {
      long long v127 = &v125[16 * v135];
      uint64_t v35 = v27;
      while (1)
      {
        uint64_t v142 = v25;
        uint64_t v143 = v28;
        if ((v135 & 0x8000000000000000) == 0 && v135 < *((void *)v138 + 2) && *(void *)v127 == v28) {
          break;
        }
        unint64_t v36 = *((void *)v137 + 2);
        uint64_t v140 = v35;
        if (v144 < v36 && *v132 == v25)
        {
          uint64_t v106 = *(void *)&v124[16 * v144 + 8];
          uint64_t v107 = v106 - v25;
          if (__OFSUB__(v106, v25)) {
            goto LABEL_203;
          }
          if (v136 < v133) {
            goto LABEL_204;
          }
          if (v33 < v133) {
            goto LABEL_204;
          }
          uint64_t v108 = v136 - v33;
          if (v136 < v33) {
            goto LABEL_204;
          }
          if (__OFSUB__(v136, v33)) {
            goto LABEL_205;
          }
          if (v107 < 1)
          {
            if (v108 <= 0 && v107 < v108) {
              goto LABEL_163;
            }
LABEL_164:
            uint64_t v111 = v33 + v107;
            if (__OFADD__(v33, v107)) {
              goto LABEL_210;
            }
            if (v111 < v133 || v136 < v111) {
              goto LABEL_211;
            }
            if (v111 == v136)
            {
              uint64_t v150 = 0;
            }
            else
            {
              if (v26) {
                goto LABEL_217;
              }
              uint64_t v150 = v34 + v107;
              if (__OFADD__(v34, v107)) {
                goto LABEL_212;
              }
            }
            int v110 = 0;
            BOOL v109 = v111 == v136;
            LOBYTE(v152[0]) = v111 == v136;
          }
          else
          {
            if (v108 < 0 || v108 >= (unint64_t)v107) {
              goto LABEL_164;
            }
LABEL_163:
            BOOL v109 = 0;
            uint64_t v150 = 0;
            int v110 = 1;
            uint64_t v111 = v136;
          }
          uint64_t v112 = v110 | v109;
          uint64_t v151 = v111;
          uint64_t v147 = v107;
          BOOL v123 = v26;
          if (v111 == v33)
          {
            uint64_t v113 = v33;
            uint64_t v114 = v24;
            uint64_t v115 = 0x7FFFFFFFFFFFFFFFLL;
            if (!v26) {
              uint64_t v115 = v34;
            }
            uint64_t v116 = v112;
            if (v150 >= v115) {
              int v117 = 1;
            }
            else {
              int v117 = v112;
            }
            if (v117 != 1) {
              goto LABEL_206;
            }
          }
          else
          {
            uint64_t v116 = v110 | v109;
            uint64_t v113 = v33;
            uint64_t v114 = v24;
            if (v111 < v33) {
              goto LABEL_206;
            }
          }
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v145 + 16) + 1, 1, (char *)v145);
            uint64_t v145 = result;
          }
          unint64_t v119 = *(void *)(v145 + 16);
          unint64_t v118 = *(void *)(v145 + 24);
          uint64_t v120 = v142;
          uint64_t v24 = v114;
          BOOL v26 = v116;
          if (v119 >= v118 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v118 > 1), v119 + 1, 1, (char *)v145);
            BOOL v26 = v116;
            uint64_t v24 = v114;
            uint64_t v120 = v142;
            uint64_t v145 = result;
          }
          *(void *)(v145 + 16) = v119 + 1;
          unint64_t v121 = v145 + 96 * v119;
          *(void *)(v121 + 32) = v113;
          *(void *)(v121 + 40) = v34;
          *(void *)(v121 + 48) = v123;
          *(void *)(v121 + 56) = v151;
          *(void *)(v121 + 64) = v150;
          *(void *)(v121 + 72) = v26;
          *(_OWORD *)(v121 + 80) = 0u;
          *(_OWORD *)(v121 + 96) = 0u;
          *(_OWORD *)(v121 + 105) = 0u;
          *(unsigned char *)(v121 + 121) = 1;
          ++v144;
          uint64_t v25 = v147 + v120;
          uint64_t v32 = v134;
          uint64_t v21 = v131;
          uint64_t v27 = v140;
          if (v28 < v134 || v25 < v131) {
            goto LABEL_8;
          }
          goto LABEL_6;
        }
        uint64_t v37 = v32;
        if ((v135 & 0x8000000000000000) == 0)
        {
          uint64_t v37 = v32;
          if (v135 < *((void *)v138 + 2)) {
            uint64_t v37 = *(void *)v127;
          }
        }
        uint64_t v38 = v21;
        if (v144 < v36) {
          uint64_t v38 = *v132;
        }
        if (v38 - v25 >= v37 - v28) {
          uint64_t v39 = v37 - v28;
        }
        else {
          uint64_t v39 = v38 - v25;
        }
        uint64_t v40 = v139[27];
        uint64_t v41 = v22 + v40;
        if (__OFADD__(v22, v40))
        {
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
LABEL_194:
          __break(1u);
LABEL_195:
          __break(1u);
LABEL_196:
          __break(1u);
LABEL_197:
          __break(1u);
LABEL_198:
          __break(1u);
LABEL_199:
          __break(1u);
          goto LABEL_200;
        }
        unint64_t v42 = v139[28];
        uint64_t v43 = v139[22];
        uint64_t v44 = v139[23];
        unint64_t v45 = *(void *)(v44 + 16);
        if (v45 || (unint64_t v45 = v41, *(void *)(v43 + 16)))
        {
          uint64_t result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v152, v139[23], v139[22], v139[28], v41, v45);
          unint64_t v45 = v152[0];
        }
        if (v39 < 0)
        {
          uint64_t v49 = 0;
          int64_t v50 = v29;
          while (v50 != v45)
          {
            int64_t v30 = v22;
            if (v50 != v22)
            {
              int64_t v30 = v50 - 1;
              if (__OFSUB__(v50, 1))
              {
LABEL_189:
                __break(1u);
                goto LABEL_190;
              }
            }
            --v49;
            int64_t v50 = v30;
            if (v39 >= v49) {
              goto LABEL_48;
            }
          }
          goto LABEL_46;
        }
        if (v39)
        {
          unint64_t v46 = v39 - 1;
          if (v45 - v29 >= (v29 ^ 0x7FFFFFFFFFFFFFFFuLL)) {
            unint64_t v47 = v29 ^ 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v45 - v29;
          }
          if (v46 >= v47) {
            unint64_t v46 = v47;
          }
          uint64_t v48 = v39;
          int64_t v30 = v29;
          while (v45 - v29 != v46)
          {
            if ((v29 ^ 0x7FFFFFFFFFFFFFFFLL) == v46)
            {
              __break(1u);
              goto LABEL_189;
            }
            ++v30;
            if (!--v48) {
              goto LABEL_48;
            }
          }
LABEL_46:
          BOOL v51 = 0;
          uint64_t v52 = 0;
          int v53 = 1;
          int64_t v30 = v45;
          uint64_t v54 = v136;
          goto LABEL_56;
        }
        int64_t v30 = v29;
LABEL_48:
        unint64_t v55 = *(void *)(v44 + 16);
        if (v55 || (unint64_t v55 = *(void *)(v43 + 16)) != 0)
        {
          uint64_t result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v152, v44, v43, v42, v41, v55);
          uint64_t v41 = v152[0];
        }
        uint64_t v54 = v136;
        if (v30 == v41)
        {
          uint64_t v52 = 0;
        }
        else
        {
          if (v35) {
            goto LABEL_214;
          }
          uint64_t v52 = v148 + v39;
          if (__OFADD__(v148, v39)) {
            goto LABEL_198;
          }
        }
        int v53 = 0;
        BOOL v51 = v30 == v41;
        LOBYTE(v152[0]) = v30 == v41;
LABEL_56:
        uint64_t v56 = v53 | v51;
        if (v30 == v29)
        {
          uint64_t v57 = 0x7FFFFFFFFFFFFFFFLL;
          if ((v35 & 1) == 0) {
            uint64_t v57 = v148;
          }
          if (v52 >= v57) {
            int v58 = 1;
          }
          else {
            int v58 = v53 | v51;
          }
          uint64_t v59 = v151;
          if (v58 != 1) {
            goto LABEL_191;
          }
        }
        else
        {
          uint64_t v59 = v151;
          if (v30 < v29) {
            goto LABEL_191;
          }
        }
        if (v59 < v133) {
          goto LABEL_192;
        }
        uint64_t v60 = v54 - v59;
        if (v54 < v59) {
          goto LABEL_193;
        }
        if (__OFSUB__(v54, v59)) {
          goto LABEL_194;
        }
        if (v39 < 1)
        {
          if (v60 <= 0 && v39 < v60)
          {
LABEL_74:
            int64_t v61 = v29;
            BOOL v62 = 0;
            uint64_t v63 = 0;
            int v64 = 1;
            uint64_t v65 = v54;
            goto LABEL_83;
          }
        }
        else if ((v60 & 0x8000000000000000) == 0 && v60 < v39)
        {
          goto LABEL_74;
        }
        uint64_t v65 = v59 + v39;
        if (__OFADD__(v59, v39)) {
          goto LABEL_196;
        }
        if (v65 < v133 || v54 < v65) {
          goto LABEL_197;
        }
        if (v65 == v54)
        {
          int64_t v61 = v29;
          uint64_t v63 = 0;
        }
        else
        {
          if (v146) {
            goto LABEL_215;
          }
          int64_t v61 = v29;
          uint64_t v63 = v150 + v39;
          if (__OFADD__(v150, v39)) {
            goto LABEL_199;
          }
        }
        int v64 = 0;
        BOOL v62 = v65 == v54;
        LOBYTE(v152[0]) = v65 == v54;
LABEL_83:
        uint64_t v66 = v64 | v62;
        if (v65 == v59)
        {
          uint64_t v67 = 0x7FFFFFFFFFFFFFFFLL;
          if (!v146) {
            uint64_t v67 = v150;
          }
          if (v63 >= v67) {
            int v68 = 1;
          }
          else {
            int v68 = v66;
          }
          if (v68 != 1) {
            goto LABEL_195;
          }
        }
        else if (v65 < v59)
        {
          goto LABEL_195;
        }
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if ((result & 1) == 0)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v145 + 16) + 1, 1, (char *)v145);
          uint64_t v145 = result;
        }
        unint64_t v70 = *(void *)(v145 + 16);
        unint64_t v69 = *(void *)(v145 + 24);
        uint64_t v71 = v142;
        if (v70 >= v69 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v69 > 1), v70 + 1, 1, (char *)v145);
          BOOL v26 = v66;
          uint64_t v33 = v65;
          uint64_t v24 = v52;
          uint64_t v71 = v142;
          uint64_t v145 = result;
        }
        else
        {
          uint64_t v24 = v52;
          uint64_t v33 = v65;
          BOOL v26 = v66;
        }
        int64_t v22 = v130;
        *(void *)(v145 + 16) = v70 + 1;
        unint64_t v72 = v145 + 96 * v70;
        *(void *)(v72 + 32) = v61;
        *(void *)(v72 + 40) = v148;
        *(void *)(v72 + 48) = v140 & 1;
        *(void *)(v72 + 56) = v30;
        *(void *)(v72 + 64) = v24;
        *(void *)(v72 + 72) = v56;
        uint64_t v31 = v56;
        *(void *)(v72 + 80) = v151;
        *(void *)(v72 + 88) = v150;
        uint64_t v28 = v39 + v143;
        *(void *)(v72 + 96) = v146;
        *(void *)(v72 + 104) = v33;
        uint64_t v34 = v63;
        *(void *)(v72 + 112) = v63;
        uint64_t v25 = v39 + v71;
        uint64_t v150 = v63;
        uint64_t v151 = v33;
        BOOL v146 = v26;
        uint64_t v148 = v24;
        int64_t v29 = v30;
        *(unsigned char *)(v72 + 120) = v26;
        uint64_t v35 = v31;
        *(unsigned char *)(v72 + 121) = 2;
        uint64_t v32 = v134;
        uint64_t v21 = v131;
        if (v39 + v143 >= v134)
        {
          uint64_t v150 = v34;
          uint64_t v151 = v33;
          BOOL v146 = v26;
          uint64_t v148 = v24;
          int64_t v29 = v30;
          uint64_t v35 = v31;
          if (v25 >= v131) {
            goto LABEL_6;
          }
        }
      }
      uint64_t v73 = *(void *)&v125[16 * v135 + 8];
      uint64_t v74 = v73 - v28;
      if (__OFSUB__(v73, v28)) {
        goto LABEL_207;
      }
      uint64_t v149 = *(void *)&v125[16 * v135 + 8];
      uint64_t v75 = v139[27];
      uint64_t v76 = v22 + v75;
      if (__OFADD__(v22, v75)) {
        goto LABEL_208;
      }
      unint64_t v77 = v139[28];
      uint64_t v79 = v139[22];
      uint64_t v78 = v139[23];
      unint64_t v80 = *(void *)(v78 + 16);
      uint64_t v141 = v74;
      if (v80 || (unint64_t v80 = v76, *(void *)(v79 + 16)))
      {
        uint64_t v81 = v139[23];
        uint64_t v82 = v139[22];
        unint64_t v83 = v139[28];
        char v128 = v31;
        uint64_t v31 = v24;
        uint64_t v84 = v33;
        BOOL v122 = v26;
        uint64_t result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v152, v78, v79, v77, v76, v80);
        uint64_t v79 = v82;
        uint64_t v78 = v81;
        unint64_t v77 = v83;
        BOOL v26 = v122;
        uint64_t v33 = v84;
        uint64_t v24 = v31;
        LOBYTE(v31) = v128;
        uint64_t v74 = v141;
        unint64_t v80 = v152[0];
      }
      if (v74 < 0)
      {
        uint64_t v88 = 0;
        int64_t v89 = v30;
        int64_t v22 = v130;
        while (v89 != v80)
        {
          int64_t v29 = v130;
          if (v89 != v130)
          {
            int64_t v29 = v89 - 1;
            if (__OFSUB__(v89, 1)) {
              goto LABEL_202;
            }
          }
          --v88;
          int64_t v89 = v29;
          if (v74 >= v88) {
            goto LABEL_126;
          }
        }
LABEL_124:
        BOOL v90 = 0;
        uint64_t v148 = 0;
        int v91 = 1;
        int64_t v29 = v80;
      }
      else
      {
        if (v74)
        {
          unint64_t v85 = v149 + ~v143;
          if (v80 - v30 >= (v30 ^ 0x7FFFFFFFFFFFFFFFuLL)) {
            unint64_t v86 = v30 ^ 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v86 = v80 - v30;
          }
          if (v85 >= v86) {
            unint64_t v85 = v86;
          }
          uint64_t v87 = v74;
          int64_t v29 = v30;
          int64_t v22 = v130;
          while (v80 - v30 != v85)
          {
            if ((v30 ^ 0x7FFFFFFFFFFFFFFFLL) == v85) {
              goto LABEL_201;
            }
            ++v29;
            if (!--v87) {
              goto LABEL_126;
            }
          }
          goto LABEL_124;
        }
        int64_t v29 = v30;
LABEL_126:
        BOOL v92 = v26;
        uint64_t v93 = v33;
        unint64_t v94 = *(void *)(v78 + 16);
        if (v94 || (unint64_t v94 = *(void *)(v79 + 16)) != 0)
        {
          uint64_t v95 = v76;
          uint64_t v96 = v24;
          uint64_t result = (uint64_t)specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v152, v78, v79, v77, v95, v94);
          uint64_t v24 = v96;
          uint64_t v76 = v152[0];
        }
        if (v29 == v76)
        {
          uint64_t v148 = 0;
          uint64_t v33 = v93;
          int64_t v22 = v130;
          BOOL v26 = v92;
        }
        else
        {
          if (v31) {
            goto LABEL_218;
          }
          uint64_t v148 = v24 + v74;
          if (__OFADD__(v24, v74)) {
            goto LABEL_213;
          }
          uint64_t v33 = v93;
          BOOL v26 = v92;
          int64_t v22 = v130;
        }
        int v91 = 0;
        BOOL v90 = v29 == v76;
        LOBYTE(v152[0]) = v29 == v76;
      }
      uint64_t v129 = v34;
      uint64_t v27 = v91 | v90;
      BOOL v97 = v26;
      uint64_t v98 = v33;
      if (v29 == v30)
      {
        char v99 = v31;
        BOOL v100 = (v31 & 1) == 0;
        uint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
        uint64_t v31 = v24;
        if (v100) {
          uint64_t v101 = v24;
        }
        if (v148 >= v101) {
          int v102 = 1;
        }
        else {
          int v102 = v91 | v90;
        }
        if (v102 != 1) {
          goto LABEL_209;
        }
      }
      else
      {
        char v99 = v31;
        uint64_t v31 = v24;
        if (v29 < v30) {
          goto LABEL_209;
        }
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v145 + 16) + 1, 1, (char *)v145);
        uint64_t v145 = result;
      }
      unint64_t v104 = *(void *)(v145 + 16);
      unint64_t v103 = *(void *)(v145 + 24);
      uint64_t v25 = v142;
      uint64_t v33 = v98;
      BOOL v26 = v97;
      if (v104 >= v103 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v103 > 1), v104 + 1, 1, (char *)v145);
        BOOL v26 = v97;
        uint64_t v33 = v98;
        int64_t v22 = v130;
        uint64_t v25 = v142;
        uint64_t v145 = result;
      }
      *(void *)(v145 + 16) = v104 + 1;
      unint64_t v105 = v145 + 96 * v104;
      *(void *)(v105 + 32) = v30;
      *(void *)(v105 + 40) = v31;
      *(void *)(v105 + 48) = v99 & 1;
      *(void *)(v105 + 56) = v29;
      *(void *)(v105 + 64) = v148;
      *(void *)(v105 + 72) = v27;
      uint64_t v32 = v134;
      ++v135;
      uint64_t v28 = v141 + v143;
      *(_OWORD *)(v105 + 80) = 0u;
      *(_OWORD *)(v105 + 96) = 0u;
      *(_OWORD *)(v105 + 106) = 0u;
      int64_t v30 = v29;
      LOBYTE(v31) = v27;
      uint64_t v24 = v148;
      uint64_t v21 = v131;
      uint64_t v34 = v129;
      if (v141 + v143 < v134) {
        continue;
      }
      break;
    }
    int64_t v30 = v29;
    LOBYTE(v31) = v27;
    uint64_t v24 = v148;
    if (v25 < v131) {
      continue;
    }
    break;
  }
LABEL_6:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *BOOL v126 = v145;
  return result;
}

uint64_t specialized CollectionChanges.formChanges<A, B>(from:to:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, unsigned char *), uint64_t a4)
{
  Swift::Int v9 = *v4;
  uint64_t v10 = specialized _copyCollectionToContiguousArray<A>(_:)(a1);
  uint64_t v11 = v10 + 32;
  Swift::Int v12 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v13 = specialized _copyCollectionToContiguousArray<A>(_:)(a2, a3, a4);
  swift_release();
  swift_bridgeObjectRelease();
  Swift::Int v14 = (char *)specialized closure #1 in closure #1 in CollectionChanges.changedOffsets<A, B>(from:to:limit:)(v13 + 4, v13[2], v11, v12, v9, 0x7FFFFFFFFFFFFFFFLL);
  uint64_t v16 = v15;
  swift_release();
  uint64_t result = swift_release();
  if (!v14) {
    goto LABEL_195;
  }
  uint64_t v111 = v4;
  unint64_t v121 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v120 = convertOffsetsToRanges #1 <A, B><A1, B1>(_:) in CollectionChanges.formChanges<A, B>(from:to:)(v16);
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a1 + 192);
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v20 = v18 == 0;
  if (v18 <= 0 && !v19)
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
    goto LABEL_5;
  }
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  uint64_t v33 = v19 == 0;
  int v110 = v121 + 32;
  BOOL v109 = v120 + 32;
  uint64_t v21 = MEMORY[0x1E4FBC860];
  BOOL v34 = v18 == 0;
  uint64_t v114 = v18;
  uint64_t v115 = v19;
  while (2)
  {
    uint64_t v35 = v33;
    uint64_t v36 = v25;
    uint64_t v37 = v33;
    uint64_t v38 = v26;
    uint64_t v116 = &v109[16 * v32];
    unint64_t v118 = v32;
LABEL_8:
    uint64_t v112 = (uint64_t *)&v110[16 * v31];
    BOOL v39 = v20;
    unint64_t v119 = v31;
LABEL_9:
    uint64_t v137 = v29;
    uint64_t v138 = v25;
    if ((v31 & 0x8000000000000000) != 0 || v31 >= *((void *)v121 + 2) || *v112 != v29)
    {
      unint64_t v40 = *((void *)v120 + 2);
      if (v32 < v40 && *(void *)v116 == v30)
      {
        uint64_t v91 = *(void *)&v109[16 * v32 + 8];
        uint64_t v92 = v91 - v30;
        if (__OFSUB__(v91, v30)) {
          goto LABEL_185;
        }
        uint64_t v93 = v19 - v36;
        if (__OFSUB__(v19, v36))
        {
LABEL_186:
          __break(1u);
          goto LABEL_187;
        }
        uint64_t v127 = v92;
        if (v92 < 1)
        {
          if (v93 <= 0 && v92 < v93) {
            goto LABEL_151;
          }
LABEL_152:
          uint64_t v97 = v36 + v92;
          if (__OFADD__(v36, v92)) {
            goto LABEL_190;
          }
          if (v97 == v19)
          {
            uint64_t v95 = 0;
          }
          else
          {
            if (v37) {
              goto LABEL_196;
            }
            uint64_t v95 = v38 + v92;
            if (__OFADD__(v38, v92)) {
              goto LABEL_191;
            }
          }
          int v96 = 0;
          BOOL v94 = v97 == v19;
        }
        else
        {
          if (v93 < 0 || v93 >= (unint64_t)v92) {
            goto LABEL_152;
          }
LABEL_151:
          BOOL v94 = 0;
          uint64_t v95 = 0;
          int v96 = 1;
          uint64_t v97 = v19;
        }
        BOOL v117 = v39;
        BOOL v130 = v34;
        uint64_t v124 = v23;
        uint64_t v33 = v96 | v94;
        uint64_t v139 = v97;
        uint64_t v133 = v36;
        uint64_t v136 = v38;
        if (v97 == v36)
        {
          uint64_t v98 = v28;
          uint64_t v99 = v30;
          char v100 = v37;
          uint64_t v101 = 0x7FFFFFFFFFFFFFFFLL;
          if ((v37 & 1) == 0) {
            uint64_t v101 = v38;
          }
          uint64_t v102 = v95;
          if (v95 >= v101) {
            int v103 = 1;
          }
          else {
            int v103 = v33;
          }
          if (v103 != 1)
          {
LABEL_187:
            __break(1u);
            goto LABEL_188;
          }
        }
        else
        {
          char v100 = v37;
          uint64_t v102 = v95;
          uint64_t v98 = v28;
          uint64_t v99 = v30;
          if (v97 < v36) {
            goto LABEL_187;
          }
        }
        uint64_t v104 = v21;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        if (result)
        {
          uint64_t v21 = v104;
        }
        else
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v104 + 16) + 1, 1, (char *)v104);
          uint64_t v21 = result;
        }
        unint64_t v106 = *(void *)(v21 + 16);
        unint64_t v105 = *(void *)(v21 + 24);
        uint64_t v107 = v99;
        uint64_t v28 = v98;
        uint64_t v26 = v102;
        if (v106 >= v105 >> 1)
        {
          uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v105 > 1), v106 + 1, 1, (char *)v21);
          uint64_t v26 = v102;
          uint64_t v28 = v98;
          uint64_t v107 = v99;
          uint64_t v21 = result;
        }
        *(void *)(v21 + 16) = v106 + 1;
        unint64_t v108 = v21 + 96 * v106;
        *(void *)(v108 + 32) = v133;
        *(void *)(v108 + 40) = v136;
        uint64_t v25 = v139;
        *(void *)(v108 + 48) = v100 & 1;
        *(void *)(v108 + 56) = v139;
        *(void *)(v108 + 64) = v26;
        *(void *)(v108 + 72) = v33;
        *(_OWORD *)(v108 + 80) = 0u;
        *(_OWORD *)(v108 + 96) = 0u;
        *(_OWORD *)(v108 + 105) = 0u;
        *(unsigned char *)(v108 + 121) = 1;
        unint64_t v31 = v119;
        unint64_t v32 = v118 + 1;
        uint64_t v23 = v124;
        uint64_t v30 = v127 + v107;
        uint64_t v19 = v115;
        uint64_t v20 = v117;
        BOOL v34 = v130;
        if (v29 >= v18 && v30 >= v115) {
          goto LABEL_5;
        }
        continue;
      }
      uint64_t v41 = v18;
      if ((v31 & 0x8000000000000000) == 0)
      {
        uint64_t v41 = v18;
        if (v31 < *((void *)v121 + 2)) {
          uint64_t v41 = *v112;
        }
      }
      uint64_t v42 = v19;
      if (v32 < v40) {
        uint64_t v42 = *(void *)v116;
      }
      if (v42 - v30 >= v41 - v29) {
        uint64_t v43 = v41 - v29;
      }
      else {
        uint64_t v43 = v42 - v30;
      }
      if ((v43 & 0x8000000000000000) == 0)
      {
        if (!v43)
        {
          uint64_t v27 = v23;
LABEL_44:
          if (v27 == v18)
          {
            uint64_t v48 = 0;
            int v47 = 1;
            uint64_t v27 = v18;
            goto LABEL_51;
          }
LABEL_48:
          if (!v39)
          {
            uint64_t v48 = v24 + v43;
            if (!__OFADD__(v24, v43))
            {
              int v47 = 0;
              goto LABEL_51;
            }
            goto LABEL_181;
          }
          goto LABEL_193;
        }
        unint64_t v44 = v43 - 1;
        if (v18 - v23 >= (v23 ^ 0x7FFFFFFFFFFFFFFFuLL)) {
          unint64_t v45 = v23 ^ 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v45 = v18 - v23;
        }
        if (v44 >= v45) {
          unint64_t v44 = v45;
        }
        uint64_t v46 = v43;
        uint64_t v27 = v23;
        while (v18 - v23 != v44)
        {
          if ((v23 ^ 0x7FFFFFFFFFFFFFFFLL) == v44)
          {
            __break(1u);
            goto LABEL_176;
          }
          ++v27;
          if (!--v46) {
            goto LABEL_44;
          }
        }
LABEL_35:
        int v47 = 0;
        uint64_t v48 = 0;
        int v49 = 1;
        uint64_t v27 = v18;
        goto LABEL_52;
      }
      if (v18 == v23) {
        goto LABEL_35;
      }
      uint64_t v50 = -1;
      uint64_t v27 = v23;
      while (1)
      {
        if (v27)
        {
          BOOL v51 = __OFSUB__(v27--, 1);
          if (v51)
          {
LABEL_176:
            __break(1u);
            goto LABEL_177;
          }
          if (v43 >= v50) {
            goto LABEL_44;
          }
        }
        else
        {
          if (v43 >= v50)
          {
            uint64_t v48 = 0;
            if (v18)
            {
              uint64_t v27 = 0;
              goto LABEL_48;
            }
            int v47 = 1;
            uint64_t v27 = 0;
LABEL_51:
            int v49 = 0;
LABEL_52:
            uint64_t v52 = v49 | v47;
            if (v27 == v23)
            {
              uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
              if (!v39) {
                uint64_t v53 = v24;
              }
              if (v48 >= v53) {
                int v54 = 1;
              }
              else {
                int v54 = v52;
              }
              if (v54 != 1)
              {
LABEL_177:
                __break(1u);
LABEL_178:
                __break(1u);
LABEL_179:
                __break(1u);
LABEL_180:
                __break(1u);
LABEL_181:
                __break(1u);
LABEL_182:
                __break(1u);
LABEL_183:
                __break(1u);
LABEL_184:
                __break(1u);
LABEL_185:
                __break(1u);
                goto LABEL_186;
              }
            }
            else if (v27 < v23)
            {
              goto LABEL_177;
            }
            uint64_t v55 = v19 - v25;
            if (__OFSUB__(v19, v25)) {
              goto LABEL_178;
            }
            if (v43 <= 0)
            {
              if (v55 <= 0 && v43 < v55) {
                goto LABEL_68;
              }
LABEL_69:
              uint64_t v59 = v25 + v43;
              if (__OFADD__(v25, v43)) {
                goto LABEL_180;
              }
              if (v59 == v19)
              {
                uint64_t v57 = 0;
              }
              else
              {
                if (v35) {
                  goto LABEL_194;
                }
                uint64_t v57 = v26 + v43;
                if (__OFADD__(v26, v43)) {
                  goto LABEL_182;
                }
              }
              int v58 = 0;
              BOOL v56 = v59 == v19;
              goto LABEL_75;
            }
            if (v55 < 0 || v55 >= v43) {
              goto LABEL_69;
            }
LABEL_68:
            BOOL v56 = 0;
            uint64_t v57 = 0;
            int v58 = 1;
            uint64_t v59 = v19;
LABEL_75:
            uint64_t v60 = v58 | v56;
            if (v59 == v25)
            {
              uint64_t v61 = 0x7FFFFFFFFFFFFFFFLL;
              if ((v35 & 1) == 0) {
                uint64_t v61 = v26;
              }
              if (v57 >= v61) {
                int v62 = 1;
              }
              else {
                int v62 = v60;
              }
              if (v62 != 1) {
                goto LABEL_179;
              }
            }
            else if (v59 < v25)
            {
              goto LABEL_179;
            }
            uint64_t v125 = v60;
            BOOL v128 = v52;
            uint64_t v131 = v59;
            uint64_t v134 = v57;
            uint64_t v63 = v48;
            uint64_t v64 = v24;
            uint64_t v65 = v23;
            uint64_t v122 = v26;
            uint64_t v66 = v30;
            uint64_t v67 = v21;
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if (result)
            {
              uint64_t v21 = v67;
            }
            else
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v67 + 16) + 1, 1, (char *)v67);
              uint64_t v21 = result;
            }
            unint64_t v69 = *(void *)(v21 + 16);
            unint64_t v68 = *(void *)(v21 + 24);
            if (v69 >= v68 >> 1)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, (char *)v21);
              uint64_t v28 = v63;
              uint64_t v70 = v66;
              uint64_t v21 = result;
            }
            else
            {
              uint64_t v70 = v66;
              uint64_t v28 = v63;
            }
            *(void *)(v21 + 16) = v69 + 1;
            unint64_t v71 = v21 + 96 * v69;
            *(void *)(v71 + 32) = v65;
            *(void *)(v71 + 40) = v64;
            *(void *)(v71 + 48) = v39;
            *(void *)(v71 + 56) = v27;
            BOOL v34 = v128;
            uint64_t v36 = v131;
            *(void *)(v71 + 64) = v28;
            *(void *)(v71 + 72) = v128;
            uint64_t v37 = v125;
            *(void *)(v71 + 80) = v138;
            *(void *)(v71 + 88) = v122;
            uint64_t v38 = v134;
            v29 += v43;
            *(void *)(v71 + 96) = v35 & 1;
            *(void *)(v71 + 104) = v131;
            *(void *)(v71 + 112) = v134;
            uint64_t v30 = v43 + v70;
            uint64_t v23 = v27;
            BOOL v39 = v128;
            uint64_t v24 = v28;
            uint64_t v25 = v131;
            *(unsigned char *)(v71 + 120) = v125;
            uint64_t v35 = v125;
            uint64_t v26 = v134;
            *(unsigned char *)(v71 + 121) = 2;
            uint64_t v18 = v114;
            uint64_t v19 = v115;
            unint64_t v32 = v118;
            unint64_t v31 = v119;
            if (v43 + v137 >= v114)
            {
              uint64_t v23 = v27;
              BOOL v39 = v128;
              uint64_t v24 = v28;
              uint64_t v25 = v131;
              uint64_t v35 = v125;
              uint64_t v26 = v134;
              if (v30 >= v115)
              {
LABEL_5:
                Swift::Int v22 = v21;
                swift_bridgeObjectRelease();
                uint64_t result = swift_bridgeObjectRelease();
                *uint64_t v111 = v22;
                return result;
              }
            }
            goto LABEL_9;
          }
          uint64_t v27 = 0;
        }
        --v50;
        if (v27 == v18) {
          goto LABEL_35;
        }
      }
    }
    break;
  }
  uint64_t v72 = *(void *)&v110[16 * v31 + 8];
  uint64_t v73 = v72 - v29;
  if (__OFSUB__(v72, v29))
  {
LABEL_188:
    __break(1u);
    goto LABEL_189;
  }
  if ((v73 & 0x8000000000000000) == 0)
  {
    if (!v73)
    {
      uint64_t v77 = v27;
LABEL_117:
      if (v77 == v18)
      {
        uint64_t v24 = 0;
        int v78 = 1;
        uint64_t v77 = v18;
        goto LABEL_124;
      }
LABEL_121:
      if (!v34)
      {
        uint64_t v24 = v28 + v73;
        if (!__OFADD__(v28, v73))
        {
          int v78 = 0;
          goto LABEL_124;
        }
        goto LABEL_192;
      }
      goto LABEL_197;
    }
    unint64_t v74 = v72 + ~v29;
    if (v18 - v27 >= (v27 ^ 0x7FFFFFFFFFFFFFFFuLL)) {
      unint64_t v75 = v27 ^ 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v75 = v18 - v27;
    }
    if (v74 >= v75) {
      unint64_t v74 = v75;
    }
    uint64_t v76 = v72 - v29;
    uint64_t v77 = v27;
    while (v18 - v27 != v74)
    {
      if ((v27 ^ 0x7FFFFFFFFFFFFFFFLL) == v74) {
        goto LABEL_183;
      }
      ++v77;
      if (!--v76) {
        goto LABEL_117;
      }
    }
LABEL_108:
    int v78 = 0;
    uint64_t v24 = 0;
    int v79 = 1;
    uint64_t v77 = v18;
    goto LABEL_125;
  }
  if (v18 == v27) {
    goto LABEL_108;
  }
  uint64_t v80 = -1;
  uint64_t v77 = v27;
  while (v77)
  {
    BOOL v51 = __OFSUB__(v77--, 1);
    if (v51) {
      goto LABEL_184;
    }
    if (v73 >= v80) {
      goto LABEL_117;
    }
LABEL_113:
    --v80;
    if (v77 == v18) {
      goto LABEL_108;
    }
  }
  if (v73 < v80)
  {
    uint64_t v77 = 0;
    goto LABEL_113;
  }
  uint64_t v24 = 0;
  if (v18)
  {
    uint64_t v77 = 0;
    goto LABEL_121;
  }
  int v78 = 1;
  uint64_t v77 = 0;
LABEL_124:
  int v79 = 0;
LABEL_125:
  uint64_t v126 = v37;
  uint64_t v129 = v35;
  uint64_t v132 = v36;
  uint64_t v135 = v38;
  uint64_t v20 = v79 | v78;
  uint64_t v123 = v77;
  uint64_t v113 = v73;
  uint64_t v81 = v26;
  if (v77 != v27)
  {
    BOOL v83 = v34;
    uint64_t v85 = v28;
    uint64_t v82 = v30;
    if (v77 < v27) {
      goto LABEL_189;
    }
LABEL_134:
    uint64_t v87 = v21;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      uint64_t v21 = v87;
    }
    else
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v87 + 16) + 1, 1, (char *)v87);
      uint64_t v21 = result;
    }
    unint64_t v89 = *(void *)(v21 + 16);
    unint64_t v88 = *(void *)(v21 + 24);
    uint64_t v30 = v82;
    uint64_t v26 = v81;
    if (v89 >= v88 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v88 > 1), v89 + 1, 1, (char *)v21);
      uint64_t v26 = v81;
      uint64_t v30 = v82;
      uint64_t v21 = result;
    }
    *(void *)(v21 + 16) = v89 + 1;
    unint64_t v90 = v21 + 96 * v89;
    *(void *)(v90 + 32) = v27;
    *(void *)(v90 + 40) = v85;
    uint64_t v23 = v123;
    *(void *)(v90 + 48) = v83;
    *(void *)(v90 + 56) = v123;
    *(void *)(v90 + 64) = v24;
    *(void *)(v90 + 72) = v20;
    unint64_t v32 = v118;
    unint64_t v31 = v119 + 1;
    uint64_t v38 = v135;
    v29 += v113;
    *(_OWORD *)(v90 + 80) = 0u;
    *(_OWORD *)(v90 + 96) = 0u;
    *(_OWORD *)(v90 + 106) = 0u;
    uint64_t v27 = v123;
    BOOL v34 = v20;
    uint64_t v28 = v24;
    uint64_t v19 = v115;
    uint64_t v25 = v138;
    uint64_t v35 = v129;
    uint64_t v36 = v132;
    uint64_t v37 = v126;
    if (v113 + v137 >= v18)
    {
      uint64_t v27 = v123;
      BOOL v34 = v20;
      uint64_t v28 = v24;
      if (v30 >= v115) {
        goto LABEL_5;
      }
    }
    goto LABEL_8;
  }
  uint64_t v82 = v30;
  BOOL v83 = v34;
  uint64_t v84 = 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v85 = v28;
  if (!v34) {
    uint64_t v84 = v28;
  }
  if (v24 >= v84) {
    int v86 = 1;
  }
  else {
    int v86 = v20;
  }
  if (v86 == 1) {
    goto LABEL_134;
  }
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(_OWORD *__return_ptr, uint64_t, double)@<X2>, char a4@<W4>, uint64_t a5@<X5>, uint64_t (*a6)(char *)@<X7>, void *a7@<X8>)
{
  uint64_t v14 = type metadata accessor for TableColumnCollection.Entry(0);
  double v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3(v30, a2, v15);
  outlined init with copy of TableColumnCollection.Entry(a2, (uint64_t)v17);
  if (a4) {
    goto LABEL_2;
  }
  if (!*(void *)(a5 + 16)) {
    goto LABEL_9;
  }
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v30, (uint64_t)v32);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v32, (void (*)(void, void, void, void, void))outlined copy of TableColumnCustomizationID.Base);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v30);
  if ((v19 & 1) == 0)
  {
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v30, (void (*)(void, void, void, void, void))outlined consume of TableColumnCustomizationID.Base);
LABEL_9:
    char v21 = a6(v17);
LABEL_10:
    char v22 = v21;
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v17, type metadata accessor for TableColumnCollection.Entry);
    if (v22 != 2) {
      goto LABEL_12;
    }
LABEL_11:
    type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a7, 1, 1, v23);
    return outlined retain of TableColumnCustomizationID.Base((uint64_t)v30, (void (*)(void, void, void, void, void))outlined consume of TableColumnCustomizationID.Base);
  }
  int v20 = *(unsigned __int8 *)(*(void *)(a5 + 56) + 16 * v18 + 9);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v30, (void (*)(void, void, void, void, void))outlined consume of TableColumnCustomizationID.Base);
  char v21 = a6(v17);
  if (!v20) {
    goto LABEL_10;
  }
  if (v20 != 1)
  {
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v17, type metadata accessor for TableColumnCollection.Entry);
    goto LABEL_11;
  }
LABEL_2:
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v17, type metadata accessor for TableColumnCollection.Entry);
LABEL_12:
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  uint64_t v26 = v25;
  uint64_t v27 = (uint64_t)a7 + *(int *)(v25 + 48);
  uint64_t v28 = (char *)a7 + *(int *)(v25 + 64);
  *a7 = a1;
  outlined init with copy of TableColumnCollection.Entry(a2, v27);
  long long v29 = v30[1];
  *(_OWORD *)uint64_t v28 = v30[0];
  *((_OWORD *)v28 + 1) = v29;
  v28[32] = v31;
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a7, 0, 1, v26);
}

{
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  long long v26;
  uint64_t v28;
  _OWORD v29[2];
  char v30;
  unsigned char v31[40];

  uint64_t v14 = type metadata accessor for TableCellFormula();
  double v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3(v29, a2, v15);
  outlined init with copy of TableCellFormula(a2, (uint64_t)v17);
  if (a4)
  {
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
LABEL_7:
    type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
    uint64_t v23 = v22;
    uint64_t v24 = (uint64_t)a7 + *(int *)(v22 + 48);
    uint64_t v25 = (char *)a7 + *(int *)(v22 + 64);
    *a7 = a1;
    outlined init with copy of TableCellFormula(a2, v24);
    uint64_t v26 = v29[1];
    *(_OWORD *)uint64_t v25 = v29[0];
    *((_OWORD *)v25 + 1) = v26;
    v25[32] = v30;
    return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a7, 0, 1, v23);
  }
  if (!*(void *)(a5 + 16)) {
    goto LABEL_9;
  }
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v29, (uint64_t)v31);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v31, (void (*)(void, void, void, void, void))outlined copy of TableColumnCustomizationID.Base);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v29);
  if ((v19 & 1) == 0)
  {
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v29, (void (*)(void, void, void, void, void))outlined consume of TableColumnCustomizationID.Base);
LABEL_9:
    char v21 = a6(v17);
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
LABEL_10:
    if (v21 != 2) {
      goto LABEL_7;
    }
    goto LABEL_11;
  }
  int v20 = *(unsigned __int8 *)(*(void *)(a5 + 56) + 16 * v18 + 9);
  outlined retain of TableColumnCustomizationID.Base((uint64_t)v29, (void (*)(void, void, void, void, void))outlined consume of TableColumnCustomizationID.Base);
  char v21 = a6(v17);
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
  if (!v20) {
    goto LABEL_10;
  }
  if (v20 == 1) {
    goto LABEL_7;
  }
LABEL_11:
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a7, 1, 1, v28);
  return outlined retain of TableColumnCustomizationID.Base((uint64_t)v29, (void (*)(void, void, void, void, void))outlined consume of TableColumnCustomizationID.Base);
}

uint64_t specialized closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v53 = a3;
  int v54 = type metadata accessor for TableColumnCollection.Entry;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (uint64_t *)((char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v45 - v10;
  uint64_t v12 = *(int *)(v6 + 56);
  uint64_t v13 = *(int *)(v6 + 72);
  uint64_t v14 = (char *)&v45 + v13 - v10;
  double v15 = (char *)a1 + v13;
  uint64_t v46 = a1;
  *(uint64_t *)((char *)&v45 - v10) = *a1;
  outlined init with copy of TableColumnCollection.Entry((uint64_t)a1 + v12, (uint64_t)&v45 + v12 - v10);
  uint64_t v16 = *(void *)v15;
  uint64_t v51 = *((void *)v15 + 1);
  uint64_t v17 = v51;
  uint64_t v52 = v16;
  uint64_t v18 = *((void *)v15 + 2);
  uint64_t v49 = *((void *)v15 + 3);
  uint64_t v19 = v49;
  uint64_t v50 = v18;
  unsigned __int8 v20 = v15[32];
  int v48 = v20;
  *(void *)uint64_t v14 = v16;
  *((void *)v14 + 1) = v17;
  *((void *)v14 + 2) = v18;
  *((void *)v14 + 3) = v19;
  v14[32] = v20;
  uint64_t v21 = *(int *)(v6 + 56);
  uint64_t v22 = *(int *)(v6 + 72);
  uint64_t v23 = (char *)v8 + v22;
  uint64_t v24 = (char *)a2 + v22;
  int v47 = a2;
  *uint64_t v8 = *a2;
  outlined init with copy of TableColumnCollection.Entry((uint64_t)a2 + v21, (uint64_t)v8 + v21);
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  uint64_t v27 = *((void *)v24 + 2);
  uint64_t v28 = *((void *)v24 + 3);
  LOBYTE(v24) = v24[32];
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  *((void *)v23 + 2) = v27;
  *((void *)v23 + 3) = v28;
  v23[32] = (char)v24;
  BOOL v56 = v11;
  uint64_t v57 = v8;
  outlined copy of TableColumnCustomizationID.Base(v52, v51, v50, v49, v48);
  uint64_t v29 = v25;
  uint64_t v30 = v53;
  outlined copy of TableColumnCustomizationID.Base(v26, v29, v27, v28, (char)v24);
  unint64_t v31 = specialized Collection.firstIndex(where:)((uint64_t (*)(void *))partial apply for specialized closure #1 in closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:), (uint64_t)v55, v30);
  LOBYTE(v28) = v32;
  uint64_t v33 = (uint64_t)v11;
  BOOL v34 = v54;
  outlined destroy of (offset: Int, element: TableCellFormula)(v33, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (uint64_t)v54, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  uint64_t result = outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  if (v28) {
    return *v46 < *v47;
  }
  if ((v31 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v31 >= *(void *)(v30 + 16))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  unint64_t v36 = v30 + 40 * v31;
  uint64_t v37 = *(void *)(v36 + 32);
  uint64_t v38 = *(void *)(v36 + 40);
  uint64_t v39 = *(void *)v15;
  uint64_t v40 = *((void *)v15 + 1);
  if (*(unsigned char *)(v36 + 64))
  {
    if (v15[32])
    {
      if ((uint64_t v41 = *(void *)(v36 + 48),
            uint64_t v42 = *(void *)(v36 + 56),
            uint64_t v43 = *((void *)v15 + 2),
            uint64_t v44 = *((void *)v15 + 3),
            v37 == v39)
        && v38 == v40
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v41 == v43 && v42 == v44) {
          return 1;
        }
LABEL_16:
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          return 1;
        }
      }
    }
  }
  else if ((v15[32] & 1) == 0)
  {
    if (v37 == v39 && v38 == v40) {
      return 1;
    }
    goto LABEL_16;
  }
  return 0;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t (*v34)();
  uint64_t result;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)();
  char v55[16];
  char *v56;
  void *v57;

  uint64_t v53 = a3;
  int v54 = type metadata accessor for TableCellFormula;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (uint64_t *)((char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v45 - v10;
  uint64_t v12 = *(int *)(v6 + 56);
  uint64_t v13 = *(int *)(v6 + 72);
  uint64_t v14 = (char *)&v45 + v13 - v10;
  double v15 = (char *)a1 + v13;
  uint64_t v46 = a1;
  *(uint64_t *)((char *)&v45 - v10) = *a1;
  outlined init with copy of TableCellFormula((uint64_t)a1 + v12, (uint64_t)&v45 + v12 - v10);
  uint64_t v16 = *(void *)v15;
  uint64_t v51 = *((void *)v15 + 1);
  uint64_t v17 = v51;
  uint64_t v52 = v16;
  uint64_t v18 = *((void *)v15 + 2);
  uint64_t v49 = *((void *)v15 + 3);
  uint64_t v19 = v49;
  uint64_t v50 = v18;
  unsigned __int8 v20 = v15[32];
  int v48 = v20;
  *(void *)uint64_t v14 = v16;
  *((void *)v14 + 1) = v17;
  *((void *)v14 + 2) = v18;
  *((void *)v14 + 3) = v19;
  v14[32] = v20;
  uint64_t v21 = *(int *)(v6 + 56);
  uint64_t v22 = *(int *)(v6 + 72);
  uint64_t v23 = (char *)v8 + v22;
  uint64_t v24 = (char *)a2 + v22;
  int v47 = a2;
  *uint64_t v8 = *a2;
  outlined init with copy of TableCellFormula((uint64_t)a2 + v21, (uint64_t)v8 + v21);
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  uint64_t v27 = *((void *)v24 + 2);
  uint64_t v28 = *((void *)v24 + 3);
  LOBYTE(v24) = v24[32];
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  *((void *)v23 + 2) = v27;
  *((void *)v23 + 3) = v28;
  v23[32] = (char)v24;
  BOOL v56 = v11;
  uint64_t v57 = v8;
  outlined copy of TableColumnCustomizationID.Base(v52, v51, v50, v49, v48);
  uint64_t v29 = v25;
  uint64_t v30 = v53;
  outlined copy of TableColumnCustomizationID.Base(v26, v29, v27, v28, (char)v24);
  unint64_t v31 = specialized Collection.firstIndex(where:)((uint64_t (*)(void *))partial apply for specialized closure #1 in closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:), (uint64_t)v55, v30);
  LOBYTE(v28) = v32;
  uint64_t v33 = (uint64_t)v11;
  BOOL v34 = v54;
  outlined destroy of (offset: Int, element: TableCellFormula)(v33, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (uint64_t)v54, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  uint64_t result = outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  if (v28) {
    return *v46 < *v47;
  }
  if ((v31 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v31 >= *(void *)(v30 + 16))
  {
LABEL_21:
    __break(1u);
    return result;
  }
  unint64_t v36 = v30 + 40 * v31;
  uint64_t v37 = *(void *)(v36 + 32);
  uint64_t v38 = *(void *)(v36 + 40);
  uint64_t v39 = *(void *)v15;
  uint64_t v40 = *((void *)v15 + 1);
  if (*(unsigned char *)(v36 + 64))
  {
    if (v15[32])
    {
      if ((uint64_t v41 = *(void *)(v36 + 48),
            uint64_t v42 = *(void *)(v36 + 56),
            uint64_t v43 = *((void *)v15 + 2),
            uint64_t v44 = *((void *)v15 + 3),
            v37 == v39)
        && v38 == v40
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        if (v41 == v43 && v42 == v44) {
          return 1;
        }
LABEL_16:
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          return 1;
        }
      }
    }
  }
  else if ((v15[32] & 1) == 0)
  {
    if (v37 == v39 && v38 == v40) {
      return 1;
    }
    goto LABEL_16;
  }
  return 0;
}

uint64_t specialized closure #1 in closure #2 in static AnyTableColumnCustomization.arrangedColumns<A, B>(_:customization:includeHidden:defaultVisibility:id:)(uint64_t a1, uint64_t a2, void *a3)
{
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v37[-v8 - 8];
  uint64_t v11 = (uint64_t *)(a2 + *(int *)(v10 + 64));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = v11[2];
  uint64_t v15 = v11[3];
  int v16 = *((unsigned __int8 *)v11 + 32);
  outlined init with take of TableColumnCustomizationID.Base(a1, (uint64_t)v37);
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v37, (uint64_t)&v43);
  if (v47)
  {
    if (!v16) {
      goto LABEL_20;
    }
    uint64_t v18 = v45;
    uint64_t v17 = v46;
    BOOL v19 = v43 == v12 && v13 == v44;
    if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_20;
    }
    if (v18 == v14 && v15 == v17) {
      goto LABEL_19;
    }
  }
  else
  {
    if (v16) {
      goto LABEL_20;
    }
    if (v43 == v12 && v13 == v44) {
      goto LABEL_19;
    }
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
LABEL_19:
    char v22 = 1;
    goto LABEL_21;
  }
LABEL_20:
  char v22 = 0;
LABEL_21:
  uint64_t v23 = *(int *)(v7 + 48);
  uint64_t v24 = *(int *)(v7 + 64);
  uint64_t v25 = (char *)v9 + v24;
  uint64_t v26 = (char *)a3 + v24;
  *uint64_t v9 = *a3;
  outlined init with copy of TableColumnCollection.Entry((uint64_t)a3 + v23, (uint64_t)v9 + v23);
  uint64_t v27 = *(void *)v26;
  uint64_t v28 = *((void *)v26 + 1);
  uint64_t v29 = *((void *)v26 + 2);
  uint64_t v30 = *((void *)v26 + 3);
  int v31 = v26[32];
  *(void *)uint64_t v25 = v27;
  *((void *)v25 + 1) = v28;
  *((void *)v25 + 2) = v29;
  *((void *)v25 + 3) = v30;
  v25[32] = v31;
  if ((v22 & 1) == 0)
  {
    outlined init with take of TableColumnCustomizationID.Base((uint64_t)v37, (uint64_t)&v38);
    if (v42)
    {
      if (!v31) {
        goto LABEL_36;
      }
      uint64_t v33 = v40;
      uint64_t v34 = v41;
      if ((v38 != v27 || v28 != v39) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_36;
      }
      if (v33 == v29 && v30 == v34) {
        goto LABEL_35;
      }
    }
    else
    {
      if (v31) {
        goto LABEL_36;
      }
      if (v38 == v27 && v28 == v39) {
        goto LABEL_35;
      }
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
LABEL_35:
      uint64_t v32 = 1;
      goto LABEL_37;
    }
LABEL_36:
    uint64_t v32 = 0;
    goto LABEL_37;
  }
  uint64_t v32 = 1;
LABEL_37:
  outlined copy of TableColumnCustomizationID.Base(v27, v28, v29, v30, v31);
  outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableColumnCollection.Entry, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  return v32;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned char v36[40];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v36[-v8 - 8];
  outlined init with take of TableColumnCustomizationID.Base(a1, (uint64_t)v36);
  uint64_t v10 = (uint64_t *)(a2 + *(int *)(v7 + 64));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[2];
  uint64_t v14 = v10[3];
  uint64_t v15 = *((unsigned __int8 *)v10 + 32);
  outlined init with take of TableColumnCustomizationID.Base((uint64_t)v36, (uint64_t)&v37);
  if (v41)
  {
    if (!v15) {
      goto LABEL_20;
    }
    uint64_t v17 = v39;
    int v16 = v40;
    uint64_t v18 = v37 == v11 && v12 == v38;
    if (!v18 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_20;
    }
    if (v17 == v13 && v14 == v16) {
      goto LABEL_19;
    }
  }
  else
  {
    if (v15) {
      goto LABEL_20;
    }
    if (v37 == v11 && v12 == v38) {
      goto LABEL_19;
    }
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)())
  {
LABEL_19:
    uint64_t v21 = 1;
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v21 = 0;
LABEL_21:
  char v22 = *(int *)(v7 + 48);
  uint64_t v23 = *(int *)(v7 + 64);
  uint64_t v24 = (char *)v9 + v23;
  uint64_t v25 = (char *)a3 + v23;
  *uint64_t v9 = *a3;
  outlined init with copy of TableCellFormula((uint64_t)a3 + v22, (uint64_t)v9 + v22);
  uint64_t v26 = *(void *)v25;
  uint64_t v27 = *((void *)v25 + 1);
  uint64_t v28 = *((void *)v25 + 2);
  uint64_t v29 = *((void *)v25 + 3);
  uint64_t v30 = v25[32];
  *(void *)uint64_t v24 = v26;
  *((void *)v24 + 1) = v27;
  *((void *)v24 + 2) = v28;
  *((void *)v24 + 3) = v29;
  v24[32] = v30;
  if ((v21 & 1) == 0)
  {
    outlined init with take of TableColumnCustomizationID.Base((uint64_t)v36, (uint64_t)&v42);
    if (v46)
    {
      if (!v30) {
        goto LABEL_36;
      }
      uint64_t v32 = v44;
      uint64_t v33 = v45;
      if ((v42 != v26 || v27 != v43) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_36;
      }
      if (v32 == v28 && v29 == v33) {
        goto LABEL_35;
      }
    }
    else
    {
      if (v30) {
        goto LABEL_36;
      }
      if (v42 == v26 && v27 == v43) {
        goto LABEL_35;
      }
    }
    if (_stringCompareWithSmolCheck(_:_:expecting:)())
    {
LABEL_35:
      int v31 = 1;
      goto LABEL_37;
    }
LABEL_36:
    int v31 = 0;
    goto LABEL_37;
  }
  int v31 = 1;
LABEL_37:
  outlined copy of TableColumnCustomizationID.Base(v26, v27, v28, v29, v30);
  outlined destroy of (offset: Int, element: TableCellFormula)((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (uint64_t)type metadata accessor for TableCellFormula, (uint64_t (*)(void))type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID));
  return v31;
}

uint64_t specialized RandomAccessCollection<>.index(after:)(uint64_t a1)
{
  outlined init with copy of TableColumnCollection.Backing(v1, (uint64_t)v10);
  if (v11)
  {
    uint64_t v3 = *(void *)(*(void *)&v10[0] + 16);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v10, (uint64_t)v7);
    uint64_t v5 = v8;
    uint64_t v6 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v5, v6);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  if ((a1 & 0x8000000000000000) == 0 && v3 > a1) {
    return a1 + 1;
  }
  __break(1u);
  return result;
}

void specialized UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:)(char *a1, char a2, char *a3)
{
  uint64_t v4 = v3;
  uint64_t v73 = a3;
  double v7 = COERCE_DOUBLE(type metadata accessor for IndexPath());
  uint64_t v8 = *(void *)(*(void *)&v7 - 8);
  MEMORY[0x1F4188790](*(void *)&v7);
  uint64_t v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *MEMORY[0x1E4FBC8C8] & *v4;
  unint64_t v74 = v4;
  uint64_t v72 = a1;
  if ((a2 & 1) == 0)
  {
    *(void *)((char *)v4 + *(void *)(v11 + 768)) = 0;
    goto LABEL_10;
  }
  uint64_t v12 = (uint64_t)v4 + *(void *)(v11 + 136);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v12, (uint64_t)v76, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v76, (uint64_t)v80, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
  specialized ShadowSectionCollection.init(_:)(v80, (uint64_t)v77);
  outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v76);
  uint64_t v13 = v78;
  outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v77);
  if (v13 < 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v13)
  {
    uint64_t v69 = v8;
    double v70 = v7;
    unint64_t v71 = v4;
    *(double *)&uint64_t v14 = COERCE_DOUBLE(a1);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v12, (uint64_t)v80, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v80, (uint64_t)v75, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
    specialized ShadowSectionCollection.init(_:)(v75, (uint64_t)v76);
    outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v76);
    double v7 = *(double *)&v14;
    uint64_t v15 = v71;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v80, (uint64_t)v76, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
    unint64_t v16 = specialized ShadowListUpdateRecorder.initialIndex(_:)(0);
    specialized ShadowRowCollection.init(_:section:)(v76, v16, (uint64_t)v77);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v80);
    uint64_t v17 = v79;
    outlined destroy of ShadowRowCollection<TableDataSourceAdaptor>((uint64_t)v77);
    uint64_t v18 = 0;
    if (v17 <= 0)
    {
      double v68 = v7;
      if (v13 == 1)
      {
LABEL_26:

        uint64_t v4 = v74;
        goto LABEL_10;
      }
      uint64_t v18 = 1;
      double v7 = COERCE_DOUBLE(&lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>);
      while (1)
      {
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v12, (uint64_t)v80, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v80, (uint64_t)v75, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
        specialized ShadowSectionCollection.init(_:)(v75, (uint64_t)v76);
        outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v76);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v80, (uint64_t)v76, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
        unint64_t v52 = specialized ShadowListUpdateRecorder.initialIndex(_:)(v18);
        specialized ShadowRowCollection.init(_:section:)(v76, v52, (uint64_t)v77);
        outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v80);
        uint64_t v53 = v79;
        outlined destroy of ShadowRowCollection<TableDataSourceAdaptor>((uint64_t)v77);
        if (v53 > 0) {
          break;
        }
        if (v13 == ++v18) {
          goto LABEL_26;
        }
      }
      uint64_t v15 = v71;
      double v7 = v68;
    }

    MEMORY[0x18C10A880](0, v18);
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, double))(v69 + 8))(v10, COERCE_DOUBLE(*(void *)&v70));
    id v20 = objc_msgSend(*(id *)&v7, sel_cellForItemAtIndexPath_, isa);

    uint64_t v4 = v74;
    if (v20)
    {
      type metadata accessor for AnyListCollectionViewCell();
      uint64_t v21 = (void *)swift_dynamicCastClass();
      if (v21)
      {
        char v22 = v21;
        id v23 = objc_msgSend(v21, sel_contentView);
        objc_msgSend(v23, sel_frame);
        CGFloat v25 = v24;
        CGFloat v27 = v26;
        CGFloat v29 = v28;
        CGFloat v31 = v30;

        v81.origin.x = v25;
        v81.origin.y = v27;
        v81.size.width = v29;
        v81.size.height = v31;
        double MinX = CGRectGetMinX(v81);
        id v33 = objc_msgSend(v22, sel_contentView);
        objc_msgSend(v33, sel_bounds);
        double v35 = v34;
        double v37 = v36;

        uint64_t v38 = static HorizontalAlignment.listRowSeparatorLeading.getter();
        uint64_t v39 = *(uint64_t (**)(uint64_t, double, double))((*MEMORY[0x1E4FBC8C8] & *v22) + 0x68);
        *(double *)&uint64_t v40 = COERCE_DOUBLE(v39(v38, v35, v37));
        if (v41)
        {
          uint64_t v54 = static HorizontalAlignment.leadingText.getter();
          *(double *)&uint64_t v55 = COERCE_DOUBLE(v39(v54, v35, v37));
          double v7 = *(double *)&v56;

          double v42 = *(double *)&v55;
          if (LOBYTE(v7)) {
            double v42 = 0.0;
          }
        }
        else
        {
          double v7 = *(double *)&v40;

          double v42 = v7;
        }
        a1 = v72;
        *(double *)((char *)v15 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v15) + 0x300)) = MinX + v42;
      }
      else
      {
      }
    }
  }
LABEL_10:
  id v43 = objc_msgSend(a1, sel_visibleSupplementaryViewsOfKind_, *MEMORY[0x1E4FB2770], *(void *)&v68);
  unint64_t v71 = (void *)type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionReusableView);
  unint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v44 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v45) {
      goto LABEL_33;
    }
  }
  else
  {
    uint64_t v45 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v45) {
      goto LABEL_33;
    }
  }
  a1 = *(char **)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x300);
  if (v45 < 1)
  {
    __break(1u);
    goto LABEL_47;
  }
  for (uint64_t i = 0; i != v45; ++i)
  {
    if ((v44 & 0xC000000000000001) != 0) {
      id v47 = (id)MEMORY[0x18C117680](i, v44);
    }
    else {
      id v47 = *(id *)(v44 + 8 * i + 32);
    }
    int v48 = v47;
    type metadata accessor for TableCollectionViewCell();
    uint64_t v49 = swift_dynamicCastClass();
    if (v49
      && (*(void *)(v49 + direct field offset for TableCollectionViewCell.headerLeadingMargin) = *(void *)&a1[(void)v4],
          (uint64_t v50 = *(void **)(v49 + direct field offset for ListCollectionViewCellBase.host)) != 0))
    {
      v77[0] = 2;
      type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
      lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
      id v51 = v50;
      uint64_t v4 = v74;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
    else
    {
    }
  }
LABEL_33:
  swift_bridgeObjectRelease();
  a1 = v73;
  if (v73)
  {
    uint64_t v57 = v73;
    goto LABEL_41;
  }
  int v58 = (void *)MEMORY[0x18C115780](0xD000000000000011, 0x80000001883361A0);
  id v59 = objc_msgSend(v72, sel_visibleSupplementaryViewsOfKind_, v58);

  double v7 = COERCE_DOUBLE(static Array._unconditionallyBridgeFromObjectiveC(_:)());
  if (*(void *)&v7 >> 62)
  {
LABEL_48:
    swift_bridgeObjectRetain();
    uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v67) {
      goto LABEL_37;
    }
LABEL_49:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)((*(void *)&v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_49;
  }
LABEL_37:
  if ((*(void *)&v7 & 0xC000000000000001) != 0)
  {
    uint64_t v60 = (char *)MEMORY[0x18C117680](0, *(void *)&v7);
  }
  else
  {
    if (!*(void *)((*(void *)&v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    uint64_t v60 = (char *)*(id *)(*(void *)&v7 + 32);
  }
  uint64_t v57 = v60;
  swift_bridgeObjectRelease();
LABEL_41:
  type metadata accessor for TableGlobalHeader();
  uint64_t v61 = swift_dynamicCastClass();
  if (v61)
  {
    int v62 = (void *)v61;
    double v63 = *(double *)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x300));
    double v64 = *(double *)(v61 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_headerLeadingMargin);
    *(double *)(v61 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_headerLeadingMargin) = v63;
    uint64_t v65 = a1;
    if (v64 != v63) {
      objc_msgSend(v62, sel_setNeedsUpdateConfiguration);
    }
  }
  else
  {
    uint64_t v66 = a1;
  }
}

uint64_t specialized UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = v4;
  LODWORD(v91) = a4;
  uint64_t v9 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v88 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v83[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v12);
  unint64_t v89 = &v83[-v13];
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  uint64_t v92 = v14;
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = &v83[-v15];
  uint64_t v17 = (uint64_t *)MEMORY[0x1E4FBC8C8];
  uint64_t v18 = (uint64_t)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0x100);
  swift_beginAccess();
  uint64_t v19 = *(void *)(v18 + 8);
  uint64_t v87 = v11;
  if (v19)
  {
    _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v18, (uint64_t)&v109, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
    MEMORY[0x18C113DA0](&v94);
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)&v109, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
    outlined init with copy of SelectionManagerBox<AnyHashable>((uint64_t)&v94, (uint64_t)v106);
    BOOL v20 = (v107 & 7) == 0;
    outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)v106);
    outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v94);
  }
  else
  {
    BOOL v20 = 0;
  }
  objc_msgSend(a1, sel_setAllowsMultipleSelection_, v20);
  if (*(void *)(v18 + 8))
  {
    _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v18, (uint64_t)&v109, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
    MEMORY[0x18C113DA0](&v94);
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)&v109, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
    outlined init with copy of SelectionManagerBox<AnyHashable>((uint64_t)&v94, (uint64_t)v106);
    BOOL v21 = (v107 & 7) == 0;
    outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)v106);
    outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v94);
  }
  else
  {
    BOOL v21 = 0;
  }
  objc_msgSend(a1, sel_setAllowsMultipleSelectionDuringEditing_, v21);
  char v22 = (void *)(*v17 & *v5);
  uint64_t v90 = v22[29];
  int v23 = *((unsigned __int8 *)v5 + v90);
  if (v23 != 1)
  {
    double v24 = (void *)((char *)v5 + v22[20]);
    swift_beginAccess();
    uint64_t v25 = *v24;
    *double v24 = a3;
    outlined consume of Transaction?(v25);
    char v22 = (void *)(*v17 & *v5);
    swift_retain();
  }
  uint64_t v26 = (uint64_t)v5 + v22[22];
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v26, (uint64_t)v16, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  char v27 = specialized ListCoreBatchUpdates.isEmpty.getter();
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v16);
  if ((v27 & 1) == 0)
  {
    uint64_t v38 = (uint64_t)v5 + *(void *)((*v17 & *v5) + 0x88);
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v38, (uint64_t)&v109, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    swift_beginAccess();
    uint64_t v39 = v26 + *(int *)(v92 + 60);
    specialized ListBatchUpdates.formUpdates<A>(from:to:)((uint64_t)&v109, a2);
    long long v40 = *(_OWORD *)(v39 + 16);
    long long v94 = *(_OWORD *)v39;
    long long v95 = v40;
    *(_OWORD *)&v123[8] = v94;
    *(_OWORD *)&v123[24] = v40;
    *(void *)&long long v96 = *(void *)(v39 + 32);
    v93[0] = v96;
    outlined retain of [Text.Modifier]((uint64_t)&v123[8]);
    outlined retain of [Text.Modifier]((uint64_t)&v123[16]);
    outlined retain of [Text.Modifier]((uint64_t)&v123[24]);
    outlined retain of [Text.Modifier]((uint64_t)&v123[32]);
    outlined retain of [Text.Modifier]((uint64_t)v93);
    specialized ListCoreBatchUpdates.formResult<A>(_:)((uint64_t *)&v94);
    swift_endAccess();
    outlined release of _LazyLayout_Placements((uint64_t)&v123[8]);
    outlined release of _LazyLayout_Placements((uint64_t)&v123[16]);
    outlined release of _LazyLayout_Placements((uint64_t)&v123[24]);
    outlined release of _LazyLayout_Placements((uint64_t)&v123[32]);
    outlined release of _LazyLayout_Placements((uint64_t)v93);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v109);
    outlined init with copy of TableDataSourceAdaptor(a2, (uint64_t)&v109);
    uint64_t v41 = (uint64_t)v5 + *(void *)((*v17 & *v5) + 0xC8);
    swift_beginAccess();
    outlined assign with take of TableHeaderView?((uint64_t)&v109, v41, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor);
    uint64_t result = swift_endAccess();
    if (v23 == 1) {
      return result;
    }
    uint64_t v42 = *v5;
    uint64_t v43 = *v17;
    goto LABEL_56;
  }
  double v28 = (char *)v5 + *(void *)((*v17 & *v5) + 0x110);
  uint64_t v29 = *((void *)v28 + 1);
  if (v29)
  {
    uint64_t v86 = v9;
    uint64_t v30 = a2;
    CGFloat v31 = a1;
    int v32 = v23;
    char v33 = v28[16];
    *(void *)&long long v109 = *(void *)v28;
    *((void *)&v109 + 1) = v29;
    LOBYTE(v110) = v33;
    type metadata accessor for MutableBox<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, MEMORY[0x1E4F41638]);
    uint64_t v35 = v34;
    uint64_t result = (uint64_t)MEMORY[0x18C113DA0](&v94);
    if (v94 == 1)
    {
      int v37 = 0;
      int v23 = v32;
      a1 = v31;
      a2 = v30;
      uint64_t v9 = v86;
      goto LABEL_21;
    }
    uint64_t v45 = *((void *)v28 + 1);
    if (v45)
    {
      char v46 = v28[16];
      *(void *)&long long v109 = *(void *)v28;
      *((void *)&v109 + 1) = v45;
      LOBYTE(v110) = v46;
      MEMORY[0x18C113DA0](&v94, v35);
      BOOL v44 = (_BYTE)v94 != 0;
    }
    else
    {
      BOOL v44 = 0;
    }
    int v23 = v32;
    a1 = v31;
    a2 = v30;
    uint64_t v9 = v86;
  }
  else
  {
    BOOL v44 = 0;
  }
  uint64_t result = (uint64_t)objc_msgSend(a1, sel_isEditing);
  int v37 = v44 ^ result;
LABEL_21:
  uint64_t v47 = *MEMORY[0x1E4FBC8C8] & *v5;
  uint64_t v48 = *(void *)(v47 + 0xB8);
  if (*((unsigned char *)v5 + v48) != 1)
  {
    uint64_t v85 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0xB8);
    int v84 = v37;
    LODWORD(v86) = v23;
    if (v91)
    {
      uint64_t v52 = (uint64_t)v5 + *(void *)(v47 + 136);
      swift_beginAccess();
      outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v52, (uint64_t)&v109, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
      swift_beginAccess();
      uint64_t v53 = v26 + *(int *)(v92 + 60);
      specialized ListBatchUpdates.formUpdates<A>(from:to:)((uint64_t)&v109, a2);
      long long v54 = *(_OWORD *)(v53 + 16);
      v121[0] = *(_OWORD *)v53;
      v121[1] = v54;
      *(_OWORD *)uint64_t v123 = v121[0];
      *(_OWORD *)&v123[16] = v54;
      uint64_t v122 = *(void *)(v53 + 32);
      *(void *)&v123[32] = v122;
      outlined retain of [Text.Modifier]((uint64_t)v123);
      outlined retain of [Text.Modifier]((uint64_t)&v123[8]);
      outlined retain of [Text.Modifier]((uint64_t)&v123[16]);
      outlined retain of [Text.Modifier]((uint64_t)&v123[24]);
      outlined retain of [Text.Modifier]((uint64_t)&v123[32]);
      specialized ListCoreBatchUpdates.formResult<A>(_:)((uint64_t *)v121);
      swift_endAccess();
      outlined release of _LazyLayout_Placements((uint64_t)v123);
      outlined release of _LazyLayout_Placements((uint64_t)&v123[8]);
      outlined release of _LazyLayout_Placements((uint64_t)&v123[16]);
      outlined release of _LazyLayout_Placements((uint64_t)&v123[24]);
      outlined release of _LazyLayout_Placements((uint64_t)&v123[32]);
      outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v109);
      if (*((unsigned char *)v5 + v90) == 1)
      {
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v26, (uint64_t)v16, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
        char v55 = specialized ListCoreBatchUpdates.isEmpty.getter();
        outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v16);
        outlined init with copy of TableDataSourceAdaptor(a2, (uint64_t)&v94);
        if (v55)
        {
          outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v52, (uint64_t)&v109, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
          outlined init with copy of TableDataSourceAdaptor((uint64_t)&v109, (uint64_t)v106);
          BOOL v56 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v88 + 104);
          uint64_t v91 = v56;
          unsigned int v57 = *MEMORY[0x1E4FB10D0];
          unsigned int v58 = *MEMORY[0x1E4FB10C8];
          LODWORD(v92) = *MEMORY[0x1E4FB10C8];
          if (v108) {
            uint64_t v59 = v57;
          }
          else {
            uint64_t v59 = v58;
          }
          unsigned int v60 = v57;
          v56(v89, v59, v9);
          outlined destroy of TableDataSourceAdaptor((uint64_t)v106);
          outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v109);
          if (BYTE8(v104)) {
            uint64_t v61 = v60;
          }
          else {
            uint64_t v61 = v92;
          }
          v91(v87, v61, v9);
          lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type UICollectionLayoutListConfiguration.Appearance and conformance UICollectionLayoutListConfiguration.Appearance, MEMORY[0x1E4FB10E8]);
          uint64_t v62 = v9;
          LODWORD(v92) = dispatch thunk of static Equatable.== infix(_:_:)();
          double v63 = *(void (**)(unsigned char *, uint64_t))(v88 + 8);
          v63(v87, v62);
          v63(v89, v62);
          uint64_t result = outlined destroy of TableDataSourceAdaptor((uint64_t)&v94);
          if (v92)
          {
            if (v86 == 1) {
              return result;
            }
LABEL_54:
            uint64_t v42 = *v5;
            id v51 = (uint64_t *)MEMORY[0x1E4FBC8C8];
            goto LABEL_55;
          }
        }
        else
        {
          outlined destroy of TableDataSourceAdaptor((uint64_t)&v94);
        }
        *((unsigned char *)v5 + v90) = 2;
      }
    }
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v26, (uint64_t)v16, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    char v64 = specialized ListCoreBatchUpdates.isEmpty.getter();
    outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v16);
    if (v64)
    {
      outlined init with copy of TableDataSourceAdaptor(a2, (uint64_t)v106);
      outlined init with copy of TableDataSourceAdaptor((uint64_t)v106, (uint64_t)&v94);
      uint64_t v65 = MEMORY[0x1E4FBC860];
      *(void *)&long long v105 = MEMORY[0x1E4FBC860];
      *((void *)&v105 + 1) = MEMORY[0x1E4FBC860];
      outlined destroy of TableDataSourceAdaptor((uint64_t)v106);
      long long v117 = v102;
      long long v118 = v103;
      long long v119 = v104;
      long long v120 = v105;
      long long v113 = v98;
      long long v114 = v99;
      long long v115 = v100;
      long long v116 = v101;
      long long v109 = v94;
      long long v110 = v95;
      uint64_t v66 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v67 = *MEMORY[0x1E4FBC8C8] & *v5;
      long long v111 = v96;
      long long v112 = v97;
      uint64_t v68 = (uint64_t)v5 + *(void *)(v67 + 136);
      swift_beginAccess();
      outlined assign with copy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v109, v68);
      swift_endAccess();
      outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v109);
      uint64_t v69 = specialized UICollectionViewListCoordinatorBase.dragAndDropController.getter();
      outlined init with copy of TableDataSourceAdaptor(a2, (uint64_t)v106);
      outlined init with copy of TableDataSourceAdaptor((uint64_t)v106, (uint64_t)&v94);
      *(void *)&long long v105 = v65;
      *((void *)&v105 + 1) = v65;
      outlined destroy of TableDataSourceAdaptor((uint64_t)v106);
      long long v117 = v102;
      long long v118 = v103;
      long long v119 = v104;
      long long v120 = v105;
      long long v113 = v98;
      long long v114 = v99;
      long long v115 = v100;
      long long v116 = v101;
      long long v109 = v94;
      long long v110 = v95;
      long long v111 = v96;
      long long v112 = v97;
      uint64_t v70 = (uint64_t)v69 + *(void *)((*v66 & *v69) + 0x60);
      swift_beginAccess();
      outlined assign with take of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v109, v70);
      swift_endAccess();
    }
    else
    {
      outlined init with copy of TableDataSourceAdaptor(a2, (uint64_t)&v109);
      uint64_t v71 = (uint64_t)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0xC8);
      swift_beginAccess();
      outlined assign with take of TableHeaderView?((uint64_t)&v109, v71, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor);
      swift_endAccess();
    }
    int v72 = v86;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v26, (uint64_t)v16, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    char v73 = specialized ListCoreBatchUpdates.isEmpty.getter();
    uint64_t result = outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v16);
    if ((v73 & 1) != 0 && *((unsigned char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0xD0)) == 1
      || (*((unsigned char *)v5 + v85) & 1) != 0)
    {
LABEL_53:
      if (v72 == 1) {
        return result;
      }
      goto LABEL_54;
    }
    unint64_t v74 = (void *)MEMORY[0x1E4FBC8C8];
    *((unsigned char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0xD0)) = 1;
    unint64_t v75 = (void *)((char *)v5 + *(void *)((*v74 & *v5) + 0xA0));
    swift_beginAccess();
    if (*v75 == 1)
    {
      swift_endAccess();
    }
    else
    {
      uint64_t v76 = Transaction.animation.getter();
      swift_endAccess();
      if (v76)
      {
        swift_release();
        char v77 = 1;
LABEL_52:
        uint64_t v78 = swift_allocObject();
        *(unsigned char *)(v78 + 16) = v77;
        *(void *)(v78 + 24) = v5;
        *(void *)(v78 + 32) = a1;
        *(unsigned char *)(v78 + 40) = v84;
        uint64_t v79 = v5;
        id v80 = a1;
        static Update.enqueueAction(_:)();
        uint64_t result = swift_release();
        goto LABEL_53;
      }
    }
    char v77 = 0;
    goto LABEL_52;
  }
  *((unsigned char *)v5 + v48) = 0;
  uint64_t v49 = *((void *)v28 + 1);
  if (v49)
  {
    char v50 = v28[16];
    *(void *)&long long v109 = *(void *)v28;
    *((void *)&v109 + 1) = v49;
    LOBYTE(v110) = v50;
    type metadata accessor for MutableBox<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, MEMORY[0x1E4F41638]);
    uint64_t result = (uint64_t)MEMORY[0x18C113DA0](&v94);
    if ((_BYTE)v94) {
      uint64_t result = (uint64_t)objc_msgSend(a1, sel_setEditing_, 1);
    }
  }
  id v51 = (uint64_t *)MEMORY[0x1E4FBC8C8];
  if (v23 != 1)
  {
    uint64_t v42 = *v5;
LABEL_55:
    uint64_t v43 = *v51;
LABEL_56:
    CGRect v81 = (void *)((char *)v5 + *(void *)((v43 & v42) + 0xA0));
    swift_beginAccess();
    uint64_t v82 = *v81;
    *CGRect v81 = 1;
    return outlined consume of Transaction?(v82);
  }
  return result;
}

void specialized closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(uint64_t a1, char *a2, char a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x18C119DF0](v5);
  if (v6)
  {
    double v7 = (void *)v6;
    specialized UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:)(a2, a3 & 1, 0);
  }
}

id specialized UICollectionViewListCoordinatorBase.dragAndDropController.getter()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150);
  uint64_t v3 = *(void **)((char *)v0 + v2);
  if (v3)
  {
    id v4 = *(id *)((char *)v0 + v2);
  }
  else
  {
    uint64_t v5 = (uint64_t)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88);
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v5, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    uint64_t v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for CollectionViewListDragAndDropController<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CollectionViewListDragAndDropController);
    uint64_t v8 = objc_allocWithZone(v7);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v19, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    uint64_t v9 = (_OWORD *)((char *)v8 + *(void *)((*v1 & *v8) + 0x70));
    *uint64_t v9 = xmmword_18834BB90;
    v9[1] = 0u;
    _OWORD v9[2] = 0u;
    void v9[3] = 0u;
    *(_OWORD *)((char *)v9 + 57) = 0u;
    uint64_t v10 = MEMORY[0x1E4FBC860];
    *(void *)((char *)v8 + *(void *)((*v1 & *v8) + 0x78)) = MEMORY[0x1E4FBC860];
    *(void *)((char *)v8 + *(void *)((*v1 & *v8) + 0x80)) = v10;
    swift_unknownObjectWeakInit();
    *(void *)((char *)v8 + *(void *)((*v1 & *v8) + 0x90)) = 0;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v18, (uint64_t)v8 + *(void *)((*v1 & *v8) + 0x60), (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    uint64_t v11 = (void (**)(void (*)(void), uint64_t))((char *)v8 + *(void *)((*v1 & *v8) + 0x68));
    unsigned char *v11 = partial apply for closure #1 in PlatformViewCoordinator.weakDispatchUpdate.getter;
    v11[1] = (void (*)(void (*)(void), uint64_t))v6;
    _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListDragAndDropControllerBase<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListDragAndDropControllerBase);
    v17.receiver = v8;
    v17.super_class = v12;
    id v13 = objc_msgSendSuper2(&v17, sel_init);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v18);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v19);
    uint64_t v14 = *(void **)((char *)v0 + v2);
    *(void *)((char *)v0 + v2) = v13;
    id v4 = v13;

    uint64_t v3 = 0;
  }
  id v15 = v3;
  return v4;
}

double specialized UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = (uint64_t)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x100);
  swift_beginAccess();
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v4, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
  uint64_t v5 = v13[1];
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
  if (v5)
  {
    uint64_t v6 = (uint64_t)v1 + *(void *)((*v3 & *v1) + 0x88);
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v6, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    uint64_t v7 = IndexPath.section.getter();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v15, (uint64_t)v14, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
    specialized ShadowSectionCollection.init(_:)(v14, (uint64_t)v13);
    uint64_t v8 = (void *)(v7 & ~(v7 >> 63));
    outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v13);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v15, (uint64_t)v14, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
    unint64_t v9 = specialized ShadowListUpdateRecorder.initialIndex(_:)((uint64_t)v8);
    specialized ShadowRowCollection.init(_:section:)(v14, v9, (uint64_t)v13);
    uint64_t v10 = IndexPath.row.getter();
    uint64_t v11 = specialized Collection.index(atOffset:)(v10);
    outlined destroy of ShadowRowCollection<TableDataSourceAdaptor>((uint64_t)v13);
    specialized ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)(v8, v11, 1, a1);
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v15);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void specialized UICollectionViewListCoordinatorBase.mirrorSelection(collectionView:indexPath:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v69 = a1;
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v71 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v64 = &v58[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for (IndexPath?, IndexPath?)();
  uint64_t v70 = v7;
  MEMORY[0x1F4188790](v7);
  unint64_t v9 = &v58[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v58[-v11];
  type metadata accessor for IndexPath?(0);
  MEMORY[0x1F4188790](v13 - 8);
  id v15 = &v58[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v16);
  uint64_t v66 = &v58[-v17];
  MEMORY[0x1F4188790](v18);
  uint64_t v67 = &v58[-v19];
  MEMORY[0x1F4188790](v20);
  char v22 = &v58[-v21];
  specialized UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)((uint64_t)&v73);
  int v23 = (void *)MEMORY[0x1E4FBC8C8];
  if (*((void *)&v74 + 1))
  {
    v76[0] = v73;
    v76[1] = v74;
    uint64_t v77 = v75;
    uint64_t v24 = (uint64_t)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x100);
    swift_beginAccess();
    if (*(void *)(v24 + 8))
    {
      _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v24, (uint64_t)&v73, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
      type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
      MEMORY[0x18C113DA0](v72);
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)&v73, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
      char v25 = specialized SelectionManagerBox.isSelected(_:)((uint64_t)v76);
      outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)v72);
      if (v25)
      {
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        id v27 = objc_msgSend(v69, sel_cellForItemAtIndexPath_, isa);

        if (v27)
        {
          unsigned int v28 = objc_msgSend(v27, sel_isSelected);

          if (v28) {
            goto LABEL_32;
          }
        }
        v29.super.Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        uint64_t v30 = (void *)((char *)v3 + *(void *)((*v23 & *v3) + 0xA0));
        swift_beginAccess();
        if (*v30 == 1)
        {
          swift_endAccess();
        }
        else
        {
          uint64_t v54 = Transaction.animation.getter();
          swift_endAccess();
          if (v54)
          {
            swift_release();
            uint64_t v55 = 1;
LABEL_31:
            objc_msgSend(v69, sel_selectItemAtIndexPath_animated_scrollPosition_, v29.super.isa, v55, 0);

LABEL_32:
            outlined destroy of AnyHashable((uint64_t)v76);
            return;
          }
        }
        uint64_t v55 = 0;
        goto LABEL_31;
      }
    }
    unsigned int v60 = v15;
    uint64_t v61 = v9;
    outlined destroy of AnyHashable((uint64_t)v76);
  }
  else
  {
    unsigned int v60 = v15;
    uint64_t v61 = v9;
    outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)&v73, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
  }
  uint64_t v31 = v71;
  int v32 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v71 + 16);
  uint64_t v68 = a2;
  uint64_t v62 = v32;
  v32(v22, a2, v5);
  double v63 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v31 + 56);
  v63(v22, 0, 1, v5);
  uint64_t v33 = *(void *)((*v23 & *v3) + 0xD8);
  uint64_t v65 = v3;
  uint64_t v34 = (uint64_t)v3 + v33;
  swift_beginAccess();
  uint64_t v35 = (uint64_t)&v12[*(int *)(v70 + 48)];
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v22, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v34, v35, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  double v36 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (v36((uint64_t)v12, 1, v5) == 1)
  {
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for IndexPath?);
    if (v36(v35, 1, v5) == 1)
    {
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for IndexPath?);
      return;
    }
    goto LABEL_15;
  }
  int v37 = v67;
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v12, (uint64_t)v67, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  if (v36(v35, 1, v5) == 1)
  {
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for IndexPath?);
    (*(void (**)(unsigned char *, uint64_t))(v71 + 8))(v37, v5);
LABEL_15:
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for (IndexPath?, IndexPath?));
    goto LABEL_17;
  }
  uint64_t v38 = v64;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v71 + 32))(v64, v35, v5);
  lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
  int v59 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v39 = *(void (**)(unsigned char *, uint64_t))(v71 + 8);
  v39(v38, v5);
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  v39(v67, v5);
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  if (v59) {
    return;
  }
LABEL_17:
  uint64_t v40 = (uint64_t)v66;
  v62(v66, v68, v5);
  v63((unsigned char *)v40, 0, 1, v5);
  uint64_t v41 = (uint64_t)v65 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v65) + 0xE0);
  swift_beginAccess();
  uint64_t v42 = (uint64_t)v61;
  uint64_t v43 = (uint64_t)&v61[*(int *)(v70 + 48)];
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v40, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v41, v43, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  if (v36(v42, 1, v5) == 1)
  {
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2(v40, (uint64_t (*)(void))type metadata accessor for IndexPath?);
    if (v36(v43, 1, v5) == 1)
    {
      _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2(v42, (uint64_t (*)(void))type metadata accessor for IndexPath?);
      return;
    }
    goto LABEL_22;
  }
  uint64_t v44 = (uint64_t)v60;
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v42, (uint64_t)v60, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  if (v36(v43, 1, v5) == 1)
  {
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2(v40, (uint64_t (*)(void))type metadata accessor for IndexPath?);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v44, v5);
LABEL_22:
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2(v42, (uint64_t (*)(void))type metadata accessor for (IndexPath?, IndexPath?));
    goto LABEL_24;
  }
  uint64_t v45 = v71;
  char v46 = v64;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v71 + 32))(v64, v43, v5);
  lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
  char v47 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v48 = *(void (**)(unsigned char *, uint64_t))(v45 + 8);
  v48(v46, v5);
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2(v40, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  v48((unsigned char *)v44, v5);
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2(v42, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  if (v47) {
    return;
  }
LABEL_24:
  Class v49 = IndexPath._bridgeToObjectiveC()().super.isa;
  id v50 = objc_msgSend(v69, sel_cellForItemAtIndexPath_, v49);

  if (v50)
  {
    unsigned int v51 = objc_msgSend(v50, sel_isSelected);

    if (v51)
    {
      v52.super.Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      uint64_t v53 = (void *)((char *)v65 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v65) + 0xA0));
      swift_beginAccess();
      if (*v53 == 1)
      {
        swift_endAccess();
      }
      else
      {
        uint64_t v56 = Transaction.animation.getter();
        swift_endAccess();
        if (v56)
        {
          swift_release();
          uint64_t v57 = 1;
LABEL_36:
          objc_msgSend(v69, sel_deselectItemAtIndexPath_animated_, v52.super.isa, v57);

          return;
        }
      }
      uint64_t v57 = 0;
      goto LABEL_36;
    }
  }
}

void specialized UICollectionViewListCoordinatorBase.updateListContents(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v122 = type metadata accessor for IndexPath();
  uint64_t v108 = *(void *)(v122 - 8);
  MEMORY[0x1F4188790](v122);
  uint64_t v5 = (char *)v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v107 - v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v126 = (char *)v107 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v107 - v12;
  type metadata accessor for IndexPath?(0);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  long long v118 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)v107 - v18);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)v107 - v20);
  char v22 = (void *)MEMORY[0x1E4FBC8C8];
  swift_beginAccess();
  specialized ListCoreBatchUpdates.resetAll()();
  swift_endAccess();
  memset(v147, 0, 171);
  uint64_t v23 = (uint64_t)v1 + *(void *)((*v22 & *v1) + 0xC8);
  swift_beginAccess();
  outlined assign with take of TableHeaderView?((uint64_t)v147, v23, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor);
  swift_endAccess();
  uint64_t v24 = *(void *)((*v22 & *v2) + 0xD0);
  long long v111 = v2;
  *((unsigned char *)v2 + v24) = 0;
  uint64_t v127 = a1;
  id v25 = objc_msgSend(a1, sel_preparedCells);
  if (!v25) {
    goto LABEL_75;
  }
  uint64_t v26 = v25;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewCell);
  unint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  long long v115 = v13;
  long long v120 = v21;
  if (v27 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v29 = v122;
    if (v28) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v29 = v122;
    if (v28)
    {
LABEL_4:
      uint64_t v30 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v111) + 0x88);
      if (v28 >= 1)
      {
        unint64_t v124 = v27 & 0xC000000000000001;
        long long v110 = (char *)v111 + v30;
        swift_beginAccess();
        uint64_t v31 = 0;
        unint64_t v121 = (void (**)(char *, char *, uint64_t))(v108 + 32);
        uint64_t v123 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56);
        long long v119 = (unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48);
        long long v114 = (void (**)(char *, uint64_t))(v108 + 8);
        long long v112 = v5;
        uint64_t v125 = (void (*)(unsigned int (**)(char *, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))v28;
        long long v109 = (uint64_t *)v16;
        while (1)
        {
          id v32 = v124 ? (id)MEMORY[0x18C117680](v31, v27) : *(id *)(v27 + 8 * v31 + 32);
          uint64_t v33 = v32;
          unint64_t v34 = v27;
          id v35 = objc_msgSend(v127, sel_indexPathForCell_, v32);
          if (!v35) {
            break;
          }
          double v36 = v35;
          static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

          int v37 = *v121;
          (*v121)(v16, v5, v29);
          (*v123)(v16, 0, 1, v29);
          if ((*v119)(v16, 1, v29) == 1) {
            goto LABEL_7;
          }
          v37(v8, v16, v29);
          type metadata accessor for TableCollectionViewCell();
          uint64_t v38 = (unsigned char *)swift_dynamicCastClass();
          if (v38)
          {
            uint64_t v113 = (uint64_t)v38;
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v110, (uint64_t)v148, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
            long long v116 = (void (**)(char *, char *, uint64_t))v107;
            long long v117 = v33;
            uint64_t v39 = IndexPath.section.getter();
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v148, (uint64_t)v138, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
            specialized ShadowSectionCollection.init(_:)(v138, (uint64_t)v147);
            uint64_t v40 = (void *)(v39 & ~(v39 >> 63));
            outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v147);
            outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v148, (uint64_t)v138, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
            unint64_t v41 = specialized ShadowListUpdateRecorder.initialIndex(_:)((uint64_t)v40);
            specialized ShadowRowCollection.init(_:section:)(v138, v41, (uint64_t)v147);
            uint64_t v42 = IndexPath.row.getter();
            uint64_t v43 = specialized Collection.index(atOffset:)(v42);
            outlined destroy of ShadowRowCollection<TableDataSourceAdaptor>((uint64_t)v147);
            specialized ShadowListDataSource.contextForItem(index:)(v40, v43, (uint64_t)v147);
            _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v147, (uint64_t)v138, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?);
            if ((void)v144)
            {
              long long v136 = v145;
              v137[0] = v146[0];
              *(_OWORD *)((char *)v137 + 11) = *(_OWORD *)((char *)v146 + 11);
              long long v132 = v141;
              long long v133 = v142;
              long long v134 = v143;
              long long v135 = v144;
              v129[1] = v139;
              v129[2] = v140[0];
              long long v130 = v140[1];
              long long v131 = v140[2];
              long long v128 = v138[0];
              v129[0] = v138[1];
              specialized closure #1 in UICollectionViewListCoordinatorBase.updateListContents(_:)((uint64_t *)&v128, v111, (unsigned char *)v113);
              _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)&v128, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>);
            }
            _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v147, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<ShadowListDataSource<TableDataSourceAdaptor>>?);
            outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v148);
            specialized UICollectionViewListCoordinatorBase.mirrorSelection(collectionView:indexPath:)(v127, (uint64_t)v8);
            id v44 = v117;

            (*v114)(v8, v29);
            uint64_t v5 = v112;
            unint64_t v27 = v34;
            uint64_t v16 = (char *)v109;
            goto LABEL_9;
          }

          (*v114)(v8, v29);
LABEL_8:
          unint64_t v27 = v34;
LABEL_9:
          if (v125 == (void (*)(unsigned int (**)(char *, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))++v31) {
            goto LABEL_21;
          }
        }
        (*v123)(v16, 1, 1, v29);
LABEL_7:

        _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for IndexPath?);
        goto LABEL_8;
      }
      __break(1u);
LABEL_73:
      id v92 = (id)MEMORY[0x18C117680](0, v27);
      goto LABEL_62;
    }
  }
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v45 = &selRef_setObscuresBackgroundDuringPresentation_;
  long long v110 = (char *)*MEMORY[0x1E4FB2770];
  id v46 = objc_msgSend(v127, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
  uint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v48 = *(void *)(v47 + 16);
  v107[1] = v47;
  if (!v48)
  {
    uint64_t v75 = *(void (**)(unsigned int (**)(char *, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v108 + 56);
    v75(v120, 1, 1, v29);
LABEL_46:
    uint64_t v76 = v115;
LABEL_47:
    swift_bridgeObjectRelease();
    id v77 = objc_msgSend(v127, v45[292], *MEMORY[0x1E4FB2760]);
    uint64_t v78 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v113 = v78;
    uint64_t v79 = *(char **)(v78 + 16);
    id v80 = v118;
    if (v79)
    {
      uint64_t v81 = v108;
      unint64_t v82 = v113 + ((*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80));
      long long v119 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)v111
                                                                    + *(void *)((*MEMORY[0x1E4FBC8C8] & *v111) + 0x88));
      swift_beginAccess();
      uint64_t v83 = v81;
      id v80 = v118;
      uint64_t v123 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v83 + 16);
      unint64_t v124 = v83 + 16;
      long long v120 = (unsigned int (**)(char *, uint64_t, uint64_t))(v83 + 48);
      unint64_t v121 = (void (**)(char *, char *, uint64_t))(v83 + 56);
      int v84 = *(char **)(v83 + 72);
      long long v116 = (void (**)(char *, char *, uint64_t))(v83 + 32);
      long long v117 = v84;
      long long v114 = (void (**)(char *, uint64_t))(v83 + 8);
      uint64_t v125 = v75;
      ((void (*)(unsigned int (**)(char *, uint64_t, uint64_t), unint64_t, uint64_t))v123)(v118, v82, v29);
      while (1)
      {
        v75(v80, 0, 1, v29);
        if ((*v120)((char *)v80, 1, v29) == 1) {
          break;
        }
        (*v116)(v76, (char *)v80, v29);
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v119, (uint64_t)v138, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
        uint64_t v86 = IndexPath.section.getter();
        outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v138, (uint64_t)&v128, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
        specialized ShadowSectionCollection.init(_:)(&v128, (uint64_t)v147);
        uint64_t v87 = outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v147);
        uint64_t v88 = *((void *)&v146[0] + 1);
        uint64_t v89 = *(void *)&v146[0];
        if (*(void *)(*((void *)&v146[0] + 1) + 16) || *(void *)(*(void *)&v146[0] + 16))
        {
          uint64_t v126 = v79;
          MEMORY[0x1F4188790](v87);
          v107[-2] = &type metadata for TableDataSourceAdaptor;
          v107[-1] = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
          uint64_t v29 = v122;
          swift_getKeyPath();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v88, v89);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v76 = v115;
          swift_release_n();
          specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, v86 & ~(v86 >> 63));
          uint64_t v79 = v126;
          swift_bridgeObjectRelease();
        }
        outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v138);
        (*v114)(v76, v29);
        id v80 = v118;
        v82 += (unint64_t)v117;
        --v79;
        uint64_t v75 = v125;
        if (!v79) {
          goto LABEL_56;
        }
        ((void (*)(unsigned int (**)(char *, uint64_t, uint64_t), unint64_t, uint64_t))v123)(v118, v82, v29);
      }
    }
    else
    {
LABEL_56:
      v75(v80, 1, 1, v29);
    }
    swift_bridgeObjectRelease();
    uint64_t v90 = (void *)MEMORY[0x18C115780](0xD000000000000011, 0x80000001883361A0);
    id v91 = objc_msgSend(v127, sel_visibleSupplementaryViewsOfKind_, v90);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionReusableView);
    unint64_t v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v27 >> 62) {
      goto LABEL_70;
    }
    if (*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_59;
    }
LABEL_71:
    swift_bridgeObjectRelease();
    return;
  }
  Class v49 = v111;
  id v50 = (void *)((char *)v49 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v49) + 0xA0));
  unsigned int v51 = (void *)v108;
  unint64_t v52 = v47 + ((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80));
  uint64_t v123 = (void (**)(char *, uint64_t, uint64_t, uint64_t))((char *)v49
                                                                 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v49) + 0x88));
  swift_beginAccess();
  long long v109 = v50;
  swift_beginAccess();
  unint64_t v27 = 0;
  uint64_t v53 = (unsigned int (**)(char *, uint64_t, uint64_t))v51[2];
  v51 += 2;
  long long v119 = v53;
  uint64_t v54 = (unsigned char *)v51[7];
  long long v116 = (void (**)(char *, char *, uint64_t))(v51 + 4);
  long long v117 = (char *)(v51 + 5);
  uint64_t v113 = (uint64_t)v54;
  long long v114 = (void (**)(char *, uint64_t))(v51 + 2);
  unint64_t v121 = (void (**)(char *, char *, uint64_t))v51;
  long long v112 = (char *)(v51 - 1);
  v107[0] = (unint64_t)(v51 + 5) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  uint64_t v55 = v120;
  ((void (*)(unsigned int (**)(char *, uint64_t, uint64_t), unint64_t, uint64_t))v53)(v120, v52, v29);
  while (1)
  {
    uint64_t v125 = *(void (**)(unsigned int (**)(char *, uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))v117;
    v125(v55, 0, 1, v29);
    if (((unsigned int (*)(void, uint64_t, uint64_t))*v116)(v55, 1, v29) == 1)
    {
      uint64_t v76 = v115;
      uint64_t v75 = v125;
      uint64_t v45 = &selRef_setObscuresBackgroundDuringPresentation_;
      goto LABEL_47;
    }
    unint64_t v124 = v48;
    ((void (*)(char *, unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))*v114)(v126, v55, v29);
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v123, (uint64_t)v138, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    uint64_t v56 = IndexPath.section.getter();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v138, (uint64_t)&v128, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
    specialized ShadowSectionCollection.init(_:)(&v128, (uint64_t)v147);
    unint64_t v57 = v56 & ~(v56 >> 63);
    uint64_t v58 = outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v147);
    uint64_t v59 = *((void *)&v146[0] + 1);
    uint64_t v60 = *(void *)&v146[0];
    if (*(void *)(*((void *)&v146[0] + 1) + 16) || *(void *)(*(void *)&v146[0] + 16))
    {
      MEMORY[0x1F4188790](v58);
      v107[-2] = &type metadata for TableDataSourceAdaptor;
      v107[-1] = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
      swift_getKeyPath();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v61 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v59, v60);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();
      unint64_t v57 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v61, v57);
      swift_bridgeObjectRelease();
    }
    uint64_t v55 = v120;
    if ((v57 & 0x8000000000000000) != 0) {
      break;
    }
    if (v57 >= *(void *)(*((void *)&v139 + 1) + 16)) {
      goto LABEL_69;
    }
    int v62 = *(unsigned __int8 *)(*((void *)&v139 + 1) + 96 * v57 + 40);
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v138, (uint64_t)v147);
    if (v62 == 1)
    {
      outlined destroy of TableDataSourceAdaptor((uint64_t)v147);
      outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v138);
      uint64_t v29 = v122;
    }
    else
    {
      outlined init with copy of TableDataSourceAdaptor((uint64_t)v147, (uint64_t)&v128);
      uint64_t v29 = v122;
      if (v57)
      {
        outlined destroy of TableDataSourceAdaptor((uint64_t)&v128);
        outlined destroy of TableDataSourceAdaptor((uint64_t)v147);
        outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v138);
LABEL_25:
        (*(void (**)(char *, uint64_t))v112)(v126, v29);
        goto LABEL_26;
      }
      char v73 = BYTE8(v136);
      outlined init with copy of TableDataSourceAdaptor((uint64_t)&v128, (uint64_t)v148);
      int v74 = v148[169];
      outlined destroy of TableDataSourceAdaptor((uint64_t)v148);
      outlined destroy of TableDataSourceAdaptor((uint64_t)&v128);
      outlined destroy of TableDataSourceAdaptor((uint64_t)v147);
      outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v138);
      if ((v73 & 1) != 0 || v74 == 2) {
        goto LABEL_25;
      }
    }
    double v63 = v110;
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v65 = objc_msgSend(v127, sel_supplementaryViewForElementKind_atIndexPath_, v63, isa);

    if (!v65) {
      goto LABEL_25;
    }
    type metadata accessor for TableCollectionViewCell();
    uint64_t v66 = swift_dynamicCastClass();
    if (!v66)
    {

      goto LABEL_25;
    }
    uint64_t v67 = v66;
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v123, (uint64_t)v138, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    uint64_t v68 = *v109;
    outlined copy of Transaction?(*v109);
    id v69 = v126;
    uint64_t v70 = IndexPath.section.getter();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v138, (uint64_t)&v128, &lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListUpdateRecorder);
    specialized ShadowSectionCollection.init(_:)(&v128, (uint64_t)v147);
    outlined destroy of ShadowSectionCollection<TableDataSourceAdaptor>((uint64_t)v147);
    unint64_t v71 = specialized ShadowListUpdateRecorder.initialIndex(_:)(v70 & ~(v70 >> 63));
    TableDataSourceAdaptor.configureHeader(_:transaction:forSectionAt:)(v67, v68, v71);
    outlined consume of Transaction?(v68);

    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v138);
    int v72 = v69;
    uint64_t v55 = v120;
    (*(void (**)(char *, uint64_t))v112)(v72, v29);
LABEL_26:
    v52 += v113;
    unint64_t v48 = v124 - 1;
    if (v124 == 1)
    {
      uint64_t v75 = v125;
      uint64_t v45 = &selRef_setObscuresBackgroundDuringPresentation_;
      v125(v55, 1, 1, v29);
      goto LABEL_46;
    }
    ((void (*)(unsigned int (**)(char *, uint64_t, uint64_t), unint64_t, uint64_t))v119)(v55, v52, v29);
  }
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  swift_bridgeObjectRetain();
  uint64_t v106 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v106) {
    goto LABEL_71;
  }
LABEL_59:
  if ((v27 & 0xC000000000000001) != 0) {
    goto LABEL_73;
  }
  if (!*(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_75:
    __break(1u);
    return;
  }
  id v92 = *(id *)(v27 + 32);
LABEL_62:
  uint64_t v93 = v92;
  swift_bridgeObjectRelease();
  type metadata accessor for TableGlobalHeader();
  if (swift_dynamicCastClass())
  {
    long long v94 = v111;
    long long v95 = (void *)MEMORY[0x1E4FBC8C8];
    long long v96 = (char *)v111 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v111) + 0x88);
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)v96, (uint64_t)v147, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
    long long v97 = (void *)((char *)v94 + *(void *)((*v95 & *v94) + 0xA0));
    swift_beginAccess();
    uint64_t v98 = *v97;
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v147, (uint64_t)v138);
    uint64_t v99 = swift_dynamicCastClass();
    if (v99)
    {
      long long v100 = (void *)v99;
      outlined copy of Transaction?(v98);
      id v101 = v93;
      objc_msgSend(v100, sel_setAutomaticallyUpdatesContentConfiguration_, 0);
      long long v102 = v142;
      uint64_t v103 = v143;
      outlined init with copy of TableColumnCollection((uint64_t)v140, (uint64_t)v129 + 8);
      outlined copy of Binding<[SwiftUIAnySortComparator]>?(v102, *((uint64_t *)&v102 + 1));
      char v104 = TableDataSourceAdaptor.headerDisplayMode.getter();
      long long v128 = v102;
      *(void *)&v129[0] = v103;
      BYTE1(v130) = v104;
      BYTE2(v130) = BYTE8(v141);
      uint64_t v105 = (uint64_t)v100 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_globalHeader;
      swift_beginAccess();
      outlined assign with take of TableHeaderView?((uint64_t)&v128, v105, &lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView);
      swift_endAccess();
      objc_msgSend(v100, sel_setNeedsUpdateConfiguration);

      outlined destroy of TableDataSourceAdaptor((uint64_t)v138);
      outlined consume of Transaction?(v98);
    }
    else
    {
      outlined destroy of TableDataSourceAdaptor((uint64_t)v138);
    }
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v147);
  }
  else
  {
  }
}

void specialized performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(void *a1, void *a2, char a3)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v47[-1] - v7;
  type metadata accessor for IndexPath?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v47[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)MEMORY[0x1E4FBC8C8];
  *((unsigned char *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0xD0)) = 1;
  uint64_t v13 = (void *)((char *)a1 + *(void *)((*v12 & *a1) + 0xA0));
  swift_beginAccess();
  if (*v13 == 1)
  {
    swift_endAccess();
    goto LABEL_6;
  }
  uint64_t v14 = Transaction.animation.getter();
  swift_endAccess();
  if (!v14)
  {
LABEL_6:
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = a2;
    *(void *)(v15 + 24) = a1;
    *(unsigned char *)(v15 + 32) = 0;
    *(unsigned char *)(v15 + 33) = a3 & 1;
    uint64_t v16 = partial apply for specialized closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
    if (a3) {
      goto LABEL_7;
    }
LABEL_5:
    id v17 = a2;
    uint64_t v18 = a1;
    int v19 = 0;
    goto LABEL_8;
  }
  swift_release();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a1;
  *(unsigned char *)(v15 + 32) = 1;
  *(unsigned char *)(v15 + 33) = a3 & 1;
  uint64_t v16 = (void (*)(uint64_t))closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)specialized partial apply;
  if ((a3 & 1) == 0) {
    goto LABEL_5;
  }
LABEL_7:
  id v20 = a2;
  uint64_t v21 = a1;
  specialized UICollectionViewListCoordinatorBase.updateEditingState(_:)(v20);
  int v19 = 1;
LABEL_8:
  uint64_t v22 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v11, 1, 1, v22);
  uint64_t v23 = (uint64_t)a1 + *(void *)((*v12 & *a1) + 0xD8);
  swift_beginAccess();
  outlined assign with take of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)v11, v23, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  swift_endAccess();
  uint64_t v24 = (uint64_t)a1 + *(void *)((*v12 & *a1) + 0xB0);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v24, (uint64_t)v8, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  LOBYTE(v23) = specialized ListCoreBatchUpdates.isEmpty.getter();
  outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v8);
  if ((v23 & 1) == 0)
  {
    uint64_t v25 = (uint64_t)a1 + *(void *)((*v12 & *a1) + 0xC8);
    swift_beginAccess();
    outlined init with copy of CollectionDifference<AnyHashable>.Change(v25, (uint64_t)&v48, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor, MEMORY[0x1E4FBB718]);
    if (*((void *)&v49 + 1))
    {
      long long v66 = v56;
      v67[0] = v57[0];
      *(_OWORD *)((char *)v67 + 11) = *(_OWORD *)((char *)v57 + 11);
      long long v62 = v52;
      long long v63 = v53;
      long long v64 = v54;
      long long v65 = v55;
      long long v58 = v48;
      long long v59 = v49;
      long long v60 = v50;
      long long v61 = v51;
      outlined init with copy of TableDataSourceAdaptor((uint64_t)&v58, (uint64_t)&v48);
      uint64_t v26 = swift_allocObject();
      long long v27 = v54;
      *(_OWORD *)(v26 + 136) = v55;
      long long v28 = v57[0];
      *(_OWORD *)(v26 + 152) = v56;
      *(_OWORD *)(v26 + 168) = v28;
      *(_OWORD *)(v26 + 179) = *(_OWORD *)((char *)v57 + 11);
      long long v29 = v50;
      *(_OWORD *)(v26 + 72) = v51;
      long long v30 = v53;
      *(_OWORD *)(v26 + 88) = v52;
      *(_OWORD *)(v26 + 104) = v30;
      *(_OWORD *)(v26 + 120) = v27;
      long long v31 = v49;
      *(_OWORD *)(v26 + 24) = v48;
      *(_OWORD *)(v26 + 40) = v31;
      *(void *)(v26 + 16) = a1;
      *(_OWORD *)(v26 + 56) = v29;
      *(void *)(v26 + 200) = a2;
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = partial apply for specialized closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
      *(void *)(v32 + 24) = v26;
      v47[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
      v47[5] = v32;
      v47[0] = MEMORY[0x1E4F143A8];
      v47[1] = 1107296256;
      v47[2] = thunk for @escaping @callee_guaranteed () -> ();
      v47[3] = &block_descriptor_47_0;
      uint64_t v33 = _Block_copy(v47);
      id v34 = a2;
      id v35 = a1;
      swift_release();
      *(void *)&long long v50 = v16;
      *((void *)&v50 + 1) = v15;
      *(void *)&long long v48 = MEMORY[0x1E4F143A8];
      *((void *)&v48 + 1) = 1107296256;
      *(void *)&long long v49 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
      *((void *)&v49 + 1) = &block_descriptor_50;
      double v36 = _Block_copy(&v48);
      swift_retain();
      swift_release();
      objc_msgSend(v34, sel_performBatchUpdates_completion_, v33, v36);
      _Block_release(v36);
      _Block_release(v33);
      swift_release();
      outlined destroy of TableDataSourceAdaptor((uint64_t)&v58);
      swift_release();
      return;
    }
    outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)&v48, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor, MEMORY[0x1E4FBB718]);
  }
  if (v19
    && (outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v24, (uint64_t)v8, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates), char v37 = specialized ListCoreBatchUpdates.isEmpty.getter(), outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v8), (v37 & 1) != 0))
  {
    *(void *)&long long v60 = v16;
    *((void *)&v60 + 1) = v15;
    *(void *)&long long v58 = MEMORY[0x1E4F143A8];
    *((void *)&v58 + 1) = 1107296256;
    *(void *)&long long v59 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    *((void *)&v59 + 1) = &block_descriptor_37;
    uint64_t v38 = _Block_copy(&v58);
    swift_retain();
    swift_release();
    objc_msgSend(a2, sel_performBatchUpdates_completion_, 0, v38);
    swift_release();
    _Block_release(v38);
  }
  else
  {
    uint64_t v39 = self;
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = a2;
    *(void *)(v40 + 24) = a1;
    uint64_t v41 = swift_allocObject();
    *(void *)(v41 + 16) = partial apply for specialized closure #3 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
    *(void *)(v41 + 24) = v40;
    *(void *)&long long v60 = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
    *((void *)&v60 + 1) = v41;
    *(void *)&long long v58 = MEMORY[0x1E4F143A8];
    *((void *)&v58 + 1) = 1107296256;
    *(void *)&long long v59 = thunk for @escaping @callee_guaranteed () -> ();
    *((void *)&v59 + 1) = &block_descriptor_34_1;
    uint64_t v42 = _Block_copy(&v58);
    id v43 = a2;
    id v44 = a1;
    swift_retain();
    swift_release();
    objc_msgSend(v39, sel_performWithoutAnimation_, v42);
    swift_release();
    _Block_release(v42);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
}

uint64_t specialized disableFocusEventsForDeletedCells #1 <A, B>() in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexPath?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for IndexSet();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (char *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0xB0);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v15, v11);
  id v16 = a2;
  uint64_t v17 = specialized Sequence.flatMap<A>(_:)((uint64_t)v14, v16);
  id v36 = v16;

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  uint64_t v44 = v17;
  uint64_t v18 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v18);
  uint64_t v19 = *(void *)(v44 + 16);
  v33[0] = v44;
  if (v19)
  {
    uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v20 = v5 + 16;
    unint64_t v22 = v44 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
    uint64_t v23 = *(void *)(v20 + 56);
    uint64_t v41 = v21;
    uint64_t v42 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 40);
    uint64_t v39 = v23;
    uint64_t v40 = (unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 32);
    char v37 = (void (**)(char *, uint64_t))(v20 - 8);
    uint64_t v38 = (void (**)(char *, char *, uint64_t))(v20 + 16);
    uint64_t v24 = v36;
    v33[1] = v20;
    v21(v10, v22, v4);
    while (1)
    {
      uint64_t v25 = *v42;
      (*v42)(v10, 0, 1, v4);
      if ((*v40)(v10, 1, v4) == 1) {
        break;
      }
      (*v38)(v7, v10, v4);
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      (*v37)(v7, v4);
      id v27 = objc_msgSend(v24, sel_cellForItemAtIndexPath_, isa, v33[0]);

      if (v27)
      {
        type metadata accessor for TableCollectionViewCell();
        uint64_t v28 = swift_dynamicCastClass();
        if (v28)
        {
          long long v29 = *(void **)(v28 + direct field offset for ListCollectionViewCellBase.host);
          if (v29)
          {
            swift_retain();
            id v35 = v27;
            id v34 = v29;
            GraphHost.environment.getter();
            swift_release();
            if (v45)
            {
              _s7SwiftUI19SelectionManagerBoxOys11AnyHashableVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
              lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>();
              swift_retain_n();
              swift_retain_n();
              PropertyList.Tracker.value<A>(_:for:)();
              swift_release_n();
            }
            else
            {
              _s7SwiftUI19SelectionManagerBoxOys11AnyHashableVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
              lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>();
              swift_retain_n();
              PropertyList.subscript.getter();
            }
            uint64_t v24 = v36;
            swift_release_n();
            uint64_t Strong = swift_weakLoadStrong();
            _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v43, (uint64_t (*)(void))type metadata accessor for WeakBox<FocusBridge>);
            swift_release();
            swift_release();

            id v31 = v35;
            if (Strong)
            {
              *(unsigned char *)(Strong + 177) = 1;
              swift_release();
            }
          }
          else
          {

            uint64_t v24 = v36;
          }
        }
        else
        {
        }
      }
      v22 += v39;
      if (!--v19)
      {
        v25(v10, 1, 1, v4);
        return swift_bridgeObjectRelease();
      }
      v41(v10, v22, v4);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v10, 1, 1, v4);
  }
  return swift_bridgeObjectRelease();
}

void specialized closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(uint64_t a1, void *a2, void *a3, char a4, char a5)
{
  _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
  double v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v23 - v11;
  id v13 = objc_msgSend(a2, sel_window, v10);
  if (v13)
  {

    uint64_t v14 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v15 = (uint64_t)a3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a3) + 0xB0);
    swift_beginAccess();
    outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v15, (uint64_t)v12, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    LOBYTE(v15) = specialized ListCoreBatchUpdates.isEmpty.getter();
    uint64_t v16 = outlined destroy of ListCoreBatchUpdates<TableDataSourceAdaptor>((uint64_t)v12);
    if (v15)
    {
      specialized UICollectionViewListCoordinatorBase.updateEditingState(_:)(a2);
      uint64_t v17 = (char *)a3 + *(void *)((*v14 & *a3) + 0xF0);
      if (v17[9] != 1 || !(*(void *)v17 ^ 1 | v17[8]))
      {
        uint64_t v18 = specialized UIView.firstAncestorWhere(_:)(a2);
        if (v18)
        {
          swift_getObjectType();
          uint64_t v19 = swift_conformsToProtocol2();
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          if (v19) {
            uint64_t v21 = v18;
          }
          else {
            uint64_t v21 = 0;
          }
          if (v21)
          {
            uint64_t ObjectType = swift_getObjectType();
            (*(void (**)(uint64_t, uint64_t))(v20 + 8))(ObjectType, v20);
          }
        }
      }
      specialized UICollectionViewListCoordinatorBase.updateListContents(_:)(a2);
    }
    else
    {
      MEMORY[0x1F4188790](v16);
      *((unsigned char *)&v23 - 32) = a4 & 1;
      *(&v23 - 3) = (uint64_t)a3;
      *(&v23 - 2) = (uint64_t)a2;
      *((unsigned char *)&v23 - 8) = a5 & 1;
      static Update.ensure<A>(_:)();
    }
  }
  else
  {
    *((unsigned char *)a3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a3) + 0xD0)) = 0;
  }
}

uint64_t specialized closure #1 in closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(char a1, void *a2, void *a3, char a4)
{
  if (a1) {
    return specialized performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a2, a3, a4 & 1);
  }
  uint64_t v8 = self;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  *(unsigned char *)(v9 + 32) = a4 & 1;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)specialized partial apply;
  *(void *)(v10 + 24) = v9;
  v15[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
  _OWORD v15[5] = v10;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1107296256;
  void v15[2] = thunk for @escaping @callee_guaranteed () -> ();
  v15[3] = &block_descriptor_68;
  uint64_t v11 = _Block_copy(v15);
  id v12 = a2;
  id v13 = a3;
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_performWithoutAnimation_, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

id specialized UICollectionViewListCoordinatorBase.updateEditingState(_:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for IndexPath?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v40 - v8 + 16;
  uint64_t v10 = type metadata accessor for IndexPath();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0) + 16;
  id v15 = objc_msgSend(a1, sel_indexPathsForSelectedItems, v12);
  uint64_t v39 = v6;
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v17 = 0;
  }
  unsigned int v18 = objc_msgSend(a1, sel_isEditing, v39);
  uint64_t v19 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v20 = (char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x110);
  uint64_t v21 = *((void *)v20 + 1);
  if (!v21)
  {
    objc_msgSend(a1, sel_setEditing_, 0);
    if (v18)
    {
      swift_bridgeObjectRelease();
LABEL_10:
      uint64_t v25 = (uint64_t)v2 + *(void *)((*v19 & *v2) + 0x100);
      swift_beginAccess();
      uint64_t v26 = v11;
      if (*(void *)(v25 + 8))
      {
        _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v25, (uint64_t)&v47, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
        type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
        MEMORY[0x18C113DA0](&v43);
        outlined init with copy of SelectionManagerBox<AnyHashable>((uint64_t)&v43, (uint64_t)v40);
        if (v42)
        {
          if (v42 == 1)
          {
            outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v43);
            long long v43 = 0u;
            long long v44 = 0u;
            uint64_t v45 = 0;
            char v46 = 1;
          }
          outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)v40);
        }
        else
        {
          outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v43);
          swift_bridgeObjectRelease();
          *(void *)&long long v43 = MEMORY[0x1E4FBC870];
          char v46 = 0;
        }
        dispatch thunk of AnyLocation.set(_:transaction:)();
        outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v43);
        _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)&v47, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
      }
      uint64_t v29 = (uint64_t)v2 + *(void *)((*v19 & *v2) + 0xD8);
      swift_beginAccess();
      _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v29, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for IndexPath?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
        return (id)_s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for IndexPath?);
      }
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
      type metadata accessor for UpdateCoalescingCollectionView(0);
      uint64_t v30 = swift_dynamicCastClass();
      if (v30)
      {
        uint64_t v31 = v30;
        id v32 = a1;
        specialized UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)((uint64_t)&v47);
        if (*((void *)&v48 + 1))
        {
          v40[0] = v47;
          v40[1] = v48;
          uint64_t v41 = v49;
          swift_beginAccess();
          if (*(void *)(v25 + 8))
          {
            _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v25, (uint64_t)&v47, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
            swift_endAccess();
            type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
            MEMORY[0x18C113DA0](&v43);
            specialized SelectionManagerBox.select(_:)((uint64_t)v40);
            dispatch thunk of AnyLocation.set(_:transaction:)();
            outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v43);
            _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)&v47, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
            outlined destroy of AnyHashable((uint64_t)v40);
          }
          else
          {
            outlined destroy of AnyHashable((uint64_t)v40);
            swift_endAccess();
          }
        }
        else
        {
          outlined destroy of Binding<AnyTableColumnCustomization>((uint64_t)&v47, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
        }
        uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
        uint64_t v34 = (uint64_t)v39;
        v33(v39, v14, v10);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v34, 0, 1, v10);
        uint64_t v35 = v31 + OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem;
        swift_beginAccess();
        outlined assign with take of Binding<SelectionManagerBox<AnyHashable>>?(v34, v35, (uint64_t (*)(void))type metadata accessor for IndexPath?);
        swift_endAccess();
        uint64_t v36 = swift_allocObject();
        *(void *)(v36 + 16) = v31;
        *(void *)(v36 + 24) = v2;
        id v37 = v32;
        uint64_t v38 = v2;
        onNextMainRunLoop(do:)();

        swift_release();
      }
      return (id)(*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v14, v10);
    }
    return (id)swift_bridgeObjectRelease();
  }
  char v22 = v20[16];
  *(void *)&long long v47 = *(void *)v20;
  *((void *)&v47 + 1) = v21;
  LOBYTE(v48) = v22;
  type metadata accessor for MutableBox<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v43);
  int v23 = v43;
  id result = objc_msgSend(a1, sel_setEditing_, (_BYTE)v43 != 0);
  if (v18)
  {
    id result = (id)swift_bridgeObjectRelease();
    if (v23) {
      return result;
    }
    goto LABEL_10;
  }
  if (!v23) {
    return (id)swift_bridgeObjectRelease();
  }
  if (v17)
  {
    uint64_t v27 = *(void *)(v17 + 16);
    id result = (id)swift_bridgeObjectRelease();
    if (v27 == 1)
    {
      uint64_t v28 = (uint64_t)v2 + *(void *)((*v19 & *v2) + 0x100);
      id result = (id)swift_beginAccess();
      if (*(void *)(v28 + 8))
      {
        _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v28, (uint64_t)&v47, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
        type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
        MEMORY[0x18C113DA0](&v43);
        outlined init with copy of SelectionManagerBox<AnyHashable>((uint64_t)&v43, (uint64_t)v40);
        if (v42)
        {
          if (v42 == 1)
          {
            outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v43);
            long long v43 = 0u;
            long long v44 = 0u;
            uint64_t v45 = 0;
            char v46 = 1;
          }
          outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)v40);
        }
        else
        {
          outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v43);
          swift_bridgeObjectRelease();
          *(void *)&long long v43 = MEMORY[0x1E4FBC870];
          char v46 = 0;
        }
        dispatch thunk of AnyLocation.set(_:transaction:)();
        outlined destroy of SelectionManagerBox<AnyHashable>((uint64_t)&v43);
        return (id)_s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)&v47, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>);
      }
    }
  }
  return result;
}

uint64_t specialized closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for IndexSet.Index();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v108 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for IndexPath();
  uint64_t v119 = *(void *)(v126 - 8);
  MEMORY[0x1F4188790](v126);
  char v107 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v122 = (char *)&v104 - v11;
  MEMORY[0x1F4188790](v12);
  unint64_t v121 = (char *)&v104 - v13;
  _s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_0(0, &lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (uint64_t (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v124 = (uint64_t)&v104 - v18;
  uint64_t v117 = type metadata accessor for IndexSet();
  uint64_t v19 = *(void *)(v117 - 8);
  MEMORY[0x1F4188790](v117);
  long long v109 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  int v23 = (char *)&v104 - v22;
  uint64_t v24 = (uint64_t)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x88);
  uint64_t result = swift_beginAccess();
  if (*(void *)(*(void *)(v24 + 176) + 16))
  {
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }
  else
  {
    long long v115 = v23;
    uint64_t v26 = a2;
    uint64_t v106 = v6;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = *(void *)(v24 + 184);
    if (isUniquelyReferenced_nonNull_native)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v28 + 16));
    }
    else
    {
      *(void *)(v24 + 184) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v28 + 24) >> 1);
      swift_bridgeObjectRelease();
    }
    uint64_t v105 = v7;
    outlined assign with copy of TableDataSourceAdaptor(v26, v24);
    swift_endAccess();
    specialized disableFocusEventsForDeletedCells #1 <A, B>() in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a1, a3);
    uint64_t v29 = specialized UICollectionViewListCoordinatorBase.dragAndDropController.getter();
    outlined init with copy of TableDataSourceAdaptor(v26, (uint64_t)v130);
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v130, (uint64_t)v128);
    *(void *)&long long v129 = MEMORY[0x1E4FBC860];
    *((void *)&v129 + 1) = MEMORY[0x1E4FBC860];
    outlined destroy of TableDataSourceAdaptor((uint64_t)v130);
    long long v139 = v128[8];
    v140[0] = v128[9];
    v140[1] = v128[10];
    v140[2] = v129;
    long long v135 = v128[4];
    long long v136 = v128[5];
    long long v137 = v128[6];
    long long v138 = v128[7];
    long long v131 = v128[0];
    long long v132 = v128[1];
    long long v133 = v128[2];
    long long v134 = v128[3];
    uint64_t v30 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v31 = (uint64_t)v29 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v29) + 0x60);
    swift_beginAccess();
    outlined assign with take of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)&v131, v31);
    swift_endAccess();

    uint64_t v32 = *(void *)((*v30 & *a1) + 0xB0);
    long long v111 = a1;
    uint64_t v33 = (char *)a1 + v32;
    swift_beginAccess();
    uint64_t v35 = v19 + 16;
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    uint64_t v36 = v115;
    long long v118 = v33;
    id v37 = v33;
    uint64_t v38 = v117;
    v34(v115, v37, v117);
    int v39 = IndexSet.isEmpty.getter();
    char v42 = *(void (**)(char *, uint64_t))(v19 + 8);
    uint64_t v40 = v19 + 8;
    uint64_t v41 = v42;
    v42(v36, v38);
    long long v116 = v34;
    LODWORD(v127) = v39;
    if ((v39 & 1) == 0)
    {
      v34(v36, v118, v38);
      IndexSet._bridgeToObjectiveC()(v43);
      uint64_t v45 = v44;
      v41(v36, v38);
      objc_msgSend(a3, sel_deleteSections_, v45);

      uint64_t v34 = v116;
    }
    _s7SwiftUI20ShadowListDataSourceVyAA05TableeF7AdaptorVGMaTm_0(0, &lazy cache variable for type metadata for ListCoreBatchUpdates<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListCoreBatchUpdates);
    long long v47 = v46;
    v34(v36, &v118[v46[9]], v38);
    char v48 = IndexSet.isEmpty.getter();
    v41(v36, v38);
    uint64_t v112 = v35;
    uint64_t v113 = v41;
    if (v48)
    {
      char v49 = v127 ^ 1;
      long long v50 = v118;
    }
    else
    {
      long long v51 = v118;
      v116(v36, &v118[v47[9]], v38);
      IndexSet._bridgeToObjectiveC()(v52);
      long long v54 = v53;
      v41(v36, v38);
      objc_msgSend(a3, sel_insertSections_, v54);

      char v49 = 1;
      long long v50 = v51;
    }
    uint64_t v55 = v40;
    uint64_t v56 = *(void *)&v50[v47[10]];
    uint64_t v57 = *(void *)(v56 + 16);
    uint64_t v114 = v55;
    if (v57)
    {
      swift_bridgeObjectRetain();
      long long v58 = (void *)(v56 + 40);
      do
      {
        objc_msgSend(a3, sel_moveSection_toSection_, *(v58 - 1), *v58);
        v58 += 2;
        --v57;
      }
      while (v57);
      swift_bridgeObjectRelease();
      char v49 = 1;
    }
    if (*(void *)(*(void *)&v50[v47[11]] + 16))
    {
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(a3, sel_deleteItemsAtIndexPaths_, isa);

      char v49 = 1;
    }
    if (*(void *)(*(void *)&v50[v47[12]] + 16))
    {
      swift_bridgeObjectRetain();
      Class v60 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(a3, sel_insertItemsAtIndexPaths_, v60);

      char v49 = 1;
    }
    id v123 = a3;
    long long v110 = v47;
    uint64_t v61 = *(void *)&v50[v47[13]];
    id v62 = *(id *)(v61 + 16);
    uint64_t v125 = (void (**)(char *, uint64_t, uint64_t))(v119 + 32);
    long long v120 = (uint64_t (**)(char *, uint64_t))(v119 + 8);
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v63 = 0;
    if (v62) {
      goto LABEL_20;
    }
LABEL_19:
    type metadata accessor for (source: IndexPath, destination: IndexPath)();
    uint64_t v65 = v64;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v16, 1, 1, v64);
    long long v66 = v62;
    while (1)
    {
      uint64_t v69 = v124;
      _ss11AnyHashableVSgWObTm_2((uint64_t)v16, v124, (uint64_t)&lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (uint64_t)type metadata accessor for (source: IndexPath, destination: IndexPath), MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI16BridgedListStateV12ScrollTargetVSgMaTm_0);
      type metadata accessor for (source: IndexPath, destination: IndexPath)();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 48))(v69, 1, v65) == 1) {
        break;
      }
      uint64_t v70 = v69 + *(int *)(v65 + 48);
      uint64_t v71 = v69;
      id v127 = v66;
      uint64_t v72 = v126;
      char v73 = *v125;
      int v74 = v16;
      uint64_t v75 = v121;
      (*v125)(v121, v70, v126);
      uint64_t v76 = v122;
      v73(v122, v71, v72);
      Class v77 = IndexPath._bridgeToObjectiveC()().super.isa;
      uint64_t v78 = *v120;
      (*v120)(v76, v72);
      Class v79 = IndexPath._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v123, sel_moveItemAtIndexPath_toIndexPath_, v77, v79);

      id v80 = v75;
      uint64_t v16 = v74;
      uint64_t result = v78(v80, v72);
      unint64_t v63 = (unint64_t)v127;
      char v49 = 1;
      if (v127 == v62) {
        goto LABEL_19;
      }
LABEL_20:
      if (v63 >= *(void *)(v61 + 16))
      {
        __break(1u);
        goto LABEL_37;
      }
      type metadata accessor for (source: IndexPath, destination: IndexPath)();
      uint64_t v65 = v67;
      uint64_t v68 = *(void *)(v67 - 8);
      _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v61+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(void *)(v68 + 72) * v63, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for (source: IndexPath, destination: IndexPath));
      long long v66 = (void *)(v63 + 1);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v16, 0, 1, v65);
    }
    swift_bridgeObjectRelease();
    uint64_t v81 = (void *)MEMORY[0x1E4FBC8C8];
    unint64_t v82 = v113;
    if ((v49 & 1) == 0)
    {
      uint64_t v83 = v117;
      int v84 = v115;
      v116(v115, &v118[v110[14]], v117);
      char v85 = IndexSet.isEmpty.getter();
      v82(v84, v83);
      if ((v85 & 1) == 0)
      {
        id v86 = v123;
        id v87 = objc_msgSend(v123, sel_collectionViewLayout);
        ObjCClassFromObject = (void *)swift_getObjCClassFromObject();

        objc_msgSend(ObjCClassFromObject, sel_invalidationContextClass);
        swift_getObjCClassMetadata();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewLayoutInvalidationContext);
        swift_dynamicCastMetatypeUnconditional();
        id v127 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
        v116(v109, &v118[v110[14]], v117);
        lazy protocol witness table accessor for type SystemSegmentItem and conformance SystemSegmentItem(&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
        uint64_t v89 = dispatch thunk of Collection.count.getter();
        if (v89)
        {
          uint64_t v90 = v89;
          v130[0] = MEMORY[0x1E4FBC860];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v89 & ~(v89 >> 63), 0);
          uint64_t v91 = v130[0];
          id v92 = v108;
          uint64_t result = dispatch thunk of Collection.startIndex.getter();
          if (v90 < 0) {
            goto LABEL_38;
          }
          uint64_t v93 = v107;
          do
          {
            long long v94 = (void (*)(long long *, void))dispatch thunk of Collection.subscript.read();
            v94(&v131, 0);
            IndexPath.init(index:)();
            v130[0] = v91;
            unint64_t v96 = *(void *)(v91 + 16);
            unint64_t v95 = *(void *)(v91 + 24);
            if (v96 >= v95 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v95 > 1, v96 + 1, 1);
              uint64_t v91 = v130[0];
            }
            *(void *)(v91 + 16) = v96 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v119 + 32))(v91+ ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80))+ *(void *)(v119 + 72) * v96, v93, v126);
            v130[0] = v91;
            dispatch thunk of Collection.formIndex(after:)();
            --v90;
          }
          while (v90);
          (*(void (**)(char *, uint64_t))(v105 + 8))(v92, v106);
          id v86 = v123;
          uint64_t v81 = (void *)MEMORY[0x1E4FBC8C8];
          unint64_t v82 = v113;
        }
        v82(v109, v117);
        id v97 = (id)*MEMORY[0x1E4FB2770];
        Class v98 = Array._bridgeToObjectiveC()().super.isa;
        id v99 = v127;
        objc_msgSend(v127, sel_invalidateSupplementaryElementsOfKind_atIndexPaths_, v97, v98);

        id v100 = (id)*MEMORY[0x1E4FB2760];
        Class v101 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v99, sel_invalidateSupplementaryElementsOfKind_atIndexPaths_, v100, v101);

        id v102 = objc_msgSend(v86, sel_collectionViewLayout);
        objc_msgSend(v102, sel_invalidateLayoutWithContext_, v99);
      }
    }
    swift_beginAccess();
    specialized ListCoreBatchUpdates.resetAll()();
    swift_endAccess();
    long long v139 = 0u;
    memset(v140, 0, 27);
    long long v137 = 0u;
    long long v138 = 0u;
    long long v135 = 0u;
    long long v136 = 0u;
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    uint64_t v103 = (uint64_t)v111 + *(void *)((*v81 & *v111) + 0xC8);
    swift_beginAccess();
    outlined assign with take of TableHeaderView?((uint64_t)&v131, v103, &lazy cache variable for type metadata for TableDataSourceAdaptor?, (uint64_t)&type metadata for TableDataSourceAdaptor);
    return swift_endAccess();
  }
  return result;
}

void specialized closure #1 in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(char a1, void *a2, void *a3, char a4)
{
  if (a1)
  {
    specialized performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a2, a3, a4 & 1);
  }
  else
  {
    uint64_t v7 = self;
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a2;
    *(void *)(v8 + 24) = a3;
    *(unsigned char *)(v8 + 32) = a4 & 1;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = partial apply for specialized performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
    *(void *)(v9 + 24) = v8;
    void v14[4] = partial apply for thunk for @callee_guaranteed () -> ();
    _OWORD v14[5] = v9;
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 1107296256;
    void v14[2] = thunk for @escaping @callee_guaranteed () -> ();
    void v14[3] = &block_descriptor_21_1;
    uint64_t v10 = _Block_copy(v14);
    uint64_t v11 = a2;
    id v12 = a3;
    swift_retain();
    swift_release();
    objc_msgSend(v7, sel_performWithoutAnimation_, v10);
    _Block_release(v10);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
}

uint64_t specialized closure #1 in UICollectionViewListCoordinatorBase.updateEditingState(_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IndexPath?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v5 + 56))((char *)&v19 - v13, 1, 1, v4, v12);
  uint64_t v15 = (uint64_t)a1 + OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem;
  swift_beginAccess();
  outlined assign with take of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)v14, v15, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  swift_endAccess();
  uint64_t v16 = (uint64_t)a2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a2) + 0xD8);
  swift_beginAccess();
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0(v16, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1) {
    return _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for IndexPath?);
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_selectItemAtIndexPath_animated_scrollPosition_, isa, 0, 0);

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void specialized closure #1 in UICollectionViewListCoordinatorBase.updateListContents(_:)(uint64_t *a1, void *a2, unsigned char *a3)
{
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = (uint64_t)a2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a2) + 0x88);
  swift_beginAccess();
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>(v7, (uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource);
  if (*((unsigned char *)a2 + *(void *)((*v6 & *a2) + 0xE8)) == 1)
  {
    unint64_t v8 = 1;
  }
  else
  {
    uint64_t v9 = (void *)((char *)a2 + *(void *)((*v6 & *a2) + 0xA0));
    swift_beginAccess();
    unint64_t v8 = *v9;
    outlined copy of Transaction?(*v9);
  }
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  outlined init with copy of TableRowView((uint64_t)(a1 + 2), (uint64_t)v16);
  uint64_t v12 = a1[19];
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v19 = 0;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  v16[17] = v12;
  __int16 v20 = 0;
  char v21 = 0;
  swift_bridgeObjectRetain();
  TableDataSourceAdaptor.configureCell(_:transaction:context:)(a3, v8, (uint64_t)&v14);
  outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)&v14);
  outlined consume of Transaction?(v8);
  outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>((uint64_t)v22);
  id v13 = objc_msgSend(a3, sel_layer, v14, v15);
  uint64_t v14 = a1[19];
  ViewTraitCollection.zIndex.getter();
  objc_msgSend(v13, sel_setZPosition_);
}

uint64_t specialized ShadowListUpdateRecorder.initialIndex(_:)(uint64_t a1)
{
  uint64_t v2 = a1;
  uint64_t v4 = *(void *)(v1 + 176);
  uint64_t v3 = *(void *)(v1 + 184);
  if (*(void *)(v3 + 16) || *(void *)(v4 + 16))
  {
    MEMORY[0x1F4188790](a1);
    lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v3, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    uint64_t v2 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, v2);
    swift_bridgeObjectRelease();
  }
  return v2;
}

uint64_t specialized ShadowListDataSource.contextForItem(index:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1;
  uint64_t v8 = *(void *)(v3 + 176);
  uint64_t v7 = *(void *)(v3 + 184);
  if (*(void *)(v7 + 16) || *(void *)(v8 + 16))
  {
    MEMORY[0x1F4188790](a1);
    lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    swift_getKeyPath();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_nTm(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release_n();
    uint64_t v5 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(v18, updated, (unint64_t)v5, a2);
    swift_bridgeObjectRelease();
    a2 = *(void *)&v18[0];
  }
  TableDataSourceAdaptor.contextForItem(index:)((unint64_t)v5, a2, (uint64_t)v22);
  _s7SwiftUI7BindingVyAA19SelectionManagerBoxOys11AnyHashableVGGSgWOcTm_0((uint64_t)v22, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?);
  if ((void)v19)
  {
    long long v16 = v20;
    v17[0] = v21[0];
    *(_OWORD *)((char *)v17 + 11) = *(_OWORD *)((char *)v21 + 11);
    _OWORD v14[5] = v18[6];
    void v14[6] = v18[7];
    v14[7] = v18[8];
    long long v15 = v19;
    v14[1] = v18[2];
    void v14[2] = v18[3];
    void v14[3] = v18[4];
    void v14[4] = v18[5];
    long long v13 = v18[0];
    v14[0] = v18[1];
    long long v10 = v18[0];
    outlined init with copy of TableRowView((uint64_t)v14, a3 + 16);
    uint64_t v11 = *((void *)&v15 + 1);
    outlined init with copy of CollectionDifference<AnyHashable>.Change((uint64_t)&v16, a3 + 160, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    *(_OWORD *)a3 = v10;
    *(void *)(a3 + 152) = v11;
    *(_WORD *)(a3 + 200) = 0;
    *(unsigned char *)(a3 + 202) = 0;
    swift_bridgeObjectRetain();
    outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>((uint64_t)&v13);
  }
  else
  {
    *(_OWORD *)(a3 + 187) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_2((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?);
}

uint64_t static CollectionViewTableRoot._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, long long *a8@<X8>)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v9 = *(_OWORD *)(a2 + 48);
  long long v84 = *(_OWORD *)(a2 + 32);
  long long v85 = v9;
  long long v86 = *(_OWORD *)(a2 + 64);
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v82 = *(_OWORD *)a2;
  long long v83 = v10;
  long long v11 = *(_OWORD *)a2;
  long long v12 = *(_OWORD *)(a2 + 32);
  long long v13 = *(_OWORD *)a2;
  long long v89 = *(_OWORD *)(a2 + 16);
  long long v90 = v12;
  long long v88 = v11;
  int v51 = *a1;
  int v87 = *(_DWORD *)(a2 + 80);
  long long v66 = v13;
  long long v67 = v8;
  long long v68 = v84;
  outlined retain of _GraphInputs((uint64_t)&v88);
  _ViewInputs.init(withoutGeometry:)();
  uint64_t v14 = v72;
  unsigned int v47 = DWORD2(v73);
  int v48 = DWORD2(v72);
  unsigned int v49 = HIDWORD(v73);
  unsigned int v15 = v74;
  unsigned int v16 = DWORD1(v74);
  unsigned int v38 = DWORD1(v74);
  unsigned int v31 = DWORD2(v75);
  unsigned int v36 = v74;
  unsigned int v37 = HIDWORD(v75);
  unsigned int v43 = DWORD1(v76);
  unsigned int v44 = v76;
  unsigned int v42 = HIDWORD(v76);
  unsigned int v45 = DWORD2(v76);
  int v46 = v77;
  *(void *)&long long v72 = v75;
  DWORD2(v72) = DWORD2(v75);
  outlined retain of _GraphInputs((uint64_t)&v88);
  swift_retain();
  uint64_t v41 = v73;
  swift_retain();
  uint64_t v50 = *((void *)&v74 + 1);
  swift_bridgeObjectRetain();
  uint64_t v17 = v75;
  swift_bridgeObjectRetain();
  PreferencesInputs.hostKeys.getter();
  HIDWORD(v81) = *MEMORY[0x1E4F4E7A0];
  long long v72 = v88;
  long long v73 = v89;
  long long v74 = v90;
  *(void *)&long long v75 = v14;
  *(void *)&long long v76 = v41;
  DWORD2(v75) = v48;
  *((void *)&v76 + 1) = __PAIR64__(v49, v47);
  *(void *)&long long v77 = __PAIR64__(v16, v15);
  *((void *)&v77 + 1) = v50;
  *(void *)&long long v78 = v17;
  *((void *)&v78 + 1) = __PAIR64__(HIDWORD(v75), v31);
  *(void *)&long long v79 = __PAIR64__(v43, v44);
  *((void *)&v79 + 1) = __PAIR64__(v42, v45);
  LODWORD(v80) = v46;
  PreferencesInputs.init(hostKeys:)();
  *((void *)&v80 + 1) = v66;
  LODWORD(v81) = DWORD2(v66);
  PreferenceKeys.add(_:)();
  long long v97 = v78;
  long long v98 = v79;
  long long v99 = v80;
  uint64_t v100 = v81;
  long long v93 = v74;
  long long v94 = v75;
  long long v95 = v76;
  long long v96 = v77;
  long long v91 = v72;
  long long v92 = v73;
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  uint64_t v63 = a5;
  unint64_t v64 = a6;
  uint64_t v65 = a7;
  LODWORD(v66) = v51;
  type metadata accessor for CollectionViewTableRoot();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  long long v78 = v97;
  long long v79 = v98;
  long long v80 = v99;
  uint64_t v81 = v100;
  long long v74 = v93;
  long long v75 = v94;
  long long v76 = v95;
  long long v77 = v96;
  long long v72 = v91;
  long long v73 = v92;
  (*(void (**)(long long *__return_ptr, uint64_t *, long long *, uint64_t, unint64_t))(a6 + 48))(&v66, &v54, &v72, a4, a6);
  uint64_t v32 = v66;
  int v33 = DWORD2(v66);
  *(void *)&long long v72 = v17;
  DWORD2(v72) = v31;
  uint64_t v18 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  LODWORD(v14) = DWORD2(v72);
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v58 = a5;
  unint64_t v59 = a6;
  uint64_t v19 = v72;
  uint64_t v60 = a7;
  LODWORD(v72) = v51;
  _GraphValue.subscript.getter();
  *(void *)&long long v72 = v18;
  *(void *)&long long v73 = v41;
  DWORD2(v72) = v48;
  *((void *)&v73 + 1) = __PAIR64__(v49, v47);
  *(void *)&long long v74 = __PAIR64__(v38, v36);
  *((void *)&v74 + 1) = v50;
  *(void *)&long long v75 = v19;
  *((void *)&v75 + 1) = __PAIR64__(v37, v14);
  *(void *)&long long v76 = __PAIR64__(v43, v44);
  *((void *)&v76 + 1) = __PAIR64__(v42, v45);
  LODWORD(v77) = v46;
  (*(void (**)(long long *__return_ptr, uint64_t *, long long *, uint64_t, uint64_t))(a7 + 64))(&v66, &v54, &v72, a5, a7);
  uint64_t v20 = v66;
  int v21 = DWORD2(v66);
  *(void *)&long long v72 = v32;
  DWORD2(v72) = v33;
  uint64_t v22 = PreferencesOutputs.subscript.getter();
  if ((v22 & 0x100000000) != 0)
  {
    __break(1u);
LABEL_10:
    __break(1u);
  }
  int v23 = v22;
  swift_bridgeObjectRelease();
  *(void *)&long long v72 = v20;
  DWORD2(v72) = v21;
  uint64_t v24 = PreferencesOutputs.subscript.getter();
  if ((v24 & 0x100000000) != 0) {
    goto LABEL_10;
  }
  int v25 = v24;
  swift_bridgeObjectRelease();
  LODWORD(v54) = v51;
  long long v68 = v84;
  long long v69 = v85;
  long long v70 = v86;
  int v71 = v87;
  long long v66 = v82;
  long long v67 = v83;
  outlined retain of _ViewInputs((uint64_t)&v82);
  UpdateCollectionViewTableCoordinator.init<A, B, C>(rowList:columnList:view:viewInputs:)(v23, v25, (int *)&v54, (uint64_t *)&v66, a3, a4, a5, a6, (uint64_t)&v72);
  outlined init with copy of UpdateCollectionViewTableCoordinator((uint64_t)&v72, (uint64_t)&v66);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for UICollectionViewListCoordinator);
  lazy protocol witness table accessor for type UpdateCollectionViewTableCoordinator and conformance UpdateCollectionViewTableCoordinator();
  int v26 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v66);
  static AGAttributeFlags.transactional.getter();
  AGGraphGetFlags();
  AGGraphSetFlags();
  specialized static CollectionViewListUtilities.makeOutputs<A, B>(inputs:coordinator:coordinatorKind:)((uint64_t)&v82, v26, 0, &v66);
  uint64_t v54 = v85;
  int v55 = DWORD2(v85);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    AGCreateWeakAttribute();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AccessibilityCollectionViewTableAttachment and conformance AccessibilityCollectionViewTableAttachment();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    long long v27 = v66;
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)()) {
      specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v53, &v82, v27, *((unint64_t *)&v27 + 1), 0);
    }
    swift_bridgeObjectRelease();
    uint64_t v28 = a8;
    _ViewOutputs.subscript.setter();
    outlined release of _TableRowInputs((uint64_t)&v91);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v72);
  }
  else
  {
    outlined destroy of UpdateCollectionViewTableCoordinator((uint64_t)&v72);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    outlined release of _TableRowInputs((uint64_t)&v91);
    uint64_t v28 = a8;
  }
  *uint64_t v28 = v66;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}