uint64_t storeEnumTagSinglePayload for HoverEffectGroup.Identifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverEffectGroup.Identifier()
{
  return &type metadata for HoverEffectGroup.Identifier;
}

unint64_t lazy protocol witness table accessor for type HoverEffectGroup.Identifier and conformance HoverEffectGroup.Identifier()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEffectGroup.Identifier and conformance HoverEffectGroup.Identifier;
  if (!lazy protocol witness table cache variable for type HoverEffectGroup.Identifier and conformance HoverEffectGroup.Identifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectGroup.Identifier and conformance HoverEffectGroup.Identifier);
  }
  return result;
}

void View.hoverEffectGroup(_:)()
{
}

void static HoverEffectGroup.Behavior.activatesGroup.getter()
{
}

void static HoverEffectGroup.Behavior.ignoresGroup.getter()
{
}

void View.hoverEffectGroup(id:in:behavior:)()
{
}

void static HoverEffectGroup.namespace(_:)()
{
}

void static HoverEffectGroup.Behavior.== infix(_:_:)()
{
  static HoverEffectGroup.== infix(_:_:)();
}

void static HoverEffectGroup.Scope.== infix(_:_:)()
{
  static HoverEffectGroup.== infix(_:_:)();
}

uint64_t type metadata completion function for AccessibilityDetachedPropertyModifier()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessibilityDetachedPropertyModifier(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 > v7)
  {
    uint64_t v9 = v8 + 1;
    char v10 = 8 * (v8 + 1);
    if ((v8 + 1) > 3) {
      goto LABEL_7;
    }
    unsigned int v12 = ((a2 - v7 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 >= 2)
    {
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v17 = v7 + (v9 | v13);
      return (v17 + 1);
    }
  }
LABEL_22:
  if (v6 < 0xFE)
  {
    unsigned int v16 = *((unsigned __int8 *)a1 + v8);
    if (v16 < 2) {
      return 0;
    }
    int v17 = (v16 + 2147483646) & 0x7FFFFFFF;
    return (v17 + 1);
  }
  v14 = *(uint64_t (**)(unsigned __int16 *))(v5 + 48);

  return v14(a1);
}

void storeEnumTagSinglePayload for AccessibilityDetachedPropertyModifier(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFE) {
    unsigned int v9 = 254;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(v6 + 64);
  size_t v11 = v10 + 1;
  if (a3 <= v9)
  {
    int v12 = 0;
  }
  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 - v9 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v13 = ~v9 + a2;
    if (v11 < 4)
    {
      int v14 = (v13 >> (8 * v11)) + 1;
      if (v10 != -1)
      {
        int v16 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v11] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v14;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v11] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x188171DBCLL);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v8 < 0xFE)
        {
          a1[v10] = a2 + 1;
        }
        else
        {
          int v17 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
          v17(a1, a2);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for AccessibilityDetachedPropertyModifier()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for AccessibilityDetachedPropertyWriterModifier()
{
  return &type metadata for AccessibilityDetachedPropertyWriterModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityDetachedPropertyWriterModifier()
{
  return &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityDetachedPropertyModifier<A>()
{
  return &protocol witness table for AccessibilityDetachedPropertyModifier<A>;
}

uint64_t TabContent.accessibility<A>(_:_:isEnabled:)@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a3;
  int v17 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unsigned int v9 = &v16[-v8];
  uint64_t v10 = type metadata accessor for AccessibilityDetachedPropertyModifier();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  int v14 = &v16[-v13];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, AssociatedTypeWitness, v12);
  AccessibilityDetachedPropertyModifier.init(value:isEnabled:)((uint64_t)v9, v17, (uint64_t)v14);
  TabContent.modifier<A>(_:)((uint64_t)v14, v19, v10, v18);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v11 + 8))(v14, v10);
}

void View.accessibilityApplyDetachedProperties()()
{
}

uint64_t AccessibilityDetachedPropertyModifier.init(value:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, a1, AssociatedTypeWitness);
  uint64_t result = type metadata accessor for AccessibilityDetachedPropertyModifier();
  *(unsigned char *)(a3 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance AccessibilityPropertyInput(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v3 = *(unsigned __int8 *)(a2 + 8);
  if (v2 & 1) != 0 || (v3) {
    return v2 & v3;
  }
  else {
    return static WeakAttribute.== infix(_:_:)();
  }
}

uint64_t static AccessibilityDetachedPropertyModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned int v8 = *(_DWORD *)(a2 + 24);
  unsigned int v7 = *(_DWORD *)(a2 + 28);
  unsigned int v10 = *(_DWORD *)(a2 + 32);
  unsigned int v9 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  int v14 = *(_DWORD *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 72);
  char v16 = *(unsigned char *)(a2 + 80);
  if ((v9 & 0x1000) != 0)
  {
    uint64_t v31 = a4;
    v32 = a3;
    uint64_t v42 = v4;
    int v43 = v5;
    uint64_t v44 = v6;
    *(void *)&long long v45 = __PAIR64__(v7, v8);
    *((void *)&v45 + 1) = __PAIR64__(v9, v10);
    uint64_t v46 = v12;
    *(void *)&long long v47 = v11;
    *((void *)&v47 + 1) = v13;
    int v48 = v14;
    uint64_t v49 = v15;
    char v50 = v16;
    lazy protocol witness table accessor for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    type metadata accessor for AccessibilityDetachedPropertyModifier();
    type metadata accessor for _GraphValue();
    uint64_t v18 = _GraphValue.value.getter();
    if (v34)
    {
      LODWORD(v33) = v18;
      MEMORY[0x1F4188790](v18);
      uint64_t v19 = type metadata accessor for AccessibilityDetachedPropertyModifier.InitialProperty();
      uint64_t v29 = v19;
      uint64_t WitnessTable = swift_getWitnessTable();
      _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_4(0, &lazy cache variable for type metadata for Attribute<AccessibilityProperties>, MEMORY[0x1E4F40BB0], MEMORY[0x1E4F4E740]);
      uint64_t v22 = v21;
      uint64_t v23 = MEMORY[0x1E4FBC248];
      uint64_t v24 = MEMORY[0x1E4FBC278];
      v25 = _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_32;
    }
    else
    {
      int v34 = v18;
      MEMORY[0x1F4188790](v18);
      uint64_t v19 = type metadata accessor for AccessibilityDetachedPropertyModifier.MergedProperties();
      uint64_t v29 = v19;
      uint64_t WitnessTable = swift_getWitnessTable();
      _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_4(0, &lazy cache variable for type metadata for Attribute<AccessibilityProperties>, MEMORY[0x1E4F40BB0], MEMORY[0x1E4F4E740]);
      uint64_t v22 = v26;
      uint64_t v23 = MEMORY[0x1E4FBC248];
      uint64_t v24 = MEMORY[0x1E4FBC278];
      v25 = closure #1 in Attribute.init<A>(_:)partial apply;
    }
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v33, (uint64_t)v25, (uint64_t)&v28, v19, v23, v22, v24, v20);
    uint64_t v33 = AGCreateWeakAttribute();
    LOBYTE(v34) = 0;
    PropertyList.subscript.setter();
    uint64_t v33 = v42;
    int v34 = v43;
    uint64_t v35 = v44;
    long long v36 = v45;
    uint64_t v37 = v46;
    long long v38 = v47;
    int v39 = v48;
    uint64_t v40 = v49;
    char v41 = v50;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v27 = swift_bridgeObjectRetain();
    v32(v27, &v33);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    uint64_t v42 = *(void *)a2;
    int v43 = v5;
    uint64_t v44 = v6;
    *(void *)&long long v45 = __PAIR64__(v7, v8);
    *((void *)&v45 + 1) = __PAIR64__(v9, v10);
    uint64_t v46 = v12;
    *(void *)&long long v47 = v11;
    *((void *)&v47 + 1) = v13;
    int v48 = v14;
    uint64_t v49 = v15;
    char v50 = v16;
    return ((uint64_t (*)(uint64_t, uint64_t *))a3)(a1, &v42);
  }
}

uint64_t AccessibilityDetachedPropertyModifier.MergedProperties.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AccessibilityDetachedPropertyModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t AccessibilityDetachedPropertyModifier.MergedProperties.value.getter@<X0>(uint64_t a1@<X4>, uint64_t *a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v18 = (char *)&AssociatedTypeWitness - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&AssociatedTypeWitness - v5;
  uint64_t v7 = type metadata accessor for AccessibilityDetachedPropertyModifier();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unsigned int v10 = (char *)&AssociatedTypeWitness - v9;
  if (!AGGraphGetWeakValue() || (uint64_t v11 = swift_bridgeObjectRetain()) == 0)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v11 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v22 = v11;
  AccessibilityDetachedPropertyModifier.MergedProperties.modifier.getter((uint64_t)v10);
  int v12 = v10[*(int *)(v7 + 44)];
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v12 == 1)
  {
    uint64_t v21 = v22;
    AccessibilityProperties.subscript.getter();
    AccessibilityDetachedPropertyModifier.MergedProperties.modifier.getter((uint64_t)v10);
    uint64_t v14 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(a1 + 8))(v10, AssociatedTypeWitness, a1);
    uint64_t v15 = v19;
    char v16 = *(void (**)(char *, uint64_t))(v19 + 8);
    v16(v10, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v6, v14);
    AccessibilityProperties.subscript.setter();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v16)(v6, v14);
  }
  *uint64_t v20 = v22;
  return result;
}

uint64_t AccessibilityDetachedPropertyModifier.InitialProperty.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AccessibilityDetachedPropertyModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityDetachedPropertyModifier<A>.MergedProperties@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return AccessibilityDetachedPropertyModifier.MergedProperties.value.getter(*(void *)(a1 + 32), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AccessibilityDetachedPropertyModifier<A>.MergedProperties(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t AccessibilityDetachedPropertyModifier.InitialProperty.value.getter@<X0>(uint64_t *a1@<X8>)
{
  int v12 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v3 = (char *)&v10 - v2;
  uint64_t v4 = type metadata accessor for AccessibilityDetachedPropertyModifier();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - v6;
  AccessibilityDetachedPropertyModifier.InitialProperty.modifier.getter((uint64_t)&v10 - v6);
  int v8 = v7[*(int *)(v4 + 44)];
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v8 == 1)
  {
    AccessibilityDetachedPropertyModifier.InitialProperty.modifier.getter((uint64_t)v7);
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v7, AssociatedTypeWitness);
    AccessibilityProperties.init<A>(_:_:)();
    uint64_t result = v13;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t result = Dictionary.init(minimumCapacity:)();
  }
  *int v12 = result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityDetachedPropertyModifier<A>.InitialProperty@<X0>(uint64_t *a1@<X8>)
{
  return AccessibilityDetachedPropertyModifier.InitialProperty.value.getter(a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AccessibilityDetachedPropertyModifier<A>.InitialProperty(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityDetachedPropertyModifier<A>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OnChangeOfSuggestionsModifier(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityDetachedPropertyModifier<A>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  return static AccessibilityDetachedPropertyModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4);
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier@<X0>(uint64_t *a1@<X8>)
{
  return AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier.value.getter(a1);
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityDetachedPropertyWriterModifier()
{
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertyInput and conformance AccessibilityPropertyInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier and conformance AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier and conformance AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier and conformance AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier and conformance AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityDetachedPropertyModifier.InitialProperty()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityDetachedPropertyModifier.MergedProperties()
{
  return __swift_instantiateGenericMetadata();
}

void *type metadata accessor for AccessibilityDetachedPropertyWriterModifier.MakeAttachmentModifier()
{
  return &unk_1ED465348;
}

void *type metadata accessor for AccessibilityPropertyInput()
{
  return &unk_1ED44A100;
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityDetachedPropertyModifier<A>.InitialProperty()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityDetachedPropertyModifier<A>.MergedProperties()
{
  return swift_getWitnessTable();
}

void protocol witness for PlatformListViewBase.updateViewGraphForDisplay(_:sizeThatFitsCallback:) in conformance ListTableViewHeaderFooter(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void PlatformListViewBase<>.updateViewGraphForDisplay(_:sizeThatFitsCallback:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void PlatformListViewBase.accessibilityNodes.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (*(uint64_t (**)(void))(a2 + 56))();
  if (!v2) {
    return;
  }
  uint64_t v3 = (void *)v2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for ModifiedContent();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _UIHostingView();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v6 = ViewRendererHost.accessibilityNodes.getter(v4, WitnessTable);

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_4;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_9;
  }
LABEL_4:
  if ((v6 & 0xC000000000000001) != 0)
  {
    id v7 = (id)MEMORY[0x18C117680](0, v6);
    goto LABEL_7;
  }
  if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v7 = *(id *)(v6 + 32);
LABEL_7:
    int v8 = v7;
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_bridgeObjectRetain();

    return;
  }
  __break(1u);
}

void implicit closure #3 in PlatformListViewBase<>.hostPreferredLayoutAttributes(fitting:insets:)(void *a1@<X0>, BOOL *a2@<X8>)
{
  id v3 = objc_msgSend(a1, sel_traitCollection);
  id v4 = objc_msgSend(v3, sel_layoutDirection);

  *a2 = v4 == (id)1;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGSize) -> ()(double *a1, double *a2, uint64_t (*a3)(double, double, double, double))
{
  return a3(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_188173198()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _sSo6CGSizeVABIegyy_A2BIegnn_TRTA_0(double *a1, double *a2)
{
  return (*(uint64_t (**)(double, double, double, double))(v2 + 16))(*a1, a1[1], *a2, a2[1]);
}

void partial apply for implicit closure #3 in PlatformListViewBase<>.hostPreferredLayoutAttributes(fitting:insets:)(BOOL *a1@<X8>)
{
  implicit closure #3 in PlatformListViewBase<>.hostPreferredLayoutAttributes(fitting:insets:)(*(void **)(v1 + 32), a1);
}

uint64_t EditButton.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  return result;
}

void type metadata accessor for ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_5(255, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for _AnimationModifier<EditMode>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>);
    }
  }
}

void type metadata accessor for _AnimationModifier<EditMode>()
{
  if (!lazy cache variable for type metadata for _AnimationModifier<EditMode>)
  {
    lazy protocol witness table accessor for type EditMode and conformance EditMode();
    unint64_t v0 = type metadata accessor for _AnimationModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnimationModifier<EditMode>);
    }
  }
}

uint64_t closure #1 in EditButton.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = a3 >> 8;
  unsigned int v7 = (a3 >> 8) & 1;
  outlined copy of Environment<Binding<EditMode>?>.Content(a1, a2, a3, BYTE1(a3) & 1);
  specialized Environment.wrappedValue.getter(a1, a2, a3 | ((v6 & 1) << 8), (uint64_t)&v12);
  uint64_t result = outlined consume of Environment<Binding<Visibility>?>.Content(a1, a2, a3, v7);
  uint64_t v9 = v13;
  if (v13)
  {
    uint64_t v10 = v12;
    uint64_t v11 = static Animation.easeIn(duration:)();
    MEMORY[0x1F4188790](v11);
    withAnimation<A>(_:_:)();
    outlined consume of Binding<NavigationSplitViewColumn>?(v10, v9);
    return swift_release();
  }
  return result;
}

uint64_t sub_188173448()
{
  outlined consume of Environment<Binding<Visibility>?>.Content(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(unsigned char *)(v0 + 33));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EditButton.body.getter()
{
  return closure #1 in EditButton.body.getter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32) | (*(unsigned __int8 *)(v0 + 33) << 8));
}

uint64_t outlined destroy of Button<Text>(uint64_t a1)
{
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t associated type witness table accessor for View.Body : View in EditButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in closure #1 in EditButton.body.getter()
{
  type metadata accessor for Binding<EditMode>();
  MEMORY[0x18C113DA0](&v1);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance EditButton()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t initializeBufferWithCopyOfBuffer for EditButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<Binding<EditMode>?>.Content(*(void *)a2, v4, v6, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = v5;
  return a1;
}

uint64_t assignWithCopy for EditButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<Binding<EditMode>?>.Content(*(void *)a2, v4, v6, v5);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 17);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = v5;
  outlined consume of Environment<Binding<Visibility>?>.Content(v7, v8, v10, v9);
  return a1;
}

ValueMetadata *type metadata accessor for EditButton()
{
  return &type metadata for EditButton;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<Text>, _AnimationModifier<EditMode>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, _AnimationModifier<EditMode>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, _AnimationModifier<EditMode>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<Text>, _AnimationModifier<EditMode>>();
    lazy protocol witness table accessor for type Button<Text> and conformance Button<A>();
    lazy protocol witness table accessor for type _AnimationModifier<EditMode> and conformance _AnimationModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, _AnimationModifier<EditMode>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnimationModifier<EditMode> and conformance _AnimationModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _AnimationModifier<EditMode> and conformance _AnimationModifier<A>;
  if (!lazy protocol witness table cache variable for type _AnimationModifier<EditMode> and conformance _AnimationModifier<A>)
  {
    type metadata accessor for _AnimationModifier<EditMode>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnimationModifier<EditMode> and conformance _AnimationModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in EditButton.body.getter()
{
  return closure #1 in closure #1 in EditButton.body.getter();
}

void SystemShadowStyleMetrics.Separated.color.getter()
{
}

void SystemShadowStyleMetrics.Separated.color.setter()
{
}

void sub_1881738FC(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void sub_188173918(id *a1)
{
  id v1 = *a1;
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t _IgnoredByLayoutEffect.base.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _IgnoredByLayoutEffect.base.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_IgnoredByLayoutEffect.base.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _IgnoredByLayoutEffect._affectsLayout.getter()
{
  return 0;
}

uint64_t _IgnoredByLayoutEffect.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

__n128 _IgnoredByLayoutEffect.effectValue(size:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr, void))(*(void *)(a1 + 24) + 24))(v5, *(void *)(a1 + 16));
  long long v3 = v5[3];
  *(_OWORD *)(a2 + 32) = v5[2];
  *(_OWORD *)(a2 + 48) = v3;
  *(void *)(a2 + 64) = v6;
  __n128 result = (__n128)v5[1];
  *(_OWORD *)a2 = v5[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t _IgnoredByLayoutEffect.animatableData.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 24) + 8) + 24))(*(void *)(a1 + 16));
}

uint64_t _IgnoredByLayoutEffect.animatableData.setter(uint64_t a1, uint64_t a2)
{
  specialized _IgnoredByLayoutEffect.animatableData.setter(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v4(a1, AssociatedTypeWitness);
}

void (*_IgnoredByLayoutEffect.animatableData.modify(void *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  char v5 = malloc(0x30uLL);
  *a1 = v5;
  *char v5 = a2;
  v5[1] = v2;
  uint64_t v7 = a2 + 16;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(*(void *)(v7 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  v5[3] = v10;
  size_t v11 = *(void *)(v10 + 64);
  _OWORD v5[4] = malloc(v11);
  v5[5] = malloc(v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v6, v8);
  return _IgnoredByLayoutEffect.animatableData.modify;
}

void _IgnoredByLayoutEffect.animatableData.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  long long v3 = (void *)(*a1)[4];
  uint64_t v4 = (void *)(*a1)[5];
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = (*a1)[3];
  uint64_t v7 = **a1;
  if (a2)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    specialized _IgnoredByLayoutEffect.animatableData.setter((uint64_t)v3, v7);
    uint64_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized _IgnoredByLayoutEffect.animatableData.setter((*a1)[5], v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

__n128 protocol witness for GeometryEffect.effectValue(size:) in conformance _IgnoredByLayoutEffect<A>@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _IgnoredByLayoutEffect.effectValue(size:)(a1, (uint64_t)v5);
  long long v3 = v5[3];
  *(_OWORD *)(a2 + 32) = v5[2];
  *(_OWORD *)(a2 + 48) = v3;
  *(void *)(a2 + 64) = v6;
  __n128 result = (__n128)v5[1];
  *(_OWORD *)a2 = v5[0];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _IgnoredByLayoutEffect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE3B0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _IgnoredByLayoutEffect<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _IgnoredByLayoutEffect<A>()
{
  return static GeometryEffect._viewListCount(inputs:body:)();
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance _IgnoredByLayoutEffect<A>(uint64_t a1, uint64_t a2)
{
  specialized _IgnoredByLayoutEffect.animatableData.setter(a1, a2);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v4(a1, AssociatedTypeWitness);
}

void (*protocol witness for Animatable.animatableData.modify in conformance _IgnoredByLayoutEffect<A>(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = v2;
  v5[1] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[2] = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  _OWORD v5[4] = malloc(v8);
  v5[5] = malloc(v8);
  _IgnoredByLayoutEffect.animatableData.getter(a2);
  return protocol witness for Animatable.animatableData.modify in conformance _IgnoredByLayoutEffect<A>;
}

void protocol witness for Animatable.animatableData.modify in conformance _IgnoredByLayoutEffect<A>(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  long long v3 = *(void **)(*(void *)a1 + 32);
  uint64_t v4 = *(void **)(*(void *)a1 + 40);
  uint64_t v5 = *(void *)(*(void *)a1 + 16);
  uint64_t v6 = *(void *)(*(void *)a1 + 24);
  uint64_t v7 = *(void *)(*(void *)a1 + 8);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 32), v4, v5);
    specialized _IgnoredByLayoutEffect.animatableData.setter((uint64_t)v3, v7);
    size_t v8 = *(void (**)(void *, uint64_t))(v6 + 8);
    v8(v3, v5);
    v8(v4, v5);
  }
  else
  {
    specialized _IgnoredByLayoutEffect.animatableData.setter(*(void *)(*(void *)a1 + 40), v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t static _IgnoredByLayoutEffect<>.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> _IgnoredByLayoutEffect<A>()
{
  return static _IgnoredByLayoutEffect<>.== infix(_:_:)();
}

uint64_t GeometryEffect.ignoredByLayout()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v7, a1);
}

uint64_t specialized _IgnoredByLayoutEffect.animatableData.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  size_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v11 - v7, a1, v6);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 32))(v8, v3, v4);
}

uint64_t instantiation function for generic protocol witness table for _IgnoredByLayoutEffect<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in _IgnoredByLayoutEffect<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_1881743C4()
{
  uint64_t v0 = type metadata accessor for _IgnoredByLayoutEffect();
  return _IgnoredByLayoutEffect.animatableData.getter(v0);
}

uint64_t sub_188174400(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _IgnoredByLayoutEffect();
  return specialized _IgnoredByLayoutEffect.animatableData.setter(a1, v2);
}

uint64_t sub_188174440()
{
  return 16;
}

__n128 sub_18817444C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t getEnumTagSinglePayload for _IgnoredByLayoutEffect(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _IgnoredByLayoutEffect(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881747CCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for _IgnoredByLayoutEffect()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for ShadowListUpdateRecorder(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188174960);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ShadowListUpdateRecorder(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x188174B64);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for ListDiffable.RowIDs : BidirectionalCollection in ShadowListUpdateRecorder<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs : BidirectionalCollection in ShadowListUpdateRecorder<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ListDiffable.RowIDs.Sequence.Element : Hashable in ShadowListUpdateRecorder<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for ListDiffable.SectionIDs.Sequence.Element : Hashable in ShadowListUpdateRecorder<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t ShadowListUpdateRecorder.withBase(do:)(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v3, v5, v7);
  a1(v9);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 24))(v3, v9, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

Swift::Void __swiftcall ShadowListUpdateRecorder.clearUpdates()()
{
}

uint64_t ShadowListUpdateRecorder.recordUpdate(_:)(uint64_t a1)
{
  v7[0] = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  v7[2] = AssociatedTypeWitness;
  v7[3] = swift_getAssociatedTypeWitness();
  v7[4] = swift_getAssociatedConformanceWitness();
  v7[5] = swift_getAssociatedConformanceWitness();
  uint64_t v2 = type metadata accessor for ListUpdate();
  double v3 = MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, void, uint64_t, double))(v5 + 16))((char *)v7 - v4, v7[0], v2, v3);
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t ListUpdate.inverse.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v43 = *(void *)(a1 + 24);
  uint64_t v44 = a2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v35 - v10;
  uint64_t v12 = *(void *)(a1 - 8);
  double v14 = MEMORY[0x1F4188790](v13);
  int v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v17 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v17(v16, v3, a1, v14);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t v19 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v20 = &v16[v19];
      uint64_t v21 = v44;
      uint64_t v22 = *(void (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32);
      v22(v44 + v19, v16, v5);
      v22(v21, v20, v5);
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    case 3u:
    case 4u:
      uint64_t v23 = &v16[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v24 = v44;
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v44, v16, v5);
      (*(void (**)(uint64_t, char *))(*(void *)(v43 - 8) + 32))(v24 + *(int *)(TupleTypeMetadata2 + 48), v23);
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    case 5u:
      uint64_t v25 = swift_getTupleTypeMetadata2();
      int v39 = &v16[*(int *)(v25 + 48)];
      uint64_t v40 = v25;
      uint64_t v26 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v27 = &v11[v26];
      char v41 = &v11[v26];
      uint64_t v37 = &v16[v26];
      uint64_t v28 = *(void *)(v5 - 8);
      long long v38 = *(void (**)(void))(v28 + 32);
      uint64_t v42 = v28 + 32;
      ((void (*)(char *, char *, uint64_t))v38)(v11, v16, v5);
      uint64_t v29 = v43;
      v30 = *(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32);
      v30(v27, v37, v43);
      uint64_t v31 = *(int *)(TupleTypeMetadata2 + 48);
      v32 = &v8[v31];
      uint64_t v33 = v38;
      long long v36 = &v39[v31];
      uint64_t v37 = &v8[v31];
      ((void (*)(char *))v38)(v8);
      v30(v32, v36, v29);
      uint64_t v40 = v44 + *(int *)(v40 + 48);
      int v39 = (char *)(v44 + *(int *)(TupleTypeMetadata2 + 48));
      ((void (*)(uint64_t, char *, uint64_t))v33)(v44, v8, v5);
      v30(v39, v37, v29);
      uint64_t v34 = v40 + *(int *)(TupleTypeMetadata2 + 48);
      v33();
      v30((char *)v34, v41, v29);
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    case 6u:
      ((void (*)(uint64_t, uint64_t, uint64_t))v17)(v44, v3, a1);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, a1);
      break;
    default:
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v5 - 8) + 32))(v44, v16, v5);
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in ShadowSectionCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ShadowSectionCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t ShadowRowCollection.index(before:)@<X0>(uint64_t a1@<X8>)
{
  v7[1] = a1;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v4 = (char *)v7 - v3;
  swift_checkMetadataState();
  dispatch thunk of Collection.startIndex.getter();
  swift_getAssociatedConformanceWitness();
  char v5 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, AssociatedTypeWitness);
  if (v5) {
    return dispatch thunk of Collection.startIndex.getter();
  }
  else {
    return dispatch thunk of BidirectionalCollection.index(before:)();
  }
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowRowCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowRowCollection<A>(a1, a2, a3, (uint64_t)&associated type descriptor for ListDiffable.RowIDs, (uint64_t)&associated conformance descriptor for ListDiffable.ListDiffable.RowIDs: BidirectionalCollection, (void (*)(uint64_t, uint64_t, double))ShadowRowCollection.index(before:));
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance ShadowRowCollection<A>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance ShadowRowCollection<A>(a1);
}

{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance ShadowRowCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836E8](a1, a2, a3, a4, WitnessTable);
}

void protocol witness for Collection.distance(from:to:) in conformance ShadowRowCollection<A>()
{
  swift_getWitnessTable();

  JUMPOUT(0x18C1155A0);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ShadowRowCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance ShadowRowCollection<A>(a1, (void (*)(uint64_t))ShadowRowCollection.startIndex.getter, a2);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ShadowRowCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ShadowRowCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t ShadowSectionCollection.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a1;
  uint64_t v21 = a3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v5 = *(void *)(AssociatedConformanceWitness + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v16 - v12;
  uint64_t v18 = v3;
  double v14 = *(void (**)(uint64_t, uint64_t, double))(v3 + 56);
  v14(v4, v3, v11);
  dispatch thunk of Collection.startIndex.getter();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v13, v9);
  uint64_t v16 = v5;
  swift_getAssociatedConformanceWitness();
  LOBYTE(v5) = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v8, AssociatedTypeWitness);
  ((void (*)(uint64_t, uint64_t))v14)(v4, v18);
  if (v5) {
    dispatch thunk of Collection.startIndex.getter();
  }
  else {
    dispatch thunk of BidirectionalCollection.index(before:)();
  }
  return ((uint64_t (*)(char *, uint64_t))v19)(v13, v9);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowRowCollection<A>(a1, a2, a3, (uint64_t)&associated type descriptor for ListDiffable.SectionIDs, (uint64_t)&associated conformance descriptor for ListDiffable.ListDiffable.SectionIDs: BidirectionalCollection, (void (*)(uint64_t, uint64_t, double))ShadowSectionCollection.index(before:));
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance ShadowSectionCollection<A>@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance ShadowRowCollection<A>(a1);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance ShadowSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41836E8](a1, a2, a3, a4, WitnessTable);
}

void protocol witness for Collection.distance(from:to:) in conformance ShadowSectionCollection<A>()
{
  swift_getWitnessTable();

  JUMPOUT(0x18C1155A0);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ShadowSectionCollection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Sequence.makeIterator() in conformance ShadowRowCollection<A>(a1, (void (*)(uint64_t))ShadowSectionCollection.startIndex.getter, a2);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ShadowSectionCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ShadowSectionCollection<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in ShadowRowCollection<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_188176194()
{
  return 16;
}

__n128 sub_1881761A0(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ShadowRowCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v26 = *(void *)(v4 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = AssociatedTypeWitness;
  int v6 = *(_DWORD *)(v27 + 80);
  unint64_t v24 = ((((v26 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v6 + 8;
  uint64_t v7 = *(void *)(v27 + 64);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v25 = v7;
  uint64_t v11 = *(void *)(v9 + 64) + 7;
  unsigned int v12 = v10 | *(_DWORD *)(v4 + 80) & 0xF8 | v6;
  if (v12 > 7
    || ((*(_DWORD *)(v9 + 80) | v6 | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || ((v11 + ((v7 + (v24 & ~(unint64_t)v6) + v10) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v16 = (uint64_t *)(v15 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v23 = v8;
    uint64_t v16 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v3);
    int v17 = (void *)(((unint64_t)a1 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = (void *)(((unint64_t)a2 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
    *int v17 = *v18;
    *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v19 = ((unint64_t)a1 + v24) & ~(unint64_t)v6;
    unint64_t v20 = ((unint64_t)a2 + v24) & ~(unint64_t)v6;
    uint64_t v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v27 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21(v19, v20, v28);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((v19 + v25 + v10) & ~v10, (v20 + v25 + v10) & ~v10, v23);
    *(void *)((v11 + ((v19 + v25 + v10) & ~v10)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v11
                                                                                        + ((v20 + v25 + v10) & ~v10)) & 0xFFFFFFFFFFFFFFF8);
  }
  return v16;
}

uint64_t assignWithCopy for ShadowRowCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v12 + 8;
  unint64_t v14 = (v13 + a1) & ~v12;
  unint64_t v15 = (v13 + a2) & ~v12;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24))(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = *(void *)(v11 + 40);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = v18 + 24;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  unint64_t v21 = (v16 + v20 + v14) & ~v20;
  unint64_t v22 = (v16 + v20 + v15) & ~v20;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 24))(v21, v22, v17);
  *(void *)((*(void *)(v19 + 40) + 7 + v21) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v19 + 40)
                                                                                       + 7
                                                                                       + v22) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for ShadowRowCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = ((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = v11 + 32;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v9 + v13 + 8;
  uint64_t v15 = (v14 + a1) & ~v13;
  uint64_t v16 = (v14 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v15, v16, AssociatedTypeWitness);
  uint64_t v17 = *(void *)(v12 + 32);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = v19 + 32;
  uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = (v17 + v21 + v15) & ~v21;
  uint64_t v23 = (v17 + v21 + v16) & ~v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v22, v23, v18);
  *(void *)((*(void *)(v20 + 32) + 7 + v22) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v20 + 32)
                                                                                       + 7
                                                                                       + v23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ShadowRowCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = v10 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  unint64_t v13 = (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v12 + 8;
  unint64_t v14 = (v13 + a1) & ~v12;
  unint64_t v15 = (v13 + a2) & ~v12;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 40))(v14, v15, AssociatedTypeWitness);
  uint64_t v16 = *(void *)(v11 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = v18 + 40;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  unint64_t v21 = (v16 + v20 + v14) & ~v20;
  unint64_t v22 = (v16 + v20 + v15) & ~v20;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 40))(v21, v22, v17);
  *(void *)((*(void *)(v19 + 24) + 7 + v21) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v19 + 24)
                                                                                       + 7
                                                                                       + v22) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShadowRowCollection(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v33 = *(_DWORD *)(v4 + 84);
  if (v33 <= 0x7FFFFFFF) {
    unsigned int v5 = 0x7FFFFFFF;
  }
  else {
    unsigned int v5 = *(_DWORD *)(v4 + 84);
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v32 = *(_DWORD *)(v6 + 84);
  if (v32 <= v5) {
    unsigned int v7 = v5;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (*(_DWORD *)(v9 + 84) <= v7) {
    unsigned int v13 = v7;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  unint64_t v14 = ((((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v11 + 8;
  uint64_t v15 = *(void *)(v6 + 64) + v12;
  if (v13 < a2)
  {
    unint64_t v16 = ((*(void *)(*(void *)(v8 - 8) + 64) + ((v15 + (v14 & ~v11)) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v17 = v16 & 0xFFFFFFF8;
    if ((v16 & 0xFFFFFFF8) != 0) {
      unsigned int v18 = 2;
    }
    else {
      unsigned int v18 = a2 - v13 + 1;
    }
    if (v18 >= 0x10000) {
      unsigned int v19 = 4;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v18 < 0x100) {
      unsigned int v19 = 1;
    }
    if (v18 >= 2) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    switch(v20)
    {
      case 1:
        int v21 = *((unsigned __int8 *)a1 + v16);
        if (!v21) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v21 = *(unsigned __int16 *)((char *)a1 + v16);
        if (v21) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188176EE0);
      case 4:
        int v21 = *(int *)((char *)a1 + v16);
        if (!v21) {
          break;
        }
LABEL_28:
        int v23 = v21 - 1;
        if (v17)
        {
          int v23 = 0;
          int v24 = *a1;
        }
        else
        {
          int v24 = 0;
        }
        return v13 + (v24 | v23) + 1;
      default:
        break;
    }
  }
  if (v5 == v13)
  {
    if (v33 < 0x7FFFFFFF)
    {
      unint64_t v28 = *(void *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
      if (v28 >= 0xFFFFFFFF) {
        LODWORD(v28) = -1;
      }
      return (v28 + 1);
    }
    else
    {
      uint64_t v25 = *(uint64_t (**)(int *))(v4 + 48);
      return v25(a1);
    }
  }
  else
  {
    unint64_t v26 = ((unint64_t)a1 + v14) & ~v11;
    if (v32 == v13)
    {
      uint64_t v27 = *(uint64_t (**)(unint64_t, void, uint64_t))(v6 + 48);
      return v27(v26, v32, AssociatedTypeWitness);
    }
    else
    {
      unint64_t v29 = (v15 + v26) & ~v12;
      v30 = *(uint64_t (**)(unint64_t))(v9 + 48);
      return v30(v29);
    }
  }
}

void storeEnumTagSinglePayload for ShadowRowCollection(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v29 = v5;
  unsigned int v31 = *(_DWORD *)(v5 + 84);
  if (v31 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v30 = *(_DWORD *)(v7 + 84);
  if (v30 <= v6) {
    unsigned int v8 = v6;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v7 + 84);
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  if (*(_DWORD *)(v9 + 84) <= v8) {
    unsigned int v11 = v8;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v12 = *(void *)(v5 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v14 = ((((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v13 + 8;
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = *(void *)(v7 + 64) + v15;
  size_t v17 = ((*(void *)(v9 + 64) + ((v16 + (v14 & ~v13)) & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v11 >= a3)
  {
    int v20 = 0;
  }
  else
  {
    if (((*(_DWORD *)(v9 + 64) + ((v16 + (v14 & ~v13)) & ~v15) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v18 = a3 - v11 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
  }
  if (a2 > v11)
  {
    if (v17) {
      int v21 = 1;
    }
    else {
      int v21 = a2 - v11;
    }
    if (v17)
    {
      int v22 = ~v11 + a2;
      bzero(a1, v17);
      *a1 = v22;
    }
    switch(v20)
    {
      case 1:
        *((unsigned char *)a1 + v17) = v21;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v17) = v21;
        return;
      case 3:
        goto LABEL_56;
      case 4:
        *(_DWORD *)((char *)a1 + v17) = v21;
        return;
      default:
        return;
    }
  }
  uint64_t v23 = ~v13;
  switch(v20)
  {
    case 1:
      *((unsigned char *)a1 + v17) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_38;
    case 2:
      *(_WORD *)((char *)a1 + v17) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_38;
    case 3:
LABEL_56:
      __break(1u);
      JUMPOUT(0x188177300);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = 0;
      goto LABEL_37;
    default:
LABEL_37:
      if (!a2) {
        return;
      }
LABEL_38:
      if (v6 == v11)
      {
        if (v31 < 0x7FFFFFFF)
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v26 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v26 = a2 - 1;
          }
          *(void *)(((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) = v26;
          return;
        }
        int v24 = *(void (**)(_DWORD *))(v29 + 56);
        uint64_t v25 = a1;
        goto LABEL_43;
      }
      uint64_t v25 = (_DWORD *)(((unint64_t)a1 + v14) & v23);
      if (v30 == v11)
      {
        int v24 = *(void (**)(_DWORD *))(v7 + 56);
LABEL_43:
        v24(v25);
        return;
      }
      unint64_t v27 = ((unint64_t)v25 + v16) & ~v15;
      unint64_t v28 = *(void (**)(unint64_t))(v10 + 56);
      v28(v27);
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for ShadowSectionCollection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = (((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  int v8 = *(_DWORD *)(v5 + 80);
  if ((v8 & 0x1000F8) != 0 || ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v10 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unint64_t v11 = v7 + 8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v12 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v13;
    *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    *(void *)(((unint64_t)v4 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t assignWithCopy for ShadowSectionCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((a1 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((a2 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for ShadowSectionCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(void *)((a1 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((a2 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ShadowSectionCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  *(void *)((a1 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((a2 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShadowSectionCollection(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x188177838);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ShadowSectionCollection(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              int v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              *int v19 = v20;
            }
            else
            {
              unsigned int v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((v9 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x188177A44);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for HostingControllerAllowedBehaviors()
{
  return &type metadata for HostingControllerAllowedBehaviors;
}

uint64_t assignWithCopy for HostingControllerOverrides(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((unsigned __int8 *)a2 + 8);
  if (*(unsigned char *)(a1 + 8) != 2)
  {
    if (v4 == 2)
    {
      outlined destroy of PushTarget(a1);
      long long v6 = *(long long *)((char *)a2 + 9);
      *(_OWORD *)a1 = *a2;
      *(_OWORD *)(a1 + 9) = v6;
      goto LABEL_9;
    }
    swift_unknownObjectWeakCopyAssign();
LABEL_8:
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v7 = *((void *)a2 + 2);
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(void *)(a1 + 16) = v7;
    goto LABEL_9;
  }
  if (v4 != 2)
  {
    swift_unknownObjectWeakCopyInit();
    goto LABEL_8;
  }
  long long v5 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v5;
LABEL_9:
  swift_unknownObjectWeakCopyAssign();
  swift_unknownObjectWeakCopyAssign();
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for HostingControllerOverrides(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HostingControllerOverrides(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HostingControllerOverrides()
{
  return &type metadata for HostingControllerOverrides;
}

unint64_t lazy protocol witness table accessor for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors()
{
  unint64_t result = lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors;
  if (!lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors;
  if (!lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors;
  if (!lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors;
  if (!lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerAllowedBehaviors and conformance HostingControllerAllowedBehaviors);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HostingControllerBridges and conformance HostingControllerBridges()
{
  unint64_t result = lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges;
  if (!lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges;
  if (!lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges;
  if (!lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges;
  if (!lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HostingControllerBridges and conformance HostingControllerBridges);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UpdateEnvironmentToAllowedBehaviors(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance UpdateEnvironmentToAllowedBehaviors()
{
}

unint64_t HostingControllerOverrides.debugDescription.getter()
{
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v1 = MEMORY[0x18C119DF0](v0 + 32);
  if (v1)
  {
    uint64_t v3 = (void *)v1;
    unint64_t v13 = v1;
    closure #1 in HostingControllerOverrides.debugDescription.getter((uint64_t)&v13, &v15, v2, 7758190, 0xE300000000000000);
  }
  uint64_t v4 = MEMORY[0x18C119DF0](v0 + 40);
  if (v4)
  {
    long long v6 = (void *)v4;
    unint64_t v13 = v4;
    closure #1 in HostingControllerOverrides.debugDescription.getter((uint64_t)&v13, &v15, v5, 0x74696C7073, 0xE500000000000000);
  }
  unint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  unint64_t v13 = 0xD00000000000001DLL;
  unint64_t v14 = 0x8000000188341040;
  type metadata accessor for (String, String)();
  uint64_t v8 = v7;
  uint64_t v9 = swift_bridgeObjectRetain();
  v10._countAndFlagsBits = MEMORY[0x18C115B70](v9, v8);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t closure #1 in HostingControllerOverrides.debugDescription.getter(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _print_unlocked<A, B>(_:_:)();
  uint64_t v8 = (void *)*a2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *a2 = (uint64_t)v8;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    uint64_t v8 = (void *)result;
    *a2 = result;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    uint64_t v8 = (void *)result;
    *a2 = result;
  }
  v8[2] = v11 + 1;
  unsigned int v12 = &v8[4 * v11];
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = 0;
  v12[7] = v13;
  return result;
}

void type metadata accessor for (String, String)()
{
  if (!lazy cache variable for type metadata for (String, String))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, String));
    }
  }
}

void type metadata accessor for (PushTarget?, PushTarget?)()
{
  if (!lazy cache variable for type metadata for (PushTarget?, PushTarget?))
  {
    type metadata accessor for PushTarget?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (PushTarget?, PushTarget?));
    }
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.ManagedBridgesKey()
{
  return &type metadata for EnvironmentValues.ManagedBridgesKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.SuppliedBridgesKey()
{
  return &type metadata for EnvironmentValues.SuppliedBridgesKey;
}

_UNKNOWN **base witness table accessor for ViewModifier in UpdateEnvironmentToAllowedBehaviors()
{
  return &protocol witness table for UpdateEnvironmentToAllowedBehaviors;
}

void LinearGaugeStyle.init()()
{
}

void ComplicationLinearGaugeStyle.init()(void *a1@<X8>)
{
  *a1 = 0;
}

void LinearGaugeStyle.init(tint:)()
{
}

{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void LinearGaugeStyle.makeBody(configuration:)()
{
}

uint64_t ComplicationLinearGaugeStyle.init(tint:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

double ComplicationLinearGaugeStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  char v4 = *(unsigned char *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 9);
  char v6 = *(unsigned char *)(a1 + 10);
  uint64_t v7 = *v2;
  uint64_t v15 = *(void *)a1;
  char v16 = v4;
  char v17 = v5;
  char v18 = v6;
  swift_bridgeObjectRetain();
  AccessoryLinearGauge.init(configuration:gradient:)(&v15, v7, (uint64_t)v19);
  long long v8 = v19[11];
  a2[10] = v19[10];
  a2[11] = v8;
  a2[12] = v20[0];
  *(_OWORD *)((char *)a2 + 201) = *(_OWORD *)((char *)v20 + 9);
  long long v9 = v19[7];
  a2[6] = v19[6];
  a2[7] = v9;
  long long v10 = v19[9];
  a2[8] = v19[8];
  a2[9] = v10;
  long long v11 = v19[3];
  a2[2] = v19[2];
  a2[3] = v11;
  long long v12 = v19[5];
  a2[4] = v19[4];
  a2[5] = v12;
  double result = *(double *)v19;
  long long v14 = v19[1];
  *a2 = v19[0];
  a2[1] = v14;
  return result;
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in LinearGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in ComplicationLinearGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

double protocol witness for GaugeStyle.makeBody(configuration:) in conformance ComplicationLinearGaugeStyle@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  char v4 = *(unsigned char *)(a1 + 8);
  char v5 = *(unsigned char *)(a1 + 9);
  char v6 = *(unsigned char *)(a1 + 10);
  uint64_t v7 = *v2;
  uint64_t v15 = *(void *)a1;
  char v16 = v4;
  char v17 = v5;
  char v18 = v6;
  swift_bridgeObjectRetain();
  AccessoryLinearGauge.init(configuration:gradient:)(&v15, v7, (uint64_t)v19);
  long long v8 = v19[11];
  a2[10] = v19[10];
  a2[11] = v8;
  a2[12] = v20[0];
  *(_OWORD *)((char *)a2 + 201) = *(_OWORD *)((char *)v20 + 9);
  long long v9 = v19[7];
  a2[6] = v19[6];
  a2[7] = v9;
  long long v10 = v19[9];
  a2[8] = v19[8];
  a2[9] = v10;
  long long v11 = v19[3];
  a2[2] = v19[2];
  a2[3] = v11;
  long long v12 = v19[5];
  a2[4] = v19[4];
  a2[5] = v12;
  double result = *(double *)v19;
  long long v14 = v19[1];
  *a2 = v19[0];
  a2[1] = v14;
  return result;
}

ValueMetadata *type metadata accessor for LinearGaugeStyle()
{
  return &type metadata for LinearGaugeStyle;
}

ValueMetadata *type metadata accessor for ComplicationLinearGaugeStyle()
{
  return &type metadata for ComplicationLinearGaugeStyle;
}

void View.printRepresentation<A>(_:)()
{
}

uint64_t sub_1881784F0()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for PrintedViewModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for PrintedViewModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PrintedViewModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

_UNKNOWN **base witness table accessor for ViewModifier in PrintedViewModifier<A>()
{
  return &protocol witness table for PrintedViewModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PrintedViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3F8](a1, a2, a3, a4, a5, WitnessTable);
}

ValueMetadata *type metadata accessor for _EmptyScene()
{
  return &type metadata for _EmptyScene;
}

uint64_t initializeWithCopy for MultimodalNavigationStackViewHost(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  return a1;
}

void *assignWithCopy for MultimodalNavigationStackViewHost(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for MultimodalNavigationStackViewHost(_OWORD *a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_release();
  return a1;
}

uint64_t type metadata accessor for MultimodalNavigationStackViewHost()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MultimodalNavigationStack.rootView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  outlined init with copy of NavigationAuthority(v1 + 80, (uint64_t)v21);
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of NavigationAuthority((uint64_t)v21);
  if (Strong
    && (swift_beginAccess(),
        _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1(Strong + 16, (uint64_t)__dst, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), outlined retain of NavigationState?((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined copy of NavigationState?), swift_release(), _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)__dst, (uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for NavigationState?, (uint64_t)&type metadata for NavigationState), getEnumTag for AccessibilityActionCategory.Category((uint64_t)__src) != 1))
  {
    Swift::UInt v6 = *(void *)(v2 + 56);
    Swift::UInt v7 = *(void *)(v2 + 72);
    unsigned __int8 v8 = *(unsigned char *)(v2 + 64);
    v28[6] = *(_OWORD *)&__src[96];
    v28[7] = *(_OWORD *)&__src[112];
    v28[8] = *(_OWORD *)&__src[128];
    __int16 v29 = *(_WORD *)&__src[144];
    v28[2] = *(_OWORD *)&__src[32];
    v28[3] = *(_OWORD *)&__src[48];
    v28[4] = *(_OWORD *)&__src[64];
    v28[5] = *(_OWORD *)&__src[80];
    v28[0] = *(_OWORD *)__src;
    v28[1] = *(_OWORD *)&__src[16];
    NavigationState.stackContent(for:)(v6, v8, v7, (uint64_t)v27);
    outlined retain of NavigationState?((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))outlined consume of NavigationState?);
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v27, (uint64_t)v26, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
    unsigned int v5 = v26;
  }
  else
  {
    _s7SwiftUI15NavigationStateV12StackContentVSgWOi0_((uint64_t)v27);
    unsigned int v5 = v27;
  }
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v5, (uint64_t)v28, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  outlined init with copy of MultimodalNavigationStack(v2, (uint64_t)v21);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v28, (uint64_t)v26, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  if (_s7SwiftUI15NavigationStateV12StackContentVSgWOgTm((uint64_t)v26) == 1)
  {
    uint64_t v9 = v22;
    int v10 = v23;
    uint64_t v11 = v24;
    outlined destroy of MultimodalNavigationStack((uint64_t)v21);
    __dst[0] = v9;
    if (v10 == 4) {
      char v12 = 0;
    }
    else {
      char v12 = v10;
    }
    LOBYTE(__dst[1]) = v12;
    __dst[2] = v11;
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOi_(__dst);
    outlined init with take of NavigationState.Base(__dst, __src);
  }
  else
  {
    outlined destroy of MultimodalNavigationStack((uint64_t)v21);
    _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1((uint64_t)v28, (uint64_t)__src, &lazy cache variable for type metadata for NavigationState.StackContent?, (uint64_t)&type metadata for NavigationState.StackContent);
  }
  memcpy(__dst, __src, sizeof(__dst));
  NavigationState.StackContent.count.getter();
  uint64_t v14 = v13;
  uint64_t v15 = static HorizontalAlignment.center.getter();
  outlined init with copy of _VariadicView_Children(v2, (uint64_t)&__dst[3]);
  __dst[0] = v15;
  __dst[1] = 0;
  LOBYTE(__dst[2]) = 1;
  uint64_t v16 = *(void *)(v2 + 112);
  char v17 = *(unsigned char *)(v2 + 120);
  outlined copy of Environment<Bool>.Content(v16, v17);
  double v18 = specialized Environment.wrappedValue.getter(v16, v17);
  outlined retain of NavigationState.StackContent((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationState.Base);
  outlined consume of Environment<Bool>.Content(v16, v17);
  outlined init with copy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>((uint64_t)__dst, a1, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
  *(double *)(a1 + 80) = v18;
  *(unsigned char *)(a1 + 88) = v14 == 1;
  return outlined destroy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>((uint64_t)__dst, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
}

uint64_t *closure #1 in MultimodalNavigationStack.body.getter@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *result;
  if (__OFADD__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    char v5 = *result + 1 == a2;
    type metadata accessor for NavigationState.StackContent?(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    return (uint64_t *)StackItemModifier.init(index:isTopItem:topItemBarTransitionProgress:)(v4, v5, v6, a3);
  }
  return result;
}

uint64_t StackItemModifier.init(index:isTopItem:topItemBarTransitionProgress:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  *(unsigned char *)(a4 + 8) = a2;
  long long v5 = a3[1];
  *(_OWORD *)(a4 + 16) = *a3;
  *(_OWORD *)(a4 + 32) = v5;
  *(_OWORD *)(a4 + 41) = *(_OWORD *)((char *)a3 + 25);
  *(void *)(a4 + 64) = 0;
  *(void *)(a4 + 72) = 0;
  *(void *)(a4 + 80) = 0;
  *(void *)(a4 + 88) = 1;
  *(void *)(a4 + 104) = 0;
  *(void *)(a4 + 112) = 0;
  *(void *)(a4 + 96) = 0;
  *(unsigned char *)(a4 + 120) = 0;
  *(void *)(a4 + 128) = 0;
  *(void *)(a4 + 136) = 0;
  *(unsigned char *)(a4 + 144) = 1;
  *(void *)(a4 + 152) = 0;
  *(void *)(a4 + 160) = 0;
  *(unsigned char *)(a4 + 168) = 1;
  *(void *)(a4 + 176) = 0;
  *(void *)(a4 + 184) = 0;
  *(unsigned char *)(a4 + 192) = 1;
  *(void *)(a4 + 200) = 0;
  *(unsigned char *)(a4 + 208) = 1;
  *(void *)(a4 + 216) = 0;
  *(void *)(a4 + 224) = swift_getKeyPath();
  *(unsigned char *)(a4 + 232) = 0;
  *(void *)(a4 + 240) = swift_getKeyPath();
  *(unsigned char *)(a4 + 248) = 0;
  *(void *)(a4 + 256) = swift_getKeyPath();
  *(unsigned char *)(a4 + 264) = 0;
  *(void *)(a4 + 272) = 0x403E000000000000;
  static Color.black.getter();
  uint64_t v6 = Color.opacity(_:)();
  uint64_t result = swift_release();
  *(void *)(a4 + 280) = v6;
  return result;
}

void protocol witness for Identifiable.id.getter in conformance StackItem(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance StackItem(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 8) == *(void *)(a2 + 8);
}

void closure #1 in RootItemModifier.body(content:)(uint64_t a1, uint64_t a2, double a3)
{
  specialized RootItemModifier.localizedApplicationName()();
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v6 = Text.init<A>(_:)();
  uint64_t v8 = v7;
  char v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = self;
  id v14 = objc_msgSend(self, sel_mainBundle);
  id v15 = objc_msgSend(v14, sel_bundleIdentifier);

  id v16 = objc_msgSend(v13, sel__applicationIconImageForBundleIdentifier_format_scale_, v15, 2, a3);
  if (v16)
  {
    type metadata accessor for ImageProviderBox<UIImage>();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v16;
    type metadata accessor for ImageProviderBox<Image.ResizableProvider>(0, &lazy cache variable for type metadata for ImageProviderBox<Image.ResizableProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.ResizableProvider and conformance Image.ResizableProvider, MEMORY[0x1E4F41518], MEMORY[0x1E4F3FCE0]);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v17;
    *(_OWORD *)(v18 + 24) = 0u;
    *(_OWORD *)(v18 + 40) = 0u;
    *(unsigned char *)(v18 + 56) = 1;
    if (one-time initialization token for clarityUINavigationAppIconShadow != -1) {
      swift_once();
    }
    if (one-time initialization token for navigationAppIconShadowRadius != -1) {
      swift_once();
    }
    if (one-time initialization token for navigationAppIconShadowOffset != -1) {
      swift_once();
    }
    uint64_t v19 = v10 & 1;
    _s7SwiftUI24ReadDestinationsModifier33_EA42A490FE48784768DCEF705CD04CF4LLVyAA018ResolvedNavigationD0VGMaTm_0(0, &lazy cache variable for type metadata for ModifiedContent<Image, _ShadowEffect>, MEMORY[0x1E4F41558], MEMORY[0x1E4F3F860], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<Image, _ShadowEffect> and conformance <> ModifiedContent<A, B>();
    swift_retain();
    uint64_t v20 = AnyView.init<A>(_:)();
    outlined consume of NavigationTitleStorage?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v19;
    *(void *)(a1 + 24) = v12;
    *(_OWORD *)(a1 + 32) = xmmword_1883B6DC0;
    *(void *)(a1 + 48) = v20;
    *(unsigned char *)(a1 + 56) = 3;
    swift_retain();
    outlined consume of Transaction?(1);
    *(void *)(a1 + 32) = a2;
  }
  else
  {
    __break(1u);
  }
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RootItemModifier(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RootItemModifier(a1, a2, a3, a4, a5, a6, MEMORY[0x1E4F3F670]);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance RootItemModifier@<X0>(void (**a1)(uint64_t a1, uint64_t a2)@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((unsigned char *)v1 + 8);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(unsigned char *)(result + 24) = v4;
  *a1 = partial apply for closure #1 in RootItemModifier.body(content:);
  a1[1] = (void (*)(uint64_t, uint64_t))result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance BarTransitionProgress(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  char v3 = *(unsigned char *)(a2 + 24);
  if (*(unsigned char *)(a1 + 8))
  {
    if (!*(unsigned char *)(a2 + 8)) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(unsigned char *)(a2 + 24)) {
      return 1;
    }
  }
  else
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16)) {
      char v3 = 1;
    }
    if ((v3 & 1) == 0) {
      return 1;
    }
  }
  return 0;
}

uint64_t StackItemModifier.body(content:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v3 = v2;
  memcpy(__dst, v1, sizeof(__dst));
  char v4 = __dst[1];
  uint64_t v5 = __dst[32];
  char v6 = __dst[33];
  outlined copy of Environment<Bool>.Content(__dst[32], __dst[33]);
  char v7 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Bool>.Content(v5, v6);
  closure #1 in StackItemModifier.body(content:)((uint64_t)__dst, (uint64_t)v32);
  if (one-time initialization token for clarityUIContentBackground != -1) {
    swift_once();
  }
  uint64_t v8 = Color.opacity(_:)();
  char v9 = static Edge.Set.all.getter();
  uint64_t v10 = __dst[0];
  if (__dst[0]) {
    uint64_t v11 = static AnyTransition.move(edge:)();
  }
  else {
    uint64_t v11 = static AnyTransition.identity.getter();
  }
  uint64_t v12 = v11;
  memcpy(&__src[6], v32, 0x161uLL);
  memcpy((char *)v24 + 2, __src, 0x167uLL);
  LOBYTE(v24[0]) = v4;
  BYTE1(v24[0]) = v7 & 1;
  v24[46] = v8;
  LOBYTE(v24[47]) = v9;
  v24[48] = v12;
  memcpy(v29, v24, sizeof(v29));
  double v30 = (double)v10;
  char v31 = v4;
  if (v4) {
    unint64_t v13 = (unint64_t)dword_1ED424F70 << 32;
  }
  else {
    unint64_t v13 = dword_1ED424F98 | ((unint64_t)dword_1ED424F98 << 32);
  }
  specialized View.accessibility<A>(_:_:isEnabled:)(v13, 1, v25);
  outlined release of ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>((uint64_t)v24);
  memcpy(v27, v25, 0x1A8uLL);
  uint64_t v14 = swift_allocObject();
  memcpy((void *)(v14 + 16), __dst, 0x120uLL);
  uint64_t v15 = swift_allocObject();
  memcpy((void *)(v15 + 16), __dst, 0x120uLL);
  v27[53] = partial apply for closure #2 in StackItemModifier.body(content:);
  v27[54] = v14;
  v27[55] = partial apply for closure #3 in StackItemModifier.body(content:);
  v27[56] = v15;
  v26[0] = *(_OWORD *)&__dst[23];
  v26[1] = *(_OWORD *)&__dst[25];
  *(void *)&v26[2] = __dst[27];
  outlined retain of StackItemModifier((uint64_t)__dst);
  outlined retain of StackItemModifier((uint64_t)__dst);
  type metadata accessor for NavigationState.StackContent?(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  uint64_t v16 = swift_allocObject();
  memcpy((void *)(v16 + 16), __dst, 0x120uLL);
  outlined retain of StackItemModifier((uint64_t)__dst);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type BarTransitionProgress and conformance BarTransitionProgress();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  memcpy(v21, v27, sizeof(v21));
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>((uint64_t)v21);
  memcpy(v20, v26, sizeof(v20));
  uint64_t v17 = swift_allocObject();
  memcpy((void *)(v17 + 16), __dst, 0x120uLL);
  outlined retain of StackItemModifier((uint64_t)__dst);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTrans(0);
  lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _Valu, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTrans, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTr);
  View.onChange<A>(of:initial:_:)();
  swift_release();
  memcpy(v22, v20, sizeof(v22));
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransitionPr((uint64_t)v22);
  uint64_t v18 = swift_allocObject();
  memcpy((void *)(v18 + 16), __dst, 0x120uLL);
  memcpy((void *)v3, v27, 0x250uLL);
  *(void *)(v3 + 592) = partial apply for closure #5 in StackItemModifier.body(content:);
  *(void *)(v3 + 600) = v18;
  *(_OWORD *)(v3 + 608) = 0u;
  return outlined retain of StackItemModifier((uint64_t)__dst);
}

__n128 closure #1 in StackItemModifier.body(content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = (__n128 *)(a2 + 296);
  uint64_t v38 = swift_allocObject();
  memcpy((void *)(v38 + 16), (const void *)a1, 0x120uLL);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v36 = *(void *)(a1 + 280);
  uint64_t v37 = KeyPath;
  uint64_t v6 = *(void *)(a1 + 272);
  outlined retain of StackItemModifier(a1);
  swift_retain();
  uint64_t v7 = static Alignment.center.getter();
  uint64_t v34 = v8;
  uint64_t v35 = v7;
  __n128 v39 = *(__n128 *)(a1 + 184);
  __n128 v40 = *(__n128 *)(a1 + 200);
  v41.n128_u64[0] = *(void *)(a1 + 216);
  type metadata accessor for NavigationState.StackContent?(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  long long v32 = v44;
  uint64_t v30 = v46;
  uint64_t v31 = v45;
  char v58 = 0;
  char v56 = BYTE8(v45);
  char v54 = BYTE8(v46);
  uint64_t v33 = static HorizontalAlignment.center.getter();
  closure #3 in closure #1 in StackItemModifier.body(content:)((uint64_t)&v44);
  long long v28 = v45;
  long long v29 = v44;
  long long v27 = v46;
  uint64_t v26 = v47;
  char v25 = BYTE8(v47);
  uint64_t v23 = v50;
  uint64_t v24 = v48;
  uint64_t v22 = v52;
  char v67 = v49;
  char v65 = v51;
  char v63 = v53;
  char v61 = 0;
  char v9 = v58;
  *(_DWORD *)((char *)v76 + 3) = *(_DWORD *)&v57[3];
  v76[0] = *(_DWORD *)v57;
  *(_DWORD *)((char *)v75 + 3) = *(_DWORD *)&v55[3];
  v75[0] = *(_DWORD *)v55;
  char v10 = v54;
  *(_DWORD *)((char *)v74 + 3) = *(_DWORD *)&v68[3];
  v74[0] = *(_DWORD *)v68;
  char v20 = v49;
  char v21 = v56;
  *(_DWORD *)((char *)v73 + 3) = *(_DWORD *)&v66[3];
  v73[0] = *(_DWORD *)v66;
  char v11 = v51;
  *(_DWORD *)((char *)v72 + 3) = *(_DWORD *)&v64[3];
  v72[0] = *(_DWORD *)v64;
  char v12 = v53;
  *(_DWORD *)((char *)v71 + 3) = *(_DWORD *)&v62[3];
  v71[0] = *(_DWORD *)v62;
  __int16 v70 = v60;
  int v69 = v59;
  long long v13 = *(_OWORD *)(a1 + 112);
  long long v46 = *(_OWORD *)(a1 + 96);
  long long v47 = v13;
  uint64_t v48 = *(void *)(a1 + 128);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v44 = *(_OWORD *)(a1 + 64);
  long long v45 = v14;
  type metadata accessor for AnyLocation<EquatableNavigationTitle?>(0, &lazy cache variable for type metadata for State<EquatableNavigationTitle?>, &lazy cache variable for type metadata for EquatableNavigationTitle?, (uint64_t)&unk_1ED4420D8, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  __n128 result = v39;
  *(_DWORD *)(a2 + 41) = v76[0];
  *(_DWORD *)(a2 + 44) = *(_DWORD *)((char *)v76 + 3);
  *(_DWORD *)(a2 + 121) = v75[0];
  *(_DWORD *)(a2 + 124) = *(_DWORD *)((char *)v75 + 3);
  *(_DWORD *)(a2 + 137) = v44;
  *(_DWORD *)(a2 + 140) = *(_DWORD *)((char *)&v44 + 3);
  *(_DWORD *)(a2 + 201) = v74[0];
  *(_DWORD *)(a2 + 204) = *(_DWORD *)((char *)v74 + 3);
  int v16 = v73[0];
  *(_DWORD *)(a2 + 220) = *(_DWORD *)((char *)v73 + 3);
  *(_DWORD *)(a2 + 217) = v16;
  int v17 = v72[0];
  *(_DWORD *)(a2 + 236) = *(_DWORD *)((char *)v72 + 3);
  *(_DWORD *)(a2 + 233) = v17;
  int v18 = v71[0];
  *(_DWORD *)(a2 + 252) = *(_DWORD *)((char *)v71 + 3);
  *(_DWORD *)(a2 + 249) = v18;
  int v19 = v69;
  *(_WORD *)(a2 + 278) = v70;
  *(_DWORD *)(a2 + 274) = v19;
  *(void *)a2 = partial apply for closure #1 in closure #1 in StackItemModifier.body(content:);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = partial apply for closure #2 in closure #1 in StackItemModifier.body(content:);
  *(void *)(a2 + 24) = v38;
  *(void *)(a2 + 32) = v37;
  *(unsigned char *)(a2 + 40) = v9;
  *(void *)(a2 + 48) = v36;
  *(void *)(a2 + 56) = v6;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = v35;
  *(void *)(a2 + 88) = v34;
  *(_OWORD *)(a2 + 96) = v32;
  *(void *)(a2 + 112) = v31;
  *(unsigned char *)(a2 + 120) = v21;
  *(void *)(a2 + 128) = v30;
  *(unsigned char *)(a2 + 136) = v10;
  *(_OWORD *)(a2 + 144) = v29;
  *(_OWORD *)(a2 + 160) = v28;
  *(_OWORD *)(a2 + 176) = v27;
  *(void *)(a2 + 192) = v26;
  *(unsigned char *)(a2 + 200) = v25;
  *(void *)(a2 + 208) = v24;
  *(unsigned char *)(a2 + 216) = v20;
  *(void *)(a2 + 224) = v23;
  *(unsigned char *)(a2 + 232) = v11;
  *(void *)(a2 + 240) = v22;
  *(unsigned char *)(a2 + 248) = v12;
  *(_OWORD *)(a2 + 256) = xmmword_18834FC50;
  *(unsigned char *)(a2 + 272) = 0;
  *(unsigned char *)(a2 + 273) = 0;
  *(void *)(a2 + 280) = v33;
  *(void *)(a2 + 288) = 0;
  *char v4 = v39;
  v4[1] = v40;
  v4[2] = v41;
  *(void *)(a2 + 344) = v42;
  *(unsigned char *)(a2 + 352) = v43;
  return result;
}

uint64_t closure #1 in closure #1 in StackItemModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  GeometryProxy.safeAreaInsets.getter();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t result = static Edge.Set.all.getter();
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = -1;
  *(unsigned char *)(a1 + 56) = result;
  return result;
}

uint64_t *closure #2 in closure #1 in StackItemModifier.body(content:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = (long long *)(a2 + 64);
  if (v2 == 1)
  {
    long long v4 = *(_OWORD *)(a2 + 112);
    long long v15 = *(_OWORD *)(a2 + 96);
    long long v16 = v4;
    v17[0] = *(void *)(a2 + 128);
    long long v5 = *(_OWORD *)(a2 + 80);
    long long v13 = *v3;
    long long v14 = v5;
    outlined init with take of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>((uint64_t)v17, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for AnyLocation<EquatableNavigationTitle?>?);
    uint64_t result = (uint64_t *)outlined init with take of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>((uint64_t)v18, (uint64_t)&v19, (uint64_t (*)(void))type metadata accessor for AnyLocation<EquatableNavigationTitle?>?);
    if (!v19) {
      return result;
    }
    outlined retain of State<EquatableNavigationTitle?>((uint64_t *)&v13);
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  else
  {
    uint64_t v7 = *a1;
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2];
    uint64_t v10 = a1[4];
    long long v11 = *(_OWORD *)(a2 + 112);
    long long v15 = *(_OWORD *)(a2 + 96);
    long long v16 = v11;
    v17[0] = *(void *)(a2 + 128);
    long long v12 = *(_OWORD *)(a2 + 80);
    long long v13 = *v3;
    long long v14 = v12;
    outlined init with take of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>((uint64_t)v17, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for AnyLocation<EquatableNavigationTitle?>?);
    uint64_t result = (uint64_t *)outlined init with take of SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>((uint64_t)v18, (uint64_t)&v19, (uint64_t (*)(void))type metadata accessor for AnyLocation<EquatableNavigationTitle?>?);
    if (!v19) {
      return result;
    }
    outlined copy of NavigationTitleStorage?(v7, v8, v9, v2, v10);
    outlined retain of State<EquatableNavigationTitle?>((uint64_t *)&v13);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined consume of NavigationTitleStorage?(v7, v8, v9, v2, v10);
  }
  return outlined release of State<EquatableNavigationTitle?>((uint64_t *)&v13);
}

uint64_t closure #3 in closure #1 in StackItemModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AnyLocation<EquatableNavigationTitle?>(0, &lazy cache variable for type metadata for State<EquatableNavigationTitle?>, &lazy cache variable for type metadata for EquatableNavigationTitle?, (uint64_t)&unk_1ED4420D8, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  if (v13 == 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    uint64_t v2 = 0;
    uint64_t v5 = 0;
    uint64_t v3 = 0;
    char v6 = 0;
  }
  else
  {
    uint64_t v2 = v14;
    uint64_t v3 = v16;
    outlined copy of Text?(v10, v11, v12, v13);
    outlined copy of Transaction?(v14);
    swift_retain();
    uint64_t v8 = v11;
    uint64_t v9 = v10;
    uint64_t v7 = v12;
    char v6 = v17;
    outlined consume of NavigationTitleStorage?(v10, v11, v12, v13, v14);
    uint64_t v5 = v15;
  }
  type metadata accessor for AnyLocation<EquatableNavigationTitle?>(0, &lazy cache variable for type metadata for State<CGFloat?>, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  State.wrappedValue.getter();
  type metadata accessor for NavigationState.StackContent?(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, MEMORY[0x1E4F41580]);
  uint64_t result = State.wrappedValue.getter();
  *(void *)a1 = v9;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v13;
  *(void *)(a1 + 32) = v2;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v3;
  *(unsigned char *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v10;
  *(unsigned char *)(a1 + 88) = v11;
  *(void *)(a1 + 96) = v10;
  *(unsigned char *)(a1 + 104) = v11;
  return result;
}

uint64_t closure #2 in StackItemModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 136);
  if (*(void *)(a2 + 152))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return outlined release of TouchEvent((uint64_t)&v3);
  }
  return result;
}

uint64_t closure #3 in StackItemModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 160);
  if (*(void *)(a2 + 176))
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return outlined release of TouchEvent((uint64_t)&v3);
  }
  return result;
}

void StackItemModifier.updateTopItemBarTransitionProgressIfNeeded()()
{
  memcpy(__dst, v0, sizeof(__dst));
  if (LOBYTE(__dst[1]) == 1)
  {
    v8[4] = __dst[27];
    type metadata accessor for NavigationState.StackContent?(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, MEMORY[0x1E4F41580]);
    State.wrappedValue.getter();
    v8[0] = v8[36];
    LOBYTE(v8[1]) = v9;
    v8[2] = v10;
    LOBYTE(v8[3]) = v11;
    outlined retain of StackItemModifier((uint64_t)__dst);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    outlined release of StackItemModifier((uint64_t)__dst);
    uint64_t v1 = __dst[30];
    char v2 = __dst[31];
    outlined copy of Environment<Bool>.Content(__dst[30], __dst[31]);
    specialized Environment.wrappedValue.getter(v1, v2, v8);
    outlined consume of Environment<Bool>.Content(v1, v2);
    if (LOBYTE(v8[0]) == 1)
    {
      long long v3 = (void *)__dst[28];
      char v4 = __dst[29];
      outlined copy of Environment<UISceneSession?>.Content((id)__dst[28], __dst[29]);
      uint64_t v5 = specialized Environment.wrappedValue.getter(v3, v4);
      outlined consume of Environment<UISceneSession?>.Content(v3, v4);
      if (v5)
      {
        id v6 = objc_msgSend(v5, sel_scene);

        if (v6)
        {
          id v7 = objc_msgSend(v6, sel__FBSScene);

          if (v7)
          {
            memcpy(v8, __dst, 0x120uLL);
            StackItemModifier.updateScene(_:)(v7);
          }
        }
      }
    }
  }
}

void StackItemModifier.updateScene(_:)(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 184);
  char v4 = *(unsigned char *)(v1 + 192);
  uint64_t v5 = *(void (**)(uint64_t, void *))(v1 + 200);
  char v6 = *(unsigned char *)(v1 + 208);
  id v7 = *(uint64_t (**)(uint64_t))(v1 + 216);
  id v22 = objc_msgSend(a1, sel_clientSettings);
  swift_getObjectType();
  uint64_t v8 = swift_conformsToProtocol2();
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  if (v8) {
    id v10 = v22;
  }
  else {
    id v10 = 0;
  }
  if (!v10)
  {
    goto LABEL_14;
  }
  uint64_t aBlock = v3;
  LOBYTE(v24) = v4;
  char v25 = v5;
  LOBYTE(v26) = v6;
  long long v27 = v7;
  type metadata accessor for NavigationState.StackContent?(0, &lazy cache variable for type metadata for State<BarTransitionProgress>, (uint64_t)&type metadata for BarTransitionProgress, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  double v11 = v29;
  char v12 = v30;
  uint64_t ObjectType = swift_getObjectType();
  double v14 = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t))(v9 + 24))(ObjectType, v9));
  if (v15)
  {
    if (v30)
    {
LABEL_14:

      return;
    }
  }
  else if ((v30 & 1) == 0 && v14 == v29)
  {
    goto LABEL_14;
  }
  MEMORY[0x1F4188790](*(void *)&v14);
  *(double *)&_OWORD v20[2] = v11;
  char v21 = v12;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = partial apply for closure #1 in StackItemModifier.updateScene(_:);
  *(void *)(v16 + 24) = v20;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #1 in FBSScene.updateClarityUIClientSettings(_:);
  *(void *)(v17 + 24) = v16;
  long long v27 = partial apply for thunk for @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ();
  uint64_t v28 = v17;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v24 = 1107296256;
  char v25 = thunk for @escaping @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ();
  uint64_t v26 = &block_descriptor_78;
  int v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_updateClientSettingsWithBlock_, v18);
  _Block_release(v18);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();

  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
}

id protocol witness for UIViewControllerRepresentable.makeUIViewController(context:) in conformance MultimodalNavigationStackViewHost<A>(uint64_t a1, uint64_t a2)
{
  return specialized MultimodalNavigationStackViewHost.makeUIViewController(context:)(a2);
}

uint64_t protocol witness for UIViewControllerRepresentable.updateUIViewController(_:context:) in conformance MultimodalNavigationStackViewHost<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized MultimodalNavigationStackViewHost.updateUIViewController(_:context:)(a1, a3);
}

uint64_t static OnScrollStateChange._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  int v31 = *a1;
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  unint64_t v6 = a2[2];
  unsigned int v7 = *((_DWORD *)a2 + 6);
  unsigned int v8 = *((_DWORD *)a2 + 7);
  unsigned int v9 = *((_DWORD *)a2 + 8);
  unsigned int v10 = *((_DWORD *)a2 + 9);
  uint64_t v12 = a2[5];
  uint64_t v11 = a2[6];
  unsigned int v13 = *((_DWORD *)a2 + 14);
  unsigned int v14 = *((_DWORD *)a2 + 15);
  unsigned int v15 = *((_DWORD *)a2 + 16);
  unsigned int v16 = *((_DWORD *)a2 + 17);
  unsigned int v18 = *((_DWORD *)a2 + 18);
  unsigned int v17 = *((_DWORD *)a2 + 19);
  int v19 = *((_DWORD *)a2 + 20);
  uint64_t v62 = v4;
  int v42 = v5;
  int v63 = v5;
  unint64_t v64 = v6;
  unsigned int v47 = v8;
  unsigned int v48 = v7;
  *(void *)&long long v65 = __PAIR64__(v8, v7);
  unsigned int v45 = v10;
  unsigned int v46 = v9;
  *((void *)&v65 + 1) = __PAIR64__(v10, v9);
  uint64_t v66 = v12;
  uint64_t v67 = v11;
  unsigned int v32 = v13;
  *(void *)&long long v68 = __PAIR64__(v14, v13);
  unsigned int v44 = v14;
  unsigned int v39 = v16;
  unsigned int v40 = v15;
  *((void *)&v68 + 1) = __PAIR64__(v16, v15);
  unsigned int v37 = v17;
  unsigned int v38 = v18;
  unint64_t v69 = __PAIR64__(v17, v18);
  int v36 = v19;
  int v70 = v19;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  uint64_t v52 = v4;
  int v53 = v63;
  unint64_t v55 = v6;
  long long v56 = v65;
  uint64_t v57 = v12;
  uint64_t v58 = v11;
  long long v59 = v68;
  unint64_t v60 = v69;
  int v61 = v70;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v20 = swift_bridgeObjectRetain();
  a3(&v49, v20, &v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v35 = v49;
  uint64_t v52 = v49;
  int v33 = v51;
  int v34 = v50;
  int v53 = v50;
  int v54 = v51;
  uint64_t v21 = _ViewOutputs.subscript.getter();
  if ((v21 & 0x100000000) == 0)
  {
    LODWORD(v52) = v31;
    HIDWORD(v30) = v21;
    type metadata accessor for NavigationState.StackContent?(0, &lazy cache variable for type metadata for _GraphValue<OnScrollStateChange>, (uint64_t)&unk_1ED42D1B8, MEMORY[0x1E4F3F590]);
    LODWORD(v30) = _GraphValue.value.getter();
    uint64_t v52 = v4;
    int v53 = v42;
    unint64_t v55 = v6;
    *(void *)&long long v56 = __PAIR64__(v47, v48);
    *((void *)&v56 + 1) = __PAIR64__(v45, v46);
    uint64_t v57 = v12;
    uint64_t v58 = v11;
    *(void *)&long long v59 = __PAIR64__(v44, v32);
    *((void *)&v59 + 1) = __PAIR64__(v39, v40);
    unint64_t v60 = __PAIR64__(v37, v38);
    int v61 = v36;
    int v29 = _ViewInputs.position.getter();
    uint64_t v52 = v4;
    int v53 = v42;
    unint64_t v55 = v6;
    *(void *)&long long v56 = __PAIR64__(v47, v48);
    *((void *)&v56 + 1) = __PAIR64__(v45, v46);
    uint64_t v57 = v12;
    uint64_t v58 = v11;
    *(void *)&long long v59 = __PAIR64__(v44, v32);
    *((void *)&v59 + 1) = __PAIR64__(v39, v40);
    unint64_t v60 = __PAIR64__(v37, v38);
    int v61 = v36;
    int v28 = _ViewInputs.size.getter();
    uint64_t v52 = v4;
    int v53 = v42;
    unint64_t v55 = v6;
    *(void *)&long long v56 = __PAIR64__(v47, v48);
    *((void *)&v56 + 1) = __PAIR64__(v45, v46);
    uint64_t v57 = v12;
    uint64_t v58 = v11;
    *(void *)&long long v59 = __PAIR64__(v44, v32);
    *((void *)&v59 + 1) = __PAIR64__(v39, v40);
    unint64_t v60 = __PAIR64__(v37, v38);
    int v61 = v36;
    unsigned int v27 = _ViewInputs.transform.getter();
    uint64_t v52 = v4;
    int v53 = v42;
    unint64_t v55 = v6;
    *(void *)&long long v56 = __PAIR64__(v47, v48);
    *((void *)&v56 + 1) = __PAIR64__(v45, v46);
    uint64_t v57 = v12;
    uint64_t v58 = v11;
    *(void *)&long long v59 = __PAIR64__(v44, v32);
    *((void *)&v59 + 1) = __PAIR64__(v39, v40);
    unint64_t v60 = __PAIR64__(v37, v38);
    int v61 = v36;
    unsigned int v22 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    int v23 = v53;
    char v24 = v54;
    uint64_t v25 = v52;
    uint64_t v52 = v30;
    int v53 = v29;
    int v54 = v28;
    unint64_t v55 = __PAIR64__(v22, v27);
    *(void *)&long long v56 = v25;
    DWORD2(v56) = v23;
    BYTE12(v56) = v24;
    LODWORD(v57) = 0;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type ScrollStateActionBinding and conformance ScrollStateActionBinding();
    Attribute.init<A>(body:value:flags:update:)();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a4 = v35;
  *(_DWORD *)(a4 + 8) = v34;
  *(_DWORD *)(a4 + 12) = v33;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OnScrollStateChange(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RootItemModifier(a1, a2, a3, a4, a5, a6, MEMORY[0x1E4F3F678]);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RootItemModifier(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(int *, uint64_t *))
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[5];
  int v11 = *((_DWORD *)a2 + 16);
  uint64_t v12 = a2[9];
  char v13 = *((unsigned char *)a2 + 80);
  int v24 = *a1;
  uint64_t v15 = v7;
  int v16 = v8;
  uint64_t v17 = v9;
  long long v18 = *(_OWORD *)(a2 + 3);
  uint64_t v19 = v10;
  long long v20 = *((_OWORD *)a2 + 3);
  int v21 = v11;
  uint64_t v22 = v12;
  char v23 = v13;
  return a7(&v24, &v15);
}

void protocol witness for ViewModifier.body(content:) in conformance OnScrollStateChange()
{
}

unint64_t implicit closure #2 in ScrollStateActionBinding.updateValue()()
{
  return 0xD000000000000020;
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance StackItemLayout(uint64_t a1, char a2)
{
  double result = *(double *)&a1;
  if (a2) {
    return 0.0;
  }
  return result;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance StackItemLayout(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (v10[1]) {
    __int16 v11 = 256;
  }
  else {
    __int16 v11 = 0;
  }
  return specialized StackItemLayout.placeSubviews(in:proposal:subviews:cache:)(a1, a2, a3, a4, a9, a10, v11 | *v10);
}

uint64_t closure #1 in closure #1 in StackItemsView.body.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_retain();
}

void closure #2 in StackItemsView.body.getter(char a1)
{
  if (a1)
  {
    id v1 = objc_msgSend(self, sel_activeInstance);
    if (v1)
    {
      id v2 = v1;
      objc_msgSend(v1, sel_dismissKeyboard);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    StackItemsView.navigateBack(isAnimated:)(1);
  }
}

uint64_t closure #3 in StackItemsView.body.getter(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  specialized AccessibilityCoreNotification.post()(0, 0);
  uint64_t v5 = *(void *)(a3 + 456);
  char v6 = *(unsigned char *)(a3 + 464);
  outlined copy of Environment<Bool>.Content(v5, v6);
  specialized Environment.wrappedValue.getter(v5, v6, &v8);
  uint64_t result = outlined consume of Environment<Bool>.Content(v5, v6);
  if (v8 == 1) {
    return StackItemsView.updateClientSettings(allStackItems:)(v4);
  }
  return result;
}

uint64_t StackItemsView.updateClientSettings(allStackItems:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (char *)MEMORY[0x1E4FBC860];
  char v23 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    type metadata accessor for PropertyListEncoder();
    do
    {
      swift_allocObject();
      PropertyListEncoder.init()();
      lazy protocol witness table accessor for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle();
      uint64_t v5 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      uint64_t v7 = v6;
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
      }
      unint64_t v9 = *((void *)v3 + 2);
      unint64_t v8 = *((void *)v3 + 3);
      if (v9 >= v8 >> 1) {
        uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, v3);
      }
      *((void *)v3 + 2) = v9 + 1;
      uint64_t v10 = &v3[16 * v9];
      *((void *)v10 + 4) = v5;
      *((void *)v10 + 5) = v7;
      char v23 = v3;
      --v4;
    }
    while (v4);
  }
  __int16 v11 = *(void **)(v2 + 472);
  char v12 = *(unsigned char *)(v2 + 480);
  outlined copy of Environment<UISceneSession?>.Content(v11, v12);
  char v13 = specialized Environment.wrappedValue.getter(v11, v12);
  outlined consume of Environment<UISceneSession?>.Content(v11, v12);
  if (!v13) {
    return swift_bridgeObjectRelease();
  }
  id v14 = objc_msgSend(v13, sel_scene);

  if (!v14) {
    return swift_bridgeObjectRelease();
  }
  id v15 = objc_msgSend(v14, sel__FBSScene);

  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  MEMORY[0x1F4188790](v16);
  v21[2] = &v23;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = partial apply for closure #1 in StackItemsView.updateClientSettings(allStackItems:);
  *(void *)(v17 + 24) = v21;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = closure #1 in FBSScene.updateClarityUIClientSettings(_:)partial apply;
  *(void *)(v18 + 24) = v17;
  aBlock[4] = thunk for @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ()partial apply;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ();
  aBlock[3] = &block_descriptor_87_2;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v15, sel_updateClientSettingsWithBlock_, v19);
  _Block_release(v19);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();

  swift_release();
  uint64_t result = swift_release();
  if ((v19 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t *closure #4 in StackItemsView.body.getter()
{
  uint64_t v0 = Notification.userInfo.getter();
  if (!v0)
  {
    long long v7 = 0u;
    long long v8 = 0u;
LABEL_10:
    outlined destroy of NavigationTitleStorage?((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    goto LABEL_11;
  }
  uint64_t v1 = v0;
  *(void *)&long long v7 = 0x646574616D696E61;
  *((void *)&v7 + 1) = 0xE800000000000000;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v1 + 16) && (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6), (v3 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v1 + 56) + 32 * v2, (uint64_t)&v7);
  }
  else
  {
    long long v7 = 0u;
    long long v8 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v6);
  if (!*((void *)&v8 + 1)) {
    goto LABEL_10;
  }
  if (!swift_dynamicCast())
  {
LABEL_11:
    int v4 = 1;
    return StackItemsView.navigateBack(isAnimated:)(v4);
  }
  int v4 = v6[0];
  return StackItemsView.navigateBack(isAnimated:)(v4);
}

uint64_t closure #1 in StackItemsView.navigateBack(isAnimated:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a4;
  v4[3] = type metadata accessor for MainActor();
  v4[4] = static MainActor.shared.getter();
  uint64_t v5 = (void *)swift_task_alloc();
  v4[5] = v5;
  *uint64_t v5 = v4;
  v5[1] = closure #1 in StackItemsView.navigateBack(isAnimated:);
  return MEMORY[0x1F4187DE0](300000000);
}

void protocol witness for ViewModifier.body(content:) in conformance NavigationTitleActionModifier()
{
}

uint64_t implicit closure #1 in NavigationTitleBinder.updateValue()()
{
  _StringGuts.grow(_:)(19);
  v0._object = (void *)0x8000000188341140;
  v0._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v0);
  v1._countAndFlagsBits = 0xD000000000000012;
  v1._object = (void *)0x8000000188341160;
  String.append(_:)(v1);
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  String.append(_:)(v2);
  return 0;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance NavigationTitleBinder(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type NavigationTitleBinder and conformance NavigationTitleBinder();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t specialized FloatingPoint.rescaledAlmostEqual(to:tolerance:)(double a1, double a2, double a3)
{
  while (1)
  {
    double v5 = a3;
    uint64_t v6 = *(void *)&a3;
    uint64_t v7 = *(void *)&a3 & 0x7FF0000000000000;
    uint64_t v8 = *(void *)&a3 & 0xFFFFFFFFFFFFFLL;
    if ((*(void *)&a3 & 0x7FF0000000000000) == 0x7FF0000000000000 && v8 != 0) {
      return 0;
    }
    a3 = a1;
    uint64_t v10 = (*(void *)&a1 >> 52) & 0x7FFLL;
    uint64_t v11 = *(void *)&a1 & 0xFFFFFFFFFFFFFLL;
    if ((*(void *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 && v10 == 2047) {
      return 0;
    }
    a1 = v5;
    if (!v8)
    {
      a1 = v5;
      if (v7 == 0x7FF0000000000000) {
        break;
      }
    }
  }
  if (!v11 && v10 == 2047) {
    return v5 == a3;
  }
  uint64_t v13 = Double.exponent.getter();
  double v14 = specialized Double.init(sign:exponent:significand:)(v6 < 0, v13, 1.0);
  double v15 = a3 * 0.5;
  if (!(v10 | v11)) {
    double v15 = a3;
  }
  if (v10 == 2047) {
    double v15 = a3;
  }

  return specialized FloatingPoint.isAlmostEqual(to:tolerance:)(v15, a2, v14);
}

uint64_t specialized static EquatableNavigationTitle.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  uint64_t v20 = a2[4];
  EnvironmentValues.init()();
  if (v5)
  {
    uint64_t v18 = v7;
    outlined copy of Text?(v3, v2, v4, v5);
    outlined copy of Transaction?(v6);
    swift_retain();
    uint64_t v19 = Text.resolveString(in:with:idiom:)();
    uint64_t v12 = v11;
    outlined consume of Text?(v3, v2, v4, v5);
    outlined consume of Transaction?(v6);
    swift_release();
    if (!v10)
    {
      if (v12) {
        goto LABEL_14;
      }
      uint64_t v13 = 0;
LABEL_12:
      swift_release();
      swift_release();
      if (!v13)
      {
        char v16 = 1;
        return v16 & 1;
      }
LABEL_15:
      swift_bridgeObjectRelease();
      char v16 = 0;
      return v16 & 1;
    }
    uint64_t v5 = v12;
    uint64_t v7 = v18;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v13 = 0;
    if (!v10) {
      goto LABEL_12;
    }
  }
  outlined copy of Text?(v7, v8, v9, v10);
  outlined copy of Transaction?(v20);
  swift_retain();
  uint64_t v14 = Text.resolveString(in:with:idiom:)();
  uint64_t v13 = v15;
  outlined consume of Text?(v7, v8, v9, v10);
  outlined consume of Transaction?(v20);
  swift_release();
  if (!v5) {
    goto LABEL_12;
  }
  if (!v13)
  {
LABEL_14:
    swift_release();
    swift_release();
    goto LABEL_15;
  }
  if (v19 == v14 && v5 == v13) {
    char v16 = 1;
  }
  else {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v16 & 1;
}

id specialized MultimodalNavigationStackViewHost.makeUIViewController(context:)(uint64_t a1)
{
  uint64_t v2 = (_OWORD *)v1;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (objc_class *)((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for _UISecureHostingController();
  (*(void (**)(void))(v1 + 32))();
  id v7 = specialized _UISecureHostingController.__allocating_init(rootView:)(v6);
  (*(void (**)(objc_class *, uint64_t))(v4 + 8))(v6, v3);
  id result = objc_msgSend(v7, sel_view);
  if (result)
  {
    uint64_t v9 = result;
    id v10 = objc_msgSend(self, sel_clearColor);
    objc_msgSend(v9, sel_setBackgroundColor_, v10);

    uint64_t v11 = (void *)specialized UIHostingController.host.getter();
    long long v12 = v2[1];
    v14[0] = *v2;
    v14[1] = v12;
    char v15 = 0;
    id v13 = v11;
    _UIHostingView.explicitSafeAreaInsets.setter((uint64_t)v14);

    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized MultimodalNavigationStackViewHost.updateUIViewController(_:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  id v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (void *)specialized UIHostingController.host.getter();
  long long v9 = *((_OWORD *)v2 + 1);
  v12[0] = *(_OWORD *)v2;
  v12[1] = v9;
  char v13 = 0;
  id v10 = v8;
  _UIHostingView.explicitSafeAreaInsets.setter((uint64_t)v12);

  v3[4]();
  specialized UIHostingController.rootView.setter((uint64_t)v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

ValueMetadata *type metadata accessor for MultimodalNavigationTitleBottomPaddingKey()
{
  return &type metadata for MultimodalNavigationTitleBottomPaddingKey;
}

uint64_t destroy for MultimodalNavigationStack(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 112), *(unsigned char *)(a1 + 120));

  return swift_release();
}

uint64_t initializeWithTake for MultimodalNavigationStack(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_weakTakeInit();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v5 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v5;
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  long long v6 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v6;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return a1;
}

ValueMetadata *type metadata accessor for MultimodalNavigationStack()
{
  return &type metadata for MultimodalNavigationStack;
}

ValueMetadata *type metadata accessor for MultimodalNavigationTitleHorizontalPaddingKey()
{
  return &type metadata for MultimodalNavigationTitleHorizontalPaddingKey;
}

uint64_t associated type witness table accessor for View.Body : View in MultimodalNavigationStack()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of MultimodalNavigationStack(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of MultimodalNavigationStack(uint64_t a1)
{
  return a1;
}

uint64_t sub_18817BD58()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 136), *(unsigned char *)(v0 + 144));
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with take of MultimodalNavigationStack(long long *a1, uint64_t a2)
{
  long long v4 = *a1;
  long long v5 = a1[1];
  long long v6 = a1[2];
  *(void *)(a2 + 48) = *((void *)a1 + 6);
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)a2 = v4;
  long long v7 = *(long long *)((char *)a1 + 56);
  *(void *)(a2 + 72) = *((void *)a1 + 9);
  *(_OWORD *)(a2 + 56) = v7;
  swift_weakTakeInit();
  *(_OWORD *)(a2 + 88) = *(long long *)((char *)a1 + 88);
  *(void *)(a2 + 104) = *((void *)a1 + 13);
  uint64_t v8 = *((void *)a1 + 14);
  *(unsigned char *)(a2 + 120) = *((unsigned char *)a1 + 120);
  *(void *)(a2 + 112) = v8;
  long long v9 = a1[8];
  long long v10 = a1[9];
  *(void *)(a2 + 160) = *((void *)a1 + 20);
  *(_OWORD *)(a2 + 128) = v9;
  *(_OWORD *)(a2 + 144) = v10;
  return a2;
}

uint64_t *partial apply for closure #1 in MultimodalNavigationStack.body.getter@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in MultimodalNavigationStack.body.getter(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_18817BE74()
{
  return swift_deallocObject();
}

uint64_t sub_18817BE84@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.accessibilityPrefersCrossFadeTransitions.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_18817BEC4()
{
  return EnvironmentValues.accessibilityPrefersCrossFadeTransitions.setter();
}

uint64_t outlined init with copy of ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for _AnimationModifier<[StackItem]>(255, a4, a5);
    unint64_t v8 = type metadata accessor for ModifiedContent();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>)
  {
    type metadata accessor for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>(255, &lazy cache variable for type metadata for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, type metadata accessor for ZStack<ForEach<[StackItem], Int, AnyView>>, &lazy cache variable for type metadata for _AnimationModifier<[StackItem]>, MEMORY[0x1E4F40370]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>);
    }
  }
}

void type metadata accessor for ZStack<ForEach<[StackItem], Int, AnyView>>(uint64_t a1)
{
}

void type metadata accessor for ForEach<[StackItem], Int, AnyView>()
{
  if (!lazy cache variable for type metadata for ForEach<[StackItem], Int, AnyView>)
  {
    type metadata accessor for NavigationState.StackContent?(255, &lazy cache variable for type metadata for [StackItem], (uint64_t)&type metadata for StackItem, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [StackItem] and conformance [A]();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<[StackItem], Int, AnyView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [StackItem] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [StackItem] and conformance [A];
  if (!lazy protocol witness table cache variable for type [StackItem] and conformance [A])
  {
    type metadata accessor for NavigationState.StackContent?(255, &lazy cache variable for type metadata for [StackItem], (uint64_t)&type metadata for StackItem, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [StackItem] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<[StackItem], Int, AnyView> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<[StackItem], Int, AnyView> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<[StackItem], Int, AnyView> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<[StackItem], Int, AnyView>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<[StackItem], Int, AnyView> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [StackItem] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [StackItem] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [StackItem] and conformance <A> [A])
  {
    type metadata accessor for NavigationState.StackContent?(255, &lazy cache variable for type metadata for [StackItem], (uint64_t)&type metadata for StackItem, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type StackItem and conformance StackItem();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [StackItem] and conformance <A> [A]);
  }
  return result;
}

void type metadata accessor for _AnimationModifier<[StackItem]>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    type metadata accessor for NavigationState.StackContent?(255, &lazy cache variable for type metadata for [StackItem], (uint64_t)&type metadata for StackItem, MEMORY[0x1E4FBB320]);
    uint64_t v7 = v6;
    unint64_t v8 = lazy protocol witness table accessor for type [StackItem] and conformance <A> [A]();
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type MultimodalNavigationChromeModifier and conformance MultimodalNavigationChromeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>> and conformance <> ModifiedContent<A, B>)
  {
    uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E4F40370];
    type metadata accessor for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>(255, &lazy cache variable for type metadata for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, type metadata accessor for ZStack<ForEach<[StackItem], Int, AnyView>>, &lazy cache variable for type metadata for _AnimationModifier<[StackItem]>, MEMORY[0x1E4F40370]);
    lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher(&lazy protocol witness table cache variable for type ZStack<ForEach<[StackItem], Int, AnyView>> and conformance ZStack<A>, type metadata accessor for ZStack<ForEach<[StackItem], Int, AnyView>>);
    lazy protocol witness table accessor for type _ValueActionModifier2<[StackItem]> and conformance _ValueActionModifier2<A>(&lazy protocol witness table cache variable for type _AnimationModifier<[StackItem]> and conformance _AnimationModifier<A>, &lazy cache variable for type metadata for _AnimationModifier<[StackItem]>, v1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ValueActionModifier2<[StackItem]> and conformance _ValueActionModifier2<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _AnimationModifier<[StackItem]>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *assignWithCopy for StackItem(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for StackItem(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for StackItem()
{
  return &type metadata for StackItem;
}

uint64_t destroy for StackItemModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t v2 = *(void *)(a1 + 88);
  if (v2)
  {
    if (v2 == 1) {
      goto LABEL_7;
    }
    outlined consume of Text.Storage(*(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 96) != 1) {
    swift_release();
  }
  swift_release();
LABEL_7:
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(a1 + 224), *(unsigned char *)(a1 + 232));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 240), *(unsigned char *)(a1 + 248));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 256), *(unsigned char *)(a1 + 264));

  return swift_release();
}

uint64_t initializeWithCopy for StackItemModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  uint64_t v5 = (_OWORD *)(a1 + 64);
  uint64_t v6 = (_OWORD *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 88);
  swift_retain();
  swift_retain();
  if (v7)
  {
    if (v7 == 1)
    {
      long long v8 = v6[1];
      *uint64_t v5 = *v6;
      *(_OWORD *)(a1 + 80) = v8;
      *(_OWORD *)(a1 + 96) = v6[2];
      *(_OWORD *)(a1 + 105) = *(_OWORD *)((char *)v6 + 41);
      goto LABEL_9;
    }
    uint64_t v10 = *(void *)(a2 + 64);
    uint64_t v11 = *(void *)(a2 + 72);
    char v12 = *(unsigned char *)(a2 + 80);
    outlined copy of Text.Storage(v10, v11, v12);
    *(void *)(a1 + 64) = v10;
    *(void *)(a1 + 72) = v11;
    *(unsigned char *)(a1 + 80) = v12;
    *(void *)(a1 + 88) = v7;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = v6[1];
    *uint64_t v5 = *v6;
    *(_OWORD *)(a1 + 80) = v9;
  }
  uint64_t v13 = *(void *)(a2 + 96);
  if (v13 != 1) {
    uint64_t v13 = swift_retain();
  }
  *(void *)(a1 + 96) = v13;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  swift_retain();
LABEL_9:
  uint64_t v14 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v14;
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  uint64_t v15 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v15;
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_OWORD *)(a1 + 193) = *(_OWORD *)(a2 + 193);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  char v16 = *(void **)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  char v17 = *(unsigned char *)(a2 + 232);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<UISceneSession?>.Content(v16, v17);
  *(void *)(a1 + 224) = v16;
  *(unsigned char *)(a1 + 232) = v17;
  uint64_t v18 = *(void *)(a2 + 240);
  char v19 = *(unsigned char *)(a2 + 248);
  outlined copy of Environment<Bool>.Content(v18, v19);
  *(void *)(a1 + 240) = v18;
  *(unsigned char *)(a1 + 248) = v19;
  uint64_t v20 = *(void *)(a2 + 256);
  char v21 = *(unsigned char *)(a2 + 264);
  outlined copy of Environment<Bool>.Content(v20, v21);
  *(void *)(a1 + 256) = v20;
  *(unsigned char *)(a1 + 264) = v21;
  uint64_t v22 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v22;
  swift_retain();
  return a1;
}

uint64_t outlined destroy of EquatableNavigationTitle(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy288_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t storeEnumTagSinglePayload for StackItemModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 288) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 288) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for StackItemModifier()
{
  return &type metadata for StackItemModifier;
}

void *type metadata accessor for EquatableNavigationTitle()
{
  return &unk_1ED4420D8;
}

ValueMetadata *type metadata accessor for RootItemModifier()
{
  return &type metadata for RootItemModifier;
}

uint64_t destroy for StackItemsView(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(a1 + 8);
  a1 += 8;
  long long v7 = *(_OWORD *)(a1 + 288);
  long long v5 = *(_OWORD *)(a1 + 256);
  long long v6 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  outlined consume of NavigationState.Base(v2, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((uint64_t *)&v4 + 1),
    *(void *)(a1 + 240),
    *(void *)(a1 + 248),
    v5,
    *((uint64_t *)&v5 + 1),
    v6,
    *((uint64_t *)&v6 + 1),
    v7,
    *((unint64_t *)&v7 + 1),
    *(void *)(a1 + 304));
  swift_weakDestroy();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 448), *(unsigned char *)(a1 + 456));
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(a1 + 464), *(unsigned char *)(a1 + 472));
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithTake for StackItemsView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  memcpy((void *)(a1 + 8), (const void *)(a2 + 8), 0x188uLL);
  *(_OWORD *)(swift_weakTakeInit() + 8) = *(_OWORD *)(a2 + 408);
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
  *(_OWORD *)(a1 + 433) = *(_OWORD *)(a2 + 433);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(unsigned char *)(a1 + 480) = *(unsigned char *)(a2 + 480);
  *(_OWORD *)(a1 + 488) = *(_OWORD *)(a2 + 488);
  *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 520);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 536);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackItemsView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 552)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void *type metadata accessor for StackItemsView()
{
  return &unk_1ED4183E8;
}

ValueMetadata *type metadata accessor for BarTransitionProgress()
{
  return &type metadata for BarTransitionProgress;
}

unint64_t lazy protocol witness table accessor for type StackItemsView and conformance StackItemsView()
{
  unint64_t result = lazy protocol witness table cache variable for type StackItemsView and conformance StackItemsView;
  if (!lazy protocol witness table cache variable for type StackItemsView and conformance StackItemsView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackItemsView and conformance StackItemsView);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in StackItemsView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in StackItem()
{
  return MEMORY[0x1E4FBB560];
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in StackItemModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in RootItemModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18817CCBC()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in RootItemModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  closure #1 in RootItemModifier.body(content:)(a1, a2, *(double *)(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type Image.ResizableProvider and conformance Image.ResizableProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider;
  if (!lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Image.ResizableProvider and conformance Image.ResizableProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Image, _ShadowEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Image, _ShadowEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Image, _ShadowEffect> and conformance <> ModifiedContent<A, B>)
  {
    _s7SwiftUI24ReadDestinationsModifier33_EA42A490FE48784768DCEF705CD04CF4LLVyAA018ResolvedNavigationD0VGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<Image, _ShadowEffect>, MEMORY[0x1E4F41558], MEMORY[0x1E4F3F860], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Image, _ShadowEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined destroy of NavigationTitleStorage?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for NavigationState.StackContent?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 152);
  uint64_t v5 = *(void *)(a1 + 160);
  uint64_t v8 = *(void *)(a1 + 176);
  uint64_t v9 = *(void *)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v13 = *(void *)(a1 + 312);
  uint64_t v14 = *(void *)(a1 + 304);
  uint64_t v11 = *(void *)(a1 + 328);
  uint64_t v12 = *(void *)(a1 + 320);
  uint64_t v10 = *(void *)(a1 + 336);
  swift_release();
  swift_release();
  outlined consume of Environment<Color?>.Content(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NavigationTitleStorage?(v4, v5, v9, v8, v7);
  swift_release();
  outlined consume of NavigationTitleStorage?(v14, v13, v12, v11, v10);
  swift_release();
  swift_release();
  return a1;
}

uint64_t partial apply for closure #2 in StackItemModifier.body(content:)(uint64_t a1)
{
  return closure #2 in StackItemModifier.body(content:)(a1, v1 + 16);
}

uint64_t partial apply for closure #3 in StackItemModifier.body(content:)(uint64_t a1)
{
  return closure #3 in StackItemModifier.body(content:)(a1, v1 + 16);
}

uint64_t outlined retain of StackItemModifier(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v9 = *(void **)(a1 + 224);
  char v8 = *(unsigned char *)(a1 + 232);
  uint64_t v11 = *(void *)(a1 + 240);
  char v10 = *(unsigned char *)(a1 + 248);
  char v12 = *(unsigned char *)(a1 + 264);
  uint64_t v13 = *(void *)(a1 + 256);
  swift_retain();
  swift_retain();
  outlined copy of NavigationTitleStorage?(v2, v3, v4, v5, v6);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<UISceneSession?>.Content(v9, v8);
  outlined copy of Environment<Bool>.Content(v11, v10);
  outlined copy of Environment<Bool>.Content(v13, v12);
  swift_retain();
  return a1;
}

void partial apply for closure #4 in StackItemModifier.body(content:)()
{
  memcpy(v1, (const void *)(v0 + 16), sizeof(v1));
  StackItemModifier.updateTopItemBarTransitionProgressIfNeeded()();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>();
    type metadata accessor for _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>(255, &lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>(255);
    type metadata accessor for _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>(255, &lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>();
    _s7SwiftUI24ReadDestinationsModifier33_EA42A490FE48784768DCEF705CD04CF4LLVyAA018ResolvedNavigationD0VGMaTm_0(255, &lazy cache variable for type metadata for _TraitWritingModifier<ZIndexTraitKey>, MEMORY[0x1E4F3FA58], MEMORY[0x1E4F3FA50], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>();
    _s7SwiftUI24ReadDestinationsModifier33_EA42A490FE48784768DCEF705CD04CF4LLVyAA018ResolvedNavigationD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E4F40358], MEMORY[0x1E4F40350], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>)
  {
    type metadata accessor for _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>();
    _s7SwiftUI24ReadDestinationsModifier33_EA42A490FE48784768DCEF705CD04CF4LLVyAA018ResolvedNavigationD0VGMaTm_0(255, &lazy cache variable for type metadata for _OverlayStyleModifier<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F414D0], MEMORY[0x1E4F40870]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>);
    }
  }
}

void type metadata accessor for _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>)
  {
    type metadata accessor for ImageProviderBox<Image.ResizableProvider>(255, &lazy cache variable for type metadata for _LayoutRoot<StackItemLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackItemLayout and conformance StackItemLayout, (uint64_t)&unk_1ED41BCE8, MEMORY[0x1E4F3F598]);
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, (void (*)(uint64_t))type metadata accessor for _AnimationModifier<EquatableNavigationTitle?>);
    lazy protocol witness table accessor for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>();
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StackItemLayout and conformance StackItemLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type StackItemLayout and conformance StackItemLayout;
  if (!lazy protocol witness table cache variable for type StackItemLayout and conformance StackItemLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackItemLayout and conformance StackItemLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StackItemLayout and conformance StackItemLayout;
  if (!lazy protocol witness table cache variable for type StackItemLayout and conformance StackItemLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackItemLayout and conformance StackItemLayout);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>();
    type metadata accessor for ImageProviderBox<Image.ResizableProvider>(255, &lazy cache variable for type metadata for _InsetViewModifier<MultimodalNavigationTitleBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationTitleBar and conformance MultimodalNavigationTitleBar, (uint64_t)&type metadata for MultimodalNavigationTitleBar, MEMORY[0x1E4F403B0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, type metadata accessor for ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>);
    }
  }
}

void type metadata accessor for ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>(uint64_t a1)
{
}

void type metadata accessor for GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>(uint64_t a1)
{
}

void type metadata accessor for ZStack<ForEach<[StackItem], Int, AnyView>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>(uint64_t a1)
{
}

void type metadata accessor for MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>()
{
  if (!lazy cache variable for type metadata for MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>)
  {
    type metadata accessor for ImageProviderBox<Image.ResizableProvider>(255, &lazy cache variable for type metadata for _ViewModifier_Content<StackItemModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier, (uint64_t)&type metadata for StackItemModifier, MEMORY[0x1E4F408E0]);
    lazy protocol witness table accessor for type _ViewModifier_Content<StackItemModifier> and conformance _ViewModifier_Content<A>();
    unint64_t v0 = type metadata accessor for MultimodalNavigationStackViewHost();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<StackItemModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<StackItemModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<StackItemModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for ImageProviderBox<Image.ResizableProvider>(255, &lazy cache variable for type metadata for _ViewModifier_Content<StackItemModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackItemModifier and conformance StackItemModifier, (uint64_t)&type metadata for StackItemModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<StackItemModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>)
  {
    _s7SwiftUI24ReadDestinationsModifier33_EA42A490FE48784768DCEF705CD04CF4LLVyAA018ResolvedNavigationD0VGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<GradientBackground, _ShadowEffect>, (uint64_t)&type metadata for GradientBackground, MEMORY[0x1E4F3F860], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<GradientBackground, _ShadowEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GradientBackground, _ShadowEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GradientBackground, _ShadowEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GradientBackground, _ShadowEffect> and conformance <> ModifiedContent<A, B>)
  {
    _s7SwiftUI24ReadDestinationsModifier33_EA42A490FE48784768DCEF705CD04CF4LLVyAA018ResolvedNavigationD0VGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<GradientBackground, _ShadowEffect>, (uint64_t)&type metadata for GradientBackground, MEMORY[0x1E4F3F860], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type GradientBackground and conformance GradientBackground();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GradientBackground, _ShadowEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GradientBackground and conformance GradientBackground()
{
  unint64_t result = lazy protocol witness table cache variable for type GradientBackground and conformance GradientBackground;
  if (!lazy protocol witness table cache variable for type GradientBackground and conformance GradientBackground)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GradientBackground and conformance GradientBackground);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationTitleBar and conformance MultimodalNavigationTitleBar()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalNavigationTitleBar and conformance MultimodalNavigationTitleBar;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitleBar and conformance MultimodalNavigationTitleBar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitleBar and conformance MultimodalNavigationTitleBar);
  }
  return result;
}

void type metadata accessor for _AnimationModifier<EquatableNavigationTitle?>()
{
  if (!lazy cache variable for type metadata for _AnimationModifier<EquatableNavigationTitle?>)
  {
    type metadata accessor for NavigationState.StackContent?(255, &lazy cache variable for type metadata for EquatableNavigationTitle?, (uint64_t)&unk_1ED4420D8, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type EquatableNavigationTitle? and conformance <A> A?(&lazy protocol witness table cache variable for type EquatableNavigationTitle? and conformance <A> A?, &lazy cache variable for type metadata for EquatableNavigationTitle?, (uint64_t)&unk_1ED4420D8, (void (*)(void))lazy protocol witness table accessor for type EquatableNavigationTitle and conformance EquatableNavigationTitle);
    unint64_t v0 = type metadata accessor for _AnimationModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnimationModifier<EquatableNavigationTitle?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EquatableNavigationTitle and conformance EquatableNavigationTitle()
{
  unint64_t result = lazy protocol witness table cache variable for type EquatableNavigationTitle and conformance EquatableNavigationTitle;
  if (!lazy protocol witness table cache variable for type EquatableNavigationTitle and conformance EquatableNavigationTitle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EquatableNavigationTitle and conformance EquatableNavigationTitle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for ImageProviderBox<Image.ResizableProvider>(255, &lazy cache variable for type metadata for _LayoutRoot<StackItemLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackItemLayout and conformance StackItemLayout, (uint64_t)&unk_1ED41BCE8, MEMORY[0x1E4F3F598]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for ImageProviderBox<Image.ResizableProvider>(255, &lazy cache variable for type metadata for _LayoutRoot<StackItemLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackItemLayout and conformance StackItemLayout, (uint64_t)&unk_1ED41BCE8, MEMORY[0x1E4F3F598]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EquatableNavigationTitle? and conformance <A> A?(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NavigationState.StackContent?(255, a2, a3, MEMORY[0x1E4FBB718]);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    lazy protocol witness table accessor for type EquatableNavigationTitle? and conformance <A> A?(&lazy protocol witness table cache variable for type CGFloat? and conformance <A> A?, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    unint64_t v3 = type metadata accessor for _PreferenceActionModifier();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, ;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, )
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceActionModifier<A>(&lazy protocol witness table cache variable for type _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceActionModifier<A>, &lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A,);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>();
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceActionModifier<A>(&lazy protocol witness table cache variable for type _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceActionModifier<A>, &lazy cache variable for type metadata for _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _TraitWritingModifier<ZIndexTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>();
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _TraitWritingModifier<TransitionTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>();
    lazy protocol witness table accessor for type _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>> and conformance <> _VariadicView.Tree<A, B>();
    lazy protocol witness table accessor for type _OverlayStyleModifier<Color> and conformance _OverlayStyleModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>();
    lazy protocol witness table accessor for type _LayoutRoot<StackItemLayout> and conformance _LayoutRoot<A>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, (void (*)(uint64_t))type metadata accessor for _AnimationModifier<EquatableNavigationTitle?>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher(&lazy protocol witness table cache variable for type _AnimationModifier<EquatableNavigationTitle?> and conformance _AnimationModifier<A>, (void (*)(uint64_t))type metadata accessor for _AnimationModifier<EquatableNavigationTitle?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>();
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _InsetViewModifier<MultimodalNavigationTitleBar> and conformance _InsetViewModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, type metadata accessor for ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>);
    lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>> and conformance _BackgroundModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>(255);
    lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher(&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>> and conformance GeometryReader<A>, type metadata accessor for GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _InsetViewModifier<MultimodalNavigationTitleBar> and conformance _InsetViewModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _InsetViewModifier<MultimodalNavigationTitleBar> and conformance _InsetViewModifier<A>;
  if (!lazy protocol witness table cache variable for type _InsetViewModifier<MultimodalNavigationTitleBar> and conformance _InsetViewModifier<A>)
  {
    type metadata accessor for ImageProviderBox<Image.ResizableProvider>(255, &lazy cache variable for type metadata for _InsetViewModifier<MultimodalNavigationTitleBar>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalNavigationTitleBar and conformance MultimodalNavigationTitleBar, (uint64_t)&type metadata for MultimodalNavigationTitleBar, MEMORY[0x1E4F403B0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _InsetViewModifier<MultimodalNavigationTitleBar> and conformance _InsetViewModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _OverlayStyleModifier<Color> and conformance _OverlayStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _OverlayStyleModifier<Color> and conformance _OverlayStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type _OverlayStyleModifier<Color> and conformance _OverlayStyleModifier<A>)
  {
    _s7SwiftUI24ReadDestinationsModifier33_EA42A490FE48784768DCEF705CD04CF4LLVyAA018ResolvedNavigationD0VGMaTm_0(255, &lazy cache variable for type metadata for _OverlayStyleModifier<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F414D0], MEMORY[0x1E4F40870]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayStyleModifier<Color> and conformance _OverlayStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ZIndexTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<ZIndexTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ZIndexTraitKey> and conformance _TraitWritingModifier<A>)
  {
    _s7SwiftUI24ReadDestinationsModifier33_EA42A490FE48784768DCEF705CD04CF4LLVyAA018ResolvedNavigationD0VGMaTm_0(255, &lazy cache variable for type metadata for _TraitWritingModifier<ZIndexTraitKey>, MEMORY[0x1E4F3FA58], MEMORY[0x1E4F3FA50], MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ZIndexTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceActionModifier<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BarTransitionProgress and conformance BarTransitionProgress()
{
  unint64_t result = lazy protocol witness table cache variable for type BarTransitionProgress and conformance BarTransitionProgress;
  if (!lazy protocol witness table cache variable for type BarTransitionProgress and conformance BarTransitionProgress)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BarTransitionProgress and conformance BarTransitionProgress);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 160);
  uint64_t v5 = *(void *)(a1 + 168);
  uint64_t v8 = *(void *)(a1 + 176);
  uint64_t v9 = *(void *)(a1 + 152);
  uint64_t v7 = *(void *)(a1 + 184);
  uint64_t v13 = *(void *)(a1 + 312);
  uint64_t v14 = *(void *)(a1 + 304);
  uint64_t v11 = *(void *)(a1 + 328);
  uint64_t v12 = *(void *)(a1 + 320);
  uint64_t v10 = *(void *)(a1 + 336);
  swift_release();
  swift_release();
  outlined consume of Environment<Color?>.Content(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NavigationTitleStorage?(v9, v4, v5, v8, v7);
  swift_release();
  outlined consume of NavigationTitleStorage?(v14, v13, v12, v11, v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTrans(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransitionProgress>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransi)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>();
    type metadata accessor for ImageProviderBox<Image.ResizableProvider>(255, &lazy cache variable for type metadata for _ValueActionModifier2<BarTransitionProgress>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarTransitionProgress and conformance BarTransitionProgress, (uint64_t)&type metadata for BarTransitionProgress, MEMORY[0x1E4F408C8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransi);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTr()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransitionProgress>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _ValueActionModifier2<BarTransitionProgress> and conformance _ValueActionModifier2<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ValueActionModifier2<BarTransitionProgress> and conformance _ValueActionModifier2<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ValueActionModifier2<BarTransitionProgress> and conformance _ValueActionModifier2<A>;
  if (!lazy protocol witness table cache variable for type _ValueActionModifier2<BarTransitionProgress> and conformance _ValueActionModifier2<A>)
  {
    type metadata accessor for ImageProviderBox<Image.ResizableProvider>(255, &lazy cache variable for type metadata for _ValueActionModifier2<BarTransitionProgress>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarTransitionProgress and conformance BarTransitionProgress, (uint64_t)&type metadata for BarTransitionProgress, MEMORY[0x1E4F408C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ValueActionModifier2<BarTransitionProgress> and conformance _ValueActionModifier2<A>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTransitionPr(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 168);
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v9 = *(void *)(a1 + 152);
  uint64_t v6 = *(void *)(a1 + 184);
  uint64_t v7 = *(void *)(a1 + 176);
  uint64_t v13 = *(void *)(a1 + 312);
  uint64_t v14 = *(void *)(a1 + 304);
  uint64_t v11 = *(void *)(a1 + 328);
  uint64_t v12 = *(void *)(a1 + 320);
  uint64_t v10 = *(void *)(a1 + 336);
  uint64_t v15 = *(void *)(a1 + 504);
  uint64_t v16 = *(void *)(a1 + 520);
  swift_release();
  swift_release();
  outlined consume of Environment<Color?>.Content(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NavigationTitleStorage?(v9, v8, v4, v7, v6);
  swift_release();
  outlined consume of NavigationTitleStorage?(v14, v13, v12, v11, v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v15);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v16);
  return a1;
}

uint64_t outlined release of StackItemModifier(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void *)(a1 + 96);
  uint64_t v9 = *(void **)(a1 + 224);
  char v8 = *(unsigned char *)(a1 + 232);
  uint64_t v11 = *(void *)(a1 + 240);
  char v10 = *(unsigned char *)(a1 + 248);
  char v12 = *(unsigned char *)(a1 + 264);
  uint64_t v13 = *(void *)(a1 + 256);
  swift_release();
  swift_release();
  outlined consume of NavigationTitleStorage?(v2, v3, v4, v5, v6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(v9, v8);
  outlined consume of Environment<Bool>.Content(v11, v10);
  outlined consume of Environment<Bool>.Content(v13, v12);
  swift_release();
  return a1;
}

uint64_t partial apply for closure #1 in StackItemModifier.updateScene(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(unsigned __int8 *)(v2 + 24);
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 48))(v4, v5, ObjectType, a2);
}

uint64_t sub_18817EE98()
{
  return swift_deallocObject();
}

uint64_t sub_18817EEA8()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ()(uint64_t a1)
{
  return thunk for @callee_guaranteed (@guaranteed FBSMutableSceneClientSettings) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t objectdestroy_30Tm()
{
  swift_release();
  swift_release();
  uint64_t v1 = *(void *)(v0 + 104);
  if (v1)
  {
    if (v1 == 1) {
      goto LABEL_7;
    }
    outlined consume of Text.Storage(*(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 112) != 1) {
    swift_release();
  }
  swift_release();
LABEL_7:
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(v0 + 240), *(unsigned char *)(v0 + 248));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 256), *(unsigned char *)(v0 + 264));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 272), *(unsigned char *)(v0 + 280));
  swift_release();

  return swift_deallocObject();
}

uint64_t *partial apply for closure #2 in closure #1 in StackItemModifier.body(content:)(uint64_t *a1)
{
  return closure #2 in closure #1 in StackItemModifier.body(content:)(a1, v1 + 16);
}

void type metadata accessor for AnyLocation<EquatableNavigationTitle?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for NavigationState.StackContent?(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for AnyLocation<EquatableNavigationTitle?>?()
{
  if (!lazy cache variable for type metadata for AnyLocation<EquatableNavigationTitle?>?)
  {
    type metadata accessor for AnyLocation<EquatableNavigationTitle?>(255, &lazy cache variable for type metadata for AnyLocation<EquatableNavigationTitle?>, &lazy cache variable for type metadata for EquatableNavigationTitle?, (uint64_t)&unk_1ED4420D8, MEMORY[0x1E4F3F458]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyLocation<EquatableNavigationTitle?>?);
    }
  }
}

uint64_t *outlined retain of State<EquatableNavigationTitle?>(uint64_t *a1)
{
  return a1;
}

uint64_t *outlined release of State<EquatableNavigationTitle?>(uint64_t *a1)
{
  return a1;
}

void type metadata accessor for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>()
{
  if (!lazy cache variable for type metadata for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>)
  {
    type metadata accessor for NSNotificationCenter.Publisher();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>();
    lazy protocol witness table accessor for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher(&lazy protocol witness table cache variable for type NSNotificationCenter.Publisher and conformance NSNotificationCenter.Publisher, MEMORY[0x1E4F27FC8]);
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>> and conformance <> ModifiedContent<A, B>);
    unint64_t v0 = type metadata accessor for SubscriptionView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SubscriptionView<NSNotificationCenter.Publisher, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>)
  {
    type metadata accessor for ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, &lazy cache variable for type metadata for _ValueActionModifier2<[StackItem]>, MEMORY[0x1E4F408C8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ZStack<ForEach<[StackItem], Int, AnyView>>, _AnimationModifier<[StackItem]>>, MultimodalNavigationChromeModifier>, _EnvironmentKeyWritingModifier<NavigationEnabled>>, _ValueActionModifier2<[StackItem]>>, _AppearanceActionModifier>);
    }
  }
}

void partial apply for closure #2 in StackItemsView.body.getter(char a1)
{
}

uint64_t partial apply for closure #3 in StackItemsView.body.getter(uint64_t a1, uint64_t *a2)
{
  return closure #3 in StackItemsView.body.getter(a1, a2, v2 + 16);
}

uint64_t objectdestroy_59Tm()
{
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(v0 + 312);
  long long v3 = *(_OWORD *)(v0 + 280);
  long long v4 = *(_OWORD *)(v0 + 296);
  long long v2 = *(_OWORD *)(v0 + 248);
  outlined consume of NavigationState.Base(*(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168),
    *(void *)(v0 + 176),
    *(void *)(v0 + 184),
    *(void *)(v0 + 192),
    *(void *)(v0 + 200),
    *(void *)(v0 + 208),
    *(void *)(v0 + 216),
    *(void *)(v0 + 224),
    *(void *)(v0 + 232),
    *(void *)(v0 + 240),
    v2,
    *((uint64_t *)&v2 + 1),
    *(void *)(v0 + 264),
    *(void *)(v0 + 272),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(void *)(v0 + 328));
  swift_weakDestroy();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 472), *(unsigned char *)(v0 + 480));
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(v0 + 488), *(unsigned char *)(v0 + 496));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t *partial apply for closure #4 in StackItemsView.body.getter()
{
  return closure #4 in StackItemsView.body.getter();
}

uint64_t _sSl7SwiftUIAA21NavigationColumnStateV7ElementRtzSi5IndexRtzrlE18collapsedItemCount6within09splitViewE0Siqd___AA0c5SplitmE0VSgtSkRd__AcDRtd__SiAFRtd__lFS2i_SitXEfU_SayACG_APTG5TA_0@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  return specialized closure #1 in Collection<>.collapsedItemCount<A>(within:splitViewState:)(a1, a2, *(uint64_t **)(v3 + 16), *(void *)(v3 + 24), a3);
}

void type metadata accessor for Task<(), Error>?(uint64_t a1)
{
}

void type metadata accessor for Task<(), Error>()
{
  if (!lazy cache variable for type metadata for Task<(), Error>)
  {
    type metadata accessor for Error();
    unint64_t v0 = type metadata accessor for Task();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Task<(), Error>);
    }
  }
}

uint64_t sub_18817F4EC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(v0 + 328);
  long long v3 = *(_OWORD *)(v0 + 296);
  long long v4 = *(_OWORD *)(v0 + 312);
  long long v2 = *(_OWORD *)(v0 + 264);
  outlined consume of NavigationState.Base(*(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160), *(void *)(v0 + 168), *(void *)(v0 + 176), *(void *)(v0 + 184),
    *(void *)(v0 + 192),
    *(void *)(v0 + 200),
    *(void *)(v0 + 208),
    *(void *)(v0 + 216),
    *(void *)(v0 + 224),
    *(void *)(v0 + 232),
    *(void *)(v0 + 240),
    *(void *)(v0 + 248),
    *(void *)(v0 + 256),
    v2,
    *((uint64_t *)&v2 + 1),
    *(void *)(v0 + 280),
    *(void *)(v0 + 288),
    v3,
    *((uint64_t *)&v3 + 1),
    v4,
    *((uint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    *(void *)(v0 + 344));
  swift_weakDestroy();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 488), *(unsigned char *)(v0 + 496));
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(v0 + 504), *(unsigned char *)(v0 + 512));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in StackItemsView.navigateBack(isAnimated:)(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in StackItemsView.navigateBack(isAnimated:)(a1, v4, v5, v1 + 32);
}

uint64_t partial apply for closure #1 in StackItemsView.updateClientSettings(allStackItems:)(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 16);
  uint64_t v5 = swift_bridgeObjectRetain();
  return v4(v5, ObjectType, a2);
}

uint64_t sub_18817F7A0()
{
  return swift_deallocObject();
}

uint64_t sub_18817F7B0()
{
  return swift_deallocObject();
}

uint64_t initializeWithCopy for OnScrollStateChange(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OnScrollStateChange(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  return a1;
}

uint64_t assignWithTake for OnScrollStateChange(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

void *type metadata accessor for OnScrollStateChange()
{
  return &unk_1ED42D1B8;
}

void *type metadata accessor for NavigationTitleActionModifier()
{
  return &unk_1ED456458;
}

uint64_t storeEnumTagSinglePayload for StackItemLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18817F9D4);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for StackItemLayout()
{
  return &unk_1ED41BCE8;
}

uint64_t sub_18817FA0C()
{
  return lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<RootItemModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<RootItemModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<RootItemModifier> and conformance _ViewModifier_Content<A>);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<RootItemModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RootItemModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>)
  {
    type metadata accessor for ImageProviderBox<Image.ResizableProvider>(255, &lazy cache variable for type metadata for _ViewModifier_Content<RootItemModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type RootItemModifier and conformance RootItemModifier, (uint64_t)&type metadata for RootItemModifier, MEMORY[0x1E4F408E0]);
    _s7SwiftUI24ReadDestinationsModifier33_EA42A490FE48784768DCEF705CD04CF4LLVyAA018ResolvedNavigationD0VGMaTm_0(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<RootItemModifier>, TransactionalPreferenceTransformModifier<NavigationTitleKey>>);
    }
  }
}

void type metadata accessor for ImageProviderBox<Image.ResizableProvider>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<RootItemModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<RootItemModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<RootItemModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for ImageProviderBox<Image.ResizableProvider>(255, &lazy cache variable for type metadata for _ViewModifier_Content<RootItemModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type RootItemModifier and conformance RootItemModifier, (uint64_t)&type metadata for RootItemModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<RootItemModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t sub_18817FC20()
{
  return lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<Mu, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBo, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitl);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBo(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionMo()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>,)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTrans(255);
    _s7SwiftUI24ReadDestinationsModifier33_EA42A490FE48784768DCEF705CD04CF4LLVyAA018ResolvedNavigationD0VGMaTm_0(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F408C8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>,);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitl()
{
  return lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigati, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKe);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKe()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPad;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPad)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionMo();
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView.Tree<_VStackLayout, ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, RootItemModifier>>, ReadDestinationsModifier<ResolvedNavigationDestinations>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _Valu, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTrans, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPaddingKey>>, _ValueActionModifier2<BarTr);
    lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackItemLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ModifiedContent<MultimodalNavigationStackViewHost<_ViewModifier_Content<StackItemModifier>>, _SafeAreaRegionsIgnoringLayout>>, NavigationTitleActionModifier>, _BackgroundModifier<ModifiedContent<GradientBackground, _ShadowEffect>>>, OnScrollStateChange>, _InsetViewModifier<MultimodalNavigationTitleBar>>, _AnimationModifier<EquatableNavigationTitle?>>>, _OverlayStyleModifier<Color>>, _TraitWritingModifier<TransitionTraitKey>>, _TraitWritingModifier<ZIndexTraitKey>>, _AllowsHitTestingModifier>, AccessibilityAttachmentModifier>, _PreferenceActionModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, _PreferenceActionModifier<MultimodalNavigationTitleBottomPad);
  }
  return result;
}

_UNKNOWN **sub_18817FEC0()
{
  return &protocol witness table for SubscriptionView<A, B>;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationTitleActionModifier()
{
  return &protocol witness table for NavigationTitleActionModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnScrollStateChange()
{
  return &protocol witness table for OnScrollStateChange;
}

unint64_t instantiation function for generic protocol witness table for StackItemLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type StackItemLayout and conformance StackItemLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

double specialized Double.init(sign:exponent:significand:)(char a1, uint64_t a2, double a3)
{
  double result = -a3;
  if ((a1 & 1) == 0) {
    double result = a3;
  }
  uint64_t v5 = (*(void *)&a3 >> 52) & 0x7FFLL;
  if (v5 != 2047 && v5 | *(void *)&a3 & 0xFFFFFFFFFFFFFLL)
  {
    if (a2 >= -1022)
    {
      if (a2 >= 1024)
      {
        if (a2 >= 3069) {
          a2 = 3069;
        }
        do
        {
          a2 -= 1023;
          double result = result * 8.98846567e307;
        }
        while ((unint64_t)a2 > 0x3FF);
      }
    }
    else
    {
      if (a2 <= -3066) {
        uint64_t v6 = -3066;
      }
      else {
        uint64_t v6 = a2;
      }
      do
      {
        a2 = v6 + 1022;
        double result = result * 2.22507386e-308;
        BOOL v7 = __CFADD__(v6, 2044);
        v6 += 1022;
      }
      while (!v7);
    }
    return result * COERCE_DOUBLE(((a2 << 52) + 0x3FF0000000000000) & 0x7FF0000000000000);
  }
  return result;
}

uint64_t specialized static ScrollStateActionBinding.bottomBarTransitionProgress(state:)()
{
  if (one-time initialization token for bottomBarTransitionDistance != -1) {
    swift_once();
  }
  ScrollGeometry.contentSize.getter();
  ScrollGeometry.bounds.getter();
  CGRectGetHeight(v1);
  return ScrollGeometry.contentOffset.getter();
}

uint64_t specialized StackItemLayout.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, __int16 a7)
{
  CGFloat v8 = a1;
  if ((a7 & 0x101) == 0)
  {
    *(CGRect *)(&a3 - 2) = CGRectOffset(*(CGRect *)&a1, a3 / -3.0, 0.0);
    CGFloat v8 = v11;
    a2 = v12;
  }
  CGFloat v9 = a3;
  CGFloat v13 = v8;
  CGFloat v14 = a2;
  CGRectGetMidX(*(CGRect *)(&a3 - 2));
  v18.origin.x = v8;
  v18.origin.y = a2;
  v18.size.width = v9;
  v18.size.height = a4;
  CGRectGetMidY(v18);
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = result;
    if (result)
    {
      uint64_t result = 0;
      do
      {
        uint64_t v17 = result + 1;
        LayoutSubviews.subscript.getter();
        static UnitPoint.center.getter();
        LayoutSubview.place(at:anchor:proposal:)();
        uint64_t result = v17;
      }
      while (v16 != v17);
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationTitleBinder and conformance NavigationTitleBinder()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationTitleBinder and conformance NavigationTitleBinder;
  if (!lazy protocol witness table cache variable for type NavigationTitleBinder and conformance NavigationTitleBinder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationTitleBinder and conformance NavigationTitleBinder);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationTitleBinder and conformance NavigationTitleBinder;
  if (!lazy protocol witness table cache variable for type NavigationTitleBinder and conformance NavigationTitleBinder)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationTitleBinder and conformance NavigationTitleBinder);
  }
  return result;
}

uint64_t *outlined release of (EquatableNavigationTitle?, EquatableNavigationTitle?)(uint64_t *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[9];
  uint64_t v4 = a1[10];
  uint64_t v5 = a1[11];
  uint64_t v6 = a1[12];
  outlined consume of NavigationTitleStorage?(*a1, a1[1], a1[2], a1[3], a1[4]);
  outlined consume of NavigationTitleStorage?(v2, v3, v4, v5, v6);
  return a1;
}

uint64_t sub_188180438()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 56);
  if (v1)
  {
    if (v1 == 1) {
      goto LABEL_7;
    }
    outlined consume of Text.Storage(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 64) != 1) {
    swift_release();
  }
  swift_release();
LABEL_7:

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in NavigationTitleBinder.updateValue()()
{
  uint64_t v1 = *(uint64_t (**)(unsigned char *))(v0 + 16);
  _s7SwiftUI15NavigationStateV12StackContentVSgWObTm_1(v0 + 32, (uint64_t)v3, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
  return v1(v3);
}

unint64_t lazy protocol witness table accessor for type ScrollStateActionBinding and conformance ScrollStateActionBinding()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollStateActionBinding and conformance ScrollStateActionBinding;
  if (!lazy protocol witness table cache variable for type ScrollStateActionBinding and conformance ScrollStateActionBinding)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollStateActionBinding and conformance ScrollStateActionBinding);
  }
  return result;
}

uint64_t sub_18818055C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #5 in ScrollStateActionBinding.updateValue()()
{
  return closure #5 in ScrollStateActionBinding.updateValue()(v0 + 16, v0 + 64);
}

uint64_t getEnumTagSinglePayload for ScrollStateActionBinding(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 44)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 36);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollStateActionBinding(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 44) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 44) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 36) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for ScrollStateActionBinding()
{
  return &unk_1ED443640;
}

uint64_t destroy for NavigationTitleBinder(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 56);
  if ((unint64_t)(v1 - 1) >= 2)
  {
    uint64_t v2 = result;
    if (v1)
    {
      outlined consume of Text.Storage(*(void *)(result + 32), *(void *)(result + 40), *(unsigned char *)(result + 48));
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v2 + 64) != 1) {
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for NavigationTitleBinder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(void *)(a1 + 17) = *(void *)(a2 + 17);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  BOOL v4 = (_OWORD *)(a1 + 32);
  int v5 = (_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 56);
  if (v6)
  {
    if (v6 == 1 || v6 == 2)
    {
      long long v7 = *(_OWORD *)(a2 + 48);
      *BOOL v4 = *v5;
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      return a1;
    }
    uint64_t v9 = *(void *)(a2 + 32);
    uint64_t v10 = *(void *)(a2 + 40);
    char v11 = *(unsigned char *)(a2 + 48);
    outlined copy of Text.Storage(v9, v10, v11);
    *(void *)(a1 + 32) = v9;
    *(void *)(a1 + 40) = v10;
    *(unsigned char *)(a1 + 48) = v11;
    *(void *)(a1 + 56) = v6;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 48);
    *BOOL v4 = *v5;
    *(_OWORD *)(a1 + 48) = v8;
  }
  uint64_t v12 = *(void *)(a2 + 64);
  if (v12 != 1) {
    uint64_t v12 = swift_retain();
  }
  *(void *)(a1 + 64) = v12;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationTitleBinder(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  BOOL v4 = (long long *)(a1 + 32);
  int v5 = (long long *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a2 + 56);
  if (v6 != 2)
  {
    if (v7 == 2)
    {
      outlined destroy of NavigationTitleStorage?(a1 + 32, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
LABEL_8:
      long long v12 = v5[1];
      long long v11 = v5[2];
      long long v13 = *v5;
      *(long long *)((char *)v4 + 41) = *(long long *)((char *)v5 + 41);
      v4[1] = v12;
      v4[2] = v11;
      *BOOL v4 = v13;
      return a1;
    }
    if (v6 == 1)
    {
      if (v7)
      {
        if (v7 == 1)
        {
LABEL_5:
          long long v8 = *v5;
          long long v9 = *(_OWORD *)(a2 + 48);
          long long v10 = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
          *(_OWORD *)(a1 + 48) = v9;
          *(_OWORD *)(a1 + 64) = v10;
          *BOOL v4 = v8;
          return a1;
        }
        goto LABEL_12;
      }
LABEL_13:
      long long v17 = *(_OWORD *)(a2 + 48);
      *BOOL v4 = *v5;
      *(_OWORD *)(a1 + 48) = v17;
      goto LABEL_14;
    }
    if (v7 == 1)
    {
      outlined destroy of NavigationTitleStorage(a1 + 32);
      goto LABEL_8;
    }
    if (v6)
    {
      if (v7)
      {
        uint64_t v20 = *(void *)(a2 + 32);
        uint64_t v21 = *(void *)(a2 + 40);
        char v22 = *(unsigned char *)(a2 + 48);
        outlined copy of Text.Storage(v20, v21, v22);
        uint64_t v23 = *(void *)(a1 + 32);
        uint64_t v24 = *(void *)(a1 + 40);
        char v25 = *(unsigned char *)(a1 + 48);
        *(void *)(a1 + 32) = v20;
        *(void *)(a1 + 40) = v21;
        *(unsigned char *)(a1 + 48) = v22;
        outlined consume of Text.Storage(v23, v24, v25);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of Text(a1 + 32);
        long long v29 = v5[1];
        *BOOL v4 = *v5;
        v4[1] = v29;
      }
    }
    else if (v7)
    {
      uint64_t v26 = *(void *)(a2 + 32);
      uint64_t v27 = *(void *)(a2 + 40);
      char v28 = *(unsigned char *)(a2 + 48);
      outlined copy of Text.Storage(v26, v27, v28);
      *(void *)(a1 + 32) = v26;
      *(void *)(a1 + 40) = v27;
      *(unsigned char *)(a1 + 48) = v28;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v30 = *(_OWORD *)(a2 + 48);
      *BOOL v4 = *v5;
      *(_OWORD *)(a1 + 48) = v30;
    }
    int v31 = (uint64_t *)(a1 + 64);
    uint64_t v32 = *(void *)(a2 + 64);
    if (*(void *)(a1 + 64) == 1)
    {
      if (v32 != 1)
      {
        *int v31 = v32;
        swift_retain();
        goto LABEL_35;
      }
      uint64_t v33 = 1;
    }
    else
    {
      if (v32 != 1)
      {
        *int v31 = v32;
        swift_retain();
        swift_release();
        goto LABEL_35;
      }
      outlined destroy of Transaction(a1 + 64);
      uint64_t v33 = *(void *)(a2 + 64);
    }
    *int v31 = v33;
LABEL_35:
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_retain();
    swift_release();
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    return a1;
  }
  if (!v7) {
    goto LABEL_13;
  }
  if (v7 == 1 || v7 == 2) {
    goto LABEL_5;
  }
LABEL_12:
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 40);
  char v16 = *(unsigned char *)(a2 + 48);
  outlined copy of Text.Storage(v14, v15, v16);
  *(void *)(a1 + 32) = v14;
  *(void *)(a1 + 40) = v15;
  *(unsigned char *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
LABEL_14:
  uint64_t v18 = *(void *)(a2 + 64);
  if (v18 != 1) {
    uint64_t v18 = swift_retain();
  }
  *(void *)(a1 + 64) = v18;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t assignWithTake for NavigationTitleBinder(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  unsigned int v3 = (_OWORD *)(a1 + 32);
  BOOL v4 = (_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a2 + 56);
  if (v5 == 2) {
    goto LABEL_7;
  }
  if (v6 != 2)
  {
    if (v5 == 1) {
      goto LABEL_7;
    }
    if (v6 == 1)
    {
      outlined destroy of NavigationTitleStorage(a1 + 32);
      goto LABEL_7;
    }
    if (v5)
    {
      if (v6)
      {
        char v10 = *(unsigned char *)(a2 + 48);
        uint64_t v11 = *(void *)(a1 + 32);
        uint64_t v12 = *(void *)(a1 + 40);
        char v13 = *(unsigned char *)(a1 + 48);
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        *(unsigned char *)(a1 + 48) = v10;
        outlined consume of Text.Storage(v11, v12, v13);
        *(void *)(a1 + 56) = v6;
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
      outlined destroy of Text(a1 + 32);
    }
    long long v14 = v4[1];
    *unsigned int v3 = *v4;
    v3[1] = v14;
LABEL_14:
    uint64_t v15 = (uint64_t *)(a1 + 64);
    uint64_t v16 = *(void *)(a2 + 64);
    if (*(void *)(a1 + 64) != 1)
    {
      if (v16 != 1)
      {
        *uint64_t v15 = v16;
        swift_release();
        goto LABEL_19;
      }
      outlined destroy of Transaction(a1 + 64);
      uint64_t v16 = 1;
    }
    *uint64_t v15 = v16;
LABEL_19:
    *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    swift_release();
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    return a1;
  }
  outlined destroy of NavigationTitleStorage?(a1 + 32, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage);
LABEL_7:
  long long v7 = v4[1];
  *unsigned int v3 = *v4;
  v3[1] = v7;
  v3[2] = v4[2];
  *(_OWORD *)((char *)v3 + 41) = *(_OWORD *)((char *)v4 + 41);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationTitleBinder(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  unint64_t v3 = *(void *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  if (v4 <= 1) {
    int v4 = 1;
  }
  int v6 = v4 - 2;
  if (v5 < 1) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationTitleBinder(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)unint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(void *)(result + 56) = a2 + 2;
    }
  }
  return result;
}

void *type metadata accessor for NavigationTitleBinder()
{
  return &unk_1ED435EE0;
}

Swift::Void __swiftcall ScrollViewNode.resetBehavior(completed:)(Swift::Bool completed)
{
  uint64_t v2 = v1;
  unint64_t v3 = (_OWORD *)(v1 + 80);
  swift_beginAccess();
  uint64_t v4 = *(void *)(v1 + 152);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    int v6 = (_DWORD *)(v4 + 56);
    do
    {
      uint64_t v7 = *((void *)v6 - 3);
      double v8 = *((double *)v6 - 2);
      double v9 = *((double *)v6 - 1);
      int v10 = *v6;
      swift_unownedRetainStrong();
      swift_beginAccess();
      int v11 = *(_DWORD *)(v7 + 148);
      swift_unownedRetain();
      swift_release();
      if (v11 == v10)
      {
        swift_unownedRetainStrong();
        ScrollViewNode.bindingSafeOffset(_:)(v8, v9);
        *(double *)int v42 = v8;
        *(double *)&v42[1] = v9;
        *(double *)&v42[2] = v12;
        *(double *)&v42[3] = v13;
        long long v43 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        ScrollViewNode.commitScrollTransaction(_:value:)(v42, v12, v13);
        swift_release();
      }
      swift_unownedRelease();
      v6 += 8;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = *(void *)(v2 + 120);
  int v15 = *(unsigned __int16 *)(v2 + 144);
  int v16 = v15 | (*(unsigned __int8 *)(v2 + 146) << 16);
  if ((v16 & 0xC00000) != 0x400000 || v14 == 0)
  {
    int v27 = v15 | (*(unsigned __int8 *)(v2 + 146) << 16);
    uint64_t v41 = *(void *)(v2 + 120);
  }
  else
  {
    uint64_t v37 = *(void *)(v2 + 136);
    unsigned int v38 = v3;
    uint64_t v18 = *(void *)(v2 + 128);
    uint64_t v39 = *(void *)(v2 + 104);
    uint64_t v19 = *(void *)(v2 + 88);
    uint64_t v35 = *(void *)(v2 + 96);
    uint64_t v36 = *(void *)(v2 + 112);
    uint64_t v20 = *(void *)(v2 + 80);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v14;
    *(void *)(v21 + 24) = v18;
    uint64_t v22 = swift_allocObject();
    *(void *)(v22 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
    *(void *)(v22 + 24) = v21;
    uint64_t v23 = v14;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
    *(void *)(v24 + 24) = v22;
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
    *(void *)(v25 + 24) = v24;
    *(unsigned char *)(v25 + 32) = completed;
    swift_retain_n();
    outlined copy of ScrollViewBehavior.Phase(v20, v19, v35, v39, v36, v23, v18, v37, v16);
    outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v23, v18);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v26 = v18;
    unint64_t v3 = v38;
    outlined consume of ScrollViewBehavior.Phase(v20, v19, v35, v39, v36, v23, v26, v37, v16);
    swift_release();
    uint64_t v41 = *(void *)(v2 + 120);
    int v27 = *(unsigned __int16 *)(v2 + 144) | (*(unsigned __int8 *)(v2 + 146) << 16);
  }
  uint64_t v28 = *(void *)(v2 + 80);
  uint64_t v29 = *(void *)(v2 + 88);
  uint64_t v30 = *(void *)(v2 + 96);
  uint64_t v31 = *(void *)(v2 + 104);
  uint64_t v32 = *(void *)(v2 + 112);
  uint64_t v33 = *(void *)(v2 + 128);
  uint64_t v34 = *(void *)(v2 + 136);
  *unint64_t v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *(unsigned char *)(v2 + 146) = 0x80;
  *(_WORD *)(v2 + 144) = 0;
  ++*(_DWORD *)(v2 + 148);
  *(void *)(v2 + 152) = MEMORY[0x1E4FBC860];
  swift_endAccess();
  outlined consume of ScrollViewBehavior.Phase(v28, v29, v30, v31, v32, v41, v33, v34, v27);
  swift_bridgeObjectRelease();
}

uint64_t ScrollViewNode.scrollableDirections(includeAlwaysBounceOptions:)@<X0>(char a1@<W0>, unsigned char *a2@<X8>)
{
  unint64_t v3 = v2;
  swift_beginAccess();
  double v6 = v2[8];
  double v7 = v2[9];
  double v8 = v2[42];
  double v9 = v2[43];
  swift_beginAccess();
  CGSize.inset(by:)();
  double v11 = v8 - v10;
  CGSize.inset(by:)();
  double v13 = v9 - v12;
  if (v11 < 0.0) {
    double v14 = 0.0;
  }
  else {
    double v14 = v11;
  }
  if (v13 < 0.0) {
    double v13 = 0.0;
  }
  int v15 = v14 - v6 > 0.5;
  if (v6 > 0.5) {
    v15 |= 2u;
  }
  if (v13 - v7 > 0.5) {
    v15 |= 4u;
  }
  if (v7 > 0.5) {
    int v16 = v15 | 8;
  }
  else {
    int v16 = v15;
  }
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    ScrollViewNode.scrollableDirections(includeAlwaysBounceOptions:)(&v25, 0);
    uint64_t result = swift_release();
    char v18 = ~(_BYTE)v25;
  }
  else
  {
    char v18 = -1;
  }
  if (one-time initialization token for horizontal != -1) {
    uint64_t result = swift_once();
  }
  int v19 = (static _EventDirections.horizontal & v18);
  if ((v19 & ~v16) == 0) {
    int v19 = 0;
  }
  int v20 = v19 | v16;
  if ((static _EventDirections.horizontal & v16) != 0) {
    int v16 = v20;
  }
  if (one-time initialization token for vertical != -1) {
    uint64_t result = swift_once();
  }
  char v21 = static _EventDirections.vertical;
  int v22 = (static _EventDirections.vertical & v18);
  if ((v22 & ~v16) == 0) {
    int v22 = 0;
  }
  int v23 = v22 | v16;
  if ((static _EventDirections.vertical & v16) == 0) {
    int v23 = v16;
  }
  if (a1)
  {
    if (*((unsigned char *)v3 + 249) == 1)
    {
      int v24 = static _EventDirections.horizontal;
      if ((static _EventDirections.horizontal & ~(_BYTE)v23) == 0) {
        int v24 = 0;
      }
      v23 |= v24;
    }
    if (((_BYTE)v3[31] & ((static _EventDirections.vertical & ~v23) != 0)) == 0) {
      char v21 = 0;
    }
    LOBYTE(v23) = v21 | v23;
  }
  *a2 = v23;
  return result;
}

double protocol witness for static View._makeView(view:inputs:) in conformance _ScrollView<A>.Main@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static _ScrollView.Main._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

double static _ScrollView.Main._makeView(view:inputs:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v77 = a4;
  uint64_t v76 = a3;
  uint64_t v71 = a5;
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  unsigned int v73 = *a1;
  unint64_t v91 = *(void *)a2;
  int v87 = *(_DWORD *)(a2 + 8);
  unint64_t v83 = *(void *)(a2 + 16);
  unsigned int v86 = *(_DWORD *)(a2 + 24);
  unsigned int v85 = *(_DWORD *)(a2 + 28);
  unsigned int v79 = *(_DWORD *)(a2 + 32);
  unsigned int v78 = *(_DWORD *)(a2 + 36);
  uint64_t v88 = *(void *)(a2 + 40);
  unint64_t v93 = *(void *)(a2 + 48);
  unsigned int v5 = *(_DWORD *)(a2 + 56);
  unsigned int v82 = *(_DWORD *)(a2 + 60);
  unsigned int v90 = *(_DWORD *)(a2 + 64);
  unsigned int v89 = *(_DWORD *)(a2 + 68);
  unsigned int v84 = *(_DWORD *)(a2 + 72);
  unsigned int v81 = *(_DWORD *)(a2 + 76);
  int v80 = *(_DWORD *)(a2 + 80);
  type metadata accessor for ScrollViewNode();
  type metadata accessor for External<ScrollViewNode>(0, &lazy cache variable for type metadata for External<ScrollViewNode>, v6, (uint64_t (*)(uint64_t))type metadata accessor for ScrollViewNode, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<ScrollViewNode> and conformance External<A>(v7, v8, v9);
  unsigned int v10 = Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for ViewGraph();
  uint64_t v11 = MEMORY[0x18C114EE0]() + 200;
  swift_beginAccess();
  uint64_t v12 = MEMORY[0x18C119DF0](v11);
  swift_release();
  if (v12)
  {
    swift_getObjectType();
    uint64_t v13 = swift_conformsToProtocol2();
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    if (v13) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 0;
    }
    if (v15) {
      goto LABEL_12;
    }
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v15 = 0;
  }
  uint64_t v14 = 0;
LABEL_12:
  unint64_t v16 = AGCreateWeakAttribute();
  swift_allocObject();
  uint64_t v17 = specialized ScrollViewNode.init(host:attribute:)(v15, v14, v16);
  swift_unknownObjectRelease();
  AGGraphSetValue();
  unint64_t v108 = v83;
  int v106 = v87;
  *(void *)&long long v109 = __PAIR64__(v85, v86);
  uint64_t v110 = v88;
  unint64_t v111 = v93;
  HIDWORD(v109) = v78;
  *(void *)&long long v112 = __PAIR64__(v82, v5);
  HIDWORD(v112) = v89;
  unint64_t v113 = __PAIR64__(v81, v84);
  int v114 = v80;
  _ViewInputs.size.getter();
  unint64_t v105 = __PAIR64__(HIDWORD(v91), v73);
  unsigned int v92 = v5;
  LODWORD(v72) = v10;
  type metadata accessor for _ScrollView.Main();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  closure #1 in static _ScrollView.Main._makeView(view:inputs:)(1);
  AGGraphCreateOffsetAttribute2();
  LODWORD(v70) = *MEMORY[0x1E4F4E7A0];
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ContentSize and conformance ContentSize();
  unint64_t v75 = v17;
  swift_retain();
  uint64_t v74 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  unsigned int v69 = _GraphValue.value.getter();
  LODWORD(v68) = _ViewInputs.size.getter();
  LODWORD(v67) = _ViewInputs.environment.getter();
  unsigned int v66 = _ViewInputs.time.getter();
  unsigned int v18 = v79;
  LODWORD(v65) = _ViewInputs.transaction.getter();
  *(void *)((char *)&v109 + 4) = __PAIR64__(v79, v85);
  *((void *)&v109 + 1) = __PAIR64__(v78, v79);
  uint64_t v110 = v88;
  unint64_t v111 = v93;
  unsigned int v19 = v78;
  LODWORD(v112) = v92;
  *(void *)((char *)&v112 + 4) = __PAIR64__(v90, v82);
  *((void *)&v112 + 1) = __PAIR64__(v89, v90);
  unsigned int v20 = v81;
  unint64_t v113 = __PAIR64__(v81, v84);
  int v21 = v80;
  int v114 = v80;
  uint64_t v22 = _ViewInputs.viewPhase.getter();
  unint64_t v105 = __PAIR64__(v69, v10);
  int v106 = (int)v68;
  int v107 = v67;
  unint64_t v108 = __PAIR64__(v65, v66);
  LODWORD(v109) = v22;
  BYTE4(v109) = 0;
  MEMORY[0x1F4188790](v22);
  uint64_t v61 = type metadata accessor for ScrollViewUpdate();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<_ScrollViewProxy>(0, &lazy cache variable for type metadata for Attribute<_ScrollViewProxy>, (uint64_t)&type metadata for _ScrollViewProxy, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v105, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_29, (uint64_t)v60, v61, MEMORY[0x1E4FBC248], v23, MEMORY[0x1E4FBC278], v24);
  uint64_t v67 = 0;
  uint64_t v72 = v96;
  _GraphValue.init(_:)();
  type metadata accessor for Attribute<_ScrollViewProxy>(0, &lazy cache variable for type metadata for _GraphValue<_ScrollViewProxy>, (uint64_t)&type metadata for _ScrollViewProxy, MEMORY[0x1E4F3F590]);
  unsigned int v69 = _GraphValue.value.getter();
  unint64_t v105 = v91;
  unint64_t v25 = v83;
  unint64_t v108 = v83;
  int v106 = v87;
  unsigned int v26 = v86;
  *(void *)&long long v109 = __PAIR64__(v85, v86);
  *((void *)&v109 + 1) = __PAIR64__(v19, v18);
  long long v68 = &v111;
  uint64_t v110 = v88;
  unint64_t v111 = v93;
  LODWORD(v17) = v19;
  *(void *)&long long v112 = __PAIR64__(v82, v92);
  *((void *)&v112 + 1) = __PAIR64__(v89, v90);
  unint64_t v113 = __PAIR64__(v20, v84);
  unsigned int v27 = v20;
  int v114 = v21;
  unint64_t v96 = v91;
  unint64_t v28 = v91;
  LODWORD(v97) = v87;
  int v29 = v87;
  unint64_t v98 = v83;
  *(void *)&long long v99 = __PAIR64__(v85, v86);
  *((void *)&v99 + 1) = __PAIR64__(v19, v18);
  uint64_t v100 = v88;
  unint64_t v101 = v93;
  LODWORD(v102) = v92;
  *(void *)((char *)&v102 + 4) = __PAIR64__(v90, v82);
  unsigned int v30 = v82;
  HIDWORD(v102) = v89;
  unint64_t v103 = __PAIR64__(v27, v84);
  unsigned int v31 = v84;
  int v104 = v21;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  unsigned int v66 = _ViewInputs.animatedSize()();
  unint64_t v96 = v28;
  unint64_t v32 = v28;
  LODWORD(v28) = v29;
  LODWORD(v97) = v29;
  unint64_t v98 = v25;
  *(void *)&long long v99 = __PAIR64__(v85, v26);
  unsigned int v33 = v85;
  unsigned int v34 = v79;
  *((void *)&v99 + 1) = __PAIR64__(v17, v79);
  uint64_t v35 = v88;
  uint64_t v100 = v88;
  unint64_t v101 = v93;
  *(void *)&long long v102 = __PAIR64__(v30, v92);
  *((void *)&v102 + 1) = __PAIR64__(v89, v90);
  unint64_t v103 = __PAIR64__(v81, v31);
  unsigned int v36 = v81;
  int v37 = v80;
  int v104 = v80;
  unsigned int v64 = _ViewInputs.animatedPosition()();
  unint64_t v96 = v32;
  LODWORD(v97) = v28;
  unint64_t v38 = v83;
  unint64_t v98 = v83;
  *(void *)&long long v99 = __PAIR64__(v33, v26);
  *((void *)&v99 + 1) = __PAIR64__(v17, v34);
  uint64_t v100 = v35;
  unint64_t v101 = v93;
  *(void *)&long long v102 = __PAIR64__(v82, v92);
  unsigned int v39 = v82;
  LODWORD(v28) = v90;
  *((void *)&v102 + 1) = __PAIR64__(v89, v90);
  unint64_t v103 = __PAIR64__(v36, v84);
  int v104 = v37;
  unsigned int v63 = _ViewInputs.transform.getter();
  unint64_t v96 = v91;
  LODWORD(v97) = v87;
  unint64_t v98 = v38;
  *(void *)&long long v99 = __PAIR64__(v33, v86);
  *((void *)&v99 + 1) = __PAIR64__(v17, v34);
  uint64_t v100 = v35;
  unint64_t v101 = v93;
  *(void *)&long long v102 = __PAIR64__(v39, v92);
  *((void *)&v102 + 1) = __PAIR64__(v89, v28);
  LODWORD(v28) = v89;
  LODWORD(v17) = v84;
  unint64_t v103 = __PAIR64__(v36, v84);
  int v104 = v37;
  uint64_t v40 = _ViewInputs.weakScrollable.getter();
  long long v65 = &v63;
  unint64_t v96 = __PAIR64__(v64, v66);
  unint64_t v97 = __PAIR64__(v74, v63);
  uint64_t v41 = v74;
  unint64_t v98 = v40;
  LODWORD(v99) = v70;
  MEMORY[0x1F4188790](v40);
  uint64_t v42 = type metadata accessor for _ScrollView.Main.ScrollableProvider();
  uint64_t v61 = v42;
  uint64_t v70 = v42;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for PanEventType?(0, &lazy cache variable for type metadata for Attribute<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v96, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_33, (uint64_t)v60, v42, MEMORY[0x1E4FBC248], v43, MEMORY[0x1E4FBC278], v44);
  LODWORD(v67) = v94;
  _ViewInputs.scrollable.setter();
  unint64_t v96 = v72 | (v41 << 32);
  LOBYTE(v97) = 0;
  lazy protocol witness table accessor for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput();
  PropertyList.subscript.setter();
  unint64_t v96 = v91;
  LODWORD(v97) = v87;
  unint64_t v98 = v83;
  *(void *)&long long v99 = __PAIR64__(v33, v86);
  *((void *)&v99 + 1) = __PAIR64__(v78, v34);
  uint64_t v100 = v88;
  unint64_t v101 = v93;
  *(void *)&long long v102 = __PAIR64__(v82, v92);
  *((void *)&v102 + 1) = __PAIR64__(v28, v90);
  unint64_t v103 = __PAIR64__(v81, v17);
  int v104 = v37;
  LODWORD(v96) = _ViewInputs.environment.getter();
  unint64_t v45 = v75;
  unint64_t v97 = v75;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewEnvironment and conformance ScrollViewEnvironment();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _ViewInputs.environment.setter();
  HIDWORD(v109) |= 2u;
  PreferencesInputs.remove<A>(_:)();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture>();
  LODWORD(v96) = v69;
  unint64_t v97 = v45;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ScrollViewChildModifier and conformance ScrollViewChildModifier();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  _GraphValue.init(_:)();
  unint64_t v96 = v105;
  LODWORD(v97) = v106;
  unint64_t v98 = v108;
  long long v99 = v109;
  uint64_t v100 = v110;
  unint64_t v101 = v111;
  long long v102 = v112;
  unint64_t v103 = v113;
  int v104 = v114;
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = v76;
  uint64_t v48 = v77;
  *(void *)(v46 + 16) = v76;
  *(void *)(v46 + 24) = v48;
  *(_DWORD *)(v46 + 32) = v73;
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>);
  swift_retain();
  swift_retain();
  unint64_t v49 = v93;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unsigned int v50 = v92;
  static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v51 = swift_release();
  MEMORY[0x1F4188790](v51);
  *(void *)&v60[-32] = v47;
  *(void *)&v60[-24] = v48;
  *(void *)&v60[-16] = &v94;
  MEMORY[0x1F4188790](v52);
  *(void *)&v60[-32] = v70;
  *(void *)&v60[-24] = partial apply for closure #3 in static _ScrollView.Main._makeView(view:inputs:);
  *(void *)&v60[-16] = v53;
  AGGraphMutateAttribute();
  unint64_t v96 = v49;
  LODWORD(v97) = v50;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    UnaryScrollablePreferenceProvider.init(scrollable:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for PanEventType?(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type UnaryScrollablePreferenceProvider and conformance UnaryScrollablePreferenceProvider();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v96) = 0;
    _ViewOutputs.subscript.setter();
  }
  type metadata accessor for ScrollViewResponder();
  *(void *)(swift_allocObject() + 216) = v75;
  unint64_t v96 = v91;
  LODWORD(v97) = v87;
  unint64_t v98 = v83;
  *(void *)&long long v99 = __PAIR64__(v85, v86);
  *((void *)&v99 + 1) = __PAIR64__(v78, v79);
  uint64_t v100 = v88;
  unint64_t v101 = v49;
  *(void *)&long long v102 = __PAIR64__(v82, v50);
  *((void *)&v102 + 1) = __PAIR64__(v89, v90);
  unint64_t v103 = __PAIR64__(v81, v84);
  int v104 = v80;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DefaultLayoutViewResponder.init(inputs:)();
  unint64_t v96 = v49;
  LODWORD(v97) = v50;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  uint64_t v54 = swift_bridgeObjectRelease();
  unint64_t v96 = v49;
  LODWORD(v97) = v50;
  MEMORY[0x1F4188790](v54);
  *(_DWORD *)&v60[-16] = v72;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  uint64_t v55 = swift_bridgeObjectRelease();
  MEMORY[0x1F4188790](v55);
  *(void *)&v60[-16] = &v94;
  MEMORY[0x1F4188790](v56);
  *(void *)&v60[-16] = partial apply for closure #5 in static _ScrollView.Main._makeView(view:inputs:);
  *(void *)&v60[-8] = v57;
  AGGraphMutateAttribute();
  LOBYTE(v96) = 1;
  _ViewOutputs.layoutComputer.setter();
  swift_release_n();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v58 = v71;
  *(void *)uint64_t v71 = v94;
  double result = v95;
  v58[1] = v95;
  return result;
}

uint64_t closure #1 in static _ScrollView.Main._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for _ScrollView() + 36) + 40;
  v6[2] = type metadata accessor for _ScrollView.Main();
  uint64_t v2 = MEMORY[0x1E4F3F360];
  uint64_t v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_23, (uint64_t)v6, v2, MEMORY[0x1E4FBC248], v3, MEMORY[0x1E4FBC278], v4);
  return v6[5];
}

uint64_t closure #2 in static _ScrollView.Main._makeView(view:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v19 = *((_DWORD *)a2 + 20);
  LODWORD(v26) = a3;
  type metadata accessor for _ScrollView.Main();
  type metadata accessor for _GraphValue();
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  long long v17 = *(_OWORD *)(a2 + 7);
  long long v18 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[9];
  _GraphValue.value.getter();
  type metadata accessor for _ScrollView();
  AGGraphCreateOffsetAttribute2();
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  LODWORD(v26) = AGGraphCreateOffsetAttribute2();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = type metadata accessor for Focus();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v26, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v20, v22, MEMORY[0x1E4FBC248], v14, MEMORY[0x1E4FBC278], v15);
  swift_release();
  swift_release();
  _GraphValue.init(_:)();
  uint64_t v26 = v8;
  LODWORD(KeyPath) = v9;
  uint64_t v28 = v10;
  uint64_t v29 = v11;
  uint64_t v30 = v12;
  long long v31 = v18;
  long long v32 = v17;
  uint64_t v33 = v13;
  int v34 = v19;
  swift_getAssociatedConformanceWitness();
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t closure #3 in static _ScrollView.Main._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t v2 = _ViewOutputs.subscript.getter();
  uint64_t result = type metadata accessor for _ScrollView.Main.ScrollableProvider();
  if ((v2 & 0x100000000) != 0) {
    int v4 = *MEMORY[0x1E4F4E7A0];
  }
  else {
    int v4 = v2;
  }
  *(_DWORD *)(a1 + 24) = v4;
  return result;
}

uint64_t implicit closure #1 in static _ScrollView.Main._makeView(view:inputs:)()
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for (_:)();
  lazy protocol witness table accessor for type ScrollViewResponderFilter and conformance ScrollViewResponderFilter();
  swift_retain();
  uint64_t v0 = Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  return v0;
}

uint64_t implicit closure #2 in static _ScrollView.Main._makeView(view:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t closure #4 in implicit closure #2 in static _ScrollView.Main._makeView(view:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(_DWORD *)(a2 + 8) = v2;
  return swift_retain();
}

_DWORD *_ScrollView.Main.ScrollableProvider.value.getter@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  int v6 = a3;
  int v7 = a2;
  int v8 = a1;
  unint64_t v10 = HIDWORD(a1);
  unint64_t v11 = HIDWORD(a2);
  unint64_t v12 = HIDWORD(a3);
  a5[3] = type metadata accessor for _ScrollView.Main.ScrollableLayoutScrollable();
  a5[4] = swift_getWitnessTable();
  uint64_t result = (_DWORD *)swift_allocObject();
  *a5 = result;
  result[4] = v8;
  result[5] = v10;
  result[6] = v7;
  result[7] = v11;
  result[8] = v6;
  result[9] = v12;
  result[10] = a4;
  return result;
}

double _ScrollView.Main.ScrollableLayoutScrollable.parent.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TableColumnList(WeakValue, a1);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t _ScrollView.Main.ScrollableLayoutScrollable.children.getter(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*MEMORY[0x1E4F4E7A0] == a4) {
    return 0;
  }
  type metadata accessor for PanEventType?(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBB320]);
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

_DWORD *protocol witness for Rule.value.getter in conformance _ScrollView<A>.Main.ScrollableProvider@<X0>(void *a1@<X8>)
{
  return _ScrollView.Main.ScrollableProvider.value.getter(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(_DWORD *)(v1 + 24), a1);
}

uint64_t protocol witness for ScrollableContainer.children.getter in conformance _ScrollView<A>.Main.ScrollableLayoutScrollable()
{
  return _ScrollView.Main.ScrollableLayoutScrollable.children.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

double protocol witness for ScrollableContainer.parent.getter in conformance _ScrollView<A>.Main.ScrollableLayoutScrollable@<D0>(uint64_t a1@<X8>)
{
  return _ScrollView.Main.ScrollableLayoutScrollable.parent.getter(a1);
}

uint64_t protocol witness for Scrollable.scroll<A>(to:) in conformance _ScrollView<A>.Main.ScrollableLayoutScrollable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF9E8](a1, a4, a2, WitnessTable, a3);
}

uint64_t protocol witness for Scrollable.setContentTarget(_:) in conformance _ScrollView<A>.Main.ScrollableLayoutScrollable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF9D8](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Scrollable.adjustContentOffset(by:reason:) in conformance _ScrollView<A>.Main.ScrollableLayoutScrollable(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  v9.n128_f64[0] = a3;
  v10.n128_f64[0] = a4;

  return MEMORY[0x1F40FF9E0](a1, a2, WitnessTable, v9, v10);
}

uint64_t protocol witness for Scrollable.mapFirstChild<A, B>(ofType:body:) in conformance _ScrollView<A>.Main.ScrollableLayoutScrollable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF9C8](a1, a2, a3, a6, a4, a5, WitnessTable);
}

uint64_t ScrollViewUpdate.updateValue()(uint64_t a1)
{
  v112[6] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v92 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v91 = (char *)&v85 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t v95 = type metadata accessor for _ScrollView();
  uint64_t v93 = *(void *)(v95 - 8);
  MEMORY[0x1F4188790](v95);
  uint64_t v88 = (char *)&v85 - v6;
  uint64_t v94 = v2;
  uint64_t v90 = v5;
  uint64_t v7 = type metadata accessor for _ScrollView.Main();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v102 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v100 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unint64_t v103 = (char *)&v85 - v10;
  MEMORY[0x1F4188790](v11);
  unint64_t v108 = (char *)&v85 - v12;
  uint64_t v105 = v1;
  type metadata accessor for ScrollViewNode();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  int v15 = v14;
  uint64_t v16 = *Value;
  Swift::UInt32 v17 = *(_DWORD *)AGGraphGetValue() >> 1;
  swift_retain();
  BOOL v18 = ScrollViewNode.update(resetSeed:)(v17);
  int v19 = (_OWORD *)AGGraphGetValue();
  uint64_t v99 = v20;
  uint64_t v97 = v16;
  if (v20)
  {
    long long v22 = v19[1];
    v111[0] = *v19;
    v111[1] = v22;
    *(double *)(v16 + 352) = MEMORY[0x18C114450]();
    *(void *)(v16 + 360) = v23;
    ++*(_DWORD *)(v16 + 408);
    int v21 = 1;
  }
  else
  {
    int v21 = v18 | v15;
  }
  LODWORD(v107) = v21;
  uint64_t v24 = TupleTypeMetadata2;
  uint64_t v25 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v26 = AGGraphGetValue();
  char v28 = v27;
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  long long v31 = v108;
  v30(v108, v26, v7);
  v31[v25] = v28 & 1;
  uint64_t v32 = *(int *)(v24 + 48);
  uint64_t v33 = v103;
  int v104 = (void (*)(char *, char *, uint64_t))v30;
  v30(v103, (uint64_t)v31, v7);
  uint64_t v34 = v7;
  uint64_t v98 = v28 & 1;
  v33[v32] = v28 & 1;
  uint64_t v89 = v29;
  uint64_t v35 = v29 + 8;
  unsigned int v36 = v33;
  uint64_t v37 = v24;
  unint64_t v101 = *(void (**)(char *, uint64_t))(v29 + 8);
  v101(v36, v7);
  uint64_t v38 = v97;
  if (v28)
  {
    uint64_t v39 = *(int *)(v37 + 48);
    uint64_t v40 = v103;
    v104(v103, v108, v34);
    v40[v39] = 1;
    uint64_t v41 = v93;
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
    uint64_t v85 = v93 + 16;
    unsigned int v86 = v42;
    uint64_t v43 = v88;
    uint64_t v96 = v34;
    uint64_t v44 = v95;
    ((void (*)(char *, char *))v42)(v88, v40);
    v101(v40, v96);
    uint64_t v45 = v92;
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
    uint64_t v47 = (uint64_t)v91;
    uint64_t v87 = v35;
    uint64_t v48 = v94;
    v46(v91, v43, v94);
    unint64_t v49 = *(void (**)(char *, uint64_t))(v41 + 8);
    v49(v43, v44);
    int v107 = implicit closure #1 in ScrollViewUpdate.updateValue()(v47, v48, v90);
    uint64_t v93 = v50;
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v47, v48);
    uint64_t v51 = v93;
    *(void *)(v38 + 368) = v107;
    *(void *)(v38 + 376) = v51;
    uint64_t v37 = TupleTypeMetadata2;
    swift_release();
    uint64_t v52 = *(int *)(v37 + 48);
    v104(v40, v108, v96);
    LODWORD(v107) = 1;
    v40[v52] = 1;
    uint64_t v53 = v44;
    uint64_t v34 = v96;
    v86(v43, v40, v53);
    v101(v40, v34);
    outlined init with copy of _ScrollViewConfig((uint64_t)&v43[*(int *)(v53 + 36)], (uint64_t)v111);
    v49(v43, v53);
    swift_beginAccess();
    outlined assign with take of _ScrollViewConfig((uint64_t)v111, v38 + 168);
    swift_endAccess();
    ++*(_DWORD *)(v38 + 408);
  }
  uint64_t v54 = *(int *)(v37 + 48);
  uint64_t v55 = v100;
  v104(v100, v108, v34);
  uint64_t v56 = v98;
  v55[v54] = v98;
  if (v99)
  {
    (*(void (**)(char *, uint64_t))(v102 + 8))(v55, v37);
    goto LABEL_10;
  }
  uint64_t v57 = *(int *)(v37 + 48);
  uint64_t v58 = v103;
  (*(void (**)(char *, char *, uint64_t))(v89 + 32))(v103, v55, v34);
  v58[v57] = v56;
  v101(v58, v34);
  if (v56) {
LABEL_10:
  }
    ScrollViewNode.clampContentOffset()();
  LODWORD(v104) = *(_DWORD *)(v105 + 16);
  char v59 = *(unsigned char *)(v105 + 28);
  unint64_t v60 = (void *)AGGraphGetValue();
  uint64_t v61 = v60[1];
  if (v62)
  {
    *(void *)&v111[0] = *v60;
    *((void *)&v111[0] + 1) = v61;
    swift_retain();
    swift_retain();
    int v63 = ScrollViewNode.update(environment:)((uint64_t *)v111);
    LODWORD(v107) = v63 | v107;
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  swift_beginAccess();
  if (*(unsigned char *)(v38 + 200) == 1)
  {
    swift_retain();
    swift_retain();
    if (v59 & 1) == 0 && (dispatch thunk of AnyLocation.wasRead.getter())
    {
      MEMORY[0x18C112B90](0xD000000000000137, 0x8000000188341370);
      *(unsigned char *)(v105 + 28) = 1;
    }
    char v64 = dispatch thunk of AnyLocation.update()();
    swift_release();
    swift_release();
    uint64_t v65 = v112[3];
    uint64_t v66 = v112[4];
    int v67 = v64 & 1;
  }
  else
  {
    uint64_t v65 = 0;
    uint64_t v66 = 0;
    int v67 = 2;
  }
  swift_beginAccess();
  int v68 = *(unsigned __int8 *)(v38 + 146);
  int v69 = *(unsigned __int16 *)(v38 + 144);
  AGGraphClearUpdate();
  uint64_t v70 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  if (v67 == 2) {
    uint64_t v71 = 0;
  }
  else {
    uint64_t v71 = v65;
  }
  if (v67 == 2) {
    uint64_t v72 = 0;
  }
  else {
    uint64_t v72 = v66;
  }
  if (v67 == 2) {
    unsigned __int8 v73 = 2;
  }
  else {
    unsigned __int8 v73 = v67 & 1;
  }
  if (ScrollViewNode.updateContentOffset(in:bindingOffset:)(v70, v71, v72, v73))
  {
    ++*(_DWORD *)(v38 + 408);
    LODWORD(v107) = 1;
  }
  if (((*(unsigned __int8 *)(v38 + 146) << 16) & 0xC00000) == 0x400000)
  {
    uint64_t v74 = (double *)AGGraphGetValue();
    double v75 = *v74;
    if (v76)
    {
      BOOL v77 = ((v69 | (v68 << 16)) & 0xC00000) == 0x400000;
      unsigned int v78 = v108;
      if (v77)
      {
        v112[0] = *(uint64_t *)v74;
        ScrollViewNode.iterateDeceleration(at:)(v112);
        LODWORD(v107) = 1;
      }
    }
    else
    {
      unsigned int v78 = v108;
    }
    if (MEMORY[0x18C119DF0](v38 + 16))
    {
      uint64_t v79 = *(void *)(v38 + 24);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 16))(ObjectType, v79);
      swift_unknownObjectRelease();
      swift_beginAccess();
      double v82 = *(double *)(v81 + 376);
      if (v75 < v82) {
        double v82 = v75;
      }
      *(double *)(v81 + 376) = v82;
      swift_release();
    }
  }
  else
  {
    unsigned int v78 = v108;
  }
  if ((v107 & 1) != 0 || !AGGraphGetOutputValue())
  {
    int v83 = *(_DWORD *)(v38 + 408) + *(_DWORD *)(v38 + 148);
    uint64_t v109 = v38;
    int v110 = v83;
    swift_retain();
    AGGraphSetOutputValue();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v78, TupleTypeMetadata2);
  return swift_release();
}

Swift::Bool __swiftcall ScrollViewNode.update(resetSeed:)(Swift::UInt32 resetSeed)
{
  int v2 = *(_DWORD *)(v1 + 164);
  if (v2 != resetSeed)
  {
    uint64_t v3 = v1;
    int v41 = *(_DWORD *)(v1 + 164);
    Swift::UInt32 v42 = resetSeed;
    *(_DWORD *)(v1 + 164) = resetSeed;
    *(void *)(v1 + 48) = 0;
    *(void *)(v1 + 56) = 0;
    swift_beginAccess();
    *(unsigned char *)(v1 + 160) = 0;
    uint64_t v4 = (_OWORD *)(v1 + 80);
    *(void *)(v1 + 64) = 0;
    *(void *)(v1 + 72) = 0;
    swift_beginAccess();
    uint64_t v5 = *(void *)(v1 + 152);
    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = (_DWORD *)(v5 + 56);
      do
      {
        uint64_t v8 = *((void *)v7 - 3);
        double v9 = *((double *)v7 - 2);
        double v10 = *((double *)v7 - 1);
        int v11 = *v7;
        swift_unownedRetainStrong();
        swift_beginAccess();
        int v12 = *(_DWORD *)(v8 + 148);
        swift_unownedRetain();
        swift_release();
        if (v12 == v11)
        {
          swift_unownedRetainStrong();
          ScrollViewNode.bindingSafeOffset(_:)(v9, v10);
          *(double *)uint64_t v43 = v9;
          *(double *)&v43[1] = v10;
          *(double *)&v43[2] = v13;
          *(double *)&v43[3] = v14;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          ScrollViewNode.commitScrollTransaction(_:value:)(v43, v13, v14);
          swift_release();
        }
        swift_unownedRelease();
        v7 += 8;
        --v6;
      }
      while (v6);
      swift_bridgeObjectRelease();
    }
    uint64_t v15 = *(void *)(v3 + 120);
    int v16 = *(unsigned __int16 *)(v3 + 144) | (*(unsigned __int8 *)(v3 + 146) << 16);
    if ((v16 & 0xC00000) == 0x400000 && v15 != 0)
    {
      uint64_t v37 = *(void *)(v3 + 136);
      uint64_t v38 = v4;
      uint64_t v18 = *(void *)(v3 + 128);
      uint64_t v39 = *(void *)(v3 + 112);
      uint64_t v19 = *(void *)(v3 + 96);
      uint64_t v36 = *(void *)(v3 + 104);
      uint64_t v20 = *(void *)(v3 + 80);
      uint64_t v21 = *(void *)(v3 + 88);
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v15;
      *(void *)(v22 + 24) = v18;
      uint64_t v23 = swift_allocObject();
      *(void *)(v23 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
      *(void *)(v23 + 24) = v22;
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
      *(void *)(v24 + 24) = v23;
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
      *(void *)(v25 + 24) = v24;
      *(unsigned char *)(v25 + 32) = 0;
      swift_retain_n();
      outlined copy of ScrollViewBehavior.Phase(v20, v21, v19, v36, v39, v15, v18, v37, v16);
      outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v15, v18);
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v26 = v18;
      uint64_t v4 = v38;
      outlined consume of ScrollViewBehavior.Phase(v20, v21, v19, v36, v39, v15, v26, v37, v16);
      swift_release();
    }
    uint64_t v40 = *(void *)(v3 + 120);
    int v27 = *(unsigned __int16 *)(v3 + 144) | (*(unsigned __int8 *)(v3 + 146) << 16);
    uint64_t v28 = *(void *)(v3 + 80);
    uint64_t v29 = *(void *)(v3 + 88);
    uint64_t v30 = *(void *)(v3 + 96);
    uint64_t v31 = *(void *)(v3 + 104);
    uint64_t v32 = *(void *)(v3 + 112);
    uint64_t v34 = *(void *)(v3 + 128);
    uint64_t v33 = *(void *)(v3 + 136);
    *uint64_t v4 = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *(unsigned char *)(v3 + 146) = 0x80;
    *(_WORD *)(v3 + 144) = 0;
    ++*(_DWORD *)(v3 + 148);
    *(void *)(v3 + 152) = MEMORY[0x1E4FBC860];
    swift_endAccess();
    outlined consume of ScrollViewBehavior.Phase(v28, v29, v30, v31, v32, v40, v34, v33, v27);
    swift_bridgeObjectRelease();
    int v2 = v41;
    resetSeed = v42;
  }
  return v2 != resetSeed;
}

uint64_t (*implicit closure #1 in ScrollViewUpdate.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v7);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, a2);
  return partial apply for implicit closure #2 in implicit closure #1 in ScrollViewUpdate.updateValue();
}

void ScrollViewNode.clampContentOffset()()
{
  double v1 = v0[42];
  double v2 = v0[43];
  static CGSize.invalidValue.getter();
  if (v1 != v4 || v2 != v3)
  {
    double v6 = v0[42];
    double v7 = v0[43];
    swift_beginAccess();
    CGSize.inset(by:)();
    double v9 = v6 - v8;
    CGSize.inset(by:)();
    if (v9 < 0.0) {
      double v11 = 0.0;
    }
    else {
      double v11 = v9;
    }
    if (v7 - v10 < 0.0) {
      double v12 = 0.0;
    }
    else {
      double v12 = v7 - v10;
    }
    CGPoint v13 = CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v12, *(unint64_t *)&v11));
    if (v13.x != v0[6] || v13.y != v0[7])
    {
      ScrollViewNode.bindingSafeOffset(_:)(v13.x, v13.y);
      CGPoint v17 = v13;
      double v18 = v15;
      double v19 = v16;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v22 = 0u;
      ScrollViewNode.commitScrollTransaction(_:value:)(&v17, v15, v16);
    }
  }
}

uint64_t ScrollViewNode.update(environment:)(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v10 = *a1;
  EnvironmentValues.containingScrollView.getter((uint64_t)&v11);
  uint64_t v3 = v11;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    swift_release();
    if (v3 && v5 == v3) {
      goto LABEL_4;
    }
  }
  else if (!v3)
  {
LABEL_4:
    int v6 = 0;
    goto LABEL_7;
  }
  swift_weakAssign();
  int v6 = 1;
LABEL_7:
  type metadata accessor for ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey>, (uint64_t)&type metadata for TopScrollIndicatorFollowsContentOffsetKey, (uint64_t)&protocol witness table for TopScrollIndicatorFollowsContentOffsetKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v10 != *(unsigned __int8 *)(v1 + 392))
  {
    *(unsigned char *)(v1 + 392) = v10;
    int v6 = 1;
  }
  swift_retain();
  swift_retain();
  EnvironmentValues.pixelLength.getter();
  double v8 = v7;
  swift_release();
  swift_release();
  swift_release();
  if (*(double *)(v1 + 400) == v8)
  {
    if (!v6) {
      return 0;
    }
  }
  else
  {
    *(double *)(v1 + 400) = v8;
  }
  ++*(_DWORD *)(v1 + 408);
  return 1;
}

uint64_t ScrollViewNode.updateContentOffset(in:bindingOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t v5 = v4;
  int v8 = a4;
  if (*(unsigned char *)(v4 + 160))
  {
LABEL_7:
    Transaction.subscript.getter(*(_DWORD *)(v4 + 40), v89);
    outlined init with take of ScrollViewCommitInfo?((uint64_t)v89, (uint64_t)v90, &lazy cache variable for type metadata for ScrollViewCommitInfo?, (uint64_t)&type metadata for ScrollViewCommitInfo, MEMORY[0x1E4FBB718]);
    if (v91 >> 1 == 0xFFFFFFFF)
    {
      swift_beginAccess();
      if (*(unsigned __int8 *)(v4 + 146) >> 6)
      {
        if (v8 == 2) {
          goto LABEL_63;
        }
      }
      else
      {
        char v12 = 0;
        if (((*(unsigned __int8 *)(v4 + 146) << 16) & 0x10000) == 0 || v8 == 2) {
          return v12 & 1;
        }
      }
      if ((v8 & 1) != 0 && (*(double *)(v4 + 48) != *(double *)&a2 || *(double *)(v4 + 56) != *(double *)&a3))
      {
        *(double *)(v4 + 48) = *(double *)&a2;
        *(double *)(v4 + 56) = *(double *)&a3;
        if ((Transaction.disablesAnimations.getter() & 1) == 0)
        {
          Transaction.subscript.getter();
          if (LOBYTE(v103))
          {
            if (LOBYTE(v103) != 1 || (Transaction.isContinuous.getter() & 1) == 0)
            {
              swift_beginAccess();
              char v12 = ScrollViewBehavior.updateDeceleration(node:target:velocity:completion:)(v4, a2, a3, 0, 0, 0, 1, 0, 0);
              swift_endAccess();
              return v12 & 1;
            }
          }
        }
        swift_beginAccess();
        if (*(double *)(v4 + 64) != *(double *)&a2 || *(double *)(v4 + 72) != *(double *)&a3)
        {
          swift_beginAccess();
          if (((*(unsigned __int16 *)(v4 + 144) | (*(unsigned __int8 *)(v4 + 146) << 16)) & 0xC00000) == 0x400000)
          {
            int v82 = *(unsigned __int16 *)(v4 + 144) | (*(unsigned __int8 *)(v4 + 146) << 16);
            uint64_t v31 = *(void *)(v4 + 96);
            uint64_t v32 = *(void *)(v4 + 120);
            uint64_t v74 = a2;
            uint64_t v76 = *(void *)(v4 + 112);
            uint64_t v72 = *(void *)(v4 + 128);
            uint64_t v78 = *(void *)(v4 + 104);
            uint64_t v80 = *(void *)(v4 + 136);
            uint64_t v33 = *(void *)(v4 + 152);
            uint64_t v34 = *(void *)(v33 + 16);
            uint64_t v86 = *(void *)(v4 + 88);
            uint64_t v88 = *(void *)(v4 + 80);
            uint64_t v84 = v31;
            if (v34)
            {
              uint64_t v68 = a3;
              swift_bridgeObjectRetain();
              uint64_t v35 = (_DWORD *)(v33 + 56);
              do
              {
                uint64_t v36 = *((void *)v35 - 3);
                double v37 = *((double *)v35 - 2);
                double v38 = *((double *)v35 - 1);
                int v39 = *v35;
                swift_unownedRetainStrong();
                swift_beginAccess();
                int v40 = *(_DWORD *)(v36 + 148);
                swift_unownedRetain();
                swift_release();
                if (v40 == v39)
                {
                  swift_unownedRetainStrong();
                  ScrollViewNode.bindingSafeOffset(_:)(v37, v38);
                  double v103 = v37;
                  double v104 = v38;
                  double v105 = v41;
                  double v106 = v42;
                  long long v107 = 0u;
                  long long v108 = 0u;
                  long long v109 = 0u;
                  ScrollViewNode.commitScrollTransaction(_:value:)(&v103, v41, v42);
                  swift_release();
                }
                swift_unownedRelease();
                v35 += 8;
                --v34;
              }
              while (v34);
              swift_bridgeObjectRelease();
              a3 = v68;
              uint64_t v31 = v84;
            }
            if (v32)
            {
              uint64_t v62 = swift_allocObject();
              *(void *)(v62 + 16) = v32;
              *(void *)(v62 + 24) = v72;
              uint64_t v63 = swift_allocObject();
              *(void *)(v63 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
              *(void *)(v63 + 24) = v62;
              uint64_t v64 = swift_allocObject();
              *(void *)(v64 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
              *(void *)(v64 + 24) = v63;
              uint64_t v65 = swift_allocObject();
              *(void *)(v65 + 16) = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
              *(void *)(v65 + 24) = v64;
              *(unsigned char *)(v65 + 32) = 0;
              swift_retain_n();
              outlined copy of ScrollViewBehavior.Phase(v88, v86, v31, v78, v76, v32, v72, v80, v82);
              outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v32, v72);
              swift_retain();
              static Update.enqueueAction(_:)();
              swift_release();
              swift_release();
              swift_release();
              outlined consume of ScrollViewBehavior.Phase(v88, v86, v84, v78, v76, v32, v72, v80, v82);
              swift_release();
            }
            outlined consume of ScrollViewBehavior.Phase(*(void *)(v5 + 80), *(void *)(v5 + 88), *(void *)(v5 + 96), *(void *)(v5 + 104), *(void *)(v5 + 112), *(void *)(v5 + 120), *(void *)(v5 + 128), *(void *)(v5 + 136), *(unsigned __int16 *)(v5 + 144) | (*(unsigned __int8 *)(v5 + 146) << 16));
            *(_OWORD *)(v5 + 112) = 0u;
            *(_OWORD *)(v5 + 128) = 0u;
            *(_OWORD *)(v5 + 80) = 0u;
            *(_OWORD *)(v5 + 96) = 0u;
            *(unsigned char *)(v5 + 146) = 0x80;
            *(_WORD *)(v5 + 144) = 0;
            int v66 = *(_DWORD *)(v5 + 148);
            *(_DWORD *)(v5 + 148) = v66 + 1;
            swift_bridgeObjectRelease();
            *(void *)(v5 + 152) = MEMORY[0x1E4FBC860];
            *(_DWORD *)(v5 + 148) = v66 + 2;
            a2 = v74;
          }
          swift_endAccess();
          *(double *)(v5 + 64) = *(double *)&a2;
          *(double *)(v5 + 72) = *(double *)&a3;
          goto LABEL_65;
        }
      }
    }
    else
    {
      outlined init with take of ScrollViewCommitInfo((uint64_t)v90, (uint64_t)v92);
      outlined init with take of ScrollViewCommitInfo((uint64_t)v92, (uint64_t)&v93);
      char v13 = v100;
      if (v100 < 0)
      {
        v100 &= ~0x8000000000000000;
        uint64_t v43 = v98;
        uint64_t v44 = v99;
        uint64_t v45 = v101;
        int v46 = v8;
        uint64_t v47 = v102;
        double v48 = v96;
        double v49 = v97;
        if (v96 == *(double *)&a2 && v97 == *(double *)&a3) {
          uint64_t v50 = *(void *)&v93;
        }
        else {
          uint64_t v50 = a2;
        }
        if (v96 == *(double *)&a2 && v97 == *(double *)&a3) {
          uint64_t v51 = *(void *)&v94;
        }
        else {
          uint64_t v51 = a3;
        }
        if (v46 == 2)
        {
          uint64_t v52 = *(void *)&v93;
        }
        else
        {
          double v48 = *(double *)&a2;
          double v49 = *(double *)&a3;
          uint64_t v52 = v50;
        }
        if (v46 == 2) {
          uint64_t v53 = *(void *)&v94;
        }
        else {
          uint64_t v53 = v51;
        }
        if (v46 == 2) {
          char v54 = v95;
        }
        else {
          char v54 = (v96 == *(double *)&a2 && v97 == *(double *)&a3) & v95;
        }
        *(double *)(v5 + 48) = v48;
        *(double *)(v5 + 56) = v49;
        swift_beginAccess();
        char v12 = ScrollViewBehavior.updateDeceleration(node:target:velocity:completion:)(v5, v52, v53, v54, v43, v44, v13 & 1, v45, v47);
        swift_endAccess();
        outlined release of ScrollViewCommitInfo?(v89, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined consume of ScrollViewCommitInfo?);
        return v12 & 1;
      }
      double v14 = v93;
      double v15 = v94;
      uint64_t v17 = v95;
      double v16 = v96;
      swift_beginAccess();
      int v18 = *(unsigned __int16 *)(v4 + 144) | (*(unsigned __int8 *)(v4 + 146) << 16);
      if ((v18 & 0xC00000) == 0x400000)
      {
        uint64_t v71 = (_OWORD *)(v4 + 80);
        uint64_t v73 = a2;
        uint64_t v69 = *(void *)(v4 + 96);
        uint64_t v70 = *(void *)(v4 + 88);
        uint64_t v19 = *(void *)(v4 + 120);
        uint64_t v81 = *(void *)(v4 + 112);
        uint64_t v83 = *(void *)(v4 + 80);
        uint64_t v77 = *(void *)(v4 + 128);
        uint64_t v79 = *(void *)(v4 + 104);
        uint64_t v75 = *(void *)(v4 + 136);
        uint64_t v20 = *(void *)(v4 + 152);
        uint64_t v21 = *(void *)(v20 + 16);
        uint64_t v85 = v17;
        double v87 = v16;
        if (v21)
        {
          int v67 = v8;
          uint64_t v22 = a3;
          swift_bridgeObjectRetain();
          uint64_t v23 = (_DWORD *)(v20 + 56);
          do
          {
            uint64_t v24 = *((void *)v23 - 3);
            double v25 = *((double *)v23 - 2);
            double v26 = *((double *)v23 - 1);
            int v27 = *v23;
            swift_unownedRetainStrong();
            swift_beginAccess();
            int v28 = *(_DWORD *)(v24 + 148);
            swift_unownedRetain();
            swift_release();
            if (v28 == v27)
            {
              swift_unownedRetainStrong();
              ScrollViewNode.bindingSafeOffset(_:)(v25, v26);
              double v103 = v25;
              double v104 = v26;
              double v105 = v29;
              double v106 = v30;
              long long v107 = 0u;
              long long v108 = 0u;
              long long v109 = 0u;
              ScrollViewNode.commitScrollTransaction(_:value:)(&v103, v29, v30);
              swift_release();
            }
            swift_unownedRelease();
            v23 += 8;
            --v21;
          }
          while (v21);
          swift_bridgeObjectRelease();
          a3 = v22;
          int v8 = v67;
          uint64_t v17 = v85;
          double v16 = v87;
        }
        if (v19)
        {
          uint64_t v55 = swift_allocObject();
          *(void *)(v55 + 16) = v19;
          *(void *)(v55 + 24) = v77;
          uint64_t v56 = swift_allocObject();
          *(void *)(v56 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
          *(void *)(v56 + 24) = v55;
          uint64_t v57 = swift_allocObject();
          *(void *)(v57 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
          *(void *)(v57 + 24) = v56;
          uint64_t v58 = swift_allocObject();
          *(void *)(v58 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
          *(void *)(v58 + 24) = v57;
          *(unsigned char *)(v58 + 32) = 0;
          swift_retain_n();
          outlined copy of ScrollViewBehavior.Phase(v83, v70, v69, v79, v81, v19, v77, v75, v18);
          outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v19, v77);
          swift_retain();
          static Update.enqueueAction(_:)();
          swift_release();
          swift_release();
          swift_release();
          uint64_t v17 = v85;
          double v16 = v87;
          outlined consume of ScrollViewBehavior.Phase(v83, v70, v69, v79, v81, v19, v77, v75, v18);
          swift_release();
        }
        outlined consume of ScrollViewBehavior.Phase(*(void *)(v5 + 80), *(void *)(v5 + 88), *(void *)(v5 + 96), *(void *)(v5 + 104), *(void *)(v5 + 112), *(void *)(v5 + 120), *(void *)(v5 + 128), *(void *)(v5 + 136), *(unsigned __int16 *)(v5 + 144) | (*(unsigned __int8 *)(v5 + 146) << 16));
        _DWORD v71[2] = 0u;
        v71[3] = 0u;
        *uint64_t v71 = 0u;
        v71[1] = 0u;
        *(unsigned char *)(v5 + 146) = 0x80;
        *(_WORD *)(v5 + 144) = 0;
        int v59 = *(_DWORD *)(v5 + 148);
        *(_DWORD *)(v5 + 148) = v59 + 1;
        swift_bridgeObjectRelease();
        *(void *)(v5 + 152) = MEMORY[0x1E4FBC860];
        *(_DWORD *)(v5 + 148) = v59 + 2;
        a2 = v73;
      }
      swift_endAccess();
      outlined release of ScrollViewCommitInfo?(v89, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined consume of ScrollViewCommitInfo?);
      if (v8 == 2) {
        uint64_t v60 = v17;
      }
      else {
        uint64_t v60 = a2;
      }
      if (v8 == 2) {
        uint64_t v61 = *(void *)&v16;
      }
      else {
        uint64_t v61 = a3;
      }
      *(void *)(v5 + 48) = v60;
      *(void *)(v5 + 56) = v61;
      swift_beginAccess();
      if (*(double *)(v5 + 64) != v14 || *(double *)(v5 + 72) != v15)
      {
        *(double *)(v5 + 64) = v14;
        *(double *)(v5 + 72) = v15;
LABEL_65:
        char v12 = 1;
        return v12 & 1;
      }
    }
LABEL_63:
    char v12 = 0;
    return v12 & 1;
  }
  uint64_t result = swift_beginAccess();
  if ((*(unsigned char *)(v4 + 200) & 1) == 0)
  {
    uint64_t v11 = *(void *)(v4 + 168);
    uint64_t v10 = *(void *)(v4 + 176);
    swift_beginAccess();
    *(void *)(v4 + 64) = v11;
    goto LABEL_6;
  }
  if (v8 != 2)
  {
    swift_beginAccess();
    *(double *)(v4 + 64) = *(double *)&a2;
    uint64_t v10 = a3;
    uint64_t v11 = a2;
LABEL_6:
    *(void *)(v4 + 72) = v10;
    *(void *)(v4 + 48) = v11;
    *(void *)(v4 + 56) = v10;
    *(unsigned char *)(v4 + 160) = 1;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t ScrollViewNode.iterateDeceleration(at:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  if (((*(unsigned __int8 *)(v1 + 146) << 16) & 0xC00000) == 0x400000)
  {
    uint64_t v8 = v3;
    uint64_t v5 = *(void *)(v1 + 48);
    uint64_t v6 = *(void *)(v1 + 56);
    swift_beginAccess();
    swift_beginAccess();
    char v7 = ScrollViewBehavior.iterateDeceleration(node:time:offset:estimatedTarget:)(v1, (double *)&v8, v1 + 64, v5, v6, 0);
    swift_endAccess();
    uint64_t result = swift_endAccess();
    if (v7) {
      *(_OWORD *)(v2 + 64) = *(_OWORD *)(v2 + 48);
    }
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollViewEnvironment@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v6 = *Value;
  uint64_t v5 = Value[1];
  *a1 = v6;
  a1[1] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  specialized EnvironmentValues.subscript.setter(v3);

  return swift_release();
}

void protocol witness for static Rule.initialValue.getter in conformance ScrollViewChildModifier(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollViewChildModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t Value = AGGraphGetValue();
  uint64_t v5 = *(void *)Value;
  int v6 = *(_DWORD *)(Value + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = v6;

  return swift_retain();
}

uint64_t static ScrollViewGeometry._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  unsigned int v7 = *((_DWORD *)a2 + 6);
  unsigned int v6 = *((_DWORD *)a2 + 7);
  unsigned int v8 = *((_DWORD *)a2 + 8);
  unsigned int v9 = *((_DWORD *)a2 + 9);
  uint64_t v11 = a2[5];
  uint64_t v10 = a2[6];
  unsigned int v19 = *((_DWORD *)a2 + 15);
  unsigned int v20 = *((_DWORD *)a2 + 14);
  unsigned int v17 = *((_DWORD *)a2 + 17);
  unsigned int v18 = *((_DWORD *)a2 + 16);
  unsigned int v15 = *((_DWORD *)a2 + 19);
  unsigned int v16 = *((_DWORD *)a2 + 18);
  int v14 = *((_DWORD *)a2 + 20);
  lazy protocol witness table accessor for type _ViewInputs.ContainingScrollViewInput and conformance _ViewInputs.ContainingScrollViewInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v32) {
    __break(1u);
  }
  uint64_t v31 = v3;
  int v32 = v4;
  uint64_t v33 = v5;
  *(void *)&long long v34 = __PAIR64__(v6, v7);
  *((void *)&v34 + 1) = __PAIR64__(v9, v8);
  uint64_t v35 = v11;
  uint64_t v36 = v10;
  *(void *)&long long v37 = __PAIR64__(v19, v20);
  *((void *)&v37 + 1) = __PAIR64__(v17, v18);
  unint64_t v38 = __PAIR64__(v15, v16);
  int v39 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.position.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ContentOffset and conformance ContentOffset();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.position.setter();
  _ViewInputs.size.setter();
  uint64_t v22 = v3;
  int v23 = v4;
  uint64_t v24 = v5;
  long long v25 = v34;
  uint64_t v26 = v11;
  uint64_t v27 = v10;
  long long v28 = v37;
  unint64_t v29 = __PAIR64__(v15, v16);
  int v30 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v12 = swift_bridgeObjectRetain();
  a3(v12, &v22);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollViewGeometry()
{
}

double ContentOffset.value.getter@<D0>(_OWORD *a1@<X8>)
{
  AGGraphGetValue();
  swift_beginAccess();
  AGGraphGetValue();
  swift_beginAccess();
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v5 = *Value;
  MEMORY[0x18C10C240](Value, v3);
  ViewOrigin.value.setter();
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

double protocol witness for Rule.value.getter in conformance ContentOffset@<D0>(_OWORD *a1@<X8>)
{
  return ContentOffset.value.getter(a1);
}

uint64_t ContentSize.value.getter(uint64_t a1, int a2, uint64_t a3)
{
  AGGraphGetValue();
  MEMORY[0x18C114450]();
  AGGraphGetValue();
  CGSize.inset(by:)();
  _ProposedSize.init(_:)();
  if (*MEMORY[0x1E4F4E7A0] == a2)
  {
    static LayoutComputer.defaultValue.getter();
  }
  else
  {
    AGGraphGetValue();
    swift_retain();
  }
  LayoutComputer.sizeThatFits(_:)();
  if (*(double *)(a3 + 336) != v5 || *(double *)(a3 + 344) != v6)
  {
    *(double *)(a3 + 336) = v5;
    *(double *)(a3 + 344) = v6;
    ++*(_DWORD *)(a3 + 408);
    ScrollViewNode.clampContentOffset()();
  }
  ViewSize.init(_:proposal:)();

  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance ContentSize()
{
  return ContentSize.value.getter(*(void *)v0, *(_DWORD *)(v0 + 8), *(void *)(v0 + 16));
}

uint64_t Transaction.subscript.getter@<X0>(unsigned int a1@<W0>, uint64_t *a2@<X8>)
{
  Transaction.subscript.getter();
  if (*(void *)(v18 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v5 & 1) != 0))
  {
    double v6 = (uint64_t *)(*(void *)(v18 + 56) + 80 * v4);
    uint64_t v7 = v6[6];
    uint64_t v8 = v6[7];
    uint64_t v9 = v6[8];
    uint64_t v10 = v6[9];
    uint64_t v16 = v6[1];
    uint64_t v17 = *v6;
    uint64_t v11 = v6[2];
    uint64_t v12 = v6[3];
    uint64_t v13 = v6[4];
    uint64_t v14 = v6[5];
    outlined copy of ScrollViewCommitInfo(*v6, v16, v11, v12, v13, v14, v7, v8, v9);
  }
  else
  {
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v7 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v8 = 0x1FFFFFFFELL;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v11;
  a2[3] = v12;
  a2[4] = v13;
  a2[5] = v14;
  a2[6] = v7;
  a2[7] = v8;
  a2[8] = v9;
  a2[9] = v10;
  return result;
}

void ScrollViewNode.bindingSafeOffset(_:)(double a1, double a2)
{
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = v2[50];
  (*(void (**)(char *, void, uint64_t, double))(v6 + 104))(v9, *MEMORY[0x1E4FBBEA0], v5, v7);
  *(double *)uint64_t v18 = a1;
  *(double *)&v18[3] = a2;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v10);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v10);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  double v11 = v2[42];
  double v12 = v2[43];
  swift_beginAccess();
  CGSize.inset(by:)();
  double v14 = v11 - v13;
  CGSize.inset(by:)();
  if (v14 < 0.0) {
    double v16 = 0.0;
  }
  else {
    double v16 = v14;
  }
  if (v12 - v15 < 0.0) {
    double v17 = 0.0;
  }
  else {
    double v17 = v12 - v15;
  }
  CGPoint.clamp(min:max:)((CGPoint)0, (CGPoint)__PAIR128__(*(unint64_t *)&v17, *(unint64_t *)&v16));
}

uint64_t ScrollViewNode.commitScrollTransaction(_:value:)(void *a1, double a2, double a3)
{
  swift_beginAccess();
  if (*(unsigned char *)(v3 + 200) == 1)
  {
    uint64_t v8 = *(void *)(v3 + 184);
    uint64_t v7 = *(void *)(v3 + 192);
    uint64_t v9 = *(void *)(v3 + 176);
    double v24 = *(double *)(v3 + 168);
    double v21 = v24;
    type metadata accessor for External<ScrollViewNode>(0, &lazy cache variable for type metadata for Binding<CGPoint>, 255, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E4F41638]);
    uint64_t v11 = v10;
    swift_retain();
    swift_retain();
    MEMORY[0x18C113DA0](v23, v11);
    if (v23[0] != a2 || v23[1] != a3)
    {
      unsigned int v17 = *(_DWORD *)(v3 + 40);
      outlined release of ScrollViewCommitInfo?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined copy of ScrollViewCommitInfo);
      Transaction.subscript.getter();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v23[0] = v21;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)a1, v17, isUniquelyReferenced_nonNull_native);
      double v22 = v23[0];
      swift_bridgeObjectRelease();
      v23[0] = v22;
      Transaction.subscript.setter();
      double v19 = v24;
      uint64_t v20 = swift_allocObject();
      *(double *)(v20 + 16) = v19;
      *(void *)(v20 + 24) = v9;
      *(void *)(v20 + 32) = v8;
      *(void *)(v20 + 40) = v7;
      *(double *)(v20 + 48) = a2;
      *(double *)(v20 + 56) = a3;
      swift_retain();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();
      swift_release();
      return swift_release();
    }
    swift_release();
    swift_release();
  }
  unsigned int v12 = *(_DWORD *)(v3 + 40);
  outlined release of ScrollViewCommitInfo?(a1, (void (*)(void, void, void, void, void, void, void, void, void, void))outlined copy of ScrollViewCommitInfo);
  Transaction.subscript.getter();
  char v13 = swift_isUniquelyReferenced_nonNull_native();
  double v24 = v23[0];
  v23[0] = -0.0;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)a1, v12, v13);
  v23[0] = v24;
  swift_bridgeObjectRelease();
  double v24 = v23[0];
  Transaction.subscript.setter();
  if (MEMORY[0x18C119DF0](v3 + 16))
  {
    uint64_t v14 = *(void *)(v3 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v14 + 16))(ObjectType, v14);
    swift_unknownObjectRelease();
    LOBYTE(v24) = 1;
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)();
    swift_release();
    return swift_release_n();
  }
  return swift_release();
}

uint64_t specialized closure #1 in ScrollViewNode.commitScrollTransaction(_:value:)()
{
  return swift_release();
}

uint64_t ScrollViewNode.__deallocating_deinit()
{
  outlined destroy of weak FallbackResponderProvider?(v0 + 16);
  outlined consume of ScrollViewBehavior.Phase(*(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136), *(unsigned __int16 *)(v0 + 144) | (*(unsigned __int8 *)(v0 + 146) << 16));
  swift_bridgeObjectRelease();
  outlined destroy of _ScrollViewConfig(v0 + 168);
  swift_release();
  swift_weakDestroy();

  return swift_deallocClassInstance();
}

BOOL static _ScrollViewAnimationMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void _ScrollViewAnimationMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int _ScrollViewAnimationMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t Transaction._scrollViewAnimates.getter()
{
  return Transaction.subscript.getter();
}

uint64_t Transaction._scrollViewAnimates.setter()
{
  return Transaction.subscript.setter();
}

uint64_t (*Transaction._scrollViewAnimates.modify(void *a1))(uint64_t a1)
{
  *a1 = v1;
  Transaction.subscript.getter();
  return Transaction._scrollViewAnimates.modify;
}

uint64_t Transaction._scrollViewAnimates.modify(uint64_t a1)
{
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a1 + 8);
  return Transaction.subscript.setter();
}

uint64_t protocol witness for static TransactionKey.defaultValue.getter in conformance Transaction.ScrollInfoKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static Transaction.ScrollInfoKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TransactionKey._valuesEqual(_:_:) in conformance Transaction.ScrollInfoKey()
{
  return MEMORY[0x1F40FE588]();
}

uint64_t ScrollViewGesture.gestureMask.getter()
{
  uint64_t v1 = *v0;
  int v2 = *((_DWORD *)v0 + 2);
  uint64_t v3 = *v0 + 168;
  swift_beginAccess();
  if (*(unsigned char *)(v3 + 129) != 1) {
    return 1;
  }
  outlined init with copy of TableColumnList(v1 + 256, (uint64_t)v10);
  uint64_t v4 = v11;
  uint64_t v5 = v12;
  __swift_project_boxed_opaque_existential_1(v10, v11);
  uint64_t v8 = v1;
  int v9 = v2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(&v8, v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v6;
}

uint64_t ScrollViewGesture.gesture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  int v4 = *(_DWORD *)(v1 + 8);
  swift_beginAccess();
  outlined init with copy of TableColumnList(v3 + 256, (uint64_t)v11);
  uint64_t v5 = v11[4];
  __swift_project_boxed_opaque_existential_1(v11, v11[3]);
  uint64_t v9 = v3;
  int v10 = v4;
  _ScrollViewGestureProvider.gesture(proxy:)(&v9, v5, (uint64_t)&v13);
  uint64_t v6 = v13;
  char v7 = v14;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  uint64_t v9 = v3;
  AnyHashable.init<A>(_:)();
  char v12 = 0;
  outlined init with copy of CoordinateSpace((uint64_t)v11, (uint64_t)&v9);
  outlined init with copy of CoordinateSpaceGesture<ScrollGesture.Value>((uint64_t)&v9, a1 + 32);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 24) = v4;
  swift_retain();
  outlined destroy of CoordinateSpaceGesture<ScrollGesture.Value>((uint64_t)&v9);
  outlined destroy of CoordinateSpace((uint64_t)v11);
  return swift_release();
}

uint64_t closure #1 in ScrollViewGesture.dispatch(phase:state:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    outlined init with take of ScrollViewCommitInfo?(a2, (uint64_t)v5, &lazy cache variable for type metadata for GesturePhase<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, MEMORY[0x1E4F3F5F8]);
    swift_beginAccess();
    ScrollViewBehavior.dispatchPhase(_:node:)((uint64_t)v5, v4);
    swift_endAccess();
    return swift_release();
  }
  return result;
}

uint64_t (*protocol witness for GestureCallbacks.dispatch(phase:state:) in conformance ScrollViewGesture(uint64_t a1))()
{
  uint64_t v1 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F5F8];
  outlined init with take of ScrollViewCommitInfo?(a1, (uint64_t)v5, &lazy cache variable for type metadata for GesturePhase<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, MEMORY[0x1E4F3F5F8]);
  uint64_t v2 = swift_allocObject();
  swift_weakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  outlined init with take of ScrollViewCommitInfo?((uint64_t)v5, v3 + 24, &lazy cache variable for type metadata for GesturePhase<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, v1);
  return closure #1 in ScrollViewGesture.dispatch(phase:state:)partial apply;
}

uint64_t (*protocol witness for GestureCallbacks.cancel(state:) in conformance ScrollViewGesture())()
{
  memset(v3, 0, sizeof(v3));
  char v4 = 3;
  uint64_t v0 = swift_allocObject();
  swift_weakInit();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  outlined init with take of ScrollViewCommitInfo?((uint64_t)v3, v1 + 24, &lazy cache variable for type metadata for GesturePhase<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, MEMORY[0x1E4F3F5F8]);
  return partial apply for closure #1 in ScrollViewGesture.dispatch(phase:state:);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScrollViewGesture()
{
  return static GestureViewModifier.makeView(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance ScrollViewGesture()
{
}

uint64_t ScrollViewResponder.bindEvent(_:)(uint64_t a1)
{
  type metadata accessor for DefaultLayoutViewResponder();
  uint64_t v2 = (uint64_t (*)(uint64_t))method lookup function for ResponderNode();
  uint64_t v3 = v2(a1);
  if (!v3)
  {
    outlined init with copy of TableColumnList(a1, (uint64_t)v27);
    PanEvent.init(_:)();
    uint64_t v4 = v34;
    if (v34 != 1)
    {
      uint64_t v6 = v28;
      uint64_t v5 = v29;
      uint64_t v7 = v30;
      uint64_t v26 = v31;
      uint64_t v8 = v32;
      uint64_t v9 = v33;
      uint64_t v11 = v35;
      uint64_t v10 = v36;
      uint64_t v12 = v37;
      uint64_t v21 = v38;
      char v22 = v39;
      ScrollViewNode.scrollableDirections(includeAlwaysBounceOptions:)(1, &v28);
      int v25 = v28;
      uint64_t v28 = v6;
      uint64_t v29 = v5;
      uint64_t v30 = v7;
      uint64_t v31 = v26;
      LOBYTE(v32) = v8;
      uint64_t v33 = v9;
      uint64_t v34 = v4;
      uint64_t v24 = v4;
      uint64_t v13 = v21;
      uint64_t v35 = v11;
      uint64_t v36 = v10;
      uint64_t v37 = v12;
      uint64_t v38 = v21;
      char v39 = v22;
      PanEvent.translation.getter();
      if (v14 != 0.0)
      {
        if (one-time initialization token for horizontal != -1) {
          goto LABEL_24;
        }
        goto LABEL_6;
      }
      for (int i = 0; ; int i = static _EventDirections.horizontal)
      {
        uint64_t v28 = v6;
        uint64_t v29 = v5;
        uint64_t v30 = v7;
        uint64_t v31 = v26;
        LOBYTE(v32) = v8;
        uint64_t v33 = v9;
        uint64_t v34 = v24;
        uint64_t v35 = v11;
        uint64_t v36 = v10;
        uint64_t v37 = v12;
        uint64_t v38 = v13;
        char v39 = v22;
        PanEvent.translation.getter();
        if (v15 == 0.0)
        {
          outlined consume of PanEvent?(v6, v5, v7, v26, v8, v9, v24);
          int v16 = i;
        }
        else
        {
          if (one-time initialization token for vertical != -1) {
            swift_once();
          }
          int v17 = static _EventDirections.vertical[0];
          outlined consume of PanEvent?(v6, v5, v7, v26, v8, v9, v24);
          if ((v17 & ~i) != 0) {
            int v18 = v17;
          }
          else {
            int v18 = 0;
          }
          int v16 = v18 | i;
        }
        if ((v16 & v25) == 0) {
          return 0;
        }
        uint64_t v19 = MultiViewResponder.children.getter();
        uint64_t v13 = v19;
        if ((v19 & 0xC000000000000001) != 0) {
          break;
        }
        if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v3 = *(void *)(v19 + 32);
          swift_retain();
LABEL_19:
          swift_bridgeObjectRelease();
          return v3;
        }
        __break(1u);
LABEL_24:
        swift_once();
LABEL_6:
        ;
      }
      uint64_t v3 = MEMORY[0x18C117680](0, v19);
      goto LABEL_19;
    }
    return 0;
  }
  return v3;
}

void ScrollViewResponder.__allocating_init(inputs:)()
{
}

void ScrollViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
}

uint64_t ScrollViewResponder.__ivar_destroyer()
{
  return swift_release();
}

uint64_t ScrollViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t closure #1 in ScrollViewResponderFilter.updateValue()(uint64_t *a1, uint64_t a2)
{
  MultiViewResponder.children.setter();
  type metadata accessor for Attribute<_ScrollViewProxy>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_188351940;
  *(void *)(v4 + 32) = a2;
  uint64_t v6 = v4;
  specialized Array._endMutation()();
  *a1 = v6;

  return swift_retain();
}

uint64_t protocol witness for StatefulRule.updateValue() in conformance ScrollViewResponderFilter()
{
  type metadata accessor for (_:)();
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    swift_retain();
    AGGraphSetOutputValue();
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for ScrollViewNode()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type External<ScrollViewNode> and conformance External<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t result = lazy protocol witness table cache variable for type External<ScrollViewNode> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<ScrollViewNode> and conformance External<A>)
  {
    type metadata accessor for External<ScrollViewNode>(255, &lazy cache variable for type metadata for External<ScrollViewNode>, a3, (uint64_t (*)(uint64_t))type metadata accessor for ScrollViewNode, MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<ScrollViewNode> and conformance External<A>);
  }
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init(type:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ScrollViewNode();

  return MEMORY[0x1F410B078](a1, a2, v4);
}

{
  uint64_t v4;
  uint64_t vars8;

  uint64_t v4 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);

  return MEMORY[0x1F410B078](a1, a2, v4);
}

uint64_t specialized ScrollViewNode.init(host:attribute:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v4 = a3;
  unint64_t v6 = HIDWORD(a3);
  *(void *)(v3 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(unsigned char *)(v3 + 146) = 0x80;
  *(_WORD *)(v3 + 144) = 0;
  *(_DWORD *)(v3 + 148) = 0;
  *(void *)(v3 + 152) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(v3 + 160) = 0;
  *(_OWORD *)(v3 + 164) = 0u;
  *(_OWORD *)(v3 + 180) = 0u;
  *(void *)(v3 + 193) = 0;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_OWORD *)(v3 + 224) = 0u;
  *(void *)(v3 + 240) = 0x3FEFEF9DB22D0E56;
  *(_WORD *)(v3 + 248) = 0;
  *(void *)(v3 + 280) = &type metadata for EmptyGestureProvider;
  *(void *)(v3 + 288) = &protocol witness table for EmptyGestureProvider;
  *(_DWORD *)(v3 + 296) = 16843008;
  *(_OWORD *)(v3 + 304) = 0u;
  *(_OWORD *)(v3 + 320) = 0u;
  static CGSize.invalidValue.getter();
  *(void *)(v3 + 336) = v7;
  *(void *)(v3 + 344) = v8;
  static CGSize.invalidValue.getter();
  *(void *)(v3 + 352) = v9;
  *(void *)(v3 + 360) = v10;
  swift_weakInit();
  *(unsigned char *)(v3 + 392) = 0;
  *(void *)(v3 + 400) = 0;
  *(_DWORD *)(v3 + 408) = 0;
  *(void *)(v3 + 24) = a2;
  swift_unknownObjectWeakAssign();
  *(_DWORD *)(v3 + 32) = v4;
  *(_DWORD *)(v3 + 36) = v6;
  *(void *)(v3 + 368) = protocol witness for UIKitButtonAdaptorContent.sizeThatFits(_:uiButton:) in conformance PlatformItemContent;
  *(void *)(v3 + 376) = 0;
  int v11 = static ScrollViewNode.nextUniqueId;
  *(_DWORD *)(v3 + 40) = static ScrollViewNode.nextUniqueId;
  static ScrollViewNode.nextUniqueId = v11 + 1;
  return v3;
}

unint64_t lazy protocol witness table accessor for type ContentSize and conformance ContentSize()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentSize and conformance ContentSize;
  if (!lazy protocol witness table cache variable for type ContentSize and conformance ContentSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentSize and conformance ContentSize);
  }
  return result;
}

uint64_t type metadata accessor for ScrollViewUpdate()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _ScrollView.Main.ScrollableProvider()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for PanEventType?(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for CVarArg(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ScrollViewEnvironment and conformance ScrollViewEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewEnvironment and conformance ScrollViewEnvironment;
  if (!lazy protocol witness table cache variable for type ScrollViewEnvironment and conformance ScrollViewEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewEnvironment and conformance ScrollViewEnvironment);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ScrollViewChildModifier and conformance ScrollViewChildModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewChildModifier and conformance ScrollViewChildModifier;
  if (!lazy protocol witness table cache variable for type ScrollViewChildModifier and conformance ScrollViewChildModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewChildModifier and conformance ScrollViewChildModifier);
  }
  return result;
}

uint64_t sub_188186E10()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static _ScrollView.Main._makeView(view:inputs:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static _ScrollView.Main._makeView(view:inputs:)(a1, a2, *(_DWORD *)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry> and conformance <> ModifiedContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>(255, &lazy cache variable for type metadata for ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, MEMORY[0x1E4F406F0], (uint64_t)&type metadata for ScrollViewGeometry, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #3 in static _ScrollView.Main._makeView(view:inputs:)(uint64_t a1)
{
  return closure #3 in static _ScrollView.Main._makeView(view:inputs:)(a1);
}

uint64_t type metadata accessor for ScrollViewResponder()
{
  uint64_t result = type metadata singleton initialization cache for ScrollViewResponder;
  if (!type metadata singleton initialization cache for ScrollViewResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t partial apply for implicit closure #1 in static _ScrollView.Main._makeView(view:inputs:)()
{
  return implicit closure #1 in static _ScrollView.Main._makeView(view:inputs:)();
}

uint64_t partial apply for implicit closure #2 in static _ScrollView.Main._makeView(view:inputs:)()
{
  return implicit closure #2 in static _ScrollView.Main._makeView(view:inputs:)();
}

uint64_t partial apply for closure #5 in static _ScrollView.Main._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t result = _ViewOutputs.layoutComputer.getter();
  int v3 = *MEMORY[0x1E4F4E7A0];
  if ((result & 0x100000000) == 0) {
    int v3 = result;
  }
  *(_DWORD *)(a1 + 8) = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type _ScrollViewAnimationMode and conformance _ScrollViewAnimationMode()
{
  unint64_t result = lazy protocol witness table cache variable for type _ScrollViewAnimationMode and conformance _ScrollViewAnimationMode;
  if (!lazy protocol witness table cache variable for type _ScrollViewAnimationMode and conformance _ScrollViewAnimationMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ScrollViewAnimationMode and conformance _ScrollViewAnimationMode);
  }
  return result;
}

uint64_t sub_1881870E8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = Transaction.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_188187138()
{
  return Transaction.subscript.setter();
}

unsigned char *storeEnumTagSinglePayload for _ScrollViewAnimationMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188187250);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ScrollViewAnimationMode()
{
  return &type metadata for _ScrollViewAnimationMode;
}

uint64_t type metadata completion function for ScrollViewResponder()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for ScrollViewResponder()
{
  return type metadata accessor for ScrollViewResponder();
}

void *type metadata accessor for Transaction.ScrollViewAnimatesKey()
{
  return &unk_1ED40FD58;
}

void *type metadata accessor for ScrollViewChildModifier()
{
  return &unk_1ED4401C8;
}

ValueMetadata *type metadata accessor for ScrollViewGesture()
{
  return &type metadata for ScrollViewGesture;
}

ValueMetadata *type metadata accessor for ScrollViewGeometry()
{
  return &type metadata for ScrollViewGeometry;
}

void *type metadata accessor for ScrollViewEnvironment()
{
  return &unk_1ED4367D0;
}

__n128 __swift_memcpy29_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollViewUpdate(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 29)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 28);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewUpdate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 29) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 29) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 28) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for ContentSize()
{
  return &unk_1ED40E128;
}

ValueMetadata *type metadata accessor for _ViewInputs.ContainingScrollViewInput()
{
  return &type metadata for _ViewInputs.ContainingScrollViewInput;
}

_UNKNOWN **base witness table accessor for ViewModifier in ScrollViewGeometry()
{
  return &protocol witness table for ScrollViewGeometry;
}

_UNKNOWN **base witness table accessor for ViewModifier in ScrollViewGesture()
{
  return &protocol witness table for ScrollViewGesture;
}

unint64_t lazy protocol witness table accessor for type ScrollViewGesture and conformance ScrollViewGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture;
  if (!lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture;
  if (!lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture;
  if (!lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture;
  if (!lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewGesture and conformance ScrollViewGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultGestureCombiner and conformance DefaultGestureCombiner()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultGestureCombiner and conformance DefaultGestureCombiner;
  if (!lazy protocol witness table cache variable for type DefaultGestureCombiner and conformance DefaultGestureCombiner)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultGestureCombiner and conformance DefaultGestureCombiner);
  }
  return result;
}

uint64_t associated type witness table accessor for GestureViewModifier.ContentGesture : Gesture in ScrollViewGesture()
{
  return lazy protocol witness table accessor for type ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>>);
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>>)
  {
    type metadata accessor for Attribute<_ScrollViewProxy>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, MEMORY[0x1E4F40910]);
    type metadata accessor for ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>();
    lazy protocol witness table accessor for type CoordinateSpaceGesture<ScrollGesture.Value> and conformance CoordinateSpaceGesture<A>();
    lazy protocol witness table accessor for type ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>>);
    }
  }
}

void type metadata accessor for ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>)
  {
    type metadata accessor for _ContentShapeModifier<Rectangle>(255, &lazy cache variable for type metadata for CallbacksGesture<ScrollViewGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type ScrollViewGesture and conformance ScrollViewGesture, (uint64_t)&type metadata for ScrollViewGesture, MEMORY[0x1E4F3FC78]);
    lazy protocol witness table accessor for type CallbacksGesture<ScrollViewGesture> and conformance CallbacksGesture<A>();
    lazy protocol witness table accessor for type ScrollGesture and conformance ScrollGesture();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>);
    }
  }
}

void type metadata accessor for _ContentShapeModifier<Rectangle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CallbacksGesture<ScrollViewGesture> and conformance CallbacksGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CallbacksGesture<ScrollViewGesture> and conformance CallbacksGesture<A>;
  if (!lazy protocol witness table cache variable for type CallbacksGesture<ScrollViewGesture> and conformance CallbacksGesture<A>)
  {
    type metadata accessor for _ContentShapeModifier<Rectangle>(255, &lazy cache variable for type metadata for CallbacksGesture<ScrollViewGesture>, (uint64_t (*)(void))lazy protocol witness table accessor for type ScrollViewGesture and conformance ScrollViewGesture, (uint64_t)&type metadata for ScrollViewGesture, MEMORY[0x1E4F3FC78]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallbacksGesture<ScrollViewGesture> and conformance CallbacksGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollGesture and conformance ScrollGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollGesture and conformance ScrollGesture;
  if (!lazy protocol witness table cache variable for type ScrollGesture and conformance ScrollGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGesture and conformance ScrollGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceGesture<ScrollGesture.Value> and conformance CoordinateSpaceGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpaceGesture<ScrollGesture.Value> and conformance CoordinateSpaceGesture<A>;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceGesture<ScrollGesture.Value> and conformance CoordinateSpaceGesture<A>)
  {
    type metadata accessor for Attribute<_ScrollViewProxy>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, MEMORY[0x1E4F40910]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceGesture<ScrollGesture.Value> and conformance CoordinateSpaceGesture<A>);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in _ScrollView<A>.Main.ScrollableProvider()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ScrollViewUpdate<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_1881879C8()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ScrollViewUpdate.updateValue()()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 56))();
}

void type metadata accessor for ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey>, (uint64_t)&type metadata for TopScrollIndicatorFollowsContentOffsetKey, (uint64_t)&protocol witness table for TopScrollIndicatorFollowsContentOffsetKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TopScrollIndicatorFollowsContentOffsetKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_188187B94()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_188187BCC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined consume of ScrollViewCommitInfo?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((unint64_t)a8 >> 1 != 0xFFFFFFFF) {
    return outlined consume of ScrollViewCommitInfo(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return a1;
}

uint64_t outlined consume of ScrollViewCommitInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a8 < 0) {
    return outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a9, a10);
  }
  return result;
}

uint64_t type metadata accessor for _ScrollView.Main.ScrollableLayoutScrollable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_188187C48()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ContentOffset and conformance ContentOffset()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentOffset and conformance ContentOffset;
  if (!lazy protocol witness table cache variable for type ContentOffset and conformance ContentOffset)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentOffset and conformance ContentOffset);
  }
  return result;
}

uint64_t outlined init with copy of CoordinateSpaceGesture<ScrollGesture.Value>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Attribute<_ScrollViewProxy>(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<ScrollGesture.Value>, (uint64_t)&type metadata for ScrollGesture.Value, MEMORY[0x1E4F40910]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_188187D88()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_188187DC0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with take of ScrollViewCommitInfo?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  type metadata accessor for Attribute<_ScrollViewProxy>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t partial apply for closure #1 in ScrollViewGesture.dispatch(phase:state:)()
{
  return closure #1 in ScrollViewGesture.dispatch(phase:state:)(*(void *)(v0 + 16), v0 + 24);
}

uint64_t outlined consume of PanEvent?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7 != 1) {
    return swift_release();
  }
  return result;
}

void *outlined release of ScrollViewCommitInfo?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

void type metadata accessor for External<ScrollViewNode>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = a4(a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_188187F40()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in ScrollViewNode.commitScrollTransaction(_:value:)()
{
  return specialized closure #1 in ScrollViewNode.commitScrollTransaction(_:value:)();
}

void type metadata accessor for Map<_ScrollViewProxy, _ScrollViewProxy?>()
{
  if (!lazy cache variable for type metadata for Map<_ScrollViewProxy, _ScrollViewProxy?>)
  {
    type metadata accessor for Attribute<_ScrollViewProxy>(255, &lazy cache variable for type metadata for _ScrollViewProxy?, (uint64_t)&type metadata for _ScrollViewProxy, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Map();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Map<_ScrollViewProxy, _ScrollViewProxy?>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<CoordinateSpaceGesture<ScrollGesture.Value>, ModifierGesture<CallbacksGesture<ScrollViewGesture>, ScrollGesture>> and conformance ModifierGesture<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewResponderFilter and conformance ScrollViewResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewResponderFilter and conformance ScrollViewResponderFilter;
  if (!lazy protocol witness table cache variable for type ScrollViewResponderFilter and conformance ScrollViewResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewResponderFilter and conformance ScrollViewResponderFilter);
  }
  return result;
}

uint64_t sub_1881880B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 40))(*(void *)(a3 + a2 - 16));
}

uint64_t sub_1881880F0()
{
  return 16;
}

__n128 sub_1881880FC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *type metadata accessor for ScrollViewResponderFilter()
{
  return &unk_1ED4485E0;
}

void *type metadata accessor for ContentOffset()
{
  return &unk_1ED4145E0;
}

void *type metadata accessor for Transaction.ScrollInfoKey()
{
  return &unk_1ED40FCF8;
}

uint64_t destroy for ScrollViewCommitInfo(uint64_t *a1)
{
  return outlined consume of ScrollViewCommitInfo(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
}

uint64_t *initializeWithCopy for ScrollViewCommitInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  outlined copy of ScrollViewCommitInfo(*a2, v4, v5, v6, v7, v8, v9, v10, v11);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  return a1;
}

uint64_t *assignWithCopy for ScrollViewCommitInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v23 = a2[9];
  outlined copy of ScrollViewCommitInfo(*a2, v4, v5, v6, v7, v8, v9, v10, v11);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v17 = a1[5];
  uint64_t v18 = a1[6];
  uint64_t v19 = a1[7];
  uint64_t v20 = a1[8];
  uint64_t v21 = a1[9];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v23;
  outlined consume of ScrollViewCommitInfo(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21);
  return a1;
}

uint64_t *assignWithTake for ScrollViewCommitInfo(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  uint64_t v11 = a1[8];
  uint64_t v12 = a1[9];
  long long v13 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v13;
  long long v14 = a2[3];
  *((_OWORD *)a1 + 2) = a2[2];
  *((_OWORD *)a1 + 3) = v14;
  *((_OWORD *)a1 + 4) = a2[4];
  outlined consume of ScrollViewCommitInfo(v3, v5, v4, v6, v7, v8, v9, v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewCommitInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 56) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ScrollViewCommitInfo(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 72) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 2 * -a2;
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 72) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for ScrollViewCommitInfo(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = *(void *)(result + 56) & 1 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewCommitInfo()
{
  return &type metadata for ScrollViewCommitInfo;
}

uint64_t base witness table accessor for Scrollable in _ScrollView<A>.Main.ScrollableLayoutScrollable()
{
  return swift_getWitnessTable();
}

void protocol witness for View.body.getter in conformance ListRepresentable<A, B>()
{
}

{
  specialized PrimitiveView.body.getter();
}

double protocol witness for static View._makeView(view:inputs:) in conformance PlatformViewControllerRepresentableAdaptor<A>@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static PlatformViewRepresentable._makeView(view:inputs:)(a1, a2, a3, WitnessTable, a4);
}

void protocol witness for View.body.getter in conformance PlatformViewControllerRepresentableAdaptor<A>()
{
}

uint64_t RemoteSheetContainerVCKey.Storage.remoteSheet.getter()
{
  outlined init with copy of RemoteSheetContainerVCKey.Storage(v0, (uint64_t)v6, MEMORY[0x1E4FBC920]);
  if (v6[8])
  {
    outlined init with take of RemoteSheetContainerVCKey.Storage?((uint64_t)v6, (uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for WeakBox<_UIRemoteViewControllerContaining>, (uint64_t)&lazy cache variable for type metadata for _UIRemoteViewControllerContaining, (uint64_t)&protocolRef__UIRemoteViewControllerContaining, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    uint64_t v1 = (void *)MEMORY[0x18C119DF0](v5);
    if (v1)
    {
      id v2 = objc_msgSend(v1, sel__containedRemoteViewController);
      swift_unknownObjectRelease();
      outlined destroy of WeakBox<_UIRemoteViewControllerContaining>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for WeakBox<_UIRemoteViewControllerContaining>, &lazy cache variable for type metadata for _UIRemoteViewControllerContaining);
      if (v2) {
        return swift_dynamicCastObjCProtocolUnconditional();
      }
    }
    else
    {
      outlined destroy of WeakBox<_UIRemoteViewControllerContaining>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for WeakBox<_UIRemoteViewControllerContaining>, &lazy cache variable for type metadata for _UIRemoteViewControllerContaining);
      return 0;
    }
  }
  else
  {
    outlined init with take of RemoteSheetContainerVCKey.Storage?((uint64_t)v6, (uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for WeakBox<_UIRemoteSheetContaining>, (uint64_t)&lazy cache variable for type metadata for _UIRemoteSheetContaining, (uint64_t)&protocolRef__UIRemoteSheetContaining, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    int v3 = (void *)MEMORY[0x18C119DF0](v5);
    if (v3)
    {
      id v2 = objc_msgSend(v3, sel__remoteSheet);
      swift_unknownObjectRelease();
    }
    else
    {
      id v2 = 0;
    }
    outlined destroy of WeakBox<_UIRemoteViewControllerContaining>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for WeakBox<_UIRemoteSheetContaining>, (unint64_t *)&lazy cache variable for type metadata for _UIRemoteSheetContaining);
  }
  return (uint64_t)v2;
}

uint64_t implicit closure #1 in PlatformViewChild.updateValue()(uint64_t a1)
{
  type metadata accessor for [KeyPress.Handler](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_188357320;
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    id v4 = (id)AGGraphGetAttributeGraph();
    Swift::UInt v5 = AGGraphRef.graphIdentity()();

    uint64_t v6 = MEMORY[0x1E4FBB808];
    uint64_t v7 = MEMORY[0x1E4FBB868];
    *(void *)(v2 + 56) = MEMORY[0x1E4FBB808];
    *(void *)(v2 + 64) = v7;
    *(void *)(v2 + 32) = v5;
    uint64_t v8 = _typeName(_:qualified:)();
    uint64_t v10 = v9;
    *(void *)(v2 + 96) = MEMORY[0x1E4FBB1A0];
    *(void *)(v2 + 104) = lazy protocol witness table accessor for type String and conformance String();
    *(void *)(v2 + 72) = v8;
    *(void *)(v2 + 80) = v10;
    uint64_t v11 = *(void *)(a1 + *(int *)(type metadata accessor for PlatformViewChild() + 84));
    *(void *)(v2 + 136) = v6;
    *(void *)(v2 + 144) = v7;
    *(void *)(v2 + 112) = v11;
    return v2;
  }
  return result;
}

Swift::Void __swiftcall PlatformViewChild.resetPlatformView()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v70 = *(void *)(v2 - 8);
  ((void (*)())MEMORY[0x1F4188790])();
  uint64_t v69 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v65 = *(void *)(v7 - 8);
  uint64_t v66 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v75 = (uint64_t)&v57 - v8;
  uint64_t v76 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v9);
  int v67 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  long long v13 = (char *)&v57 - v12;
  uint64_t v79 = AssociatedTypeWitness;
  uint64_t v77 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(void *)(v77 + 64);
  MEMORY[0x1F4188790](v15);
  uint64_t v72 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v73 = (char *)&v57 - v17;
  uint64_t v68 = v5;
  uint64_t v71 = v2;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  char v22 = (char *)&v57 - v21;
  uint64_t v23 = *(void *)(v18 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  MEMORY[0x1F4188790](v25);
  uint64_t v64 = (char *)&v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v78 = (char *)&v57 - v28;
  uint64_t v29 = v74;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v22, v74 + *(int *)(v1 + 80), v19, v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v18) == 1)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
  }
  else
  {
    uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
    uint64_t v62 = v23 + 32;
    v61(v78, v22, v18);
    uint64_t v30 = v76;
    uint64_t v31 = v76 + 16;
    uint64_t v60 = *(void (**)(char *, uint64_t, uint64_t))(v76 + 16);
    v60(v13, v29, v1);
    uint64_t v32 = v75;
    PlatformViewChild.representedViewProvider.getter(v1, v75);
    uint64_t v34 = *(void (**)(char *, uint64_t))(v30 + 8);
    uint64_t v33 = v30 + 8;
    uint64_t v63 = v34;
    v34(v13, v1);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v32, 1, v79) == 1)
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v78, v18);
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v75, v66);
    }
    else
    {
      uint64_t v35 = v77;
      uint64_t v65 = v1;
      uint64_t v58 = *(void (**)(void))(v77 + 32);
      uint64_t v59 = v77 + 32;
      uint64_t v66 = v31;
      uint64_t v36 = v73;
      uint64_t v37 = v79;
      v58();
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v72, v36, v37);
      uint64_t v38 = v64;
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v64, v78, v18);
      uint64_t v39 = *(unsigned __int8 *)(v35 + 80);
      uint64_t v40 = v29;
      uint64_t v41 = (v39 + 32) & ~v39;
      unint64_t v42 = (v14 + *(unsigned __int8 *)(v23 + 80) + v41) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
      unint64_t v43 = (v24 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v44 = swift_allocObject();
      uint64_t v76 = v33;
      uint64_t v45 = v44;
      uint64_t v47 = v71;
      int v46 = v72;
      uint64_t v48 = v68;
      *(void *)(v44 + 16) = v71;
      *(void *)(v44 + 24) = v48;
      ((void (*)(uint64_t, char *, uint64_t))v58)(v44 + v41, v46, v79);
      v61((char *)(v45 + v42), v38, v18);
      uint64_t v49 = v40;
      *(void *)(v45 + v43) = v40;
      uint64_t v50 = v67;
      uint64_t v51 = v65;
      v60(v67, v49, v65);
      uint64_t Value = AGGraphGetValue();
      uint64_t v53 = v69;
      uint64_t v54 = v70;
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, Value, v47);
      v63(v50, v51);
      uint64_t v55 = v73;
      uint64_t v56 = v78;
      (*(void (**)(char *, char *, void (*)(), uint64_t, uint64_t, uint64_t))(v48 + 56))(v73, v78, partial apply for closure #1 in PlatformViewChild.resetPlatformView(), v45, v47, v48);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v47);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v55, v79);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v56, v18);
      swift_release();
    }
  }
}

uint64_t static PlatformViewChild.scrapeContent(from:)@<X0>(uint64_t a1@<X8>)
{
  AGGraphGetAttributeInfo();
  uint64_t v3 = v2;
  uint64_t result = type metadata accessor for PlatformViewChild();
  uint64_t v5 = *(void **)(v3 + *(int *)(result + 84));
  if (v5)
  {
    *(void *)(swift_allocObject() + 16) = v5;
    id v6 = v5;
    uint64_t result = ScrapeableContent.Item.init(_:ids:_:position:size:transform:)();
    long long v7 = v12;
    long long v8 = v13;
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = v10;
    *(void *)(a1 + 32) = v11;
  }
  else
  {
    long long v7 = 0uLL;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 32) = 1;
    long long v8 = 0uLL;
  }
  *(_OWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 56) = v8;
  return result;
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance PlatformViewChild<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ViewLeafView();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for static ScrapeableAttribute.scrapeContent(from:) in conformance PlatformViewChild<A>@<X0>(uint64_t a1@<X8>)
{
  return static PlatformViewChild.scrapeContent(from:)(a1);
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance InvalidatableLeafLayoutComputer<A>()
{
  return 0xD00000000000001FLL;
}

uint64_t PlatformViewIdentifiedViews.leafView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ViewLeafView();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t protocol witness for LayoutEngine.childGeometries(at:origin:) in conformance PlatformViewLayoutEngine<A>()
{
  return MEMORY[0x1F40FD928]();
}

double *PlatformViewIdentifiedViews.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ViewLeafView();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  long long v8 = (char *)&v10 - v7;
  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    PlatformViewIdentifiedViews.leafView.getter((uint64_t)v8);
    AGGraphClearUpdate();
    closure #1 in PlatformViewIdentifiedViews.value.getter((uint64_t)v8, a2, a3);
    AGGraphSetUpdate();
    return (double *)(*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

uint64_t closure #1 in PlatformViewIdentifiedViews.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v8 = (char *)&v11 - v7;
  uint64_t v9 = type metadata accessor for ViewLeafView();
  PlatformViewHost.updateHostedViewBounds()();
  ViewLeafView.representedViewProvider.getter(v9, (uint64_t)v8);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 88))(v8, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
}

double protocol witness for static Rule.initialValue.getter in conformance PlatformViewIdentifiedViews<A>@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 160) = -1;
  return result;
}

double *protocol witness for Rule.value.getter in conformance PlatformViewIdentifiedViews<A>(uint64_t a1)
{
  return PlatformViewIdentifiedViews.value.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t PlatformArchivedDisplayList.value.getter()
{
  DisplayList.Version.init(forUpdate:)();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 40) = type metadata accessor for PlatformArchivedDisplayList.Factory();
  *(void *)(v0 + 48) = swift_getWitnessTable();
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  uint64_t v1 = swift_retain();
  MEMORY[0x18C114450](v1);
  DisplayList.Item.init(_:frame:identity:version:)();
  outlined copy of DisplayList.Item.Value(v3, v4);
  DisplayList.init(_:)();
  swift_release();

  return outlined consume of DisplayList.Item.Value(v3, v4);
}

void protocol witness for PlatformViewFactory.makePlatformView() in conformance PlatformArchivedDisplayList<A>.Factory()
{
}

void protocol witness for PlatformViewFactory.updatePlatformView(_:) in conformance PlatformArchivedDisplayList<A>.Factory()
{
}

uint64_t protocol witness for PlatformViewFactory.renderPlatformView(in:size:renderer:) in conformance PlatformArchivedDisplayList<A>.Factory()
{
  return MEMORY[0x1F40FF920]();
}

uint64_t ViewLeafView.renderPlatformView(in:size:renderer:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  v6[1] = *(_OWORD *)(a3 + 16);
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  double v9 = a4;
  double v10 = a5;
  return MEMORY[0x18C113CE0](partial apply for closure #1 in ViewLeafView.renderPlatformView(in:size:renderer:), v6);
}

void ViewLeafView.unifiedLayoutSize(in:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = a1[2];
  char v6 = *((unsigned char *)a1 + 24);
  *(void *)&long long v21 = *a1;
  BYTE8(v21) = v4;
  uint64_t v22 = v5;
  char v23 = v6;
  _ProposedSize.width.getter();
  if ((v7 & 1) != 0
    || (*(void *)&long long v21 = v3, BYTE8(v21) = v4, v22 = v5, v23 = v6, _ProposedSize.height.getter(), (v8 & 1) != 0))
  {
    ViewLeafView.layoutTraits()(a2, &v21);
    _LayoutTraits.idealSize.getter();
    CGSize v14 = _ProposedSize.fixingUnspecifiedDimensions(at:)((CGSize)__PAIR128__(v13, v12));
    double height = v14.height;
    double width = v14.width;
  }
  else
  {
    *(void *)&long long v21 = v3;
    BYTE8(v21) = v4;
    uint64_t v22 = v5;
    char v23 = v6;
    CGSize v11 = _ProposedSize.fixingUnspecifiedDimensions()();
    double height = v11.height;
    double width = v11.width;
  }
  if (width <= 50000.0) {
    double v15 = width;
  }
  else {
    double v15 = 50000.0;
  }
  *(void *)&long long v21 = v3;
  BYTE8(v21) = v4;
  if (height <= 50000.0) {
    double v16 = height;
  }
  else {
    double v16 = 50000.0;
  }
  uint64_t v22 = v5;
  char v23 = v6;
  _ProposedSize.width.getter();
  *(void *)&long long v21 = v3;
  BYTE8(v21) = v4;
  BOOL v18 = v15 != 0.0 && (v17 & 1) == 0;
  uint64_t v22 = v5;
  char v23 = v6;
  _ProposedSize.height.getter();
  uint64_t v20 = 2;
  if (v19 & 1 | (v16 == 0.0)) {
    uint64_t v20 = 0;
  }
  PlatformViewHost._layoutSizeThatFits(_:fixedAxes:)(v20 | v18, v15, v16);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ViewLeafView<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ViewLeafView<A>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance ViewLeafView<A>()
{
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance PlatformViewHost<A>.UnarySubtreeSequence(uint64_t a1)
{
  uint64_t v3 = specialized Sequence._copyToContiguousArray()();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8))(v1, a1);
  return v3;
}

uint64_t protocol witness for GraphMutation.apply() in conformance EnableTransparentBackgroundMutation()
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x1E4F4E7A0]) {
    return AGGraphSetValue();
  }
  return result;
}

ValueMetadata *type metadata accessor for PlatformViewLayoutInvalidator()
{
  return &type metadata for PlatformViewLayoutInvalidator;
}

double protocol witness for static View._makeView(view:inputs:) in conformance PlatformViewRepresentableAdaptor<A>@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static PlatformViewRepresentable._makeView(view:inputs:)(a1, a2, a3, WitnessTable, a4);
}

void protocol witness for View.body.getter in conformance PlatformViewRepresentableAdaptor<A>()
{
}

uint64_t specialized Sequence._copyToContiguousArray()()
{
  return MEMORY[0x1F4185CF8]();
}

void specialized View.bodyError()()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_188189D30()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

void partial apply for closure #1 in PlatformViewChild.resetPlatformView()()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t))(v1 + 64))(v0 + v4, v0 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v2, v1);
  uint64_t v7 = type metadata accessor for PlatformViewChild();
  PlatformViewChild.reset()(v7);
}

uint64_t sub_18818A01C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in PlatformViewChild.updateValue()()
{
  return implicit closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 32));
}

void type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for _UISceneBSActionHandler(255, a3);
    unint64_t v4 = type metadata accessor for WeakBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined destroy of WeakBox<_UIRemoteViewControllerContaining>(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t type metadata accessor for PlatformArchivedDisplayList()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for RemoteSheetContainerViewGraphFeature()
{
  return &type metadata for RemoteSheetContainerViewGraphFeature;
}

ValueMetadata *type metadata accessor for EnableTransparentBackgroundMutation()
{
  return &type metadata for EnableTransparentBackgroundMutation;
}

uint64_t type metadata accessor for PlatformArchivedDisplayList.Factory()
{
  return __swift_instantiateGenericMetadata();
}

void *initializeWithTake for RemoteSheetContainerVCWriter(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithCopy for ViewResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  return a1;
}

uint64_t assignWithTake for ViewResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for RemoteSheetContainerVCKey()
{
  return &type metadata for RemoteSheetContainerVCKey;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlatformViewChild(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  size_t v9 = v8 + 7;
  int v10 = v6 & 0x100000;
  if (v7 > 7
    || v10 != 0
    || ((((((v8 + 7 + ((v7 + 72) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    uint64_t v14 = AssociatedTypeWitness;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    double v15 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    double v16 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *double v15 = *v16;
    char v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    BOOL v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *char v17 = *v18;
    char v19 = (_DWORD *)(((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v20 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *char v19 = *v20;
    long long v21 = (_DWORD *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *long long v21 = *v22;
    char v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *char v23 = *v24;
    uint64_t v25 = (_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v26 = (_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v25 = *v26;
    double v27 = (_DWORD *)(((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v28 = (_DWORD *)(((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *double v27 = *v28;
    uint64_t v29 = (_DWORD *)(((unint64_t)v27 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v30 = (_DWORD *)(((unint64_t)v28 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v29 = *v30;
    uint64_t v31 = (void *)(((unint64_t)v29 + 11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = (void *)(((unint64_t)v30 + 11) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v31 = *v32;
    uint64_t v33 = (void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v34 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v33 = *v34;
    uint64_t v35 = (_OWORD *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v36 = (_OWORD *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v35 = *v36;
    uint64_t v37 = (void *)(((unint64_t)v35 + v7 + 16) & ~v7);
    uint64_t v38 = (const void *)(((unint64_t)v36 + v7 + 16) & ~v7);
    uint64_t v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v39(v38, 1, v14))
    {
      memcpy(v37, v38, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v37, v38, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v37, 0, 1, v14);
    }
    uint64_t v40 = (void *)(((unint64_t)v37 + v9) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v41 = (void **)(((unint64_t)v38 + v9) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v42 = *v41;
    *uint64_t v40 = *v41;
    unint64_t v43 = (_DWORD *)(((unint64_t)v40 + 11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v44 = (_DWORD *)(((unint64_t)v41 + 11) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v43 = *v44;
    *(void *)(((unint64_t)v43 + 11) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v44 + 11) & 0xFFFFFFFFFFFFFFF8);
    id v45 = v42;
  }
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for PlatformViewChild(_DWORD *a1, int *a2)
{
  int v4 = *a2;
  unint64_t v3 = (unint64_t)a2 + 7;
  *a1 = v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((v3 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v6 = *v7;
  size_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *size_t v8 = *v9;
  int v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  CGSize v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v10 = *v11;
  unint64_t v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v12 = *v13;
  uint64_t v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v14 = *v15;
  double v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  char v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *double v16 = *v17;
  unint64_t v18 = ((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v19 = ((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  int v20 = *(_DWORD *)v19;
  v19 += 11;
  *(_DWORD *)unint64_t v18 = v20;
  v18 += 11;
  unint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v18 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v19 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  v22 &= 0xFFFFFFFFFFFFFFF8;
  v21 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v22 = *(void *)v21;
  swift_retain();
  swift_release();
  unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v23 = *(void *)v24;
  *(_DWORD *)(v23 + 8) = *(_DWORD *)(v24 + 8);
  *(_DWORD *)(v23 + 12) = *(_DWORD *)(v24 + 12);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v28 = (void *)((v27 + 16 + v23) & ~v27);
  uint64_t v29 = (void *)((v27 + 16 + v24) & ~v27);
  uint64_t v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v26 + 48);
  int v31 = v30(v28, 1, AssociatedTypeWitness);
  int v32 = v30(v29, 1, AssociatedTypeWitness);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 16))(v28, v29, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v28, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v33 = *(_DWORD *)(v26 + 84);
    size_t v34 = *(void *)(v26 + 64);
  }
  else
  {
    if (!v32)
    {
      (*(void (**)(void *, void *, uint64_t))(v26 + 24))(v28, v29, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v26 + 8))(v28, AssociatedTypeWitness);
    int v33 = *(_DWORD *)(v26 + 84);
    size_t v34 = *(void *)(v26 + 64);
  }
  if (v33) {
    size_t v35 = v34;
  }
  else {
    size_t v35 = v34 + 1;
  }
  memcpy(v28, v29, v35);
LABEL_12:
  if (*(_DWORD *)(v26 + 84)) {
    uint64_t v36 = *(void *)(v26 + 64);
  }
  else {
    uint64_t v36 = *(void *)(v26 + 64) + 1;
  }
  unint64_t v37 = ((unint64_t)v28 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = ((unint64_t)v29 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v39 = *(void **)v38;
  v38 += 11;
  uint64_t v40 = *(void **)v37;
  *(void *)unint64_t v37 = v39;
  v37 += 11;
  id v41 = v39;

  *(_DWORD *)(v37 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v38 & 0xFFFFFFFFFFFFFFF8);
  *(void *)(((v37 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v38 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 11) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_DWORD *initializeWithTake for PlatformViewChild(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  unint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v3 = *v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  size_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *size_t v9 = *v10;
  CGSize v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *CGSize v11 = *v12;
  uint64_t v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v13 = *v14;
  double v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *double v15 = *v16;
  char v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *char v17 = *v18;
  unint64_t v19 = (void *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  int v20 = (void *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v19 = *v20;
  unint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v21 = *v22;
  unint64_t v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v23 = *v24;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v28 = (void *)(((unint64_t)v23 + v27 + 16) & ~v27);
  uint64_t v29 = (const void *)(((unint64_t)v24 + v27 + 16) & ~v27);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v29, 1, AssociatedTypeWitness))
  {
    int v30 = *(_DWORD *)(v26 + 84);
    size_t v31 = *(void *)(v26 + 64);
    if (v30) {
      size_t v32 = v31;
    }
    else {
      size_t v32 = v31 + 1;
    }
    memcpy(v28, v29, v32);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 32))(v28, v29, AssociatedTypeWitness);
    size_t v34 = *(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56);
    uint64_t v33 = v26 + 56;
    v34(v28, 0, 1, AssociatedTypeWitness);
    int v30 = *(_DWORD *)(v33 + 28);
    size_t v31 = *(void *)(v33 + 8);
  }
  if (v30) {
    size_t v35 = v31;
  }
  else {
    size_t v35 = v31 + 1;
  }
  uint64_t v36 = (void *)(((unint64_t)v28 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v37 = (void *)(((unint64_t)v29 + v35 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v36 = *v37;
  unint64_t v38 = (_DWORD *)(((unint64_t)v36 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = (_DWORD *)(((unint64_t)v37 + 11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v38 = *v39;
  *(void *)(((unint64_t)v38 + 11) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v39 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for PlatformViewChild(_DWORD *a1, int *a2)
{
  int v4 = *a2;
  unint64_t v3 = (unint64_t)a2 + 7;
  *a1 = v4;
  uint64_t v5 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v5 = *(_DWORD *)(v3 & 0xFFFFFFFFFFFFFFFCLL);
  int v6 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = (_DWORD *)(((v3 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v6 = *v7;
  size_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *size_t v8 = *v9;
  int v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  CGSize v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v10 = *v11;
  unint64_t v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v12 = *v13;
  uint64_t v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  double v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v14 = *v15;
  double v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  char v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *double v16 = *v17;
  unint64_t v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v19 = ((unint64_t)v17 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  int v20 = *(_DWORD *)v19;
  v19 += 11;
  *unint64_t v18 = v20;
  unint64_t v21 = (void *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 15;
  *unint64_t v21 = *(void *)(v19 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v22 &= 0xFFFFFFFFFFFFFFF8;
  *unint64_t v23 = *(void *)v22;
  swift_release();
  unint64_t v24 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v24 = *(void *)v25;
  *(_DWORD *)(v24 + 8) = *(_DWORD *)(v25 + 8);
  *(_DWORD *)(v24 + 12) = *(_DWORD *)(v25 + 12);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v29 = (void *)((v28 + 16 + v24) & ~v28);
  int v30 = (void *)((v28 + 16 + v25) & ~v28);
  size_t v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v32 = v31(v29, 1, AssociatedTypeWitness);
  int v33 = v31(v30, 1, AssociatedTypeWitness);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 32))(v29, v30, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v29, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v34 = *(_DWORD *)(v27 + 84);
    size_t v35 = *(void *)(v27 + 64);
  }
  else
  {
    if (!v33)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 40))(v29, v30, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v27 + 8))(v29, AssociatedTypeWitness);
    int v34 = *(_DWORD *)(v27 + 84);
    size_t v35 = *(void *)(v27 + 64);
  }
  if (v34) {
    size_t v36 = v35;
  }
  else {
    size_t v36 = v35 + 1;
  }
  memcpy(v29, v30, v36);
LABEL_12:
  if (*(_DWORD *)(v27 + 84)) {
    uint64_t v37 = *(void *)(v27 + 64);
  }
  else {
    uint64_t v37 = *(void *)(v27 + 64) + 1;
  }
  unint64_t v38 = ((unint64_t)v29 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = ((unint64_t)v30 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = *(void *)v39;
  v39 += 11;
  id v41 = *(void **)v38;
  *(void *)unint64_t v38 = v40;
  v38 += 11;

  *(_DWORD *)(v38 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v39 & 0xFFFFFFFFFFFFFFF8);
  *(void *)(((v38 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v39 & 0xFFFFFFFFFFFFFFF8)
                                                                                       + 11) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformViewChild(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 84);
  if (v7) {
    unsigned int v8 = v7 - 1;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v11 = 7;
  if (!v7) {
    uint64_t v11 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v9 < a2)
  {
    unint64_t v12 = ((((((v11 + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + ((v10 + 72) & ~v10)) & 0xFFFFFFFFFFFFFFF8)
            + 11) & 0xFFFFFFFFFFFFFFF8)
          + 11) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    uint64_t v13 = v12 & 0xFFFFFFF8;
    if ((v12 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = a2 - v9 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v12);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v12);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18818AF4CLL);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v12);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *a1;
        }
        return v9 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  int v20 = (unint64_t *)(((((((((((((((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                        + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                      + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                    + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                  + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                + 7) & 0xFFFFFFFFFFFFFFFCLL)
                              + 7) & 0xFFFFFFFFFFFFFFFCLL)
                            + 11) & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0x80000000) != 0)
  {
    unsigned int v22 = (*(uint64_t (**)(unint64_t))(v6 + 48))(((((((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                   + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                 + v10
                                                                 + 16) & ~v10);
    if (v22 >= 2) {
      return v22 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v21 = *v20;
    if (v21 >= 0xFFFFFFFF) {
      LODWORD(v21) = -1;
    }
    return (v21 + 1);
  }
}

void storeEnumTagSinglePayload for PlatformViewChild(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v9;
  }
  if (v8) {
    size_t v12 = *(void *)(v7 + 64);
  }
  else {
    size_t v12 = *(void *)(v7 + 64) + 1;
  }
  unint64_t v13 = ((((((v12 + ((v10 + 72) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v11 < a3)
  {
    if (((((((v12 + ((v10 + 72) & ~v10) + 7) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v14 = a3 - v11 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v6 = v15;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v11)
  {
    if (((((((v12 + ((v10 + 72) & ~v10) + 7) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v16 = a2 - v11;
    }
    else {
      int v16 = 1;
    }
    if (((((((v12 + ((v10 + 72) & ~v10) + 7) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) + 11) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v17 = ~v11 + a2;
      bzero(a1, ((((((v12 + ((v10 + 72) & ~v10) + 7) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)+ 8);
      *a1 = v17;
    }
    switch(v6)
    {
      case 1:
        *((unsigned char *)a1 + v13) = v16;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v13) = v16;
        return;
      case 3:
        goto LABEL_60;
      case 4:
        *(_DWORD *)((char *)a1 + v13) = v16;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      *((unsigned char *)a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)((char *)a1 + v13) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
LABEL_60:
      __break(1u);
      JUMPOUT(0x18818B274);
    case 4:
      *(_DWORD *)((char *)a1 + v13) = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (a2)
      {
LABEL_36:
        unint64_t v18 = (void *)(((((((((((((((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                    + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                  + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                + 7) & 0xFFFFFFFFFFFFFFFCLL)
                              + 7) & 0xFFFFFFFFFFFFFFFCLL)
                            + 7) & 0xFFFFFFFFFFFFFFFCLL)
                          + 7) & 0xFFFFFFFFFFFFFFFCLL)
                        + 11) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          int v20 = (unsigned char *)(((((((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                         + v10
                         + 16) & ~v10);
          if (v9 >= a2)
          {
            unint64_t v24 = *(void (**)(unint64_t, void))(v7 + 56);
            v24(((((((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v10 + 16) & ~v10, a2 + 1);
          }
          else
          {
            if (v12 <= 3) {
              int v21 = ~(-1 << (8 * v12));
            }
            else {
              int v21 = -1;
            }
            if (v12)
            {
              int v22 = v21 & (~v9 + a2);
              if (v12 <= 3) {
                int v23 = v12;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v12);
              switch(v23)
              {
                case 2:
                  *(_WORD *)int v20 = v22;
                  break;
                case 3:
                  *(_WORD *)int v20 = v22;
                  _OWORD v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)int v20 = v22;
                  break;
                default:
                  *int v20 = v22;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *unint64_t v18 = v19;
        }
      }
      return;
  }
}

uint64_t assignWithTake for ViewLeafView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  uint64_t v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  int v8 = (void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v9 = *v7;
  *uint64_t v7 = *v8;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 40))(((unint64_t)v7 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v11 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for ViewLeafView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v12 = v7;
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v13) {
    goto LABEL_28;
  }
  unint64_t v14 = ((v11 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v11)
      + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((a2 - v13 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_28:
      if (v7 == v13)
      {
        int v22 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
        return v22(a1, v7, v5);
      }
      else
      {
        int v23 = (unint64_t *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
        if ((v12 & 0x80000000) != 0)
        {
          unint64_t v25 = *(uint64_t (**)(unint64_t))(v9 + 48);
          return v25(((unint64_t)v23 + v11 + 8) & ~v11);
        }
        else
        {
          unint64_t v24 = *v23;
          if (v24 >= 0xFFFFFFFF) {
            LODWORD(v24) = -1;
          }
          return (v24 + 1);
        }
      }
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_28;
  }
LABEL_18:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v20 = v14;
    }
    else {
      int v20 = 4;
    }
    switch(v20)
    {
      case 2:
        int v21 = *a1;
        break;
      case 3:
        int v21 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v21 = *(_DWORD *)a1;
        break;
      default:
        int v21 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v21 = 0;
  }
  return v13 + (v21 | v19) + 1;
}

void storeEnumTagSinglePayload for ViewLeafView(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v25 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = *(void *)(v8 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  if (v9 <= *(_DWORD *)(v10 + 84)) {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v13 = v9;
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  size_t v15 = ((v12 + ((v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v12) + *(void *)(v10 + 64);
  if (a3 <= v14)
  {
    int v16 = 0;
  }
  else if (v15 <= 3)
  {
    unsigned int v19 = ((a3 - v14 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
    if (HIWORD(v19))
    {
      int v16 = 4;
    }
    else if (v19 >= 0x100)
    {
      int v16 = 2;
    }
    else
    {
      int v16 = v19 > 1;
    }
  }
  else
  {
    int v16 = 1;
  }
  if (v14 < a2)
  {
    unsigned int v17 = ~v14 + a2;
    if (v15 < 4)
    {
      int v18 = (v17 >> (8 * v15)) + 1;
      if (v15)
      {
        int v20 = v17 & ~(-1 << (8 * v15));
        bzero(a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v15);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        a1[v15] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v15] = v18;
        return;
      case 3:
        goto LABEL_49;
      case 4:
        *(_DWORD *)&a1[v15] = v18;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v15] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x18818B9D0);
    case 4:
      *(_DWORD *)&a1[v15] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v9 == v14)
        {
          int v21 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
          v21(a1, a2, v9, v7);
        }
        else
        {
          int v22 = (void *)((unint64_t)&a1[v11 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((v13 & 0x80000000) != 0)
          {
            unint64_t v24 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
            v24(((unint64_t)v22 + v12 + 8) & ~v12, a2);
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v23 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v23 = (a2 - 1);
            }
            *int v22 = v23;
          }
        }
      }
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformViewRepresentableContext(uint64_t a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 33) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *(void *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v12 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    uint64_t v13 = a2[3];
    char v14 = *((unsigned char *)a2 + 32);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v13, v14);
    *(void *)(a1 + 16) = v12;
    *(void *)(a1 + 24) = v13;
    *(unsigned char *)(a1 + 32) = v14;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16))((a1 + v6 + 33) & ~v6, ((unint64_t)a2 + v6 + 33) & ~v6, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t assignWithCopy for PlatformViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24))((*(unsigned __int8 *)(v11 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for PlatformViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((*(unsigned __int8 *)(v6 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for PlatformViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))((*(unsigned __int8 *)(v9 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformViewRepresentableContext(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 > v7)
  {
    uint64_t v10 = ((v8 + 33) & ~v8) + v9;
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_7;
    }
    unsigned int v14 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 >= 2)
    {
LABEL_7:
      int v12 = *((unsigned __int8 *)a1 + v10);
      if (!*((unsigned char *)a1 + v10)) {
        goto LABEL_23;
      }
LABEL_15:
      int v15 = (v12 - 1) << v11;
      if (v10 > 3) {
        int v15 = 0;
      }
      if (v10)
      {
        if (v10 > 3) {
          LODWORD(v10) = 4;
        }
        switch((int)v10)
        {
          case 2:
            LODWORD(v10) = *a1;
            break;
          case 3:
            LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v10) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v10) = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v17 = v7 + (v10 | v15);
      return (v17 + 1);
    }
  }
LABEL_23:
  if (v6 <= 0x7FFFFFFE)
  {
    uint64_t v16 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v16) = -1;
    }
    int v17 = v16 - 1;
    if (v17 < 0) {
      int v17 = -1;
    }
    return (v17 + 1);
  }
  int v18 = *(uint64_t (**)(unint64_t))(v5 + 48);

  return v18(((unint64_t)a1 + v8 + 33) & ~v8);
}

void storeEnumTagSinglePayload for PlatformViewRepresentableContext(_WORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v9 = 2147483646;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 33) & ~v8) + *(void *)(v6 + 64);
  if (a3 <= v9)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v12 = ~v9 + a2;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v10)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *a1 = v15;
          *((unsigned char *)a1 + 2) = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(unsigned char *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        *((unsigned char *)a1 + v10) = v13;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v10) = v13;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)((char *)a1 + v10) = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      *((unsigned char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)((char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18818C250);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0x7FFFFFFE)
        {
          int v17 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
          v17(((unint64_t)a1 + v8 + 33) & ~v8, a2);
        }
        else
        {
          if (a2 > 0x7FFFFFFE)
          {
            uint64_t v16 = (a2 - 0x7FFFFFFF);
            *((void *)a1 + 2) = 0;
            *((void *)a1 + 3) = 0;
            *((unsigned char *)a1 + 32) = 0;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            uint64_t v16 = a2;
          }
          *(void *)a1 = v16;
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for View in ViewLeafView<A>()
{
  return &protocol witness table for ViewLeafView<A>;
}

uint64_t base witness table accessor for _AttributeBody in PlatformArchivedDisplayList<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for AnyViewFactory in PlatformArchivedDisplayList<A>.Factory()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with copy of RemoteSheetContainerVCKey.Storage(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  BOOL v5 = v4 == 1;
  uint64_t result = a3(a2, a1);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t specialized EnableTransparentBackgroundMutation.combine<A>(with:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return swift_dynamicCast();
}

uint64_t sub_18818C3D8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 32))(&v2);
  return v2;
}

uint64_t sub_18818C448()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t sub_18818C480()
{
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ViewLeafView.renderPlatformView(in:size:renderer:)()
{
  return DisplayList.GraphicsRenderer.renderPlatformView(_:in:size:viewType:)();
}

uint64_t storeEnumTagSinglePayload for PlatformViewDisplayList(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 34) = v3;
  return result;
}

void *type metadata accessor for LeafLayoutEnvironment()
{
  return &unk_1ED4354C8;
}

uint64_t sub_18818C568()
{
  return lazy protocol witness table accessor for type _ClosureBasedIterator<UIView> and conformance _ClosureBasedIterator<A>(&lazy protocol witness table cache variable for type AnyIterator<UIView> and conformance AnyIterator<A>, &lazy cache variable for type metadata for AnyIterator<UIView>, MEMORY[0x1E4FBB978]);
}

uint64_t initializeBufferWithCopyOfBuffer for PlatformViewLayoutEngine(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  unsigned int v12 = v8 & 0xF8 | v11;
  uint64_t v13 = v12 | 7;
  uint64_t v14 = ~v13;
  uint64_t v15 = *(void *)(v6 + 64) + 7;
  uint64_t v16 = v11 + 8;
  unint64_t v17 = ((v11 + 8 + (v15 & 0xFFFFFFFFFFFFFFF8)) & ~v11) + *(void *)(v10 + 64);
  if (v12 > 7
    || ((*(_DWORD *)(v10 + 80) | v8) & 0x100000) != 0
    || ((((v17 + ((v13 + 161) & ~v13) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    uint64_t v20 = *a2;
    *(void *)a1 = *a2;
    a1 = v20 + ((v13 + 16) & v14);
    swift_retain();
  }
  else
  {
    uint64_t v21 = ~v11;
    long long v22 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v22;
    *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
    long long v23 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v23;
    long long v24 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v24;
    long long v25 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v25;
    long long v26 = *((_OWORD *)a2 + 3);
    uint64_t v27 = (a1 + 168) & v14;
    *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 48) = v26;
    uint64_t v28 = (unint64_t)(a2 + 21) & v14;
    uint64_t v39 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v27, v28, v5);
    uint64_t v29 = (void *)((v15 + v27) & 0xFFFFFFFFFFFFFFF8);
    int v30 = (void **)((v15 + v28) & 0xFFFFFFFFFFFFFFF8);
    size_t v31 = *v30;
    *uint64_t v29 = *v30;
    unint64_t v32 = ((unint64_t)v29 + v16) & v21;
    unint64_t v33 = ((unint64_t)v30 + v16) & v21;
    int v34 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16);
    id v35 = v31;
    v34(v32, v33, v39);
    size_t v36 = (_DWORD *)(((v27 | 3) + v17) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v37 = (_DWORD *)(((v28 | 3) + v17) & 0xFFFFFFFFFFFFFFFCLL);
    *size_t v36 = *v37;
    *(_DWORD *)(((unint64_t)v36 + 7) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v37 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  }
  return a1;
}

uint64_t assignWithCopy for PlatformViewLayoutEngine(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v5 = *a2;
  long long v6 = a2[1];
  long long v7 = a2[2];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)a1 = v5;
  long long v8 = *(long long *)((char *)a2 + 56);
  long long v9 = *(long long *)((char *)a2 + 72);
  long long v10 = *(long long *)((char *)a2 + 88);
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  *(_OWORD *)(a1 + 88) = v10;
  *(_OWORD *)(a1 + 72) = v9;
  *(_OWORD *)(a1 + 56) = v8;
  long long v11 = a2[7];
  long long v12 = a2[8];
  long long v13 = a2[9];
  *(unsigned char *)(a1 + 160) = *((unsigned char *)a2 + 160);
  *(_OWORD *)(a1 + 128) = v12;
  *(_OWORD *)(a1 + 144) = v13;
  *(_OWORD *)(a1 + 112) = v11;
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  int v16 = *(_DWORD *)(v15 + 80) & 0xF8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = v16 | v19 | 7;
  uint64_t v21 = (v20 + 161 + a1) & ~v20;
  uint64_t v22 = ((unint64_t)a2 + v20 + 161) & ~v20;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 24))(v21, v22, v14);
  uint64_t v23 = *(void *)(v15 + 64) + 7;
  long long v24 = (void **)((v23 + v21) & 0xFFFFFFFFFFFFFFF8);
  long long v25 = (void **)((v23 + v22) & 0xFFFFFFFFFFFFFFF8);
  long long v26 = *v25;
  uint64_t v27 = *v24;
  *long long v24 = *v25;
  id v28 = v26;

  (*(void (**)(unint64_t, unint64_t, uint64_t))(v18 + 24))(((unint64_t)v24 + v19 + 8) & ~v19, ((unint64_t)v25 + v19 + 8) & ~v19, AssociatedTypeWitness);
  unint64_t v29 = *(void *)(v18 + 64) + ((v19 + 8 + (v23 & 0xFFFFFFFFFFFFFFF8)) & ~v19) + 3;
  int v30 = (_DWORD *)((v29 + v21) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v31 = (_DWORD *)((v29 + v22) & 0xFFFFFFFFFFFFFFFCLL);
  *int v30 = *v31;
  *(_DWORD *)(((unint64_t)v30 + 7) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v31 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t assignWithTake for PlatformViewLayoutEngine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  long long v6 = *(_OWORD *)(a2 + 112);
  long long v7 = *(_OWORD *)(a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 112) = v6;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  int v11 = *(_DWORD *)(v10 + 80) & 0xF8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v11 | v14 | 7;
  uint64_t v16 = (v15 + 161 + a1) & ~v15;
  uint64_t v17 = (v15 + 161 + a2) & ~v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 40))(v16, v17, v9);
  uint64_t v18 = *(void *)(v10 + 64) + 7;
  uint64_t v19 = (void **)((v18 + v16) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void **)((v18 + v17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = *v19;
  *uint64_t v19 = *v20;

  (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 40))(((unint64_t)v19 + v14 + 8) & ~v14, ((unint64_t)v20 + v14 + 8) & ~v14, AssociatedTypeWitness);
  unint64_t v22 = *(void *)(v13 + 64) + ((v14 + 8 + (v18 & 0xFFFFFFFFFFFFFFF8)) & ~v14) + 3;
  uint64_t v23 = (_DWORD *)((v22 + v16) & 0xFFFFFFFFFFFFFFFCLL);
  long long v24 = (_DWORD *)((v22 + v17) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v23 = *v24;
  *(_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformViewLayoutEngine(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v11 = v7;
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(_DWORD *)(v6 + 80) & 0xF8 | v10 | 7;
  uint64_t v14 = *(void *)(v6 + 64) + 7;
  uint64_t v15 = v10 + 8;
  if (v12 < a2)
  {
    unint64_t v16 = ((((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
            + ((v15 + (v14 & 0xFFFFFFFFFFFFFFF8)) & ~v10)
            + ((v13 + 161) & ~v13)
            + 3) & 0xFFFFFFFFFFFFFFFCLL)
          + 7) & 0xFFFFFFFFFFFFFFFCLL)
        + 4;
    uint64_t v17 = v16 & 0xFFFFFFFC;
    if ((v16 & 0xFFFFFFFC) != 0) {
      unsigned int v18 = 2;
    }
    else {
      unsigned int v18 = a2 - v12 + 1;
    }
    if (v18 >= 0x10000) {
      unsigned int v19 = 4;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v18 < 0x100) {
      unsigned int v19 = 1;
    }
    if (v18 >= 2) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    switch(v20)
    {
      case 1:
        int v21 = *((unsigned __int8 *)a1 + v16);
        if (!v21) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v21 = *(unsigned __int16 *)((char *)a1 + v16);
        if (v21) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18818CEA4);
      case 4:
        int v21 = *(int *)((char *)a1 + v16);
        if (!v21) {
          break;
        }
LABEL_25:
        int v23 = v21 - 1;
        if (v17)
        {
          int v23 = 0;
          int v24 = *a1;
        }
        else
        {
          int v24 = 0;
        }
        return v12 + (v24 | v23) + 1;
      default:
        break;
    }
  }
  uint64_t v25 = ((unint64_t)a1 + v13 + 161) & ~v13;
  if (v7 == v12)
  {
    long long v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    return v26(v25, v7, v5);
  }
  else
  {
    uint64_t v27 = (unint64_t *)((v14 + v25) & 0xFFFFFFFFFFFFFFF8);
    if ((v11 & 0x80000000) != 0)
    {
      unint64_t v29 = *(uint64_t (**)(unint64_t))(v9 + 48);
      return v29(((unint64_t)v27 + v15) & ~v10);
    }
    else
    {
      unint64_t v28 = *v27;
      if (v28 >= 0xFFFFFFFF) {
        LODWORD(v28) = -1;
      }
      return (v28 + 1);
    }
  }
}

void storeEnumTagSinglePayload for PlatformViewLayoutEngine(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v31 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  if (v9 <= *(_DWORD *)(v11 + 84)) {
    unsigned int v13 = *(_DWORD *)(v11 + 84);
  }
  else {
    unsigned int v13 = v9;
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = *(_DWORD *)(v8 + 80) & 0xF8 | v12 | 7;
  uint64_t v16 = *(void *)(v8 + 64) + 7;
  uint64_t v17 = v12 + 8;
  size_t v18 = ((((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
          + ((v12 + 8 + (v16 & 0xFFFFFFFFFFFFFFF8)) & ~v12)
          + ((v15 + 161) & ~v15)
          + 3) & 0xFFFFFFFFFFFFFFFCLL)
        + 7) & 0xFFFFFFFFFFFFFFFCLL)
      + 4;
  if (v14 >= a3)
  {
    int v21 = 0;
    int v22 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_20:
      uint64_t v23 = ~v12;
      switch(v21)
      {
        case 1:
          *((unsigned char *)a1 + v18) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)((char *)a1 + v18) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_50;
        case 4:
          *(_DWORD *)((char *)a1 + v18) = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            uint64_t v26 = ((unint64_t)a1 + v15 + 161) & ~v15;
            if (v9 == v14)
            {
              uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
              v27(v26, a2, v9, v7);
            }
            else
            {
              unint64_t v28 = (void *)((v16 + v26) & 0xFFFFFFFFFFFFFFF8);
              if ((v13 & 0x80000000) != 0)
              {
                int v30 = *(void (**)(unint64_t, uint64_t))(v11 + 56);
                v30(((unint64_t)v28 + v17) & v23, a2);
              }
              else
              {
                if ((a2 & 0x80000000) != 0) {
                  uint64_t v29 = a2 ^ 0x80000000;
                }
                else {
                  uint64_t v29 = (a2 - 1);
                }
                *unint64_t v28 = v29;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((*(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64)
           + (((int)v12 + 8 + (v16 & 0xFFFFFFF8)) & ~v12)
           + ((v15 + 161) & ~v15)
           + 3) & 0xFFFFFFFC)
         + 7) & 0xFFFFFFFC) == 0xFFFFFFFC)
      unsigned int v19 = a3 - v14 + 1;
    else {
      unsigned int v19 = 2;
    }
    if (v19 >= 0x10000) {
      int v20 = 4;
    }
    else {
      int v20 = 2;
    }
    if (v19 < 0x100) {
      int v20 = 1;
    }
    if (v19 >= 2) {
      int v21 = v20;
    }
    else {
      int v21 = 0;
    }
    int v22 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_20;
    }
  }
  if (((((*(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64)
         + (((int)v12 + 8 + (v16 & 0xFFFFFFF8)) & ~v12)
         + ((v15 + 161) & ~v15)
         + 3) & 0xFFFFFFFC)
       + 7) & 0xFFFFFFFC) == 0xFFFFFFFC)
    int v24 = v22;
  else {
    int v24 = 1;
  }
  if (((((*(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64)
         + (((int)v12 + 8 + (v16 & 0xFFFFFFF8)) & ~v12)
         + ((v15 + 161) & ~v15)
         + 3) & 0xFFFFFFFC)
       + 7) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    int v25 = ~v14 + a2;
    bzero(a1, v18);
    *a1 = v25;
  }
  switch(v21)
  {
    case 1:
      *((unsigned char *)a1 + v18) = v24;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v18) = v24;
      break;
    case 3:
LABEL_50:
      __break(1u);
      JUMPOUT(0x18818D1CCLL);
    case 4:
      *(_DWORD *)((char *)a1 + v18) = v24;
      break;
    default:
      return;
  }
}

uint64_t key path getter for _PreferenceTransformModifier.transform : <A>_PreferenceTransformModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)()@<X8>)
{
  uint64_t v5 = a3 + a2;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 40) = v6;
  *a4 = _sxIegn_xytIegnr_SQRzlTRTA_0;
  a4[1] = (uint64_t (*)())v8;

  return swift_retain();
}

uint64_t key path setter for _PreferenceTransformModifier.transform : <A>_PreferenceTransformModifier<A>(uint64_t *a1, uint64_t (**a2)(), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 40) = v6;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = _sxytIegnr_xIegn_SQRzlTRTA_0;
  a2[1] = (uint64_t (*)())v8;
  return result;
}

uint64_t ControlWidgetTemplate.preference<A>(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v22 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = type metadata accessor for _PreferenceWritingModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a2, AssociatedTypeWitness, v15);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a4, a6, v18, v19);
  _PreferenceWritingModifier.init(key:value:)();
  ControlWidgetTemplate.modifier<A>(_:)((uint64_t)v17, v22, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t ControlWidgetTemplate.transformPreference<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a5, a7, a3, a4);
  swift_retain();
  v11[0] = _PreferenceTransformModifier.init(key:transform:)();
  v11[1] = v8;
  uint64_t v9 = type metadata accessor for _PreferenceTransformModifier();
  ControlWidgetTemplate.modifier<A>(_:)((uint64_t)v11, a4, v9);
  return swift_release();
}

uint64_t static _PreferenceWritingModifier._makeControlWidgetTemplate(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[5];
  uint64_t v5 = a1[6];
  int v7 = *((_DWORD *)a1 + 14);
  uint64_t v22 = *a1;
  int v23 = v3;
  long long v25 = *(_OWORD *)(a1 + 3);
  uint64_t v24 = v4;
  uint64_t v26 = v6;
  uint64_t v27 = v5;
  int v28 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  uint64_t v13 = v22;
  int v14 = v23;
  uint64_t v15 = v4;
  long long v16 = v25;
  uint64_t v17 = v6;
  uint64_t v18 = v5;
  int v19 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a2(&v20, v8, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v13 = v5;
  int v14 = v7;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  int v10 = v21;
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t protocol witness for static ControlWidgetTemplateModifier._makeControlWidgetTemplate(modifier:inputs:body:) in conformance _PreferenceWritingModifier<A>@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  return static _PreferenceWritingModifier._makeControlWidgetTemplate(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t static _PreferenceTransformModifier._makeControlWidgetTemplate(modifier:inputs:body:)@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  a1(&v5);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  uint64_t result = swift_bridgeObjectRelease();
  int v4 = v6;
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t implicit closure #1 in static _PreferenceTransformModifier._makeControlWidgetTemplate(modifier:inputs:body:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v16 = a1;
  type metadata accessor for _PreferenceTransformModifier();
  type metadata accessor for _GraphValue();
  int v5 = _GraphValue.value.getter();
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if (v8)
  {
    int v16 = v5;
    uint64_t v17 = KeyPath;
    MEMORY[0x1F4188790](v7);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    v13[2] = swift_getFunctionTypeMetadata();
    uint64_t v14 = type metadata accessor for Focus();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v10 = type metadata accessor for Attribute();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v16, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v13, v14, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
    swift_release();
    swift_release();
    return AssociatedTypeWitness;
  }
  else
  {
    uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    swift_release();
  }
  return OffsetAttribute2;
}

uint64_t partial apply for implicit closure #1 in static _PreferenceTransformModifier._makeControlWidgetTemplate(modifier:inputs:body:)()
{
  return implicit closure #1 in static _PreferenceTransformModifier._makeControlWidgetTemplate(modifier:inputs:body:)(*(_DWORD *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t protocol witness for static ControlWidgetTemplateModifier._makeControlWidgetTemplate(modifier:inputs:body:) in conformance _PreferenceTransformModifier<A>@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  return static _PreferenceTransformModifier._makeControlWidgetTemplate(modifier:inputs:body:)(a1, a2);
}

uint64_t sub_18818DA84(uint64_t a1)
{
  return get_witness_table_7SwiftUI21ControlWidgetTemplateRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_F15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdeK0HpyHCHCTm(a1, MEMORY[0x1E4F40F90]);
}

uint64_t sub_18818DAA4(uint64_t a1)
{
  return get_witness_table_7SwiftUI21ControlWidgetTemplateRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_F15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdeK0HpyHCHCTm(a1, MEMORY[0x1E4F41108]);
}

uint64_t get_witness_table_7SwiftUI21ControlWidgetTemplateRzAA13PreferenceKeyRd__r__lAA15ModifiedContentVyxAA01_F15WritingModifierVyqd__GGAaBHpxAaBHD1__AhA0cdeK0HpyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t sub_18818DB48()
{
  return 16;
}

__n128 sub_18818DB54(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18818DB60()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t View.zoomPresentationTransitionSource<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.presentationSource<A>(id:configuration:)(a1, (uint64_t)closure #1 in View.presentationSource<A>(id:), 0, a2, a3, a4, a5);
}

uint64_t closure #1 in View.presentationSource<A>(id:cornerRadius:style:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v4 = *(void *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 16) = v5;
  *(void *)(a3 + 32) = v4;
  *(double *)(a3 + 40) = a4;
  *(unsigned char *)(a3 + 48) = a2 & 1;
  swift_retain();

  return swift_retain();
}

uint64_t partial apply for closure #1 in View.presentationSource<A>(id:cornerRadius:style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in View.presentationSource<A>(id:cornerRadius:style:)(a1, *(unsigned char *)(v2 + 24), a2, *(double *)(v2 + 16));
}

uint64_t PresentationSourceConfiguration.backgroundColor(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 40);
  char v4 = *(unsigned char *)(v2 + 48);
  long long v5 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v2;
  *(_OWORD *)(a2 + 16) = v5;
  *(void *)(a2 + 32) = a1;
  *(void *)(a2 + 40) = v3;
  *(unsigned char *)(a2 + 48) = v4;
  swift_retain();

  return swift_retain();
}

id UIView.findPresentationSourceView<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for _sharedNamespaceID != -1) {
    swift_once();
  }
  uint64_t v6 = static _PresentationTransitionCompatibility._sharedNamespaceID;

  return UIView.findMatchedTransitionSource<A>(id:in:)(a1, v6, a2, a3);
}

id UIView.findPresentationSourceView<A>(id:zoomingViewController:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  if (one-time initialization token for _sharedNamespaceID != -1) {
    swift_once();
  }
  uint64_t v8 = static _PresentationTransitionCompatibility._sharedNamespaceID;

  return UIView.findMatchedTransitionSource<A>(id:in:zoomingViewController:)(a1, v8, a2, a3, a4);
}

ValueMetadata *type metadata accessor for PresentationSourceConfiguration.Shadow()
{
  return &type metadata for PresentationSourceConfiguration.Shadow;
}

uint64_t initializeWithCopy for PresentationSourceConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PresentationSourceConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for PresentationSourceConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationSourceConfiguration(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 49)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationSourceConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void *type metadata accessor for BridgedConfiguration()
{
  return &unk_1ED42FB90;
}

uint64_t specialized closure #1 in CommandOperation.init<A>(mutation:placement:content:)(unsigned char *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  id v41 = a1;
  int v8 = a3;
  uint64_t v9 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = type metadata accessor for CommandGroupPlacementBox(0);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v39 - v20;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v39 - v23;
  if (v8 == 3)
  {
    _s7SwiftUI21CommandGroupPlacementVWOcTm_1(a4, (uint64_t)&v39 - v23, type metadata accessor for CommandGroupPlacement);
    long long v25 = *(void **)a2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v39 = a5;
    uint64_t v40 = a4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      long long v25 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    }
    unint64_t v28 = v25[2];
    unint64_t v27 = v25[3];
    if (v28 >= v27 >> 1) {
      long long v25 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1, v25);
    }
    v25[2] = v28 + 1;
    _s7SwiftUI16CommandOperationVWObTm_0((uint64_t)v24, (uint64_t)v25+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(void *)(v16 + 72) * v28, type metadata accessor for CommandGroupPlacementBox);
    *(void *)a2 = v25;
    a5 = v39;
    a4 = v40;
  }
  _s7SwiftUI21CommandGroupPlacementVWOcTm_1(a4, (uint64_t)v14, type metadata accessor for CommandGroupPlacement);
  uint64_t v29 = *(void *)(a2 + 8);
  _s7SwiftUI21CommandGroupPlacementVWOcTm_1((uint64_t)v14, (uint64_t)v21, type metadata accessor for CommandGroupPlacement);
  if (*(void *)(v29 + 16) && (unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21), (v31 & 1) != 0))
  {
    unint64_t v32 = (uint64_t *)(*(void *)(v29 + 56) + 16 * v30);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    swift_retain();
    swift_bridgeObjectRetain();
    _s7SwiftUI21CommandGroupPlacementVWOhTm_0((uint64_t)v21, type metadata accessor for CommandGroupPlacementBox);
    _s7SwiftUI21CommandGroupPlacementVWOhTm_0((uint64_t)v14, type metadata accessor for CommandGroupPlacement);
  }
  else
  {
    _s7SwiftUI21CommandGroupPlacementVWOhTm_0((uint64_t)v21, type metadata accessor for CommandGroupPlacementBox);
    _s7SwiftUI21CommandGroupPlacementVWOhTm_0((uint64_t)v14, type metadata accessor for CommandGroupPlacement);
    uint64_t v33 = AnyView.init<A>(_:)();
    uint64_t v34 = MEMORY[0x1E4FBC870];
  }
  uint64_t v43 = v33;
  uint64_t v44 = v34;
  specialized CommandAccumulator.visit<A>(_:operation:)(a5, v41);
  _s7SwiftUI21CommandGroupPlacementVWOcTm_1(a4, (uint64_t)v11, type metadata accessor for CommandGroupPlacement);
  uint64_t v35 = v43;
  uint64_t v36 = v44;
  _s7SwiftUI21CommandGroupPlacementVWOcTm_1((uint64_t)v11, (uint64_t)v18, type metadata accessor for CommandGroupPlacement);
  swift_retain();
  swift_bridgeObjectRetain();
  char v37 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v42 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v35, v36, (uint64_t)v18, v37);
  *(void *)(a2 + 8) = v42;
  swift_bridgeObjectRelease();
  _s7SwiftUI21CommandGroupPlacementVWOhTm_0((uint64_t)v18, type metadata accessor for CommandGroupPlacementBox);
  _s7SwiftUI21CommandGroupPlacementVWOhTm_0((uint64_t)v11, type metadata accessor for CommandGroupPlacement);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t specialized CommandAccumulator.visit<A>(_:operation:)(uint64_t a1, unsigned char *a2)
{
  uint64_t v44 = a1;
  uint64_t v3 = type metadata accessor for CommandGroupPlacementBox(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v42 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v41 = (uint64_t)v39 - v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41850];
  type metadata accessor for _ContiguousArrayStorage<CommandsList.Item>(0, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView), MEMORY[0x1E4F41850]);
  v39[2] = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v39 - v9;
  type metadata accessor for _ContiguousArrayStorage<CommandsList.Item>(0, &lazy cache variable for type metadata for TupleView<(AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>), v7);
  v39[1] = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (void *)((char *)v39 - v12);
  uint64_t v40 = type metadata accessor for CommandOperation();
  uint64_t v14 = *(void *)(v40 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1F4188790](v40);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
  uint64_t v17 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v39 - v21;
  _s7SwiftUI21CommandGroupPlacementVWOcTm_1((uint64_t)a2, (uint64_t)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for CommandOperation);
  unint64_t v23 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v24 = swift_allocObject();
  _s7SwiftUI16CommandOperationVWObTm_0((uint64_t)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v23, (uint64_t (*)(void))type metadata accessor for CommandOperation);
  _s7SwiftUI21CommandGroupPlacementVWOcTm_1(v44, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>);
  long long v25 = (uint64_t (**)(uint64_t))&v22[*(int *)(v17 + 36)];
  *long long v25 = partial apply for closure #1 in CommandAccumulator.visit<A>(_:operation:);
  v25[1] = (uint64_t (*)(uint64_t))v24;
  switch(*a2)
  {
    case 1:
      unint64_t v27 = v43;
      uint64_t v35 = *v43;
      type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView)();
      uint64_t v37 = *(int *)(v36 + 48);
      _s7SwiftUI21CommandGroupPlacementVWOcTm_1((uint64_t)v22, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
      *(void *)&v10[v37] = v35;
      lazy protocol witness table accessor for type TupleView<(AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView));
      goto LABEL_7;
    case 2:
    case 3:
      _s7SwiftUI21CommandGroupPlacementVWOcTm_1((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
      lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
      uint64_t v26 = AnyView.init<A>(_:)();
      unint64_t v27 = v43;
      swift_release();
      goto LABEL_8;
    case 4:
      unint64_t v27 = v43;
      uint64_t v28 = v43[1];
      uint64_t v30 = v40;
      uint64_t v29 = v41;
      _s7SwiftUI21CommandGroupPlacementVWOcTm_1((uint64_t)&a2[*(int *)(v40 + 20)], v41, type metadata accessor for CommandGroupPlacement);
      LOBYTE(v28) = specialized Set.contains(_:)(v29, v28);
      _s7SwiftUI21CommandGroupPlacementVWOhTm_0(v29, type metadata accessor for CommandGroupPlacementBox);
      uint64_t v31 = (uint64_t)v42;
      if (v28) {
        goto LABEL_10;
      }
      _s7SwiftUI21CommandGroupPlacementVWOcTm_1((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
      lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
      uint64_t v26 = AnyView.init<A>(_:)();
      swift_release();
      break;
    default:
      unint64_t v27 = v43;
      uint64_t v32 = *v43;
      type metadata accessor for (AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)();
      uint64_t v34 = (uint64_t)v13 + *(int *)(v33 + 48);
      *uint64_t v13 = v32;
      _s7SwiftUI21CommandGroupPlacementVWOcTm_1((uint64_t)v22, v34, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
      lazy protocol witness table accessor for type TupleView<(AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>));
LABEL_7:
      uint64_t v26 = AnyView.init<A>(_:)();
LABEL_8:
      uint64_t v29 = v41;
      uint64_t v31 = (uint64_t)v42;
      uint64_t v30 = v40;
      break;
  }
  *unint64_t v27 = v26;
LABEL_10:
  _s7SwiftUI21CommandGroupPlacementVWOcTm_1((uint64_t)&a2[*(int *)(v30 + 20)], v31, type metadata accessor for CommandGroupPlacement);
  specialized Set._Variant.insert(_:)(v29, v31);
  _s7SwiftUI21CommandGroupPlacementVWOhTm_0(v29, type metadata accessor for CommandGroupPlacementBox);
  return _s7SwiftUI21CommandGroupPlacementVWOhTm_0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
}

uint64_t specialized CommandGroup.init(after:addition:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v79 = a1;
  uint64_t v82 = a5;
  unsigned int v72 = a4 >> 8;
  unsigned int v9 = (a4 >> 8) & 1;
  type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>();
  *(void *)&long long v74 = v10 - 8;
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v70 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v71 = (uint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI6ButtonVyAA4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v15 = v14 - 8;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (_WORD *)((char *)&v62 - v16);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>();
  uint64_t v68 = v18 - 8;
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v64 = (uint64_t)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v69 = v20 - 8;
  uint64_t v81 = v21;
  uint64_t v80 = *(void *)(v21 + 64);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v73 = (uint64_t)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for CommandGroupPlacement(0);
  uint64_t v77 = *(void *)(v23 - 8);
  uint64_t v76 = *(void *)(v77 + 64);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v75 = (uint64_t)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  unint64_t v27 = (char *)&v62 - v26;
  uint64_t v65 = (uint64_t)&v62 - v26;
  uint64_t v28 = type metadata accessor for CommandOperation();
  uint64_t v29 = v28 - 8;
  MEMORY[0x1F4188790](v28);
  int v67 = (char *)&v62 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  uint64_t v78 = (uint64_t)&v62 - v32;
  uint64_t v66 = type metadata accessor for CommandGroupPlacement;
  _s7SwiftUI21CommandGroupPlacementVWOcTm_1(a1, (uint64_t)v27, type metadata accessor for CommandGroupPlacement);
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = a2;
  *(void *)(v33 + 16) = a2;
  *(void *)(v33 + 24) = a3;
  *(unsigned char *)(v33 + 32) = v5;
  *(unsigned char *)(v33 + 33) = v9;
  *uint64_t v17 = 256;
  uint64_t v35 = (uint64_t (**)())((char *)v17 + *(int *)(v15 + 44));
  *uint64_t v35 = partial apply for closure #1 in closure #1 in InspectorCommands.body.getter;
  v35[1] = (uint64_t (*)())v33;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v36 = (uint64_t)v17 + *(int *)(v15 + 48);
  uint64_t v37 = a2;
  LODWORD(a2) = v5;
  uint64_t v38 = v5;
  LOBYTE(v5) = v9;
  outlined copy of Environment<Binding<Visibility>?>.Content(v37, a3, v38, v9);
  swift_retain();
  unsigned int v63 = a2;
  uint64_t v62 = v34;
  uint64_t v39 = a3;
  closure #2 in closure #1 in InspectorCommands.body.getter(v34, a3, a2 | ((v72 & 1) << 8), v36);
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v41 = v70;
  outlined init with copy of Button<Text>((uint64_t)v17, v70);
  uint64_t v42 = v41 + *(int *)(v74 + 44);
  *(void *)uint64_t v42 = KeyPath;
  long long v74 = xmmword_1883D2950;
  *(_OWORD *)(v42 + 8) = xmmword_1883D2950;
  *(void *)(v42 + 24) = 20;
  *(unsigned char *)(v42 + 32) = 0;
  uint64_t v43 = v71;
  _s7SwiftUI21CommandGroupPlacementVWOcTm_1(v41, v71, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>);
  _s7SwiftUI21CommandGroupPlacementVWOhTm_0(v41, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>);
  uint64_t v44 = v43;
  uint64_t v45 = v43;
  uint64_t v46 = v64;
  _s7SwiftUI21CommandGroupPlacementVWOcTm_1(v44, v64, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>);
  uint64_t v47 = v46 + *(int *)(v68 + 44);
  *(_OWORD *)uint64_t v47 = v74;
  *(void *)(v47 + 16) = 20;
  *(unsigned char *)(v47 + 24) = 0;
  _s7SwiftUI21CommandGroupPlacementVWOhTm_0(v45, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>);
  outlined destroy of Button<Text>((uint64_t)v17);
  uint64_t v83 = v34;
  uint64_t v84 = v39;
  char v85 = a2;
  LOBYTE(a2) = v5;
  char v86 = v5;
  LOBYTE(v45) = InspectorCommands.inspectorPresented.getter() == 2;
  uint64_t v48 = swift_getKeyPath();
  uint64_t v49 = swift_allocObject();
  *(unsigned char *)(v49 + 16) = v45;
  uint64_t v50 = v73;
  _s7SwiftUI21CommandGroupPlacementVWOcTm_1(v46, v73, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
  uint64_t v51 = (uint64_t *)(v50 + *(int *)(v69 + 44));
  *uint64_t v51 = v48;
  v51[1] = (uint64_t)partial apply for closure #1 in View.disabled(_:);
  v51[2] = v49;
  _s7SwiftUI21CommandGroupPlacementVWOhTm_0(v46, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
  uint64_t v52 = v66;
  uint64_t v53 = v67;
  uint64_t v54 = (uint64_t *)&v67[*(int *)(v29 + 32)];
  *uint64_t v54 = 0;
  v54[1] = 0;
  *uint64_t v53 = 0;
  uint64_t v55 = v65;
  _s7SwiftUI21CommandGroupPlacementVWOcTm_1(v65, (uint64_t)&v53[*(int *)(v29 + 28)], v52);
  uint64_t v56 = v75;
  _s7SwiftUI16CommandOperationVWObTm_0(v55, v75, type metadata accessor for CommandGroupPlacement);
  unint64_t v57 = (*(unsigned __int8 *)(v77 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
  unint64_t v58 = (v76 + *(unsigned __int8 *)(v81 + 80) + v57) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
  uint64_t v59 = swift_allocObject();
  *(unsigned char *)(v59 + 16) = 0;
  _s7SwiftUI16CommandOperationVWObTm_0(v56, v59 + v57, type metadata accessor for CommandGroupPlacement);
  _s7SwiftUI16CommandOperationVWObTm_0(v50, v59 + v58, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*v54);
  *uint64_t v54 = (uint64_t)partial apply for specialized closure #1 in CommandOperation.init<A>(mutation:placement:content:);
  v54[1] = v59;
  uint64_t v60 = v78;
  _s7SwiftUI16CommandOperationVWObTm_0((uint64_t)v53, v78, (uint64_t (*)(void))type metadata accessor for CommandOperation);
  _s7SwiftUI21CommandGroupPlacementVWOhTm_0(v79, type metadata accessor for CommandGroupPlacement);
  _s7SwiftUI16CommandOperationVWObTm_0(v60, v82, (uint64_t (*)(void))type metadata accessor for CommandOperation);
  return outlined consume of Environment<Binding<Visibility>?>.Content(v62, v39, v63, a2);
}

uint64_t CommandGroup.init(after:addition:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return CommandGroup.init(after:addition:)(a1, a2, a3, a4, 0, a5);
}

uint64_t CommandGroup.MakeList.commandGroup.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for CommandGroup();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t CommandGroup.MakeList.value.getter()
{
  uint64_t v0 = type metadata accessor for CommandGroup();
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)v11 - v1;
  uint64_t v3 = type metadata accessor for CommandsList.Item(0);
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  CommandGroup.MakeList.commandGroup.getter((uint64_t)v2);
  _s7SwiftUI16CommandOperationVWObTm_0((uint64_t)v2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CommandOperation);
  type metadata accessor for CommandsList.Item.Value(0);
  swift_storeEnumTagMultiPayload();
  DisplayList.Version.init(forUpdate:)();
  *(void *)&v7[*(int *)(v4 + 28)] = v11[1];
  type metadata accessor for _ContiguousArrayStorage<CommandsList.Item>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CommandsList.Item>, type metadata accessor for CommandsList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18834BB80;
  _s7SwiftUI16CommandOperationVWObTm_0((uint64_t)v7, v9 + v8, type metadata accessor for CommandsList.Item);
  return v9;
}

uint64_t protocol witness for Rule.value.getter in conformance CommandGroup<A>.MakeList@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CommandGroup.MakeList.value.getter();
  *a1 = result;
  return result;
}

uint64_t CommandGroup._resolve(into:)(uint64_t a1)
{
  uint64_t result = type metadata accessor for CommandOperation();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + *(int *)(result + 24));
  if (v4) {
    return v4(v1, a1);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommandGroupPlacementBox()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommandGroupPlacementBox()
{
  return UUID.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommandGroupPlacementBox()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommandGroupPlacementBox()
{
  type metadata accessor for CommandGroupPlacement(0);

  return static UUID.== infix(_:_:)();
}

uint64_t one-time initialization function for appInfo()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.appInfo);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.appInfo);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D2960;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.appInfo.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for appInfo, (uint64_t)static CommandGroupPlacement.appInfo, a1);
}

uint64_t one-time initialization function for appSettings()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.appSettings);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.appSettings);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D2970;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.appSettings.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for appSettings, (uint64_t)static CommandGroupPlacement.appSettings, a1);
}

uint64_t one-time initialization function for systemServices()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.systemServices);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.systemServices);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D2980;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.systemServices.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for systemServices, (uint64_t)static CommandGroupPlacement.systemServices, a1);
}

uint64_t one-time initialization function for appVisibility()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.appVisibility);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.appVisibility);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D2990;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.appVisibility.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for appVisibility, (uint64_t)static CommandGroupPlacement.appVisibility, a1);
}

uint64_t one-time initialization function for appTermination()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.appTermination);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.appTermination);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D29A0;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.appTermination.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for appTermination, (uint64_t)static CommandGroupPlacement.appTermination, a1);
}

uint64_t one-time initialization function for saveItem()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.saveItem);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.saveItem);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D29C0;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.saveItem.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for saveItem, (uint64_t)static CommandGroupPlacement.saveItem, a1);
}

uint64_t one-time initialization function for importExport()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.importExport);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.importExport);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(void *)uint64_t v1 = 0xD000000000000012;
  *(void *)(v1 + 8) = 0x8000000188341610;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.importExport.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for importExport, (uint64_t)static CommandGroupPlacement.importExport, a1);
}

uint64_t one-time initialization function for printItem()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.printItem);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.printItem);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D29D0;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.printItem.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for printItem, (uint64_t)static CommandGroupPlacement.printItem, a1);
}

uint64_t one-time initialization function for undoRedo()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.undoRedo);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.undoRedo);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D29E0;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.undoRedo.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for undoRedo, (uint64_t)static CommandGroupPlacement.undoRedo, a1);
}

uint64_t one-time initialization function for pasteboard()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.pasteboard);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.pasteboard);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D29F0;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.pasteboard.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for pasteboard, (uint64_t)static CommandGroupPlacement.pasteboard, a1);
}

uint64_t one-time initialization function for textEditing()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.textEditing);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.textEditing);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D2A00;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.textEditing.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for textEditing, (uint64_t)static CommandGroupPlacement.textEditing, a1);
}

uint64_t one-time initialization function for textFormatting()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.textFormatting);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.textFormatting);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D2A10;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.textFormatting.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for textFormatting, (uint64_t)static CommandGroupPlacement.textFormatting, a1);
}

uint64_t one-time initialization function for windowSize()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.windowSize);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.windowSize);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D2A40;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.windowSize.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for windowSize, (uint64_t)static CommandGroupPlacement.windowSize, a1);
}

void static CommandGroupPlacement.windowList.getter()
{
}

uint64_t one-time initialization function for windowArrangement()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.windowArrangement);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.windowArrangement);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(void *)uint64_t v1 = 0xD000000000000012;
  *(void *)(v1 + 8) = 0x80000001883415F0;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.windowArrangement.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for windowArrangement, (uint64_t)static CommandGroupPlacement.windowArrangement, a1);
}

uint64_t one-time initialization function for help()
{
  uint64_t v0 = type metadata accessor for CommandGroupPlacement(0);
  __swift_allocate_value_buffer(v0, static CommandGroupPlacement.help);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)static CommandGroupPlacement.help);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  Text.assertUnstyled(_:options:)();
  *(_OWORD *)uint64_t v1 = xmmword_1883D2A50;
  *(unsigned char *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = v2;
  return UUID.init()();
}

uint64_t static CommandGroupPlacement.help.getter@<X0>(uint64_t a1@<X8>)
{
  return static CommandGroupPlacement.appInfo.getter(&one-time initialization token for help, (uint64_t)static CommandGroupPlacement.help, a1);
}

uint64_t associated type witness table accessor for Commands.Body : Commands in CommandGroup<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeBufferWithCopyOfBuffer for CommandGroup(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for CommandOperation();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (void *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(v4 + 20);
    unint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(void *)((char *)a2 + v7);
    uint64_t v11 = *(void *)((char *)a2 + v7 + 8);
    char v12 = *((unsigned char *)a2 + v7 + 16);
    outlined copy of Text.Storage(v10, v11, v12);
    *(void *)unint64_t v8 = v10;
    *((void *)v8 + 1) = v11;
    v8[16] = v12;
    *((void *)v8 + 3) = *((void *)v9 + 3);
    uint64_t v13 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v14 = &v8[v13];
    uint64_t v15 = &v9[v13];
    uint64_t v16 = type metadata accessor for UUID();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
    uint64_t v18 = *(int *)(v6 + 24);
    uint64_t v19 = (void *)((char *)a1 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    if (*v20)
    {
      uint64_t v21 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v21;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    }
  }
  return a1;
}

unsigned char *assignWithCopy for CommandGroup(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for CommandOperation();
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = *(void *)&a2[v5];
  uint64_t v9 = *(void *)&a2[v5 + 8];
  char v10 = a2[v5 + 16];
  outlined copy of Text.Storage(v8, v9, v10);
  uint64_t v11 = *(void *)v6;
  uint64_t v12 = *((void *)v6 + 1);
  char v13 = v6[16];
  *(void *)uint64_t v6 = v8;
  *((void *)v6 + 1) = v9;
  unsigned char v6[16] = v10;
  outlined consume of Text.Storage(v11, v12, v13);
  *((void *)v6 + 3) = *((void *)v7 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v15 = &v6[v14];
  uint64_t v16 = &v7[v14];
  uint64_t v17 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v17 - 8) + 24))(v15, v16, v17);
  uint64_t v18 = *(int *)(v4 + 24);
  uint64_t v19 = &a1[v18];
  uint64_t v20 = (uint64_t *)&a2[v18];
  uint64_t v21 = *(void *)&a1[v18];
  uint64_t v22 = *v20;
  if (!v21)
  {
    if (v22)
    {
      uint64_t v24 = v20[1];
      *uint64_t v19 = v22;
      v19[1] = v24;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    return a1;
  }
  if (!v22)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v23 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v23;
  swift_retain();
  swift_release();
  return a1;
}

unsigned char *initializeWithTake for CommandGroup(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for CommandOperation();
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  long long v8 = *(_OWORD *)&a2[v5 + 16];
  *uint64_t v6 = *(_OWORD *)&a2[v5];
  v6[1] = v8;
  uint64_t v9 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  char v10 = (char *)v6 + v9;
  uint64_t v11 = &v7[v9];
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  uint64_t v13 = *(int *)(v4 + 24);
  uint64_t v14 = &a1[v13];
  uint64_t v15 = (uint64_t *)&a2[v13];
  uint64_t v16 = *v15;
  if (*v15)
  {
    uint64_t v17 = v15[1];
    *uint64_t v14 = v16;
    v14[1] = v17;
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  }
  return a1;
}

unsigned char *assignWithTake for CommandGroup(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  uint64_t v4 = type metadata accessor for CommandOperation();
  uint64_t v5 = *(int *)(v4 + 20);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  LOBYTE(v5) = a2[v5 + 16];
  uint64_t v8 = *(void *)v6;
  uint64_t v9 = *((void *)v6 + 1);
  char v10 = v6[16];
  *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
  unsigned char v6[16] = v5;
  outlined consume of Text.Storage(v8, v9, v10);
  *((void *)v6 + 3) = *((void *)v7 + 3);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v12 = &v6[v11];
  uint64_t v13 = &v7[v11];
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  uint64_t v15 = *(int *)(v4 + 24);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = (uint64_t *)&a2[v15];
  uint64_t v18 = *(void *)&a1[v15];
  uint64_t v19 = *v17;
  if (!v18)
  {
    if (v19)
    {
      uint64_t v21 = v17[1];
      *uint64_t v16 = v19;
      v16[1] = v21;
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    return a1;
  }
  if (!v19)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v20 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v20;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1881907A0);
}

uint64_t sub_1881907A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_6(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for CommandOperation);
}

uint64_t storeEnumTagSinglePayload for CommandGroup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1881907CC);
}

uint64_t sub_1881907CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_6(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for CommandOperation);
}

unint64_t initializeBufferWithCopyOfBuffer for CommandGroupPlacement(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t assignWithCopy for CommandGroupPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  char v11 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

_OWORD *initializeWithTake for CommandGroupPlacement(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CommandGroupPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_188190AE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    char v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_188190B94(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

_UNKNOWN **sub_188190C3C()
{
  return &protocol witness table for EmptyCommands;
}

unint64_t initializeBufferWithCopyOfBuffer for CommandGroupPlacementBox(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommandGroupPlacement(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    char v9 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    uint64_t v10 = *(int *)(v6 + 20);
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return a1;
}

uint64_t destroy for CommandGroupPlacementBox(uint64_t a1)
{
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t initializeWithCopy for CommandGroupPlacementBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v7 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for CommandGroupPlacementBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for CommandGroupPlacementBox(_OWORD *a1, _OWORD *a2)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  char v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CommandGroupPlacementBox(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for CommandGroupPlacementBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1881910C8);
}

uint64_t sub_1881910C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_6(a1, a2, a3, type metadata accessor for CommandGroupPlacement);
}

uint64_t __swift_get_extra_inhabitant_indexTm_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  char v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for CommandGroupPlacementBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188191164);
}

uint64_t sub_188191164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_6(a1, a2, a3, a4, type metadata accessor for CommandGroupPlacement);
}

uint64_t __swift_store_extra_inhabitant_indexTm_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t type metadata completion function for CommandGroupPlacementBox()
{
  uint64_t result = type metadata accessor for CommandGroupPlacement(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in CommandGroupPlacementBox()
{
  return lazy protocol witness table accessor for type CommandGroupPlacementBox and conformance CommandGroupPlacementBox(&lazy protocol witness table cache variable for type CommandGroupPlacementBox and conformance CommandGroupPlacementBox, (void (*)(uint64_t))type metadata accessor for CommandGroupPlacementBox);
}

uint64_t sub_1881912C4()
{
  outlined consume of Environment<Binding<Visibility>?>.Content(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(unsigned char *)(v0 + 33));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in InspectorCommands.body.getter()
{
  return closure #1 in closure #1 in InspectorCommands.body.getter(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32) | (*(unsigned __int8 *)(v0 + 33) << 8));
}

uint64_t sub_188191330()
{
  return swift_deallocObject();
}

unsigned char *partial apply for closure #1 in View.disabled(_:)(unsigned char *a1)
{
  return closure #1 in View.disabled(_:)(a1, *(unsigned char *)(v1 + 16));
}

uint64_t sub_188191348()
{
  uint64_t v1 = (int *)(type metadata accessor for CommandGroupPlacement(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>();
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(*(void *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = v0 + v2;
  outlined consume of Text.Storage(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  _s7SwiftUI6ButtonVyAA4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v10 = v9;
  unint64_t v11 = v0 + v5 + *(int *)(v9 + 36);
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v11, *(void *)(v11 + 8), *(unsigned char *)(v11 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v11, *(void *)(v11 + 8), *(void *)(v11 + 16), *(void *)(v11 + 24), *(_WORD *)(v11 + 32), *(unsigned char *)(v11 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v11 + 40), *(void *)(v11 + 48), *(void *)(v11 + 56), *(void *)(v11 + 64), *(_WORD *)(v11 + 72), *(unsigned char *)(v11 + 74));
  unint64_t v13 = v11 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v14 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
LABEL_8:
  outlined consume of Text.Storage(*(void *)(v0 + v5 + *(int *)(v10 + 40)), *(void *)(v0 + v5 + *(int *)(v10 + 40) + 8), *(unsigned char *)(v0 + v5 + *(int *)(v10 + 40) + 16));
  swift_bridgeObjectRelease();
  type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>();
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in CommandOperation.init<A>(mutation:placement:content:)(unsigned char *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CommandGroupPlacement(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>();
  uint64_t v9 = v2
     + ((v6 + v7 + *(unsigned __int8 *)(*(void *)(v8 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80));
  unsigned __int8 v10 = *(unsigned char *)(v2 + 16);

  return specialized closure #1 in CommandOperation.init<A>(mutation:placement:content:)(a1, a2, v10, v2 + v6, v9);
}

void type metadata accessor for _ContiguousArrayStorage<CommandsList.Item>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>, AnyView));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>();
    _s7SwiftUI6ButtonVyAA4TextVGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<AllPlatformItemListFlags>, (uint64_t)&type metadata for AllPlatformItemListFlags, (uint64_t)&protocol witness table for AllPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
    }
  }
}

void type metadata accessor for (AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)()
{
  if (!lazy cache variable for type metadata for (AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>));
    }
  }
}

uint64_t sub_1881918DC()
{
  uint64_t v1 = type metadata accessor for CommandOperation();
  uint64_t v2 = v1 - 8;
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  unint64_t v4 = v0 + v3 + *(int *)(v1 + 20);
  outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  swift_bridgeObjectRelease();
  unint64_t v5 = v4 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  if (*(void *)(v0 + v3 + *(int *)(v2 + 32))) {
    swift_release();
  }

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
    _s7SwiftUI15ModifiedContentVyACyACyACyAA6ButtonVyAA4TextVGAA30_EnvironmentKeyWritingModifierVyAA16KeyboardShortcutVSgGGAA013ViewInputFlagJ0VyAA03HaskL0VGGAA06_TraitiJ0VyAA0kl12PickerOptionqH0VGGAA01_gh9TransformJ0VySbGGACyxq_GAA0M0A2AA5_RzAA0mJ0R_rlWlTm_0(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t _s7SwiftUI15ModifiedContentVyACyACyACyAA6ButtonVyAA4TextVGAA30_EnvironmentKeyWritingModifierVyAA16KeyboardShortcutVSgGGAA013ViewInputFlagJ0VyAA03HaskL0VGGAA06_TraitiJ0VyAA0kl12PickerOptionqH0VGGAA01_gh9TransformJ0VySbGGACyxq_GAA0M0A2AA5_RzAA0mJ0R_rlWlTm_0(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CommandGroupPlacementBox and conformance CommandGroupPlacementBox(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TupleView<(AnyView, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)> and conformance TupleView<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ContiguousArrayStorage<CommandsList.Item>(255, a2, a3, MEMORY[0x1E4F41850]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void static CommandGroupPlacement.singleWindowList.getter()
{
}

void static CommandGroupPlacement.appShortcuts.getter()
{
}

uint64_t UIKitTextInput.update(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_retain();
  swift_retain();
  uint64_t v5 = specialized NSTextAlignment.init(in:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 128))(v5, a2, a3);
  EnvironmentValues.minimumScaleFactor.getter();
  double v7 = v6;
  static MinimumScaleFactorKey.defaultValue.getter();
  double v9 = v8;
  if (v7 < v8)
  {
    EnvironmentValues.effectiveFont.getter();
    unsigned __int8 v10 = (void *)Font.platformFont(in:)();
    swift_release();
    CTFontRef.pointSize.getter();
    double v12 = v11;

    (*(void (**)(uint64_t, uint64_t, double))(a3 + 152))(a2, a3, v7 * v12);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 168))(a2, a3);
  if (v7 < v9 != (result & 1))
  {
    uint64_t v14 = *(uint64_t (**)(BOOL, uint64_t, uint64_t))(a3 + 176);
    return v14(v7 < v9, a2, a3);
  }
  return result;
}

uint64_t UIKitTextInputTraits.updateTraits(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>, (uint64_t)&type metadata for KeyboardTypeKey, (uint64_t)&protocol witness table for KeyboardTypeKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 64))(v11, a2, a3);
  type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>, (uint64_t)&type metadata for AutocorrectionTypeKey, (uint64_t)&protocol witness table for AutocorrectionTypeKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v6 = 1;
  if ((v11 & 1) == 0) {
    uint64_t v6 = 2;
  }
  if (v11 == 2) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 40))(v7, a2, a3);
  type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>, (uint64_t)&type metadata for TextContentTypeKey, (uint64_t)&protocol witness table for TextContentTypeKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v12)
  {
    uint64_t v8 = MEMORY[0x18C115780]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 88))(v8, a2, a3);
  type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>, (uint64_t)&type metadata for TextInputAutocapitalizationKey, (uint64_t)&protocol witness table for TextInputAutocapitalizationKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  (*(void (**)(void, uint64_t, uint64_t))(a3 + 16))(v11, a2, a3);
  type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>, (uint64_t)&type metadata for EnvironmentValues.SubmitLabelKey, (uint64_t)&protocol witness table for EnvironmentValues.SubmitLabelKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v9 = qword_1883D2D48[(char)v11];
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 104))(a2, a3) != v9) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 112))(v9, a2, a3);
  }
  type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, (uint64_t)&type metadata for EnvironmentValues.__Key_writingToolsBehavior, (uint64_t)&protocol witness table for EnvironmentValues.__Key_writingToolsBehavior, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(a3 + 136))(qword_1883D2D90[(char)v11], a2, a3);
}

void UITextInputTraits_Private.updatePrivateTraits(in:)(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>, (uint64_t)&type metadata for TextInputDictation.Key, (uint64_t)&protocol witness table for TextInputDictation.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>, (uint64_t)&type metadata for TextInputDictation.Key, (uint64_t)&protocol witness table for TextInputDictation.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  unsigned int v2 = v3 | (v4 << 16);
  if (v3 != 2)
  {
    if (objc_msgSend(v1, sel_respondsToSelector_, sel_forceEnableDictation))
    {
      if ((v3 & 1) == objc_msgSend(v1, sel_forceEnableDictation))
      {
LABEL_10:
        if ((objc_msgSend(v1, sel_respondsToSelector_, sel_forceDisableDictation) & 1) == 0)
        {
          if (v3)
          {
LABEL_16:
            if (objc_msgSend(v1, sel_respondsToSelector_, sel_forceSpellingDictation))
            {
              if (objc_msgSend(v1, sel_forceSpellingDictation) == (unsigned __int16)(v3 & 0x100) >> 8)
              {
LABEL_21:
                if (objc_msgSend(v1, sel_respondsToSelector_, sel_preferOnlineDictation))
                {
                  if (objc_msgSend(v1, sel_preferOnlineDictation) == (v2 & 0x10000) >> 16) {
                    return;
                  }
                }
                else if ((v2 & 0x10000) == 0)
                {
                  return;
                }
                _UITextInputTraitSetPreferOnlineDictation(v1, HIWORD(v2) & 1);
                return;
              }
            }
            else if ((v3 & 0x100) == 0)
            {
              goto LABEL_21;
            }
            _UITextInputTraitSetForceSpellingDictation(v1, (v2 >> 8) & 1);
            goto LABEL_21;
          }
LABEL_15:
          _UITextInputTraitSetForceDisableDictation(v1, (v3 & 1) == 0);
          goto LABEL_16;
        }
LABEL_14:
        if ((v2 ^ objc_msgSend(v1, sel_forceDisableDictation))) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    else if ((v3 & 1) == 0)
    {
      if ((objc_msgSend(v1, sel_respondsToSelector_, sel_forceDisableDictation) & 1) == 0) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
    _UITextInputTraitSetForceEnableDictation(v1, v3 & 1);
    goto LABEL_10;
  }
}

uint64_t UITextField.uiSelectedRange.getter()
{
  uint64_t result = (uint64_t)objc_msgSend(v0, sel_text);
  unsigned int v2 = (void *)result;
  if (result)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;

    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v6)
    {
      objc_msgSend(v0, sel_selectionRange);
      uint64_t v7 = Range<>.init(_:in:)();
      char v9 = v8;
      swift_bridgeObjectRelease();
      if (v9) {
        return 15;
      }
      else {
        return v7;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return 15;
    }
  }
  return result;
}

void UIKitTextView.enqueueScrollIfNeeded()()
{
  id v1 = objc_msgSend(v0, sel_superview);
  if (v1)
  {
    unsigned int v2 = v1;
    while (1)
    {
      self;
      if (swift_dynamicCastObjCClass()) {
        break;
      }
      id v3 = objc_msgSend(v2, sel_superview);

      unsigned int v2 = v3;
      if (!v3) {
        return;
      }
    }
    id v4 = objc_msgSend(self, sel_defaultCenter);
    uint64_t v5 = *MEMORY[0x1E4FB2BC8];
    uint64_t v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v7 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v6;
    *(void *)(v8 + 24) = v7;
    uint64_t v21 = partial apply for closure #1 in UIKitTextView.enqueueScrollIfNeeded();
    uint64_t v22 = v8;
    uint64_t v17 = MEMORY[0x1E4F143A8];
    uint64_t v18 = 1107296256;
    uint64_t v19 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
    uint64_t v20 = &block_descriptor_79;
    char v9 = _Block_copy(&v17);
    swift_release();
    id v10 = objc_msgSend(v4, sel_addObserverForName_object_queue_usingBlock_, v5, 0, 0, v9);
    _Block_release(v9);
    *(void *)&v0[OBJC_IVAR____TtC7SwiftUI13UIKitTextView_didShowObserver] = v10;
    swift_unknownObjectRelease();
    uint64_t v11 = *MEMORY[0x1E4FB2C50];
    uint64_t v12 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(void *)(v13 + 24) = v4;
    uint64_t v21 = partial apply for closure #2 in UIKitTextView.enqueueScrollIfNeeded();
    uint64_t v22 = v13;
    uint64_t v17 = MEMORY[0x1E4F143A8];
    uint64_t v18 = 1107296256;
    uint64_t v19 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
    uint64_t v20 = &block_descriptor_62;
    uint64_t v14 = _Block_copy(&v17);
    id v15 = v4;
    swift_release();
    id v16 = objc_msgSend(v15, sel_addObserverForName_object_queue_usingBlock_, v11, 0, 0, v14);

    _Block_release(v14);
    *(void *)&v0[OBJC_IVAR____TtC7SwiftUI13UIKitTextView_willHideObserver] = v16;
    swift_unknownObjectRelease();
  }
}

uint64_t UITextView.range.getter()
{
  uint64_t result = (uint64_t)objc_msgSend(v0, sel_text);
  if (result)
  {
    unsigned int v2 = (void *)result;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;

    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
    }
    if (v6)
    {
      objc_msgSend(v0, sel_selectedRange);
      uint64_t v7 = Range<>.init(_:in:)();
      char v9 = v8;
      swift_bridgeObjectRelease();
      if (v9) {
        return 15;
      }
      else {
        return v7;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return 15;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id protocol witness for UIKitTextInputTraits.uiAutocapitalizationType.setter in conformance UITextView(uint64_t a1)
{
  return objc_msgSend(v1, sel_setAutocapitalizationType_, a1);
}

id protocol witness for UIKitTextInputTraits.uiAutoCorrectionType.setter in conformance UITextView(uint64_t a1)
{
  return objc_msgSend(v1, sel_setAutocorrectionType_, a1);
}

id protocol witness for UIKitTextInputTraits.uiKeyboardType.setter in conformance UITextView(uint64_t a1)
{
  return objc_msgSend(v1, sel_setKeyboardType_, a1);
}

void protocol witness for UIKitTextInputTraits.uiTextContentType.setter in conformance UITextView(void *a1)
{
  objc_msgSend(v1, sel_setTextContentType_, a1);
}

id protocol witness for UIKitTextInputTraits.uiReturnKeyType.getter in conformance UITextView()
{
  return objc_msgSend(v0, sel_returnKeyType);
}

id protocol witness for UIKitTextInputTraits.uiReturnKeyType.setter in conformance UITextView(uint64_t a1)
{
  return objc_msgSend(v1, sel_setReturnKeyType_, a1);
}

id protocol witness for UIKitTextInputTraits.uiWritingToolsBehavior.setter in conformance UITextView(uint64_t a1)
{
  return objc_msgSend(v1, sel_setWritingToolsBehavior_, a1);
}

void protocol witness for UIKitTextInput.uiAttributedText.setter in conformance UITextField(void *a1)
{
  objc_msgSend(v1, sel_setAttributedText_, a1);
}

void protocol witness for UIKitTextInput.uiAttributedPlaceholder.setter in conformance UITextField(void *a1)
{
  objc_msgSend(v1, sel_setAttributedPlaceholder_, a1);
}

uint64_t protocol witness for UIKitTextInput.uiDefaultTextAttributes.getter in conformance UITextField()
{
  id v1 = objc_msgSend(v0, sel_defaultTextAttributes);
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  uint64_t v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void protocol witness for UIKitTextInput.uiDefaultTextAttributes.setter in conformance UITextField()
{
  type metadata accessor for NSAttributedStringKey(0);
  lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v0, sel_setDefaultTextAttributes_, isa);
}

id protocol witness for UIKitTextInput.uiMinimumFontSize.setter in conformance UITextField()
{
  return objc_msgSend(v0, sel_setMinimumFontSize_);
}

id protocol witness for UIKitTextInput.uiAdjustsFontSizeToFitWidth.getter in conformance UITextField()
{
  return objc_msgSend(v0, sel_adjustsFontSizeToFitWidth);
}

id protocol witness for UIKitTextInput.uiAdjustsFontSizeToFitWidth.setter in conformance UITextField(char a1)
{
  return objc_msgSend(v1, sel_setAdjustsFontSizeToFitWidth_, a1 & 1);
}

uint64_t protocol witness for UIKitTextInput.uiSelectedRange.getter in conformance UITextField()
{
  return UITextField.uiSelectedRange.getter();
}

id protocol witness for UIKitTextInput.uiSelectedRange.setter in conformance UITextField(uint64_t a1, uint64_t a2, char a3)
{
  id result = objc_msgSend(v3, sel_text);
  if (result)
  {
    char v8 = result;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    if (a3)
    {
      return (id)swift_bridgeObjectRelease();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBB6A0]);
      lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v12 = _NSRange.init<A, B>(_:in:)();
      return objc_msgSend(v3, sel_setSelectionRange_, v12, v13, v9, v11, a1, a2);
    }
  }
  return result;
}

id protocol witness for UIKitTextInput.uiAttributedText.getter in conformance VerticalTextView()
{
  id v1 = objc_msgSend(v0, sel_attributedText);

  return v1;
}

void protocol witness for UIKitTextInput.uiAttributedText.setter in conformance VerticalTextView(void *a1, uint64_t a2, uint64_t a3)
{
}

void protocol witness for UIKitTextInput.uiAttributedPlaceholder.setter in conformance VerticalTextView(void *a1, uint64_t a2, uint64_t a3)
{
}

void protocol witness for UIKitTextInput.uiAttributedText.setter in conformance VerticalTextView(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  if (a1)
  {
    [v4 *a4];
  }
}

id protocol witness for UIKitTextInput.uiInputAccessoryView.getter in conformance VerticalTextView()
{
  id v1 = objc_msgSend(v0, sel_inputAccessoryView);

  return v1;
}

void protocol witness for UIKitTextInput.uiInputAccessoryView.setter in conformance VerticalTextView(void *a1)
{
  objc_msgSend(v1, sel_setInputAccessoryView_, a1);
}

id protocol witness for UIKitTextInput.uiTextAlignment.setter in conformance VerticalTextView(uint64_t a1)
{
  return objc_msgSend(v1, sel_setTextAlignment_, a1);
}

uint64_t protocol witness for UIKitTextInput.uiSelectedRange.getter in conformance VerticalTextView()
{
  return UITextView.range.getter();
}

id protocol witness for UIKitTextInput.uiSelectedRange.setter in conformance VerticalTextView(id result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    id result = objc_msgSend(v3, sel_text);
    if (result)
    {
      unint64_t v4 = result;
      uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v7 = v6;

      type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBB6A0]);
      lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v8 = _NSRange.init<A, B>(_:in:)();
      return objc_msgSend(v3, sel_setSelectedRange_, v8, v9, v5, v7);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

id protocol witness for UIKitTextInput.uiTextAffinity.getter in conformance VerticalTextView()
{
  return objc_msgSend(v0, sel_selectionAffinity);
}

id protocol witness for UIKitTextInput.uiTextAffinity.setter in conformance VerticalTextView(uint64_t a1)
{
  return objc_msgSend(v1, sel_setSelectionAffinity_, a1);
}

void closure #1 in UIKitTextView.enqueueScrollIfNeeded()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x18C119DF0](v4);
  if (v5)
  {
    uint64_t v6 = (void *)v5;
    swift_beginAccess();
    uint64_t v7 = MEMORY[0x18C119DF0](a3 + 16);
    if (v7)
    {
      uint64_t v8 = (void *)v7;
      objc_msgSend(v6, sel_bounds);
      objc_msgSend(v8, sel_convertRect_fromCoordinateSpace_, v6);
      EdgeInsets.init(_all:)();
      CGRect.inset(by:)();
      objc_msgSend(v8, sel_scrollRectToVisible_animated_, 1);

      uint64_t v6 = v8;
    }
  }
}

void closure #2 in UIKitTextView.enqueueScrollIfNeeded()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x18C119DF0](v4);
  if (v5)
  {
    uint64_t v6 = (char *)v5;
    if (*(void *)(v5 + OBJC_IVAR____TtC7SwiftUI13UIKitTextView_didShowObserver))
    {
      objc_msgSend(a3, sel_removeObserver_);
      if (*(void *)&v6[OBJC_IVAR____TtC7SwiftUI13UIKitTextView_willHideObserver])
      {
        objc_msgSend(a3, sel_removeObserver_);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

id UIKitTextView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitTextView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for UIKitTextView()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<KeyboardTypeKey>, (uint64_t)&type metadata for KeyboardTypeKey, (uint64_t)&protocol witness table for KeyboardTypeKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<KeyboardTypeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AutocorrectionTypeKey>, (uint64_t)&type metadata for AutocorrectionTypeKey, (uint64_t)&protocol witness table for AutocorrectionTypeKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AutocorrectionTypeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TextContentTypeKey>, (uint64_t)&type metadata for TextContentTypeKey, (uint64_t)&protocol witness table for TextContentTypeKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextContentTypeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputAutocapitalizationKey>, (uint64_t)&type metadata for TextInputAutocapitalizationKey, (uint64_t)&protocol witness table for TextInputAutocapitalizationKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputAutocapitalizationKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey>, (uint64_t)&type metadata for EnvironmentValues.SubmitLabelKey, (uint64_t)&protocol witness table for EnvironmentValues.SubmitLabelKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SubmitLabelKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior>, (uint64_t)&type metadata for EnvironmentValues.__Key_writingToolsBehavior, (uint64_t)&protocol witness table for EnvironmentValues.__Key_writingToolsBehavior, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_writingToolsBehavior> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t sub_188193890()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1881938C8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitTextView.enqueueScrollIfNeeded()(uint64_t a1)
{
  closure #1 in UIKitTextView.enqueueScrollIfNeeded()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_188193910()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in UIKitTextView.enqueueScrollIfNeeded()(uint64_t a1)
{
  closure #2 in UIKitTextView.enqueueScrollIfNeeded()(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

void type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<KeyboardTypeKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TextInputDictation.Key>, (uint64_t)&type metadata for TextInputDictation.Key, (uint64_t)&protocol witness table for TextInputDictation.Key, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TextInputDictation.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance IsAnimated<A>()
{
  return specialized IsAnimated.description.getter();
}

uint64_t sub_188193A74()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

unint64_t specialized IsAnimated.description.getter()
{
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = static PreferenceKey.readableName.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  return 0xD000000000000017;
}

uint64_t Gesture.allowsIncompleteEventSequences()(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for AllowsIncompleteEventSequences();
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4101138](WitnessTable, a1, v4, a2, WitnessTable);
}

uint64_t type metadata accessor for AllowsIncompleteEventSequences()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_188193C04()
{
  return swift_getWitnessTable();
}

uint64_t static AllowsIncompleteEventSequences._makeGesture(modifier:inputs:body:)(uint64_t a1, long long *a2, void (*a3)(_OWORD *))
{
  *(_OWORD *)&v15[28] = *(long long *)((char *)a2 + 108);
  long long v4 = a2[5];
  *(_OWORD *)&v14[48] = a2[4];
  *(_OWORD *)id v15 = v4;
  *(_OWORD *)&v15[16] = a2[6];
  long long v5 = a2[1];
  long long v13 = *a2;
  *(_OWORD *)uint64_t v14 = v5;
  long long v6 = a2[3];
  *(_OWORD *)&v14[16] = a2[2];
  *(_OWORD *)&v14[32] = v6;
  *(void *)&long long v10 = v13;
  DWORD2(v10) = DWORD2(v13);
  *(void *)uint64_t v11 = *(void *)v14;
  *(_OWORD *)&v11[8] = *(_OWORD *)&v14[8];
  *(_OWORD *)&v11[24] = *(_OWORD *)&v14[24];
  *(_OWORD *)&v11[40] = *(_OWORD *)&v14[40];
  *(void *)&v11[56] = *(void *)&v14[56];
  *(_OWORD *)&v12[8] = *(_OWORD *)&v15[8];
  *(_OWORD *)&v12[24] = *(_OWORD *)&v15[24];
  *(_DWORD *)uint64_t v12 = *(_DWORD *)v15;
  *(_DWORD *)&v12[40] = *(_DWORD *)&v15[40] | 2;
  v8[4] = *(_OWORD *)&v11[48];
  v8[5] = *(_OWORD *)v12;
  v9[0] = *(_OWORD *)&v12[16];
  *(_OWORD *)((char *)v9 + 12) = *(_OWORD *)&v12[28];
  v8[0] = v10;
  v8[1] = *(_OWORD *)v11;
  v8[2] = *(_OWORD *)&v11[16];
  v8[3] = *(_OWORD *)&v11[32];
  outlined retain of _GestureInputs((uint64_t)&v13);
  outlined retain of _GestureInputs((uint64_t)&v10);
  a3(v8);
  outlined release of _GestureInputs((uint64_t)&v10);
  return outlined release of _GestureInputs((uint64_t)&v10);
}

void __swiftcall SquareBorderTextFieldStyle.init()()
{
}

void SquareBorderTextFieldStyle._body(configuration:)()
{
}

uint64_t associated type witness table accessor for TextFieldStyle._Body : View in SquareBorderTextFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for SquareBorderTextFieldStyle()
{
  return &type metadata for SquareBorderTextFieldStyle;
}

unint64_t lazy protocol witness table accessor for type SquareBorderTextFieldStyle.BodyContent and conformance SquareBorderTextFieldStyle.BodyContent()
{
  unint64_t result = lazy protocol witness table cache variable for type SquareBorderTextFieldStyle.BodyContent and conformance SquareBorderTextFieldStyle.BodyContent;
  if (!lazy protocol witness table cache variable for type SquareBorderTextFieldStyle.BodyContent and conformance SquareBorderTextFieldStyle.BodyContent)
  {
    type metadata accessor for SquareBorderTextFieldStyle.BodyContent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SquareBorderTextFieldStyle.BodyContent and conformance SquareBorderTextFieldStyle.BodyContent);
  }
  return result;
}

uint64_t type metadata accessor for SquareBorderTextFieldStyle.BodyContent()
{
  uint64_t result = type metadata singleton initialization cache for SquareBorderTextFieldStyle.BodyContent;
  if (!type metadata singleton initialization cache for SquareBorderTextFieldStyle.BodyContent) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t assignWithCopy for SquareBorderTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  long long v4 = (_OWORD *)(a1 + 40);
  long long v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      uint64_t v8 = *(void *)(a2 + 48);
      char v9 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v7, v8, v9);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      char v12 = *(unsigned char *)(a1 + 56);
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = v8;
      *(unsigned char *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      long long v16 = *(_OWORD *)(a2 + 56);
      *long long v4 = *v5;
      *(_OWORD *)(a1 + 56) = v16;
    }
  }
  else if (v6)
  {
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    char v15 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v13, v14, v15);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(unsigned char *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 56);
    *long long v4 = *v5;
    *(_OWORD *)(a1 + 56) = v17;
  }
  uint64_t v18 = *(void *)(a2 + 72);
  uint64_t v19 = *(void *)(a2 + 80);
  uint64_t v20 = *(void *)(a2 + 88);
  uint64_t v21 = *(void *)(a2 + 96);
  uint64_t v22 = *(void *)(a2 + 104);
  uint64_t v23 = *(void *)(a2 + 112);
  uint64_t v24 = *(void *)(a2 + 120);
  uint64_t v25 = *(void *)(a2 + 128);
  uint64_t v73 = *(void *)(a2 + 136);
  uint64_t v74 = *(void *)(a2 + 144);
  uint64_t v75 = *(void *)(a2 + 152);
  uint64_t v76 = *(void *)(a2 + 160);
  uint64_t v77 = *(void *)(a2 + 168);
  int __dsta = *(_DWORD *)(a2 + 176);
  char v80 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v18, v19, v20, v21, v22, v23, v24, v25, v73, v74, v75, v76, v77, __dsta, v80);
  uint64_t v26 = *(void *)(a1 + 72);
  uint64_t v27 = *(void *)(a1 + 80);
  uint64_t v28 = *(void *)(a1 + 88);
  uint64_t v29 = *(void *)(a1 + 96);
  uint64_t v30 = *(void *)(a1 + 104);
  uint64_t v31 = *(void *)(a1 + 112);
  uint64_t v32 = *(void *)(a1 + 120);
  uint64_t v33 = *(void *)(a1 + 128);
  long long v34 = *(_OWORD *)(a1 + 136);
  long long v35 = *(_OWORD *)(a1 + 152);
  uint64_t v36 = *(void *)(a1 + 168);
  int v37 = *(_DWORD *)(a1 + 176);
  char v38 = *(unsigned char *)(a1 + 180);
  *(void *)(a1 + 72) = v18;
  *(void *)(a1 + 80) = v19;
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v21;
  *(void *)(a1 + 104) = v22;
  *(void *)(a1 + 112) = v23;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v25;
  *(void *)(a1 + 136) = v73;
  *(void *)(a1 + 144) = v74;
  *(void *)(a1 + 152) = v75;
  *(void *)(a1 + 160) = v76;
  *(void *)(a1 + 168) = v77;
  *(_DWORD *)(a1 + 176) = __dsta;
  *(unsigned char *)(a1 + 180) = v80;
  outlined consume of StateOrBinding<TextFieldState>(v26, v27, v28, v29, v30, v31, v32, v33, v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36, v37, v38);
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v40 = *(int *)(v39 + 56);
  uint64_t v41 = (char *)(a1 + v40);
  uint64_t v42 = (char *)(a2 + v40);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v44 = v43;
  uint64_t v45 = *(void *)(v43 - 8);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  LODWORD(v21) = v46(v41, 1, v43);
  int v47 = v46(v42, 1, v44);
  if (v21)
  {
    if (!v47)
    {
      *(void *)uint64_t v41 = *(void *)v42;
      *((void *)v41 + 1) = *((void *)v42 + 1);
      uint64_t v48 = *(int *)(v44 + 32);
      __dst = &v41[v48];
      uint64_t v81 = &v42[v48];
      uint64_t v49 = type metadata accessor for TextSelection(0);
      uint64_t v50 = *(void *)(v49 - 8);
      uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
      swift_retain();
      swift_retain();
      if (v51(v81, 1, v49))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v81, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        uint64_t v67 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(__dst, v81, v68);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v81, *(void *)(*(void *)(v67 - 8) + 64));
        }
        __dst[*(int *)(v49 + 20)] = v81[*(int *)(v49 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v49);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
      return a1;
    }
    goto LABEL_14;
  }
  if (v47)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_14:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v54 = *(void *)(*(void *)(v53 - 8) + 64);
    uint64_t v55 = v41;
    uint64_t v56 = v42;
LABEL_15:
    memcpy(v55, v56, v54);
    return a1;
  }
  *(void *)uint64_t v41 = *(void *)v42;
  swift_retain();
  swift_release();
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_retain();
  swift_release();
  uint64_t v57 = *(int *)(v44 + 32);
  unint64_t v58 = &v41[v57];
  uint64_t v59 = &v42[v57];
  uint64_t v60 = type metadata accessor for TextSelection(0);
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
  int v63 = v62(v58, 1, v60);
  int v64 = v62(v59, 1, v60);
  if (v63)
  {
    if (!v64)
    {
      uint64_t v65 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v58, v59, v66);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v58, v59, *(void *)(*(void *)(v65 - 8) + 64));
      }
      v58[*(int *)(v60 + 20)] = v59[*(int *)(v60 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      return a1;
    }
    goto LABEL_24;
  }
  if (v64)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2((uint64_t)v58, type metadata accessor for TextSelection);
LABEL_24:
    type metadata accessor for TextSelection?(0);
    size_t v54 = *(void *)(*(void *)(v69 - 8) + 64);
    uint64_t v55 = v58;
    uint64_t v56 = v59;
    goto LABEL_15;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2((uint64_t)v58, type metadata accessor for TextSelection.Indices);
    uint64_t v71 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(v58, v59, v72);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v58, v59, *(void *)(*(void *)(v71 - 8) + 64));
    }
  }
  v58[*(int *)(v60 + 20)] = v59[*(int *)(v60 + 20)];
  return a1;
}

uint64_t assignWithTake for SquareBorderTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  if (*(void *)(a1 + 64))
  {
    uint64_t v5 = *(void *)(a2 + 64);
    if (v5)
    {
      char v6 = *(unsigned char *)(a2 + 56);
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      char v9 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(void *)(a1 + 64) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 168);
  int v12 = *(_DWORD *)(a2 + 176);
  char v13 = *(unsigned char *)(a2 + 180);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = *(void *)(a1 + 96);
  uint64_t v18 = *(void *)(a1 + 104);
  uint64_t v19 = *(void *)(a1 + 112);
  uint64_t v20 = *(void *)(a1 + 120);
  uint64_t v21 = *(void *)(a1 + 128);
  long long v22 = *(_OWORD *)(a1 + 136);
  long long v23 = *(_OWORD *)(a1 + 152);
  uint64_t v24 = *(void *)(a1 + 168);
  int v25 = *(_DWORD *)(a1 + 176);
  char v26 = *(unsigned char *)(a1 + 180);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = v11;
  *(_DWORD *)(a1 + 176) = v12;
  *(unsigned char *)(a1 + 180) = v13;
  outlined consume of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v20, v21, v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, v26);
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v28 = *(int *)(v27 + 56);
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v31 - 8);
  long long v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v29, 1, v31);
  int v36 = v34(v30, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      uint64_t v37 = *((void *)v30 + 1);
      *(void *)uint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = v37;
      uint64_t v38 = *(int *)(v32 + 32);
      uint64_t v39 = &v29[v38];
      uint64_t v40 = &v30[v38];
      uint64_t v41 = type metadata accessor for TextSelection(0);
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        uint64_t v58 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v39, v40, v59);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v39, v40, *(void *)(*(void *)(v58 - 8) + 64));
        }
        v39[*(int *)(v41 + 20)] = v40[*(int *)(v41 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
      return a1;
    }
    goto LABEL_12;
  }
  if (v36)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v45 = *(void *)(*(void *)(v44 - 8) + 64);
    uint64_t v46 = v29;
    int v47 = v30;
LABEL_13:
    memcpy(v46, v47, v45);
    return a1;
  }
  *(void *)uint64_t v29 = *(void *)v30;
  swift_release();
  *((void *)v29 + 1) = *((void *)v30 + 1);
  swift_release();
  uint64_t v48 = *(int *)(v32 + 32);
  uint64_t v49 = &v29[v48];
  uint64_t v50 = &v30[v48];
  uint64_t v51 = type metadata accessor for TextSelection(0);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v49, 1, v51);
  int v55 = v53(v50, 1, v51);
  if (v54)
  {
    if (!v55)
    {
      uint64_t v56 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v49, v50, v57);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v49, v50, *(void *)(*(void *)(v56 - 8) + 64));
      }
      v49[*(int *)(v51 + 20)] = v50[*(int *)(v51 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      return a1;
    }
    goto LABEL_22;
  }
  if (v55)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2((uint64_t)v49, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    size_t v45 = *(void *)(*(void *)(v60 - 8) + 64);
    uint64_t v46 = v49;
    int v47 = v50;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2((uint64_t)v49, type metadata accessor for TextSelection.Indices);
    uint64_t v62 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v49, v50, v63);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v49, v50, *(void *)(*(void *)(v62 - 8) + 64));
    }
  }
  v49[*(int *)(v51 + 20)] = v50[*(int *)(v51 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for SquareBorderTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188194E18);
}

uint64_t sub_188194E18(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SquareBorderTextFieldStyle.BodyContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188194EC4);
}

uint64_t sub_188194EC4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t associated type witness table accessor for View.Body : View in SquareBorderTextFieldStyle.BodyContent()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for ListMenuPickerStyle()
{
  return &type metadata for ListMenuPickerStyle;
}

uint64_t static ListMenuPickerStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  type metadata accessor for _PickerValue();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(type metadata accessor for PickerStyleConfiguration() - 8) + 64)) {
    closure #1 in static ListMenuPickerStyle._makeView<A>(value:inputs:)(1, a3, a4, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
  }
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  MenuPickerStyle.Body.init(configuration:isBordered:)(OffsetAttribute2, 1);
  type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
  type metadata accessor for PickerStyleConfiguration.Content();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for PickerContentView();
  swift_getWitnessTable();
  type metadata accessor for Menu();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>);
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for GroupElementsOfContent();
  type metadata accessor for Group();
  type metadata accessor for PopUpButton();
  swift_getWitnessTable();
  type metadata accessor for GroupElementsOfContent();
  type metadata accessor for Group();
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (void (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>);
  type metadata accessor for StaticIf();
  type metadata accessor for MenuPickerStyle.Body();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  static StaticIf<>._makeView(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t static ListMenuPickerStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  type metadata accessor for _PickerValue();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(type metadata accessor for PickerStyleConfiguration() - 8) + 64)) {
    closure #1 in static ListMenuPickerStyle._makeView<A>(value:inputs:)(1, a3, a4, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
  }
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  MenuPickerStyle.Body.init(configuration:isBordered:)(OffsetAttribute2, 1);
  type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
  type metadata accessor for PickerStyleConfiguration.Content();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for SectionStyleModifier<MenuPickerOptionSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type MenuPickerOptionSectionStyle and conformance MenuPickerOptionSectionStyle, (uint64_t)&type metadata for MenuPickerOptionSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleConfiguration.Label();
  type metadata accessor for PickerContentView();
  swift_getWitnessTable();
  type metadata accessor for Menu();
  _s7SwiftUI20SectionStyleModifierVyAA016MenuPickerOptioncD0VGMaTm_0(255, &lazy cache variable for type metadata for MenuStyleModifier<DefaultMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultMenuStyle and conformance DefaultMenuStyle, (uint64_t)&type metadata for DefaultMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>);
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  type metadata accessor for GroupElementsOfContent();
  type metadata accessor for Group();
  type metadata accessor for PopUpButton();
  swift_getWitnessTable();
  type metadata accessor for GroupElementsOfContent();
  type metadata accessor for Group();
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (void (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>);
  type metadata accessor for StaticIf();
  type metadata accessor for MenuPickerStyle.Body();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  static StaticIf<>._makeViewList(view:inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

ValueMetadata *closure #1 in static ListMenuPickerStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = &type metadata for ListMenuPickerStyle;
  uint64_t v12 = a2;
  char v13 = &protocol witness table for ListMenuPickerStyle;
  uint64_t v14 = a3;
  _OWORD v9[2] = type metadata accessor for _PickerValue();
  uint64_t v10 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a4, (uint64_t)v9, v10, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v11;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ShouldProvideBridgedPopUpButton()
{
  lazy protocol witness table accessor for type ShouldProvideBridgedPopUpButton and conformance ShouldProvideBridgedPopUpButton();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ShouldProvideBridgedPopUpButton()
{
  return PropertyList.subscript.setter();
}

ValueMetadata *type metadata accessor for ShouldProvideBridgedPopUpButton()
{
  return &type metadata for ShouldProvideBridgedPopUpButton;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ShouldProvideBridgedPopUpButton()
{
  return &protocol witness table for ShouldProvideBridgedPopUpButton;
}

uint64_t NavigationView.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t NavigationView.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v4 + 16))(v7, v5);
  *(void *)a2 = swift_getKeyPath();
  *(unsigned char *)(a2 + 8) = 0;
  uint64_t v8 = type metadata accessor for NavigationView.InternalBody();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2 + *(int *)(v8 + 36), v7, v3);
}

uint64_t NavigationView.InternalBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v23 = *(void *)(a1 + 16);
  type metadata accessor for _EnvironmentKeyWritingModifier<NavigationEnabled>();
  uint64_t v3 = type metadata accessor for ModifiedContent();
  unint64_t v22 = lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content();
  uint64_t v39 = *(void *)(a1 + 24);
  uint64_t v4 = v39;
  unint64_t v40 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v24 = MEMORY[0x1E4F3FBC0];
  int v35 = &type metadata for _NavigationViewStyleConfiguration.Content;
  uint64_t v36 = v3;
  unint64_t v37 = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for StaticSourceWriter();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v21 - v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v28 = v23;
  uint64_t v29 = v4;
  uint64_t v30 = v25;
  unint64_t v16 = lazy protocol witness table accessor for type ResolvedNavigationViewStyle and conformance ResolvedNavigationViewStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for _NavigationViewStyleConfiguration.Content, (void (*)(double))partial apply for closure #1 in NavigationView.InternalBody.body.getter, (uint64_t)v27, (uint64_t)&type metadata for ResolvedNavigationViewStyle, (uint64_t)&type metadata for _NavigationViewStyleConfiguration.Content, v3, v16);
  unint64_t v33 = v16;
  long long v34 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v17 = swift_getWitnessTable();
  MEMORY[0x18C113660](v17, v5, &type metadata for NavigationCommonModifier, v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  unint64_t v18 = lazy protocol witness table accessor for type NavigationCommonModifier and conformance NavigationCommonModifier();
  uint64_t v31 = v17;
  unint64_t v32 = v18;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v10 + 8);
  v19(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v19)(v15, v9);
}

uint64_t closure #1 in NavigationView.InternalBody.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyWritingModifier<NavigationEnabled>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v20 - v14;
  uint64_t v16 = type metadata accessor for NavigationView.InternalBody();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1 + *(int *)(v16 + 36), a2);
  swift_getKeyPath();
  char v21 = 1;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a2);
  unint64_t v17 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>();
  v20[1] = a3;
  _OWORD v20[2] = v17;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  unint64_t v18 = *(void (**)(char *, uint64_t))(v10 + 8);
  v18(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v18)(v15, v9);
}

void protocol witness for View.body.getter in conformance NavigationView<A>()
{
}

uint64_t associated type witness table accessor for PubliclyPrimitiveView.InternalBody : View in NavigationView<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for NavigationView<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in NavigationView<A>()
{
  return &protocol witness table for NavigationView<A>;
}

uint64_t getEnumTagSinglePayload for NavigationView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for NavigationView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881968E8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata completion function for NavigationView.InternalBody()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for NavigationView.InternalBody(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Bool?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  unsigned int v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t *assignWithCopy for NavigationView.InternalBody(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned __int8 *)a1 + 8);
  *a1 = v6;
  *((unsigned char *)a1 + 8) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v10 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t *assignWithTake for NavigationView.InternalBody(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  char v7 = *((unsigned char *)a2 + 8);
  uint64_t v8 = *a1;
  uint64_t v9 = *((unsigned __int8 *)a1 + 8);
  *a1 = v6;
  *((unsigned char *)a1 + 8) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v10 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v10 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationView.InternalBody(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 9) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 9) & ~v6);
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + 8);
      if (v15 > 1) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for NavigationView.InternalBody(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 9) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x188196F6CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 9] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0xFE)
        {
          a1[8] = 0;
          *(void *)a1 = a2 - 255;
        }
        else
        {
          a1[8] = -(char)a2;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for NavigationView.InternalBody()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in NavigationView<A>.InternalBody()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<NavigationEnabled>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>);
    }
  }
}

uint64_t partial apply for closure #1 in NavigationView.InternalBody.body.getter()
{
  return closure #1 in NavigationView.InternalBody.body.getter(v0[4], v0[2], v0[3]);
}

uint64_t sub_188197054@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isNavigationEnabledInternal.getter();
  *a1 = result;
  return result;
}

uint64_t sub_188197090()
{
  return EnvironmentValues.isNavigationEnabledInternal.setter();
}

uint64_t sub_1881970C0()
{
  return swift_getWitnessTable();
}

uint64_t EnvironmentValues.selectionPopsSubsequentColumn.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_selectionPopsSubsequentColumn>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_4(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_selectionPopsSubsequentColumn> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_selectionPopsSubsequentColumn>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_selectionPopsSubsequentColumn>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_4(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_selectionPopsSubsequentColumn> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_selectionPopsSubsequentColumn>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.selectionPopsSubsequentColumn : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.selectionPopsSubsequentColumn.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.selectionPopsSubsequentColumn : EnvironmentValues()
{
  return EnvironmentValues.selectionPopsSubsequentColumn.setter();
}

uint64_t EnvironmentValues.selectionPopsSubsequentColumn.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_selectionPopsSubsequentColumn>();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_4(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_selectionPopsSubsequentColumn> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_selectionPopsSubsequentColumn>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.selectionClearsNavigationStackPath(_:)()
{
  return swift_release();
}

uint64_t sub_1881974C0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.selectionPopsSubsequentColumn.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_188197500()
{
  return EnvironmentValues.selectionPopsSubsequentColumn.setter();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_selectionPopsSubsequentColumn>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_selectionPopsSubsequentColumn>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_selectionPopsSubsequentColumn>);
    }
  }
}

void *type metadata accessor for EnvironmentValues.__Key_selectionPopsSubsequentColumn()
{
  return &unk_1ED48FEA0;
}

uint64_t base witness table accessor for Scrollable in CollectionViewListScrollable<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t CollectionViewListScrollable.scroll<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  double v10 = MEMORY[0x1F4188790](a1);
  BOOL v11 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))(v11, a1, v10);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = swift_allocObject();
  long long v14 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v13 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(v13 + 32) = a3;
  *(_OWORD *)(v13 + 40) = v14;
  *(void *)(v13 + 56) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v13 + v12, v11, a3);
  LOBYTE(a4) = CollectionViewListScrollable.apply<A>(id:_:)(a1, (uint64_t (*)(void *))partial apply for closure #1 in CollectionViewListScrollable.scroll<A>(to:), v13, (void *)a2, a3, a4);
  swift_release();
  return a4 & 1;
}

BOOL closure #1 in CollectionViewListScrollable.scroll<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for ListScrollable();
  return ListScrollable.scroll<A>(to:)(a2, v11, a5, a8);
}

uint64_t CollectionViewListScrollable.apply<A>(id:_:)(uint64_t a1, uint64_t (*a2)(void *), uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v26 = a6;
  uint64_t v27 = a5;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v9 = a4[2];
  uint64_t v10 = a4[4];
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for ListScrollable();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  long long v14 = (uint64_t (**)(void *))((char *)&v24 - v13);
  id v15 = CollectionViewListScrollable.coordinator.getter();
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = a1;
    uint64_t v18 = v26;
    if (UICollectionViewListCoordinatorBase.hasPendingID<A>(_:)(v17, v27, v26))
    {
      uint64_t v19 = swift_allocObject();
      uint64_t v20 = a4[3];
      *(void *)(v19 + 16) = v9;
      *(void *)(v19 + 24) = v20;
      *(void *)(v19 + 32) = v27;
      *(void *)(v19 + 40) = v10;
      *(void *)(v19 + 48) = a4[5];
      *(void *)(v19 + 56) = v18;
      *(void *)(v19 + 64) = v24;
      *(void *)(v19 + 72) = v25;
      long long v21 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)(v19 + 80) = *(_OWORD *)v6;
      *(_OWORD *)(v19 + 96) = v21;
      *(void *)(v19 + 112) = *(void *)(v6 + 32);
      swift_retain();
      outlined retain of CoreGlue2.LinkURLParameters(v6);
      static Update.enqueueAction(_:)();
      swift_release();

      char v22 = 1;
    }
    else
    {
      CollectionViewListScrollable.base.getter(v14);
      char v22 = v24(v14);

      (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
    }
  }
  else
  {
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t closure #1 in CollectionViewListScrollable.apply<A>(id:_:)(void (*a1)(void *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for ListScrollable();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (void *)((char *)v18 - v15);
  v18[0] = a4;
  v18[1] = a5;
  v18[2] = a7;
  v18[3] = a8;
  type metadata accessor for CollectionViewListScrollable();
  CollectionViewListScrollable.base.getter(v16);
  a1(v16);
  return (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t CollectionViewListScrollable.runScrollTest(_:scrollMode:)(uint64_t a1, unint64_t *a2)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for ListScrollable();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned int v7 = (char *)v12 - v6;
  unint64_t v9 = *a2;
  unint64_t v8 = a2[1];
  CollectionViewListScrollable.base.getter((unint64_t *)((char *)v12 - v6));
  v12[0] = v9;
  v12[1] = v8;
  char v10 = ListScrollable.runScrollTest(_:scrollMode:)(a1, v12);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v10 & 1;
}

uint64_t CollectionViewListScrollable.runScrollTest(_:scrollMode:onComplete:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for ListScrollable();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v15 - v10;
  unint64_t v13 = *a2;
  unint64_t v12 = a2[1];
  CollectionViewListScrollable.base.getter((unint64_t *)((char *)v15 - v10));
  v15[0] = v13;
  v15[1] = v12;
  LOBYTE(a4) = ListScrollable.runScrollTest(_:scrollMode:onComplete:)(a1, v15, a3, a4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return a4 & 1;
}

uint64_t CollectionViewListScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for ListScrollable();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v17 - v10;
  uint64_t v12 = *a2;
  uint64_t v13 = a2[1];
  unint64_t v14 = *a3;
  unint64_t v15 = a3[1];
  CollectionViewListScrollable.base.getter((uint64_t *)((char *)&v17 - v10));
  v20[0] = v12;
  v20[1] = v13;
  v19[0] = v14;
  v19[1] = v15;
  LOBYTE(v12) = ListScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(a1, v20, v19, v17, v18);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v12 & 1;
}

uint64_t CollectionViewListScrollable.mapFirstChild<A, B>(ofType:body:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v15 = a4;
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for ListScrollable();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  CollectionViewListScrollable.base.getter((uint64_t *)((char *)&v14 - v11));
  ListScrollable.mapFirstChild<A, B>(ofType:body:)(a1, a2, v9, a3, v15, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t CollectionViewListScrollable.allowsContentOffsetAdjustments.getter()
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v0 = type metadata accessor for ListScrollable();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - v2;
  CollectionViewListScrollable.base.getter((uint64_t *)((char *)&v5 - v2));
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return 1;
}

uint64_t protocol witness for Scrollable.scroll<A>(to:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CollectionViewListScrollable.scroll<A>(to:)(a1, a4, a2, a3) & 1;
}

uint64_t protocol witness for Scrollable.setContentTarget(_:) in conformance CollectionViewListScrollable<A, B>()
{
  return specialized CollectionViewListScrollable.setContentTarget(_:)() & 1;
}

uint64_t protocol witness for Scrollable.allowsContentOffsetAdjustments.getter in conformance CollectionViewListScrollable<A, B>()
{
  return CollectionViewListScrollable.allowsContentOffsetAdjustments.getter() & 1;
}

uint64_t protocol witness for Scrollable.adjustContentOffset(by:reason:) in conformance CollectionViewListScrollable<A, B>()
{
  return specialized CollectionViewListScrollable.adjustContentOffset(by:reason:)() & 1;
}

uint64_t protocol witness for Scrollable.mapFirstChild<A, B>(ofType:body:) in conformance CollectionViewListScrollable<A, B>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return CollectionViewListScrollable.mapFirstChild<A, B>(ofType:body:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for PPTScrollable.runScrollTest(_:scrollMode:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, unint64_t *a2)
{
  return CollectionViewListScrollable.runScrollTest(_:scrollMode:)(a1, a2) & 1;
}

uint64_t protocol witness for PPTScrollable.runScrollTest(_:scrollMode:onComplete:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  return CollectionViewListScrollable.runScrollTest(_:scrollMode:onComplete:)(a1, a2, a3, a4) & 1;
}

uint64_t protocol witness for PPTScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  return CollectionViewListScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(a1, a2, a3, a4, a5) & 1;
}

uint64_t CollectionViewListScrollable.visibleCollectionViewIDs.getter()
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v0 = type metadata accessor for ListScrollable();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v6 - v2;
  CollectionViewListScrollable.base.getter((uint64_t *)((char *)&v6 - v2));
  uint64_t v4 = ListScrollable.visibleCollectionViewIDs.getter(v0);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t CollectionViewListScrollable.subviewClosestTo(rect:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for ListScrollable();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - v4;
  CollectionViewListScrollable.base.getter((uint64_t *)((char *)&v8 - v4));
  double v6 = ListScrollable.subviewClosestTo(rect:)(a1);
  return (*(uint64_t (**)(char *, uint64_t, double))(v3 + 8))(v5, v2, v6);
}

uint64_t CollectionViewListScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for ListScrollable();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v13 - v8;
  uint64_t v10 = a1[1];
  LODWORD(a2) = *a2;
  CollectionViewListScrollable.base.getter((_DWORD *)((char *)v13 - v8));
  uint64_t v14 = *a1;
  uint64_t v15 = v10;
  void v13[3] = a2;
  double v11 = protocol witness for static Rule.initialValue.getter in conformance ToString<A>(a3);
  return (*(uint64_t (**)(char *, uint64_t, double))(v7 + 8))(v9, v6, v11);
}

uint64_t static CollectionViewListScrollable.hasMultipleViewsInAxis(_:)(char a1)
{
  char v1 = a1 & 1;
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();

  return NavigationSelectionModifier.init(isActive:presentedValue:)(v1);
}

uint64_t CollectionViewListScrollable.firstCollectionViewIndex(of:)(uint64_t *a1)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for ListScrollable();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v9 - v4;
  uint64_t v6 = a1[1];
  CollectionViewListScrollable.base.getter((uint64_t *)((char *)v9 - v4));
  v9[0] = *a1;
  v9[1] = v6;
  uint64_t v7 = ListScrollable.firstCollectionViewIndex(of:)(v9, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v7;
}

uint64_t CollectionViewListScrollable.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for ListScrollable();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v12 - v8;
  CollectionViewListScrollable.base.getter((uint64_t *)((char *)&v12 - v8));
  char v10 = ListScrollable.applyCollectionViewIDs(from:to:)(a1, a2, a3, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v10 & 1;
}

uint64_t CollectionViewListScrollable.collectionViewID(for:)@<X0>(_OWORD *a1@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for ListScrollable();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v8 - v4;
  CollectionViewListScrollable.base.getter((uint64_t *)((char *)&v8 - v4));
  double v6 = protocol witness for static Rule.initialValue.getter in conformance ToString<A>(a1);
  return (*(uint64_t (**)(char *, uint64_t, double))(v3 + 8))(v5, v2, v6);
}

uint64_t CollectionViewListScrollable.scroll(toCollectionViewID:anchor:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  int v7 = a4 & 1;
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for ListScrollable();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  double v11 = (char *)v14 - v10;
  uint64_t v12 = a1[1];
  CollectionViewListScrollable.base.getter((void *)((char *)v14 - v10));
  v14[0] = *a1;
  v14[1] = v12;
  LOBYTE(a3) = ListScrollable.scroll(toCollectionViewID:anchor:)((uint64_t)v14, a2, a3, v7, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return a3 & 1;
}

void static CollectionViewListScrollable.accessibilityRole.getter(unsigned char *a1@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();

  protocol witness for static EnvironmentKey.defaultValue.getter in conformance AccessibilityLargeContentViewerKey(a1);
}

uint64_t protocol witness for ScrollableCollection.visibleCollectionViewIDs.getter in conformance CollectionViewListScrollable<A, B>()
{
  return CollectionViewListScrollable.visibleCollectionViewIDs.getter();
}

uint64_t protocol witness for ScrollableCollection.forEachVisibleSubview(_:) in conformance CollectionViewListScrollable<A, B>()
{
  return specialized CollectionViewListScrollable.forEachVisibleSubview(_:)();
}

uint64_t protocol witness for ScrollableCollection.subviewClosestTo(rect:) in conformance CollectionViewListScrollable<A, B>@<X0>(uint64_t a1@<X8>)
{
  return CollectionViewListScrollable.subviewClosestTo(rect:)(a1);
}

uint64_t protocol witness for ScrollableCollection.nextVisibleCollectionViewID(towards:from:border:ignoring:) in conformance CollectionViewListScrollable<A, B>@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  return CollectionViewListScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(a1, a2, a3);
}

uint64_t protocol witness for static ScrollableCollection.hasMultipleViewsInAxis(_:) in conformance CollectionViewListScrollable<A, B>(char a1)
{
  return static CollectionViewListScrollable.hasMultipleViewsInAxis(_:)(a1 & 1);
}

uint64_t protocol witness for ScrollableCollection.firstCollectionViewIndex(of:) in conformance CollectionViewListScrollable<A, B>(uint64_t *a1)
{
  return CollectionViewListScrollable.firstCollectionViewIndex(of:)(a1);
}

uint64_t protocol witness for ScrollableCollection.applyCollectionViewIDs(from:to:) in conformance CollectionViewListScrollable<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return CollectionViewListScrollable.applyCollectionViewIDs(from:to:)(a1, a2, a3) & 1;
}

uint64_t protocol witness for ScrollableCollection.collectionViewID(for:) in conformance CollectionViewListScrollable<A, B>@<X0>(_OWORD *a1@<X8>)
{
  return CollectionViewListScrollable.collectionViewID(for:)(a1);
}

uint64_t protocol witness for ScrollableCollection.scroll(toCollectionViewID:anchor:) in conformance CollectionViewListScrollable<A, B>(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  return CollectionViewListScrollable.scroll(toCollectionViewID:anchor:)(a1, a2, a3, a4 & 1) & 1;
}

void protocol witness for static ScrollableCollection.accessibilityRole.getter in conformance CollectionViewListScrollable<A, B>(unsigned char *a1@<X8>)
{
}

void protocol witness for Rule.value.getter in conformance ScrollViewPreferenceProvider(uint64_t *a1@<X8>)
{
  type metadata accessor for UIScrollView?();
  uint64_t v2 = *(void **)AGGraphGetValue();
  if (v2)
  {
    type metadata accessor for [ScrollGeometryState](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentScrollViewBox>, (uint64_t)&type metadata for ContentScrollViewBox, MEMORY[0x1E4FBBE00]);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_18834BB80;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    *(unsigned char *)(v3 + 72) = 0;
    swift_unknownObjectWeakAssign();
    id v4 = v2;
    *(void *)(v3 + 48) = AGCreateWeakAttribute();
    *(void *)(v3 + 56) = AGCreateWeakAttribute();
    *(void *)(v3 + 64) = AGCreateWeakAttribute();
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
  }
  *a1 = v3;
}

double protocol witness for static Rule.initialValue.getter in conformance ScrollGeometryProvider@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 112) = 1;
  return result;
}

__n128 protocol witness for Rule.value.getter in conformance ScrollGeometryProvider@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BridgedListState(0);
  uint64_t v3 = AGGraphGetValue() + *(int *)(v2 + 24);
  if (*(unsigned char *)(v3 + 112))
  {
    static ScrollGeometry.zero.getter();
  }
  else
  {
    long long v5 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)v3;
    *(_OWORD *)(a1 + 16) = v5;
    long long v6 = *(_OWORD *)(v3 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v3 + 32);
    *(_OWORD *)(a1 + 48) = v6;
    long long v7 = *(_OWORD *)(v3 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(v3 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    __n128 result = *(__n128 *)(v3 + 96);
    *(__n128 *)(a1 + 96) = result;
  }
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance MakeRepresentable<A, B>@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void static ListRepresentable.dismantleViewProvider(_:coordinator:)(void *a1)
{
  id v2 = objc_msgSend(a1, sel_refreshControl);
  if (v2)
  {
    uint64_t v3 = v2;
    type metadata accessor for UIKitRefreshControl();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      long long v5 = (void *)v4;
      if (*(void *)(v4 + OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask))
      {
        uint64_t v6 = swift_retain();
        MEMORY[0x18C115EE0](v6, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
        swift_release();
      }
      objc_msgSend(v5, sel_endRefreshing);
    }
  }
  objc_msgSend(a1, sel_setRefreshControl_, 0);
  id v7 = objc_msgSend(a1, sel_contextMenuInteraction);
  objc_msgSend(v7, sel_dismissMenu);
}

void ListRepresentable._identifiedViewTree(in:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  objc_msgSend(a1, sel_layoutIfNeeded);
  id v4 = objc_msgSend(a1, sel_visibleCells);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewCell);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6) {
      goto LABEL_3;
    }
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v8 = (char *)MEMORY[0x1E4FBC860];
    if (*(void *)(MEMORY[0x1E4FBC860] + 16))
    {
LABEL_18:
      char v17 = 1;
LABEL_22:
      *(void *)a2 = v8;
      *(unsigned char *)(a2 + 160) = v17;
      return;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    uint64_t v8 = 0;
    *(void *)(a2 + 152) = 0;
    *(_OWORD *)(a2 + 136) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    char v17 = 2;
    *(_OWORD *)(a2 + 8) = 0u;
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_20;
  }
LABEL_3:
  if (v6 >= 1)
  {
    uint64_t v18 = a2;
    uint64_t v7 = 0;
    uint64_t v8 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v9 = (void *)MEMORY[0x1E4FBC8C8];
    do
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v11 = (id)MEMORY[0x18C117680](v7, v5);
      }
      else {
        id v11 = *(id *)(v5 + 8 * v7 + 32);
      }
      uint64_t v12 = v11;
      type metadata accessor for AnyListCollectionViewCell();
      uint64_t v13 = (void *)swift_dynamicCastClassUnconditional();
      (*(void (**)(void *__return_ptr))((*v9 & *v13) + 0x88))(v21);
      outlined init with copy of _IdentifiedViewTree((uint64_t)v21, (uint64_t)v19);
      if (v20 == 2
        && (int8x16_t v14 = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(v19[2], v19[6]), vorrq_s8(v19[4], v19[8])), vorrq_s8(vorrq_s8(v19[3], v19[7]), vorrq_s8(v19[5], v19[9]))), vorrq_s8(v19[0], v19[1])), !*(void *)&vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL))))
      {
        outlined destroy of _IdentifiedViewTree((uint64_t)v21);

        uint64_t v10 = v19;
      }
      else
      {
        outlined destroy of _IdentifiedViewTree((uint64_t)v19);
        outlined init with copy of _IdentifiedViewTree((uint64_t)v21, (uint64_t)v19);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
        }
        unint64_t v16 = *((void *)v8 + 2);
        unint64_t v15 = *((void *)v8 + 3);
        if (v16 >= v15 >> 1) {
          uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1, v8);
        }
        *((void *)v8 + 2) = v16 + 1;
        outlined init with take of _IdentifiedViewTree((uint64_t)v19, (uint64_t)&v8[168 * v16 + 32]);

        uint64_t v10 = (int8x16_t *)v21;
      }
      outlined destroy of _IdentifiedViewTree((uint64_t)v10);
      ++v7;
    }
    while (v6 != v7);
    swift_bridgeObjectRelease();
    a2 = v18;
    if (*((void *)v8 + 2)) {
      goto LABEL_18;
    }
    goto LABEL_21;
  }
  __break(1u);
}

void protocol witness for static PlatformViewRepresentable.dismantleViewProvider(_:coordinator:) in conformance ListRepresentable<A, B>(void **a1)
{
}

void protocol witness for PlatformViewRepresentable._identifiedViewTree(in:) in conformance ListRepresentable<A, B>(void **a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1881995E8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t specialized CollectionViewListScrollable.setContentTarget(_:)()
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v0 = type metadata accessor for ListScrollable();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - v2;
  CollectionViewListScrollable.base.getter((uint64_t *)((char *)&v5 - v2));
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return 0;
}

uint64_t specialized CollectionViewListScrollable.forEachVisibleSubview(_:)()
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v0 = type metadata accessor for ListScrollable();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - v2;
  CollectionViewListScrollable.base.getter((uint64_t *)((char *)&v5 - v2));
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

uint64_t specialized CollectionViewListScrollable.adjustContentOffset(by:reason:)()
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v0 = type metadata accessor for ListScrollable();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - v2;
  CollectionViewListScrollable.base.getter((uint64_t *)((char *)&v5 - v2));
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return 0;
}

uint64_t sub_188199940()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 32) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 32) - 8) + 80)));

  return swift_deallocObject();
}

BOOL partial apply for closure #1 in CollectionViewListScrollable.scroll<A>(to:)(uint64_t a1)
{
  return closure #1 in CollectionViewListScrollable.scroll<A>(to:)(a1, (uint64_t)v1+ ((*(unsigned __int8 *)(*(void *)(v1[4] - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[4] - 8) + 80)), v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_188199A10()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CollectionViewListScrollable.apply<A>(id:_:)()
{
  return closure #1 in CollectionViewListScrollable.apply<A>(id:_:)(*(void (**)(void *))(v0 + 64), *(void *)(v0 + 72), v0 + 80, *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

ValueMetadata *type metadata accessor for ScrollViewPreferenceProvider()
{
  return &type metadata for ScrollViewPreferenceProvider;
}

ValueMetadata *type metadata accessor for ScrollGeometryProvider()
{
  return &type metadata for ScrollGeometryProvider;
}

uint64_t getEnumTagSinglePayload for MakeRepresentable(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 20)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeRepresentable(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 16) = 0;
    *(void *)double result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 20) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 20) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 1;
    }
  }
  return result;
}

uint64_t assignWithTake for ListRepresentable(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListRepresentable(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 44)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListRepresentable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 44) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 44) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t initializeWithCopy for CollectionViewListScrollable(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CollectionViewListScrollable(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for CollectionViewListScrollable(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t sub_188199D0C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_188199D44()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in ListRepresentable.makeViewProvider(context:)()
{
  return swift_unknownObjectWeakAssign();
}

ValueMetadata *type metadata accessor for CollectionViewListUtilities()
{
  return &type metadata for CollectionViewListUtilities;
}

unsigned char *storeEnumTagSinglePayload for CollectionViewListUtilities.CoordinatorKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x188199E74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CollectionViewListUtilities.CoordinatorKind and conformance CollectionViewListUtilities.CoordinatorKind()
{
  unint64_t result = lazy protocol witness table cache variable for type CollectionViewListUtilities.CoordinatorKind and conformance CollectionViewListUtilities.CoordinatorKind;
  if (!lazy protocol witness table cache variable for type CollectionViewListUtilities.CoordinatorKind and conformance CollectionViewListUtilities.CoordinatorKind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionViewListUtilities.CoordinatorKind and conformance CollectionViewListUtilities.CoordinatorKind);
  }
  return result;
}

uint64_t static AnimatedValuePlaybackConfiguration.== infix(_:_:)(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  char v3 = *((unsigned char *)a2 + 16);
  long long v7 = *a1;
  char v8 = v2;
  long long v5 = *a2;
  char v6 = v3;
  return specialized static AnimatedValuePlaybackConfiguration.Mode.== infix(_:_:)((uint64_t)&v7, (uint64_t)&v5) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValuePlaybackConfiguration(long long *a1, long long *a2)
{
  char v2 = *((unsigned char *)a1 + 16);
  char v3 = *((unsigned char *)a2 + 16);
  long long v7 = *a1;
  char v8 = v2;
  long long v5 = *a2;
  char v6 = v3;
  return specialized static AnimatedValuePlaybackConfiguration.Mode.== infix(_:_:)((uint64_t)&v7, (uint64_t)&v5) & 1;
}

void static AnimatedValuePlaybackConfiguration.scrubbing(time:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
}

void static AnimatedValuePlaybackConfiguration.scrubbing(progress:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 64;
}

void static AnimatedValuePlaybackConfiguration.InterruptionBehavior.restart.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x3FC999999999999ALL;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t static AnimatedValuePlaybackConfiguration.onChange<A>(of:interruptionBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)v5 + 8);
  (*(void (**)(char *, uint64_t, double))(v8 + 16))((char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v9, v3);
  uint64_t result = AnyEquatable.init<A>(_:)();
  *(void *)a2 = v11[1];
  *(void *)(a2 + 8) = v6;
  *(unsigned char *)(a2 + 16) = v7 | 0x80;
  return result;
}

uint64_t static AnimatedValuePlaybackConfiguration.repeating(autoreverses:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result & 1;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = -64;
  return result;
}

void static AnimatedValuePlaybackConfiguration.repeating.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -64;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValuePlaybackConfiguration.InterruptionBehavior.Behavior(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  uint64_t result = v3 & v4;
  if ((v3 & 1) == 0 && (v4 & 1) == 0) {
    return *(double *)a1 == *(double *)a2;
  }
  return result;
}

uint64_t static AnimatedValuePlaybackConfiguration.InterruptionBehavior.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  return 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValuePlaybackConfiguration.InterruptionBehavior(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (*(unsigned char *)(a2 + 8)) {
      return 1;
    }
  }
  else
  {
    if (*(double *)a1 != *(double *)a2) {
      char v2 = 1;
    }
    if ((v2 & 1) == 0) {
      return 1;
    }
  }
  return 0;
}

void static AnimatedValuePlaybackConfiguration.InterruptionBehavior.ignore.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

void static AnimatedValuePlaybackConfiguration.InterruptionBehavior.restart(blendDuration:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
}

ValueMetadata *type metadata accessor for AnimatedValuePlaybackConfiguration()
{
  return &type metadata for AnimatedValuePlaybackConfiguration;
}

ValueMetadata *type metadata accessor for AnimatedValuePlaybackConfiguration.InterruptionBehavior()
{
  return &type metadata for AnimatedValuePlaybackConfiguration.InterruptionBehavior;
}

uint64_t destroy for AnimatedValuePlaybackConfiguration.Mode(uint64_t a1)
{
  return outlined consume of AnimatedValuePlaybackConfiguration.Mode(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t assignWithCopy for AnimatedValuePlaybackConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AnimatedValuePlaybackConfiguration.Mode(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AnimatedValuePlaybackConfiguration(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of AnimatedValuePlaybackConfiguration.Mode(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatedValuePlaybackConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 6) & 0xFFFFFF83 | (4 * ((*(unsigned __int8 *)(a1 + 16) >> 1) & 0x1F))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AnimatedValuePlaybackConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 125;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 2 * (((-a2 >> 2) & 0x1F) - 32 * a2);
    }
  }
  return result;
}

uint64_t getEnumTag for AnimatedValuePlaybackConfiguration.Mode(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 6;
}

uint64_t destructiveProjectEnumData for AnimatedValuePlaybackConfiguration.Mode(uint64_t result)
{
  *(unsigned char *)(result + 16) &= 0x3Fu;
  return result;
}

uint64_t destructiveInjectEnumTag for AnimatedValuePlaybackConfiguration.Mode(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 1 | (a2 << 6);
  return result;
}

ValueMetadata *type metadata accessor for AnimatedValuePlaybackConfiguration.Mode()
{
  return &type metadata for AnimatedValuePlaybackConfiguration.Mode;
}

uint64_t key path getter for EnvironmentValues.pageIndexDisplayMode : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.pageIndexDisplayMode.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.pageIndexDisplayMode : EnvironmentValues()
{
  return EnvironmentValues.pageIndexDisplayMode.setter();
}

SwiftUI::PageIndexViewStyle __swiftcall PageIndexViewStyle.init(backgroundDisplayMode:)(SwiftUI::PageIndexViewStyle backgroundDisplayMode)
{
  *uint64_t v1 = *(unsigned char *)backgroundDisplayMode.background.style;
  return backgroundDisplayMode;
}

uint64_t PageIndexViewStyle._makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[2];
  swift_retain();
  swift_retain();
  int64_t v8 = _VariadicView_Children.endIndex.getter();
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if ((result & 0x8000000000000000) == 0)
  {
    uint64_t result = _VariadicView_Children.endIndex.getter();
    if (v8 < 0 || result < v8) {
      goto LABEL_18;
    }
    uint64_t v10 = MEMORY[0x1E4FBC860];
    if (!v8)
    {
LABEL_15:
      uint64_t v15 = qword_1883D3A48[v4];
      uint64_t result = swift_getKeyPath();
      *(void *)a2 = v5;
      *(void *)(a2 + 8) = v6;
      *(void *)(a2 + 16) = v7;
      *(void *)(a2 + 24) = v10;
      *(void *)(a2 + 32) = v15;
      *(void *)(a2 + 40) = result;
      *(unsigned char *)(a2 + 48) = 0;
      return result;
    }
    uint64_t v16 = v6;
    uint64_t v17 = v5;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v11 = 0;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      v18[2] = v18[8];
      v18[3] = v18[9];
      void v18[4] = v18[10];
      v18[5] = v18[11];
      v18[0] = v18[6];
      v18[1] = v18[7];
      uint64_t v12 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v12 != -1) {
        swift_once();
      }
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      outlined destroy of _VariadicView_Children.Element((uint64_t)v18);
      uint64_t v10 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
        uint64_t v10 = v20;
      }
      unint64_t v14 = *(void *)(v10 + 16);
      unint64_t v13 = *(void *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
        uint64_t v10 = v20;
      }
      *(void *)(v10 + 16) = v14 + 1;
      memcpy((void *)(v10 + 336 * v14 + 32), __src, 0x150uLL);
      uint64_t result = _VariadicView_Children.endIndex.getter();
      if (v11 >= result) {
        break;
      }
      if (v8 == ++v11)
      {
        uint64_t v5 = v17;
        uint64_t v6 = v16;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void static PageIndexViewStyle.BackgroundDisplayMode.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static PageIndexViewStyle.BackgroundDisplayMode.interactive.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static PageIndexViewStyle.BackgroundDisplayMode.always.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static PageIndexViewStyle.BackgroundDisplayMode.never.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t UIKitPageIndexView.index.getter()
{
  type metadata accessor for NavigationState.StackContent.Key?(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v1);
  return v1;
}

uint64_t UIKitPageIndexView.displayMode.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 44);
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v2, *(unsigned char *)(v2 + 8));
  uint64_t v5 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool?>.Content(v3, v4);
  return v5;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitPageIndexView<A>(uint64_t a1)
{
  return specialized UIKitPageIndexView.makeUIView(context:)(a1);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitPageIndexView<A>@<X0>(void *a1@<X8>)
{
  id result = UIKitPageIndexView.makeCoordinator()();
  *a1 = result;
  return result;
}

uint64_t closure #1 in Coordinator.pageDidChange(_:)(uint64_t a1)
{
  if (a1) {
    a1 = static Animation.default.getter();
  }
  MEMORY[0x1F4188790](a1);
  withAnimation<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in closure #1 in Coordinator.pageDidChange(_:)(uint64_t a1, void *a2)
{
  return swift_release();
}

uint64_t sub_18819AA34@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.pageIndexDisplayMode.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18819AA70()
{
  return EnvironmentValues.pageIndexDisplayMode.setter();
}

uint64_t associated type witness table accessor for IndexViewStyle._Body : View in PageIndexViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PageIndexViewStyle()
{
  return &type metadata for PageIndexViewStyle;
}

ValueMetadata *type metadata accessor for PageIndexViewStyle.BackgroundDisplayMode()
{
  return &type metadata for PageIndexViewStyle.BackgroundDisplayMode;
}

_UNKNOWN **sub_18819AAD8()
{
  return &protocol witness table for UIKitPageIndexView<A>;
}

unsigned char *storeEnumTagSinglePayload for PageIndexViewStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18819ABB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PageViewBackgroundDisplayMode()
{
  return &type metadata for PageViewBackgroundDisplayMode;
}

uint64_t type metadata completion function for UIKitPageIndexView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitPageIndexView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7
    || v8 != 0
    || ((((v7 + ((v6 + 24) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = a2[2];
    a1[1] = a2[1];
    a1[2] = v12;
    uint64_t v13 = ((unint64_t)a1 + v6 + 24) & ~v6;
    uint64_t v14 = ((unint64_t)a2 + v6 + 24) & ~v6;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v15(v13, v14, v4);
    uint64_t v16 = (void *)((v7 + v13) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v17 = (v7 + v14) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = *(void *)v17;
    v17 += 15;
    *uint64_t v16 = v18;
    unint64_t v19 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v20 = *(void *)(v17 & 0xFFFFFFFFFFFFFFF8);
    char v21 = *(unsigned char *)((v17 & 0xFFFFFFFFFFFFFFF8) + 8);
    outlined copy of Environment<Bool>.Content(v20, v21);
    *(void *)unint64_t v19 = v20;
    *(unsigned char *)(v19 + 8) = v21;
  }
  return a1;
}

uint64_t destroy for UIKitPageIndexView(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  unint64_t v7 = (((*(void *)(v5 + 56) + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 8);

  return outlined consume of Environment<Bool?>.Content(v8, v9);
}

void *initializeWithCopy for UIKitPageIndexView(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  uint64_t v5 = *(void *)(a3 + 16);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 24) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 24) & ~v8;
  swift_retain();
  swift_retain();
  v6(v9, v10, v5);
  uint64_t v11 = *(void *)(v7 + 48) + 7;
  uint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  unint64_t v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  LOBYTE(v5) = *(unsigned char *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v15, v5);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v5;
  return a1;
}

void *assignWithCopy for UIKitPageIndexView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 24) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 24) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40) + 7;
  uint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  unint64_t v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = *(void *)v15;
  LOBYTE(v10) = *(unsigned char *)(v15 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v15, v10);
  uint64_t v17 = *(void *)v14;
  uint64_t v18 = *(unsigned __int8 *)(v14 + 8);
  *(void *)unint64_t v14 = v16;
  *(unsigned char *)(v14 + 8) = v10;
  outlined consume of Environment<Bool?>.Content(v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitPageIndexView(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 24) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x18819B224);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 24) & ~v6) + 7) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
          int v16 = *a1;
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v6 + 24] & ~v6);
  }
  unint64_t v17 = *((void *)a1 + 1);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for UIKitPageIndexView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 24) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v19 = (unint64_t)&a1[v9 + 24] & ~v9;
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *((void *)a1 + 1) = 0;
              *((void *)a1 + 2) = 0;
              *(void *)a1 = a2 ^ 0x80000000;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x18819B460);
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for UIKitPageIndexView()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type PageViewBackgroundDisplayMode and conformance PageViewBackgroundDisplayMode()
{
  unint64_t result = lazy protocol witness table cache variable for type PageViewBackgroundDisplayMode and conformance PageViewBackgroundDisplayMode;
  if (!lazy protocol witness table cache variable for type PageViewBackgroundDisplayMode and conformance PageViewBackgroundDisplayMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PageViewBackgroundDisplayMode and conformance PageViewBackgroundDisplayMode);
  }
  return result;
}

void specialized PlatformItem.applyAccessibilityProperties(to:)(void *a1, uint64_t a2)
{
  id v4 = PlatformItem.accessibilityEffectiveText.getter();
  if (v4)
  {
    unsigned int v5 = v4;
    objc_msgSend(a1, sel_setAccessibilityAttributedValue_, v4);
  }
  unint64_t v6 = *(void *)(a2 + 320);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = AGGraphClearUpdate();
    MEMORY[0x1F4188790](v7);
    static Update.ensure<A>(_:)();
    AGGraphSetUpdate();
    swift_bridgeObjectRelease();
    unint64_t v26 = v23;
    uint64_t v27 = v24;
    char v8 = EnvironmentValues.accessibilityEnabled.getter();
    swift_release();
    swift_release();
    if (v8)
    {
      uint64_t v9 = swift_bridgeObjectRetain();
      specialized AccessibilityProperties.subscript.getter(v9, (uint64_t)&v23);
      swift_bridgeObjectRelease();
      if (v24)
      {
        if (v25 >= 2u)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          size_t v10 = (void *)MEMORY[0x18C115780](v23, v24);
          swift_bridgeObjectRelease();
          objc_msgSend(a1, sel_setAccessibilityIdentifier_, v10);
        }
      }
      unint64_t v26 = v6;
      AccessibilityProperties.traits.getter();
      unint64_t v11 = v23;
      unint64_t v12 = (unint64_t)objc_msgSend(a1, sel_accessibilityTraits);
      uint64_t v13 = static AccessibilityTrait.allCases.getter();
      uint64_t v14 = 0;
      uint64_t v15 = *(void *)(v13 + 16);
      if (v15)
      {
        unsigned int v16 = (unsigned __int8 *)(v13 + 32);
        do
        {
          unsigned int v18 = *v16++;
          char v17 = v18;
          int v19 = (1 << v18) & 0x2844;
          BOOL v20 = v18 > 0xD || v19 == 0;
          if (!v20 && ((v11 >> v17) & 1) != 0)
          {
            LOBYTE(v23) = v17;
            uint64_t v21 = AccessibilityTrait.uiTrait.getter();
            if ((v22 & 1) == 0) {
              v14 |= v21;
            }
          }
          --v15;
        }
        while (v15);
      }
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_setAccessibilityTraits_, v14 | v12);
    }
  }
}

uint64_t outlined init with take of (offset: Int, element: PlatformItem)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (offset: Int, element: PlatformItem)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (offset: Int, element: PlatformItem)?()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: PlatformItem)?)
  {
    type metadata accessor for (offset: Int, element: PlatformItem)();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItem)?);
    }
  }
}

id specialized UIKitPageIndexView.makeUIView(context:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1A40]), sel_init);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_pageDidChange_, 4096);
  return v2;
}

uint64_t partial apply for closure #1 in Coordinator.pageDidChange(_:)()
{
  return closure #1 in Coordinator.pageDidChange(_:)(*(unsigned __int8 *)(v0 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in Coordinator.pageDidChange(_:)()
{
  return closure #1 in closure #1 in Coordinator.pageDidChange(_:)(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t AccessibilityFocusState.Binding.propertyID.getter()
{
  type metadata accessor for AccessibilityFocusStoreLocation();
  if (swift_dynamicCastClass()) {
    return FocusStoreLocation.id.getter();
  }

  return type metadata accessor for AccessibilityFocusState.Binding.PrivateType();
}

uint64_t View.accessibilityFocused(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v8[0] = a1;
  v8[1] = a2;
  char v9 = a3;
  char v7 = 1;
  return View.accessibilityFocused<A>(_:equals:)((uint64_t)v8, (uint64_t)&v7, a4, MEMORY[0x1E4FBB390], a5, a6);
}

void AccessibilityFocusState.Binding.wrappedValue.getter()
{
  type metadata accessor for Binding();

  JUMPOUT(0x18C113DA0);
}

uint64_t AccessibilityFocusState.Binding.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return AccessibilityFocusState.Binding.wrappedValue.setter(a1, a2, (void (*)(void))specialized FocusState.Binding.wrappedValue.setter);
}

void (*AccessibilityFocusState.Binding.wrappedValue.modify(void *a1, uint64_t a2))(uint64_t a1, char a2)
{
  unsigned int v5 = malloc(0x28uLL);
  *a1 = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  *unsigned int v5 = v2;
  v5[1] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[2] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[3] = malloc(v8);
  _OWORD v5[4] = malloc(v8);
  uint64_t v9 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v9);
  return FocusState.Binding.wrappedValue.modify;
}

uint64_t AccessibilityFocusState.Binding.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t AccessibilityFocusState.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityFocusState.getValue(forReading:)(1, a1, a2);
}

uint64_t AccessibilityFocusState.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  return AccessibilityFocusState.Binding.wrappedValue.setter(a1, a2, (void (*)(void))specialized AccessibilityFocusState.wrappedValue.setter);
}

uint64_t AccessibilityFocusState.Binding.wrappedValue.setter(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  unsigned int v5 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v5(a1);
}

uint64_t AccessibilityFocusState.getValue(forReading:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)(v3 + *(int *)(a2 + 40)))
  {
LABEL_6:
    uint64_t v7 = v3 + *(int *)(a2 + 36);
    size_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 16);
    return v8(a3, v7);
  }
  type metadata accessor for GraphHost();
  swift_retain();
  if (static GraphHost.isUpdating.getter())
  {
    if (a1) {
      dispatch thunk of AnyLocation.wasRead.setter();
    }
    swift_release();
    goto LABEL_6;
  }
  dispatch thunk of AnyLocation.get()();

  return swift_release();
}

void (*AccessibilityFocusState.wrappedValue.modify(void *a1, uint64_t a2))(void **a1, char a2)
{
  unsigned int v5 = malloc(0x30uLL);
  *a1 = v5;
  *unsigned int v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  _OWORD v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  AccessibilityFocusState.getValue(forReading:)(1, a2, (uint64_t)v9);
  return AccessibilityFocusState.wrappedValue.modify;
}

void AccessibilityFocusState.wrappedValue.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v4 = *v2;
    uint64_t v3 = v2[1];
    (*(void (**)(void, void, void))(v2[3] + 16))(v2[4], v2[5], v2[2]);
    if (*(void *)(v3 + *(int *)(v4 + 40))) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    uint64_t v6 = (void *)v2[4];
    unsigned int v5 = (void *)v2[5];
    uint64_t v7 = v2[2];
    size_t v8 = *(void (**)(void *, uint64_t))(v2[3] + 8);
    v8(v6, v7);
    v8(v5, v7);
  }
  else
  {
    if (*(void *)(v2[1] + *(int *)(*v2 + 40))) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    uint64_t v6 = (void *)v2[4];
    unsigned int v5 = (void *)v2[5];
    (*(void (**)(void *, void))(v2[3] + 8))(v5, v2[2]);
  }
  free(v5);
  free(v6);

  free(v2);
}

uint64_t AccessibilityFocusState.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for Binding();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v19 - v8;
  uint64_t v10 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  unsigned int v16 = (char *)&v19 - v15;
  AccessibilityFocusState.getValue(forReading:)(0, a1, (uint64_t)&v19 - v15);
  if (*(void *)(v2 + *(int *)(a1 + 40)))
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v16, v5);
    swift_retain();
    Binding.init(value:location:)();
  }
  else
  {
    static os_log_type_t.fault.getter();
    char v17 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a2, v9, v6);
}

uint64_t static AccessibilityFocusState._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  return specialized static AccessibilityFocusState._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

uint64_t AccessibilityFocusState.init<>(for:)@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 3) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  unsigned __int16 v3 = *a1;
  uint64_t result = AccessibilityTechnologySet.assertAllSupportFocus()(*a1);
  *(_WORD *)a2 = v3;
  *(unsigned char *)(a2 + 2) = 0;
  return result;
}

uint64_t AccessibilityFocusState.init<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(unsigned char *)(a2 + 2) = 1;
  type metadata accessor for Optional();
  swift_getWitnessTable();
  uint64_t v4 = (int *)type metadata accessor for AccessibilityFocusState();
  *(void *)(a2 + v4[10]) = 0;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);
  v5(a2 + v4[9], 1, 1, a1);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(a2 + v4[11], 1, 1, a1);
}

uint64_t AccessibilityFocusState.init<A>(for:)@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 v5 = *a1;
  type metadata accessor for Optional();
  swift_getWitnessTable();
  uint64_t v6 = (int *)type metadata accessor for AccessibilityFocusState();
  *(void *)(a3 + v6[10]) = 0;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
  v7(a3 + v6[9], 1, 1, a2);
  v7(a3 + v6[11], 1, 1, a2);
  uint64_t result = AccessibilityTechnologySet.assertAllSupportFocus()(v5);
  *(_WORD *)a3 = v5;
  *(unsigned char *)(a3 + 2) = 0;
  return result;
}

uint64_t View.accessibilityFocused<A>(_:equals:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v24 = a5;
  uint64_t v22 = a6;
  uint64_t v23 = a3;
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AccessibilityFocusState.Binding();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v20 - v12;
  uint64_t v14 = type metadata accessor for AccessibilityFocusBindingModifier();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  unsigned int v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, v20, v10, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v21, a4);
  AccessibilityFocusBindingModifier.init(binding:prototype:)((uint64_t)v13, (uint64_t)v9, a4, (uint64_t)v18);
  MEMORY[0x18C113660](v18, v23, v14, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t AccessibilityFocusBindingModifier.init(binding:prototype:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AccessibilityFocusState.Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = a4 + *(int *)(type metadata accessor for AccessibilityFocusBindingModifier() + 36);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);

  return v10(v9, a2, a3);
}

uint64_t AccessibilityFocusBindingModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v36 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  int v35 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[1] = *(void *)(v6 + 24);
  uint64_t v32 = type metadata accessor for AccessibilityFocusState.Binding();
  uint64_t v7 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v9 = (char *)v31 - v8;
  v31[0] = type metadata accessor for AccessibilityFocusStoreListModifier();
  uint64_t v34 = *(void *)(v31[0] - 8);
  MEMORY[0x1F4188790](v31[0]);
  uint64_t v11 = (char *)v31 - v10;
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for _ViewModifier_Content();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  double v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v31 - v19;
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  uint64_t v22 = (uint64_t)v9;
  uint64_t v23 = v9;
  uint64_t v24 = v33;
  v21(v23, v33, v32, v18);
  uint64_t v25 = v24 + *(int *)(a2 + 36);
  uint64_t v26 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v35, v25, v4);
  AccessibilityFocusStoreListModifier.init(binding:prototype:)(v22, v26, v4, (uint64_t)v11);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v28 = v31[0];
  MEMORY[0x18C113660](v11, v12, v31[0], WitnessTable);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v28);
  uint64_t v38 = WitnessTable;
  uint64_t v39 = &protocol witness table for AccessibilityFocusStoreListModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v16);
  uint64_t v29 = *(void (**)(char *, uint64_t))(v14 + 8);
  v29(v16, v13);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v29)(v20, v13);
}

uint64_t specialized AccessibilityFocusState.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + *(int *)(a2 + 40))) {
    return dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityFocusState.Binding()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_18819C9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_6(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for AccessibilityFocusState.Binding, (uint64_t (*)(uint64_t))AccessibilityFocusState.Binding.wrappedValue.getter);
}

uint64_t sub_18819C9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_2(a1, a2, a3, a4, (uint64_t (*)(void, void, void))type metadata accessor for AccessibilityFocusState.Binding, (uint64_t (*)(uint64_t, uint64_t))specialized FocusState.Binding.wrappedValue.setter);
}

uint64_t sub_18819CA04()
{
  return 16;
}

__n128 sub_18819CA10(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_18819CA1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return keypath_getTm_6(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for AccessibilityFocusState, (uint64_t (*)(uint64_t))AccessibilityFocusState.wrappedValue.getter);
}

uint64_t sub_18819CA48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_setTm_2(a1, a2, a3, a4, (uint64_t (*)(void, void, void))type metadata accessor for AccessibilityFocusState, specialized AccessibilityFocusState.wrappedValue.setter);
}

uint64_t keypath_setTm_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void), uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v8 = a5(0, *(void *)(a4 + a3 - 16), *(void *)(a4 + a3 - 8));
  return a6(a1, v8);
}

uint64_t sub_18819CAC8()
{
  return 16;
}

__n128 sub_18819CAD4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *initializeBufferWithCopyOfBuffer for AccessibilityFocusState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unsigned __int16 v3 = (void *)a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = v7 + 7;
  uint64_t v9 = v6 + 8;
  unint64_t v10 = ((v6 + 8 + ((v7 + 7 + ((v6 + 3) & ~v6)) & 0xFFFFFFFFFFFFFFF8)) & ~v6) + v7;
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v10 > 0x18)
  {
    uint64_t v13 = *a2;
    *unsigned __int16 v3 = *a2;
    unsigned __int16 v3 = (void *)(v13 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v14 = ~v6;
    *(_WORD *)a1 = *(_WORD *)a2;
    *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
    uint64_t v15 = (a1 + v6 + 3) & ~v6;
    uint64_t v16 = ((unint64_t)a2 + v6 + 3) & ~v6;
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v17(v15, v16, v4);
    double v18 = (void *)((v8 + v15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (void *)((v8 + v16) & 0xFFFFFFFFFFFFFFF8);
    *double v18 = *v19;
    unint64_t v20 = ((unint64_t)v18 + v9) & v14;
    unint64_t v21 = ((unint64_t)v19 + v9) & v14;
    swift_retain();
    v17(v20, v21, v4);
  }
  return v3;
}

uint64_t assignWithCopy for AccessibilityFocusState(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4 = *a2;
  *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)a1 = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  uint64_t v8 = v6 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v9 + 3 + a1) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 3) & ~v9;
  v7(v10, v11, v5);
  uint64_t v12 = *(void *)(v8 + 40) + 7;
  uint64_t v13 = (void *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (void *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v14;
  swift_retain();
  swift_release();
  v7(((unint64_t)v13 + v9 + 8) & ~v9, ((unint64_t)v14 + v9 + 8) & ~v9, v5);
  return a1;
}

uint64_t initializeWithTake for AccessibilityFocusState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 3 + a1) & ~v8;
  uint64_t v10 = (v8 + 3 + a2) & ~v8;
  v6(v9, v10, v4);
  uint64_t v11 = *(void *)(v7 + 32) + 7;
  uint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  v6(((unint64_t)v12 + v8 + 8) & ~v8, ((unint64_t)v13 + v8 + 8) & ~v8, v4);
  return a1;
}

uint64_t assignWithTake for AccessibilityFocusState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 3 + a1) & ~v8;
  uint64_t v10 = (v8 + 3 + a2) & ~v8;
  v6(v9, v10, v4);
  uint64_t v11 = *(void *)(v7 + 24) + 7;
  uint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  swift_release();
  v6(((unint64_t)v12 + v8 + 8) & ~v8, ((unint64_t)v13 + v8 + 8) & ~v8, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityFocusState(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v9 = v7 + 7;
  int v10 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v11 = ((v6 + ((v9 + ((v6 + 3) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v6) + v7;
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v15 < 2)
    {
LABEL_23:
      uint64_t v17 = ((unint64_t)a1 + v6 + 3) & ~v6;
      if (v5 >= 0x7FFFFFFE) {
        return (*(uint64_t (**)(uint64_t))(v4 + 48))(v17);
      }
      unint64_t v18 = *(void *)((v9 + v17) & 0xFFFFFFFFFFFFFFF8);
      if (v18 >= 0xFFFFFFFF) {
        LODWORD(v18) = -1;
      }
      if ((v18 + 1) >= 2) {
        return v18;
      }
      else {
        return 0;
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_23;
  }
LABEL_15:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v11 | v16) + 1;
}

void storeEnumTagSinglePayload for AccessibilityFocusState(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v11 = ((v9 + ((v10 + 7 + ((v9 + 3) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v9) + v10;
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v11)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x18819D378);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v19 = (unint64_t)&a1[v9 + 3] & ~v9;
        if (v7 < 0x7FFFFFFE)
        {
          unint64_t v21 = (void *)((v10 + 7 + v19) & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *unint64_t v21 = 0;
            *(_DWORD *)unint64_t v21 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *unint64_t v21 = a2;
          }
        }
        else
        {
          unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for AccessibilityFocusState.Binding(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      unsigned int v15 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v6 + 8) & ~v6);
      }
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      return (v16 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for AccessibilityFocusState.Binding(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18819D7ACLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        int v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(((unint64_t)v18 + v9 + 8) & ~v9);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *int v18 = v19;
        }
      }
      return;
  }
}

uint64_t sub_18819D7D4()
{
  return swift_getWitnessTable();
}

uint64_t sub_18819D868()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for AccessibilityFocusBindingModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v10 = ((v7 + v6 + ((v6 + 16) & ~v6)) & ~v6) + v7;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      unsigned int v16 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v6 + 8) & ~v6);
      }
      unint64_t v17 = *v16;
      if (v17 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      return (v17 + 1);
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v10 | v15) + 1;
}

void storeEnumTagSinglePayload for AccessibilityFocusBindingModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v9 + ((v9 + 16) & ~v9)) & ~v9)
      + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18819DCF8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        int v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(((unint64_t)v18 + v9 + 8) & ~v9);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *int v18 = v19;
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityFocusBindingModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_18819DD64()
{
  return swift_getWitnessTable();
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in AccessibilityFocusState<A>.Box()
{
  return &protocol witness table for AccessibilityFocusState<A>;
}

uint64_t type metadata accessor for AccessibilityFocusState.Binding.PrivateType()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _ConditionalContent<>._makeToolbar(content:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v9 = *a1;
  int v19 = *(_DWORD *)(a2 + 56);
  uint64_t v27 = *(void *)(a2 + 40);
  uint64_t v28 = *(void *)(a2 + 64);
  int v20 = *(_DWORD *)(a2 + 72);
  uint64_t v33 = *(void *)(a2 + 48);
  LODWORD(v34) = v19;
  PreferencesInputs.makeIndirectOutputs()();
  uint64_t v10 = v46;
  int v25 = v47;
  LODWORD(v46) = v9;
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _GraphValue();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = *(void *)(a2 + 32);
  _GraphValue.value.getter();
  uint64_t v37 = v11;
  uint64_t v38 = v27;
  uint64_t v39 = v33;
  int v40 = v19;
  uint64_t v41 = v28;
  int v42 = v20;
  uint64_t v24 = v10;
  uint64_t v43 = v10;
  int v44 = v47;
  uint64_t v45 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v12 = a4;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v13 = type metadata accessor for _ConditionalContent<>.ToolbarProvider();
  uint64_t WitnessTable = swift_getWitnessTable();
  _ConditionalContent.Container.init(content:provider:)();
  uint64_t v30 = type metadata accessor for _ConditionalContent.Info();
  uint64_t v33 = a3;
  uint64_t v34 = v12;
  uint64_t v35 = v13;
  uint64_t v36 = WitnessTable;
  uint64_t v31 = type metadata accessor for _ConditionalContent.Container();
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v16 = v50;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v46, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v29, v31, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v17);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v46 = v24;
  LODWORD(v47) = v25;
  LOBYTE(v33) = 0;
  PreferencesOutputs.setIndirectDependency(_:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a7 = v24;
  *(_DWORD *)(a7 + 8) = v25;
  *(void *)(a7 + 16) = v28;
  return result;
}

uint64_t type metadata accessor for _ConditionalContent<>.ToolbarProvider()
{
  return swift_getGenericMetadata();
}

void _ConditionalContent<>.ToolbarProvider.detachOutputs()()
{
}

uint64_t _ConditionalContent<>.ToolbarProvider.attachOutputs(to:)()
{
  return PreferencesOutputs.attachIndirectOutputs(to:)();
}

uint64_t _ConditionalContent<>.ToolbarProvider.makeChildInputs()@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(_DWORD *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 40);
  uint64_t v20 = *(void *)(v1 + 48);
  int v6 = *(_DWORD *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  int v8 = *(_DWORD *)(v1 + 72);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v20;
  *(_DWORD *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 72) = v8;
  swift_beginAccess();
  int v9 = *(_DWORD *)(v4 + 16);
  uint64_t v10 = *(void *)(v4 + 24);
  long long v18 = *(_OWORD *)(v4 + 48);
  long long v19 = *(_OWORD *)(v4 + 32);
  uint64_t v11 = *(void *)(v4 + 64);
  uint64_t v12 = *(void *)(v4 + 72);
  char v13 = *(unsigned char *)(v4 + 80);
  char v14 = *(unsigned char *)(v4 + 81);
  uint64_t v15 = *(void *)(v4 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v16 = swift_allocObject();
  *(_DWORD *)(v16 + 16) = v9;
  *(void *)(v16 + 24) = v10;
  *(_OWORD *)(v16 + 32) = v19;
  *(_OWORD *)(v16 + 48) = v18;
  *(void *)(v16 + 64) = v11;
  *(void *)(v16 + 72) = v12;
  *(unsigned char *)(v16 + 80) = v13;
  *(unsigned char *)(v16 + 81) = v14;
  *(void *)(v16 + 88) = v15;
  swift_retain();
  *(void *)(a1 + 16) = v16;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t _ConditionalContent<>.ToolbarProvider.makeTrueOutputs(child:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  int v8 = *((_DWORD *)a2 + 14);
  uint64_t v9 = a2[8];
  int v10 = *((_DWORD *)a2 + 18);
  uint64_t v11 = *(void *)(a3 + 16);
  _GraphValue.init(_:)();
  uint64_t v13 = v5;
  int v14 = v6;
  uint64_t v15 = v7;
  long long v16 = *(_OWORD *)(a2 + 3);
  long long v17 = *(_OWORD *)(a2 + 5);
  int v18 = v8;
  uint64_t v19 = v9;
  int v20 = v10;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t))(*(void *)(a3 + 32) + 32))(v21, &v13, v11);
}

uint64_t _ConditionalContent<>.ToolbarProvider.makeFalseOutputs(child:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  int v14 = *((_DWORD *)a2 + 18);
  int v15 = *((_DWORD *)a2 + 14);
  uint64_t v10 = a2[8] + 1;
  uint64_t v11 = *(void *)(a3 + 24);
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  _GraphValue.init(_:)();
  uint64_t v16 = v5;
  int v17 = v6;
  uint64_t v18 = v7;
  uint64_t v12 = a2[4];
  uint64_t v19 = a2[3];
  uint64_t v20 = v12;
  uint64_t v21 = v8;
  uint64_t v22 = v9;
  int v23 = v15;
  uint64_t v24 = v10;
  int v25 = v14;
  (*(void (**)(unsigned char *, uint64_t *, uint64_t))(*(void *)(a3 + 40) + 32))(v26, &v16, v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for ConditionalContentProvider.inputs.getter in conformance _ConditionalContent<A, B><>.ToolbarProvider@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  int v6 = *(_DWORD *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  int v8 = *(_DWORD *)(v1 + 72);
  *(void *)a1 = *(void *)v1;
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v5;
  *(_DWORD *)(a1 + 56) = v6;
  *(void *)(a1 + 64) = v7;
  *(_DWORD *)(a1 + 72) = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ConditionalContentProvider.outputs.getter in conformance _ConditionalContent<A, B><>.ToolbarProvider@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 88);
  uint64_t v3 = *(void *)(v1 + 96);
  *(void *)a1 = *(void *)(v1 + 80);
  *(_DWORD *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance <> _ConditionalContent<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ConditionalContent<>._makeToolbar(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t static Optional<A>._makeToolbar(content:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v19 = *((_DWORD *)a2 + 14);
  uint64_t v11 = a2[8];
  int v12 = *((_DWORD *)a2 + 18);
  LODWORD(v26) = *a1;
  type metadata accessor for Optional();
  type metadata accessor for _GraphValue();
  long long v18 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  LODWORD(v26) = _GraphValue.value.getter();
  uint64_t v23 = type metadata accessor for _ConditionalContent();
  uint64_t v24 = type metadata accessor for Optional<A>.Child();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v26, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v22, v24, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v16);
  _GraphValue.init(_:)();
  uint64_t v26 = v8;
  int v27 = v9;
  uint64_t v28 = v10;
  uint64_t v29 = v13;
  uint64_t v30 = v14;
  long long v31 = v18;
  int v32 = v19;
  uint64_t v33 = v11;
  int v34 = v12;
  return static _ConditionalContent<>._makeToolbar(content:inputs:)(&v21, (uint64_t)&v26, a3, (uint64_t)&type metadata for EmptyToolbarContent, a4, (uint64_t)&protocol witness table for EmptyToolbarContent, a5);
}

uint64_t protocol witness for static ToolbarContent._makeToolbar(content:inputs:) in conformance <A> A?@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static Optional<A>._makeToolbar(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8), a5);
}

uint64_t protocol witness for ListCoreDataSource.performDrop(to:) in conformance TableDataSourceAdaptor(uint64_t a1)
{
  v1._rawuint64_t Value = *(void **)(a1 + 24);
  return specialized ListCoreDataSource.performDrop(to:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), v1);
}

uint64_t specialized ListCoreDataSource.performDrop(to:)(unint64_t a1, uint64_t a2, char a3, Swift::OpaquePointer a4)
{
  TableDataSourceAdaptor.contextForItem(index:)(a1, a2, (uint64_t)v15);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (uint64_t)v11);
  if ((void)v12)
  {
    v9[10] = v13;
    v10[0] = v14[0];
    *(_OWORD *)((char *)v10 + 11) = *(_OWORD *)((char *)v14 + 11);
    v9[6] = v11[6];
    v9[7] = v11[7];
    v9[8] = v11[8];
    v9[9] = v12;
    uint64_t v9[2] = v11[2];
    void v9[3] = v11[3];
    v9[4] = v11[4];
    v9[5] = v11[5];
    v9[0] = v11[0];
    v9[1] = v11[1];
    uint64_t v6 = ViewTraitCollection.insertInteraction(for:)(a3 & 1);
    if (v6 != 1)
    {
      uint64_t v7 = v6;
      OnInsertInteraction.insert(_:)(a4);
      outlined consume of OnInsertInteraction?(v7);
    }
    _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  }
  return outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?, (uint64_t (*)(uint64_t))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
}

uint64_t ListCoreDataSource.performDrop(to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = a3;
  uint64_t v47 = a1;
  swift_getAssociatedTypeWitness();
  uint64_t v49 = a2;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v42 = AssociatedTypeWitness;
  uint64_t v43 = swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  uint64_t v6 = type metadata accessor for DropCoordinator.Operation();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  int v9 = (char *)&v39 - v8;
  uint64_t v10 = swift_checkMetadataState();
  uint64_t v51 = v10;
  uint64_t v48 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v39 - v14;
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v39 + *(int *)(v19 + 48) - v18;
  int v44 = (char *)&v39 - v18;
  uint64_t v45 = v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, v6, v17);
  BOOL v46 = swift_getEnumCaseMultiPayload() == 1;
  uint64_t v21 = *(int *)(v10 + 48);
  uint64_t v22 = &v15[v21];
  uint64_t v39 = &v15[v21];
  uint64_t v41 = &v9[v21];
  uint64_t v23 = swift_checkMetadataState();
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32);
  int v25 = v15;
  int v40 = v15;
  v24(v15, v9, v23);
  uint64_t v26 = swift_checkMetadataState();
  int v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
  v27(v22, v41, v26);
  uint64_t v28 = v51;
  uint64_t v29 = &v12[*(int *)(v51 + 48)];
  v24(v12, v25, v23);
  v27(v29, v39, v26);
  uint64_t v30 = v44;
  v24(v44, v12, v23);
  long long v31 = v45;
  v27(v45, v29, v26);
  uint64_t v32 = (uint64_t)v40;
  uint64_t v33 = (uint64_t)&v40[*(int *)(v28 + 48)];
  uint64_t v34 = swift_checkMetadataState();
  uint64_t v35 = *(void *)(v34 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v35 + 16))(v32, v30, v34);
  uint64_t v36 = swift_checkMetadataState();
  uint64_t v37 = *(void *)(v36 - 8);
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v33, v31, v36);
  uint64_t v53 = v49;
  uint64_t v54 = v50;
  BOOL v55 = v46;
  uint64_t v56 = v47;
  ListCoreDataSource.visitRowAt<A>(_:visitor:)(v32, v33, (uint64_t)partial apply for closure #1 in ListCoreDataSource.performDrop(to:), (uint64_t)v52, v49, MEMORY[0x1E4FBC848] + 8, v50, (uint64_t)partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:), (uint64_t)v57, (void (*)(uint64_t, char *, uint64_t, void))_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v30, v51);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v33, v36);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v32, v34);
}

BOOL protocol witness for ListCoreDataSource.canMoveCell(forRowAt:) in conformance TableDataSourceAdaptor(unint64_t *a1, uint64_t *a2)
{
  TableDataSourceAdaptor.contextForItem(index:)(*a1, *a2, (uint64_t)v10);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, (uint64_t)v6);
  if ((void)v7)
  {
    v4[10] = v8;
    v5[0] = v9[0];
    *(_OWORD *)((char *)v5 + 11) = *(_OWORD *)((char *)v9 + 11);
    v4[6] = v6[6];
    v4[7] = v6[7];
    v4[8] = v6[8];
    v4[9] = v7;
    v4[2] = v6[2];
    v4[3] = v6[3];
    v4[4] = v6[4];
    v4[5] = v6[5];
    v4[0] = v6[0];
    v4[1] = v6[1];
    BOOL v2 = specialized closure #1 in ListCoreDataSource.canMoveCell(forRowAt:)((uint64_t)v4);
    _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  }
  else
  {
    BOOL v2 = 0;
  }
  outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?, (uint64_t (*)(uint64_t))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  return v2;
}

uint64_t ListCoreDataSource.canMoveCell(forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v30 = a4;
  uint64_t v29 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v6 = a3;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v27 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v31 = (uint64_t)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v25 - v13;
  uint64_t v16 = (char *)&v25 + *(int *)(v15 + 48) - v13;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v25 = v15;
  uint64_t v26 = v17;
  uint64_t v18 = *(void (**)(void))(v17 + 16);
  ((void (*)(char *, uint64_t, __n128))v18)((char *)&v25 - v13, a1, v12);
  uint64_t v19 = *(void *)(v8 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v19 + 16);
  uint64_t v21 = v8;
  v20(v16, v29);
  uint64_t v22 = v31 + *(int *)(TupleTypeMetadata2 + 48);
  v18();
  ((void (*)(uint64_t, char *, uint64_t))v20)(v22, v16, v8);
  uint64_t v33 = v28;
  uint64_t v34 = v30;
  uint64_t v23 = v31;
  ListCoreDataSource.visitRowAt<A>(_:visitor:)(v31, v22, (uint64_t)partial apply for closure #1 in ListCoreDataSource.canMoveCell(forRowAt:), (uint64_t)v32, v28, MEMORY[0x1E4FBB390], v30, (uint64_t)partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:), (uint64_t)&v35, (void (*)(uint64_t, char *, uint64_t, void))_sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v14, v25);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v21);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v23, AssociatedTypeWitness);
  return v35 & 1;
}

BOOL protocol witness for ListCoreDataSource.canMoveCell(from:to:) in conformance TableDataSourceAdaptor(BOOL *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  return specialized ListCoreDataSource.canMoveCell(from:to:)(*a1, *a2, *a3, *a4);
}

BOOL specialized ListCoreDataSource.canMoveCell(from:to:)(BOOL result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 40);
  if (*(void *)(v5 + 16) <= a3) {
    return 0;
  }
  if (a3 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v7 = v5 + 96 * a3;
    uint64_t v9 = *(void *)(v7 + 112);
    uint64_t v8 = *(void *)(v7 + 120);
    BOOL v10 = __OFADD__(v9, v8);
    uint64_t v11 = v9 + v8;
    if (!v10)
    {
      if (v11 > a4)
      {
        BOOL v14 = result;
        type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (Int, Int), MEMORY[0x1E4FBBE00]);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_18834BB70;
        *(void *)(inited + 32) = v14;
        *(void *)(inited + 40) = a2;
        *(void *)(inited + 48) = a3;
        *(void *)(inited + 56) = a4;
        MEMORY[0x1F4188790](inited);
        v18[2] = v4;
        uint64_t v16 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, long long *))partial apply for specialized closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:), (uint64_t)v18, inited);
        if (v16[2]) {
          BOOL v17 = specialized closure #1 in ListCoreDataSource.canMoveCell(from:to:)((uint64_t)v16);
        }
        else {
          BOOL v17 = 0;
        }
        swift_bridgeObjectRelease();
        swift_setDeallocating();
        return v17;
      }
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t ListCoreDataSource.canMoveCell(from:to:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  uint64_t v73 = a2;
  uint64_t v69 = a1;
  uint64_t v58 = a6;
  uint64_t v7 = *(void *)(a6 + 8);
  swift_getAssociatedTypeWitness();
  uint64_t v63 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v62 = (char *)&v54 - v9;
  uint64_t v10 = swift_checkMetadataState();
  uint64_t v60 = *(void *)(v10 - 8);
  uint64_t v61 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v59 = (char *)&v54 - v11;
  uint64_t v67 = v7;
  uint64_t v76 = a5;
  swift_getAssociatedTypeWitness();
  uint64_t v68 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(void *)(v12 - 8);
  uint64_t v13 = v64;
  MEMORY[0x1F4188790](v12);
  uint64_t v66 = (char *)&v54 - v14;
  uint64_t v15 = swift_checkMetadataState();
  uint64_t v65 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  BOOL v17 = (char *)&v54 - v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v72 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v54 + *(int *)(TupleTypeMetadata2 + 48) - v23;
  uint64_t v25 = *(void (**)(double))(v13 + 16);
  uint64_t v74 = (char *)&v54 - v23;
  v25(v22);
  uint64_t v69 = (char *)v8;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  BOOL v55 = v24;
  uint64_t v27 = v24;
  uint64_t v28 = AssociatedTypeWitness;
  v26(v27, v73, AssociatedTypeWitness);
  uint64_t v73 = TupleTypeMetadata2;
  uint64_t v29 = &v20[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v30 = v70;
  uint64_t v70 = v13 + 16;
  uint64_t v57 = (void (*)(void))v25;
  ((void (*)(char *, uint64_t, uint64_t))v25)(v20, v30, v12);
  uint64_t v31 = v71;
  uint64_t v71 = v8 + 16;
  uint64_t v56 = (void (*)(uint64_t, char *, uint64_t))v26;
  v26(v29, v31, v28);
  uint64_t v32 = v67;
  (*(void (**)(uint64_t, uint64_t))(v67 + 56))(v76, v67);
  uint64_t v33 = v66;
  dispatch thunk of Collection.endIndex.getter();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v17, v15);
  swift_getAssociatedConformanceWitness();
  LOBYTE(v13) = dispatch thunk of static Comparable.< infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v33, v12);
  if ((v13 & 1) == 0) {
    goto LABEL_4;
  }
  uint64_t v34 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 80))(v20, v76, v32);
  uint64_t v36 = v61;
  char v35 = v62;
  dispatch thunk of Collection.endIndex.getter();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v34, v36);
  uint64_t v37 = AssociatedTypeWitness;
  swift_getAssociatedConformanceWitness();
  char v38 = dispatch thunk of static Comparable.< infix(_:_:)();
  (*((void (**)(char *, uint64_t))v69 + 1))(v35, v37);
  if (v38)
  {
    uint64_t v39 = v73;
    type metadata accessor for _ContiguousArrayStorage();
    uint64_t v69 = v29;
    uint64_t v40 = v72;
    uint64_t v67 = *(void *)(v72 + 72);
    swift_allocObject();
    uint64_t v68 = static Array._adoptStorage(_:count:)();
    uint64_t v42 = v41;
    uint64_t v43 = v41 + *(int *)(v39 + 48);
    int v44 = v57;
    ((void (*)(uint64_t, char *, uint64_t))v57)(v41, v74, v12);
    uint64_t v45 = AssociatedTypeWitness;
    BOOL v46 = v56;
    v56(v43, v55, AssociatedTypeWitness);
    uint64_t v47 = v42 + v67 + *(int *)(v39 + 48);
    v44();
    v46(v47, v69, v45);
    uint64_t v48 = v68;
    _finalizeUninitializedArray<A>(_:)();
    MEMORY[0x1F4188790](v48);
    uint64_t v49 = v58;
    *(&v54 - 2) = v76;
    *(&v54 - 1) = v49;
    ListCoreDataSource.visitRowsAt<A>(_:visitor:)((void (*)(uint64_t))partial apply for closure #1 in ListCoreDataSource.canMoveCell(from:to:), MEMORY[0x1E4FBB390], (uint64_t)v77);
    swift_bridgeObjectRelease();
    uint64_t v50 = *(void (**)(char *, uint64_t))(v40 + 8);
    v50(v20, v39);
    v50(v74, v39);
    return v77[0] & 1;
  }
  else
  {
LABEL_4:
    uint64_t v52 = v73;
    uint64_t v53 = *(void (**)(char *, uint64_t))(v72 + 8);
    v53(v20, v73);
    v53(v74, v52);
    return 0;
  }
}

uint64_t protocol witness for ListCoreDataSource.moveCell(fromRowAt:to:) in conformance TableDataSourceAdaptor(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  return specialized ListCoreDataSource.moveCell(fromRowAt:to:)(*a1, *a2, *a3, *a4);
}

uint64_t specialized ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  outlined init with copy of TableDataSourceAdaptor(v5, (uint64_t)v14);
  type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (Int, Int), MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB70;
  *(void *)(inited + 32) = a1;
  *(void *)(inited + 40) = a2;
  *(void *)(inited + 48) = a3;
  *(void *)(inited + 56) = a4;
  v13[2] = v14;
  uint64_t v11 = specialized Sequence.compactMap<A>(_:)((void (*)(_OWORD *__return_ptr, long long *))partial apply for specialized closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:), (uint64_t)v13, inited);
  if (v11[2]) {
    specialized closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)((uint64_t)v11, a1, a2, a3, a4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return outlined destroy of TableDataSourceAdaptor((uint64_t)v14);
}

uint64_t ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1, char *a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v48 = a6;
  uint64_t v45 = a3;
  BOOL v46 = a4;
  uint64_t v51 = a2;
  uint64_t v57 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v56 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  uint64_t v55 = a5;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v43 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v54 = v43;
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  int v44 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v53 = (char *)&v42 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v42 - v15;
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v50 = (char *)&v42 - v19;
  uint64_t v52 = (char *)&v42 + *(int *)(TupleTypeMetadata2 + 48) - v19;
  uint64_t v20 = v52;
  uint64_t v21 = AssociatedTypeWitness;
  double v22 = *(void (**)(double))(*(void *)(AssociatedTypeWitness - 8) + 16);
  v22(v18);
  uint64_t v42 = (void (*)(void))v22;
  uint64_t v23 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  v23(v20, v51, v9);
  uint64_t v24 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v49 = v16;
  uint64_t v25 = &v16[v24];
  uint64_t v51 = &v16[v24];
  ((void (*)(char *, uint64_t, uint64_t))v22)(v16, v45, AssociatedTypeWitness);
  v23(v25, v46, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v56, v47, v55);
  type metadata accessor for _ContiguousArrayStorage();
  BOOL v46 = *(char **)(v43 + 72);
  swift_allocObject();
  uint64_t v47 = static Array._adoptStorage(_:count:)();
  uint64_t v27 = v26;
  uint64_t v28 = (char *)(v26 + *(int *)(TupleTypeMetadata2 + 48));
  uint64_t v29 = v42;
  ((void (*)(uint64_t, char *, uint64_t))v42)(v26, v50, v21);
  v23(v28, v52, v9);
  uint64_t v30 = (uint64_t)&v46[v27 + *(int *)(TupleTypeMetadata2 + 48)];
  v29();
  v23((char *)v30, v51, v9);
  uint64_t v31 = v47;
  _finalizeUninitializedArray<A>(_:)();
  uint64_t v47 = v31;
  uint64_t v32 = &v53[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v33 = v21;
  v29();
  v23(v32, v52, v9);
  uint64_t v34 = v44;
  char v35 = &v44[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v36 = v49;
  ((void (*)(char *, char *, uint64_t))v29)(v44, v49, v33);
  v23(v35, v51, v9);
  uint64_t v37 = v55;
  char v38 = v56;
  uint64_t v58 = v55;
  uint64_t v59 = v48;
  uint64_t v39 = v53;
  uint64_t v60 = v53;
  uint64_t v61 = v34;
  ListCoreDataSource.visitRowsAt<A>(_:visitor:)((void (*)(uint64_t))partial apply for closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:), MEMORY[0x1E4FBC848] + 8, (uint64_t)v62);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v37);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v54 + 8);
  v40(v36, TupleTypeMetadata2);
  v40(v50, TupleTypeMetadata2);
  v40(v39, TupleTypeMetadata2);
  return ((uint64_t (*)(char *, uint64_t))v40)(v34, TupleTypeMetadata2);
}

uint64_t protocol witness for ListCoreDataSource.deleteCell(forRow:) in conformance TableDataSourceAdaptor(unint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = *a1;
  uint64_t v4 = *a2;
  outlined init with copy of TableDataSourceAdaptor(v2, (uint64_t)v13);
  TableDataSourceAdaptor.contextForItem(index:)(v3, v4, (uint64_t)v12);
  outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (uint64_t)v8);
  if ((void)v9)
  {
    v6[10] = v10;
    v7[0] = v11[0];
    *(_OWORD *)((char *)v7 + 11) = *(_OWORD *)((char *)v11 + 11);
    void v6[6] = v8[6];
    v6[7] = v8[7];
    v6[8] = v8[8];
    _OWORD v6[9] = v9;
    _OWORD v6[2] = v8[2];
    _OWORD v6[3] = v8[3];
    v6[4] = v8[4];
    v6[5] = v8[5];
    v6[0] = v8[0];
    v6[1] = v8[1];
    specialized closure #1 in ListCoreDataSource.deleteCell(forRow:)((uint64_t)v6, v3, v4);
    _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  }
  outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?, (uint64_t (*)(uint64_t))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  return outlined destroy of TableDataSourceAdaptor((uint64_t)v13);
}

uint64_t ListCoreDataSource.deleteCell(forRow:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = a4;
  uint64_t v46 = a2;
  uint64_t v52 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v51 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v49 = a3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v45 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v42 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v39 - v12;
  v15.n128_f64[0] = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v19 = v18;
  uint64_t v20 = (char *)&v39 + *(int *)(v18 + 48) - v16;
  uint64_t v50 = AssociatedTypeWitness;
  uint64_t v44 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v44 + 16);
  v21((char *)&v39 - v16, a1, AssociatedTypeWitness, v15);
  uint64_t v43 = *(void *)(v8 - 8);
  double v22 = *(void (**)(char *, uint64_t, uint64_t))(v43 + 16);
  uint64_t v23 = v20;
  v22(v20, v46, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v47, v49);
  uint64_t v24 = v19;
  uint64_t v40 = v13;
  uint64_t v41 = v19;
  uint64_t v25 = (uint64_t)&v13[*(int *)(v19 + 48)];
  uint64_t v47 = v25;
  uint64_t v26 = v13;
  uint64_t v27 = v50;
  ((void (*)(char *, char *, uint64_t))v21)(v26, v17, v50);
  v22((char *)v25, (uint64_t)v23, v8);
  uint64_t v28 = *(int *)(v24 + 48);
  uint64_t v29 = v42;
  uint64_t v30 = &v42[v28];
  ((void (*)(char *, char *, uint64_t))v21)(v42, v17, v27);
  v22(v30, (uint64_t)v23, v8);
  uint64_t v31 = v49;
  uint64_t v54 = v49;
  uint64_t v55 = v48;
  uint64_t v32 = v29;
  uint64_t v56 = v29;
  uint64_t v33 = (uint64_t)v40;
  uint64_t v34 = v47;
  char v35 = v51;
  ListCoreDataSource.visitRowAt<A>(_:visitor:)((uint64_t)v40, v47, (uint64_t)partial apply for closure #1 in ListCoreDataSource.deleteCell(forRow:), (uint64_t)v53, v49, MEMORY[0x1E4FBC848] + 8, v48, (uint64_t)partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:), (uint64_t)v57, (void (*)(uint64_t, char *, uint64_t, void))_sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v35, v31);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v37 = v41;
  v36(v17, v41);
  v36(v32, v37);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v34, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v33, v50);
}

uint64_t protocol witness for ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:) in conformance TableDataSourceAdaptor@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  return specialized ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)(*a1, *a2, a3, a4);
}

void *specialized Sequence.compactMap<A>(_:)(void (*a1)(_OWORD *__return_ptr, long long *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  uint64_t v8 = (void *)MEMORY[0x1E4FBC860];
  do
  {
    long long v29 = *(_OWORD *)(a3 + 16 * v7 + 32);
    a1(v25, &v29);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    if ((void)v26)
    {
      long long v23 = v27;
      *(_OWORD *)uint64_t v24 = v28[0];
      *(_OWORD *)&v24[11] = *(_OWORD *)((char *)v28 + 11);
      long long v19 = v25[6];
      long long v20 = v25[7];
      long long v21 = v25[8];
      long long v22 = v26;
      long long v15 = v25[2];
      long long v16 = v25[3];
      long long v17 = v25[4];
      long long v18 = v25[5];
      long long v13 = v25[0];
      long long v14 = v25[1];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      }
      unint64_t v10 = v8[2];
      unint64_t v9 = v8[3];
      if (v10 >= v9 >> 1) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v9 > 1), v10 + 1, 1, v8);
      }
      void v8[2] = v10 + 1;
      uint64_t v11 = &v8[26 * v10];
      _OWORD v11[2] = v13;
      void v11[5] = v16;
      v11[6] = v17;
      v11[3] = v14;
      v11[4] = v15;
      _OWORD v11[9] = v20;
      v11[10] = v21;
      v11[7] = v18;
      v11[8] = v19;
      *(_OWORD *)((char *)v11 + 219) = *(_OWORD *)&v24[11];
      v11[12] = v23;
      v11[13] = *(_OWORD *)v24;
      v11[11] = v22;
    }
    else
    {
      outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v25, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?, (uint64_t (*)(uint64_t))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
    }
    ++v7;
  }
  while (v4 != v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t ListCoreDataSource.canMoveCell(fromRowAt:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a4;
  uint64_t v29 = a1;
  uint64_t v6 = *(void *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v31 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v26 - v11;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(v13 - 8);
  uint64_t v28 = v13;
  MEMORY[0x1F4188790](v13);
  long long v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  long long v18 = (char *)&v26 - v17;
  type metadata accessor for IndexPath();
  _s10Foundation9IndexPathVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v34 == v33)
  {
    char v19 = 0;
  }
  else
  {
    ListDiffable.rowIndex(at:)((uint64_t)v18, (uint64_t)v12, v29, a3, v6);
    ListDiffable.rowIndex(at:)((uint64_t)v15, (uint64_t)v9, a2, a3, v6);
    char v19 = (*(uint64_t (**)(char *, char *, char *, char *, uint64_t))(v32 + 176))(v18, v12, v15, v9, a3);
    uint64_t v20 = v31;
    long long v21 = *(void (**)(char *, uint64_t))(v30 + 8);
    v21(v9, v31);
    long long v22 = *(void (**)(char *, uint64_t))(v27 + 8);
    long long v23 = v15;
    uint64_t v24 = v28;
    v22(v23, v28);
    v21(v12, v20);
    v22(v18, v24);
  }
  return v19 & 1;
}

uint64_t ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = a4;
  uint64_t v33 = a1;
  uint64_t v6 = *(void *)(a4 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v35 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v32 = (uint64_t)&v31 - v11;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v31 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v31 - v16;
  uint64_t v18 = type metadata accessor for IndexPath();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  long long v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v23 = *(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16);
  uint64_t v36 = a2;
  v23(v22, a2, v18, v20);
  _s10Foundation9IndexPathVACSlAAWlTm_0(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
  dispatch thunk of Collection.startIndex.getter();
  dispatch thunk of Collection.endIndex.getter();
  if (v39 == v38)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    uint64_t v24 = v32;
    ListDiffable.rowIndex(at:)((uint64_t)v17, v32, v33, a3, v6);
    ListDiffable.rowIndex(at:)((uint64_t)v14, (uint64_t)v9, v36, a3, v6);
    (*(void (**)(char *, uint64_t, char *, char *, uint64_t))(v37 + 184))(v17, v24, v14, v9, a3);
    uint64_t v25 = v35;
    uint64_t v26 = *(void (**)(char *, uint64_t))(v34 + 8);
    v26(v9, v35);
    uint64_t v27 = *(void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v28 = v14;
    uint64_t v29 = v31;
    v27(v28, v31);
    v26((char *)v24, v25);
    return ((uint64_t (*)(char *, uint64_t))v27)(v17, v29);
  }
  return result;
}

uint64_t ListCoreDataSource.configureHeader(_:transaction:forSectionAtOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v16 - v13;
  ListDiffable.sectionIndex(atOffset:)(a3, a4, v10);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(a5 + 88))(a1, a2, v14, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t ListCoreDataSource.configureFooter(_:transaction:forSectionAtOffset:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(a5 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v16 - v13;
  ListDiffable.sectionIndex(atOffset:)(a3, a4, v10);
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(a5 + 96))(a1, a2, v14, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t ListCoreDataSource.deleteCell(forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = a1;
  uint64_t v5 = *(void *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v9 = (char *)&v15 - v8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v15 - v12;
  ListDiffable.rowIndex(at:)((uint64_t)&v15 - v12, (uint64_t)v9, v16, a2, v5);
  (*(void (**)(char *, char *, uint64_t, uint64_t))(a3 + 192))(v13, v9, a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t ListCoreDataSource.canMoveCell(forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v16 = a1;
  uint64_t v5 = *(void *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v9 = (char *)&v15 - v8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v15 - v12;
  ListDiffable.rowIndex(at:)((uint64_t)&v15 - v12, (uint64_t)v9, v16, a2, v5);
  LOBYTE(v3) = (*(uint64_t (**)(char *, char *, uint64_t, uint64_t))(v3 + 168))(v13, v9, a2, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return v3 & 1;
}

uint64_t ListCoreDataSource.visitRowsAt<A>(_:visitor:)@<X0>(void (*a1)(uint64_t)@<X1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  type metadata accessor for Array();
  type metadata accessor for _RowVisitationContext();
  swift_getWitnessTable();
  uint64_t v5 = Sequence.compactMap<A>(_:)();
  type metadata accessor for Array();
  swift_getWitnessTable();
  if (Collection.isEmpty.getter())
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    a1(v5);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 0, 1, a2);
  }
}

uint64_t closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v21[0] = a5;
  v21[1] = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v9 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v11.n128_f64[0] = MEMORY[0x1F4188790](TupleTypeMetadata2 - 8);
  uint64_t v13 = (char *)v21 - v12;
  uint64_t v15 = *(int *)(v14 + 56);
  uint64_t v16 = &v13[v15];
  uint64_t v17 = a1 + v15;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v13, a1, AssociatedTypeWitness, v11);
  uint64_t v19 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v16, v17, v9);
  (*(void (**)(char *, char *, uint64_t, uint64_t))(a4 + 208))(v13, v16, a3, a4);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v13, AssociatedTypeWitness);
}

uint64_t closure #1 in ListCoreDataSource.performDrop(to:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, BOOL *a3@<X8>)
{
  char v5 = a1 & 1;
  type metadata accessor for _RowVisitationContext();
  uint64_t result = ViewTraitCollection.insertInteraction(for:)(v5);
  uint64_t v7 = result;
  if (result != 1)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    swift_getAssociatedTypeWitness();
    swift_getTupleTypeMetadata2();
    v8._rawuint64_t Value = *(void **)(a2 + *(int *)(type metadata accessor for DropCoordinator() + 28));
    OnInsertInteraction.insert(_:)(v8);
    uint64_t result = outlined consume of OnInsertInteraction?(v7);
  }
  *a3 = v7 == 1;
  return result;
}

BOOL specialized closure #1 in ListCoreDataSource.canMoveCell(forRowAt:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MoveInteraction();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(a1 + 152);
  uint64_t v16 = v5;
  uint64_t v14 = 0;
  char v15 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v18) {
    return 0;
  }
  uint64_t v6 = v17;
  uint64_t v16 = v5;
  uint64_t v14 = 0;
  char v15 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (v18) {
    return 0;
  }
  uint64_t v13 = v17;
  uint64_t v17 = v5;
  LOBYTE(v16) = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  char v8 = v14;
  uint64_t v17 = v5;
  uint64_t v9 = ViewTraitCollection.onMove.getter();
  uint64_t v11 = v10;
  type metadata accessor for IndexSet();
  _s10Foundation9IndexPathVACSlAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
  dispatch thunk of SetAlgebra.init()();
  uint64_t v14 = v6;
  dispatch thunk of SetAlgebra.insert(_:)();
  *(void *)uint64_t v4 = v9;
  *((void *)v4 + 1) = v11;
  v4[16] = v8;
  *(void *)&v4[*(int *)(v2 + 28)] = v13;
  BOOL v7 = v9 != 0;
  _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  return v7;
}

BOOL specialized closure #1 in ListCoreDataSource.canMoveCell(from:to:)(uint64_t a1)
{
  type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?(0, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  BOOL v7 = (char *)&v40 - v6;
  uint64_t v8 = type metadata accessor for MoveInteraction();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v40 - v15;
  if (*(void *)(a1 + 16) != 2) {
    return 0;
  }
  uint64_t v46 = v14;
  uint64_t v47 = v9;
  outlined init with copy of MoveInteraction(a1 + 32, (uint64_t)v53, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  uint64_t v17 = v54;
  uint64_t v50 = v54;
  uint64_t v48 = 0;
  char v49 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v45 = v11;
  if ((v52 & 1) != 0
    || (uint64_t v44 = v51, v50 = v17, v48 = 0, v49 = 1, ViewTraitCollection.value<A>(for:defaultValue:)(), (v52 & 1) != 0))
  {
    char v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v18(v7, 1, 1, v8);
  }
  else
  {
    uint64_t v43 = v51;
    uint64_t v51 = v17;
    LOBYTE(v50) = 0;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    LODWORD(v42) = v48;
    uint64_t v51 = v17;
    uint64_t v41 = ViewTraitCollection.onMove.getter();
    uint64_t v40 = v20;
    type metadata accessor for IndexSet();
    _s10Foundation9IndexPathVACSlAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
    dispatch thunk of SetAlgebra.init()();
    uint64_t v48 = v44;
    dispatch thunk of SetAlgebra.insert(_:)();
    uint64_t v21 = v40;
    *(void *)BOOL v7 = v41;
    *((void *)v7 + 1) = v21;
    v7[16] = (char)v42;
    *(void *)&v7[*(int *)(v8 + 28)] = v43;
    char v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v18(v7, 0, 1, v8);
  }
  _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)v53, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  long long v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v23 = 1;
  if (v22(v7, 1, v8) == 1)
  {
    uint64_t v24 = (uint64_t)v7;
LABEL_14:
    outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>?(v24, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction);
    return 0;
  }
  outlined init with take of DeleteInteraction((uint64_t)v7, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  outlined init with copy of MoveInteraction(a1 + 240, (uint64_t)v53, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  uint64_t v25 = v54;
  uint64_t v50 = v54;
  uint64_t v48 = 0;
  char v49 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v52 & 1) == 0)
  {
    uint64_t v26 = v51;
    uint64_t v50 = v25;
    uint64_t v48 = 0;
    char v49 = 1;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    if ((v52 & 1) == 0)
    {
      uint64_t v44 = v51;
      uint64_t v51 = v25;
      LOBYTE(v50) = 0;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      LODWORD(v43) = v48;
      uint64_t v51 = v25;
      uint64_t v42 = ViewTraitCollection.onMove.getter();
      uint64_t v41 = v27;
      type metadata accessor for IndexSet();
      uint64_t v40 = v26;
      _s10Foundation9IndexPathVACSlAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
      dispatch thunk of SetAlgebra.init()();
      uint64_t v48 = v40;
      dispatch thunk of SetAlgebra.insert(_:)();
      uint64_t v23 = 0;
      uint64_t v28 = v41;
      *(void *)uint64_t v4 = v42;
      *((void *)v4 + 1) = v28;
      v4[16] = v43;
      *(void *)&v4[*(int *)(v8 + 28)] = v44;
    }
  }
  v18(v4, v23, 1, v8);
  _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)v53, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  if (v22(v4, 1, v8) == 1)
  {
    _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
    uint64_t v24 = (uint64_t)v4;
    goto LABEL_14;
  }
  uint64_t v29 = (uint64_t)v4;
  uint64_t v30 = v46;
  outlined init with take of DeleteInteraction(v29, v46, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  uint64_t v31 = *(int *)(v8 + 28);
  uint64_t v32 = *(void *)(v30 + v31);
  uint64_t v33 = *(void *)&v16[v31];
  uint64_t v34 = v45;
  outlined init with copy of MoveInteraction(v30, (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  if (v32 == v33)
  {
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    BOOL v19 = *v34 != 0;
    if (*v34)
    {
      uint64_t v37 = swift_allocObject();
      *(void *)(v37 + 16) = v35;
      *(void *)(v37 + 24) = v36;
      uint64_t v38 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ();
    }
    else
    {
      uint64_t v38 = 0;
    }
    outlined copy of AppIntentExecutor?(v35);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v38);
    uint64_t v30 = v46;
  }
  else
  {
    BOOL v19 = 0;
  }
  _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  _s7SwiftUI15MoveInteractionVWOhTm_0(v30, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  return v19;
}

uint64_t closure #1 in ListCoreDataSource.canMoveCell(from:to:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v51 = a2;
  type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?(0, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v44 - v7;
  uint64_t v9 = type metadata accessor for _RowVisitationContext();
  uint64_t v50 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v44 - v13;
  uint64_t v15 = type metadata accessor for MoveInteraction();
  uint64_t v48 = *(void *)(v15 - 8);
  uint64_t v49 = v15;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (uint64_t *)((char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v44 - v19;
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v44 - v23;
  uint64_t result = MEMORY[0x18C115C50](a1, v9, v22);
  if (result != 2) {
    goto LABEL_7;
  }
  uint64_t v45 = v17;
  uint64_t v46 = v11;
  uint64_t v44 = v20;
  uint64_t v47 = v24;
  Array.subscript.getter();
  _RowVisitationContext.moveInteraction.getter((uint64_t)v8);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v50 + 8);
  v26(v14, v9);
  uint64_t v27 = v49;
  uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  if (v28(v8, 1, v49) == 1)
  {
    uint64_t v29 = (uint64_t)v8;
LABEL_6:
    uint64_t result = outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>?(v29, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction);
LABEL_7:
    BOOL v33 = 0;
    uint64_t v34 = v51;
    goto LABEL_8;
  }
  uint64_t v30 = (uint64_t)v8;
  uint64_t v31 = (uint64_t)v47;
  outlined init with take of DeleteInteraction(v30, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  uint64_t v32 = v46;
  Array.subscript.getter();
  _RowVisitationContext.moveInteraction.getter((uint64_t)v5);
  v26(v32, v9);
  if (v28(v5, 1, v27) == 1)
  {
    _s7SwiftUI15MoveInteractionVWOhTm_0(v31, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
    uint64_t v29 = (uint64_t)v5;
    goto LABEL_6;
  }
  uint64_t v35 = (uint64_t)v44;
  outlined init with take of DeleteInteraction((uint64_t)v5, (uint64_t)v44, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  uint64_t v36 = *(int *)(v27 + 28);
  uint64_t v37 = *(void *)(v35 + v36);
  uint64_t v38 = *(void *)(v31 + v36);
  uint64_t v39 = v45;
  outlined init with copy of MoveInteraction(v35, (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  if (v37 == v38)
  {
    uint64_t v40 = *v39;
    uint64_t v41 = v39[1];
    BOOL v33 = *v39 != 0;
    if (*v39)
    {
      uint64_t v42 = swift_allocObject();
      *(void *)(v42 + 16) = v40;
      *(void *)(v42 + 24) = v41;
      uint64_t v43 = thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ()partial apply;
    }
    else
    {
      uint64_t v43 = 0;
    }
    uint64_t v34 = v51;
    outlined copy of AppIntentExecutor?(v40);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v43);
  }
  else
  {
    BOOL v33 = 0;
    uint64_t v34 = v51;
  }
  _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  _s7SwiftUI15MoveInteractionVWOhTm_0(v35, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  uint64_t result = _s7SwiftUI15MoveInteractionVWOhTm_0(v31, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
LABEL_8:
  *uint64_t v34 = v33;
  return result;
}

void specialized closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?(0, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v27 - v11;
  uint64_t v13 = type metadata accessor for MoveInteraction();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = *(void *)(a1 + 16);
  if (!v17)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v36 = v16;
  outlined init with copy of MoveInteraction(a1 + 32, (uint64_t)&v42, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  Swift::Int v18 = v44;
  Swift::Int v39 = v44;
  Swift::Int v37 = 0;
  uint64_t v19 = 1;
  char v38 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v41 & 1) == 0)
  {
    Swift::Int v33 = v40;
    Swift::Int v39 = v18;
    Swift::Int v37 = 0;
    char v38 = 1;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    if ((v41 & 1) == 0)
    {
      Swift::Int v31 = v40;
      Swift::Int v40 = v18;
      LOBYTE(v39) = 0;
      ViewTraitCollection.value<A>(for:defaultValue:)();
      int v30 = v37;
      Swift::Int v40 = v18;
      uint64_t v29 = ViewTraitCollection.onMove.getter();
      uint64_t v28 = v20;
      type metadata accessor for IndexSet();
      _s10Foundation9IndexPathVACSlAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type IndexSet and conformance IndexSet, MEMORY[0x1E4F27D00]);
      uint64_t v32 = a4;
      dispatch thunk of SetAlgebra.init()();
      Swift::Int v37 = v33;
      a4 = v32;
      dispatch thunk of SetAlgebra.insert(_:)();
      uint64_t v19 = 0;
      uint64_t v21 = v28;
      *(void *)uint64_t v12 = v29;
      *((void *)v12 + 1) = v21;
      v12[16] = v30;
      *(void *)&v12[*(int *)(v13 + 28)] = v31;
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, v19, 1, v13);
  _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)&v42, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    uint64_t v22 = outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v12, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction);
    uint64_t v42 = v34;
    uint64_t v43 = v35;
    MEMORY[0x1F4188790](v22);
    *(&v27 - 2) = (uint64_t)&v42;
    static Log.internalError(_:)();
    return;
  }
  uint64_t v23 = (uint64_t)v36;
  outlined init with take of DeleteInteraction((uint64_t)v12, (uint64_t)v36, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
  if (v17 < 2) {
    goto LABEL_14;
  }
  outlined init with copy of MoveInteraction(a1 + 240, (uint64_t)&v42, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  Swift::Int v39 = v44;
  Swift::Int v37 = 0;
  char v38 = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  Swift::Int v24 = v40;
  char v25 = v41;
  uint64_t v26 = _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)&v42, (uint64_t (*)(void))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>);
  if (v25)
  {
    uint64_t v42 = a4;
    uint64_t v43 = a5;
    MEMORY[0x1F4188790](v26);
    *(&v27 - 2) = (uint64_t)&v42;
    static Log.internalError(_:)();
  }
  else
  {
    MoveInteraction.move(to:)(v24);
  }
  _s7SwiftUI15MoveInteractionVWOhTm_0(v23, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
}

uint64_t closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = a3;
  uint64_t v47 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v48 = swift_getAssociatedTypeWitness();
  uint64_t v49 = AssociatedTypeWitness;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v50 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v10 = (char *)&v43 - v9;
  type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?(0, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v43 - v12;
  uint64_t v51 = a5;
  uint64_t v14 = type metadata accessor for _RowVisitationContext();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v43 - v19;
  uint64_t v21 = type metadata accessor for MoveInteraction();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v45 = (uint64_t)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = a1;
  Array.subscript.getter();
  _RowVisitationContext.moveInteraction.getter((uint64_t)v13);
  Swift::Int v24 = *(void (**)(char *, uint64_t))(v15 + 8);
  v24(v20, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v13, 1, v21) == 1)
  {
    outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v13, &lazy cache variable for type metadata for MoveInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for MoveInteraction);
    uint64_t v25 = TupleTypeMetadata2;
    uint64_t v26 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v27 = &v10[v26];
    uint64_t v28 = v47 + v26;
    (*(void (**)(char *))(*(void *)(v49 - 8) + 16))(v10);
    uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v48 - 8) + 16))(v27, v28);
    MEMORY[0x1F4188790](v29);
    uint64_t v30 = v51;
    *(&v43 - 4) = a4;
    *(&v43 - 3) = v30;
    *(&v43 - 2) = (uint64_t)v10;
    static Log.internalError(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v10, v25);
  }
  else
  {
    uint64_t v47 = a4;
    uint64_t v32 = v10;
    uint64_t v33 = TupleTypeMetadata2;
    uint64_t v34 = v45;
    outlined init with take of DeleteInteraction((uint64_t)v13, v45, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
    Array.subscript.getter();
    Swift::Int v35 = _RowVisitationContext.dynamicContentOffset.getter();
    char v37 = v36;
    v24(v17, v14);
    if (v37)
    {
      uint64_t v38 = *(int *)(v33 + 48);
      Swift::Int v39 = &v32[v38];
      uint64_t v40 = v44 + v38;
      (*(void (**)(char *))(*(void *)(v49 - 8) + 16))(v32);
      uint64_t v41 = (*(uint64_t (**)(char *, uint64_t))(*(void *)(v48 - 8) + 16))(v39, v40);
      MEMORY[0x1F4188790](v41);
      uint64_t v42 = v51;
      *(&v43 - 4) = v47;
      *(&v43 - 3) = v42;
      *(&v43 - 2) = (uint64_t)v32;
      static Log.internalError(_:)();
      _s7SwiftUI15MoveInteractionVWOhTm_0(v34, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
      return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v32, v33);
    }
    else
    {
      MoveInteraction.move(to:)(v35);
      return _s7SwiftUI15MoveInteractionVWOhTm_0(v34, (uint64_t (*)(void))type metadata accessor for MoveInteraction);
    }
  }
}

uint64_t implicit closure #1 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v7 = (char *)v14 - v6;
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(72);
  v8._object = (void *)0x80000001883418A0;
  v8._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v8);
  uint64_t v9 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = &v7[v9];
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v7, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v11, v10, v3);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, TupleTypeMetadata2);
  v12._countAndFlagsBits = 0xD000000000000029;
  v12._object = (void *)0x80000001883418C0;
  String.append(_:)(v12);
  return v14[0];
}

uint64_t implicit closure #2 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v7 = (char *)v14 - v6;
  v14[0] = 0;
  v14[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(42);
  v8._object = (void *)0x8000000188341870;
  v8._countAndFlagsBits = 0xD000000000000028;
  String.append(_:)(v8);
  uint64_t v9 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = &v7[v9];
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v7, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v11, v10, v3);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, TupleTypeMetadata2);
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  String.append(_:)(v12);
  return v14[0];
}

uint64_t specialized closure #1 in ListCoreDataSource.deleteCell(forRow:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?(0, &lazy cache variable for type metadata for DeleteInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for DeleteInteraction, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  Swift::String v8 = (void *)((char *)v15 - v7);
  uint64_t v9 = type metadata accessor for DeleteInteraction();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  Swift::String v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = *(void *)(a1 + 152);
  ViewTraitCollection.deleteInteraction.getter(v8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    uint64_t v13 = outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v8, &lazy cache variable for type metadata for DeleteInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for DeleteInteraction);
    v15[0] = a2;
    v15[1] = a3;
    MEMORY[0x1F4188790](v13);
    v15[-2] = v15;
    static Log.internalError(_:)();
  }
  else
  {
    outlined init with take of DeleteInteraction((uint64_t)v8, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for DeleteInteraction);
    DeleteInteraction.delete()();
    _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for DeleteInteraction);
  }
  return 0;
}

uint64_t closure #1 in ListCoreDataSource.deleteCell(forRow:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X8>)
{
  uint64_t v27 = a2;
  uint64_t v29 = a1;
  uint64_t v30 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v25 - v10;
  type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?(0, &lazy cache variable for type metadata for DeleteInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for DeleteInteraction, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (uint64_t *)((char *)&v25 - v13);
  uint64_t v15 = type metadata accessor for DeleteInteraction();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = a4;
  type metadata accessor for _RowVisitationContext();
  _RowVisitationContext.deleteInteraction.getter(v14);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>?((uint64_t)v14, &lazy cache variable for type metadata for DeleteInteraction?, (uint64_t (*)(uint64_t))type metadata accessor for DeleteInteraction);
    uint64_t v19 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v20 = &v11[v19];
    uint64_t v21 = v27 + v19;
    (*(void (**)(char *))(*(void *)(AssociatedTypeWitness - 8) + 16))(v11);
    uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v20, v21, v8);
    MEMORY[0x1F4188790](v22);
    uint64_t v23 = v28;
    *(&v25 - 4) = a3;
    *(&v25 - 3) = v23;
    *(&v25 - 2) = (uint64_t)v11;
    static Log.internalError(_:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v11, TupleTypeMetadata2);
  }
  else
  {
    outlined init with take of DeleteInteraction((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for DeleteInteraction);
    DeleteInteraction.delete()();
    uint64_t result = _s7SwiftUI15MoveInteractionVWOhTm_0((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for DeleteInteraction);
  }
  *uint64_t v30 = 0;
  return result;
}

uint64_t implicit closure #1 in closure #1 in ListCoreDataSource.deleteCell(forRow:)()
{
  _StringGuts.grow(_:)(76);
  v0._object = (void *)0x8000000188341820;
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getTupleTypeMetadata2();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 0xD00000000000002BLL;
  v1._object = (void *)0x8000000188341840;
  String.append(_:)(v1);
  return 0;
}

uint64_t specialized implicit closure #1 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)()
{
  _StringGuts.grow(_:)(72);
  v0._object = (void *)0x80000001883418A0;
  v0._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v0);
  type metadata accessor for (Int, Int)();
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0xD000000000000029;
  v1._object = (void *)0x80000001883418C0;
  String.append(_:)(v1);
  return 0;
}

uint64_t specialized implicit closure #2 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)()
{
  _StringGuts.grow(_:)(42);
  v0._object = (void *)0x8000000188341870;
  v0._countAndFlagsBits = 0xD000000000000028;
  String.append(_:)(v0);
  type metadata accessor for (Int, Int)();
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0;
  v1._object = (void *)0xE000000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t outlined init with copy of _RowVisitationContext<TableDataSourceAdaptor>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?(0, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>?, (uint64_t (*)(uint64_t))type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>()
{
  if (!lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>)
  {
    lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    unint64_t v0 = type metadata accessor for _RowVisitationContext();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>);
    }
  }
}

uint64_t outlined destroy of _RowVisitationContext<TableDataSourceAdaptor>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t specialized implicit closure #1 in closure #1 in ListCoreDataSource.deleteCell(forRow:)()
{
  _StringGuts.grow(_:)(76);
  v0._object = (void *)0x8000000188341820;
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0xD00000000000002BLL;
  v1._object = (void *)0x8000000188341840;
  String.append(_:)(v1);
  return 0;
}

uint64_t partial apply for specialized implicit closure #1 in closure #1 in ListCoreDataSource.deleteCell(forRow:)()
{
  return specialized implicit closure #1 in closure #1 in ListCoreDataSource.deleteCell(forRow:)();
}

uint64_t partial apply for closure #1 in ListCoreDataSource.deleteCell(forRow:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in ListCoreDataSource.deleteCell(forRow:)(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t partial apply for implicit closure #1 in closure #1 in ListCoreDataSource.deleteCell(forRow:)()
{
  return implicit closure #1 in closure #1 in ListCoreDataSource.deleteCell(forRow:)();
}

unint64_t partial apply for specialized closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for specialized closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:)(a1, a2);
}

{
  return TableDataSourceAdaptor.contextForItem(index:)(*(void *)a1, *(void *)(a1 + 8), a2);
}

void type metadata accessor for _RowVisitationContext<TableDataSourceAdaptor>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of MoveInteraction(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for specialized implicit closure #1 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)()
{
  return specialized implicit closure #1 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)();
}

uint64_t outlined init with take of DeleteInteraction(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for specialized implicit closure #2 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)()
{
  return specialized implicit closure #2 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)();
}

uint64_t _s10Foundation9IndexPathVACSlAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(uint64_t a1)
{
  return closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t partial apply for closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in ListCoreDataSource.visitRowsAt<A>(_:visitor:)(a1, v2[5], v2[2], v2[4], a2);
}

uint64_t partial apply for implicit closure #1 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)()
{
  return implicit closure #1 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(*(void *)(v0 + 32));
}

uint64_t partial apply for implicit closure #2 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)()
{
  return implicit closure #2 in closure #1 in ListCoreDataSource.moveCell(fromRowAt:to:)(*(void *)(v0 + 32));
}

uint64_t sub_1881A5490()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ListCoreDataSource.canMoveCell(from:to:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in ListCoreDataSource.canMoveCell(from:to:)(a1, a2);
}

BOOL partial apply for closure #1 in ListCoreDataSource.canMoveCell(forRowAt:)@<W0>(unsigned char *a1@<X8>)
{
  type metadata accessor for _RowVisitationContext();
  BOOL result = _RowVisitationContext.canMove.getter();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in ListCoreDataSource.performDrop(to:)@<X0>(BOOL *a1@<X8>)
{
  return closure #1 in ListCoreDataSource.performDrop(to:)(*(unsigned char *)(v1 + 32), *(void *)(v1 + 40), a1);
}

void static ToolbarLabelStyle.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolbarLabelStyle.Role()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 5);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ToolbarLabelStyle.Role()
{
  Hasher._combine(_:)(*v0 + 5);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolbarLabelStyle.Role()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 5);
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ToolbarLabelStyle.Role@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized ToolbarLabelStyle.Role.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance ToolbarLabelStyle.Role(void *a1@<X8>)
{
  *a1 = *v1 + 5;
}

void static ToolbarLabelStyle.titleAndIcon.getter()
{
}

BOOL static ToolbarLabelStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t EnvironmentValues.toolbarLabelStyle.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.toolbarLabelStyle : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t sub_1881A58D0()
{
  return EnvironmentValues.toolbarLabelStyle.setter();
}

ValueMetadata *type metadata accessor for ToolbarLabelStyle()
{
  return &type metadata for ToolbarLabelStyle;
}

unsigned char *storeEnumTagSinglePayload for ToolbarLabelStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881A59E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarLabelStyle.Role()
{
  return &type metadata for ToolbarLabelStyle.Role;
}

void *type metadata accessor for EnvironmentValues.ToolbarLabelStyleKey()
{
  return &unk_1ED421CE0;
}

unint64_t lazy protocol witness table accessor for type ToolbarLabelStyle.Role and conformance ToolbarLabelStyle.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarLabelStyle.Role and conformance ToolbarLabelStyle.Role;
  if (!lazy protocol witness table cache variable for type ToolbarLabelStyle.Role and conformance ToolbarLabelStyle.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarLabelStyle.Role and conformance ToolbarLabelStyle.Role);
  }
  return result;
}

uint64_t EnvironmentValues.toolbarLabelStyle.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.ToolbarLabelStyleKey(char *a1, char *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, *a2);
}

BOOL specialized static ToolbarLabelStyle.Data.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(char *)(a1 + 16);
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  int v7 = *(char *)(a2 + 16);
  if ((v4 & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
    {
      outlined consume of ToolbarLabelStyle.Data(*(void *)a1, v3, v4);
      outlined consume of ToolbarLabelStyle.Data(v5, v6, v7);
      return (v5 ^ v2) == 0;
    }
LABEL_6:
    outlined copy of ToolbarLabelStyle.Data(v5, v6, v7);
    outlined consume of ToolbarLabelStyle.Data(v2, v3, v4);
    outlined consume of ToolbarLabelStyle.Data(v5, v6, v7);
    return 0;
  }
  if ((v7 & 0x80000000) == 0)
  {
    swift_retain();
    swift_retain();
    goto LABEL_6;
  }
  outlined copy of ToolbarLabelStyle.Data(v5, v6, v7);
  outlined copy of ToolbarLabelStyle.Data(v2, v3, v4);
  outlined copy of ToolbarLabelStyle.Data(v5, v6, v7);
  outlined copy of ToolbarLabelStyle.Data(v2, v3, v4);
  type metadata accessor for Binding<ToolbarLabelStyle>();
  uint64_t v11 = v10;
  MEMORY[0x18C113DA0](&v17);
  int v12 = v17;
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  char v16 = v7 & 0x7F;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v13, v11);
  outlined consume of ToolbarLabelStyle.Data(v2, v3, v4);
  outlined consume of ToolbarLabelStyle.Data(v5, v6, v7);
  outlined consume of ToolbarLabelStyle.Data(v5, v6, v7);
  outlined consume of ToolbarLabelStyle.Data(v2, v3, v4);
  outlined consume of ToolbarLabelStyle.Data(v5, v6, v7);
  return v12 == v13;
}

uint64_t specialized ToolbarLabelStyle.Role.init(rawValue:)(uint64_t a1)
{
  if ((unint64_t)(a1 - 5) >= 4) {
    return 4;
  }
  else {
    return a1 - 5;
  }
}

void type metadata accessor for Binding<ToolbarLabelStyle>()
{
  if (!lazy cache variable for type metadata for Binding<ToolbarLabelStyle>)
  {
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<ToolbarLabelStyle>);
    }
  }
}

uint64_t destroy for ToolbarLabelStyle.Data(uint64_t a1)
{
  return outlined consume of ToolbarLabelStyle.Data(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarLabelStyle.Data(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ToolbarLabelStyle.Data(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for ToolbarLabelStyle.Data(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of ToolbarLabelStyle.Data(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of ToolbarLabelStyle.Data(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for ToolbarLabelStyle.Data(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of ToolbarLabelStyle.Data(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarLabelStyle.Data(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x1FFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 0x1FFF);
  }
  unsigned int v3 = ((*(unsigned __int8 *)(a1 + 16) >> 7) | (2
                                              * ((*(void *)(a1 + 8) >> 57) & 0x78 | *(void *)(a1 + 8) & 7 | (((*(unsigned __int8 *)(a1 + 16) >> 2) & 0x1F) << 7)))) ^ 0x1FFF;
  if (v3 >> 1 >= 0xFFF) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ToolbarLabelStyle.Data(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1FFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x1FFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x1FFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1FFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0xFFF | ((-a2 & 0x1FFF) << 12);
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(unsigned char *)(result + 16) = (v3 >> 5) & 0xFC;
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for ToolbarLabelStyle.Data(uint64_t result, char a2)
{
  char v2 = *(unsigned char *)(result + 16) & 3 | (a2 << 7);
  *(void *)(result + 8) &= 0xFFFFFFFFFFFFFF8uLL;
  *(unsigned char *)(result + 16) = v2;
  return result;
}

ValueMetadata *type metadata accessor for ToolbarLabelStyle.Data()
{
  return &type metadata for ToolbarLabelStyle.Data;
}

void static ToolbarLabelStyle.iconOnly.getter()
{
}

void static ToolbarLabelStyle.titleOnly.getter()
{
}

ValueMetadata *type metadata accessor for HiddenBadgedViewStyle()
{
  return &type metadata for HiddenBadgedViewStyle;
}

uint64_t associated type witness table accessor for BadgedViewStyle.Body : View in HiddenBadgedViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **sub_1881A5FE4()
{
  return &protocol witness table for BadgeViewStyleConfiguration.Content;
}

uint64_t initializeWithCopy for HeaderFooterConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HeaderFooterConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for HeaderFooterConfiguration()
{
  return &type metadata for HeaderFooterConfiguration;
}

uint64_t EnvironmentValues.headerFooterConfiguration.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>();
    _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>();
    _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t HeaderFooterConfiguration.defaultEdgeInsets(for:)()
{
  if (v0[1] - 1 >= 2)
  {
    uint64_t v1 = *((void *)v0 + 1);
    int v2 = (*v0 ^ 1) & v0[16];
    if (((v1 == 0) & v2 & v0[17]) == 0 && (v2 != 1 || v1 != 2 && (v0[17] & 1) == 0))
    {
      if (v1)
      {
        static Edge.Set.horizontal.getter();
        return EdgeInsets.init(_:edges:)();
      }
    }
  }
  return result;
}

uint64_t HeaderFooterConfiguration.font.getter()
{
  if (*(unsigned char *)v0) {
    return 0;
  }
  if (*(unsigned char *)(v0 + 16) != 1 || !((*(void *)(v0 + 8) == 2) | *(unsigned char *)(v0 + 17) & 1)) {
    return swift_retain();
  }
  static Font.Weight.semibold.getter();
  return static Font.system(_:design:weight:)();
}

__n128 HeaderFooterConfiguration.updateValues()()
{
  uint64_t v1 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)v0) {
    static UIListContentConfiguration.footer()();
  }
  else {
    static UIListContentConfiguration.header()();
  }
  specialized HeaderFooterConfiguration.Values.init(_:)((uint64_t)v3, (uint64_t *)v6);
  swift_release();
  swift_release();
  long long v4 = v6[1];
  *(_OWORD *)(v0 + 24) = v6[0];
  *(_OWORD *)(v0 + 40) = v4;
  __n128 result = v7;
  *(__n128 *)(v0 + 56) = v7;
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance HeaderFooterConfigurationKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  char v2 = HIBYTE(static HeaderFooterConfigurationKey.defaultValue);
  uint64_t v3 = qword_1E9039740;
  char v4 = word_1E9039748;
  char v5 = HIBYTE(word_1E9039748);
  uint64_t v6 = qword_1E9039750;
  uint64_t v7 = unk_1E9039758;
  *(unsigned char *)a1 = static HeaderFooterConfigurationKey.defaultValue;
  *(unsigned char *)(a1 + 1) = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 17) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 40) = unk_1E9039760;
  *(_OWORD *)(a1 + 56) = unk_1E9039770;
  swift_retain();

  return swift_retain();
}

uint64_t specialized HeaderFooterConfiguration.Values.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UIListContentConfiguration.TextProperties();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Color.primary.getter();
  static Font.body.getter();
  UIListContentConfiguration.textProperties.getter();
  uint64_t v8 = UIListContentConfiguration.TextProperties.color.getter();
  uint64_t v9 = *(void (**)(char *, uint64_t))(v5 + 8);
  v9(v7, v4);
  v22[1] = v8;
  type metadata accessor for UIColor();
  _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (void (*)(uint64_t))type metadata accessor for UIColor);
  uint64_t v10 = Color.init<A>(provider:)();
  swift_release();
  swift_retain();
  UIListContentConfiguration.textProperties.getter();
  UIListContentConfiguration.TextProperties.font.getter();
  v9(v7, v4);
  uint64_t v11 = Font.init(_:)();
  swift_release();
  swift_retain();
  UIListContentConfiguration.directionalLayoutMargins.getter();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v20 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
  swift_release();
  uint64_t result = swift_release();
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v13;
  a2[3] = v15;
  a2[4] = v17;
  a2[5] = v19;
  return result;
}

ValueMetadata *type metadata accessor for HeaderFooterConfigurationKey()
{
  return &type metadata for HeaderFooterConfigurationKey;
}

uint64_t initializeWithCopy for HeaderFooterConfiguration.Values(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for HeaderFooterConfiguration.Values(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

_OWORD *assignWithTake for HeaderFooterConfiguration.Values(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  long long v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  return a1;
}

ValueMetadata *type metadata accessor for HeaderFooterConfiguration.Values()
{
  return &type metadata for HeaderFooterConfiguration.Values;
}

unsigned char *storeEnumTagSinglePayload for HeaderFooterConfiguration.Position(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881A69C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HeaderFooterConfiguration.Position()
{
  return &type metadata for HeaderFooterConfiguration.Position;
}

unint64_t lazy protocol witness table accessor for type HeaderFooterConfiguration.Position and conformance HeaderFooterConfiguration.Position()
{
  unint64_t result = lazy protocol witness table cache variable for type HeaderFooterConfiguration.Position and conformance HeaderFooterConfiguration.Position;
  if (!lazy protocol witness table cache variable for type HeaderFooterConfiguration.Position and conformance HeaderFooterConfiguration.Position)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HeaderFooterConfiguration.Position and conformance HeaderFooterConfiguration.Position);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<HeaderFooterConfigurationKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>);
    }
  }
}

uint64_t BorderedProminentButtonStyle.buttonStyleRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return BorderedButtonStyle_Phone.init(tint:isProminent:)(0, 1, a1);
}

uint64_t associated type witness table accessor for ButtonStyleConvertible.ButtonStyleRepresentation : ButtonStyle in BorderedProminentButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ButtonStyleConvertible.buttonStyleRepresentation.getter in conformance BorderedProminentButtonStyle@<X0>(uint64_t a1@<X8>)
{
  return BorderedButtonStyle_Phone.init(tint:isProminent:)(0, 1, a1);
}

void static PointerStyle.grabActive.getter()
{
}

void static PointerStyle.columnResize(directions:)()
{
}

void static PointerStyle.frameResize(position:directions:)()
{
}

void static PointerStyle.image(_:hotSpot:)()
{
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void static PointerStyle.shape<A>(_:eoFill:size:)()
{
}

uint64_t outlined copy of PointerStyle.Value(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5)
{
  int v5 = a5 >> 13;
  if (v5 == 4) {
    return outlined copy of Path.Storage(result, a2, a3, a4, a5);
  }
  if (v5 == 3) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of PointerStyle.Value(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 a5)
{
  int v5 = a5 >> 13;
  if (v5 == 4) {
    return outlined consume of Path.Storage(result, a2, a3, a4, a5);
  }
  if (v5 == 3) {
    return swift_release();
  }
  return result;
}

ValueMetadata *type metadata accessor for PointerStyle()
{
  return &type metadata for PointerStyle;
}

uint64_t destroy for PointerStyle(uint64_t a1)
{
  return outlined consume of PointerStyle.Value(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(_WORD *)(a1 + 32));
}

uint64_t initializeWithCopy for PointerStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int16 v7 = *(_WORD *)(a2 + 32);
  outlined copy of PointerStyle.Value(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_WORD *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for PointerStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int16 v7 = *(_WORD *)(a2 + 32);
  outlined copy of PointerStyle.Value(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int16 v12 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v7;
  outlined consume of PointerStyle.Value(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for PointerStyle(uint64_t a1, uint64_t a2)
{
  __int16 v3 = *(_WORD *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int16 v9 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v3;
  outlined consume of PointerStyle.Value(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PointerStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFFB && *(unsigned char *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 4091);
  }
  unsigned int v3 = (*(_WORD *)(a1 + 32) & 0xF8 | (*(unsigned __int16 *)(a1 + 32) >> 13) | (*(unsigned __int16 *)(a1 + 32) >> 1) & 0xF00) ^ 0xFFF;
  if (v3 >= 0xFFA) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PointerStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFFA)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 4091;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFFB) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFFB) {
      *(unsigned char *)(result + 34) = 0;
    }
    if (a2)
    {
      unsigned int v3 = ((-a2 >> 3) & 0x1FF) - (a2 << 9);
      *(_OWORD *)unint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_WORD *)(result + 32) = (16 * v3) & 0xFE00 | (8 * (v3 & 0x1F));
    }
  }
  return result;
}

uint64_t getEnumTag for PointerStyle.Value(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 32) >> 13;
  if (v1 <= 4) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t destructiveProjectEnumData for PointerStyle.Value(uint64_t result)
{
  *(_WORD *)(result + 32) &= 0x1FFFu;
  return result;
}

uint64_t destructiveInjectEnumTag for PointerStyle.Value(uint64_t result, unsigned int a2)
{
  if (a2 < 5)
  {
    *(_WORD *)(result + 32) = *(_WORD *)(result + 32) & 0x107 | ((_WORD)a2 << 13);
  }
  else
  {
    *(void *)unint64_t result = a2 - 5;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = -24576;
  }
  return result;
}

ValueMetadata *type metadata accessor for PointerStyle.Value()
{
  return &type metadata for PointerStyle.Value;
}

void static PointerStyle.default.getter()
{
}

void static PointerStyle.horizontalText.getter()
{
}

void static PointerStyle.rectSelection.getter()
{
}

void static PointerStyle.grabIdle.getter()
{
}

void static PointerStyle.verticalText.getter()
{
}

void static PointerStyle.link.getter()
{
}

void static PointerStyle.zoomIn.getter()
{
}

void static PointerStyle.zoomOut.getter()
{
}

void static PointerStyle.columnResize.getter()
{
}

void static PointerStyle.rowResize.getter()
{
}

void static PointerStyle.rowResize(directions:)()
{
}

uint64_t View.groupBoxStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for GroupBoxStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

unint64_t instantiation function for generic protocol witness table for GroupBoxStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in GroupBoxStyleConfiguration.Label()
{
  return &protocol witness table for GroupBoxStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for GroupBoxStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in GroupBoxStyleConfiguration.Content()
{
  return &protocol witness table for GroupBoxStyleConfiguration.Content;
}

uint64_t dispatch thunk of GroupBoxStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for GroupBoxStyleConfiguration.Label()
{
  return &type metadata for GroupBoxStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for GroupBoxStyleConfiguration.Content()
{
  return &type metadata for GroupBoxStyleConfiguration.Content;
}

uint64_t sub_1881A7200()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ResolvedGroupBoxStyle()
{
  return &type metadata for ResolvedGroupBoxStyle;
}

uint64_t getEnumTagSinglePayload for GroupBoxStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for GroupBoxStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881A75F4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in GroupBoxStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 ResolvedGroupBoxStyle.body.getter@<Q0>(__n128 *a1@<X8>)
{
  LOBYTE(v5) = 0;
  type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>();
  lazy protocol witness table accessor for type GroupBoxStyleModifier<DefaultGroupBoxStyle> and conformance GroupBoxStyleModifier<A>(&lazy protocol witness table cache variable for type GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content> and conformance GroupBox<A, B>, (void (*)(uint64_t))type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>);
  View._addingBackgroundGroup()();
  if (one-time initialization token for contain != -1) {
    swift_once();
  }
  uint64_t v2 = static AccessibilityChildBehavior.contain;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain_n();
  Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v5;
  *(void *)(v3 + 24) = 0;
  swift_release();
  a1->n128_u8[0] = v6;
  a1->n128_u64[1] = v7;
  __n128 result = v8;
  a1[1] = v8;
  a1[2].n128_u64[0] = v9;
  a1[2].n128_u64[1] = v3;
  a1[3].n128_u64[0] = v2;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedGroupBoxStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedGroupBoxStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedGroupBoxStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

double protocol witness for View.body.getter in conformance ResolvedGroupBoxStyle@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = ResolvedGroupBoxStyle.body.getter(a1).n128_u64[0];
  return result;
}

uint64_t GroupBoxStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  unsigned int v10 = (char *)&v13 - v9;
  (*(void (**)(double))(v2 + 24))(v8);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v6);
  int v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, AssociatedTypeWitness);
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedGroupBoxStyle()
{
  return lazy protocol witness table accessor for type GroupBoxStyleModifier<DefaultGroupBoxStyle> and conformance GroupBoxStyleModifier<A>(&lazy protocol witness table cache variable for type GroupBoxStyleModifier<DefaultGroupBoxStyle> and conformance GroupBoxStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for GroupBoxStyleModifier<DefaultGroupBoxStyle>);
}

void type metadata accessor for GroupBoxStyleModifier<DefaultGroupBoxStyle>()
{
  if (!lazy cache variable for type metadata for GroupBoxStyleModifier<DefaultGroupBoxStyle>)
  {
    lazy protocol witness table accessor for type DefaultGroupBoxStyle and conformance DefaultGroupBoxStyle();
    unint64_t v0 = type metadata accessor for GroupBoxStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GroupBoxStyleModifier<DefaultGroupBoxStyle>);
    }
  }
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance GroupBoxStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance GroupBoxStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedGroupBoxStyle()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for GroupBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type GroupBoxStyleModifier<DefaultGroupBoxStyle> and conformance GroupBoxStyleModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1881A7D94()
{
  return lazy protocol witness table accessor for type GroupBoxStyleModifier<DefaultGroupBoxStyle> and conformance GroupBoxStyleModifier<A>(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>> and conformance _UnaryViewAdaptor<A>, (void (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>>);
}

void type metadata accessor for _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>>()
{
  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>)
  {
    type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>();
    _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_5(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier>();
    lazy protocol witness table accessor for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>>();
    lazy protocol witness table accessor for type GroupBoxStyleModifier<DefaultGroupBoxStyle> and conformance GroupBoxStyleModifier<A>(&lazy protocol witness table cache variable for type GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content> and conformance GroupBox<A, B>, (void (*)(uint64_t))type metadata accessor for GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>);
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Int> and conformance _EnvironmentKeyTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GroupBox<GroupBoxStyleConfiguration.Label, GroupBoxStyleConfiguration.Content>, _EnvironmentKeyTransformModifier<Int>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Int> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Int> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Int> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    _s7SwiftUI10MutableBoxCyAA23AccessibilityAttachmentVGMaTm_5(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Int> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t sub_1881A80C8()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

Swift::Void __swiftcall PlatformViewHost.updateHostedViewBounds()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  id v12 = (id)(*(uint64_t (**)(char *))(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v0) + 0x58) + 72))(&v0[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v0) + 0x78)]);
  uint64_t v3 = (void *)(*(uint64_t (**)(char *))(*(void *)((*v2 & *(void *)v1) + 0x58) + 72))(&v1[*(void *)((*v2 & *(void *)v1) + 0x78)]);
  objc_msgSend(v1, sel_bounds);
  objc_msgSend(v3, sel_frameForAlignmentRect_);
  double v5 = v4;
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;

  objc_msgSend(v12, sel_setFrame_, v5, v7, v9, v11);
}

double PlatformViewHost._layoutSizeThatFits(_:fixedAxes:)(uint64_t a1, double a2, double a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  double v8 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v9 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0xB0);
  char v10 = *((unsigned char *)v3 + v9);
  *((unsigned char *)v3 + v9) = 1;
  v31.receiver = v3;
  v31.super_class = (Class)swift_getObjectType();
  id v11 = objc_msgSendSuper2(&v31, sel_hostedView);
  if (v11)
  {
    id v12 = v11;
    unsigned __int8 v13 = objc_msgSend(v11, sel__wantsConstraintBasedLayout);
    objc_msgSend(v12, sel_bounds);
    double v15 = v14;
    double v17 = v16;
    v30.receiver = v3;
    v30.super_class = ObjectType;
    objc_msgSendSuper2(&v30, sel__layoutSizeThatFits_fixedAxes_, a1, a2, a3);
    double v19 = v18;
    double v21 = v20;
    BOOL v22 = v20 == v17 || v18 == v15;
    if (v22 && (v13 & 1) == 0 && (PlatformViewHost.implementsFittingSize.getter() & 1) == 0)
    {
      objc_msgSend(v12, sel_intrinsicContentSize);
      if (v23 == *MEMORY[0x1E4FB30D8]) {
        double v23 = a2;
      }
      if (v19 == v15) {
        double v19 = v23;
      }
      if (v24 == *MEMORY[0x1E4FB30D8]) {
        double v25 = a3;
      }
      else {
        double v25 = v24;
      }
      if (v21 == v17) {
        double v21 = v25;
      }
    }
    if (v13 & 1) != 0 || (PlatformViewHost.implementsFittingSize.getter()) {
      goto LABEL_31;
    }
    if (v19 >= a2 || (objc_msgSend(v12, sel_contentHuggingPriorityForAxis_, 0), v26 >= 750.0))
    {
      if (v19 > a2)
      {
        objc_msgSend(v12, sel_contentCompressionResistancePriorityForAxis_, 0);
        if (v27 < 750.0) {
          double v19 = a2;
        }
      }
    }
    else
    {
      double v19 = a2;
    }
    if (v21 < a3 && (objc_msgSend(v12, sel_contentHuggingPriorityForAxis_, 1), v28 < 750.0) || v21 <= a3)
    {
LABEL_31:
    }
    else
    {
      objc_msgSend(v12, sel_contentCompressionResistancePriorityForAxis_, 1);
    }
  }
  else
  {
    double v19 = a2;
  }
  *((unsigned char *)v3 + *(void *)((*v8 & *v3) + 0xB0)) = v10;
  return v19;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PlatformViewHost<A>.ViewControllerParentingMode(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static TableColumnCustomization.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PlatformViewHost<A>.ViewControllerParentingMode()
{
  return TableColumnCustomization.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance PlatformViewHost<A>.ViewControllerParentingMode(uint64_t a1)
{
  TableColumnCustomization.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PlatformViewHost<A>.ViewControllerParentingMode()
{
  Hasher.init(_seed:)();
  TableColumnCustomization.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t PlatformViewHost.responder.getter()
{
  return swift_weakLoadStrong();
}

unint64_t PlatformViewHost.implementsFittingSize.getter()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8);
  int v2 = *((unsigned __int8 *)v0 + v1);
  if (v2 != 2) {
    return v2 & 1;
  }
  v9.receiver = v0;
  v9.super_class = (Class)swift_getObjectType();
  unint64_t result = (unint64_t)objc_msgSendSuper2(&v9, sel_hostedView);
  if (result)
  {
    double v4 = (void *)result;
    if (one-time initialization token for fittingSizeSelector != -1) {
      swift_once();
    }
    unint64_t v5 = (unint64_t)objc_msgSend(v4, sel_methodForSelector_, fittingSizeSelector);
    if (one-time initialization token for defaultFittingSizeIMP != -1) {
      swift_once();
    }
    uint64_t v6 = defaultFittingSizeIMP;

    BOOL v7 = (v5 | v6) == 0;
    BOOL v8 = v5 == v6;
    if (!v6) {
      BOOL v8 = v5 == 0;
    }
    if (v5) {
      BOOL v7 = v8;
    }
    unint64_t result = !v7;
    *((unsigned char *)v0 + v1) = !v7;
  }
  return result;
}

id PlatformViewHost.hostedView.getter()
{
  v3.receiver = v0;
  v3.super_class = (Class)swift_getObjectType();
  id v1 = objc_msgSendSuper2(&v3, sel_hostedView);

  return v1;
}

id @objc PlatformViewHost.hostedView.getter(void *a1)
{
  id v1 = a1;
  id v2 = PlatformViewHost.hostedView.getter();

  return v2;
}

void __swiftcall PlatformViewHost.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  Class isa = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if (static UnifiedHitTestingFeature.isEnabled.getter())
  {
    v10.receiver = v3;
    v10.super_class = ObjectType;
    id v8 = -[UIView_optional hitTest:withEvent:](&v10, sel_hitTest_withEvent_, isa, x, y);
    if (v8)
    {
      if (v8 == v3) {
    }
      }
  }
  else
  {
    v11.receiver = v3;
    v11.super_class = ObjectType;
    id v9 = -[UIView_optional hitTest:withEvent:](&v11, sel_hitTest_withEvent_, isa, x, y);
  }
}

id @objc PlatformViewHost.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  v16.value.super.Class isa = (Class)a5;
  PlatformViewHost.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v16);
  unsigned __int8 v13 = v12;

  return v13;
}

double @objc PlatformViewHost.intrinsicContentSize.getter(void *a1)
{
  id v1 = a1;
  double v2 = PlatformViewHost.intrinsicContentSize.getter();

  return v2;
}

float @objc PlatformViewHost.contentCompressionResistancePriority(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  PlatformViewHost.contentCompressionResistancePriority(for:)(a3, (SEL *)&selRef_contentCompressionResistancePriorityForAxis_);
  float v6 = v5;

  return v6;
}

float @objc PlatformViewHost.contentHuggingPriority(for:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  PlatformViewHost.contentCompressionResistancePriority(for:)(a3, (SEL *)&selRef_contentHuggingPriorityForAxis_);
  float v6 = v5;

  return v6;
}

double @objc PlatformViewHost._layoutSizeThatFits(_:fixedAxes:)(void *a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  id v8 = a1;
  double v9 = PlatformViewHost._layoutSizeThatFits(_:fixedAxes:)(a5, a2, a3);

  return v9;
}

float @objc PlatformViewHost._priorityForEngineHostConstraints()()
{
  return 940.0;
}

id @objc PlatformViewHost._parentContainer.getter(void *a1)
{
  id v1 = a1;
  id v2 = PlatformViewHost._parentContainer.getter();

  return v2;
}

id PlatformViewHost._parentContainer.getter()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  if ((MEMORY[0x18C111F70]() & 1) == 0)
  {
    v16.receiver = v0;
    v16.super_class = ObjectType;
    return objc_msgSendSuper2(&v16, sel__parentGestureRecognizerContainer);
  }
  id v2 = (void *)MEMORY[0x1E4FBC8C8];
  if (!swift_weakLoadStrong())
  {
    id v3 = (char *)v0 + *(void *)((*v2 & *v0) + 0x80);
    if (!MEMORY[0x18C119DF0](v3)) {
      goto LABEL_6;
    }
    uint64_t v4 = *((void *)v3 + 1);
    uint64_t v5 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v4 + 48))(v5, v4);
    swift_unknownObjectRelease();
  }
  swift_release();
LABEL_6:
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v7 = Strong;
  swift_retain();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    while (1)
    {
      uint64_t v8 = dispatch thunk of ViewResponder.gestureContainer.getter();
      if (v8) {
        break;
      }
      type metadata accessor for UIViewResponder();
      uint64_t v9 = swift_dynamicCastClass();
      if (v9)
      {
        uint64_t v8 = MEMORY[0x18C119DF0](v9 + 48);
        if (v8) {
          break;
        }
      }
      swift_release();
      swift_beginAccess();
      if (!swift_weakLoadStrong()) {
        goto LABEL_16;
      }
    }
    uint64_t v10 = v8;
    swift_release();
  }
  else
  {
LABEL_16:
    swift_beginAccess();
    uint64_t v10 = MEMORY[0x18C119DF0](v7 + 16);
    if (v10)
    {
      uint64_t v11 = *(void *)(v7 + 24);
      uint64_t v12 = swift_getObjectType();
      uint64_t v13 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 16))(&v15, v13, v13, v12, v11);
      swift_unknownObjectRelease();
      uint64_t v10 = v15;
    }
  }
  swift_release();
  swift_release();
  return (id)v10;
}

void @objc PlatformViewHost.init(hostedView:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;

  specialized PlatformViewHost.init(hostedView:)();
}

unsigned char *storeEnumTagSinglePayload for PlatformViewHost.ViewControllerParentingMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881A8E04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for PlatformViewHost.ViewControllerParentingMode()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for Equatable in PlatformViewHost<A>.ViewControllerParentingMode()
{
  return swift_getWitnessTable();
}

void one-time initialization function for fittingSizeSelector()
{
  fittingSizeSelector = (uint64_t)sel_sizeThatFits_;
}

id one-time initialization function for defaultFittingSizeIMP()
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  if (one-time initialization token for fittingSizeSelector != -1) {
    swift_once();
  }
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_instanceMethodForSelector_, fittingSizeSelector);
  defaultFittingSizeIMP = (uint64_t)result;
  return result;
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance EnableUnifiedLayoutFeature())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance EnableUnifiedLayoutFeature()
{
  lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature();

  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableUnifiedLayoutFeature()
{
  lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableUnifiedLayoutFeature()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnableUnifiedLayoutFeature@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature();
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1881A909C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1881A90D4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1881A911C()
{
  swift_release();

  return swift_deallocObject();
}

void specialized PlatformViewHost.init(hostedView:)()
{
}

ValueMetadata *type metadata accessor for EnableUnifiedLayoutFeature()
{
  return &type metadata for EnableUnifiedLayoutFeature;
}

uint64_t key path getter for EnvironmentValues.defaultForegroundStyle : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.defaultForegroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.defaultForegroundStyle : EnvironmentValues()
{
  return EnvironmentValues.defaultForegroundStyle.setter();
}

uint64_t key path getter for EnvironmentValues.tint : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.tint : EnvironmentValues()
{
  return EnvironmentValues.tint.setter();
}

uint64_t DefaultListButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DefaultListButtonStyle.ListButton();
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v27 - v10;
  uint64_t v12 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>();
  MEMORY[0x1F4188790](v16 - 8);
  double v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_13(a1, (uint64_t)v15, type metadata accessor for PrimitiveButtonStyleConfiguration);
  char v19 = v15[1];
  *uint64_t v11 = *v15;
  v11[1] = v19;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_13((uint64_t)&v15[*(int *)(v13 + 32)], (uint64_t)&v11[*(int *)(v9 + 44)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_5((uint64_t)v15, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v11, (uint64_t)v18);
  type metadata accessor for StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>();
  uint64_t v21 = (uint64_t)&v18[*(int *)(v20 + 52)];
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_13(a1, (uint64_t)v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  BOOL v22 = &v7[v5[7]];
  *(void *)BOOL v22 = swift_getKeyPath();
  v22[8] = 0;
  double v23 = &v7[v5[8]];
  *(void *)double v23 = swift_getKeyPath();
  v23[8] = 0;
  double v24 = &v7[v5[9]];
  *(void *)double v24 = swift_getKeyPath();
  v24[8] = 0;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_2((uint64_t)v7, v21, (uint64_t (*)(void))type metadata accessor for DefaultListButtonStyle.ListButton);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_13((uint64_t)v18, a2, (uint64_t (*)(void))type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>);
  type metadata accessor for StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>();
  return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_2((uint64_t)v18, a2 + *(int *)(v25 + 52), (uint64_t (*)(void))type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>);
}

uint64_t DefaultListButtonStyle.ListButton.body.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[4] = &type metadata for FocusableOptions;
  v22[5] = &protocol witness table for FocusableOptions;
  v22[1] = 8;
  LOBYTE(v22[0]) = 1;
  v22[6] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v22[7] = 0;
  outlined init with copy of _FocusableModifier((uint64_t)v22, (uint64_t)v18);
  outlined destroy of _FocusableModifier((uint64_t)v22);
  outlined init with copy of ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>((uint64_t)v18, (uint64_t)v22);
  outlined destroy of ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>((uint64_t)v18);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_13(v1, (uint64_t)v6, type metadata accessor for PrimitiveButtonStyleConfiguration);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_2((uint64_t)v6, v8 + v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = swift_getKeyPath();
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_13((uint64_t)v22, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>);
  swift_release();
  double v24 = partial apply for implicit closure #2 in implicit closure #1 in FlexibleBorderedButtonStyle.makeBody(configuration:);
  uint64_t v25 = v8;
  char v26 = 1;
  uint64_t v27 = KeyPath;
  char v28 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v29 = v10;
  __int16 v32 = 0;
  uint64_t v33 = v11;
  char v34 = 0;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_5((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>);
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = swift_getKeyPath();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_13((uint64_t)v23, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>);
  v18[19] = v12;
  char v19 = 0;
  uint64_t v20 = v13;
  char v21 = 0;
  uint64_t v17 = v1;
  uint64_t v16 = v1;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>(0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier);
  lazy protocol witness table accessor for type ButtonPrimaryTintListStyleContextPredicate and conformance ButtonPrimaryTintListStyleContextPredicate();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>();
  View.staticIf<A, B, C>(_:trueModifier:falseModifier:)();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_5((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>);
  memcpy(a1, v22, 0x190uLL);
  return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_5((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>);
}

double closure #1 in DefaultListButtonStyle.ListButton.body.getter@<D0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a2;
  int v7 = a2[1];
  uint64_t v8 = type metadata accessor for DefaultListButtonStyle.ListButton();
  uint64_t v9 = &a2[*(int *)(v8 + 20)];
  uint64_t v10 = *(void *)v9;
  char v11 = v9[8];
  outlined copy of Environment<Bool>.Content(*(void *)v9, v11);
  char v12 = specialized Environment.wrappedValue.getter(v10, v11);
  outlined consume of Environment<Bool>.Content(v10, v11);
  uint64_t v13 = &a2[*(int *)(v8 + 24)];
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = v13[8];
  outlined copy of Environment<HoverEffect?>.Content(*(void *)v13, v15);
  uint64_t v16 = specialized Environment.wrappedValue.getter(v14, v15);
  outlined consume of Environment<AnyShapeStyle?>.Content(v14, v15);
  if (!v16) {
    uint64_t v16 = static HierarchicalShapeStyle.sharedPrimary.getter();
  }
  uint64_t v17 = 256;
  if (!v7) {
    uint64_t v17 = 0;
  }
  uint64_t v18 = v17 | v6;
  uint64_t v19 = 0x10000;
  if ((v12 & 1) == 0) {
    uint64_t v19 = 0;
  }
  uint64_t v20 = v18 | v19;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_13(a1, (uint64_t)v28, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>);
  *((void *)&v30 + 1) = v20;
  *(void *)(a3 + 192) = v16;
  long long v21 = v28[7];
  *(_OWORD *)(a3 + 96) = v28[6];
  *(_OWORD *)(a3 + 112) = v21;
  long long v22 = v28[9];
  *(_OWORD *)(a3 + 128) = v28[8];
  *(_OWORD *)(a3 + 144) = v22;
  long long v23 = v28[3];
  *(_OWORD *)(a3 + 32) = v28[2];
  *(_OWORD *)(a3 + 48) = v23;
  long long v24 = v28[5];
  *(_OWORD *)(a3 + 64) = v28[4];
  *(_OWORD *)(a3 + 80) = v24;
  long long v25 = v28[1];
  *(_OWORD *)a3 = v28[0];
  *(_OWORD *)(a3 + 16) = v25;
  double result = *(double *)&v29;
  long long v27 = v30;
  *(_OWORD *)(a3 + 160) = v29;
  *(_OWORD *)(a3 + 176) = v27;
  return result;
}

uint64_t closure #2 in DefaultListButtonStyle.ListButton.body.getter@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a2;
  int v6 = a2[1];
  int v7 = &a2[*(int *)(type metadata accessor for DefaultListButtonStyle.ListButton() + 20)];
  uint64_t v8 = *(void *)v7;
  char v9 = v7[8];
  outlined copy of Environment<Bool>.Content(*(void *)v7, v9);
  char v10 = specialized Environment.wrappedValue.getter(v8, v9);
  outlined consume of Environment<Bool>.Content(v8, v9);
  uint64_t v11 = AnyShapeStyle.init<A>(_:)();
  uint64_t v12 = 256;
  if (!v6) {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v12 | v5;
  uint64_t v14 = 0x10000;
  if ((v10 & 1) == 0) {
    uint64_t v14 = 0;
  }
  uint64_t v15 = v13 | v14;
  uint64_t result = _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_13(a1, a3, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>);
  *(void *)(a3 + 184) = v15;
  *(void *)(a3 + 192) = v11;
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ListButtonStyleDisabledOpacityModifier@<X0>(double *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(unsigned __int8 *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  char v6 = *(unsigned char *)(v1 + 24);
  outlined copy of Environment<Bool>.Content(v5, v6);
  char v7 = specialized Environment.wrappedValue.getter(v5, v6);
  uint64_t result = outlined consume of Environment<Bool>.Content(v5, v6);
  double v9 = 1.0;
  if ((v7 & 1) == 0)
  {
    outlined copy of Environment<HoverEffect?>.Content(v3, v4);
    uint64_t v10 = specialized Environment.wrappedValue.getter(v3, v4);
    uint64_t result = outlined consume of Environment<AnyShapeStyle?>.Content(v3, v4);
    if (v10)
    {
      uint64_t result = swift_release();
      double v9 = 0.5;
    }
  }
  *a1 = v9;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ButtonPrimaryTintListStyleContextPredicate()
{
  if (static StyleContextAcceptsPredicate.evaluate(inputs:)()) {
    char v0 = 1;
  }
  else {
    char v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  }
  return v0 & 1;
}

uint64_t View.automaticListButtonStyle<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a1;
  uint64_t v21 = a6;
  uint64_t v22 = a2;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  double v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WrappedButtonStyle();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for ButtonStyleModifier();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v19 - v11;
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for AutomaticStyleOverrideModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v20, a3, v15);
  ButtonStyleModifier.init<A>(style:)((uint64_t)v9, a3, (uint64_t)v12);
  AutomaticStyleOverrideModifier.init(_:modifier:)();
  MEMORY[0x18C113660](v17, v22, v13, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v23 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a1;
  uint64_t v21 = a6;
  uint64_t v22 = a2;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  double v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ButtonStyleModifier();
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v19 - v11;
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for AutomaticStyleOverrideModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v19 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v20, a3, v15);
  OptionalFormatInputToString.init(format:)((uint64_t)v9, a3, (uint64_t)v12);
  AutomaticStyleOverrideModifier.init(_:modifier:)();
  MEMORY[0x18C113660](v17, v22, v13, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t sub_1881AA164()
{
  return swift_getWitnessTable();
}

uint64_t sub_1881AA260()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in DefaultListButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for DefaultListButtonStyle.ListButton()
{
  uint64_t result = type metadata singleton initialization cache for DefaultListButtonStyle.ListButton;
  if (!type metadata singleton initialization cache for DefaultListButtonStyle.ListButton) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>()
{
  if (!lazy cache variable for type metadata for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>)
  {
    type metadata accessor for StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>();
    unint64_t v0 = type metadata accessor for Group();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>);
    }
  }
}

void type metadata accessor for StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>()
{
  if (!lazy cache variable for type metadata for StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_9(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for DefaultListButtonStyle.ListButton();
    lazy protocol witness table accessor for type IsToggleButton and conformance IsToggleButton();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>);
    }
  }
}

uint64_t sub_1881AA4AC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.defaultForegroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1881AA4E8()
{
  return EnvironmentValues.defaultForegroundStyle.setter();
}

uint64_t sub_1881AA514@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1881AA550()
{
  return EnvironmentValues.tint.setter();
}

void type metadata accessor for StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>)
  {
    type metadata accessor for _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>(255, &lazy cache variable for type metadata for _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, (void (*)(uint64_t))type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>, (void (*)(void))lazy protocol witness table accessor for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>);
    type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>;
  if (!lazy protocol witness table cache variable for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>)
  {
    type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>();
    lazy protocol witness table accessor for type StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>();
    lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    lazy protocol witness table accessor for type _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type DefaultListButtonStyle.ListButton and conformance DefaultListButtonStyle.ListButton, (void (*)(uint64_t))type metadata accessor for DefaultListButtonStyle.ListButton);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for DefaultListButtonStyle.ListButton(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
    uint64_t v8 = (char *)v4 + v7;
    double v9 = (char *)a2 + v7;
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v26 = *(void *)v9;
      uint64_t v27 = *((void *)v9 + 1);
      char v28 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v9, v27, v28);
      *(void *)uint64_t v8 = v26;
      *((void *)v8 + 1) = v27;
      v8[16] = v28;
      uint64_t v29 = *((void *)v9 + 5);
      long long v30 = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 24) = v30;
      *((void *)v8 + 5) = v29;
      id v31 = (id)v30;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v11 = *(void *)v9;
        uint64_t v12 = *((void *)v9 + 1);
        uint64_t v14 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        char v49 = v9[34];
        __int16 v15 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v9, v12, v14, v13, v15, v49);
        *(void *)uint64_t v8 = v11;
        *((void *)v8 + 1) = v12;
        *((void *)v8 + 2) = v14;
        *((void *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v15;
        v8[34] = v49;
        uint64_t v16 = *((void *)v9 + 5);
        uint64_t v17 = *((void *)v9 + 6);
        uint64_t v18 = *((void *)v9 + 7);
        uint64_t v19 = *((void *)v9 + 8);
        char v50 = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v14, v50);
        *((void *)v8 + 5) = v16;
        *((void *)v8 + 6) = v17;
        *((void *)v8 + 7) = v18;
        *((void *)v8 + 8) = v19;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v50;
        uint64_t v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        uint64_t v21 = &v8[v20];
        uint64_t v22 = &v9[v20];
        uint64_t v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
        uint64_t v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        uint64_t v33 = a3[5];
        char v34 = (char *)v4 + v33;
        Swift::Int v35 = (char *)a2 + v33;
        uint64_t v36 = *(void *)v35;
        char v37 = v35[8];
        outlined copy of Environment<Bool>.Content(*(void *)v35, v37);
        *(void *)char v34 = v36;
        v34[8] = v37;
        uint64_t v38 = a3[6];
        Swift::Int v39 = (char *)v4 + v38;
        uint64_t v40 = (char *)a2 + v38;
        uint64_t v41 = *(void *)v40;
        unsigned __int8 v42 = v40[8];
        outlined copy of Environment<HoverEffect?>.Content(*(void *)v40, v42);
        *(void *)Swift::Int v39 = v41;
        v39[8] = v42;
        uint64_t v43 = a3[7];
        uint64_t v44 = (char *)v4 + v43;
        uint64_t v45 = (char *)a2 + v43;
        uint64_t v46 = *(void *)v45;
        unsigned __int8 v47 = v45[8];
        outlined copy of Environment<HoverEffect?>.Content(*(void *)v45, v47);
        *(void *)uint64_t v44 = v46;
        v44[8] = v47;
        return v4;
      }
      uint64_t v32 = *((void *)v9 + 1);
      *(void *)uint64_t v8 = *(void *)v9;
      *((void *)v8 + 1) = v32;
    }
    swift_retain();
    goto LABEL_9;
  }
  uint64_t v25 = *(void *)a2;
  *uint64_t v4 = *(void *)a2;
  uint64_t v4 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for DefaultListButtonStyle.ListButton(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(_WORD *)(v4 + 32), *(unsigned char *)(v4 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), *(_WORD *)(v4 + 72), *(unsigned char *)(v4 + 74));
  uint64_t v6 = v4 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
LABEL_8:
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + a2[5]), *(unsigned char *)(a1 + a2[5] + 8));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(a1 + a2[6]), *(unsigned __int8 *)(a1 + a2[6] + 8));
  uint64_t v8 = (uint64_t *)(a1 + a2[7]);
  uint64_t v9 = *v8;
  uint64_t v10 = *((unsigned __int8 *)v8 + 8);

  return outlined consume of Environment<AnyShapeStyle?>.Content(v9, v10);
}

_WORD *initializeWithCopy for DefaultListButtonStyle.ListButton(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v25 = *(void *)v8;
    uint64_t v26 = *((void *)v8 + 1);
    char v27 = v8[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v8, v26, v27);
    *(void *)uint64_t v7 = v25;
    *((void *)v7 + 1) = v26;
    v7[16] = v27;
    uint64_t v28 = *((void *)v8 + 5);
    long long v29 = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 24) = v29;
    *((void *)v7 + 5) = v28;
    id v30 = (id)v29;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v31 = *((void *)v8 + 1);
    *(void *)uint64_t v7 = *(void *)v8;
    *((void *)v7 + 1) = v31;
    goto LABEL_6;
  }
  unsigned __int8 v47 = a3;
  uint64_t v10 = *(void *)v8;
  uint64_t v11 = *((void *)v8 + 1);
  uint64_t v13 = *((void *)v8 + 2);
  uint64_t v12 = *((void *)v8 + 3);
  char v14 = v8[34];
  __int16 v15 = *((_WORD *)v8 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v8, v11, v13, v12, v15, v14);
  *(void *)uint64_t v7 = v10;
  *((void *)v7 + 1) = v11;
  *((void *)v7 + 2) = v13;
  *((void *)v7 + 3) = v12;
  *((_WORD *)v7 + 16) = v15;
  v7[34] = v14;
  uint64_t v16 = *((void *)v8 + 5);
  uint64_t v17 = *((void *)v8 + 6);
  uint64_t v18 = *((void *)v8 + 7);
  uint64_t v19 = *((void *)v8 + 8);
  LOBYTE(v11) = v8[74];
  LOWORD(v13) = *((_WORD *)v8 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v13, v11);
  *((void *)v7 + 5) = v16;
  *((void *)v7 + 6) = v17;
  *((void *)v7 + 7) = v18;
  *((void *)v7 + 8) = v19;
  *((_WORD *)v7 + 36) = v13;
  v7[74] = v11;
  a3 = v47;
  uint64_t v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v21 = &v7[v20];
  uint64_t v22 = &v8[v20];
  uint64_t v23 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  uint64_t v24 = type metadata accessor for LinkDestination.Configuration();
  v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = a3[5];
  uint64_t v33 = (char *)a1 + v32;
  char v34 = (char *)a2 + v32;
  uint64_t v35 = *(void *)v34;
  char v36 = v34[8];
  outlined copy of Environment<Bool>.Content(*(void *)v34, v36);
  *(void *)uint64_t v33 = v35;
  v33[8] = v36;
  uint64_t v37 = a3[6];
  uint64_t v38 = (char *)a1 + v37;
  Swift::Int v39 = (char *)a2 + v37;
  uint64_t v40 = *(void *)v39;
  unsigned __int8 v41 = v39[8];
  outlined copy of Environment<HoverEffect?>.Content(*(void *)v39, v41);
  *(void *)uint64_t v38 = v40;
  v38[8] = v41;
  uint64_t v42 = a3[7];
  uint64_t v43 = (char *)a1 + v42;
  uint64_t v44 = (char *)a2 + v42;
  uint64_t v45 = *(void *)v44;
  LOBYTE(v40) = v44[8];
  outlined copy of Environment<HoverEffect?>.Content(*(void *)v44, v40);
  *(void *)uint64_t v43 = v45;
  v43[8] = v40;
  return a1;
}

_WORD *assignWithCopy for DefaultListButtonStyle.ListButton(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(v6 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_5((uint64_t)a1 + v7, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v25 = *(void *)v9;
      uint64_t v26 = *((void *)v9 + 1);
      char v27 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v9, v26, v27);
      *(void *)uint64_t v8 = v25;
      *((void *)v8 + 1) = v26;
      v8[16] = v27;
      uint64_t v28 = (void *)*((void *)v9 + 3);
      *((void *)v8 + 3) = v28;
      uint64_t v29 = *((void *)v9 + 5);
      *((void *)v8 + 4) = *((void *)v9 + 4);
      *((void *)v8 + 5) = v29;
      id v30 = v28;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v11 = *(void *)v9;
        uint64_t v12 = *((void *)v9 + 1);
        uint64_t v14 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        char v54 = v9[34];
        __int16 v15 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v9, v12, v14, v13, v15, v54);
        *(void *)uint64_t v8 = v11;
        *((void *)v8 + 1) = v12;
        *((void *)v8 + 2) = v14;
        *((void *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v15;
        v8[34] = v54;
        uint64_t v16 = *((void *)v9 + 5);
        uint64_t v17 = *((void *)v9 + 6);
        uint64_t v18 = *((void *)v9 + 7);
        uint64_t v19 = *((void *)v9 + 8);
        char v55 = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v14, v55);
        *((void *)v8 + 5) = v16;
        *((void *)v8 + 6) = v17;
        *((void *)v8 + 7) = v18;
        *((void *)v8 + 8) = v19;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v55;
        uint64_t v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        uint64_t v21 = &v8[v20];
        uint64_t v22 = &v9[v20];
        uint64_t v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
        uint64_t v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_8:
        swift_storeEnumTagMultiPayload();
        goto LABEL_9;
      }
      uint64_t v31 = *((void *)v9 + 1);
      *(void *)uint64_t v8 = *(void *)v9;
      *((void *)v8 + 1) = v31;
    }
    swift_retain();
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v32 = a3[5];
  uint64_t v33 = (char *)a1 + v32;
  char v34 = (char *)a2 + v32;
  uint64_t v35 = *(void *)v34;
  char v36 = v34[8];
  outlined copy of Environment<Bool>.Content(*(void *)v34, v36);
  uint64_t v37 = *(void *)v33;
  char v38 = v33[8];
  *(void *)uint64_t v33 = v35;
  v33[8] = v36;
  outlined consume of Environment<Bool>.Content(v37, v38);
  uint64_t v39 = a3[6];
  uint64_t v40 = (char *)a1 + v39;
  unsigned __int8 v41 = (char *)a2 + v39;
  uint64_t v42 = *(void *)v41;
  unsigned __int8 v43 = v41[8];
  outlined copy of Environment<HoverEffect?>.Content(*(void *)v41, v43);
  uint64_t v44 = *(void *)v40;
  uint64_t v45 = v40[8];
  *(void *)uint64_t v40 = v42;
  v40[8] = v43;
  outlined consume of Environment<AnyShapeStyle?>.Content(v44, v45);
  uint64_t v46 = a3[7];
  unsigned __int8 v47 = (char *)a1 + v46;
  uint64_t v48 = (char *)a2 + v46;
  uint64_t v49 = *(void *)v48;
  unsigned __int8 v50 = v48[8];
  outlined copy of Environment<HoverEffect?>.Content(*(void *)v48, v50);
  uint64_t v51 = *(void *)v47;
  uint64_t v52 = v47[8];
  *(void *)unsigned __int8 v47 = v49;
  v47[8] = v50;
  outlined consume of Environment<AnyShapeStyle?>.Content(v51, v52);
  return a1;
}

_WORD *initializeWithTake for DefaultListButtonStyle.ListButton(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v10 = *((_OWORD *)v8 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    *((_OWORD *)v7 + 1) = v10;
    *(_DWORD *)(v7 + 31) = *(_DWORD *)(v8 + 31);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_DWORD *)(v7 + 71) = *(_DWORD *)(v8 + 71);
    uint64_t v11 = *(int *)(type metadata accessor for LinkDestination() + 24);
    uint64_t v12 = &v7[v11];
    uint64_t v13 = &v8[v11];
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    uint64_t v15 = type metadata accessor for LinkDestination.Configuration();
    v12[*(int *)(v15 + 20)] = v13[*(int *)(v15 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v16 = a3[5];
  uint64_t v17 = a3[6];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  *(void *)uint64_t v18 = *(void *)v19;
  unsigned char v18[8] = v19[8];
  uint64_t v20 = (char *)a1 + v17;
  uint64_t v21 = (char *)a2 + v17;
  *(void *)uint64_t v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = a3[7];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  *(void *)uint64_t v23 = *(void *)v24;
  v23[8] = v24[8];
  return a1;
}

_WORD *assignWithTake for DefaultListButtonStyle.ListButton(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(v6 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_5((uint64_t)a1 + v7, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    uint64_t v10 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v11 = *((_OWORD *)v9 + 1);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v11;
      *(_DWORD *)(v8 + 31) = *(_DWORD *)(v9 + 31);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
      *(_DWORD *)(v8 + 71) = *(_DWORD *)(v9 + 71);
      uint64_t v12 = *(int *)(type metadata accessor for LinkDestination() + 24);
      uint64_t v13 = &v8[v12];
      uint64_t v14 = &v9[v12];
      uint64_t v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      uint64_t v16 = type metadata accessor for LinkDestination.Configuration();
      v13[*(int *)(v16 + 20)] = v14[*(int *)(v16 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  uint64_t v17 = a3[5];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)v19;
  LOBYTE(v19) = v19[8];
  uint64_t v21 = *(void *)v18;
  char v22 = v18[8];
  *(void *)uint64_t v18 = v20;
  unsigned char v18[8] = (char)v19;
  outlined consume of Environment<Bool>.Content(v21, v22);
  uint64_t v23 = a3[6];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  uint64_t v26 = *(void *)v25;
  LOBYTE(v25) = v25[8];
  uint64_t v27 = *(void *)v24;
  uint64_t v28 = v24[8];
  *(void *)uint64_t v24 = v26;
  v24[8] = (char)v25;
  outlined consume of Environment<AnyShapeStyle?>.Content(v27, v28);
  uint64_t v29 = a3[7];
  id v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = *(void *)v31;
  LOBYTE(v31) = v31[8];
  uint64_t v33 = *(void *)v30;
  uint64_t v34 = v30[8];
  *(void *)id v30 = v32;
  v30[8] = (char)v31;
  outlined consume of Environment<AnyShapeStyle?>.Content(v33, v34);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultListButtonStyle.ListButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1881AB410);
}

uint64_t sub_1881AB410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for DefaultListButtonStyle.ListButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1881AB4E4);
}

uint64_t sub_1881AB4E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20) + 8) = -(char)a2;
  }
  return result;
}

uint64_t type metadata completion function for DefaultListButtonStyle.ListButton()
{
  uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>();
    lazy protocol witness table accessor for type _UnaryViewAdaptor<StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>> and conformance _UnaryViewAdaptor<A>(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>> and conformance _UnaryViewAdaptor<A>, &lazy cache variable for type metadata for _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, (void (*)(uint64_t))type metadata accessor for Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>, (void (*)(void))lazy protocol witness table accessor for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>);
    lazy protocol witness table accessor for type Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>> and conformance <A> Group<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>, Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _UnaryViewAdaptor<StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>> and conformance _UnaryViewAdaptor<A>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in DefaultListButtonStyle.ListButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_9(0, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&type metadata for _FocusableModifier, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>(uint64_t a1)
{
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_9(0, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&type metadata for _FocusableModifier, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1881AB874()
{
  uint64_t v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  unint64_t v2 = v0
     + *(int *)(v1 + 24)
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), *(_WORD *)(v2 + 32), *(unsigned char *)(v2 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(_WORD *)(v2 + 72), *(unsigned char *)(v2 + 74));
  unint64_t v4 = v2 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
LABEL_8:

  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_9(255, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&type metadata for _FocusableModifier, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>);
    }
  }
}

uint64_t key path getter for EnvironmentValues.foregroundStyle : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1881ABABC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.foregroundStyle.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.foregroundStyle : EnvironmentValues()
{
  return EnvironmentValues.foregroundStyle.setter();
}

uint64_t sub_1881ABB24()
{
  return EnvironmentValues.foregroundStyle.setter();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>(uint64_t a1)
{
}

double partial apply for closure #1 in DefaultListButtonStyle.ListButton.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in DefaultListButtonStyle.ListButton.body.getter(a1, *(unsigned __int8 **)(v2 + 16), a2);
}

uint64_t partial apply for closure #2 in DefaultListButtonStyle.ListButton.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in DefaultListButtonStyle.ListButton.body.getter(a1, *(unsigned __int8 **)(v2 + 16), a2);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>(255);
    type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier> and conformance <> ModifiedContent<A, B>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_9(255, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&type metadata for _FocusableModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonPrimaryTintListStyleContextPredicate and conformance ButtonPrimaryTintListStyleContextPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonPrimaryTintListStyleContextPredicate and conformance ButtonPrimaryTintListStyleContextPredicate;
  if (!lazy protocol witness table cache variable for type ButtonPrimaryTintListStyleContextPredicate and conformance ButtonPrimaryTintListStyleContextPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonPrimaryTintListStyleContextPredicate and conformance ButtonPrimaryTintListStyleContextPredicate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier);
    lazy protocol witness table accessor for type _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>> and conformance _DefaultForegroundStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t destroy for ListButtonStyleDisabledOpacityModifier(uint64_t a1)
{
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t *assignWithCopy for ListButtonStyleDisabledOpacityModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<HoverEffect?>.Content(*a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7);
  uint64_t v8 = v2[2];
  LOBYTE(v2) = *((unsigned char *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v8, (char)v2);
  uint64_t v9 = a1[2];
  char v10 = *((unsigned char *)a1 + 24);
  a1[2] = v8;
  *((unsigned char *)a1 + 24) = (_BYTE)v2;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t *assignWithTake for ListButtonStyleDisabledOpacityModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = a1[2];
  char v10 = *((unsigned char *)a1 + 24);
  a1[2] = a2[2];
  *((unsigned char *)a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

ValueMetadata *type metadata accessor for ListButtonStyleDisabledOpacityModifier()
{
  return &type metadata for ListButtonStyleDisabledOpacityModifier;
}

ValueMetadata *type metadata accessor for ButtonPrimaryTintListStyleContextPredicate()
{
  return &type metadata for ButtonPrimaryTintListStyleContextPredicate;
}

uint64_t sub_1881AC054()
{
  return lazy protocol witness table accessor for type _UnaryViewAdaptor<StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>> and conformance _UnaryViewAdaptor<A>(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>> and conformance _UnaryViewAdaptor<A>, &lazy cache variable for type metadata for _UnaryViewAdaptor<StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>>, (void (*)(uint64_t))type metadata accessor for StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>> and conformance <> StaticIf<A, B, C>);
}

void type metadata accessor for _UnaryViewAdaptor<Group<StaticIf<IsToggleButton, Button<PrimitiveButtonStyleConfiguration.Label>, DefaultListButtonStyle.ListButton>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = type metadata accessor for _UnaryViewAdaptor();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>();
    lazy protocol witness table accessor for type ButtonPrimaryTintListStyleContextPredicate and conformance ButtonPrimaryTintListStyleContextPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ButtonPrimaryTintListStyleContextPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>, ListButtonStyleDisabledOpacityModifier>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<AnyShapeStyle>>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ListButtonStyleDisabledOpacityModifier()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>, _OpacityEffect>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>);
    lazy protocol witness table accessor for type _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _FocusableModifier>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, OnPlatformContainerSelectionModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>)
  {
    lazy protocol witness table accessor for type ListButtonStyleDisabledOpacityModifier and conformance ListButtonStyleDisabledOpacityModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<ListButtonStyleDisabledOpacityModifier>);
    }
  }
}

ValueMetadata *type metadata accessor for SwiftUIResolvedTextProvider()
{
  return &type metadata for SwiftUIResolvedTextProvider;
}

uint64_t specialized static SwiftUIResolvedTextProvider.updateWidgetTextAttachment(_:namedImage:)(void *a1, uint64_t a2)
{
  id v46 = a1;
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0);
  MEMORY[0x1F4188790](v3 - 8);
  unsigned __int8 v43 = &v38[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v44 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  MEMORY[0x1F4188790](v44);
  unint64_t v6 = &v38[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v45 = &v38[-v8];
  uint64_t v9 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  uint64_t v42 = v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = &v38[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = *(void *)(a2 + 8);
  uint64_t v40 = *(void *)a2;
  uint64_t v14 = *(void **)(a2 + 16);
  int v39 = *(_DWORD *)(a2 + 24);
  char v15 = *(unsigned char *)(a2 + 28);
  char v16 = *(unsigned char *)(a2 + 29);
  char v17 = *(unsigned char *)(a2 + 30);
  uint64_t v18 = *(void *)(a2 + 32);
  uint64_t v19 = *(void *)(a2 + 40);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v55);
  v48[0] = v40;
  v48[1] = v13;
  v48[2] = (uint64_t)v14;
  int v49 = v39;
  char v50 = v15;
  char v51 = v16;
  char v52 = v17;
  uint64_t v53 = v18;
  uint64_t v54 = v19;
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_5((uint64_t)v55, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for Image.Resolved?);
  swift_bridgeObjectRetain();
  outlined copy of Image.Location(v14);
  swift_retain();
  swift_retain();
  WidgetAuxiliaryViewMetadata.Graphic.Named.init(_:_:)(v48, (uint64_t)v47, v12);
  uint64_t v20 = v41;
  swift_storeEnumTagMultiPayload();
  uint64_t v21 = v43;
  outlined init with copy of WidgetAuxiliaryViewMetadata.Graphic((uint64_t)v12, (uint64_t)v43);
  char v22 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v42 + 56);
  v22(v21, 0, 1, v20);
  *(void *)unint64_t v6 = 0;
  *((void *)v6 + 1) = 0;
  uint64_t v23 = (int *)v44;
  uint64_t v24 = (uint64_t)&v6[*(int *)(v44 + 24)];
  v22((unsigned char *)v24, 1, 1, v20);
  *(void *)&v6[v23[7]] = 0;
  uint64_t v25 = &v6[v23[8]];
  uint64_t v26 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  uint64_t v27 = &v6[v23[9]];
  v27[48] = 0;
  *((_OWORD *)v27 + 1) = 0u;
  *((_OWORD *)v27 + 2) = 0u;
  *(_OWORD *)uint64_t v27 = 0u;
  uint64_t v28 = &v6[v23[10]];
  uint64_t v29 = type metadata accessor for URL();
  id v30 = v28;
  uint64_t v31 = (uint64_t)v45;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v30, 1, 1, v29);
  uint64_t v32 = &v6[v23[11]];
  _OWORD *v32 = xmmword_18834BB90;
  v32[1] = 0u;
  v32[2] = 0u;
  v32[3] = 0u;
  outlined assign with take of WidgetAuxiliaryViewMetadata.Graphic?((uint64_t)v21, v24);

  *(void *)unint64_t v6 = 0;
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_5((uint64_t)v6, v31, type metadata accessor for WidgetAuxiliaryViewMetadata);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  lazy protocol witness table accessor for type WidgetAuxiliaryViewMetadata and conformance WidgetAuxiliaryViewMetadata();
  uint64_t v33 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v35 = v34;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v33, v35);
  objc_msgSend(v46, sel_setContents_, isa);
  swift_release();

  outlined destroy of WidgetAuxiliaryViewMetadata(v31, type metadata accessor for WidgetAuxiliaryViewMetadata);
  return outlined destroy of WidgetAuxiliaryViewMetadata((uint64_t)v12, type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
}

uint64_t outlined init with copy of WidgetAuxiliaryViewMetadata.Graphic(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WidgetAuxiliaryViewMetadata(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance _PlainButtonMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = swift_getKeyPath();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = KeyPath;
  *(unsigned char *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = v8;
  *(unsigned char *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = v9;
  *(unsigned char *)(a2 + 72) = 0;
  outlined copy of AppIntentExecutor?(v3);

  return outlined copy of AppIntentExecutor?(v5);
}

void __swiftcall PlainButtonMenuStyle.init()()
{
}

void PlainButtonMenuStyle.makeBody(configuration:)()
{
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in PlainButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PlainButtonMenuStyle()
{
  return &type metadata for PlainButtonMenuStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>>();
    lazy protocol witness table accessor for type ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase> and conformance ButtonStyleAdaptorMenuStyle<A>((unint64_t *)&lazy protocol witness table cache variable for type Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content> and conformance Menu<A, B>, (void (*)(uint64_t))type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>>)
  {
    type metadata accessor for Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>();
    type metadata accessor for MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Menu<MenuStyleConfiguration.Label, MenuStyleConfiguration.Content>, MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>>);
    }
  }
}

void type metadata accessor for MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>()
{
  if (!lazy cache variable for type metadata for MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>)
  {
    type metadata accessor for ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>();
    lazy protocol witness table accessor for type ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase> and conformance ButtonStyleAdaptorMenuStyle<A>(&lazy protocol witness table cache variable for type ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase> and conformance ButtonStyleAdaptorMenuStyle<A>, (void (*)(uint64_t))type metadata accessor for ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>);
    unint64_t v0 = type metadata accessor for MenuStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MenuStyleModifier<ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>>);
    }
  }
}

void type metadata accessor for ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>()
{
  if (!lazy cache variable for type metadata for ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>)
  {
    lazy protocol witness table accessor for type PlainButtonStyleBase and conformance PlainButtonStyleBase();
    unint64_t v0 = type metadata accessor for ButtonStyleAdaptorMenuStyle();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ButtonStyleAdaptorMenuStyle<PlainButtonStyleBase> and conformance ButtonStyleAdaptorMenuStyle<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for _PlainButtonMenuStyle()
{
  return &type metadata for _PlainButtonMenuStyle;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in _PlainButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TabContent.defaultVisibility(_:for:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v5[0] = a1;
  uint64_t v6 = a2;
  return TabContent.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&type metadata for DefaultTabVisibilityModifier, a4);
}

{
  unsigned char v5[8];
  uint64_t v6;

  v5[0] = a1;
  uint64_t v6 = a2;
  return TabContent.modifier<A>(_:)((uint64_t)v5, a3, (uint64_t)&type metadata for DefaultTabVisibilityModifier, a4);
}

BOOL static TabPlacement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TabContent.hidden(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = a1;
  return TabContent.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&type metadata for TabHiddenModifier, a3);
}

uint64_t TabContent.disabled(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = a1;
  return TabContent.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&type metadata for TabDisabledModifier, a3);
}

void static TabPlacement.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static TabPlacement.pinned.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static TabPlacement.sidebarOnly.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static TabPlacement.bottomBar.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static TabPlacement.topBar.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static TabPlacement.sidebar.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

void TabPlacement.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int TabPlacement.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type TabPlacement and conformance TabPlacement()
{
  unint64_t result = lazy protocol witness table cache variable for type TabPlacement and conformance TabPlacement;
  if (!lazy protocol witness table cache variable for type TabPlacement and conformance TabPlacement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabPlacement and conformance TabPlacement);
  }
  return result;
}

ValueMetadata *type metadata accessor for TabPlacement()
{
  return &type metadata for TabPlacement;
}

uint64_t sub_1881ACE94(uint64_t a1)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA07DefaultC18VisibilityModifierVGAaBHPxAaBHD1__AfA04ViewH0HPyHCHCTm_0(a1, (uint64_t)&type metadata for DefaultTabVisibilityModifier, (void (*)(void))lazy protocol witness table accessor for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier);
}

uint64_t sub_1881ACEB4(uint64_t a1)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA07DefaultC18VisibilityModifierVGAaBHPxAaBHD1__AfA04ViewH0HPyHCHCTm_0(a1, (uint64_t)&type metadata for TabHiddenModifier, (void (*)(void))lazy protocol witness table accessor for type TabHiddenModifier and conformance TabHiddenModifier);
}

unint64_t lazy protocol witness table accessor for type TabHiddenModifier and conformance TabHiddenModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type TabHiddenModifier and conformance TabHiddenModifier;
  if (!lazy protocol witness table cache variable for type TabHiddenModifier and conformance TabHiddenModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabHiddenModifier and conformance TabHiddenModifier);
  }
  return result;
}

uint64_t sub_1881ACF28(uint64_t a1)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA07DefaultC18VisibilityModifierVGAaBHPxAaBHD1__AfA04ViewH0HPyHCHCTm_0(a1, (uint64_t)&type metadata for TabDisabledModifier, (void (*)(void))lazy protocol witness table accessor for type TabDisabledModifier and conformance TabDisabledModifier);
}

uint64_t get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA07DefaultC18VisibilityModifierVGAaBHPxAaBHD1__AfA04ViewH0HPyHCHCTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type TabDisabledModifier and conformance TabDisabledModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type TabDisabledModifier and conformance TabDisabledModifier;
  if (!lazy protocol witness table cache variable for type TabDisabledModifier and conformance TabDisabledModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabDisabledModifier and conformance TabDisabledModifier);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TabPlacement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881AD0D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabPlacement.Placement()
{
  return &type metadata for TabPlacement.Placement;
}

ValueMetadata *type metadata accessor for DefaultTabVisibilityModifier()
{
  return &type metadata for DefaultTabVisibilityModifier;
}

ValueMetadata *type metadata accessor for TabDisabledModifier()
{
  return &type metadata for TabDisabledModifier;
}

unsigned char *storeEnumTagSinglePayload for TabDisabledModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881AD200);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabHiddenModifier()
{
  return &type metadata for TabHiddenModifier;
}

unint64_t lazy protocol witness table accessor for type TabPlacement.Placement and conformance TabPlacement.Placement()
{
  unint64_t result = lazy protocol witness table cache variable for type TabPlacement.Placement and conformance TabPlacement.Placement;
  if (!lazy protocol witness table cache variable for type TabPlacement.Placement and conformance TabPlacement.Placement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabPlacement.Placement and conformance TabPlacement.Placement);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TabDisabledModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance TabDisabledModifier()
{
  char v1 = *v0;
  *(unsigned char *)(swift_allocObject() + 16) = v1;
  type metadata accessor for _ViewModifier_Content<DefaultTabVisibilityModifier>(0, &lazy cache variable for type metadata for _ViewModifier_Content<TabDisabledModifier>, (void (*)(void))lazy protocol witness table accessor for type TabDisabledModifier and conformance TabDisabledModifier);
  lazy protocol witness table accessor for type _ViewModifier_Content<DefaultTabVisibilityModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<TabDisabledModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<TabDisabledModifier>, (void (*)(void))lazy protocol witness table accessor for type TabDisabledModifier and conformance TabDisabledModifier);
  View.transformTrait<A>(_:transform:)();

  return swift_release();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TabHiddenModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance TabHiddenModifier()
{
  char v1 = *v0;
  *(unsigned char *)(swift_allocObject() + 16) = v1;
  type metadata accessor for _ViewModifier_Content<DefaultTabVisibilityModifier>(0, &lazy cache variable for type metadata for _ViewModifier_Content<TabHiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type TabHiddenModifier and conformance TabHiddenModifier);
  lazy protocol witness table accessor for type _ViewModifier_Content<DefaultTabVisibilityModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<TabHiddenModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<TabHiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type TabHiddenModifier and conformance TabHiddenModifier);
  View.transformTrait<A>(_:transform:)();

  return swift_release();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DefaultTabVisibilityModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in DefaultTabVisibilityModifier.body(content:)(uint64_t result, char a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  if (!v3) {
    return result;
  }
  uint64_t v6 = result;
  swift_bridgeObjectRetain();
  for (uint64_t i = 0; i != v3; ++i)
  {
    unsigned __int8 v8 = *(unsigned char *)(a3 + i + 32);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *(void **)(v6 + 32);
    *(void *)(v6 + 32) = 0x8000000000000000;
    unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
    uint64_t v13 = v10[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    char v16 = v11;
    if (v10[3] >= v15)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v19 = v10;
        if (v11) {
          goto LABEL_3;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        uint64_t v19 = v10;
        if (v16) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, isUniquelyReferenced_nonNull_native);
      unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v8);
      if ((v16 & 1) != (v18 & 1)) {
        goto LABEL_22;
      }
      unint64_t v12 = v17;
      uint64_t v19 = v10;
      if (v16)
      {
LABEL_3:
        *(unsigned char *)(v19[7] + v12) = a2;
        goto LABEL_4;
      }
    }
    v19[(v12 >> 6) + 8] |= 1 << v12;
    *(unsigned char *)(v19[6] + v12) = v8;
    *(unsigned char *)(v19[7] + v12) = a2;
    uint64_t v20 = v19[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_21;
    }
    unint64_t v19[2] = v22;
LABEL_4:
    *(void *)(v6 + 32) = v19;
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance DefaultTabVisibilityModifier()
{
  char v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for _ViewModifier_Content<DefaultTabVisibilityModifier>(0, &lazy cache variable for type metadata for _ViewModifier_Content<DefaultTabVisibilityModifier>, (void (*)(void))lazy protocol witness table accessor for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier);
  lazy protocol witness table accessor for type _ViewModifier_Content<DefaultTabVisibilityModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<DefaultTabVisibilityModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<DefaultTabVisibilityModifier>, (void (*)(void))lazy protocol witness table accessor for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier);
  swift_bridgeObjectRetain();
  View.transformTrait<A>(_:transform:)();

  return swift_release();
}

uint64_t sub_1881AD79C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DefaultTabVisibilityModifier.body(content:)(uint64_t a1)
{
  return closure #1 in DefaultTabVisibilityModifier.body(content:)(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1881AD7E0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TabHiddenModifier.body(content:)(uint64_t result)
{
  *(unsigned char *)(result + 1) = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<DefaultTabVisibilityModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ViewModifier_Content<DefaultTabVisibilityModifier>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1881AD84C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TabDisabledModifier.body(content:)(uint64_t result)
{
  *(unsigned char *)(result + 2) = *(unsigned char *)(v1 + 16);
  return result;
}

void type metadata accessor for _ViewModifier_Content<DefaultTabVisibilityModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _ViewModifier_Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1881AD8C8(uint64_t a1)
{
  return get_witness_table_qd0__7SwiftUI4ViewHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyAA01_C16Modifier_ContentVyAA020DefaultTabVisibilityH0VG_AA0K7OptionsV0eG0VQo_HOTm(a1, &lazy cache variable for type metadata for _ViewModifier_Content<DefaultTabVisibilityModifier>, (void (*)(void))lazy protocol witness table accessor for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier, (uint64_t)&type metadata for DefaultTabVisibilityModifier, &lazy protocol witness table cache variable for type _ViewModifier_Content<DefaultTabVisibilityModifier> and conformance _ViewModifier_Content<A>);
}

uint64_t sub_1881AD8F8(uint64_t a1)
{
  return get_witness_table_qd0__7SwiftUI4ViewHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyAA01_C16Modifier_ContentVyAA020DefaultTabVisibilityH0VG_AA0K7OptionsV0eG0VQo_HOTm(a1, &lazy cache variable for type metadata for _ViewModifier_Content<TabHiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type TabHiddenModifier and conformance TabHiddenModifier, (uint64_t)&type metadata for TabHiddenModifier, &lazy protocol witness table cache variable for type _ViewModifier_Content<TabHiddenModifier> and conformance _ViewModifier_Content<A>);
}

uint64_t sub_1881AD928(uint64_t a1)
{
  return get_witness_table_qd0__7SwiftUI4ViewHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyAA01_C16Modifier_ContentVyAA020DefaultTabVisibilityH0VG_AA0K7OptionsV0eG0VQo_HOTm(a1, &lazy cache variable for type metadata for _ViewModifier_Content<TabDisabledModifier>, (void (*)(void))lazy protocol witness table accessor for type TabDisabledModifier and conformance TabDisabledModifier, (uint64_t)&type metadata for TabDisabledModifier, &lazy protocol witness table cache variable for type _ViewModifier_Content<TabDisabledModifier> and conformance _ViewModifier_Content<A>);
}

uint64_t get_witness_table_qd0__7SwiftUI4ViewHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyAA01_C16Modifier_ContentVyAA020DefaultTabVisibilityH0VG_AA0K7OptionsV0eG0VQo_HOTm(uint64_t a1, unint64_t *a2, void (*a3)(void), uint64_t a4, unint64_t *a5)
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t View.sectionActions<A>(content:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v25 = a1;
  uint64_t v28 = a6;
  uint64_t v37 = &type metadata for SectionStyleConfiguration.Actions;
  uint64_t v38 = a3;
  unint64_t v39 = lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions();
  uint64_t v40 = a5;
  type metadata accessor for StaticSourceWriter();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  char v11 = (char *)&v24 - v10;
  uint64_t v12 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v24 - v18;
  v25(v17);
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = v26;
  uint64_t v33 = a5;
  unint64_t v34 = v19;
  uint64_t v20 = a2;
  uint64_t v21 = v26;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SectionStyleConfiguration.Actions, (void (*)(double))partial apply for closure #1 in View.sectionActions<A>(content:), (uint64_t)v29, v20, (uint64_t)&type metadata for SectionStyleConfiguration.Actions, a3, v26);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v19, a3);
  uint64_t v22 = AnyView.init<A>(_:)();
  uint64_t v35 = v21;
  char v36 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v37 = (ValueMetadata *)v22;
  swift_getWitnessTable();
  View._trait<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v19, a3);
}

uint64_t closure #1 in View.sectionActions<A>(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v7);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a3);
}

uint64_t partial apply for closure #1 in View.sectionActions<A>(content:)()
{
  return closure #1 in View.sectionActions<A>(content:)(v0[6], v0[2], v0[3]);
}

uint64_t sub_1881ADDA8()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance SidebarSectionActionStyleContext(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  if (a2) {
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  }
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in SidebarSectionActionButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SidebarSectionActionButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _TraitWritingModifier<SectionActionsTraitKey>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  char v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v23 - v13;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_3(a1, (uint64_t)v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  char v15 = v7[1];
  *char v11 = *v7;
  v11[1] = v15;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_3((uint64_t)&v7[*(int *)(v5 + 32)], (uint64_t)&v11[*(int *)(v9 + 44)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
  outlined destroy of PrimitiveButtonStyleConfiguration((uint64_t)v7);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v11, (uint64_t)v14);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v17 = swift_getKeyPath();
  uint64_t v18 = swift_getKeyPath();
  uint64_t v19 = swift_getKeyPath();
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v14, a2);
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>();
  uint64_t v21 = a2 + *(int *)(v20 + 36);
  *(void *)uint64_t v21 = KeyPath;
  *(unsigned char *)(v21 + 8) = 0;
  *(void *)(v21 + 16) = v17;
  *(unsigned char *)(v21 + 24) = 0;
  *(void *)(v21 + 32) = v18;
  *(unsigned char *)(v21 + 40) = 0;
  *(void *)(v21 + 48) = v19;
  *(unsigned char *)(v21 + 56) = 0;
  return outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v14);
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>)
  {
    type metadata accessor for _TraitWritingModifier<SectionActionsTraitKey>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA016PlatformItemListdE0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle, (uint64_t)&type metadata for PlatformItemListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>);
    }
  }
}

BOOL specialized static StyleContext.accepts<A>(_:at:)(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>();
    lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>>();
    lazy protocol witness table accessor for type Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>>)
  {
    type metadata accessor for Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>();
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA016PlatformItemListdE0VGMaTm_0(255, &lazy cache variable for type metadata for SectionStyleModifier<PlainSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainSectionStyle and conformance PlainSectionStyle, (uint64_t)&type metadata for PlainSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>, SectionStyleModifier<PlainSectionStyle>>);
    }
  }
}

void type metadata accessor for Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>()
{
  if (!lazy cache variable for type metadata for Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>)
  {
    type metadata accessor for TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>();
    unint64_t v0 = type metadata accessor for Section();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>()
{
  if (!lazy cache variable for type metadata for TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>)
  {
    type metadata accessor for (ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)();
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>);
    }
  }
}

void type metadata accessor for (ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>))
  {
    type metadata accessor for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>();
    type metadata accessor for ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>));
    }
  }
}

void type metadata accessor for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>)
  {
    type metadata accessor for _TraitWritingModifier<SectionActionsTraitKey>(255, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, MEMORY[0x1E4F417F8], MEMORY[0x1E4F40578]);
    _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA016PlatformItemListdE0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for SectionStyleModifier<DefaultSectionStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultSectionStyle and conformance DefaultSectionStyle, (uint64_t)&type metadata for DefaultSectionStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for SectionStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>;
  if (!lazy protocol witness table cache variable for type Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>)
  {
    type metadata accessor for Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer>();
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)> and conformance TupleView<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Section<SectionStyleConfiguration.Header, TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<DefaultSectionStyle>>, ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t _UIHostingView.allowFrameChanges.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80));
}

uint64_t _UIHostingView.allowFrameChanges.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x80)) = result;
  return result;
}

uint64_t _UIHostingView.transparentBackgroundReasons.getter()
{
  return *(unsigned int *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88));
}

void _UIHostingView.transparentBackgroundReasons.setter(int a1)
{
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x88);
  int v3 = *(_DWORD *)((char *)v1 + v2);
  *(_DWORD *)((char *)v1 + v2) = a1;
  _UIHostingView.transparentBackgroundReasons.didset(v3);
}

__n128 _UIHostingView.explicitSafeAreaInsets.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x90);
  char v3 = v2[32];
  __n128 result = *(__n128 *)v2;
  long long v5 = *((_OWORD *)v2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)v2;
  *(_OWORD *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 32) = v3;
  return result;
}

id _UIHostingView.explicitSafeAreaInsets.setter(uint64_t a1)
{
  outlined init with take of EdgeInsets?(a1, (uint64_t)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x90));

  return objc_msgSend(v1, sel_safeAreaInsetsDidChange);
}

void _UIHostingView.safeAreaRegions.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  _UIHostingView.safeAreaRegions.setter(*(void *)(*(void *)a1 + 24));

  free(v1);
}

void _UIHostingView.currentEvent.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xC8);
  char v3 = *(void **)((char *)v1 + v2);
  *(void *)((char *)v1 + v2) = a1;
}

void (*_UIHostingView.accessibilityEnabled.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  char v3 = malloc(0x28uLL);
  *a1 = v3;
  _OWORD v3[3] = v1;
  uint64_t v4 = *(void *)(*(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68)) + 64);
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = *(unsigned char *)(v4 + 360);
  return _UIHostingView.accessibilityEnabled.modify;
}

void _UIHostingView.accessibilityEnabled.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t _UIHostingView.scrollTest.setter(uint64_t a1)
{
  *(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x190)) = a1;
  return swift_release();
}

uint64_t _UIHostingView.rootViewDelegate.setter(uint64_t a1)
{
  *(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1A0)) = a1;
  return swift_release();
}

uint64_t _UIHostingView.focusedValues.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  uint64_t v4 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1A8);
  *(void *)uint64_t v4 = *(void *)a1;
  v4[8] = v2;
  *((_DWORD *)v4 + 3) = v3;
  swift_release();
  return _UIHostingView.focusedValues.didset();
}

uint64_t _UIHostingView.currentAccessibilityFocusStore.setter(uint64_t a1)
{
  char v2 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1B0);
  *(void *)char v2 = *(void *)a1;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _UIHostingView.currentAccessibilityFocusStore.didset();
}

uint64_t _UIHostingView.setRootView(_:transaction:)(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v3 = *(void *)(v2 + 0x50);
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = &v11[-v5];
  (*(void (**)(unsigned char *, double))(v7 + 16))(&v11[-v5], v4);
  CoreCoordinator.dataSource.setter((uint64_t)v6);
  specialized _UIHostingView.viewGraph.getter();
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = (void *)swift_allocObject();
  _OWORD v9[2] = v3;
  void v9[3] = *(void *)(v2 + 88);
  v9[4] = v8;
  swift_retain();
  swift_retain();
  default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
  GraphHost.asyncTransaction(_:id:_:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t _UIHostingView.rootView.setter(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  specialized _UIHostingView.rootView.setter(a1);
  double v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8);

  return v4(a1);
}

void (*_UIHostingView.rootView.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x50);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  _OWORD v3[3] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[4] = v7;
  CoreCoordinator.dataSource.getter((uint64_t)v7);
  return _UIHostingView.rootView.modify;
}

void _UIHostingView.rootView.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    specialized _UIHostingView.rootView.setter((uint64_t)v3);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized _UIHostingView.rootView.setter(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.getter()
{
  uint64_t v1 = (unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B8);
  swift_beginAccess();
  return *v1;
}

void (*_UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  _OWORD v3[3] = v1;
  uint64_t v4 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1B8);
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = *v4;
  return _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.modify;
}

void _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t _UIHostingView.appliesContainerBackgroundFallbackColor.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0));
}

void _UIHostingView.appliesContainerBackgroundFallbackColor.setter(char a1)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1C0)) = a1;
  _UIHostingView.updateBackgroundColor()();
}

void _UIHostingView.accessibilityFocusedElementDidChange(_:)(void *a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = objc_msgSend(a1, sel_userInfo, v8);
  uint64_t v12 = MEMORY[0x1E4FBC840];
  if (!v11)
  {
    long long v38 = 0u;
    long long v39 = 0u;
LABEL_11:
    _sypSgWOhTm_12((uint64_t)&v38, (unint64_t *)&lazy cache variable for type metadata for Any?, v12 + 8);
    uint64_t v18 = 0;
    goto LABEL_12;
  }
  uint64_t v13 = v11;
  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  *(void *)&long long v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *((void *)&v38 + 1) = v15;
  AnyHashable.init<A>(_:)();
  if (*(void *)(v14 + 16) && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)aBlock), (v17 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v14 + 56) + 32 * v16, (uint64_t)&v38);
  }
  else
  {
    long long v38 = 0u;
    long long v39 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)aBlock);
  if (!*((void *)&v39 + 1)) {
    goto LABEL_11;
  }
  type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
  if (swift_dynamicCast()) {
    uint64_t v18 = (void *)aBlock[0];
  }
  else {
    uint64_t v18 = 0;
  }
LABEL_12:
  id v19 = objc_msgSend(a1, sel_userInfo);
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&long long v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *((void *)&v38 + 1) = v22;
    AnyHashable.init<A>(_:)();
    if (*(void *)(v21 + 16)
      && (unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)aBlock), (v24 & 1) != 0))
    {
      outlined init with copy of Any(*(void *)(v21 + 56) + 32 * v23, (uint64_t)&v38);
    }
    else
    {
      long long v38 = 0u;
      long long v39 = 0u;
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)aBlock);
    if (*((void *)&v39 + 1))
    {
      type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
      if (swift_dynamicCast()) {
        uint64_t v25 = (void *)aBlock[0];
      }
      else {
        uint64_t v25 = 0;
      }
      goto LABEL_23;
    }
  }
  else
  {
    long long v38 = 0u;
    long long v39 = 0u;
  }
  _sypSgWOhTm_12((uint64_t)&v38, (unint64_t *)&lazy cache variable for type metadata for Any?, v12 + 8);
  uint64_t v25 = 0;
LABEL_23:
  uint64_t v27 = *(void *)(v3 + 80);
  uint64_t v26 = *(void *)(v3 + 88);
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  if (specialized static AccessibilityFocus.changed(from:to:within:)((unint64_t)v18, (unint64_t)v25))
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    uint64_t v28 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v29 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v30 = (void *)swift_allocObject();
    v30[2] = v27;
    v30[3] = v26;
    v30[4] = v29;
    aBlock[4] = partial apply for closure #1 in _UIHostingView.accessibilityFocusedElementDidChange(_:);
    aBlock[5] = v30;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_67_2;
    uint64_t v31 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
    type metadata accessor for [DispatchWorkItemFlags]();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (void (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags]);
    uint64_t v32 = v36;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x18C116870](0, v10, v6, v31);
    _Block_release(v31);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v32);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  }
  else
  {
  }
}

uint64_t _UIHostingView.accessibilityDidChange(nodes:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *(void *)(*(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68)) + 64);
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(v3 + 360) == 1)
  {
    unint64_t v5 = a1(result);
    unint64_t v6 = v5;
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v7 = result;
      if (result) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_4:
        if (v7 < 1)
        {
          __break(1u);
          return result;
        }
        for (uint64_t i = 0; i != v7; ++i)
        {
          if ((v6 & 0xC000000000000001) != 0) {
            id v9 = (id)MEMORY[0x18C117680](i, v6);
          }
          else {
            id v9 = *(id *)(v6 + 8 * i + 32);
          }
          uint64_t v10 = v9;
          AccessibilityNode.updatePlatformProperties()();
        }
      }
    }
    return swift_bridgeObjectRelease_n();
  }
  return result;
}

uint64_t _UIHostingView.uiKitAccessibilityElements(options:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68)) + 64);
  swift_beginAccess();
  if ((*(unsigned char *)(v3 + 360) & 1) == 0)
  {
    if (_AXSAccessibilityEnabled()
      || (uint64_t v4 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL),
          Class v5 = NSClassFromString(v4),
          v4,
          v5))
    {
      _UIHostingView.accessibilityEnabled.setter(1);
    }
  }
  uint64_t v6 = type metadata accessor for _UIHostingView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = ViewRendererHost.accessibilityNodes.getter(v6, WitnessTable);
  unint64_t v9 = v8;
  if ((a1 & 2) != 0)
  {
    if (v8 < 0 || (v8 & 0x4000000000000000) != 0)
    {
      unint64_t v22 = swift_bridgeObjectRetain();
      uint64_t v10 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v22);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    v23[0] = v10;
    specialized MutableCollection<>.sort(by:)(v23, 0, 4, 2);
    swift_bridgeObjectRelease();
    unint64_t v9 = v23[0];
  }
  id v11 = static AccessibilityCore.queryFilter(elements:options:)(v9, a1);
  swift_bridgeObjectRelease();
  unint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF08PlatformfB8Protocol_So8NSObjectCXcs5NeverOTg503_s7d4UI17fg58C41_accessibilityUserDefinedLinkedUIElementsSayypGSgvgAA08h3C15bi4_So8J62CXcACcfu_32df5be316035e77621aaf8da9181039cbAcaG_AIXcTf3nnnpk_nTf1cn_n((unint64_t)v11);
  swift_bridgeObjectRelease();
  id v13 = _UIHostingView.foreignSubviews.getter();
  id v14 = objc_msgSend(v13, sel_allObjects);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v15 >> 62)
  {
    type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
    swift_bridgeObjectRetain();
    uint64_t v21 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease_n();
    unint64_t v15 = v21;
  }
  else
  {
    uint64_t v16 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
    if (swift_dynamicCastMetatype() || (uint64_t v19 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_12:
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = v16 + 32;
      while (1)
      {
        v23[1] = (uint64_t)&unk_1ED540FF8;
        if (!swift_dynamicCastObjCProtocolConditional()) {
          break;
        }
        v20 += 8;
        if (!--v19) {
          goto LABEL_12;
        }
      }
      swift_bridgeObjectRelease();
      unint64_t v15 = v16 | 1;
    }
  }
  uint64_t v17 = Array<A>.merge(with:options:)(v15, a1, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v17;
}

Swift::Void __swiftcall _UIHostingView.accessibilityReinstantiateIfNeeded()()
{
}

Swift::Void __swiftcall _UIHostingView.focusDidChange()()
{
  type metadata accessor for _UIHostingView();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v0 = ViewRendererHost.responderNode.getter();
  uint64_t v1 = (void *)FocusBridge.host.getter();
  if (v1)
  {
    uint64_t v2 = v1;
    objc_msgSend(v1, sel_setNeedsFocusUpdate);
  }
  FocusBridge.focusDidChange_PhoneWatch(rootResponder:)(v0);
  swift_release();

  swift_release();
}

uint64_t _UIHostingView.makeViewDebugData()()
{
  _s10Foundation4DataVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Data?, MEMORY[0x1E4F277C0], MEMORY[0x1E4FBB718]);
  static Update.ensure<A>(_:)();
  return v1;
}

uint64_t _UIHostingView.isInsertingRenderedSubview.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8));
}

uint64_t _UIHostingView.isInsertingRenderedSubview.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1D8)) = result;
  return result;
}

void _UIHostingView.printHitTestIfNeeded(at:with:)(void *a1, double a2, double a3)
{
  _eventDebugTriggers.getter();
  if ((v13 & 0x40) != 0 && a1)
  {
    id v12 = a1;
    if (objc_msgSend(v12, sel_type))
    {
    }
    else
    {
      uint64_t v6 = swift_allocObject();
      *(void *)(v6 + 16) = specialized implicit closure #1 in UIView.ancestors.getter;
      *(void *)(v6 + 24) = 0;
      type metadata accessor for ContainerBackgroundHost(0, &lazy cache variable for type metadata for HostingViewProtocol);
      type metadata accessor for DropFirstSequence<UnfoldSequence<UIView, (UIView?, Bool)>>();
      _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type DropFirstSequence<UnfoldSequence<UIView, (UIView?, Bool)>> and conformance DropFirstSequence<A>, (void (*)(uint64_t))type metadata accessor for DropFirstSequence<UnfoldSequence<UIView, (UIView?, Bool)>>);
      Sequence.first<A>(ofType:)();
      uint64_t v7 = swift_release();
      if (v14)
      {

        swift_unknownObjectRelease();
        return;
      }
      uint64_t v8 = MEMORY[0x18C111F70](v7);
      id v9 = (id)_UICurrentHitTestContext();
      uint64_t v10 = v9;
      if (v8)
      {
        if (v9)
        {
          objc_msgSend(v9, sel_radius);
          UIView.printHitTest(_:radius:)(a2, a3, v11);
        }
      }
      else
      {

        if (!v10) {
          UIView.printHitTest(_:radius:)(a2, a3, 1.0);
        }
      }
    }
  }
}

uint64_t _UIHostingView.isExitingForeground.getter()
{
  return *(unsigned __int8 *)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)) + 222);
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    type metadata accessor for (String?, String)();
    type metadata accessor for (key: String?, value: String)();
    uint64_t v4 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v2 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
        uint64_t v2 = v13;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1);
        uint64_t v2 = v13;
      }
      *(void *)(v2 + 16) = v6 + 1;
      uint64_t v7 = (void *)(v2 + 32 * v6);
      v7[4] = v9;
      _OWORD v7[5] = v10;
      void v7[6] = v11;
      v7[7] = v12;
      v4 += 32;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    _s10Foundation4DataVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      uint64_t v2 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v2 = v11;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1);
        uint64_t v2 = v11;
      }
      v4 += 16;
      *(void *)(v2 + 16) = v6 + 1;
      uint64_t v7 = v2 + 16 * v6;
      *(void *)(v7 + 32) = v9;
      *(void *)(v7 + 40) = v10;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    unint64_t v5 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = a1 + 32;
    type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for UIKitProxyFocusItem);
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
    do
    {
      v4 += 16;
      swift_unknownObjectRetain_n();
      swift_dynamicCast();
      swift_unknownObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    unint64_t v5 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = a1 + 32;
    do
    {
      v4 += 8;
      CGFloat._bridgeToObjectiveC()();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    type metadata accessor for (String, String)();
    type metadata accessor for (name: String, value: String)();
    uint64_t v4 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_dynamicCast();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v2 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v13 + 16) + 1, 1);
        uint64_t v2 = v13;
      }
      unint64_t v6 = *(void *)(v2 + 16);
      unint64_t v5 = *(void *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v5 > 1), v6 + 1, 1);
        uint64_t v2 = v13;
      }
      v4 += 32;
      *(void *)(v2 + 16) = v6 + 1;
      uint64_t v7 = (void *)(v2 + 32 * v6);
      v7[4] = v9;
      _OWORD v7[5] = v10;
      void v7[6] = v11;
      v7[7] = v12;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62)
  {
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
    swift_bridgeObjectRetain();
    uint64_t v6 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
    return v6;
  }
  else
  {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
    if (!swift_dynamicCastMetatype())
    {
      uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v4)
      {
        uint64_t v5 = v2 + 32;
        while (swift_dynamicCastObjCProtocolConditional())
        {
          v5 += 8;
          if (!--v4) {
            return v1;
          }
        }
        return v2 | 1;
      }
    }
    return v1;
  }
}

void *_UIHostingView.__allocating_init(rootView:)(objc_class *a1)
{
  uint64_t v3 = specialized _UIHostingView.__allocating_init(rootView:)(a1);
  (*(void (**)(objc_class *))(*(void *)(*(void *)(v1 + 80) - 8) + 8))(a1);
  return v3;
}

void *protocol witness for CurrentEventProvider.currentEvent.getter in conformance _UIHostingView<A>()
{
  uint64_t v0 = (void *)specialized _UIHostingView.currentEvent.getter();
  id v1 = v0;
  return v0;
}

void protocol witness for ContainerBackgroundHost.containerBackgroundFallbackColor.setter in conformance _UIHostingView<A>(void *a1)
{
  specialized _UIHostingView.containerBackgroundFallbackColor.setter(a1);
}

uint64_t _UIHostingView.isInSizeTransition.getter()
{
  return *(unsigned __int8 *)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)) + 225);
}

uint64_t _UIHostingView.environmentOverride.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68));
  uint64_t v3 = *(void *)(v2 + 152);
  uint64_t v4 = *(void *)(v2 + 160);
  *a1 = v3;
  a1[1] = v4;
  return outlined copy of EnvironmentValues?(v3);
}

id thunk for @escaping @callee_guaranteed (@guaranteed _UIGestureRecognizerContainer) -> (@owned String?)(uint64_t a1)
{
  id v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  uint64_t v3 = v1(v2);
  uint64_t v5 = v4;
  swift_release();
  swift_unknownObjectRelease();
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x18C115780](v3, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6;
}

uint64_t _UIHostingView.currentAccessibilityFocusStore.didset()
{
  return swift_release();
}

id _UIHostingView.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void @objc _UIHostingView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized _UIHostingView.init(coder:)();
}

uint64_t _UIHostingView._rendererConfiguration.getter()
{
  return static Update.locked<A>(_:)();
}

uint64_t _UIHostingView._rendererConfiguration.setter()
{
  return swift_release();
}

uint64_t closure #1 in _UIHostingView._rendererConfiguration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = _UIHostingView.base.getter()[9];
  swift_retain();
  swift_release();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 32);
  *a1 = *(void *)(v2 + 24);
  a1[1] = v3;
  swift_retain();
  return swift_release();
}

uint64_t closure #1 in _UIHostingView._rendererConfiguration.setter()
{
  return swift_release();
}

void (*_UIHostingView._rendererConfiguration.modify(void *a1))(void **a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[5] = v1;
  v3[2] = v1;
  static Update.locked<A>(_:)();
  return _UIHostingView._rendererConfiguration.modify;
}

void _UIHostingView._rendererConfiguration.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    swift_retain();
    _UIHostingView._rendererConfiguration.setter();
    swift_release();
  }
  else
  {
    _UIHostingView._rendererConfiguration.setter();
  }

  free(v2);
}

uint64_t _UIHostingView._rendererObject.getter()
{
  _s10Foundation4DataVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Swift.AnyObject?, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBB718]);
  static Update.locked<A>(_:)();
  return v1;
}

uint64_t closure #1 in _UIHostingView._rendererObject.getter@<X0>(uint64_t *a1@<X8>)
{
  _UIHostingView.base.getter();
  swift_retain();
  swift_release();
  uint64_t v2 = DisplayList.ViewRenderer.exportedObject(rootView:)();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

double @objc _UIHostingView.transform3D.getter@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v3 = a1;
  _UIHostingView.transform3D.getter(v12);

  double result = *(double *)v12;
  long long v5 = v12[1];
  long long v6 = v12[2];
  long long v7 = v12[3];
  long long v8 = v12[4];
  long long v9 = v12[5];
  long long v10 = v12[6];
  long long v11 = v12[7];
  *a2 = v12[0];
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  return result;
}

double _UIHostingView.transform3D.getter@<D0>(_OWORD *a1@<X8>)
{
  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for _UIHostingView();
  objc_msgSendSuper2(&v12, sel_transform3D);
  double result = *(double *)&v4;
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  return result;
}

void @objc _UIHostingView.transform3D.setter(void *a1, uint64_t a2, long long *a3)
{
  long long v3 = a3[1];
  v8[0] = *a3;
  v8[1] = v3;
  long long v4 = a3[3];
  void v8[2] = a3[2];
  v8[3] = v4;
  long long v5 = a3[5];
  v8[4] = a3[4];
  v8[5] = v5;
  long long v6 = a3[7];
  _OWORD v8[6] = a3[6];
  v8[7] = v6;
  id v7 = a1;
  _UIHostingView.transform3D.setter(v8);
}

void _UIHostingView.transform3D.setter(long long *a1)
{
  long long v10 = a1[1];
  long long v11 = *a1;
  long long v8 = a1[3];
  long long v9 = a1[2];
  long long v6 = a1[5];
  long long v7 = a1[4];
  long long v5 = a1[6];
  uint64_t v2 = *((void *)a1 + 14);
  uint64_t v3 = *((void *)a1 + 15);
  long long v4 = (objc_class *)type metadata accessor for _UIHostingView();
  v16.receiver = v1;
  v16.super_class = v4;
  objc_msgSendSuper2(&v16, sel_transform3D);
  v15.receiver = v1;
  v15.super_class = v4;
  v12[0] = v11;
  v12[1] = v10;
  unint64_t v12[2] = v9;
  v12[3] = v8;
  v12[4] = v7;
  v12[5] = v6;
  v12[6] = v5;
  uint64_t v13 = v2;
  uint64_t v14 = v3;
  objc_msgSendSuper2(&v15, sel_setTransform3D_, v12);
  _UIHostingView.transform3D.didset((CGFloat *)&v17);
}

void _UIHostingView.transform3D.didset(CGFloat *a1)
{
  CGFloat v1 = *a1;
  CGFloat v2 = a1[1];
  CGFloat v3 = a1[2];
  CGFloat v4 = a1[3];
  CGFloat v5 = a1[4];
  CGFloat v6 = a1[5];
  CGFloat v7 = a1[6];
  CGFloat v8 = a1[7];
  CGFloat v17 = a1[9];
  CGFloat v18 = a1[8];
  CGFloat v15 = a1[11];
  CGFloat v16 = a1[10];
  CGFloat v13 = a1[13];
  CGFloat v14 = a1[12];
  CGFloat v11 = a1[15];
  CGFloat v12 = a1[14];
  long long v9 = _UIHostingView.base.getter();
  uint64_t v10 = MEMORY[0x18C119DF0](v9 + 2);
  if (v10)
  {
    id v19 = (id)v10;
    if (MEMORY[0x18C119DF0](v9 + 3))
    {
      objc_msgSend(v19, sel_transform3D);
      b.m11 = v1;
      b.m12 = v2;
      b.m13 = v3;
      b.m14 = v4;
      b.m21 = v5;
      b.m22 = v6;
      b.m23 = v7;
      b.m24 = v8;
      b.m31 = v18;
      b.m32 = v17;
      b.m33 = v16;
      b.m34 = v15;
      b.m41 = v14;
      b.m42 = v13;
      b.m43 = v12;
      b.m44 = v11;
      if (!CATransform3DEqualToTransform(&a, &b))
      {
        swift_getObjectType();
        LOWORD(a.m11) = 4;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      }
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    swift_release();
  }
}

void @objc _UIHostingView.transform.setter(void *a1, uint64_t a2, long long *a3)
{
  long long v3 = a3[1];
  v5[0] = *a3;
  v5[1] = v3;
  _OWORD v5[2] = a3[2];
  id v4 = a1;
  _UIHostingView.transform.setter(v5);
}

void _UIHostingView.transform.setter(long long *a1)
{
  long long v5 = a1[1];
  long long v6 = *a1;
  uint64_t v2 = *((void *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 5);
  id v4 = (objc_class *)type metadata accessor for _UIHostingView();
  v11.receiver = v1;
  v11.super_class = v4;
  objc_msgSendSuper2(&v11, sel_transform);
  v10.receiver = v1;
  v10.super_class = v4;
  v7[0] = v6;
  v7[1] = v5;
  uint64_t v8 = v2;
  uint64_t v9 = v3;
  objc_msgSendSuper2(&v10, sel_setTransform_, v7);
  _UIHostingView.transform.didset();
}

void _UIHostingView.transform.didset()
{
  uint64_t v0 = _UIHostingView.base.getter();
  uint64_t v1 = MEMORY[0x18C119DF0](v0 + 2);
  if (v1)
  {
    id v2 = (id)v1;
    if (MEMORY[0x18C119DF0](v0 + 3))
    {
      objc_msgSend(v2, sel_transform);
      if ((static CGAffineTransform.== infix(_:_:)() & 1) == 0)
      {
        swift_getObjectType();
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      }
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
  else
  {
    swift_release();
  }
}

void closure #1 in _UIHostingView.setRootView(_:transaction:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    _UIHostingView.updateRootView()();
  }
}

uint64_t closure #1 in _UIHostingView.safeAreaInsets.getter()
{
  return swift_release();
}

id @objc _UIHostingView.backgroundColor.getter(void *a1)
{
  id v1 = a1;
  id v2 = _UIHostingView.backgroundColor.getter();

  return v2;
}

id _UIHostingView.backgroundColor.getter()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for _UIHostingView();
  id v1 = objc_msgSendSuper2(&v3, sel_backgroundColor);

  return v1;
}

uint64_t closure #1 in _UIHostingView.accessibilityFocusedElementDidChange(_:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x18C119DF0](v1);
  if (result)
  {
    objc_super v3 = (void *)result;
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();

    static Update.locked<A>(_:)();
    return swift_release();
  }
  return result;
}

void @objc _UIHostingView.accessibilityFocusedElementDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  _UIHostingView.accessibilityFocusedElementDidChange(_:)(v4);
}

void @objc _UIHostingView.clarityUISettingDidChange(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  _UIHostingView.focusedValues.didset();
}

Class @objc _UIHostingView.accessibilityElements.getter(void *a1, uint64_t a2)
{
  return @objc _UIHostingView.accessibilityElements.getter(a1, a2, 6);
}

Swift::Int __swiftcall _UIHostingView.accessibilityElementCount()()
{
  unint64_t v0 = _UIHostingView.uiKitAccessibilityElements(options:)(4);
  if (v0 >> 62) {
    Swift::Int v1 = _CocoaArrayWrapper.endIndex.getter();
  }
  else {
    Swift::Int v1 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  return v1;
}

Swift::Int @objc _UIHostingView.accessibilityElementCount()(void *a1)
{
  id v1 = a1;
  Swift::Int v2 = _UIHostingView.accessibilityElementCount()();

  return v2;
}

uint64_t @objc _UIHostingView.accessibilityShouldEnumerateContainerElementsArrayDirectly()()
{
  return 1;
}

Class @objc _UIHostingView.automationElements.getter(void *a1, uint64_t a2)
{
  return @objc _UIHostingView.accessibilityElements.getter(a1, a2, 1);
}

Class @objc _UIHostingView.accessibilityElements.getter(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  id v5 = _UIHostingView.accessibilityElements.getter(a3);

  if (v5)
  {
    v6.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.Class isa = 0;
  }

  return v6.super.isa;
}

char *_UIHostingView.accessibilityElements.getter(uint64_t a1)
{
  unint64_t v1 = _UIHostingView.uiKitAccessibilityElements(options:)(a1);
  Swift::Int v2 = specialized _arrayForceCast<A, B>(_:)(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t @objc _UIHostingView._accessibilityAutomationHitTestReverseOrder()()
{
  return 1;
}

uint64_t @objc _UIHostingView._accessibilityIsSwiftUIHostingView()()
{
  return 1;
}

uint64_t @objc _UIHostingView._accessibilityIsSwiftUIHostingCellView.getter()
{
  return 0;
}

uint64_t closure #1 in _UIHostingView.accessibilityReinstantiateIfNeeded()()
{
  return swift_release();
}

void @objc _UIHostingView.accessibilityReinstantiateIfNeeded()(void *a1)
{
  id v1 = a1;
  _UIHostingView.accessibilityReinstantiateIfNeeded()();
}

uint64_t _UIHostingView.forEachIdentifiedView(body:)(void (*a1)(unsigned char *), uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  CGFloat v7 = (void *)swift_allocObject();
  _OWORD v7[2] = *(void *)(v5 + 80);
  v7[3] = *(void *)(v5 + 88);
  v7[4] = v6;
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  ViewRendererHost.preferenceValue<A>(_:)();
  swift_retain();
  specialized _IdentifiedViewTree.forEach(_:)((uint64_t)v9, (uint64_t)partial apply for closure #1 in _UIHostingView.forEachIdentifiedView(body:), (uint64_t)v7, a1, a2);
  swift_release();
  outlined destroy of _IdentifiedViewTree((uint64_t)v9);
  return swift_release();
}

void closure #1 in _UIHostingView.forEachIdentifiedView(body:)(double *a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  id v4 = (void *)MEMORY[0x18C119DF0](v3);
  double v5 = *a1;
  uint64_t v6 = *((void *)a1 + 1);
  uint64_t v7 = *((void *)a1 + 2);
  uint64_t v8 = *((void *)a1 + 3);
  if (v4)
  {
    uint64_t v9 = v4;
    objc_msgSend(v4, sel_convertRect_fromView_, 0, *a1, a1[1], a1[2], a1[3]);
    double v5 = v10;
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    uint64_t v8 = v13;
  }
  *a1 = v5;
  *((void *)a1 + 1) = v6;
  *((void *)a1 + 2) = v7;
  *((void *)a1 + 3) = v8;
}

void _UIHostingView.forEachDescendantHost(body:)(void (*a1)(void *, uint64_t), uint64_t a2)
{
  specialized UIView.forEachDescendant(_:)(v2, a1, a2);
}

uint64_t _UIHostingView._viewDebugData()()
{
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  uint64_t v0 = ViewGraph.viewDebugData()();
  swift_release();
  return v0;
}

uint64_t @objc _UIHostingView.canBecomeFirstResponder.getter(void *a1)
{
  id v1 = a1;
  char v2 = _UIHostingView.canBecomeFirstResponder.getter();

  return v2 & 1;
}

uint64_t _UIHostingView.canBecomeFirstResponder.getter()
{
  swift_retain();
  uint64_t v0 = FocusBridge.host.getter();
  if (v0)
  {
    char v2 = (void *)v0;
    uint64_t v3 = v1;
    if (FocusBridge.canAcceptFocus.getter())
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(v3 + 8) + 48))(ObjectType);
      if (v5)
      {
        MEMORY[0x1F4188790](v5);
        MEMORY[0x1F4188790](v6);
        dispatch thunk of ResponderNode.visit(applying:)();
        swift_release();
        swift_release();

        return 0;
      }
    }
    swift_release();
  }
  else
  {
    swift_release();
  }
  return 0;
}

uint64_t @objc _UIHostingView._swiftuiReturnsSubviewsInFocusItemsInRect()()
{
  return 1;
}

void _UIHostingView.focusItems(in:)(double a1, double a2, double a3, double a4)
{
  uint64_t v5 = v4;
  double v10 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v11 = (objc_class *)type metadata accessor for _UIHostingView();
  v21.receiver = v4;
  v21.super_class = v11;
  id v12 = objc_msgSendSuper2(&v21, sel_focusItemsInRect_, a1, a2, a3, a4);
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v20 = MEMORY[0x1E4FBC860];
  if (v13 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_3;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    unint64_t v16 = MEMORY[0x1E4FBC860];
    goto LABEL_15;
  }
  uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v14) {
    goto LABEL_14;
  }
LABEL_3:
  if (v14 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v14; ++i)
  {
    if ((v13 & 0xC000000000000001) != 0) {
      MEMORY[0x18C117680](i, v13);
    }
    else {
      swift_unknownObjectRetain();
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      swift_unknownObjectRelease();
    }
    else
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v16 = v20;
  double v10 = (void *)MEMORY[0x1E4FBC8C8];
LABEL_15:
  CGFloat v17 = (void *)MEMORY[0x18C119DF0]((char *)v5 + *(void *)((*v10 & *v5) + 0xC0));
  if (!v17
    || (CGFloat v18 = v17,
        unsigned __int8 v19 = objc_msgSend(v17, sel__shouldIgnoreChildFocusRegions),
        v18,
        (v19 & 1) == 0))
  {
    UIKitContainerFocusItem.childFocusItems(in:)((uint64_t)v11, (uint64_t)&protocol witness table for _UIHostingView<A>, a1, a2, a3, a4);
    specialized Array.append<A>(contentsOf:)(v16);
  }
}

Class @objc _UIHostingView.focusItems(in:)(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  _UIHostingView.focusItems(in:)(a2, a3, a4, a5);

  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusItem);
  v10.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v10.super.isa;
}

uint64_t static _UIHostingView._supportsInvalidatingFocusCache()()
{
  return 1;
}

Class @objc _UIHostingView.preferredFocusEnvironments.getter(void *a1, uint64_t a2)
{
  return @objc _UIHostingView.preferredFocusEnvironments.getter(a1, a2, (void (*)(void))_UIHostingView.preferredFocusEnvironments.getter, (unint64_t *)&lazy cache variable for type metadata for UIFocusEnvironment);
}

void @objc _UIHostingView.didUpdateFocus(in:with:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  specialized _UIHostingView.didUpdateFocus(in:with:)(v6);
}

void @objc _UIHostingView.keyboardWillShow(notification:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  _UIHostingView.keyboardWillShow(notification:)((NSNotification)v4);
}

void @objc _UIHostingView.keyboardWillHide(notification:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  _UIHostingView.keyboardWillHide(notification:)((NSNotification)v4);
}

void @objc _UIHostingView.keyboardFrameWillChange(notification:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  _UIHostingView.keyboardFrameWillChange(notification:)((NSNotification)v4);
}

uint64_t _UIHostingView.addsKeyboardToSafeAreaInsets.getter()
{
  uint64_t v1 = (unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB8);
  swift_beginAccess();
  return (*v1 >> 1) & 1;
}

uint64_t _UIHostingView.addsKeyboardToSafeAreaInsets.setter(char a1)
{
  char v2 = (void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xB8));
  if (a1)
  {
    swift_beginAccess();
    uint64_t v3 = *v2 | 2;
  }
  else
  {
    swift_beginAccess();
    uint64_t v3 = *v2 & 0xFFFFFFFFFFFFFFFDLL;
  }
  return _UIHostingView.safeAreaRegions.setter(v3);
}

void (*_UIHostingView.addsKeyboardToSafeAreaInsets.modify(void *a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  _OWORD v3[3] = v1;
  id v4 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xB8);
  swift_beginAccess();
  *((unsigned char *)v3 + 32) = (*v4 & 2) != 0;
  return _UIHostingView.addsKeyboardToSafeAreaInsets.modify;
}

void _UIHostingView.addsKeyboardToSafeAreaInsets.modify(uint64_t a1, uint64_t a2)
{
}

void _UIHostingView.accessibilityEnabled.modify(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(void *)a1 + 32));

  free(v3);
}

Class @objc _UIHostingView.makeViewDebugData()(void *a1)
{
  id v1 = a1;
  uint64_t v2 = _UIHostingView.makeViewDebugData()();
  unint64_t v4 = v3;

  if (v4 >> 60 == 15)
  {
    Class isa = 0;
  }
  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data?(v2, v4);
  }

  return isa;
}

void __swiftcall _UIHostingView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  Class isa = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  id v7 = (void *)MEMORY[0x1E4FBC8C8];
  _UIHostingView.printHitTestIfNeeded(at:with:)(with.value.super.isa, _.x, _.y);
  v27.receiver = v3;
  v27.super_class = (Class)type metadata accessor for _UIHostingView();
  id v8 = -[UIView_optional hitTest:withEvent:](&v27, sel_hitTest_withEvent_, isa, x, y);
  if (MEMORY[0x18C111F70]())
  {
    id v9 = (id)_UICurrentHitTestContext();
    if (v9)
    {
    }
    else if ((static CoreTesting.isRunning.getter() & 1) == 0)
    {
      return;
    }
    if (v8)
    {
      uint64_t v25 = isa;
      id v26 = v8;
      id v10 = v8;
      id v11 = _UIHostingView.foreignSubviews.getter();
      id v12 = objc_msgSend(v11, sel_allObjects);

      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v13 >> 62) {
        goto LABEL_24;
      }
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (v14)
      {
        uint64_t v15 = 4;
        while (1)
        {
          id v16 = (v13 & 0xC000000000000001) != 0
              ? (id)MEMORY[0x18C117680](v15 - 4, v13)
              : *(id *)(v13 + 8 * v15);
          CGFloat v17 = v16;
          uint64_t v18 = v15 - 3;
          if (__OFADD__(v15 - 4, 1)) {
            break;
          }
          unsigned int v19 = objc_msgSend(v10, sel_isDescendantOfView_, v16);

          if (v19)
          {

            swift_bridgeObjectRelease();
            return;
          }
          ++v15;
          if (v18 == v14) {
            goto LABEL_15;
          }
        }
        __break(1u);
LABEL_24:
        swift_bridgeObjectRetain();
        uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
LABEL_15:

      swift_bridgeObjectRelease();
      Class isa = v25;
      id v8 = v26;
      id v7 = (void *)MEMORY[0x1E4FBC8C8];
    }
    uint64_t v20 = *(void *)((*v7 & *v3) + 0xC8);
    objc_super v21 = *(void **)((char *)v3 + v20);
    *(void *)((char *)v3 + v20) = isa;
    unint64_t v22 = isa;

    if (UIViewIgnoresTouchEvents())
    {
    }
    else
    {
      unsigned __int8 v23 = objc_msgSend(v3, sel_pointInside_withEvent_, v22, x, y);

      if (v23) {
        char v24 = v3;
      }
    }
  }
}

id @objc _UIHostingView.hitTest(_:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  id v10 = a1;
  v16.value.super.Class isa = (Class)a5;
  _UIHostingView.hitTest(_:with:)(v11, (CGPoint)__PAIR128__(*(unint64_t *)&a3, *(unint64_t *)&a2), v16);
  unint64_t v13 = v12;

  return v13;
}

void _UIHostingView._hitTest(with:)(void *a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  if ((MEMORY[0x18C111F70]() & 1) == 0)
  {
    uint64_t v17 = *(void *)((*v4 & *v1) + 0xC8);
    uint64_t v18 = *(void **)((char *)v1 + v17);
    *(void *)((char *)v1 + v17) = 0;

    return;
  }
  MEMORY[0x18C113CA0]();
  _UIHostingView.updateTransformWithoutGeometryObservation()();
  if (a1)
  {
    objc_msgSend(a1, sel_point);
    double v6 = v5;
    double v8 = v7;
    objc_msgSend(a1, sel_radius);
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    if (!ViewRendererHost.responderNode.getter()) {
      goto LABEL_37;
    }
    type metadata accessor for ViewResponder();
    if (swift_dynamicCastClass())
    {
      uint64_t v32 = 0;
      char v34 = 1;
      uint64_t v9 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
      swift_release();
      if (!v9) {
        goto LABEL_37;
      }
      int v10 = static ViewResponder.hitTestKey.getter();
      type metadata accessor for UIViewResponder();
      uint64_t v11 = swift_dynamicCastClass();
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v13 = MEMORY[0x18C119DF0](v11 + 40);
        if (v13)
        {
          uint64_t v14 = (void *)v13;
          swift_retain();
          id v15 = closure #1 in _UIHostingView._hitTest(with:)(v12, v10, v14, v2, v6, v8);
          if (v15)
          {
            id v16 = v15;
            if (!objc_msgSend(v16, sel__hitTestWithContext_, a1)) {
              v16;
            }
            _eventDebugTriggers.getter();

            goto LABEL_19;
          }

          swift_release_n();
LABEL_37:
          static Update.end()();
          uint64_t v27 = *(void *)((*v4 & *v2) + 0xC8);
          uint64_t v28 = *(void **)((char *)v2 + v27);
          *(void *)((char *)v2 + v27) = 0;

          uint64_t v29 = v2;
          return;
        }
      }
      if (swift_conformsToProtocol2()) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 0;
      }
      if (v19)
      {
        swift_retain();
        if (dispatch thunk of ViewResponder.gestureContainer.getter())
        {
          swift_unknownObjectRetain();
          _eventDebugTriggers.getter();
          swift_unknownObjectRelease();
LABEL_19:
          swift_release_n();
LABEL_38:
          static Update.end()();
          uint64_t v30 = *(void *)((*v4 & *v2) + 0xC8);
          uint64_t v31 = *(void **)((char *)v2 + v30);
          *(void *)((char *)v2 + v30) = 0;

          return;
        }
        swift_release();
      }
      swift_retain();
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        while (1)
        {
          uint64_t v20 = dispatch thunk of ViewResponder.gestureContainer.getter();
          if (v20) {
            break;
          }
          uint64_t v21 = swift_dynamicCastClass();
          if (v21)
          {
            uint64_t v20 = MEMORY[0x18C119DF0](v21 + 48);
            if (v20) {
              break;
            }
          }
          swift_release();
          swift_beginAccess();
          if (!swift_weakLoadStrong()) {
            goto LABEL_29;
          }
        }
        unint64_t v22 = (void *)v20;
        swift_release();
        goto LABEL_31;
      }
LABEL_29:
      swift_beginAccess();
      if (MEMORY[0x18C119DF0](v9 + 16))
      {
        uint64_t v23 = *(void *)(v9 + 24);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v25 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 16))(&v33, v25, v25, ObjectType, v23);
        swift_unknownObjectRelease();
        unint64_t v22 = v33;
        if (v33)
        {
LABEL_31:
          swift_release();
          swift_getObjectType();
          if (v22 != v2)
          {
            _eventDebugTriggers.getter();
            if ((v33 & 0x20) != 0)
            {
              id v26 = v22;
              specialized printGestureContainerAncestors(_:)();
            }
            swift_release();
            goto LABEL_38;
          }

          goto LABEL_36;
        }
      }
      swift_release();
    }
LABEL_36:
    swift_release();
    goto LABEL_37;
  }
  __break(1u);
}

id closure #1 in _UIHostingView._hitTest(with:)(uint64_t a1, int a2, void *a3, void *a4, double a5, double a6)
{
  uint64_t v11 = a1 + 160;
  swift_beginAccess();
  outlined init with copy of PlatformViewResponderBase.PlatformHitTestResult?(v11, (uint64_t)v14);
  if (v14[32] == 1)
  {
    _sypSgWOhTm_12((uint64_t)v14, &lazy cache variable for type metadata for PlatformViewResponderBase.PlatformHitTestResult?, (uint64_t)&type metadata for PlatformViewResponderBase.PlatformHitTestResult);
LABEL_6:
    objc_msgSend(a3, sel_convertPoint_fromView_, 0, a5, a6);
    return objc_msgSend(a3, sel_hitTest_withEvent_, *(void *)((char *)a4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a4) + 0xC8)));
  }
  outlined init with take of PlatformViewResponderBase.PlatformHitTestResult((uint64_t)v14, (uint64_t)v15);
  if (v15[0] != a2)
  {
    outlined destroy of PlatformViewResponderBase.PlatformHitTestResult((uint64_t)v15);
    goto LABEL_6;
  }
  uint64_t v12 = MEMORY[0x18C119DF0](&v16);
  outlined destroy of PlatformViewResponderBase.PlatformHitTestResult((uint64_t)v15);
  return (id)v12;
}

id @objc _UIHostingView._hitTest(with:)(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  _UIHostingView._hitTest(with:)(a3);
  double v8 = v7;

  return v8;
}

Class @objc _UIHostingView._childContainers.getter(void *a1, uint64_t a2)
{
  return @objc _UIHostingView.preferredFocusEnvironments.getter(a1, a2, (void (*)(void))_UIHostingView._childContainers.getter, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
}

Class @objc _UIHostingView.preferredFocusEnvironments.getter(void *a1, uint64_t a2, void (*a3)(void), unint64_t *a4)
{
  id v6 = a1;
  a3();

  type metadata accessor for _UISceneBSActionHandler(0, a4);
  v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v7.super.isa;
}

uint64_t _UIHostingView._childContainers.getter()
{
  char v1 = MEMORY[0x18C111F70]();
  uint64_t v2 = (objc_class *)type metadata accessor for _UIHostingView();
  if ((v1 & 1) == 0)
  {
    v10.receiver = v0;
    v10.super_class = v2;
    id v4 = objc_msgSendSuper2(&v10, sel__childGestureRecognizerContainers);
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
    unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    return v3;
  }
  swift_getWitnessTable();
  if (ViewRendererHost.responderNode.getter())
  {
    type metadata accessor for ViewResponder();
    if (swift_dynamicCastClass()) {
      unint64_t v3 = ViewResponder.childGestureContainers.getter();
    }
    else {
      unint64_t v3 = MEMORY[0x1E4FBC860];
    }
    swift_release();
  }
  else
  {
    unint64_t v3 = MEMORY[0x1E4FBC860];
  }
  if (!(v3 >> 62))
  {
    uint64_t v5 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
    if (swift_dynamicCastMetatype() || (uint64_t v7 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_11:
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = v5 + 32;
      while (swift_dynamicCastObjCProtocolConditional())
      {
        v8 += 8;
        if (!--v7) {
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease();
      return v5 | 1;
    }
    return v3;
  }
  type metadata accessor for _UISceneBSActionHandler(0, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
  swift_bridgeObjectRetain();
  uint64_t v9 = _bridgeCocoaArray<A>(_:)();
  swift_bridgeObjectRelease_n();
  return v9;
}

uint64_t @objc _UIHostingView._intelligenceBaseClass.getter()
{
  specialized _UIHostingView._intelligenceBaseClass.getter();

  return swift_getObjCClassFromMetadata();
}

void @objc _UIHostingView._intelligenceCollectContent(in:collector:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IntelligenceElement.Content();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v9 = a3;
  id v10 = a1;
  UIIntelligenceElementCollector.createRemoteContext(description:)();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FB0B80], v5);
  UIIntelligenceElementCollector.collect(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t _UIHostingView._intelligenceCollectRemoteContent(in:remoteContextWrapper:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  uint64_t v10 = type metadata accessor for _UIHostingView();
  unint64_t WitnessTable = swift_getWitnessTable();

  return IntelligenceSupportProviding<>.collectContent(in:remoteContextWrapper:)(a2, a3, a4, a5, a1, v10, (void (*)(uint64_t, uint64_t))&protocol witness table for UIView, WitnessTable);
}

void @objc _UIHostingView._intelligenceCollectRemoteContent(in:remoteContextWrapper:)(void *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, void *a7)
{
  id v12 = a7;
  id v13 = a1;
  _UIHostingView._intelligenceCollectRemoteContent(in:remoteContextWrapper:)((uint64_t)v12, a2, a3, a4, a5);
}

id _UIHostingView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  id v9 = objc_allocWithZone(v4);

  return objc_msgSend(v9, sel_initWithFrame_, a1, a2, a3, a4);
}

void _UIHostingView.init(frame:)()
{
}

void @objc _UIHostingView.init(frame:)()
{
}

uint64_t (*_UIHostingView.environmentOverride.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[2] = (uint64_t)v1;
  uint64_t v3 = *(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68));
  uint64_t v4 = *(void *)(v3 + 152);
  uint64_t v5 = *(void *)(v3 + 160);
  *a1 = v4;
  a1[1] = v5;
  outlined copy of EnvironmentValues?(v4);
  return _UIHostingView.environmentOverride.modify;
}

uint64_t _UIHostingView.environmentOverride.modify(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (a2)
  {
    *(void *)&long long v5 = *a1;
    *((void *)&v5 + 1) = v2;
    outlined copy of EnvironmentValues?(v3);
    _UIHostingView.environmentOverride.setter(&v5);
    return outlined consume of EnvironmentValues?(v3);
  }
  else
  {
    *(void *)&long long v5 = *a1;
    *((void *)&v5 + 1) = v2;
    return _UIHostingView.environmentOverride.setter(&v5);
  }
}

void (*_UIHostingView.isHiddenForReuse.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(*(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68)) + 220);
  return _UIHostingView.isHiddenForReuse.modify;
}

void _UIHostingView.isHiddenForReuse.modify(uint64_t a1)
{
  *(unsigned char *)(*(void *)(*(void *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)a1) + 0x68)) + 220) = *(unsigned char *)(a1 + 8);
  UIHostingViewBase.updateRemovedState(uiView:)(0);
}

uint64_t _UIHostingView.isEnteringForeground.getter()
{
  return *(unsigned __int8 *)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)) + 221);
}

uint64_t _UIHostingView.isCapturingSnapshots.getter()
{
  return *(unsigned __int8 *)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)) + 223);
}

uint64_t _UIHostingView.isInSizeTransition.setter(uint64_t result)
{
  *(unsigned char *)(*(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68)) + 225) = result;
  return result;
}

void *_UIHostingView.sceneActivationState.getter()
{
  uint64_t v1 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68));
  uint64_t result = (void *)MEMORY[0x18C119DF0](v1 + 16);
  if (result)
  {
    uint64_t v3 = result;
    id v4 = objc_msgSend(result, sel_window);

    if (v4
      && (id v5 = objc_msgSend(v4, sel__windowHostingScene), v4, v5))
    {

      return *(void **)(v1 + 232);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

Swift::Void __swiftcall _UIHostingView.setTestSize(_:)(CGSize a1)
{
  double height = a1.height;
  double width = a1.width;
  static CGSize.deviceSize.getter();
  if (v5 == width && v4 == height)
  {
    uint64_t v7 = self;
    id v8 = objc_msgSend(v7, sel_currentDevice);
    specialized UIDevice.screenSize.getter();
    double width = v9;
    double v11 = v10;

    id v12 = objc_msgSend(v7, sel_currentDevice);
    id v13 = objc_msgSend(v12, sel_userInterfaceIdiom);

    if (v13 == (id)1 && width < v11)
    {
      double height = width;
      double width = v11;
    }
    else
    {
      double height = v11;
      if (!v13)
      {
        double height = v11 >= width ? v11 : width;
        if (v11 < width) {
          double width = v11;
        }
      }
    }
  }
  objc_msgSend(v1, sel_bounds);
  if (v16 != width || v15 != height)
  {
    uint64_t v18 = (void *)MEMORY[0x1E4FBC8C8];
    *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x80)) = 1;
    objc_msgSend(v1, sel_setBounds_);
    *((unsigned char *)v1 + *(void *)((*v18 & *v1) + 0x80)) = 0;
  }
}

double _UIHostingView.testSize.getter()
{
  objc_msgSend(v0, sel_bounds);
  return v1;
}

uint64_t _UIHostingView.attributeCountInfo.getter()
{
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();

  return ViewRendererHost.preferenceValue<A>(_:)();
}

id _UIHostingView.setTestSafeAreaInsets(_:)(double a1, double a2, double a3, double a4)
{
  *(double *)uint64_t v6 = a1;
  *(double *)&v6[1] = a2;
  *(double *)&_OWORD v6[2] = a3;
  *(double *)&_OWORD v6[3] = a4;
  char v7 = 0;
  outlined init with take of EdgeInsets?((uint64_t)v6, (uint64_t)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x90));
  return objc_msgSend(v4, sel_safeAreaInsetsDidChange);
}

Swift::Void __swiftcall _UIHostingView._renderForTest(interval:)(Swift::Double interval)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  ViewRendererHost.advanceTimeForTest(interval:)(interval);
  *(unsigned char *)(*(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0x68)) + 216) = 0;
  uint64_t v6 = 16;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSRunLoop);
  double v4 = self;
  swift_beginAccess();
  while (!__OFSUB__(v6, 1))
  {
    --v6;
    static CoreTesting.needsRender.setter();
    swift_getWitnessTable();
    ViewGraphDelegate.updateGraph<A>(body:)();
    static NSRunLoop.flushObservers()();
    LOBYTE(v5) = 1;
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    objc_msgSend(v4, sel_flush, 0, v5);
    if (!specialized shouldContinue #1 <A>() in _UIHostingView._renderForTest(interval:)((uint64_t)v1, &v6))
    {
      static CoreTesting.needsRender.setter();
      *(unsigned char *)(*(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0x68)) + 216) = 1;
      return;
    }
  }
  __break(1u);
}

BOOL specialized shouldContinue #1 <A>() in _UIHostingView._renderForTest(interval:)(uint64_t a1, void *a2)
{
  _UIHostingView.propertiesNeedingUpdate.getter(v4);
  if (!v4[0] && (static CoreTesting.needsRender.getter() & 1) == 0) {
    return 0;
  }
  swift_beginAccess();
  return *a2 >= 0;
}

Swift::Bool __swiftcall _UIHostingView._renderAsyncForTest(interval:)(Swift::Double interval)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  ViewRendererHost.advanceTimeForTest(interval:)(interval);
  *(unsigned char *)(*(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0x68)) + 216) = 0;
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSRunLoop);
  char v4 = 1;
  while (1)
  {
    uint64_t v6 = static NSRunLoop.flushObservers()();
    MEMORY[0x1F4188790](v6);
    static Update.locked<A>(_:)();
    if (v9 != 1) {
      break;
    }
    objc_msgSend(self, sel_flush);
    if (v4)
    {
      specialized _UIHostingView.viewGraph.getter();
      swift_retain();
      char v5 = ViewGraph.updateRequiredMainThread.getter();
      swift_release();
      char v4 = v5 ^ 1;
    }
    else
    {
      char v4 = 0;
    }
    _UIHostingView.propertiesNeedingUpdate.getter(v8);
    if (!v8[0]) {
      goto LABEL_8;
    }
  }
  char v4 = 0;
LABEL_8:
  *(unsigned char *)(*(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0x68)) + 216) = 1;
  return v4 & 1;
}

uint64_t closure #1 in _UIHostingView._renderAsyncForTest(interval:)@<X0>(BOOL *a1@<X8>)
{
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  uint64_t result = ViewRendererHost.renderAsync(interval:targetTimestamp:)();
  *a1 = (v3 & 1) == 0;
  return result;
}

uint64_t _UIHostingView._performScrollTest(startOffset:iterations:delta:length:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  char v7 = (void *)MEMORY[0x1E4FBC8C8];
  id v8 = (void *)(*MEMORY[0x1E4FBC8C8] & *v6);
  uint64_t v9 = v8[50];
  if (*(void *)((char *)v6 + v9))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for ScrollTest();
    uint64_t result = swift_allocObject();
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(void *)(result + 88) = 0;
    *(double *)(result + 16) = a4;
    *(void *)(result + 24) = a1;
    *(double *)(result + 32) = a5;
    *(double *)(result + 40) = a6;
    *(unsigned char *)(result + 48) = 1;
    *(void *)((char *)v6 + v9) = result;
    if (*(void *)((char *)v6 + *(void *)((*v7 & *v6) + 0x190)))
    {
      uint64_t v17 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v18 = (void *)swift_allocObject();
      v18[2] = v8[10];
      v18[3] = v8[11];
      void v18[4] = a2;
      v18[5] = a3;
      void v18[6] = v17;
      swift_retain();
      outlined copy of AppIntentExecutor?(a2);
      swift_retain();
      ScrollTest.run<A>(in:completion:)((uint64_t)v6, (uint64_t (*)(uint64_t))partial apply for closure #1 in _UIHostingView._performScrollTest(startOffset:iterations:delta:length:completion:));
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

void *closure #1 in _UIHostingView._performScrollTest(startOffset:iterations:delta:length:completion:)(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 + 16;
  if (a1) {
    a1();
  }
  swift_beginAccess();
  uint64_t result = (void *)MEMORY[0x18C119DF0](v3);
  if (result)
  {
    *(void *)((char *)result + *(void *)((*MEMORY[0x1E4FBC8C8] & *result) + 0x190)) = 0;

    return (void *)swift_release();
  }
  return result;
}

uint64_t _UIHostingView.viewCacheIsEmpty.getter()
{
  static Update.locked<A>(_:)();
  return v1;
}

uint64_t closure #1 in _UIHostingView.viewCacheIsEmpty.getter@<X0>(unsigned char *a1@<X8>)
{
  _UIHostingView.base.getter();
  swift_retain();
  swift_release();
  char v2 = DisplayList.ViewRenderer.viewCacheIsEmpty.getter();
  uint64_t result = swift_release();
  *a1 = v2 & 1;
  return result;
}

Swift::Void __swiftcall _UIHostingView.dismissActivePresentations()()
{
  unsigned __int8 v1 = self;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in _UIHostingView.dismissActivePresentations();
  *(void *)(v3 + 24) = v2;
  v7[4] = partial apply for thunk for @callee_guaranteed () -> ();
  _OWORD v7[5] = v3;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  _OWORD v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_23_0;
  char v4 = _Block_copy(v7);
  id v5 = v0;
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel__performWithoutDeferringTransitions_, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
}

void closure #1 in _UIHostingView.dismissActivePresentations()(void *a1)
{
  unsigned __int8 v1 = (void *)MEMORY[0x18C119DF0]((char *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0xC0));
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_presentedViewController);

    if (v3)
    {
      objc_msgSend(v3, sel_dismissViewControllerAnimated_completion_, 0, 0);
    }
  }
}

void protocol witness for TestHost.sendTestEvents(_:) in conformance _UIHostingView<A1>(Swift::OpaquePointer a1)
{
  swift_getWitnessTable();

  ViewRendererHost.sendTestEvents(_:)(a1);
}

void protocol witness for TestHost.resetTestEvents() in conformance _UIHostingView<A1>()
{
  swift_getWitnessTable();

  ViewRendererHost.resetTestEvents()();
}

uint64_t (*protocol witness for TestHost.environmentOverride.modify in conformance _UIHostingView<A>(uint64_t **a1))()
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)_UIHostingView.environmentOverride.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*protocol witness for TestHost.isHiddenForReuse.modify in conformance _UIHostingView<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.isHiddenForReuse.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for TestHost.invalidateProperties(_:mayDeferUpdate:) in conformance _UIHostingView<A1>()
{
  swift_getWitnessTable();

  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t (*protocol witness for TestHost.accessibilityEnabled.modify in conformance _UIHostingView<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.accessibilityEnabled.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    _s10Foundation4DataVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt8>, MEMORY[0x1E4FBC358], MEMORY[0x1E4FBBE00]);
    double v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    double v10 = (char *)MEMORY[0x1E4FBC860];
  }
  id v12 = v10 + 32;
  id v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

id specialized closure #1 in sequence<A>(first:next:)(uint64_t a1, void (*a2)(id *__return_ptr, id *))
{
  id v3 = *(id *)a1;
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    *(unsigned char *)(a1 + 8) = 0;
    id v4 = v3;
  }
  else if (v3)
  {
    id v9 = *(id *)a1;
    id v6 = v3;
    a2(&v10, &v9);

    id v3 = v10;
    id v7 = v10;

    *(void *)a1 = v3;
  }
  return v3;
}

uint64_t specialized _UIHostingView.containerBackgroundFallbackColor.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8));
}

uint64_t sub_1881B5024()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1881B505C()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in _UIHostingView.setRootView(_:transaction:)()
{
  closure #1 in _UIHostingView.setRootView(_:transaction:)(*(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in _UIHostingView.makeViewDebugData()@<X0>(uint64_t *a1@<X8>)
{
  _UIHostingView._viewDebugData()();
  uint64_t v2 = static _ViewDebug.serializedData(_:)();
  uint64_t v4 = v3;
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  a1[1] = v4;
  return result;
}

uint64_t specialized _UIHostingView.currentEvent.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xC8));
}

void specialized _UIHostingView.containerBackgroundFallbackColor.setter(void *a1)
{
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1C8);
  uint64_t v3 = *(void **)((char *)v1 + v2);
  *(void *)((char *)v1 + v2) = a1;
  id v4 = a1;

  _UIHostingView.updateBackgroundColor()();
}

uint64_t _UIHostingView.focusedValues.didset()
{
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

void specialized _UIHostingView.init(coder:)()
{
  unsigned __int8 v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  *(_DWORD *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70)) = 0;
  *((unsigned char *)v0 + *(void *)((*v2 & *v0) + 0x78)) = 0;
  *((unsigned char *)v0 + *(void *)((*v2 & *v0) + 0x80)) = 1;
  *(_DWORD *)((char *)v0 + *(void *)((*v2 & *v0) + 0x88)) = 0;
  uint64_t v3 = (char *)v1 + *(void *)((*v2 & *v1) + 0x90);
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  v3[32] = 1;
  id v4 = (char *)v1 + *(void *)((*v2 & *v1) + 0x98);
  *(_OWORD *)id v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  *(_DWORD *)((char *)v0 + *(void *)((*v2 & *v0) + 0xA0)) = 0;
  *(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0xA8)) = 0;
  *(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0xB0)) = 0;
  *(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0xC8)) = 0;
  *((unsigned char *)v0 + *(void *)((*v2 & *v0) + 0xD8)) = 2;
  uint64_t v5 = *(void *)((*v2 & *v0) + 0xE0);
  type metadata accessor for DeprecatedAlertBridge();
  *(void *)((char *)v0 + v5) = DeprecatedAlertBridge.__allocating_init(style:)(1);
  uint64_t v6 = *(void *)((*v2 & *v0) + 0xE8);
  type metadata accessor for DeprecatedAlertBridge();
  *(void *)((char *)v0 + v6) = DeprecatedAlertBridge.__allocating_init(style:)(0);
  *(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0xF0)) = 1;
  uint64_t v7 = *(void *)((*v2 & *v0) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  *(void *)(v8 + 32) = 0;
  *(void *)(v8 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v9 = MEMORY[0x1E4FBC860];
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v8 + 48) = 0;
  *(void *)(v8 + 56) = v9;
  *(void *)(v8 + 64) = v10;
  EnvironmentValues.init()();
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(void *)(v8 + 136) = 1;
  *(_DWORD *)(v8 + 144) = 0;
  swift_weakInit();
  *(void *)(v8 + 160) = 0;
  *(void *)(v8 + 168) = 0;
  *(void *)((char *)v1 + v7) = v8;
  *(_WORD *)(v8 + 176) = 1;
  uint64_t v11 = *(void *)((*v2 & *v1) + 0x100);
  type metadata accessor for DragAndDropBridge();
  *(void *)((char *)v1 + v11) = PencilEventsBridge.__allocating_init()();
  *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x108)) = 0;
  uint64_t v12 = *(void *)((*v2 & *v1) + 0x110);
  type metadata accessor for TooltipBridge();
  *(void *)((char *)v1 + v12) = PencilEventsBridge.__allocating_init()();
  uint64_t v13 = *(void *)((*v2 & *v1) + 0x118);
  type metadata accessor for EditMenuBridge();
  *(void *)((char *)v1 + v13) = PencilEventsBridge.__allocating_init()();
  *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x120)) = 0;
  *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x128)) = 0;
  uint64_t v14 = *(void *)((*v2 & *v1) + 0x130);
  type metadata accessor for UIKitStatusBarBridge();
  *(void *)((char *)v1 + v14) = UIKitStatusBarBridge.__allocating_init()();
  swift_weakInit();
  *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x140)) = 0;
  uint64_t v15 = *(void *)((*v2 & *v1) + 0x148);
  type metadata accessor for AVKitCaptureButtonBridge();
  *(void *)((char *)v1 + v15) = PencilEventsBridge.__allocating_init()();
  uint64_t v16 = *(void *)((*v2 & *v1) + 0x150);
  type metadata accessor for PencilEventsBridge();
  *(void *)((char *)v1 + v16) = PencilEventsBridge.__allocating_init()();
  *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x158)) = 0;
  uint64_t v17 = *(void *)((*v2 & *v1) + 0x160);
  type metadata accessor for UIKitSensoryFeedbackCache();
  *(void *)((char *)v1 + v17) = UIKitSensoryFeedbackCache.__allocating_init()();
  uint64_t v18 = *(void *)((*v2 & *v1) + 0x168);
  type metadata accessor for ContextMenuBridge();
  *(void *)((char *)v1 + v18) = PencilEventsBridge.__allocating_init()();
  *((unsigned char *)v1 + *(void *)((*v2 & *v1) + 0x170)) = 0;
  uint64_t v19 = *(void *)((*v2 & *v1) + 0x178);
  *(void *)((char *)v1 + v19) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x180)) = 0;
  *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x188)) = 0;
  *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x190)) = 0;
  *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x1A0)) = 0;
  uint64_t v20 = (char *)v1 + *(void *)((*v2 & *v1) + 0x1A8);
  *(void *)uint64_t v20 = 0;
  v20[8] = 0;
  *((_DWORD *)v20 + 3) = 0;
  uint64_t v21 = (void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x1B0));
  unint64_t v22 = specialized Dictionary.init(dictionaryLiteral:)(v9);
  *uint64_t v21 = 0;
  v21[1] = v22;
  void v21[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v1 + *(void *)((*v2 & *v1) + 0x1B8)) = 0;
  *((unsigned char *)v1 + *(void *)((*v2 & *v1) + 0x1C0)) = 0;
  *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x1C8)) = 0;
  *(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x1D0)) = 0;
  *((unsigned char *)v1 + *(void *)((*v2 & *v1) + 0x1D8)) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #1 in _UIHostingView._rendererConfiguration.getter@<X0>(void *a1@<X8>)
{
  return closure #1 in _UIHostingView._rendererConfiguration.getter(a1);
}

uint64_t partial apply for closure #1 in _UIHostingView._rendererConfiguration.setter()
{
  return closure #1 in _UIHostingView._rendererConfiguration.setter();
}

uint64_t partial apply for closure #1 in _UIHostingView._rendererObject.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in _UIHostingView._rendererObject.getter(a1);
}

uint64_t partial apply for closure #1 in _UIHostingView.safeAreaInsets.getter()
{
  return closure #1 in _UIHostingView.safeAreaInsets.getter();
}

void partial apply for closure #1 in _UIHostingView.forEachIdentifiedView(body:)(double *a1)
{
  closure #1 in _UIHostingView.forEachIdentifiedView(body:)(a1, *(void *)(v1 + 32));
}

uint64_t partial apply for closure #1 in FocusBridge.acceptsFirstResponder.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return closure #1 in FocusBridge.acceptsFirstResponder.getter(a1, a2, *(unsigned char **)(v3 + 16), a3);
}

uint64_t specialized _UIHostingView.didUpdateFocus(in:with:)(void *a1)
{
  swift_retain();
  specialized FocusBridge.didUpdateFocus(in:with:)(a1);

  return swift_release();
}

uint64_t specialized _UIHostingView._intelligenceBaseClass.getter()
{
  return type metadata accessor for _UIHostingView();
}

void specialized _UIHostingView.init(frame:)()
{
}

uint64_t partial apply for closure #1 in _UIHostingView._renderAsyncForTest(interval:)@<X0>(BOOL *a1@<X8>)
{
  return closure #1 in _UIHostingView._renderAsyncForTest(interval:)(a1);
}

uint64_t sub_1881B5BD0()
{
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

void *partial apply for closure #1 in _UIHostingView._performScrollTest(startOffset:iterations:delta:length:completion:)()
{
  return closure #1 in _UIHostingView._performScrollTest(startOffset:iterations:delta:length:completion:)(*(void (**)(void))(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t partial apply for closure #1 in _UIHostingView.viewCacheIsEmpty.getter@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in _UIHostingView.viewCacheIsEmpty.getter(a1);
}

uint64_t sub_1881B5C44()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in _UIHostingView.dismissActivePresentations()()
{
  closure #1 in _UIHostingView.dismissActivePresentations()(*(void **)(v0 + 16));
}

uint64_t sub_1881B5C84()
{
  return swift_deallocObject();
}

_UNKNOWN **base witness table accessor for _BenchmarkHost in _UIHostingView<A>()
{
  return &protocol witness table for _UIHostingView<A>;
}

uint64_t sub_1881B5CA0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _UIHostingView.safeAreaRegions.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1881B5CCC(uint64_t *a1)
{
  return _UIHostingView.safeAreaRegions.setter(*a1);
}

uint64_t sub_1881B5CF4()
{
  return 16;
}

__n128 sub_1881B5D00(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1881B5D0C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _UIHostingView.accessibilityEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1881B5D3C(char *a1)
{
  return _UIHostingView.accessibilityEnabled.setter(*a1);
}

uint64_t sub_1881B5D64()
{
  return 16;
}

__n128 sub_1881B5D70(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1881B5D7C@<D0>(double *a1@<X8>)
{
  _UIHostingView._rendererConfiguration.getter();
  double result = v4;
  *(void *)a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_1881B5DC0()
{
  return _UIHostingView._rendererConfiguration.setter();
}

uint64_t sub_1881B5E08()
{
  return 16;
}

__n128 sub_1881B5E14(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1881B5E20()
{
  return _UIHostingView.rootView.getter();
}

uint64_t sub_1881B5E44(uint64_t a1)
{
  return specialized _UIHostingView.rootView.setter(a1);
}

uint64_t sub_1881B5E68()
{
  return 16;
}

__n128 sub_1881B5E74(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1881B5E80@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1881B5EB0(char *a1)
{
  return _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.setter(*a1);
}

uint64_t sub_1881B5ED8()
{
  return 16;
}

__n128 sub_1881B5EE4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1881B5EF0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _UIHostingView.addsKeyboardToSafeAreaInsets.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1881B5F20(char *a1)
{
  return _UIHostingView.addsKeyboardToSafeAreaInsets.setter(*a1);
}

uint64_t sub_1881B5F48()
{
  return 16;
}

__n128 sub_1881B5F54(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1881B5F60@<D0>(_OWORD *a1@<X8>)
{
  _UIHostingView.environmentOverride.getter((uint64_t *)&v3);
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1881B5F9C(void *a1)
{
  uint64_t v1 = a1[1];
  *(void *)&long long v3 = *a1;
  *((void *)&v3 + 1) = v1;
  outlined copy of EnvironmentValues?(v3);
  return _UIHostingView.environmentOverride.setter(&v3);
}

uint64_t sub_1881B5FE0()
{
  return 16;
}

__n128 sub_1881B5FEC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1881B5FF8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _UIHostingView.isHiddenForReuse.getter();
  *a1 = result & 1;
  return result;
}

void sub_1881B6028(char *a1)
{
}

uint64_t sub_1881B6050()
{
  return 16;
}

__n128 sub_1881B605C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t method lookup function for _UIHostingView(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for _UIHostingView);
}

uint64_t dispatch thunk of _UIHostingView.safeAreaRegions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of _UIHostingView.safeAreaRegions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of _UIHostingView.safeAreaRegions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of _UIHostingView.accessibilityEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x430))();
}

uint64_t dispatch thunk of _UIHostingView.accessibilityEnabled.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x438))();
}

uint64_t dispatch thunk of _UIHostingView.accessibilityEnabled.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x440))();
}

uint64_t dispatch thunk of _UIHostingView.__allocating_init(rootView:)()
{
  return (*(uint64_t (**)(void))(v0 + 1272))();
}

uint64_t dispatch thunk of _UIHostingView.setRootView(_:transaction:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x520))();
}

uint64_t dispatch thunk of _UIHostingView.rootView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x530))();
}

uint64_t dispatch thunk of _UIHostingView.rootView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x538))();
}

uint64_t dispatch thunk of _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x540))();
}

uint64_t dispatch thunk of _UIHostingView.invalidatesIntrinsicContentSizeOnIdealSizeChange.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x550))();
}

uint64_t dispatch thunk of _UIHostingView.makeViewDebugData()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x600))();
}

void type metadata accessor for (name: String, value: String)()
{
  if (!lazy cache variable for type metadata for (name: String, value: String))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (name: String, value: String));
    }
  }
}

uint64_t partial apply for closure #1 in _UIHostingView.accessibilityReinstantiateIfNeeded()()
{
  return closure #1 in _UIHostingView.accessibilityReinstantiateIfNeeded()();
}

uint64_t partial apply for closure #1 in _UIHostingView.accessibilityFocusedElementDidChange(_:)()
{
  return closure #1 in _UIHostingView.accessibilityFocusedElementDidChange(_:)(*(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in ViewGraph.setAccessibilityFocusNeedsUpdate()()
{
  return closure #1 in ViewGraph.setAccessibilityFocusNeedsUpdate()(v0);
}

uint64_t sub_1881B6410()
{
  swift_release();

  return swift_deallocObject();
}

id partial apply for specialized closure #1 in sequence<A>(first:next:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = specialized closure #1 in sequence<A>(first:next:)(a1, *(void (**)(id *__return_ptr, id *))(v2 + 16));
  *a2 = result;
  return result;
}

void type metadata accessor for DropFirstSequence<UnfoldSequence<UIView, (UIView?, Bool)>>()
{
  if (!lazy cache variable for type metadata for DropFirstSequence<UnfoldSequence<UIView, (UIView?, Bool)>>)
  {
    type metadata accessor for UnfoldSequence<UIView, (UIView?, Bool)>();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(&lazy protocol witness table cache variable for type UnfoldSequence<UIView, (UIView?, Bool)> and conformance UnfoldSequence<A, B>, (void (*)(uint64_t))type metadata accessor for UnfoldSequence<UIView, (UIView?, Bool)>);
    unint64_t Sequence = type metadata accessor for DropFirstSequence();
    if (!v1) {
      atomic_store(Sequence, (unint64_t *)&lazy cache variable for type metadata for DropFirstSequence<UnfoldSequence<UIView, (UIView?, Bool)>>);
    }
  }
}

void type metadata accessor for UnfoldSequence<UIView, (UIView?, Bool)>()
{
  if (!lazy cache variable for type metadata for UnfoldSequence<UIView, (UIView?, Bool)>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    type metadata accessor for (UIView?, Bool)();
    unint64_t v0 = type metadata accessor for UnfoldSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UnfoldSequence<UIView, (UIView?, Bool)>);
    }
  }
}

void type metadata accessor for (UIView?, Bool)()
{
  if (!lazy cache variable for type metadata for (UIView?, Bool))
  {
    _s7SwiftUI7WeakBoxVySo6UIViewCGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for UIView?, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UIView?, Bool));
    }
  }
}

uint64_t partial apply for implicit closure #2 in UIHostingViewBase._geometryChanged(_:forAncestor:)()
{
  return implicit closure #2 in UIHostingViewBase._geometryChanged(_:forAncestor:)();
}

void *partial apply for closure #1 in ViewGraph.setPendingAccessibilityFocusStore(_:)()
{
  return closure #1 in ViewGraph.setPendingAccessibilityFocusStore(_:)(v0[2], v0[3], v0[4], v0[5]);
}

void View.windowContentAspectRatio(_:)()
{
}

void View.windowContentAspectRatio(_:insets:)()
{
}

uint64_t static WidgetBundleBuilder.buildBlock<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

unint64_t lazy protocol witness table accessor for type EmptyWidget and conformance EmptyWidget()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyWidget and conformance EmptyWidget;
  if (!lazy protocol witness table cache variable for type EmptyWidget and conformance EmptyWidget)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyWidget and conformance EmptyWidget);
  }
  return result;
}

void static WidgetBundleBuilder.buildOptional<A>(_:)()
{
}

ValueMetadata *type metadata accessor for WidgetBundleBuilder()
{
  return &type metadata for WidgetBundleBuilder;
}

uint64_t sub_1881B6724(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

ValueMetadata *type metadata accessor for EmptyWidget()
{
  return &type metadata for EmptyWidget;
}

uint64_t associated type witness table accessor for Widget.Body : WidgetConfiguration in EmptyWidget()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **sub_1881B6758()
{
  return &protocol witness table for EmptyWidgetConfiguration;
}

uint64_t UIHostingController.__allocating_init(hostingView:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return UIHostingController.init(hostingView:)(a1);
}

uint64_t UIHostingController.testBridge.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for UIHostingController.testBridge) = a1;
  return swift_release();
}

uint64_t UIHostingController.centersRootView.getter()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for UIHostingController.host);
  type metadata accessor for _UIHostingView();
  id v2 = v1;
  swift_getWitnessTable();
  char v3 = ViewRendererHost.centersRootView.getter();

  return v3 & 1;
}

void UIHostingController.centersRootView.setter()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for UIHostingController.host);
  type metadata accessor for _UIHostingView();
  id v2 = v1;
  swift_getWitnessTable();
  ViewRendererHost.centersRootView.setter();
}

void (*UIHostingController.centersRootView.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = UIHostingController.centersRootView.getter() & 1;
  return UIHostingController.centersRootView.modify;
}

void UIHostingController.centersRootView.modify()
{
}

uint64_t UIHostingController.isHiddenForReuse.getter()
{
  return _UIHostingView.isHiddenForReuse.getter() & 1;
}

void UIHostingController.isHiddenForReuse.setter(char a1)
{
  id v3 = *(id *)(v1 + direct field offset for UIHostingController.host);
  _UIHostingView.isHiddenForReuse.setter(a1);
}

void (*UIHostingController.isHiddenForReuse.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = _UIHostingView.isHiddenForReuse.getter() & 1;
  return UIHostingController.isHiddenForReuse.modify;
}

void UIHostingController.isHiddenForReuse.modify(uint64_t a1)
{
}

void (*specialized UIHostingController.rootView.modify(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x60uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for UIHostingController.host;
  v3[10] = v1;
  v3[11] = v4;
  uint64_t v5 = (void *)(*(void *)(v1 + v4) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v1 + v4)) + 0x60));
  swift_beginAccess();
  v3[9] = *v5;
  swift_retain();
  return UIHostingController.rootView.modifyspecialized ;
}

void UIHostingController.rootView.modifyspecialized (uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 72);
  uint64_t v4 = *(void **)(*(void *)(*(void *)a1 + 80) + *(void *)(*(void *)a1 + 88));
  uint64_t v5 = (void *)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x60));
  if (a2)
  {
    swift_beginAccess();
    *uint64_t v5 = v3;
    swift_retain_n();
    uint64_t v6 = v4;
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    swift_release_n();

    swift_release();
  }
  else
  {
    swift_beginAccess();
    *uint64_t v5 = v3;
    swift_retain_n();
    uint64_t v7 = v4;
    swift_release();
    type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    swift_release_n();
  }

  free(v2);
}

void (*UIHostingController.rootView.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  *uint64_t v3 = v1;
  uint64_t v4 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x50);
  v3[1] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[2] = v5;
  size_t v6 = *(void *)(v5 + 64);
  _OWORD v3[3] = malloc(v6);
  v3[4] = malloc(v6);
  _UIHostingView.rootView.getter();
  return UIHostingController.rootView.modify;
}

void UIHostingController.rootView.modify(uint64_t a1, char a2)
{
  id v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 24);
  uint64_t v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    specialized UIHostingController.rootView.setter((uint64_t)v3);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized UIHostingController.rootView.setter(*(void *)(*(void *)a1 + 32));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t UIHostingController.sizingOptions.getter@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + direct field offset for UIHostingController.sizingOptions);
  uint64_t result = swift_beginAccess();
  *a1 = *v3;
  return result;
}

void (*UIHostingController.sizingOptions.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = (void *)(v1 + direct field offset for UIHostingController.sizingOptions);
  swift_beginAccess();
  _OWORD v3[3] = *v4;
  return UIHostingController.sizingOptions.modify;
}

void UIHostingController.sizingOptions.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 24);
  UIHostingController.sizingOptions.setter(&v2);

  free(v1);
}

Swift::Void __swiftcall UIHostingController.idealSizeDidChange(from:to:)(CGSize from, CGSize to)
{
  uint64_t v3 = v2;
  double height = from.height;
  double width = from.width;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&height - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = objc_msgSend(v2, sel_view, v7);
  if (!v10)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v11 = v10;
  objc_msgSend(v10, sel_effectiveUserInterfaceLayoutDirection);

  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.environment.getter();
  swift_release();
  double v29 = *(double *)v31;
  uint64_t v30 = v31[1];
  EnvironmentValues.pixelLength.getter();
  double v13 = v12;
  swift_release();
  swift_release();
  id v14 = objc_msgSend(v3, sel_view);
  if (!v14)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v15 = v14;
  objc_msgSend(v14, sel_safeAreaInsets);

  CGSize.inset(by:)();
  uint64_t v17 = v16;
  double v19 = v18;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E4FBBEA8], v5);
  v31[0] = v17;
  double v29 = v19;
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v13);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v13);
  double v20 = *(double *)v31;
  double v21 = v29;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  unint64_t v22 = &v3[direct field offset for UIHostingController.sizingOptions];
  swift_beginAccess();
  if (!*(void *)v22)
  {
LABEL_15:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v20 != width || v21 != height)
  {
    uint64_t v23 = &v3[direct field offset for UIHostingController.sizingOptions];
    swift_beginAccess();
    if (*v23)
    {
      id v24 = *(id *)&v3[direct field offset for UIHostingController.host];
      _UIHostingView.renderingPhase.getter(v31);

      if (LOBYTE(v31[0]) == 1)
      {
        uint64_t v25 = swift_allocObject();
        *(void *)(v25 + 16) = v3;
        *(double *)(v25 + 24) = v20;
        *(double *)(v25 + 32) = v21;
        id v26 = v3;
        onNextMainRunLoop(do:)();
        swift_release();
      }
      else
      {
        objc_msgSend(v3, sel_setPreferredContentSize_, v20, v21);
      }
    }
    uint64_t v27 = &v3[direct field offset for UIHostingController.sizingOptions];
    swift_beginAccess();
    if ((*v27 & 2) != 0) {
      objc_msgSend(*(id *)&v3[direct field offset for UIHostingController.host], sel_invalidateIntrinsicContentSize);
    }
  }
}

void UIHostingController.setRootView(_:transaction:)(uint64_t a1)
{
  id v3 = *(id *)(v1 + direct field offset for UIHostingController.host);
  _UIHostingView.setRootView(_:transaction:)(a1);
}

CGSize __swiftcall UIHostingController.sizeThatFits(in:)(CGSize in)
{
  objc_msgSend(*(id *)(v1 + direct field offset for UIHostingController.host), sel_sizeThatFits_, in.width, in.height);
  result.double height = v3;
  result.double width = v2;
  return result;
}

Swift::Void __swiftcall UIHostingController._render(seconds:)(Swift::Double seconds)
{
  double v2 = *(void **)(v1 + direct field offset for UIHostingController.host);
  type metadata accessor for _UIHostingView();
  id v3 = v2;
  swift_getWitnessTable();
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
}

uint64_t specialized UIHostingController._forEachIdentifiedView(body:)(void (*a1)(unsigned char *), uint64_t a2)
{
  uint64_t v5 = *(void **)(v2 + direct field offset for UIHostingController.host);
  uint64_t v6 = swift_allocObject();
  swift_unknownObjectWeakInit();
  type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  id v7 = v5;
  ViewRendererHost.preferenceValue<A>(_:)();
  swift_retain();
  specialized _IdentifiedViewTree.forEach(_:)((uint64_t)v9, (uint64_t)partial apply for specialized closure #1 in _UIHostingView.forEachIdentifiedView(body:), v6, a1, a2);
  swift_release();
  outlined destroy of _IdentifiedViewTree((uint64_t)v9);

  return swift_release();
}

void UIHostingController._forEachIdentifiedView(body:)(void (*a1)(unsigned char *), uint64_t a2)
{
  id v5 = *(id *)(v2 + direct field offset for UIHostingController.host);
  _UIHostingView.forEachIdentifiedView(body:)(a1, a2);
}

uint64_t UIHostingController._disableSafeArea.getter()
{
  _UIHostingView.explicitSafeAreaInsets.getter((uint64_t)&v2);
  static EdgeInsets.zero.getter();
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v2, (uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for EdgeInsets?);
  if (v3[32]) {
    char v0 = 0;
  }
  else {
    char v0 = static EdgeInsets.== infix(_:_:)();
  }
  return v0 & 1;
}

void specialized UIHostingController._disableSafeArea.setter(char a1)
{
  uint64_t v8 = *(id *)(v1 + direct field offset for UIHostingController.host);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (a1) {
    static EdgeInsets.zero.getter();
  }
  id v7 = (char *)v8 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v8) + 0x90);
  *(void *)id v7 = v3;
  *((void *)v7 + 1) = v4;
  *((void *)v7 + 2) = v5;
  *((void *)v7 + 3) = v6;
  v7[32] = (a1 & 1) == 0;
  objc_msgSend(v8, sel_safeAreaInsetsDidChange);
}

void UIHostingController._disableSafeArea.setter(char a1)
{
  id v7 = *(id *)(v1 + direct field offset for UIHostingController.host);
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (a1) {
    static EdgeInsets.zero.getter();
  }
  v8[0] = v3;
  v8[1] = v4;
  void v8[2] = v5;
  v8[3] = v6;
  BOOL v9 = (a1 & 1) == 0;
  _UIHostingView.explicitSafeAreaInsets.setter((uint64_t)v8);
}

void (*specialized UIHostingController._disableSafeArea.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = direct field offset for UIHostingController.host;
  *(void *)a1 = v1;
  *(void *)(a1 + 8) = v3;
  char v4 = *(unsigned char *)(*(void *)(v1 + v3) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v1 + v3)) + 0x90) + 32);
  static EdgeInsets.zero.getter();
  if (v4) {
    char v5 = 0;
  }
  else {
    char v5 = static EdgeInsets.== infix(_:_:)();
  }
  *(unsigned char *)(a1 + 16) = v5 & 1;
  return UIHostingController._disableSafeArea.modifyspecialized ;
}

void UIHostingController._disableSafeArea.modifyspecialized (uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v2 = *(id *)(*(void *)a1 + *(void *)(a1 + 8));
  uint64_t v8 = v2;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (v1)
  {
    static EdgeInsets.zero.getter();
    uint64_t v2 = v8;
  }
  id v7 = (char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x90);
  *(void *)id v7 = v3;
  *((void *)v7 + 1) = v4;
  *((void *)v7 + 2) = v5;
  *((void *)v7 + 3) = v6;
  v7[32] = v1 ^ 1;
  objc_msgSend(v2, sel_safeAreaInsetsDidChange);
}

void (*UIHostingController._disableSafeArea.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = UIHostingController._disableSafeArea.getter() & 1;
  return UIHostingController._disableSafeArea.modify;
}

void UIHostingController._disableSafeArea.modify(uint64_t a1)
{
}

uint64_t specialized closure #1 in _UIHostingView._rendererConfiguration.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = specialized _UIHostingView.base.getter()[9];
  swift_retain();
  swift_release();
  swift_beginAccess();
  uint64_t v3 = *(void *)(v2 + 32);
  *a1 = *(void *)(v2 + 24);
  a1[1] = v3;
  swift_retain();
  return swift_release();
}

uint64_t specialized closure #1 in _UIHostingView._rendererConfiguration.setter()
{
  return swift_release();
}

Class @objc UIHostingController.keyCommands.getter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = UIHostingController.keyCommands.getter((uint64_t)v1);

  if (v2)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIKeyCommand);
    v3.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v3.super.Class isa = 0;
  }

  return v3.super.isa;
}

uint64_t UIHostingController.keyCommands.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  NSArray v3 = *(char **)&v1[direct field offset for UIHostingController.keyboardShortcutBridge];
  if (v3)
  {
    if (*(_DWORD *)&v3[OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_updatedBindings + 8] == -1)
    {
      MEMORY[0x1F4188790](a1);
      uint64_t v6 = v3;
      static Update.ensure<A>(_:)();
    }
    else
    {
      uint64_t v4 = v3;
    }
    uint64_t v5 = (objc_class *)type metadata accessor for UIHostingController();
    v12[3] = v5;
    v12[4] = &protocol witness table for UIHostingController<A>;
    v12[0] = v2;
    id v7 = v2;
    KeyboardShortcutBridge.updateKeyCommands(_:)((uint64_t)v12);

    outlined destroy of KeyboardShortcutSource?((uint64_t)v12);
  }
  else
  {
    uint64_t v5 = (objc_class *)type metadata accessor for UIHostingController();
  }
  v13.receiver = v2;
  v13.super_class = v5;
  id v8 = objc_msgSendSuper2(&v13, sel_keyCommands);
  if (!v8) {
    return 0;
  }
  BOOL v9 = v8;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIKeyCommand);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v10;
}

uint64_t closure #1 in UIHostingController.keyCommands.getter(uint64_t a1)
{
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  uint64_t v2 = OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_isObservingPreferences;
  *(unsigned char *)(a1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_isObservingPreferences) = 1;
  swift_release();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.preferenceValues()();
  swift_release();
  if (*(unsigned char *)(a1 + v2) == 1)
  {
    PreferenceValues.subscript.getter();
    uint64_t v3 = a1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_updatedBindings;
    *(void *)uint64_t v3 = v5;
    *(_DWORD *)(v3 + 8) = v6;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

id UIHostingController.__allocating_init(coder:rootView:)(void *a1, objc_class *a2)
{
  uint64_t v3 = v2;
  id v6 = objc_allocWithZone(v2);
  id v7 = specialized UIHostingController.init(coder:rootView:)((uint64_t)a1, a2);

  (*(void (**)(objc_class *))(*(void *)(*((void *)v3 + 10) - 8) + 8))(a2);
  return v7;
}

id UIHostingController.init(coder:rootView:)(void *a1, objc_class *a2)
{
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *v2;
  id v6 = specialized UIHostingController.init(coder:rootView:)((uint64_t)a1, a2);

  (*(void (**)(objc_class *))(*(void *)(*(void *)(v5 + 80) - 8) + 8))(a2);
  return v6;
}

id UIHostingController.__allocating_init(coder:)(void *a1)
{
  id v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void @objc UIHostingController.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized UIHostingController.init(coder:)();
}

id UIHostingController.init(_hostingView:)(void *a1)
{
  uint64_t v2 = v1;
  *(void *)&v1[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v1[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v4 = (uint64_t)&v1[direct field offset for UIHostingController.overrides];
  long long v19 = xmmword_18834C6B0;
  uint64_t v20 = 0;
  char v21 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v22 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v19, v4);
  *(void *)&v2[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v2[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v2[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v2[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v5 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v6 = swift_allocObject();
  id v7 = v2;
  uint64_t v8 = specialized UIKitDialogBridge.init()(v6);
  swift_release();
  *(void *)&v2[v5] = v8;
  *(void *)&v7[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v7[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v9 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + 16) = -1;
  *(void *)&v7[v9] = v10;
  *(void *)&v7[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v11 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v7[v11] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v7[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  *(void *)&v7[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  objc_super v13 = &v7[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)objc_super v13 = 512;
  v13[2] = 3;
  *(void *)&v7[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v12;
  v7[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v7[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v14 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v7[v14] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v7[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v7[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v7[direct field offset for UIHostingController.sizingOptions] = 0;
  *(void *)&v7[direct field offset for UIHostingController.host] = a1;
  id v15 = a1;

  v18.receiver = v7;
  v18.super_class = (Class)type metadata accessor for UIHostingController();
  id v16 = objc_msgSendSuper2(&v18, sel_initWithNibName_bundle_, 0, 0);
  UIHostingController._commonInit()();

  return v16;
}

uint64_t @objc UIHostingController.isModalInPresentation.getter(void *a1)
{
  id v1 = a1;
  char v2 = UIHostingController.isModalInPresentation.getter();

  return v2 & 1;
}

uint64_t UIHostingController.isModalInPresentation.getter()
{
  static Update.ensure<A>(_:)();
  return v1;
}

void @objc UIHostingController.isModalInPresentation.setter(void *a1, uint64_t a2, char a3)
{
  id v4 = a1;
  UIHostingController.isModalInPresentation.setter(a3);
}

id UIHostingController.isModalInPresentation.setter(char a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for UIHostingController();
  return objc_msgSendSuper2(&v4, sel_setModalInPresentation_, a1 & 1);
}

id closure #1 in UIHostingController.isModalInPresentation.getter@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.preferenceValue<A>(_:)();
  swift_release();
  if (v6 == 2)
  {
    v5.receiver = a1;
    v5.super_class = (Class)type metadata accessor for UIHostingController();
    id result = objc_msgSendSuper2(&v5, sel_isModalInPresentation);
  }
  else
  {
    id result = (id)(v6 & 1);
  }
  *a2 = (_BYTE)result;
  return result;
}

void UIHostingController.preferredContentSizeDidChange(forChildContentContainer:)(uint64_t a1)
{
  v13.receiver = v1;
  v13.super_class = (Class)type metadata accessor for UIHostingController();
  objc_msgSendSuper2(&v13, sel_preferredContentSizeDidChangeForChildContentContainer_, a1);
  self;
  id v3 = (void *)swift_dynamicCastObjCClass();
  if (v3)
  {
    id v4 = objc_msgSend(v3, sel_view);
    if (v4)
    {
      objc_super v5 = v4;
      id v6 = objc_msgSend(v4, sel_superview);

      if (v6)
      {
        swift_getObjectType();
        uint64_t v7 = swift_conformsToProtocol2();
        if (v7) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        if (v7) {
          id v9 = v6;
        }
        else {
          id v9 = 0;
        }
        if (v9)
        {
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
          id v12 = v6;
          v11(ObjectType, v8);
        }
      }
    }
    else
    {
      __break(1u);
    }
  }
}

void @objc UIHostingController.preferredContentSizeDidChange(forChildContentContainer:)(void *a1, uint64_t a2, uint64_t a3)
{
  swift_unknownObjectRetain();
  id v5 = a1;
  UIHostingController.preferredContentSizeDidChange(forChildContentContainer:)(a3);
  swift_unknownObjectRelease();
}

void closure #1 in UIHostingController.sizingOptionsDidChange(from:)(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  uint64_t v7 = a3 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x18C119DF0](v7);
  if (v8)
  {
    id v9 = (void *)v8;
    UIHostingController.idealSizeDidChange(from:to:)((CGSize)__PAIR128__(v4, v3), (CGSize)__PAIR128__(v6, v5));
  }
}

uint64_t @objc UIHostingController.preferredStatusBarUpdateAnimation.getter(void *a1)
{
  id v1 = a1;
  uint64_t updated = UIHostingController.preferredStatusBarUpdateAnimation.getter();

  return updated;
}

void UIHostingController.viewWillTransition(to:with:)(void *a1, double a2, double a3)
{
  unint64_t v4 = v3;
  uint64_t v8 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x50);
  uint64_t v9 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x58);
  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for UIHostingController();
  objc_msgSendSuper2(&v16, sel_viewWillTransitionToSize_withTransitionCoordinator_, a1, a2, a3);
  static Semantics.v6_2.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    _UIHostingView.isInSizeTransition.setter(1);
    uint64_t v10 = swift_allocObject();
    swift_unknownObjectWeakInit();
    uint64_t v11 = (void *)swift_allocObject();
    _OWORD v11[2] = v8;
    v11[3] = v9;
    v11[4] = v10;
    v15[4] = partial apply for closure #1 in UIHostingController.viewWillTransition(to:with:);
    v15[5] = v11;
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 1107296256;
    void v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v15[3] = &block_descriptor_81;
    id v12 = _Block_copy(v15);
    swift_release();
    objc_msgSend(a1, sel_animateAlongsideTransition_completion_, 0, v12);
    _Block_release(v12);
  }
  objc_super v13 = *(void **)((char *)v4 + direct field offset for UIHostingController.host);
  LOWORD(v15[0]) = 1;
  type metadata accessor for _UIHostingView();
  id v14 = v13;
  swift_getWitnessTable();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

void closure #1 in UIHostingController.viewWillTransition(to:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x18C119DF0](v2);
  if (v3)
  {
    unint64_t v4 = (void *)v3;
    id v5 = *(id *)(v3 + direct field offset for UIHostingController.host);

    _UIHostingView.isInSizeTransition.setter(0);
  }
}

void @objc UIHostingController.viewWillTransition(to:with:)(void *a1, double a2, double a3, uint64_t a4, void *a5)
{
  swift_unknownObjectRetain();
  id v9 = a1;
  UIHostingController.viewWillTransition(to:with:)(a5, a2, a3);
  swift_unknownObjectRelease();
}

uint64_t UIHostingController._update(with:completion:)(void *a1, uint64_t (*a2)(void))
{
  if (*(void *)(v2 + direct field offset for UIHostingController.alwaysOnBridge))
  {
    swift_retain();
    AlwaysOnBridge.update(with:)(a1);
    swift_release();
  }
  return a2();
}

uint64_t @objc UIHostingController._update(with:completion:)(void *a1, int a2, void *a3, void *aBlock)
{
  unint64_t v6 = _Block_copy(aBlock);
  *(void *)(swift_allocObject() + 16) = v6;
  id v7 = a3;
  id v8 = a1;
  UIHostingController._update(with:completion:)(a3, partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ());

  return swift_release();
}

uint64_t UIHostingController._timelines(for:)()
{
  if (!*(void *)(v0 + direct field offset for UIHostingController.alwaysOnBridge)) {
    return MEMORY[0x1E4FBC860];
  }
  swift_retain();
  uint64_t v1 = AlwaysOnBridge.timelines(for:)();
  swift_release();
  return v1;
}

Class @objc UIHostingController._timelines(for:)(void *a1)
{
  uint64_t v2 = type metadata accessor for DateInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DateInterval._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = a1;
  UIHostingController._timelines(for:)();

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for BLSAlwaysOnTimeline);
  v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v7.super.isa;
}

void UIHostingController._rendererConfiguration.getter()
{
  id v1 = *(id *)(v0 + direct field offset for UIHostingController.host);
  _UIHostingView._rendererConfiguration.getter();
}

void UIHostingController._rendererConfiguration.setter()
{
  id v1 = *(id *)(v0 + direct field offset for UIHostingController.host);
  _UIHostingView._rendererConfiguration.setter();
}

void (*specialized UIHostingController._rendererConfiguration.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = direct field offset for UIHostingController.host;
  v3[2] = v1;
  _OWORD v3[3] = v4;
  id v5 = *(id *)(v1 + v4);
  static Update.locked<A>(_:)();
  v3[4] = 0;

  return UIHostingController._rendererConfiguration.modifyspecialized ;
}

void UIHostingController._rendererConfiguration.modifyspecialized (uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)(*(void *)a1 + 16) + *(void *)(*(void *)a1 + 24));
  if (a2)
  {
    swift_retain();
    id v4 = v3;
    static Update.locked<A>(_:)();
    swift_release();
  }
  else
  {
    id v4 = v3;
    static Update.locked<A>(_:)();
  }

  swift_release();
  free(v2);
}

void (*UIHostingController._rendererConfiguration.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  UIHostingController._rendererConfiguration.getter();
  return UIHostingController._rendererConfiguration.modify;
}

void UIHostingController._rendererConfiguration.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_retain();
    UIHostingController._rendererConfiguration.setter();
    swift_release();
  }
  else
  {
    UIHostingController._rendererConfiguration.setter();
  }
}

uint64_t UIHostingController._rendererObject.getter()
{
  id v1 = *(id *)(v0 + direct field offset for UIHostingController.host);
  uint64_t v2 = _UIHostingView._rendererObject.getter();

  return v2;
}

id UIHostingController.target(forAction:withSender:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (static Selector.== infix(_:_:)())
  {
    id result = *(id *)&v3[direct field offset for UIHostingController.keyboardShortcutBridge];
    if (result)
    {
      long long v19 = *(void **)&v3[direct field offset for UIHostingController.keyboardShortcutBridge];
      *(void *)(a3 + 24) = type metadata accessor for KeyboardShortcutBridge();
      id v8 = v19;
      *(void *)a3 = v19;
      return v8;
    }
    else
    {
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
  }
  else
  {
    outlined init with copy of Any?(a2, (uint64_t)&v21);
    uint64_t v9 = *((void *)&v22 + 1);
    if (*((void *)&v22 + 1))
    {
      uint64_t v10 = __swift_project_boxed_opaque_existential_1(&v21, *((uint64_t *)&v22 + 1));
      uint64_t v11 = *(void *)(v9 - 8);
      double v12 = MEMORY[0x1F4188790](v10);
      id v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v11 + 16))(v14, v12);
      uint64_t v15 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v9);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    }
    else
    {
      uint64_t v15 = 0;
    }
    objc_super v16 = (objc_class *)type metadata accessor for UIHostingController();
    v20.receiver = v3;
    v20.super_class = v16;
    id v17 = objc_msgSendSuper2(&v20, sel_targetForAction_withSender_, a1, v15);
    swift_unknownObjectRelease();
    if (v17)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v21 = 0u;
      long long v22 = 0u;
    }
    return (id)outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v21, a3, (unint64_t *)&lazy cache variable for type metadata for Any?);
  }
  return result;
}

id @objc UIHostingController.target(forAction:withSender:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    id v6 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    id v7 = a1;
  }
  UIHostingController.target(forAction:withSender:)(a3, (uint64_t)v16, (uint64_t)v17);

  outlined destroy of Any?((uint64_t)v16);
  uint64_t v8 = v18;
  if (v18)
  {
    uint64_t v9 = __swift_project_boxed_opaque_existential_1(v17, v18);
    uint64_t v10 = *(void *)(v8 - 8);
    double v11 = MEMORY[0x1F4188790](v9);
    uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v10 + 16))(v13, v11);
    id v14 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  }
  else
  {
    id v14 = 0;
  }

  return v14;
}

id UIHostingController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = v3;
  if (a2)
  {
    id v6 = (void *)MEMORY[0x18C115780]();
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }
  id v7 = objc_msgSend(objc_allocWithZone(v4), sel_initWithNibName_bundle_, v6, a3);

  return v7;
}

void UIHostingController.init(nibName:bundle:)()
{
}

void @objc UIHostingController.init(nibName:bundle:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v4 = a4;

  specialized UIHostingController.init(nibName:bundle:)();
}

id UIHostingController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIHostingController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for _UIHostingViewable.rootView.getter in conformance <> UIHostingController<A>()
{
  return swift_retain();
}

uint64_t protocol witness for _UIHostingViewable.rootView.setter in conformance <> UIHostingController<A>(uint64_t a1)
{
  specialized UIHostingController.rootView.setter(a1);

  return swift_release();
}

uint64_t (*protocol witness for _UIHostingViewable.rootView.modify in conformance <> UIHostingController<A>(void *a1))()
{
  objc_super v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized UIHostingController.rootView.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for _UIHostingViewable._render(seconds:) in conformance <> UIHostingController<A>()
{
  id v1 = *(void **)(v0 + direct field offset for UIHostingController.host);
  type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
  lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>();
  id v2 = v1;
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
}

uint64_t protocol witness for _UIHostingViewable._disableSafeArea.getter in conformance <> UIHostingController<A>()
{
  char v1 = *(unsigned char *)(*(void *)(v0 + direct field offset for UIHostingController.host)
                + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(v0 + direct field offset for UIHostingController.host))
                            + 0x90)
                + 32);
  static EdgeInsets.zero.getter();
  if (v1) {
    return 0;
  }

  return static EdgeInsets.== infix(_:_:)();
}

uint64_t (*protocol witness for _UIHostingViewable._disableSafeArea.modify in conformance <> UIHostingController<A>(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized UIHostingController._disableSafeArea.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void protocol witness for _UIHostingViewable._rendererConfiguration.getter in conformance <> UIHostingController<A>()
{
  id v1 = *(id *)(v0 + direct field offset for UIHostingController.host);
  static Update.locked<A>(_:)();
}

uint64_t protocol witness for _UIHostingViewable._rendererConfiguration.setter in conformance <> UIHostingController<A>()
{
  id v1 = *(id *)(v0 + direct field offset for UIHostingController.host);
  static Update.locked<A>(_:)();

  return swift_release();
}

uint64_t (*protocol witness for _UIHostingViewable._rendererConfiguration.modify in conformance <> UIHostingController<A>(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = specialized UIHostingController._rendererConfiguration.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for _UIHostingViewable._rendererObject.getter in conformance <> UIHostingController<A>()
{
  uint64_t v3 = *(void **)(v0 + direct field offset for UIHostingController.host);
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Swift.AnyObject?);
  id v1 = v3;
  static Update.locked<A>(_:)();

  return v4;
}

uint64_t specialized closure #1 in _UIHostingView._rendererObject.getter@<X0>(uint64_t *a1@<X8>)
{
  specialized _UIHostingView.base.getter();
  swift_retain();
  swift_release();
  uint64_t v2 = DisplayList.ViewRenderer.exportedObject(rootView:)();
  uint64_t result = swift_release();
  *a1 = v2;
  return result;
}

uint64_t specialized UIHostingController.testBridge.getter()
{
  return *(void *)(v0 + direct field offset for UIHostingController.testBridge);
}

uint64_t partial apply for closure #1 in UIHostingController.keyCommands.getter()
{
  return closure #1 in UIHostingController.keyCommands.getter(*(void *)(v0 + 16));
}

id specialized UIHostingController.init(coder:rootView:)(uint64_t a1, objc_class *a2)
{
  uint64_t v3 = v2;
  *(void *)&v2[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v2[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v6 = (uint64_t)&v2[direct field offset for UIHostingController.overrides];
  long long v22 = xmmword_18834C6B0;
  uint64_t v23 = 0;
  char v24 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v25 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v22, v6);
  *(void *)&v3[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v3[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v3[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v3[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v7 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v3;
  uint64_t v10 = specialized UIKitDialogBridge.init()(v8);
  swift_release();
  *(void *)&v3[v7] = v10;
  *(void *)&v9[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v9[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v11 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v12 = swift_allocObject();
  *(_DWORD *)(v12 + 16) = -1;
  *(void *)&v9[v11] = v12;
  *(void *)&v9[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v13 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v9[v13] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v9[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v14 = MEMORY[0x1E4FBC860];
  *(void *)&v9[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v15 = &v9[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v15 = 512;
  void v15[2] = 3;
  *(void *)&v9[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v14;
  v9[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v9[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v16 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v9[v16] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v9[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v9[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v9[direct field offset for UIHostingController.sizingOptions] = 0;
  type metadata accessor for _UIHostingView();
  *(void *)&v9[direct field offset for UIHostingController.host] = specialized _UIHostingView.__allocating_init(rootView:)(a2);

  v21.receiver = v9;
  v21.super_class = (Class)type metadata accessor for UIHostingController();
  id v17 = objc_msgSendSuper2(&v21, sel_initWithCoder_, a1);
  id v18 = v17;
  if (v17)
  {
    id v19 = v17;
    UIHostingController._commonInit()();
  }
  return v18;
}

void specialized UIHostingController.init(coder:)()
{
  id v1 = v0;
  *(void *)&v0[direct field offset for UIHostingController.allowedBehaviors] = 0;
  *(void *)&v0[direct field offset for UIHostingController.requiredBridges] = 0;
  uint64_t v2 = (uint64_t)&v0[direct field offset for UIHostingController.overrides];
  long long v12 = xmmword_18834C6B0;
  uint64_t v13 = 0;
  char v14 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v15 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v12, v2);
  *(void *)&v1[direct field offset for UIHostingController.customTabItem] = 0;
  *(void *)&v1[direct field offset for UIHostingController.toolbarBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.inspectorBridgeV5] = 0;
  *(void *)&v1[direct field offset for UIHostingController.barAppearanceBridge] = 0;
  uint64_t v3 = direct field offset for UIHostingController.dialogBridge;
  type metadata accessor for UIKitDialogBridge();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = specialized UIKitDialogBridge.init()(v4);
  swift_release();
  *(void *)&v1[v3] = v5;
  *(void *)&v1[direct field offset for UIHostingController.testBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.contentScrollViewBridge] = 0;
  uint64_t v6 = direct field offset for UIHostingController.modernNavigationBridge;
  type metadata accessor for ModernNavigationBridge();
  uint64_t v7 = swift_allocObject();
  *(_DWORD *)(v7 + 16) = -1;
  *(void *)&v1[v6] = v7;
  *(void *)&v1[direct field offset for UIHostingController.alwaysOnBridge] = 0;
  uint64_t v8 = direct field offset for UIHostingController.fileImportExportBridge;
  *(void *)&v1[v8] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FileImportExportBridge(0)), sel_init);
  *(_WORD *)&v1[direct field offset for UIHostingController.deferredEdges] = 256;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  *(void *)&v1[direct field offset for UIHostingController.screenEdgesSystemGestureSeedTracker] = MEMORY[0x1E4FBC860];
  uint64_t v10 = &v1[direct field offset for UIHostingController.persistentSystemOverlays];
  *(_WORD *)uint64_t v10 = 512;
  _OWORD v10[2] = 3;
  *(void *)&v1[direct field offset for UIHostingController.persistentSystemOverlaysSeedTracker] = v9;
  v1[direct field offset for UIHostingController.shouldDeferScreenEdgesSystemGestureToChildViewController] = 0;
  v1[direct field offset for UIHostingController.shouldDeferPersistentSystemOverlaysToChildViewController] = 0;
  uint64_t v11 = direct field offset for UIHostingController.backgroundBridge;
  type metadata accessor for ContainerBackgroundBridge();
  swift_allocObject();
  *(void *)&v1[v11] = ContainerBackgroundBridge.init(vendsBackgroundAsHostingView:)(0);
  *(void *)&v1[direct field offset for UIHostingController.navigationBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.keyboardShortcutBridge] = 0;
  *(void *)&v1[direct field offset for UIHostingController.sizingOptions] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id partial apply for closure #1 in UIHostingController.isModalInPresentation.getter@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in UIHostingController.isModalInPresentation.getter(*(void **)(v1 + 16), a1);
}

uint64_t sub_1881BA1E0()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void partial apply for closure #1 in UIHostingController.viewWillTransition(to:with:)(uint64_t a1)
{
  closure #1 in UIHostingController.viewWillTransition(to:with:)(a1, *(void *)(v1 + 32));
}

void specialized UIHostingController.init(nibName:bundle:)()
{
}

uint64_t sub_1881BA254@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = UIHostingController.centersRootView.getter();
  *a1 = result & 1;
  return result;
}

void sub_1881BA284()
{
}

uint64_t sub_1881BA2AC()
{
  return 16;
}

__n128 sub_1881BA2B8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1881BA2C4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = UIHostingController.isHiddenForReuse.getter();
  *a1 = result & 1;
  return result;
}

void sub_1881BA2F4(char *a1)
{
}

uint64_t sub_1881BA31C()
{
  return 16;
}

__n128 sub_1881BA328(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1881BA334()
{
  return UIHostingController.rootView.getter();
}

void sub_1881BA358(uint64_t a1)
{
}

uint64_t sub_1881BA37C()
{
  return 16;
}

__n128 sub_1881BA388(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1881BA394@<X0>(void *a1@<X8>)
{
  return UIHostingController.sizingOptions.getter(a1);
}

uint64_t sub_1881BA3B8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return UIHostingController.sizingOptions.setter(&v2);
}

uint64_t sub_1881BA3F0()
{
  return 16;
}

__n128 sub_1881BA3FC(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1881BA408@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = UIHostingController._disableSafeArea.getter();
  *a1 = result & 1;
  return result;
}

void sub_1881BA438(char *a1)
{
}

uint64_t sub_1881BA460()
{
  return 16;
}

__n128 sub_1881BA46C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double sub_1881BA478@<D0>(double *a1@<X8>)
{
  UIHostingController._rendererConfiguration.getter();
  double result = v4;
  *(void *)a1 = v3;
  a1[1] = v4;
  return result;
}

void sub_1881BA4BC()
{
}

uint64_t sub_1881BA504()
{
  return 16;
}

__n128 sub_1881BA510(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t method lookup function for UIHostingController(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UIHostingController);
}

uint64_t dispatch thunk of UIHostingController.centersRootView.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of UIHostingController.centersRootView.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of UIHostingController.centersRootView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of UIHostingController.isHiddenForReuse.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x300))();
}

uint64_t dispatch thunk of UIHostingController.isHiddenForReuse.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x308))();
}

uint64_t dispatch thunk of UIHostingController.isHiddenForReuse.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x310))();
}

uint64_t dispatch thunk of UIHostingController.__allocating_init(rootView:)()
{
  return (*(uint64_t (**)(void))(v0 + 792))();
}

uint64_t dispatch thunk of UIHostingController.__allocating_init(coder:rootView:)()
{
  return (*(uint64_t (**)(void))(v0 + 800))();
}

uint64_t dispatch thunk of UIHostingController.__allocating_init(hostingView:)()
{
  return (*(uint64_t (**)(void))(v0 + 808))();
}

uint64_t dispatch thunk of UIHostingController.rootView.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x350))();
}

uint64_t dispatch thunk of UIHostingController.sizingOptions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x358))();
}

uint64_t dispatch thunk of UIHostingController.sizingOptions.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x360))();
}

uint64_t dispatch thunk of UIHostingController.sizingOptions.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x368))();
}

uint64_t dispatch thunk of UIHostingController.setRootView(_:transaction:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x378))();
}

uint64_t dispatch thunk of UIHostingController.sizeThatFits(in:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x380))();
}

uint64_t dispatch thunk of UIHostingController._render(seconds:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x388))();
}

uint64_t dispatch thunk of UIHostingController._forEachIdentifiedView(body:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x390))();
}

uint64_t dispatch thunk of UIHostingController._disableSafeArea.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x398))();
}

uint64_t dispatch thunk of UIHostingController._disableSafeArea.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of UIHostingController._disableSafeArea.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3A8))();
}

uint64_t sub_1881BA96C()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_1881BA9A4()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1881BA9DC()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in UIHostingController.sizingOptionsDidChange(from:)(unint64_t *a1, unint64_t *a2)
{
  closure #1 in UIHostingController.sizingOptionsDidChange(from:)(a1, a2, *(void *)(v2 + 32));
}

uint64_t sub_1881BAA20()
{
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in _UIHostingView._rendererObject.getter@<X0>(uint64_t *a1@<X8>)
{
  return specialized closure #1 in _UIHostingView._rendererObject.getter(a1);
}

uint64_t partial apply for specialized closure #1 in _UIHostingView._rendererConfiguration.getter@<X0>(void *a1@<X8>)
{
  return specialized closure #1 in _UIHostingView._rendererConfiguration.getter(a1);
}

uint64_t partial apply for specialized closure #1 in _UIHostingView._rendererConfiguration.setter()
{
  return specialized closure #1 in _UIHostingView._rendererConfiguration.setter();
}

void partial apply for specialized closure #1 in _UIHostingView.forEachIdentifiedView(body:)(double *a1)
{
  closure #1 in _UIHostingView.forEachIdentifiedView(body:)(a1, v1);
}

uint64_t closure #1 in _UIHostingView._rendererConfiguration.getterspecialized partial apply@<X0>(void *a1@<X8>)
{
  return partial apply for specialized closure #1 in _UIHostingView._rendererConfiguration.getter(a1);
}

uint64_t closure #1 in _UIHostingView._rendererConfiguration.setterspecialized partial apply()
{
  return partial apply for specialized closure #1 in _UIHostingView._rendererConfiguration.setter();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TableRowElementCount(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(unsigned __int8 *)(a2 + 8);
  unsigned int v3 = (*(void *)a1 == *(void *)a2) & ~v2;
  if (*(void *)a2) {
    unsigned int v4 = *(unsigned __int8 *)(a2 + 8);
  }
  else {
    unsigned int v4 = 0;
  }
  if (*(void *)a2) {
    unsigned int v2 = 0;
  }
  if (*(void *)a1) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = v2;
  }
  if (*(unsigned char *)(a1 + 8) == 1) {
    return v5;
  }
  else {
    return v3;
  }
}

id TableRowForEachState.__allocating_init(inputs:)(long long *a1)
{
  return TableRowForEachState.init(inputs:)(a1);
}

id TableRowForEachState.init(inputs:)(long long *a1)
{
  long long v13 = a1[6];
  long long v14 = a1[7];
  long long v15 = a1[8];
  uint64_t v16 = *((void *)a1 + 18);
  long long v9 = a1[2];
  long long v10 = a1[3];
  long long v11 = a1[4];
  long long v12 = a1[5];
  long long v7 = *a1;
  long long v8 = a1[1];
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(void *)(v1 + 168) = result;
    *(_DWORD *)(v1 + 176) = 0;
    *(unsigned char *)(v1 + 180) = 1;
    *(_DWORD *)(v1 + 184) = 0;
    *(unsigned char *)(v1 + 188) = 1;
    uint64_t v3 = v1 + *(void *)(*(void *)v1 + 160);
    uint64_t v4 = type metadata accessor for ForEach();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
    uint64_t v5 = v1 + *(void *)(*(void *)v1 + 168);
    *(void *)uint64_t v5 = 0;
    *(unsigned char *)(v5 + 8) = 1;
    uint64_t v6 = *(void *)(*(void *)v1 + 176);
    type metadata accessor for TableRowForEachState.Item();
    *(void *)(v1 + v6) = Dictionary.init()();
    *(void *)(v1 + *(void *)(*(void *)v1 + 184)) = 0;
    *(_DWORD *)(v1 + *(void *)(*(void *)v1 + 192)) = 0;
    *(_OWORD *)(v1 + 112) = v13;
    *(_OWORD *)(v1 + 128) = v14;
    *(_OWORD *)(v1 + 144) = v15;
    *(void *)(v1 + 160) = v16;
    *(_OWORD *)(v1 + 48) = v9;
    *(_OWORD *)(v1 + 64) = v10;
    *(_OWORD *)(v1 + 80) = v11;
    *(_OWORD *)(v1 + 96) = v12;
    *(_OWORD *)(v1 + 16) = v7;
    *(_OWORD *)(v1 + 32) = v8;
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TableRowForEachState.update(forEach:)(uint64_t a1)
{
  uint64_t v186 = a1;
  unsigned int v2 = *(void **)v1;
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 88);
  uint64_t v173 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  v170 = (char *)&v156 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v181 = (char *)&v156 - v7;
  uint64_t v8 = v2[13];
  uint64_t v9 = v2[10];
  uint64_t v174 = *(void *)(*(void *)(v8 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v176 = (char *)&v156 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v156 - v13;
  uint64_t v15 = v2[12];
  uint64_t v195 = v9;
  uint64_t v196 = v4;
  uint64_t v197 = v15;
  v198 = (void (*)(char *, uint64_t))v8;
  long long v190 = *((_OWORD *)v3 + 7);
  long long v199 = v190;
  uint64_t v179 = type metadata accessor for TableRowForEachState.Item();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v184 = (void (*)(char *, uint64_t))type metadata accessor for Optional();
  uint64_t v165 = *((void *)v184 - 1);
  MEMORY[0x1F4188790](v184);
  v183 = (char *)&v156 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  v182 = (char *)&v156 - v18;
  uint64_t v189 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v19);
  v164 = (char *)&v156 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  v167 = (char *)&v156 - v22;
  MEMORY[0x1F4188790](v23);
  v166 = (char *)&v156 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v156 - v26;
  uint64_t v195 = v9;
  uint64_t v196 = v4;
  uint64_t v171 = v15;
  uint64_t v197 = v15;
  v198 = (void (*)(char *, uint64_t))v8;
  v172 = (void (*)(char *, uint64_t))v8;
  unint64_t v175 = v190;
  *(void *)&long long v199 = v190;
  uint64_t v28 = type metadata accessor for ForEach();
  uint64_t v29 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  v168 = (char *)&v156 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v32);
  char v34 = (char *)&v156 - v33;
  uint64_t result = AGSubgraphIsValid();
  if (result)
  {
    uint64_t v159 = v10;
    v163 = v14;
    uint64_t v36 = AGMakeUniqueID();
    uint64_t v187 = *(void *)(*(void *)v1 + 184);
    *(void *)(v1 + v187) = v36;
    uint64_t v37 = *(void *)(*(void *)v1 + 192);
    LODWORD(v178) = *(_DWORD *)(v1 + v37);
    uint64_t v177 = v37;
    *(_DWORD *)(v1 + v37) = v178 + 1;
    uint64_t v38 = *(void *)(*(void *)v1 + 160);
    uint64_t v188 = v1;
    long long v39 = (char *)(v1 + v38);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v34, v39, v29);
    uint64_t v40 = *(void *)(v28 - 8);
    *(void *)&long long v190 = v4;
    uint64_t v41 = v29;
    uint64_t v160 = v40;
    uint64_t v42 = v40 + 48;
    unsigned __int8 v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
    int v44 = v43(v34, 1, v28);
    uint64_t v161 = v30;
    uint64_t v45 = v30;
    id v46 = v39;
    unsigned __int8 v47 = *(void (**)(char *, uint64_t))(v45 + 8);
    uint64_t v162 = v41;
    uint64_t v48 = v41;
    uint64_t v49 = v190;
    v47(v34, v48);
    if (v44 != 1)
    {
      swift_beginAccess();
      uint64_t v158 = v42;
      v157 = v43;
      uint64_t result = v43(v39, 1, v28);
      if (result == 1) {
        goto LABEL_78;
      }
      ForEach.idGenerator.getter();
      uint64_t v50 = v193;
      swift_endAccess();
      uint64_t v192 = v50;
      uint64_t v195 = v9;
      uint64_t v196 = v49;
      uint64_t v197 = v171;
      v198 = v172;
      *(void *)&long long v199 = v175;
      type metadata accessor for ForEach.IDGenerator();
      char v51 = ForEach.IDGenerator.isConstant.getter();
      swift_release();
      char v52 = v157;
      if (v51)
      {
        swift_beginAccess();
        uint64_t result = v52(v46, 1, v28);
        if (result == 1) {
          goto LABEL_79;
        }
        v181 = v46;
        ForEach.data.getter();
        swift_endAccess();
        uint64_t v53 = v28;
        uint64_t v54 = dispatch thunk of Collection.count.getter();
        uint64_t v56 = v189 + 8;
        char v55 = *(void (**)(char *, uint64_t))(v189 + 8);
        v55(v27, v9);
        uint64_t v57 = v166;
        ForEach.data.getter();
        uint64_t v58 = dispatch thunk of Collection.count.getter();
        v172 = v55;
        v55(v57, v9);
        uint64_t v59 = v162;
        if (v54 != v58)
        {
          uint64_t v195 = 0;
          uint64_t v196 = 0xE000000000000000;
          _StringGuts.grow(_:)(205);
          uint64_t v193 = v195;
          uint64_t v194 = v196;
          v60._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v60);
          swift_bridgeObjectRelease();
          v61._countAndFlagsBits = 0x2820746E756F6320;
          v61._object = (void *)0xE800000000000000;
          String.append(_:)(v61);
          ForEach.data.getter();
          uint64_t v62 = dispatch thunk of Collection.count.getter();
          uint64_t v63 = v172;
          v172(v27, v9);
          uint64_t v195 = v62;
          v64._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v64);
          swift_bridgeObjectRelease();
          v65._object = (void *)0x80000001883383D0;
          v65._countAndFlagsBits = 0xD000000000000018;
          String.append(_:)(v65);
          uint64_t v66 = v181;
          swift_beginAccess();
          uint64_t result = v157(v66, 1, v53);
          if (result == 1)
          {
LABEL_82:
            __break(1u);
            return result;
          }
          ForEach.data.getter();
          swift_endAccess();
          uint64_t v67 = dispatch thunk of Collection.count.getter();
          v63(v27, v9);
          uint64_t v195 = v67;
          v68._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v68);
          swift_bridgeObjectRelease();
          v69._countAndFlagsBits = 0xD0000000000000A7;
          v69._object = (void *)0x80000001883383F0;
          String.append(_:)(v69);
          MEMORY[0x18C112B90](v193, v194);
          swift_bridgeObjectRelease();
        }
        uint64_t v70 = v181;
        swift_beginAccess();
        uint64_t v71 = v157;
        uint64_t result = v157(v70, 1, v53);
        if (result == 1) {
          goto LABEL_80;
        }
        uint64_t v72 = v167;
        ForEach.data.getter();
        swift_endAccess();
        uint64_t v73 = v160;
        uint64_t v74 = v168;
        (*(void (**)(char *, uint64_t, uint64_t))(v160 + 16))(v168, v186, v53);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v74, 0, 1, v53);
        swift_beginAccess();
        (*(void (**)(char *, char *, uint64_t))(v161 + 40))(v70, v74, v59);
        (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v164, v72, v9);
        uint64_t result = v71(v70, 1, v53);
        uint64_t v75 = v188;
        if (result != 1)
        {
          uint64_t v174 = v9;
          ForEach.data.setter();
          swift_endAccess();
          uint64_t v76 = (unint64_t *)(v75 + *(void *)(*(void *)v75 + 176));
          swift_beginAccess();
          unint64_t v77 = *v76;
          if ((*v76 & 0xC000000000000001) != 0)
          {
            uint64_t v78 = __CocoaDictionary.makeIterator()();
            unint64_t v175 = 0;
            uint64_t v79 = 0;
            unint64_t v80 = 0;
            unint64_t v81 = v78 | 0x8000000000000000;
          }
          else
          {
            uint64_t v134 = -1 << *(unsigned char *)(v77 + 32);
            uint64_t v79 = ~v134;
            uint64_t v135 = *(void *)(v77 + 64);
            unint64_t v175 = v77 + 64;
            uint64_t v136 = -v134;
            if (v136 < 64) {
              uint64_t v137 = ~(-1 << v136);
            }
            else {
              uint64_t v137 = -1;
            }
            unint64_t v80 = v137 & v135;
            unint64_t v81 = v77;
          }
          uint64_t v138 = v190;
          uint64_t v186 = TupleTypeMetadata2 - 8;
          v170 = (char *)v79;
          uint64_t AssociatedTypeWitness = v173 + 16;
          v139 = (void (**)(void))(v165 + 32);
          v181 = (char *)(v173 + 8);
          v176 = (char *)((unint64_t)(v79 + 64) >> 6);
          v169 = v176 - 1;
          uint64_t result = swift_bridgeObjectRetain();
          uint64_t v140 = 0;
          uint64_t v141 = v188;
          uint64_t v171 = v56;
          uint64_t v189 = v81;
          while ((v81 & 0x8000000000000000) != 0)
          {
            if (__CocoaDictionary.Iterator.next()())
            {
              v150 = v183;
              _forceBridgeFromObjectiveC<A>(_:_:)();
              swift_unknownObjectRelease();
              uint64_t v147 = TupleTypeMetadata2;
              _forceBridgeFromObjectiveC<A>(_:_:)();
              swift_unknownObjectRelease();
              uint64_t v148 = *(void *)(v147 - 8);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v150, 0, 1, v147);
            }
            else
            {
              uint64_t v147 = TupleTypeMetadata2;
              uint64_t v148 = *(void *)(TupleTypeMetadata2 - 8);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v148 + 56))(v183, 1, 1, TupleTypeMetadata2);
            }
            uint64_t v149 = v140;
            uint64_t v142 = v80;
LABEL_71:
            v153 = v182;
            (*v139)();
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v148 + 48))(v153, 1, v147) == 1)
            {
              outlined consume of Set<UIPress>.Iterator._Variant();
              return ((uint64_t (*)(char *, uint64_t))v172)(v167, v174);
            }
            uint64_t v154 = *(void *)&v153[*(int *)(v147 + 48)];
            *(void *)(v154 + *(void *)(*(void *)v154 + 176)) = *(void *)(v141 + v187);
            uint64_t v155 = *(void *)(*(void *)v154 + 184);
            if (*(_DWORD *)(v154 + v155) == v178) {
              *(_DWORD *)(v154 + v155) = *(_DWORD *)(v141 + v177);
            }
            swift_release();
            uint64_t v138 = v190;
            uint64_t result = (*(uint64_t (**)(char *, void))v181)(v153, v190);
            uint64_t v140 = v149;
            unint64_t v80 = v142;
            unint64_t v81 = v189;
          }
          if (v80)
          {
            uint64_t v142 = (v80 - 1) & v80;
            unint64_t v143 = __clz(__rbit64(v80)) | (v140 << 6);
            uint64_t v144 = v140;
LABEL_49:
            v145 = v183;
            (*(void (**)(char *, unint64_t, uint64_t))(v173 + 16))(v183, *(void *)(v81 + 48) + *(void *)(v173 + 72) * v143, v138);
            uint64_t v146 = *(void *)(v81 + 56);
            uint64_t v147 = TupleTypeMetadata2;
            *(void *)&v145[*(int *)(TupleTypeMetadata2 + 48)] = *(void *)(v146 + 8 * v143);
            uint64_t v148 = *(void *)(v147 - 8);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
            swift_retain();
            uint64_t v149 = v144;
LABEL_70:
            uint64_t v141 = v188;
            goto LABEL_71;
          }
          uint64_t v144 = v140 + 1;
          if (__OFADD__(v140, 1))
          {
            __break(1u);
            goto LABEL_77;
          }
          uint64_t v149 = v140;
          if (v144 < (uint64_t)v176)
          {
            unint64_t v151 = *(void *)(v175 + 8 * v144);
            if (v151)
            {
LABEL_55:
              uint64_t v142 = (v151 - 1) & v151;
              unint64_t v143 = __clz(__rbit64(v151)) + (v144 << 6);
              goto LABEL_49;
            }
            uint64_t v149 = v140 + 1;
            if (v140 + 2 < (uint64_t)v176)
            {
              unint64_t v151 = *(void *)(v175 + 8 * (v140 + 2));
              if (v151)
              {
                uint64_t v144 = v140 + 2;
                goto LABEL_55;
              }
              uint64_t v152 = v140 + 3;
              uint64_t v149 = v140 + 2;
              if (v140 + 3 < (uint64_t)v176)
              {
                unint64_t v151 = *(void *)(v175 + 8 * v152);
                if (!v151)
                {
                  while (1)
                  {
                    uint64_t v144 = v152 + 1;
                    if (__OFADD__(v152, 1)) {
                      break;
                    }
                    if (v144 >= (uint64_t)v176)
                    {
                      uint64_t v149 = (uint64_t)v169;
                      goto LABEL_69;
                    }
                    unint64_t v151 = *(void *)(v175 + 8 * v144);
                    ++v152;
                    if (v151) {
                      goto LABEL_55;
                    }
                  }
LABEL_77:
                  __break(1u);
LABEL_78:
                  __break(1u);
LABEL_79:
                  __break(1u);
LABEL_80:
                  __break(1u);
                  goto LABEL_81;
                }
                uint64_t v144 = v140 + 3;
                goto LABEL_55;
              }
            }
          }
LABEL_69:
          uint64_t v147 = TupleTypeMetadata2;
          uint64_t v148 = *(void *)(TupleTypeMetadata2 - 8);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v148 + 56))(v183, 1, 1, TupleTypeMetadata2);
          uint64_t v142 = 0;
          goto LABEL_70;
        }
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
    }
    uint64_t v82 = v160;
    uint64_t v83 = v168;
    (*(void (**)(char *, uint64_t, uint64_t))(v160 + 16))(v168, v186, v28);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v82 + 56))(v83, 0, 1, v28);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v161 + 40))(v46, v83, v162);
    swift_endAccess();
    ForEach.data.getter();
    uint64_t v84 = v49;
    unint64_t v85 = (unint64_t)v163;
    dispatch thunk of Collection.startIndex.getter();
    uint64_t v86 = v189 + 8;
    double v87 = *(void (**)(char *, uint64_t))(v189 + 8);
    v87(v27, v9);
    ForEach.data.getter();
    dispatch thunk of Collection.endIndex.getter();
    uint64_t v189 = v86;
    v184 = v87;
    v87(v27, v9);
    uint64_t v88 = v84;
    uint64_t v89 = v188 + *(void *)(*(void *)v188 + 176);
    swift_beginAccess();
    TupleTypeMetadata2 = v89;
    uint64_t v90 = swift_bridgeObjectRetain();
    uint64_t v91 = MEMORY[0x18C1153A0](v90, v88, v179, v175);
    swift_bridgeObjectRelease();
    if (!v91) {
      goto LABEL_38;
    }
    uint64_t v92 = v28;
    v183 = *(char **)(swift_getAssociatedConformanceWitness() + 8);
    uint64_t v93 = v91;
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {
LABEL_21:
      uint64_t v102 = v179;
      uint64_t v192 = Array.init()();
      uint64_t v103 = swift_bridgeObjectRetain();
      uint64_t v104 = v190;
      unint64_t v105 = v175;
      uint64_t v106 = MEMORY[0x18C115320](v103, v190, v102, v175);
      uint64_t v108 = v107;
      unint64_t v85 = (unint64_t)v109;
      swift_bridgeObjectRelease();
      uint64_t v195 = v106;
      uint64_t v196 = v108;
      LOBYTE(v197) = v85 & 1;
      uint64_t v110 = swift_bridgeObjectRetain();
      uint64_t v189 = MEMORY[0x18C1153F0](v110, v104, v102, v105);
      uint64_t v187 = v111;
      char v113 = v112;
      swift_bridgeObjectRelease();
      outlined copy of [A : B].Index._Variant<A, B>(v106, v108, v85 & 1);
      LODWORD(v186) = v113 & 1;
      char v114 = static Dictionary.Index.== infix(_:_:)();
      outlined consume of Set<UIOpenURLContext>.Index._Variant(v106, v108, v85 & 1);
      if ((v114 & 1) == 0)
      {
        uint64_t v115 = (void (**)(char *, uint64_t))(v173 + 8);
        do
        {
          char v116 = v85 & 1;
          outlined copy of [A : B].Index._Variant<A, B>(v106, v108, v85 & 1);
          swift_bridgeObjectRetain();
          unint64_t v85 = (unint64_t)v170;
          Dictionary.subscript.getter();
          swift_bridgeObjectRelease();
          outlined consume of Set<UIOpenURLContext>.Index._Variant(v106, v108, v116);
          (*v115)((char *)v85, v104);
          if (*(unsigned char *)(v191 + *(void *)(*(void *)v191 + 200)))
          {
            uint64_t v117 = v93;
          }
          else
          {
            uint64_t v117 = v93;
            if (*(_DWORD *)(v191 + *(void *)(*(void *)v191 + 184)) != *(_DWORD *)(v188 + v177))
            {
              type metadata accessor for Array();
              swift_retain();
              Array.append(_:)();
              uint64_t v117 = v93 - 1;
            }
          }
          uint64_t v118 = *(void *)TupleTypeMetadata2;
          swift_bridgeObjectRetain();
          uint64_t v104 = v190;
          MEMORY[0x18C115400](&v195, v118, v190, v102, v105);
          swift_release();
          swift_bridgeObjectRelease();
          if (!v117) {
            break;
          }
          uint64_t v93 = v117;
          uint64_t v106 = v195;
          uint64_t v108 = v196;
          unint64_t v85 = v197;
          outlined copy of [A : B].Index._Variant<A, B>(v195, v196, v197);
          char v119 = static Dictionary.Index.== infix(_:_:)();
          outlined consume of Set<UIOpenURLContext>.Index._Variant(v106, v108, v85);
        }
        while ((v119 & 1) == 0);
      }
      uint64_t v120 = v192;
      uint64_t v121 = MEMORY[0x18C115CB0](v192, v102);
      uint64_t v122 = v159;
      if (v121)
      {
        uint64_t v123 = v102;
        uint64_t v124 = 4;
        do
        {
          uint64_t v125 = v124 - 4;
          Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
          Array._checkSubscript(_:wasNativeTypeChecked:)();
          if (IsNativeType)
          {
            uint64_t v127 = *(void *)(v120 + 8 * v124);
            swift_retain();
            BOOL v128 = __OFADD__(v125, 1);
            uint64_t v129 = v124 - 3;
            if (v128) {
              goto LABEL_37;
            }
          }
          else
          {
            uint64_t v127 = _ArrayBuffer._getElementSlowPath(_:)();
            BOOL v128 = __OFADD__(v125, 1);
            uint64_t v129 = v124 - 3;
            if (v128)
            {
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
          }
          TableRowForEachState.eraseItem(_:)(v127);
          swift_release();
          ++v124;
        }
        while (v129 != MEMORY[0x18C115CB0](v120, v123));
      }
      outlined consume of Set<UIOpenURLContext>.Index._Variant(v189, v187, v186);
      swift_bridgeObjectRelease();
      outlined consume of Set<UIOpenURLContext>.Index._Variant(v195, v196, v197);
      v132 = *(void (**)(char *, uint64_t))(v122 + 8);
      uint64_t v133 = AssociatedTypeWitness;
      v132(v176, AssociatedTypeWitness);
      return ((uint64_t (*)(char *, uint64_t))v132)(v163, v133);
    }
    else
    {
      uint64_t v94 = 0;
      v178 = (void (**)(uint64_t, unint64_t, uint64_t))(v159 + 24);
      v182 = (char *)(v173 + 8);
      v169 = (char *)v92;
      unint64_t v95 = v175;
      double v96 = v181;
      while (1)
      {
        ForEach.idGenerator.getter();
        ForEach.data.getter();
        uint64_t v97 = v190;
        uint64_t v195 = v9;
        uint64_t v196 = v190;
        uint64_t v197 = v171;
        v198 = v172;
        *(void *)&long long v199 = v95;
        type metadata accessor for ForEach.IDGenerator();
        ForEach.IDGenerator.makeID(data:index:offset:)();
        v184(v27, v9);
        swift_release();
        uint64_t v98 = (void *)TupleTypeMetadata2;
        swift_beginAccess();
        MEMORY[0x18C115450](&v192, v96, *v98, v97, v179, v95);
        uint64_t v99 = v192;
        if (v192)
        {
          swift_endAccess();
          uint64_t v100 = v99 + *(void *)(*(void *)v99 + 160);
          swift_beginAccess();
          (*v178)(v100, v85, AssociatedTypeWitness);
          swift_endAccess();
          uint64_t v101 = v188;
          *(void *)(v99 + *(void *)(*(void *)v99 + 176)) = *(void *)(v188 + v187);
          *(void *)(v99 + *(void *)(*(void *)v99 + 168)) = v94;
          *(_DWORD *)(v99 + *(void *)(*(void *)v99 + 184)) = *(_DWORD *)(v101 + v177);
          swift_release();
          --v93;
        }
        else
        {
          swift_endAccess();
        }
        ForEach.data.getter();
        dispatch thunk of Collection.formIndex(after:)();
        v184(v27, v9);
        (*(void (**)(char *, void))v182)(v181, v190);
        if (!v93) {
          break;
        }
        ++v94;
        if (dispatch thunk of static Equatable.== infix(_:_:)()) {
          goto LABEL_21;
        }
      }
LABEL_38:
      v130 = *(void (**)(char *, uint64_t))(v159 + 8);
      uint64_t v131 = AssociatedTypeWitness;
      v130(v176, AssociatedTypeWitness);
      return ((uint64_t (*)(unint64_t, uint64_t))v130)(v85, v131);
    }
  }
  return result;
}

uint64_t TableRowForEachState.eraseItem(_:)(uint64_t a1)
{
  *(unsigned char *)(a1 + *(void *)(*(void *)a1 + 200)) = 1;
  return TableColumnForEachState.Item.release()();
}

void TableRowForEachState.uneraseItem(_:)(uint64_t a1)
{
  *(unsigned char *)(a1 + *(void *)(*(void *)a1 + 200)) = 0;
  AGSubgraphAddChild();
  AGSubgraphRef.didReinsert()();
}

void *closure #1 in TableRowForEachState.item(at:offset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, long long *a4@<X3>, void *a5@<X8>)
{
  uint64_t v63 = a3;
  uint64_t v72 = a2;
  uint64_t v58 = a5;
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(*(void *)a1 + 88);
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v62 = (char *)v57 - v10;
  uint64_t v12 = v7[12];
  uint64_t v13 = v7[13];
  uint64_t v14 = v7[14];
  *(void *)&long long v76 = v7[10];
  uint64_t v11 = v76;
  *((void *)&v76 + 1) = v8;
  *(void *)&long long v77 = v12;
  *((void *)&v77 + 1) = v13;
  *(void *)&long long v78 = v14;
  uint64_t v66 = type metadata accessor for ForEach();
  uint64_t v65 = type metadata accessor for Optional();
  uint64_t v64 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  uint64_t v67 = (uint64_t)v57 - v15;
  uint64_t v16 = v7[15];
  *(void *)&long long v76 = v11;
  *((void *)&v76 + 1) = v8;
  *(void *)&long long v77 = v12;
  *((void *)&v77 + 1) = v13;
  *(void *)&long long v78 = v14;
  *((void *)&v78 + 1) = v16;
  uint64_t v61 = type metadata accessor for TableRowForEachState.ChildTraits();
  uint64_t v60 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  uint64_t v59 = (uint64_t)v57 - v17;
  uint64_t v18 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v57 - v20;
  uint64_t v70 = v11;
  *(void *)&long long v76 = v11;
  *((void *)&v76 + 1) = v8;
  *(void *)&long long v77 = v12;
  uint64_t v69 = v13;
  *((void *)&v77 + 1) = v13;
  uint64_t v68 = v14;
  *(void *)&long long v78 = v14;
  *((void *)&v78 + 1) = v16;
  uint64_t v71 = v16;
  uint64_t v22 = type metadata accessor for TableRowForEachState.ChildContent();
  uint64_t v23 = *(void *)(v22 - 8);
  double v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)v57 - v25;
  if (*(unsigned char *)(a1 + 180))
  {
    __break(1u);
    goto LABEL_7;
  }
  int v27 = *(_DWORD *)(a1 + 176);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, v72, v8, v24);
  *(_DWORD *)uint64_t v26 = v27;
  *(void *)&long long v76 = v70;
  *((void *)&v76 + 1) = v8;
  *(void *)&long long v77 = v12;
  *((void *)&v77 + 1) = v69;
  *(void *)&long long v78 = v68;
  *((void *)&v78 + 1) = v71;
  uint64_t v28 = type metadata accessor for TableRowForEachState.ChildContent();
  uint64_t v29 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(&v26[*(int *)(v28 + 68)], v21, v8);
  MEMORY[0x1F4188790](v29);
  uint64_t v72 = v12;
  uint64_t v53 = v12;
  uint64_t v54 = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v30 = v72;
  uint64_t v31 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v26, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)&v57[-12], v22, MEMORY[0x1E4FBC248], v31, MEMORY[0x1E4FBC278], v32);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  v57[1] = v76;
  uint64_t v33 = a1 + *(void *)(*(void *)a1 + 160);
  swift_beginAccess();
  uint64_t v34 = v67;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v67, v33, v65);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(v66 - 8) + 48))(v34, 1) == 1)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  int v35 = *(_DWORD *)(a1 + 164);
  uint64_t v36 = (uint64_t)v62;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v62, 1, 1, v8);
  uint64_t v37 = v71;
  uint64_t v56 = v71;
  uint64_t WitnessTable = v68;
  uint64_t v53 = v30;
  uint64_t v54 = v69;
  uint64_t v38 = v59;
  uint64_t v39 = TableRowForEachState.ChildTraits.init(forEach:item:traits:itemOffset:itemID:)(v67, 0, v35, 0, 1, v36, v59);
  MEMORY[0x1F4188790](v39);
  uint64_t v40 = v61;
  uint64_t WitnessTable = v61;
  uint64_t v56 = swift_getWitnessTable();
  _s14AttributeGraph0A0Vy7SwiftUI12TableRowListVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, MEMORY[0x1E4F40530], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v38, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_20, (uint64_t)&v53, v40, MEMORY[0x1E4FBC248], v41, MEMORY[0x1E4FBC278], v42);
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v38, v40);
  unsigned __int8 v43 = v63;
  *uint64_t v63 = v76;
  *((unsigned char *)v43 + 4) = 0;
  if (*(unsigned char *)(a1 + 188))
  {
LABEL_8:
    __break(1u);
LABEL_9:
    __break(1u);
  }
  AGGraphAddInput();
  if (v43[1]) {
    goto LABEL_9;
  }
  *((_DWORD *)a4 + 37) = *v43;
  uint64_t v44 = v72;
  _GraphValue.init(_:)();
  long long v45 = a4[6];
  long long v46 = a4[8];
  long long v83 = a4[7];
  long long v84 = v46;
  uint64_t v85 = *((void *)a4 + 18);
  long long v47 = a4[3];
  long long v78 = a4[2];
  long long v79 = v47;
  long long v48 = a4[5];
  long long v80 = a4[4];
  long long v81 = v48;
  long long v82 = v45;
  long long v49 = a4[1];
  long long v76 = *a4;
  long long v77 = v49;
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, char *, long long *, uint64_t, uint64_t))(v37 + 48))(&v74, v73, &v76, v44, v37);
  int v51 = v75;
  char v52 = v58;
  *uint64_t v58 = v74;
  *((_DWORD *)v52 + 2) = v51;
  return result;
}

uint64_t TableRowForEachState.ChildTraits.init(forEach:item:traits:itemOffset:itemID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v11 = type metadata accessor for ForEach();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(a7, a1, v11);
  uint64_t v12 = (int *)type metadata accessor for TableRowForEachState.ChildTraits();
  *(void *)(a7 + v12[17]) = a2;
  *(_DWORD *)(a7 + v12[18]) = a3;
  uint64_t v13 = a7 + v12[19];
  *(void *)uint64_t v13 = a4;
  *(unsigned char *)(v13 + 8) = a5 & 1;
  uint64_t v14 = a7 + v12[20];
  uint64_t v15 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a6, v15);
}

uint64_t closure #2 in TableRowForEachState.item(at:offset:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for TableRowForEachState.ChildTraits() + 68);
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + v4) = a2;
  return result;
}

uint64_t implicit closure #2 in TableRowForEachState.item(at:offset:)()
{
  _StringGuts.grow(_:)(52);
  v0._object = (void *)0x8000000188342A30;
  v0._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t TableRowForEachState.fetchRowsPerElement()()
{
  Swift::String v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(v2 + 104);
  uint64_t v4 = *(void *)(v2 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v25 - v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = (char *)v1 + *(void *)(v2 + 168);
  if (v13[8] != 1 || *(void *)v13) {
    goto LABEL_7;
  }
  uint64_t v30 = v10;
  uint64_t v27 = v9;
  uint64_t v14 = (char *)v1 + *(void *)(v2 + 160);
  swift_beginAccess();
  uint64_t v15 = *(void *)(v2 + 112);
  uint64_t v31 = v4;
  long long v16 = *(_OWORD *)(v2 + 88);
  uint64_t v17 = v14;
  long long v32 = v16;
  uint64_t v33 = v3;
  uint64_t v34 = v15;
  uint64_t v18 = type metadata accessor for ForEach();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  uint64_t v28 = v19 + 48;
  uint64_t v29 = v20;
  uint64_t result = v20(v17, 1, v18);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v26 = v17;
  ForEach.data.getter();
  swift_endAccess();
  char v22 = dispatch thunk of Collection.isEmpty.getter();
  uint64_t v23 = v30 + 8;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v30 + 8);
  v25(v12, v4);
  if (v22) {
    goto LABEL_7;
  }
  uint64_t v30 = v23;
  double v24 = v26;
  swift_beginAccess();
  uint64_t result = v29(v24, 1, v18);
  if (result == 1)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  ForEach.data.getter();
  swift_endAccess();
  dispatch thunk of Collection.startIndex.getter();
  v25(v12, v4);
  TableRowForEachState.item(at:offset:)((uint64_t)v7, 0);
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, AssociatedTypeWitness);
LABEL_7:
  if (v13[8]) {
    return 0;
  }
  else {
    return *(void *)v13;
  }
}

uint64_t TableRowForEachState.forEachItem(from:do:)(uint64_t *a1, uint64_t (*a2)(uint64_t *, uint64_t), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v110 = a3;
  long long v109 = a2;
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void **)v3;
  uint64_t v116 = *(void *)(*(void *)v3 + 104);
  uint64_t v8 = *(void *)(*(void *)(v116 + 8) + 8);
  uint64_t v9 = v6[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v103 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v105 = (char *)&v95 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v102 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  char v112 = (char *)&v95 - v13;
  uint64_t v114 = v9;
  uint64_t v122 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v120 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v95 - v17;
  uint64_t v115 = v11;
  uint64_t v19 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)&v95 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v121 = (char *)&v95 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v95 - v26;
  MEMORY[0x1F4188790](v28);
  char v113 = (char *)&v95 - v29;
  MEMORY[0x1F4188790](v30);
  long long v32 = (char *)&v95 - v31;
  uint64_t result = AGSubgraphIsValid();
  if (result)
  {
    uint64_t v99 = v27;
    uint64_t v129 = 0;
    uint64_t v34 = TableRowForEachState.fetchRowsPerElement()();
    uint64_t v104 = v4;
    uint64_t v100 = v22;
    uint64_t v101 = v32;
    uint64_t v119 = v8;
    if (v35)
    {
      uint64_t v95 = v12;
      uint64_t v111 = v19;
      uint64_t v98 = a1;
      uint64_t v128 = 0;
      uint64_t v52 = v4 + *(void *)(*(void *)v4 + 160);
      swift_beginAccess();
      uint64_t v53 = v7[11];
      uint64_t v54 = v7[12];
      uint64_t v55 = v7[14];
      uint64_t v56 = v52;
      uint64_t v57 = v114;
      uint64_t v123 = v114;
      uint64_t v124 = v53;
      uint64_t v108 = v53;
      uint64_t v107 = v54;
      uint64_t v125 = v54;
      uint64_t v126 = v116;
      uint64_t v106 = v55;
      uint64_t v127 = v55;
      uint64_t v58 = type metadata accessor for ForEach();
      double v96 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48);
      uint64_t result = v96(v52, 1, v58);
      if (result == 1)
      {
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v59 = v4;
      uint64_t v60 = v120;
      ForEach.data.getter();
      swift_endAccess();
      uint64_t v61 = v105;
      dispatch thunk of Collection.indices.getter();
      uint64_t v62 = *(void (**)(char *, uint64_t))(v122 + 8);
      v122 += 8;
      uint64_t v118 = v62;
      uint64_t v63 = ((uint64_t (*)(char *, uint64_t))v62)(v60, v57);
      MEMORY[0x1F4188790](v63);
      *(&v95 - 4) = v59;
      *(&v95 - 3) = (uint64_t)&v129;
      *(&v95 - 2) = (uint64_t)v98;
      *(&v95 - 1) = (uint64_t)&v128;
      uint64_t v64 = AssociatedTypeWitness;
      swift_getAssociatedConformanceWitness();
      uint64_t v65 = v112;
      Sequence.first(where:)();
      (*(void (**)(char *, uint64_t))(v103 + 8))(v61, v64);
      uint64_t v66 = v111;
      uint64_t v67 = v115;
      int v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v111 + 48))(v65, 1, v115);
      uint64_t v97 = 0;
      if (v68 == 1)
      {
        swift_beginAccess();
        uint64_t result = v96(v56, 1, v58);
        if (result == 1)
        {
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
        uint64_t v69 = v120;
        ForEach.data.getter();
        swift_endAccess();
        uint64_t v70 = v99;
        uint64_t v71 = v114;
        dispatch thunk of Collection.endIndex.getter();
        v118(v69, v71);
        (*(void (**)(char *, uint64_t))(v102 + 8))(v65, v95);
        uint64_t v19 = v111;
        uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v111 + 32);
        uint64_t v4 = v104;
      }
      else
      {
        uint64_t v72 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
        uint64_t v70 = v99;
        v72(v99, v65, v67);
        uint64_t v4 = v104;
        uint64_t v19 = v66;
      }
      long long v32 = v101;
      uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v72)(v101, v70, v67);
      a1 = v98;
      uint64_t v50 = *v98 - v128;
      uint64_t v51 = (uint64_t)v121;
      if (__OFSUB__(*v98, v128))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      uint64_t v49 = v114;
    }
    else if (v34 < 1)
    {
      uint64_t v129 = 0;
      uint64_t v73 = v4 + *(void *)(*(void *)v4 + 160);
      swift_beginAccess();
      uint64_t v74 = v7[11];
      uint64_t v75 = v7[12];
      uint64_t v76 = v7[14];
      uint64_t v77 = v114;
      uint64_t v123 = v114;
      uint64_t v124 = v74;
      uint64_t v108 = v74;
      uint64_t v107 = v75;
      uint64_t v125 = v75;
      uint64_t v126 = v116;
      uint64_t v106 = v76;
      uint64_t v127 = v76;
      uint64_t v78 = type metadata accessor for ForEach();
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 48))(v73, 1, v78);
      if (result == 1)
      {
LABEL_32:
        __break(1u);
        return result;
      }
      long long v79 = v120;
      ForEach.data.getter();
      swift_endAccess();
      dispatch thunk of Collection.endIndex.getter();
      long long v80 = *(void (**)(char *, uint64_t))(v122 + 8);
      v122 += 8;
      uint64_t v118 = v80;
      v80(v79, v77);
      uint64_t v50 = 0;
      uint64_t v97 = 0;
      uint64_t v51 = (uint64_t)v121;
      uint64_t v49 = v77;
    }
    else
    {
      uint64_t v111 = v19;
      uint64_t v36 = *a1;
      uint64_t AssociatedTypeWitness = v34;
      uint64_t v129 = v36 / v34;
      uint64_t v37 = v4 + *(void *)(*(void *)v4 + 160);
      swift_beginAccess();
      uint64_t v38 = v7[11];
      uint64_t v39 = v7[12];
      uint64_t v40 = v7[14];
      uint64_t v41 = v114;
      uint64_t v123 = v114;
      uint64_t v124 = v38;
      uint64_t v108 = v38;
      uint64_t v107 = v39;
      uint64_t v125 = v39;
      uint64_t v126 = v116;
      uint64_t v106 = v40;
      uint64_t v127 = v40;
      uint64_t v42 = type metadata accessor for ForEach();
      unsigned __int8 v43 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48);
      uint64_t result = v43(v37, 1, v42);
      if (result == 1)
      {
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
      uint64_t v44 = v18;
      ForEach.data.getter();
      swift_endAccess();
      swift_beginAccess();
      uint64_t result = v43(v37, 1, v42);
      if (result == 1)
      {
LABEL_30:
        __break(1u);
        goto LABEL_31;
      }
      long long v45 = v120;
      ForEach.data.getter();
      swift_endAccess();
      long long v46 = v113;
      dispatch thunk of Collection.startIndex.getter();
      uint64_t v47 = v122 + 8;
      long long v48 = *(void (**)(char *, uint64_t))(v122 + 8);
      v48(v45, v41);
      long long v32 = v101;
      dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
      uint64_t v19 = v111;
      (*(void (**)(char *, uint64_t))(v111 + 8))(v46, v115);
      uint64_t v122 = v47;
      uint64_t v118 = v48;
      v48(v44, v41);
      uint64_t v49 = v41;
      uint64_t v97 = 0;
      uint64_t v50 = *a1 % AssociatedTypeWitness;
      uint64_t v51 = (uint64_t)v121;
    }
    *a1 = v50;
    long long v82 = *(char **)(v19 + 16);
    uint64_t v81 = v19 + 16;
    uint64_t v83 = v115;
    unint64_t v105 = v82;
    ((void (*)(uint64_t, char *, uint64_t))v82)(v51, v32, v115);
    uint64_t v84 = v4 + *(void *)(*(void *)v4 + 160);
    char v112 = (char *)(v81 - 8);
    uint64_t v103 = v50 & ~(v50 >> 63);
    uint64_t v85 = v100;
    uint64_t v111 = v81;
    uint64_t v102 = v84;
    while (1)
    {
      ((void (*)(char *, uint64_t, uint64_t))v105)(v85, v51, v83);
      swift_beginAccess();
      uint64_t v123 = v49;
      uint64_t v124 = v108;
      uint64_t v125 = v107;
      uint64_t v126 = v116;
      uint64_t v127 = v106;
      uint64_t v86 = type metadata accessor for ForEach();
      uint64_t AssociatedTypeWitness = *(void *)(*(void *)(v86 - 8) + 48);
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))AssociatedTypeWitness)(v84, 1, v86);
      if (result == 1) {
        goto LABEL_26;
      }
      double v87 = v120;
      ForEach.data.getter();
      swift_endAccess();
      uint64_t v88 = v113;
      dispatch thunk of Collection.endIndex.getter();
      v118(v87, v49);
      swift_getAssociatedConformanceWitness();
      char v89 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v90 = *(void (**)(char *, uint64_t))v112;
      (*(void (**)(char *, uint64_t))v112)(v88, v83);
      v90(v85, v83);
      if (v89)
      {
        v90(v121, v83);
        v90(v101, v83);
        return 1;
      }
      uint64_t v91 = v129;
      uint64_t v92 = TableRowForEachState.item(at:offset:)((uint64_t)v121, v129);
      *a1 = v103;
      if ((v109(a1, v92) & 1) == 0)
      {
        swift_release();
        uint64_t v94 = v115;
        v90(v121, v115);
        v90(v101, v94);
        return 0;
      }
      uint64_t v129 = v91 + 1;
      *a1 = 0;
      uint64_t v84 = v102;
      swift_beginAccess();
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))AssociatedTypeWitness)(v84, 1, v86);
      if (result == 1) {
        goto LABEL_27;
      }
      uint64_t v93 = v120;
      ForEach.data.getter();
      swift_endAccess();
      uint64_t v51 = (uint64_t)v121;
      uint64_t v49 = v114;
      dispatch thunk of Collection.formIndex(after:)();
      swift_release();
      v118(v93, v49);
      uint64_t v83 = v115;
    }
  }
  return result;
}

uint64_t closure #1 in TableRowForEachState.forEachItem(from:do:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  TableRowForEachState.item(at:offset:)(a1, *a3);
  uint64_t result = swift_release();
  if (*(unsigned char *)(a2 + 188) == 1) {
    goto LABEL_7;
  }
  Inputuint64_t Value = AGGraphGetInputValue();
  outlined init with copy of TableRowList(InputValue, (uint64_t)v16);
  uint64_t v11 = v17;
  uint64_t v12 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 16))(v11, v12);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  uint64_t v14 = *a5 + v13;
  if (__OFADD__(*a5, v13))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v15 = *a4;
  if (*a4 >= v14)
  {
    *a5 = v14;
    *a3 &= 1uLL;
  }
  return v15 < v14;
}

uint64_t TableRowForEachState.count()(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v14 - v5;
  if (!AGSubgraphIsValid()) {
    return 0;
  }
  uint64_t v7 = TableRowForEachState.fetchRowsPerElement()();
  if (v8)
  {
    uint64_t v15 = 0;
    uint64_t v18 = 0;
    MEMORY[0x1F4188790](v7);
    *((void *)&v14 - 2) = &v18;
    *((void *)&v14 - 1) = v1;
    TableRowForEachState.forEachItem(from:do:)(&v15, (uint64_t (*)(uint64_t *, uint64_t))partial apply for closure #1 in TableRowForEachState.count(), (uint64_t)(&v14 - 2));
    return v18;
  }
  else
  {
    uint64_t v9 = v7;
    uint64_t v10 = (uint64_t)v1 + *(void *)(*v1 + 160);
    swift_beginAccess();
    uint64_t v15 = v3;
    long long v16 = *(_OWORD *)(v2 + 88);
    long long v14 = *(_OWORD *)(v2 + 104);
    long long v17 = v14;
    uint64_t v11 = type metadata accessor for ForEach();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      ForEach.data.getter();
      swift_endAccess();
      uint64_t v13 = dispatch thunk of Collection.count.getter();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      uint64_t result = v13 * v9;
      if ((unsigned __int128)(v13 * (__int128)v9) >> 64 != (v13 * v9) >> 63)
      {
        __break(1u);
        return 0;
      }
    }
  }
  return result;
}

void closure #1 in TableRowForEachState.count()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 188) != 1)
  {
    Inputuint64_t Value = AGGraphGetInputValue();
    outlined init with copy of TableRowList(InputValue, (uint64_t)v9);
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    if (!__OFADD__(*a3, v8))
    {
      *a3 += v8;
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t TableRowForEachState.Info.Init.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v13[0] = a8;
  v13[1] = a3;
  v13[2] = a4;
  void v13[3] = a5;
  void v13[4] = a6;
  v13[5] = a7;
  uint64_t v8 = type metadata accessor for ForEach();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v13 - v10;
  TableRowForEachState.Info.Init.forEach.getter((uint64_t)v13 - v10);
  TableRowForEachState.update(forEach:)((uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_retain();
}

uint64_t protocol witness for Rule.value.getter in conformance TableRowForEachState<A, B, C>.Info.Init@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = TableRowForEachState.Info.Init.value.getter(*(void *)v2, *(unsigned int *)(v2 + 8), a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t TableRowForEachState.Item.__deallocating_deinit()
{
  return TableRowForEachState.Item.__deallocating_deinit(TableColumnForEachState.Item.deinit);
}

uint64_t TableRowForEachState.ChildTraits.traits.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(_DWORD *)(v2 + *(int *)(a1 + 72)) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t result = 0;
  }
  else
  {
    AGGraphGetValue();
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a2 = result;
  return result;
}

uint64_t TableRowForEachState.ChildTraits.updateValue()(uint64_t a1)
{
  uint64_t v2 = a1;
  v102[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(*(void *)(a1 + 24) - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v90 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v70 - v6;
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v94 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v70 - v17;
  v24.n128_f64[0] = MEMORY[0x1F4188790](v19);
  uint64_t v84 = *(int *)(v2 + 68);
  uint64_t v25 = *(void *)(v1 + v84);
  if (!v25)
  {
    int v45 = 0;
    uint64_t v43 = v9;
    uint64_t v44 = v94;
    goto LABEL_18;
  }
  uint64_t v26 = v1 + *(int *)(v2 + 76);
  char v27 = *(unsigned char *)(v26 + 8);
  uint64_t v28 = *(void *)(v25 + *(void *)(*(void *)v25 + 168));
  uint64_t v92 = v21;
  uint64_t v75 = v22;
  uint64_t v73 = v7;
  uint64_t v83 = v23;
  if ((v27 & 1) != 0 || *(void *)v26 != v28)
  {
    *(void *)uint64_t v26 = v28;
    *(unsigned char *)(v26 + 8) = 0;
    int v74 = 1;
  }
  else
  {
    int v74 = 0;
  }
  uint64_t v91 = v2;
  uint64_t v29 = *(int *)(v2 + 80);
  uint64_t v88 = v1;
  uint64_t v30 = *(void (**)(char *, __n128))(v12 + 16);
  uint64_t v31 = (char *)&v70 - v20;
  long long v82 = (char *)(v1 + v29);
  v30((char *)&v70 - v20, v24);
  long long v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v78 = v25 + *(void *)(*(void *)v25 + 128);
  uint64_t v79 = v3 + 16;
  uint64_t v77 = v32;
  ((void (*)(char *))v32)(v18);
  uint64_t v33 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56);
  uint64_t v81 = v3 + 56;
  long long v80 = v33;
  v33((uint64_t)v18, 0, 1, v9);
  uint64_t v76 = TupleTypeMetadata2;
  uint64_t v34 = *(int *)(TupleTypeMetadata2 + 48);
  char v35 = v92;
  uint64_t v85 = v25;
  uint64_t v36 = v18;
  uint64_t v37 = v12;
  uint64_t v38 = &v92[v34];
  ((void (*)(char *, char *, uint64_t))v30)(v92, v31, v10);
  uint64_t v86 = (uint64_t)v38;
  ((void (*)(char *, char *, uint64_t))v30)(v38, v36, v10);
  uint64_t v89 = v3;
  uint64_t v93 = v10;
  uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  int v40 = v39((uint64_t)v35, 1, v9);
  uint64_t v87 = v37;
  if (v40 != 1)
  {
    uint64_t v71 = v36;
    uint64_t v72 = v31;
    long long v46 = v83;
    ((void (*)(char *, char *, uint64_t))v30)(v83, v35, v93);
    uint64_t v47 = v86;
    if (v39(v86, 1, v9) != 1)
    {
      uint64_t v51 = v89;
      uint64_t v52 = v73;
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 32))(v73, v47, v9);
      swift_retain();
      LODWORD(v86) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v53 = v51;
      uint64_t v54 = *(void (**)(char *, uint64_t))(v51 + 8);
      v54(v52, v9);
      uint64_t v55 = v87;
      uint64_t v41 = *(void (**)(char *, uint64_t))(v87 + 8);
      uint64_t v10 = v93;
      v41(v71, v93);
      v41(v72, v10);
      v54(v83, v9);
      uint64_t v3 = v53;
      v41(v35, v10);
      uint64_t v12 = v55;
      uint64_t v43 = v9;
      uint64_t v44 = v94;
      if (v86)
      {
        swift_release();
        uint64_t v1 = v88;
        uint64_t v2 = v91;
        goto LABEL_17;
      }
LABEL_14:
      uint64_t v50 = v82;
      v41(v82, v10);
      v77((uint64_t)v50, v78, v43);
      swift_release();
      int v45 = 1;
      v80((uint64_t)v50, 0, 1, v43);
      uint64_t v1 = v88;
      uint64_t v2 = v91;
      goto LABEL_18;
    }
    uint64_t v12 = v87;
    uint64_t v41 = *(void (**)(char *, uint64_t))(v87 + 8);
    swift_retain();
    uint64_t v10 = v93;
    v41(v71, v93);
    v41(v72, v10);
    uint64_t v3 = v89;
    (*(void (**)(char *, uint64_t))(v89 + 8))(v46, v9);
    uint64_t v48 = v9;
    uint64_t v44 = v94;
    uint64_t v49 = v35;
    uint64_t v43 = v48;
LABEL_13:
    (*(void (**)(char *, uint64_t))(v75 + 8))(v49, v76);
    goto LABEL_14;
  }
  uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
  swift_retain();
  uint64_t v42 = v93;
  v41(v36, v93);
  v41(v31, v42);
  uint64_t v43 = v9;
  if (v39(v86, 1, v9) != 1)
  {
    uint64_t v3 = v89;
    uint64_t v12 = v87;
    uint64_t v10 = v93;
    uint64_t v44 = v94;
    uint64_t v49 = v92;
    goto LABEL_13;
  }
  uint64_t v10 = v93;
  v41(v92, v93);
  swift_release();
  uint64_t v1 = v88;
  uint64_t v3 = v89;
  uint64_t v2 = v91;
  uint64_t v12 = v87;
  uint64_t v44 = v94;
LABEL_17:
  int v45 = v74;
LABEL_18:
  if (*(_DWORD *)(v1 + *(int *)(v2 + 72)) == *MEMORY[0x1E4F4E7A0])
  {
    BOOL v57 = 1;
  }
  else
  {
    AGGraphGetValue();
    BOOL v57 = (v56 & 1) == 0;
  }
  if (AGGraphGetOutputValue() && v57)
  {
    v102[0] = swift_bridgeObjectRetain();
    if (!v45) {
      goto LABEL_32;
    }
  }
  else
  {
    TableRowForEachState.ChildTraits.traits.getter(v2, v102);
    if (v102[0])
    {
      if (!v45)
      {
LABEL_32:
        if (!AGGraphGetOutputValue())
        {
          uint64_t v96 = v102[0];
          AGGraphSetOutputValue();
        }
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      ViewTraitCollection.init()();
      v102[0] = v96;
      if (!v45) {
        goto LABEL_32;
      }
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v44, v1 + *(int *)(v2 + 80), v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v44, 1, v43) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v44, v10);
    goto LABEL_32;
  }
  uint64_t v58 = v90;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v90, v44, v43);
  uint64_t v59 = v1 + *(int *)(v2 + 76);
  if (*(unsigned char *)(v59 + 8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v58, v43);
    goto LABEL_32;
  }
  uint64_t v61 = v3;
  uint64_t v62 = *(void *)v59;
  uint64_t v63 = *(void *)(v1 + v84);
  if (v63) {
    uint64_t v63 = *(void *)(v63 + *(void *)(*(void *)v63 + 176));
  }
  uint64_t v96 = v63;
  LOBYTE(v97) = 0;
  ViewTraitCollection.subscript.setter();
  uint64_t v96 = v62;
  LOBYTE(v97) = 0;
  ViewTraitCollection.subscript.setter();
  uint64_t v64 = *(void *)(v2 + 16);
  uint64_t v65 = *(void *)(v2 + 32);
  uint64_t v66 = *(void *)(v2 + 40);
  uint64_t v67 = *(void *)(v2 + 48);
  uint64_t v96 = v64;
  uint64_t v97 = v43;
  uint64_t v98 = v65;
  uint64_t v99 = v66;
  uint64_t v100 = v67;
  type metadata accessor for ForEach();
  ForEach.idGenerator.getter();
  uint64_t v95 = v101;
  uint64_t v96 = v64;
  uint64_t v97 = v43;
  uint64_t v98 = v65;
  uint64_t v99 = v66;
  uint64_t v100 = v67;
  type metadata accessor for ForEach.IDGenerator();
  char v68 = ForEach.IDGenerator.isConstant.getter();
  swift_release();
  if (v68)
  {
    uint64_t v96 = v62;
    LOBYTE(v97) = 0;
    _sSnySiGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for TagValueTraitKey<Int>, MEMORY[0x1E4FBB560], MEMORY[0x1E4F3FDD8]);
    lazy protocol witness table accessor for type TagValueTraitKey<Int> and conformance TagValueTraitKey<A>();
    ViewTraitCollection.subscript.setter();
    uint64_t v69 = v90;
  }
  else
  {
    uint64_t v69 = v90;
    ViewTraitCollection.setTag<A>(for:value:)();
  }
  uint64_t v96 = v102[0];
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v69, v43);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TableRowForEachState<A, B, C>.ChildTraits(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t TableRowForEachState.ChildContent.updateValue()(uint64_t a1)
{
  v69[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v59 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v58 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = *(void *)(*(void *)(v6 + 8) + 8);
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v51 = (char *)&v47 - v9;
  uint64_t v52 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v49 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v7;
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v60 = *(void *)(v12 - 8);
  uint64_t v61 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v62 = (char *)&v47 - v13;
  uint64_t v14 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v50 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v47 - v18;
  uint64_t v20 = specialized TableRowForEachState.ChildContent.info.getter();
  uint64_t v54 = v14;
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v57 = v1;
  uint64_t v48 = v21;
  v21(v19, v1, a1);
  uint64_t v22 = &v19[*(int *)(a1 + 68)];
  uint64_t v23 = (uint64_t *)(v20 + *(void *)(*(void *)v20 + 176));
  swift_beginAccess();
  uint64_t v24 = *v23;
  uint64_t v25 = *(void *)(a1 + 24);
  swift_retain();
  uint64_t v64 = v8;
  uint64_t v65 = v25;
  uint64_t v26 = v3;
  uint64_t v66 = v3;
  uint64_t v67 = v6;
  long long v63 = *(_OWORD *)(a1 + 48);
  long long v68 = v63;
  uint64_t v27 = type metadata accessor for TableRowForEachState.Item();
  uint64_t v28 = v63;
  MEMORY[0x18C115450](v69, v22, v24, v25, v27, v63);
  (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v22, v25);
  uint64_t v29 = v69[0];
  if (!v69[0])
  {
    swift_endAccess();
    return swift_release();
  }
  swift_endAccess();
  if (*(_DWORD *)(v29 + *(void *)(*(void *)v29 + 184)) != *(_DWORD *)(v20 + *(void *)(*(void *)v20 + 192)))
  {
    swift_release();
    return swift_release();
  }
  uint64_t v30 = v20 + *(void *)(*(void *)v20 + 160);
  swift_beginAccess();
  uint64_t v64 = v8;
  uint64_t v65 = v25;
  *(void *)&long long v63 = v26;
  uint64_t v66 = v26;
  uint64_t v67 = v6;
  *(void *)&long long v68 = v28;
  uint64_t v31 = type metadata accessor for ForEach();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v30, 1, v31);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v33 = v49;
    ForEach.data.getter();
    swift_endAccess();
    uint64_t v34 = v29 + *(void *)(*(void *)v29 + 160);
    swift_beginAccess();
    uint64_t v35 = v55;
    uint64_t v36 = v51;
    uint64_t v37 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v51, v34, AssociatedTypeWitness);
    uint64_t v38 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
    (*(void (**)(char *))(v60 + 16))(v62);
    v38(&v64, 0);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v33, v8);
    uint64_t v39 = v50;
    uint64_t v40 = v48(v50, v57, a1);
    MEMORY[0x1F4188790](v40);
    uint64_t v41 = v62;
    *(&v47 - 2) = v20;
    *(&v47 - 1) = (uint64_t)v41;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v43 = (uint64_t)v58;
    uint64_t v44 = v63;
    StatefulRule.withObservation<A>(do:)();
    uint64_t v45 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v39, a1);
    MEMORY[0x1F4188790](v45);
    *(&v47 - 2) = a1;
    *(&v47 - 1) = WitnessTable;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v43, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v47 - 4), v44, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v46);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v43, v44);
    return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v62, v61);
  }
  return result;
}

uint64_t closure #1 in TableRowForEachState.ChildContent.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(void *)(*(void *)a1 + 160);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for ForEach();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = (void (*)(uint64_t))specialized ForEach.content.getter(v4);
    swift_retain();
    v6(a2);
    return swift_release();
  }
  return result;
}

uint64_t TableRowForEachState.deinit()
{
  long long v1 = *(_OWORD *)(v0 + 128);
  _OWORD v8[6] = *(_OWORD *)(v0 + 112);
  v8[7] = v1;
  _WORD v8[8] = *(_OWORD *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 160);
  long long v2 = *(_OWORD *)(v0 + 64);
  void v8[2] = *(_OWORD *)(v0 + 48);
  v8[3] = v2;
  long long v3 = *(_OWORD *)(v0 + 96);
  void v8[4] = *(_OWORD *)(v0 + 80);
  v8[5] = v3;
  long long v4 = *(_OWORD *)(v0 + 32);
  v8[0] = *(_OWORD *)(v0 + 16);
  v8[1] = v4;
  outlined release of _TableRowInputs((uint64_t)v8);

  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 160);
  type metadata accessor for ForEach();
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TableRowForEachState.__deallocating_deinit()
{
  return TableRowForEachState.Item.__deallocating_deinit(TableRowForEachState.deinit);
}

uint64_t TableRowForEachState.Item.__deallocating_deinit(uint64_t (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TableRowForEachState()
{
  return swift_getGenericMetadata();
}

uint64_t static ForEach<>._containsOutlineSymbol(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v7 = *(_OWORD *)(a1 + 112);
  v12[6] = *(_OWORD *)(a1 + 96);
  _OWORD v12[7] = v7;
  _OWORD v12[8] = *(_OWORD *)(a1 + 128);
  uint64_t v13 = *(void *)(a1 + 144);
  long long v8 = *(_OWORD *)(a1 + 48);
  unint64_t v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  void v12[5] = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v10;
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(a7 + 64))(v12, a4, a7) & 1;
}

uint64_t TableRowForEachState.Info.Init.forEach.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ForEach();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t ForEach<>.MakeList.value.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v24 = a8;
  uint64_t v25 = a3;
  int v23 = a2;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v22 = a7;
  uint64_t v15 = type metadata accessor for ForEach();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v21 - v17;
  uint64_t v19 = v24;
  TableRowForEachState.Info.Init.forEach.getter((uint64_t)&v21 - v17);
  TableRowForEachState.update(forEach:)((uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  LODWORD(v18) = *(_DWORD *)(a1 + *(void *)(*(void *)a1 + 192));
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = v22;
  uint64_t v30 = v19;
  *(void *)(a9 + 24) = type metadata accessor for ForEach<>.Generator();
  *(void *)(a9 + 32) = &protocol witness table for ForEach<A, B, C><>.Generator;
  *(void *)a9 = a1;
  *(_DWORD *)(a9 + 8) = v18;
  return swift_retain();
}

uint64_t protocol witness for Rule.value.getter in conformance ForEach<A, B, C><>.MakeList@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return ForEach<>.MakeList.value.getter(*(void *)v2, *(_DWORD *)(v2 + 8), a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a2);
}

uint64_t ForEach<>.SynthesizedForEachRowIDs.endIndex.getter()
{
  return dispatch thunk of Collection.count.getter();
}

uint64_t ForEach<>.SynthesizedForEachRowIDs.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v21 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  long long v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 40);
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v19 - v12;
  Collection.index(atOffset:)();
  uint64_t v14 = *(void *)(v3 + *(int *)(a2 + 68));
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(void *)(a2 + 48);
  uint64_t v23 = v10;
  uint64_t v24 = v5;
  uint64_t v25 = v15;
  uint64_t v26 = v9;
  uint64_t v27 = v16;
  uint64_t v28 = v14;
  type metadata accessor for ForEach.IDGenerator();
  ForEach.IDGenerator.makeID(data:index:offset:)();
  uint64_t v17 = v22;
  _convertToAnyHashable<A>(_:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, AssociatedTypeWitness);
  *(unsigned char *)(v17 + 40) = 1;
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B0](a1, a2, WitnessTable, v5);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(a1, a2, a3, MEMORY[0x1E4FBB618]);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842B8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41842A0](a1, a2, a3, a4, WitnessTable);
}

uint64_t protocol witness for BidirectionalCollection.distance(from:to:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842C8](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for Collection.endIndex.getter in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ForEach<>.SynthesizedForEachRowIDs.endIndex.getter();
  *a1 = result;
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(void *a1, uint64_t *a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  void v6[4] = ForEach<>.SynthesizedForEachRowIDs.subscript.read(v6, *a2, a3);
  return protocol witness for Collection.subscript.read in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>;
}

void (*ForEach<>.SynthesizedForEachRowIDs.subscript.read(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1)
{
  uint64_t v6 = malloc(0x29uLL);
  *a1 = v6;
  ForEach<>.SynthesizedForEachRowIDs.subscript.getter(a2, a3, (uint64_t)v6);
  return protocol witness for Collection.subscript.read in conformance AnyTableRowIDs;
}

uint64_t protocol witness for Collection.indices.getter in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  swift_getWitnessTable();

  return RandomAccessCollection<>.indices.getter();
}

uint64_t protocol witness for Collection.index(after:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB590];

  return MEMORY[0x1F41842A8](a1, a2, WitnessTable, v5);
}

void *protocol witness for Collection.formIndex(after:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(a1, a2, a3, MEMORY[0x1E4FBB610]);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x1E4FBB590]);
  *a1 = v9;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 32))(a2, v3, a1);
  swift_getWitnessTable();
  uint64_t result = type metadata accessor for IndexingIterator();
  *(void *)(a2 + *(int *)(result + 36)) = 0;
  return result;
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance ForEach<A, B, C><>.SynthesizedForEachRowIDs(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t ForEach<>.Generator.visitRows<A>(applying:from:)(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v13[2] = a8;
  void v13[3] = a12;
  void v13[4] = a3;
  int v14 = a4;
  uint64_t v15 = a1;
  return TableRowForEachState.forEachItem(from:do:)(a2, (uint64_t (*)(uint64_t *, uint64_t))partial apply for closure #1 in ForEach<>.Generator.visitRows<A>(applying:from:), (uint64_t)v13) & 1;
}

uint64_t closure #1 in ForEach<>.Generator.visitRows<A>(applying:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(unsigned char *)(a3 + 188) == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = result;
    Inputuint64_t Value = AGGraphGetInputValue();
    outlined init with copy of TableRowList(InputValue, (uint64_t)v14);
    outlined init with take of OptionalBinaryInteger(v14, (uint64_t)v15);
    uint64_t v12 = v16;
    uint64_t v13 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    LOBYTE(a7) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(a5, v10, a6, a7, v12, v13);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return a7 & 1;
  }
  return result;
}

uint64_t ForEach<>.Generator.rowIDs.getter(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v60 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = v16;
  uint64_t v66 = v17;
  uint64_t v61 = v18;
  uint64_t v67 = v18;
  uint64_t v68 = v19;
  uint64_t v69 = v20;
  uint64_t v70 = v21;
  uint64_t v22 = type metadata accessor for ForEach<>.SynthesizedForEachRowIDs();
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)v51 - v23;
  static Semantics.v5.getter();
  uint64_t v25 = 0;
  if ((isLinkedOnOrAfter(_:)() & 1) == 0) {
    return v25;
  }
  uint64_t v59 = a6;
  uint64_t v26 = TableRowForEachState.fetchRowsPerElement()();
  if (v27) {
    return 0;
  }
  uint64_t v28 = v26;
  uint64_t v58 = a7;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  MEMORY[0x1F4188790](v26);
  v51[-2] = &v64;
  uint64_t result = TableRowForEachState.forEachItem(from:do:)(&v63, (uint64_t (*)(uint64_t *, uint64_t))partial apply for closure #1 in ForEach<>.Generator.rowIDs.getter, (uint64_t)&v51[-4]);
  uint64_t v30 = v64;
  if (!v64)
  {
    type metadata accessor for WrappedTableRowIDs<[TableRowID]>();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = MEMORY[0x1E4FBC860];
    return v25;
  }
  if (v28 != 1)
  {
LABEL_20:
    swift_release();
    return 0;
  }
  uint64_t v54 = a8;
  if (a1[188] == 1)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  Inputuint64_t Value = AGGraphGetInputValue();
  outlined init with copy of TableRowList(InputValue, (uint64_t)&v65);
  uint64_t v32 = v68;
  uint64_t v33 = v69;
  __swift_project_boxed_opaque_existential_1(&v65, v68);
  uint64_t v34 = *(uint64_t (**)(uint64_t, uint64_t))(v33 + 24);
  uint64_t v56 = v30;
  uint64_t v57 = v34;
  swift_retain();
  uint64_t v35 = v57(v32, v33);
  outlined destroy of TableRowList((uint64_t)&v65);
  if (!v35)
  {
    swift_release();
    goto LABEL_20;
  }
  uint64_t v36 = (uint64_t (**)(uint64_t, uint64_t))(*(void *)v35 + 88);
  uint64_t v57 = *v36;
  uint64_t v37 = (uint64_t (*)(uint64_t))v57;
  uint64_t v55 = v36;
  uint64_t v38 = swift_retain();
  uint64_t v39 = v37(v38);
  uint64_t v40 = *(uint64_t (**)(void))(*(void *)v35 + 96);
  uint64_t v41 = *(void *)v35 + 96;
  uint64_t v52 = v40();
  uint64_t v53 = ((uint64_t (*)(void))v57)();
  v51[1] = v41;
  uint64_t result = v40();
  uint64_t v42 = v53;
  uint64_t v53 = v39;
  if (v39 < v42 || result < v39)
  {
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v44 = ((uint64_t (*)(uint64_t))v57)(result);
  uint64_t v45 = v40();
  uint64_t result = swift_release();
  if (v52 < v44 || v45 < v52) {
    goto LABEL_25;
  }
  uint64_t v46 = v58;
  if (__OFSUB__(v52, v53))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v52 - v53 != 1)
  {
    swift_release();
    swift_release();
    goto LABEL_20;
  }
  uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t))v35;
  uint64_t v47 = &a1[*(void *)(*(void *)a1 + 160)];
  swift_beginAccess();
  uint64_t v65 = a3;
  uint64_t v66 = a4;
  uint64_t v67 = v61;
  uint64_t v68 = v59;
  uint64_t v69 = v46;
  uint64_t v48 = type metadata accessor for ForEach();
  uint64_t v49 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48);
  uint64_t result = v49(v47, 1, v48);
  if (result == 1)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  ForEach.data.getter();
  swift_endAccess();
  swift_beginAccess();
  uint64_t result = v49(v47, 1, v48);
  if (result != 1)
  {
    ForEach.idGenerator.getter();
    uint64_t v50 = v62;
    swift_endAccess();
    swift_release();
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v24, v15, a3);
    uint64_t v65 = a3;
    uint64_t v66 = a4;
    uint64_t v67 = v61;
    uint64_t v68 = v59;
    uint64_t v69 = v58;
    uint64_t v70 = v54;
    *(void *)&v24[*(int *)(type metadata accessor for ForEach<>.SynthesizedForEachRowIDs() + 68)] = v50;
    swift_getWitnessTable();
    type metadata accessor for WrappedTableRowIDs();
    uint64_t v25 = AnyNavigationLinkPresentedViewStorage.__allocating_init(_:)((uint64_t)v24);
    swift_release();
    return v25;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t protocol witness for TableRowGenerator.visitRows<A>(applying:from:) in conformance ForEach<A, B, C><>.Generator(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return ForEach<>.Generator.visitRows<A>(applying:from:)(a1, a2, *(void *)v5, *(_DWORD *)(v5 + 8), a5[2], a5[3], a5[4], a3, a5[5], a5[6], a5[7], a4) & 1;
}

uint64_t protocol witness for TableRowGenerator.count.getter in conformance ForEach<A, B, C><>.Generator(void *a1, uint64_t a2)
{
  return protocol witness for TableRowGenerator.count.getter in conformance ForEach<A, B, C><>.Generator(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void))ForEach<>.Generator.count.getter);
}

uint64_t protocol witness for TableRowGenerator.rowIDs.getter in conformance ForEach<A, B, C><>.Generator(void *a1, uint64_t a2)
{
  return protocol witness for TableRowGenerator.count.getter in conformance ForEach<A, B, C><>.Generator(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void))ForEach<>.Generator.rowIDs.getter);
}

uint64_t protocol witness for TableRowGenerator.count.getter in conformance ForEach<A, B, C><>.Generator(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, void, void))
{
  return a3(*(void *)v3, *(unsigned int *)(v3 + 8), a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance <> ForEach<A, B, C>(int *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static ForEach<>._makeRows(content:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], *(void *)(a4 - 8));
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance <> ForEach<A, B, C>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return static ForEach<>._containsOutlineSymbol(inputs:)(a1, a2, a3, *(void *)(a2 + 32), a5, a6, *(void *)(a3 - 8));
}

void ForEach<>.init<>(_:content:)()
{
}

uint64_t type metadata accessor for TableRowForEachState.Info()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for TableRowForEachState.Info.Init()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1881C170C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t associated type witness table accessor for DynamicTableRowContent.Data : Collection in <> ForEach<A, B, C>(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(void *)(a2 + 40) + 8) + 8);
}

uint64_t type metadata completion function for TableRowForEachState()
{
  type metadata accessor for ForEach();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t type metadata completion function for TableRowForEachState.Item()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t type metadata accessor for TableRowForEachState.Item()
{
  return swift_getGenericMetadata();
}

uint64_t dispatch thunk of DynamicTableRowContent.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

void *type metadata accessor for TableRowElementCount()
{
  return &unk_1ED432F20;
}

uint64_t base witness table accessor for _AttributeBody in TableRowForEachState<A, B, C>.Info.Init()
{
  return swift_getWitnessTable();
}

uint64_t sub_1881C1A68()
{
  return 56;
}

__n128 sub_1881C1A74(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t type metadata accessor for ForEach<>.SynthesizedForEachRowIDs()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in ForEach<>.Generator.rowIDs.getter(uint64_t a1, uint64_t a2)
{
  **(void **)(v2 + 16) = a2;
  swift_retain();
  swift_release();
  return 0;
}

uint64_t partial apply for closure #1 in TableRowForEachState.forEachItem(from:do:)(uint64_t a1)
{
  return closure #1 in TableRowForEachState.forEachItem(from:do:)(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24), *(uint64_t **)(v1 + 32), *(void **)(v1 + 40)) & 1;
}

uint64_t *specialized TableRowForEachState.Item.init(id:rows:subgraph:index:offset:contentID:seed:state:isConstant:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  uint64_t v16 = *v9;
  swift_weakInit();
  *((unsigned char *)v9 + *(void *)(*v9 + 200)) = 0;
  *((unsigned char *)v9 + *(void *)(*v9 + 208)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v16 + 88) - 8) + 32))((uint64_t)v9 + *(void *)(*v9 + 128), a1);
  *(_DWORD *)((char *)v9 + *(void *)(*v9 + 136)) = a2;
  swift_weakAssign();
  *(uint64_t *)((char *)v9 + *(void *)(*v9 + 152)) = a3;
  uint64_t v17 = (uint64_t)v9 + *(void *)(*v9 + 160);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v17, a4, AssociatedTypeWitness);
  *(uint64_t *)((char *)v9 + *(void *)(*v9 + 168)) = a5;
  *(uint64_t *)((char *)v9 + *(void *)(*v9 + 176)) = a6;
  *(_DWORD *)((char *)v9 + *(void *)(*v9 + 184)) = a7;
  *((unsigned char *)v9 + *(void *)(*v9 + 192)) = a9;
  return v9;
}

uint64_t partial apply for implicit closure #2 in TableRowForEachState.item(at:offset:)()
{
  return implicit closure #2 in TableRowForEachState.item(at:offset:)();
}

uint64_t partial apply for closure #2 in TableRowForEachState.item(at:offset:)(uint64_t a1)
{
  return closure #2 in TableRowForEachState.item(at:offset:)(a1, v1);
}

uint64_t type metadata accessor for TableRowForEachState.ChildContent()
{
  return swift_getGenericMetadata();
}

void _s14AttributeGraph0A0Vy7SwiftUI12TableRowListVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void partial apply for closure #1 in TableRowForEachState.count()(uint64_t a1, uint64_t a2)
{
  closure #1 in TableRowForEachState.count()(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t partial apply for closure #1 in ForEach<>.Generator.visitRows<A>(applying:from:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in ForEach<>.Generator.visitRows<A>(applying:from:)(a1, a2, *(void *)(v2 + 32), *(unsigned int *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t getEnumTagSinglePayload for TableRowForEachState.ChildContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 4) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 4) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for TableRowForEachState.ChildContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 4) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881C21A0);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 4] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t type metadata completion function for TableRowForEachState.ChildTraits()
{
  uint64_t result = type metadata accessor for ForEach();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableRowForEachState.ChildTraits(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  int v10 = *(_DWORD *)(v8 + 80);
  uint64_t v11 = v10;
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v12 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v8 + 64) + 1;
  }
  unsigned int v13 = v10 | *(_DWORD *)(v5 + 80) & 0xF8;
  int v14 = (*(_DWORD *)(v5 + 80) | v10) & 0x100000;
  BOOL v15 = v13 <= 7 && v14 == 0;
  if (v15
    && (unint64_t v16 = (((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8,
        uint64_t v17 = v11 + 9,
        ((v11 + 9 + ((((((v16 + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)) & ~v11)
      + v12 <= 0x18))
  {
    size_t __n = v12;
    uint64_t v18 = ~v11;
    unint64_t v19 = v16 + 8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v20 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    uint64_t v23 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v23 = *v24;
    uint64_t v25 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v25 = *v26;
    *(void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    char v27 = (void *)(((unint64_t)v4 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v28 = (void *)(((unint64_t)a2 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
    *char v27 = *v28;
    uint64_t v29 = (_DWORD *)(((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = (_DWORD *)(((unint64_t)v28 + 11) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v29 = *v30;
    unint64_t v31 = ((unint64_t)v29 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v32 = ((unint64_t)v30 + 11) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v33 = *(void *)v32;
    *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
    *(void *)unint64_t v31 = v33;
    uint64_t v34 = (void *)((v17 + v31) & v18);
    uint64_t v35 = (const void *)((v17 + v32) & v18);
    uint64_t v36 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    if (v36(v35, 1, v7))
    {
      memcpy(v34, v35, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(v34, v35, v7);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56))(v34, 0, 1, v7);
    }
  }
  else
  {
    uint64_t v37 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v37 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for TableRowForEachState.ChildTraits(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + 7;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = (((((((a1
            + (((((((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 11) & 0xFFFFFFFFFFFFFFF8)
        + 11) & 0xFFFFFFFFFFFFFFF8)
      + *(unsigned __int8 *)(v7 + 80)
      + 9) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = v7;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
  if (!result)
  {
    int v10 = *(uint64_t (**)(unint64_t, uint64_t))(v11 + 8);
    return v10(v8, v6);
  }
  return result;
}

uint64_t initializeWithCopy for TableRowForEachState.ChildTraits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48) + 7;
  unint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = v9[1];
  *unint64_t v8 = *v9;
  v8[1] = v10;
  uint64_t v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  unsigned int v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v13 = *v14;
  *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (((((((v7 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v16 = (void *)((a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = (void *)((a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v16 = *v17;
  uint64_t v18 = (_DWORD *)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = (_DWORD *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = *v19;
  unint64_t v20 = ((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v14) = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = (_BYTE)v14;
  uint64_t v22 = *(void *)(a3 + 24);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (void *)((v24 + 9 + v20) & ~v24);
  uint64_t v26 = (const void *)((v24 + 9 + v21) & ~v24);
  char v27 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v27(v26, 1, v22))
  {
    if (*(_DWORD *)(v23 + 84)) {
      size_t v28 = *(void *)(v23 + 64);
    }
    else {
      size_t v28 = *(void *)(v23 + 64) + 1;
    }
    memcpy(v25, v26, v28);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v25, v26, v22);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithCopy for TableRowForEachState.ChildTraits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40) + 7;
  unint64_t v8 = (void *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (void *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = v9[1];
  *unint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  swift_retain();
  swift_release();
  unsigned int v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v13 = *v14;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = (((((((v7 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  uint64_t v16 = a1 + v15 + 7;
  uint64_t v17 = a2 + v15 + 7;
  unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFF8) + 11;
  *(void *)(v16 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v17 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v19 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v20 = ((v19 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((v18 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v20 = v22;
  uint64_t v23 = *(void *)(a3 + 24);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = (void *)((v25 + 9 + v20) & ~v25);
  char v27 = (void *)((v25 + 9 + v21) & ~v25);
  size_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v24 + 48);
  LODWORD(v18) = v28(v26, 1, v23);
  int v29 = v28(v27, 1, v23);
  if (v18)
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 16))(v26, v27, v23);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v26, 0, 1, v23);
      return a1;
    }
    int v30 = *(_DWORD *)(v24 + 84);
    size_t v31 = *(void *)(v24 + 64);
  }
  else
  {
    if (!v29)
    {
      (*(void (**)(void *, void *, uint64_t))(v24 + 24))(v26, v27, v23);
      return a1;
    }
    uint64_t v33 = *(void (**)(void *, uint64_t))(v24 + 8);
    uint64_t v32 = v24 + 8;
    v33(v26, v23);
    int v30 = *(_DWORD *)(v32 + 76);
    size_t v31 = *(void *)(v32 + 56);
  }
  if (v30) {
    size_t v34 = v31;
  }
  else {
    size_t v34 = v31 + 1;
  }
  memcpy(v26, v27, v34);
  return a1;
}

uint64_t initializeWithTake for TableRowForEachState.ChildTraits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32) + 7;
  unint64_t v8 = (_OWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (_OWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v8 = *v9;
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (((((((v7 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v15 = (void *)((a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)((a2 + v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v15 = *v16;
  uint64_t v17 = (_DWORD *)(((unint64_t)v15 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = (_DWORD *)(((unint64_t)v16 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v17 = *v18;
  unint64_t v19 = ((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v13) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = (_BYTE)v13;
  uint64_t v21 = *(void *)(a3 + 24);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (void *)((v23 + 9 + v19) & ~v23);
  uint64_t v25 = (const void *)((v23 + 9 + v20) & ~v23);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v22 + 48))(v25, 1, v21))
  {
    if (*(_DWORD *)(v22 + 84)) {
      size_t v26 = *(void *)(v22 + 64);
    }
    else {
      size_t v26 = *(void *)(v22 + 64) + 1;
    }
    memcpy(v24, v25, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v22 + 32))(v24, v25, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v21);
  }
  return a1;
}

uint64_t assignWithTake for TableRowForEachState.ChildTraits(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24) + 7;
  unint64_t v8 = (_OWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (_OWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v8 = *v9;
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v10 = *v11;
  swift_release();
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  swift_release();
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (((((((v7 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  uint64_t v15 = a1 + v14 + 7;
  unint64_t v16 = (a2 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)v16;
  v16 += 11;
  *(void *)(v15 & 0xFFFFFFFFFFFFFFF8) = v17;
  unint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_release();
  *(_DWORD *)(v18 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = ((v18 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((v16 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(void *)unint64_t v19 = v21;
  uint64_t v22 = *(void *)(a3 + 24);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (void *)((v24 + 9 + v19) & ~v24);
  size_t v26 = (void *)((v24 + 9 + v20) & ~v24);
  char v27 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v12) = v27(v25, 1, v22);
  int v28 = v27(v26, 1, v22);
  if (v12)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v25, v26, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
      return a1;
    }
    int v29 = *(_DWORD *)(v23 + 84);
    size_t v30 = *(void *)(v23 + 64);
  }
  else
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 40))(v25, v26, v22);
      return a1;
    }
    uint64_t v32 = *(void (**)(void *, uint64_t))(v23 + 8);
    uint64_t v31 = v23 + 8;
    v32(v25, v22);
    int v29 = *(_DWORD *)(v31 + 76);
    size_t v30 = *(void *)(v31 + 56);
  }
  if (v29) {
    size_t v33 = v30;
  }
  else {
    size_t v33 = v30 + 1;
  }
  memcpy(v25, v26, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableRowForEachState.ChildTraits(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned int *)(v8 + 84);
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v11 <= v6) {
    unsigned int v12 = v6;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  if (v10) {
    uint64_t v15 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  else {
    uint64_t v15 = *(void *)(*(void *)(v7 - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v16 = (((((((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = v14 + 9;
  int v18 = a2 - v12;
  if (a2 <= v12) {
    goto LABEL_34;
  }
  unint64_t v19 = v15
      + ((v17 + ((((((v16 + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)) & ~v14);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v23 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v23))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_34;
      }
      goto LABEL_24;
    }
    if (v23 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_34;
      }
      goto LABEL_24;
    }
    if (v23 < 2)
    {
LABEL_34:
      if (v6 >= v11)
      {
        if (v5 < 0x7FFFFFFF)
        {
          unint64_t v29 = *(void *)(((unint64_t)a1 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
          if (v29 >= 0xFFFFFFFF) {
            LODWORD(v29) = -1;
          }
          return (v29 + 1);
        }
        else
        {
          int v28 = *(uint64_t (**)(void))(v4 + 48);
          return v28();
        }
      }
      else
      {
        unsigned int v27 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48))((v17+ (((((((unint64_t)a1 + v16 + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)) & ~v14, v10, v7, v4);
        if (v27 >= 2) {
          return v27 - 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_34;
  }
LABEL_24:
  int v24 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v24 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v25 = v19;
    }
    else {
      int v25 = 4;
    }
    switch(v25)
    {
      case 2:
        int v26 = *a1;
        break;
      case 3:
        int v26 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v26 = *(_DWORD *)a1;
        break;
      default:
        int v26 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v26 = 0;
  }
  return v12 + (v26 | v24) + 1;
}

void storeEnumTagSinglePayload for TableRowForEachState.ChildTraits(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = *(void *)(a4 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  size_t v15 = *(void *)(v11 + 64);
  unsigned int v16 = v12 - 1;
  if (!v12) {
    unsigned int v16 = 0;
  }
  if (v16 <= v9) {
    unsigned int v17 = v9;
  }
  else {
    unsigned int v17 = v16;
  }
  unint64_t v18 = (((((((v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = v14 + 9;
  if (!v12) {
    ++v15;
  }
  size_t v20 = ((v14 + 9 + ((((((v18 + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)) & ~v14)
      + v15;
  BOOL v21 = a3 >= v17;
  unsigned int v22 = a3 - v17;
  if (v22 == 0 || !v21)
  {
LABEL_22:
    if (v17 < a2) {
      goto LABEL_23;
    }
    goto LABEL_15;
  }
  if (v20 > 3)
  {
    int v6 = 1;
    if (v17 < a2) {
      goto LABEL_23;
    }
    goto LABEL_15;
  }
  unsigned int v24 = ((v22 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
  if (!HIWORD(v24))
  {
    if (v24 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v24 > 1;
    }
    goto LABEL_22;
  }
  int v6 = 4;
  if (v17 < a2)
  {
LABEL_23:
    unsigned int v25 = ~v17 + a2;
    if (v20 < 4)
    {
      int v26 = (v25 >> (8 * v20)) + 1;
      if (v20)
      {
        int v27 = v25 & ~(-1 << (8 * v20));
        bzero(a1, v20);
        if (v20 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v20 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v20);
      *(_DWORD *)a1 = v25;
      int v26 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v20] = v26;
        return;
      case 2:
        *(_WORD *)&a1[v20] = v26;
        return;
      case 3:
        goto LABEL_70;
      case 4:
        *(_DWORD *)&a1[v20] = v26;
        return;
      default:
        return;
    }
  }
LABEL_15:
  uint64_t v23 = ~v14;
  switch(v6)
  {
    case 1:
      a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_31;
    case 2:
      *(_WORD *)&a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_31;
    case 3:
LABEL_70:
      __break(1u);
      JUMPOUT(0x1881C3768);
    case 4:
      *(_DWORD *)&a1[v20] = 0;
      goto LABEL_30;
    default:
LABEL_30:
      if (a2)
      {
LABEL_31:
        if (v9 >= v16)
        {
          if (v9 >= a2)
          {
            if (v8 < 0x7FFFFFFF)
            {
              size_t v34 = (void *)((unint64_t)&a1[v13 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v35 = a2 ^ 0x80000000;
                v34[1] = 0;
              }
              else
              {
                uint64_t v35 = a2 - 1;
              }
              *size_t v34 = v35;
            }
            else
            {
              size_t v33 = *(void (**)(char *))(v7 + 56);
              v33(a1);
            }
          }
          else if (v18 != -8)
          {
            int v29 = ~v9 + a2;
            bzero(a1, v18 + 8);
LABEL_45:
            *(_DWORD *)a1 = v29;
          }
        }
        else
        {
          a1 = (char *)((v19
                       + ((((((unint64_t)&a1[v18 + 15] & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)) & v23);
          if (v16 >= a2)
          {
            uint64_t v31 = a2 + 1;
            uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
            v32(a1, v31, v12, v10);
          }
          else
          {
            if (v15 <= 3) {
              int v28 = ~(-1 << (8 * v15));
            }
            else {
              int v28 = -1;
            }
            if (v15)
            {
              int v29 = v28 & (~v16 + a2);
              if (v15 <= 3) {
                int v30 = v15;
              }
              else {
                int v30 = 4;
              }
              bzero(a1, v15);
              switch(v30)
              {
                case 2:
                  *(_WORD *)a1 = v29;
                  break;
                case 3:
                  *(_WORD *)a1 = v29;
                  a1[2] = BYTE2(v29);
                  break;
                case 4:
                  goto LABEL_45;
                default:
                  *a1 = v29;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t type metadata completion function for ForEach<>.SynthesizedForEachRowIDs()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ForEach<>.SynthesizedForEachRowIDs(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1881C398CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ForEach<>.SynthesizedForEachRowIDs(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1881C3B8CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          unint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *unint64_t v18 = 0;
            *(_DWORD *)unint64_t v18 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *unint64_t v18 = a2;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t base witness table accessor for Sequence in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    _sSnySiGMaTm_4(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Collection in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TableRowForEachState<A, B, C>.ChildTraits()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TableRowForEachState<A, B, C>.ChildContent()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for BidirectionalCollection in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  return _sSnySiGSnyxGSksSxRzSZ6StrideRpzrlWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in ForEach<A, B, C><>.SynthesizedForEachRowIDs()
{
  return swift_getWitnessTable();
}

uint64_t specialized TableRowForEachState.ChildContent.info.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t partial apply for closure #1 in TableRowForEachState.ChildContent.updateValue()()
{
  return closure #1 in TableRowForEachState.ChildContent.updateValue()(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void _sSnySiGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, MEMORY[0x1E4FBB550]);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void key path setter for EnvironmentValues.managedObjectContext : EnvironmentValues(id *a1)
{
  id v1 = *a1;
  specialized EnvironmentValues.subscript.setter(v1);
}

uint64_t EnvironmentValues.managedObjectContext.setter(void *a1)
{
  type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  id v3 = a1;
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

    swift_release();
    swift_release();
  }
  else
  {
  }
  return swift_release();
}

void (*EnvironmentValues.managedObjectContext.modify(void *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *a1 = a1[1];
  return EnvironmentValues.managedObjectContext.modify;
}

void EnvironmentValues.managedObjectContext.modify(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void **)a1;
  *(void *)(a1 + 8) = *(void *)a1;
  type metadata accessor for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  id v6 = v5;
  unsigned int v7 = v6;
  if (a2)
  {
    id v8 = v6;
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }

    swift_release();
    uint64_t v9 = *(void **)a1;
  }
  else
  {
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }

    swift_release();
  }
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance NSManagedObjectContextEnvironmentKey()
{
  return static NSObject.== infix(_:_:)() & 1;
}

uint64_t sub_1881C430C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.managedObjectContext.getter();
  *a1 = result;
  return result;
}

void sub_1881C4348(id *a1)
{
  id v1 = *a1;
  specialized EnvironmentValues.subscript.setter(v1);
}

ValueMetadata *type metadata accessor for NSManagedObjectContextEnvironmentKey()
{
  return &type metadata for NSManagedObjectContextEnvironmentKey;
}

unint64_t type metadata accessor for NSManagedObjectContext()
{
  unint64_t result = lazy cache variable for type metadata for NSManagedObjectContext;
  if (!lazy cache variable for type metadata for NSManagedObjectContext)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSManagedObjectContext);
  }
  return result;
}

uint64_t specialized Sequence.forEach(_:)(void (*a1)(_OWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v12 = a3;
  swift_bridgeObjectRetain();
  if (!PreferenceKeys.endIndex.getter()) {
    return swift_bridgeObjectRelease();
  }
  lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
  while (1)
  {
    unint64_t v5 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
    long long v10 = *v6;
    v5(v11, 0);
    uint64_t v7 = v13;
    *(void *)&v11[0] = v12;
    swift_bridgeObjectRetain();
    uint64_t result = PreferenceKeys.endIndex.getter();
    if (v7 < 0 || v7 >= result) {
      break;
    }
    uint64_t v9 = v7 + 1;
    uint64_t v13 = v9;
    swift_bridgeObjectRelease();
    v11[0] = v10;
    a1(v11);
    if (v3 || v9 == PreferenceKeys.endIndex.getter()) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t static MapKitPreferenceKeys.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = v2;
  return MEMORY[0x18C10E640](&v5, &v4) & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MapKitPreferenceKeys(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = v2;
  return MEMORY[0x18C10E640](&v5, &v4) & 1;
}

uint64_t MapKitPreferencesInputs.init(inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 48);
  int v4 = *(_DWORD *)(a1 + 56);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PreferencesInputs.hostKeys.getter();
  swift_bridgeObjectRelease();
  uint64_t result = PreferencesInputs.init(hostKeys:)();
  *(void *)a2 = v3;
  *(_DWORD *)(a2 + 8) = v4;
  return result;
}

uint64_t MapKitPreferencesInputs.add<A>(_:)()
{
  return PreferenceKeys.add(_:)();
}

uint64_t MapKitPreferencesInputs.contains<A>(_:)()
{
  return PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1;
}

uint64_t MapKitPreferencesInputs.visitKeys<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  _OWORD v6[2] = a2;
  _OWORD v6[3] = a3;
  void v6[4] = a1;
  swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)((void (*)(_OWORD *))partial apply for closure #1 in MapKitPreferencesInputs.visitKeys<A>(_:), (uint64_t)v6, v4);
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in MapKitPreferencesInputs.visitKeys<A>(_:)(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(v1 + 24) + 8))(*a1, *a1, a1[1], *(void *)(v1 + 16));
}

uint64_t MapKitPreferencesOutputs.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = PreferencesOutputs.init()();
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t MapKitPreferencesOutputs.subscript.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v7 = *((_DWORD *)v3 + 2);
  uint64_t v13 = *v3;
  int v14 = v7;
  uint64_t v8 = PreferencesOutputs.subscript.getter();
  LODWORD(v13) = v8;
  BYTE4(v13) = BYTE4(v8) & 1;
  unint64_t v12[2] = a1;
  v12[3] = a2;
  swift_getAssociatedTypeWitness();
  type metadata accessor for Attribute();
  type metadata accessor for Optional();
  uint64_t v9 = type metadata accessor for _GraphValue();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in MapKitPreferencesOutputs.subscript.getter, (uint64_t)v12, MEMORY[0x1E4FBC248], v9, v10, a3);
}

uint64_t partial apply for closure #1 in MapKitPreferencesOutputs.subscript.getter()
{
  return _GraphValue.init(_:)();
}

uint64_t MapKitPreferencesOutputs.subscript.setter(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4 = *((unsigned char *)a1 + 4);
  int v9 = *a1;
  char v10 = v4;
  void v8[2] = a3;
  v8[3] = a4;
  swift_getAssociatedTypeWitness();
  type metadata accessor for _GraphValue();
  type metadata accessor for Optional();
  uint64_t v5 = type metadata accessor for Attribute();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in MapKitPreferencesOutputs.subscript.setter, (uint64_t)v8, MEMORY[0x1E4FBC248], v5, v6, (uint64_t)&v11);
  LOBYTE(v9) = v12;
  return PreferencesOutputs.subscript.setter();
}

uint64_t closure #1 in MapKitPreferencesOutputs.subscript.setter@<X0>(_DWORD *a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for _GraphValue();
  uint64_t result = _GraphValue.value.getter();
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in MapKitPreferencesOutputs.subscript.setter@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in MapKitPreferencesOutputs.subscript.setter(a1);
}

void (*MapKitPreferencesOutputs.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t **a1, char a2)
{
  int v9 = malloc(0x28uLL);
  *a1 = v9;
  _OWORD v9[2] = a4;
  void v9[3] = v4;
  *int v9 = a2;
  v9[1] = a3;
  MapKitPreferencesOutputs.subscript.getter(a3, a4, (uint64_t)(v9 + 4));
  return MapKitPreferencesOutputs.subscript.modify;
}

void MapKitPreferencesOutputs.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)*a1 + 36);
  uint64_t v5 = (*a1)[2];
  uint64_t v6 = **a1;
  uint64_t v7 = (*a1)[1];
  if (a2)
  {
    int v9 = *((_DWORD *)*a1 + 8);
    char v10 = v4;
    uint64_t v8 = &v9;
  }
  else
  {
    int v11 = *((_DWORD *)*a1 + 8);
    char v12 = v4;
    uint64_t v8 = &v11;
  }
  MapKitPreferencesOutputs.subscript.setter(v8, v6, v7, v5);

  free(v3);
}

uint64_t MapKitPreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #1 in MapKitPreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)(void (*a1)(uint64_t *__return_ptr))
{
  a1(&v2);
  swift_getAssociatedTypeWitness();
  type metadata accessor for _GraphValue();
  return _GraphValue.value.getter();
}

uint64_t partial apply for implicit closure #1 in MapKitPreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)()
{
  return implicit closure #1 in MapKitPreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)(*(void (**)(uint64_t *__return_ptr))(v0 + 32));
}

uint64_t MapKitPreferencesOutputs.visitKeys<A>(_:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in MapKitPreferencesOutputs.visitKeys<A>(_:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v2 + 24) + 8))(a1, a1, a2, *(void *)(v2 + 16));
}

ValueMetadata *type metadata accessor for MapKitPreferenceKeys()
{
  return &type metadata for MapKitPreferenceKeys;
}

ValueMetadata *type metadata accessor for MapKitPreferencesInputs()
{
  return &type metadata for MapKitPreferencesInputs;
}

ValueMetadata *type metadata accessor for MapKitPreferencesOutputs()
{
  return &type metadata for MapKitPreferencesOutputs;
}

uint64_t dispatch thunk of MapKitPreferenceKeyVisitor.visit<A>(key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t EnvironmentValues.popoverAutomaticallyDismissesWhenScrolledOutOfView.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for _PreferenceTransformModifier<ValidTestCasesPreferenceKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>, (uint64_t)&type metadata for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, (uint64_t)&protocol witness table for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _PreferenceTransformModifier<ValidTestCasesPreferenceKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>, (uint64_t)&type metadata for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, (uint64_t)&protocol witness table for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.popoverAutomaticallyDismissesWhenScrolledOutOfView.setter()
{
  type metadata accessor for _PreferenceTransformModifier<ValidTestCasesPreferenceKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>, (uint64_t)&type metadata for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, (uint64_t)&protocol witness table for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

id PresentationDetent.uiSheetDetentId.getter()
{
  unint64_t v1 = v0[1];
  switch(v1 >> 62)
  {
    case 1uLL:
      uint64_t v2 = 0x3A746867696548;
      unint64_t v3 = 0xE700000000000000;
      goto LABEL_7;
    case 2uLL:
      uint64_t v10 = 0x3A6D6F74737543;
      unint64_t v11 = 0xE700000000000000;
      uint64_t v4 = _typeName(_:qualified:)();
      goto LABEL_8;
    case 3uLL:
      if (*v0 | v1 ^ 0xC000000000000000) {
        uint64_t v6 = (void **)MEMORY[0x1E4FB2EF8];
      }
      else {
        uint64_t v6 = (void **)MEMORY[0x1E4FB2F00];
      }
      int v9 = *v6;
      return v9;
    default:
      uint64_t v2 = 0x6E6F697463617246;
      unint64_t v3 = 0xE90000000000003ALL;
LABEL_7:
      uint64_t v10 = v2;
      unint64_t v11 = v3;
      uint64_t v4 = Double.description.getter();
LABEL_8:
      String.append(_:)(*(Swift::String *)&v4);
      swift_bridgeObjectRelease();
      uint64_t v7 = MEMORY[0x18C115780](v10, v11);
      swift_bridgeObjectRelease();
      return (id)v7;
  }
}

uint64_t View.presentationDetents(_:)(uint64_t a1)
{
  *(void *)(swift_allocObject() + 16) = a1;
  swift_bridgeObjectRetain();
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

uint64_t sub_1881C5164()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationDetents(_:)(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t View.presentationDetents(_:selection:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = (void *)swift_allocObject();
  _OWORD v7[2] = a1;
  v7[3] = v3;
  v7[4] = v4;
  _OWORD v7[5] = v5;
  void v7[6] = v6;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

uint64_t closure #1 in View.presentationDetents(_:selection:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = a2;
  uint64_t v12 = a1[1];
  uint64_t v13 = a1[2];
  swift_retain();
  swift_retain();
  uint64_t result = outlined consume of Binding<NavigationSplitViewColumn>?(v12, v13);
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  return result;
}

uint64_t sub_1881C5360()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationDetents(_:selection:)(void *a1)
{
  return closure #1 in View.presentationDetents(_:selection:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t View.presentationDragIndicator(_:)(char a1)
{
  *(unsigned char *)(swift_allocObject() + 16) = a1;
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

uint64_t sub_1881C5460()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationDragIndicator(_:)(uint64_t result)
{
  *(unsigned char *)(result + 58) = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t View.presentationBackgroundInteraction(_:)(long long *a1)
{
  long long v3 = *a1;
  char v2 = 2;
  return View.presentationBackgroundInteraction(_:for:)((uint64_t *)&v3, &v2);
}

uint64_t View.presentationCompactAdaptation(_:)(char *a1)
{
  return View.presentationCompactAdaptation(_:)(a1);
}

{
  char v1;
  uint64_t vars8;

  uint64_t v1 = *a1;
  *(unsigned char *)(swift_allocObject() + 16) = v1;
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

uint64_t View.presentationCornerRadius(_:)(uint64_t a1, char a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(unsigned char *)(v4 + 24) = a2 & 1;
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

uint64_t View.presentationContentInteraction(_:)(char *a1)
{
  return View.presentationCompactAdaptation(_:)(a1);
}

uint64_t View.presentationDragIndicator(_:offset:)(char a1, uint64_t a2, char a3)
{
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  *(unsigned char *)(v6 + 32) = a3 & 1;
  View.transformPreference<A>(_:_:)();

  return swift_release();
}

void closure #1 in View.presentationBackgroundInteraction(_:for:)(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  int v6 = (a3 >> 57) & 0x78 | a3 & 7;
  if (v6 == 95 || v6 == 63)
  {
    outlined consume of PresentationDimmingBehavior?(*(id *)(a1 + 48));
    *(void *)(a1 + 48) = 0;
  }
  else if ((~a3 & 0xF000000000000007) != 0)
  {
    id v7 = PresentationDetent.uiSheetDetentId.getter();
    outlined consume of PresentationDimmingBehavior?(*(id *)(a1 + 48));
    *(void *)(a1 + 48) = v7;
  }
  else
  {
    outlined consume of PresentationDimmingBehavior?(*(id *)(a1 + 48));
    *(void *)(a1 + 48) = 1;
  }
  if (a4 == 1)
  {
    if (v6 == 63 || v6 == 95) {
      char v9 = 1;
    }
    else {
      char v9 = 2;
    }
    *(unsigned char *)(a1 + 56) = v9;
  }
}

uint64_t sub_1881C57DC()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in View.presentationBackgroundInteraction(_:for:)(uint64_t a1)
{
  closure #1 in View.presentationBackgroundInteraction(_:for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t sub_1881C57F8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationCompactAdaptation(_:)(uint64_t result)
{
  char v2 = *(unsigned char *)(v1 + 16);
  *(unsigned char *)(result + 40) = v2;
  *(unsigned char *)(result + 41) = v2;
  return result;
}

uint64_t sub_1881C5818()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationCompactAdaptation(horizontal:vertical:)(uint64_t result)
{
  *(_WORD *)(result + 40) = *(_WORD *)(v1 + 16);
  return result;
}

uint64_t sub_1881C5834()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationCornerRadius(_:)(uint64_t result)
{
  char v2 = *(unsigned char *)(v1 + 24);
  *(void *)(result + 64) = *(void *)(v1 + 16);
  *(unsigned char *)(result + 72) = v2;
  return result;
}

uint64_t sub_1881C5858()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationContentInteraction(_:)(uint64_t result)
{
  *(unsigned char *)(result + 57) = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t sub_1881C5874()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationDragIndicator(_:offset:)(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 24);
  char v3 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(result + 58) = *(unsigned char *)(v1 + 16);
  *(void *)(result + 80) = v2;
  *(unsigned char *)(result + 88) = v3;
  return result;
}

uint64_t View.popoverAutomaticDismissalEnabled(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t View.popoverAutomaticallyDismissesWhenScrolledOutOfView(_:)()
{
  return swift_release();
}

uint64_t sub_1881C5948@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.popoverAutomaticallyDismissesWhenScrolledOutOfView.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1881C5984()
{
  return EnvironmentValues.popoverAutomaticallyDismissesWhenScrolledOutOfView.setter();
}

double static PresentationDetent.medium.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_1883D5CF0;
  return result;
}

double static PresentationDetent.large.getter@<D0>(_OWORD *a1@<X8>)
{
  *(void *)&double result = 1;
  *a1 = xmmword_1883D5D00;
  return result;
}

void static PresentationDetent.fraction(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(void *)(a1 + 8) = 0;
}

void static PresentationDetent.height(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(void *)(a1 + 8) = 0x4000000000000000;
}

uint64_t static PresentationDetent.custom<A>(_:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2 | 0x8000000000000000;
  return result;
}

void PresentationDetent.Identifier.hash(into:)(uint64_t a1, Swift::UInt a2, unint64_t a3)
{
  switch(a3 >> 62)
  {
    case 1uLL:
      Swift::UInt v4 = 3;
      goto LABEL_4;
    case 2uLL:
      Hasher._combine(_:)(4uLL);
      Swift::UInt v6 = a2;
      goto LABEL_17;
    case 3uLL:
      if (a2 | a3 ^ 0xC000000000000000)
      {
        if (a3 == 0xC000000000000000 && a2 == 1) {
          Swift::UInt v6 = 1;
        }
        else {
          Swift::UInt v6 = 5;
        }
      }
      else
      {
        Swift::UInt v6 = 0;
      }
LABEL_17:
      Hasher._combine(_:)(v6);
      break;
    default:
      Swift::UInt v4 = 2;
LABEL_4:
      Hasher._combine(_:)(v4);
      if ((a2 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v5 = a2;
      }
      else {
        Swift::UInt64 v5 = 0;
      }
      Hasher._combine(_:)(v5);
      break;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PresentationDetent.Identifier()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  PresentationDetent.Identifier.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PresentationDetent.Identifier(uint64_t a1)
{
  PresentationDetent.Identifier.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PresentationDetent.Identifier()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  PresentationDetent.Identifier.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresentationDetent.Identifier(uint64_t a1, uint64_t a2)
{
  return specialized static PresentationDetent.Identifier.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

double closure #1 in PresentationDetent.uiSheetDetent.getter(void *a1, double a2)
{
  objc_msgSend(a1, sel_maximumDetentValue);
  return v3 * a2;
}

uint64_t closure #3 in PresentationDetent.uiSheetDetent.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t result = (*(uint64_t (**)(uint64_t *))(a3 + 8))(&v5);
  if (v4) {
    return 0;
  }
  return result;
}

id PresentationDetent.Context.maxDetentValue.getter()
{
  return objc_msgSend(*v0, sel_maximumDetentValue);
}

uint64_t PresentationDetent.Context.subscript.getter()
{
  id v1 = objc_msgSend(*v0, sel_containerTraitCollection);
  EnvironmentValues.init()();
  long long v3 = v4;
  UITraitCollection.resolvedEnvironment(base:)(&v3, &v5);

  swift_release();
  swift_release();
  long long v4 = v5;
  swift_getAtKeyPath();
  swift_release();
  return swift_release();
}

void PresentationDetent.hash(into:)(uint64_t a1)
{
  PresentationDetent.Identifier.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int PresentationDetent.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)();
  PresentationDetent.Identifier.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void static PresentationAdaptation.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static PresentationAdaptation.none.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static PresentationAdaptation.popover.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static PresentationAdaptation.sheet.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static PresentationAdaptation.fullScreenCover.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static PresentationAdaptation.blurOverFullScreen.getter(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

BOOL static PresentationContentInteraction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

double static PresentationBackgroundInteraction.automatic.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_1883D5D10;
  return result;
}

double static PresentationBackgroundInteraction.enabled.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_1883BE5B0;
  return result;
}

__n128 static PresentationBackgroundInteraction.enabled(upThrough:)@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

double static PresentationBackgroundInteraction.disabled.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_1883D5D20;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PresentationDimmingBehavior(void **a1, void **a2)
{
  return specialized static PresentationDimmingBehavior.== infix(_:_:)(*a1, *a2);
}

uint64_t PresentationOptionsPreference.merge(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  if (*(void *)(*(void *)a1 + 16)) {
    swift_bridgeObjectRetain();
  }
  else {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  if (!v5)
  {
    uint64_t v6 = *(void *)(v1 + 8);
    uint64_t v7 = *(void *)(v1 + 16);
    uint64_t v8 = *(void *)(v1 + 24);
    uint64_t v9 = *(void *)(v1 + 32);
    uint64_t v10 = *(void *)(a1 + 8);
    outlined copy of Binding<NavigationSplitViewColumn>?(v6, v7);
    uint64_t v4 = v10;
  }
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  uint64_t v13 = *(void *)(v1 + 8);
  uint64_t v14 = *(void *)(v1 + 16);
  outlined copy of Binding<NavigationSplitViewColumn>?(v4, v5);
  outlined consume of Binding<NavigationSplitViewColumn>?(v13, v14);
  *(void *)(v1 + 8) = v11;
  *(void *)(v1 + 16) = v12;
  *(void *)(v1 + 24) = v8;
  *(void *)(v1 + 32) = v9;
  int v15 = *(void **)(a1 + 48);
  unsigned int v16 = v15;
  if (v15 == (void *)2)
  {
    unsigned int v16 = *(void **)(v1 + 48);
    outlined copy of PresentationDimmingBehavior?(v16);
  }
  unint64_t v17 = *(void **)(v1 + 48);
  outlined copy of PresentationDimmingBehavior?(v15);
  outlined consume of PresentationDimmingBehavior?(v17);
  *(void *)(v1 + 48) = v16;
  int v18 = *(unsigned __int8 *)(a1 + 40);
  if (v18 == 6) {
    LOBYTE(v18) = *(unsigned char *)(v1 + 40);
  }
  *(unsigned char *)(v1 + 40) = v18;
  int v19 = *(unsigned __int8 *)(a1 + 41);
  if (v19 == 6) {
    LOBYTE(v19) = *(unsigned char *)(v1 + 41);
  }
  *(unsigned char *)(v1 + 41) = v19;
  char v20 = *(unsigned char *)(a1 + 56);
  if (!v20) {
    char v20 = *(unsigned char *)(v1 + 56);
  }
  *(unsigned char *)(v1 + 56) = v20;
  char v21 = *(unsigned char *)(a1 + 57);
  if (!v21) {
    char v21 = *(unsigned char *)(v1 + 57);
  }
  *(unsigned char *)(v1 + 57) = v21;
  char v22 = *(unsigned char *)(a1 + 58);
  if (!v22) {
    char v22 = *(unsigned char *)(v1 + 58);
  }
  *(unsigned char *)(v1 + 58) = v22;
  if (*(unsigned char *)(a1 + 72) == 1)
  {
    char v23 = *(unsigned char *)(v1 + 72);
    uint64_t v24 = v1;
  }
  else
  {
    char v23 = 0;
    uint64_t v24 = a1;
  }
  *(void *)(v1 + 64) = *(void *)(v24 + 64);
  *(unsigned char *)(v1 + 72) = v23;
  if (*(unsigned char *)(a1 + 88) == 1)
  {
    char v25 = *(unsigned char *)(v1 + 88);
    uint64_t v26 = v1;
  }
  else
  {
    char v25 = 0;
    uint64_t v26 = a1;
  }
  *(void *)(v1 + 80) = *(void *)(v26 + 80);
  *(unsigned char *)(v1 + 88) = v25;
  outlined init with copy of PresentationSizing?(a1 + 96, (uint64_t)&v31);
  if (v32)
  {
    outlined init with take of OptionalBinaryInteger(&v31, (uint64_t)v30);
  }
  else
  {
    outlined init with copy of PresentationSizing?(v1 + 96, (uint64_t)v30);
    outlined destroy of PresentationSizing?((uint64_t)&v31, (uint64_t (*)(void))type metadata accessor for PresentationSizing?);
  }
  outlined assign with take of PresentationSizing?((uint64_t)v30, v1 + 96);
  char v27 = *(unsigned char *)(v1 + 136);
  outlined init with copy of PresentationOptionsPreference(a1, (uint64_t)v30);
  char v28 = v27 | v30[136];
  uint64_t result = outlined destroy of PresentationOptionsPreference((uint64_t)v30);
  *(unsigned char *)(v1 + 136) = v28 & 1;
  return result;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance PresentationOptionsPreferenceKey(uint64_t a1, void (*a2)(void *__return_ptr))
{
  a2(v3);
  PresentationOptionsPreference.merge(_:)((uint64_t)v3);
  return outlined destroy of PresentationOptionsPreference((uint64_t)v3);
}

uint64_t PresentationOptionsPreference.description.getter()
{
  _StringGuts.grow(_:)(138);
  v1._countAndFlagsBits = 0xD00000000000002ELL;
  v1._object = (void *)0x8000000188342A70;
  String.append(_:)(v1);
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = MEMORY[0x18C115B70](v3, &type metadata for PresentationDetent);
  String.append(_:)(v4);
  swift_release();
  swift_bridgeObjectRelease();
  v5._object = (void *)0x8000000188342AA0;
  v5._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v5);
  outlined copy of Binding<NavigationSplitViewColumn>?(*(void *)(v0 + 8), *(void *)(v0 + 16));
  type metadata accessor for Binding<PresentationDetent>?();
  v6._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0xD00000000000001BLL;
  v7._object = (void *)0x8000000188342AC0;
  String.append(_:)(v7);
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for AnyHashable?(0, &lazy cache variable for type metadata for PresentationAdaptation.Kind?, (uint64_t)&type metadata for PresentationAdaptation.Kind, MEMORY[0x1E4FBB718]);
  v9._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0xD000000000000019;
  v10._object = (void *)0x8000000188342AE0;
  String.append(_:)(v10);
  type metadata accessor for AnyHashable?(0, &lazy cache variable for type metadata for PresentationAdaptation?, (uint64_t)&type metadata for PresentationAdaptation, v8);
  v11._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x6D6964202020200ALL;
  v12._object = (void *)0xEE00203A676E696DLL;
  String.append(_:)(v12);
  outlined copy of PresentationDimmingBehavior?(*(id *)(v0 + 48));
  type metadata accessor for AnyHashable?(0, &lazy cache variable for type metadata for PresentationDimmingBehavior?, (uint64_t)&type metadata for PresentationDimmingBehavior, v8);
  v13._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized static PresentationDetent.Identifier.== infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      unint64_t v6 = a4 >> 62;
      if (a4 >> 62 != 1) {
        return 0;
      }
      double v4 = *(double *)&a1;
      double v5 = *(double *)&a3;
      goto LABEL_6;
    case 2uLL:
      if (a4 >> 62 != 2) {
        return 0;
      }
      return a1 == a3;
    case 3uLL:
      if (a1 | a2 ^ 0xC000000000000000)
      {
        if (a2 == 0xC000000000000000 && a1 == 1)
        {
          if (a4 >> 62 == 3 && a3 == 1 && a4 == 0xC000000000000000) {
            return 1;
          }
        }
        else if (a4 >> 62 == 3 && a3 == 2 && a4 == 0xC000000000000000)
        {
          return 1;
        }
      }
      else if (a4 >> 62 == 3 && !a3 && a4 == 0xC000000000000000)
      {
        return 1;
      }
      return 0;
    default:
      if (a4 >> 62) {
        return 0;
      }
      double v4 = *(double *)&a1;
      double v5 = *(double *)&a3;
      LODWORD(v6) = 1;
LABEL_6:
      if (v4 == v5) {
        return v6;
      }
      else {
        return 0;
      }
  }
}

BOOL specialized static PresentationDetent.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  unint64_t v3 = *(void *)(a1 + 8);
  double v4 = *(double *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  switch(v3 >> 62)
  {
    case 1uLL:
      return v5 >> 62 == 1 && v2 == v4;
    case 2uLL:
      return v5 >> 62 == 2 && *(void *)&v2 == *(void *)&v4;
    case 3uLL:
      if (!(*(void *)&v2 | v3 ^ 0xC000000000000000)) {
        return v5 >> 62 == 3 && *(void *)&v4 == 0 && v5 == 0xC000000000000000;
      }
      if (v3 == 0xC000000000000000 && *(void *)&v2 == 1) {
        return v5 >> 62 == 3 && *(void *)&v4 == 1 && v5 == 0xC000000000000000;
      }
      return v5 >> 62 == 3 && *(void *)&v4 == 2 && v5 == 0xC000000000000000;
    default:
      return !(v5 >> 62) && v2 == *(double *)a2;
  }
}

ValueMetadata *type metadata accessor for PresentationDetent()
{
  return &type metadata for PresentationDetent;
}

ValueMetadata *type metadata accessor for PresentationDetent.Context()
{
  return &type metadata for PresentationDetent.Context;
}

ValueMetadata *type metadata accessor for PresentationAdaptation()
{
  return &type metadata for PresentationAdaptation;
}

ValueMetadata *type metadata accessor for PresentationPassthroughBehavior()
{
  return &type metadata for PresentationPassthroughBehavior;
}

ValueMetadata *type metadata accessor for PresentationContentInteraction()
{
  return &type metadata for PresentationContentInteraction;
}

uint64_t getEnumTagSinglePayload for PresentationBackgroundInteraction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7A && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 122);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  int v4 = (v3 >> 57) & 0x18 | v3 & 7;
  unsigned int v5 = ((v3 >> 57) >> 5) | (4 * v4);
  if ((signed int)-v5 < -125 || v5 == 125) {
    int v6 = -125;
  }
  else {
    int v6 = -v5;
  }
  int v7 = v6 + 124;
  if (!v4) {
    int v7 = -1;
  }
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentationBackgroundInteraction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x79)
  {
    *(void *)uint64_t result = a2 - 122;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7A) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7A) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = ((32 * (125 - a2)) | ((125 - a2) >> 2) | ((unint64_t)((32 * (125 - a2)) | ((125 - a2) >> 2)) << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationBackgroundInteraction()
{
  return &type metadata for PresentationBackgroundInteraction;
}

uint64_t dispatch thunk of static CustomPresentationDetent.height(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_1881C66A8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1881C6740(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_1881C6748()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for PresentationBackgroundInteraction.Kind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7A && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 122);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  int v4 = (v3 >> 57) & 0x18 | v3 & 7;
  unsigned int v5 = (((v3 >> 57) >> 5) | (4 * v4)) ^ 0x7F;
  if (!v4) {
    unsigned int v5 = 0;
  }
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PresentationBackgroundInteraction.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x79)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 122;
    if (a3 >= 0x7A) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7A) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = ((32 * (125 - a2)) | ((125 - a2) >> 2) | ((unint64_t)((32 * (125 - a2)) | ((125 - a2) >> 2)) << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for PresentationBackgroundInteraction.Kind(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  int v2 = (v1 >> 57) & 0x18 | v1 & 7;
  unsigned int v3 = (((v1 >> 57) >> 5) | (4 * v2)) ^ 0x7F;
  if (v2) {
    return v3;
  }
  else {
    return 0;
  }
}

void *destructiveInjectEnumTag for PresentationBackgroundInteraction.Kind(void *result, unsigned int a2)
{
  if (a2 > 0x7B)
  {
    *uint64_t result = a2 - 124;
    result[1] = 0;
  }
  else if (a2)
  {
    *uint64_t result = 0;
    result[1] = ((32 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 2) | ((unint64_t)((32 * (a2 ^ 0x7F)) | ((a2 ^ 0x7F) >> 2)) << 57)) & 0xF000000000000007;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationBackgroundInteraction.Kind()
{
  return &type metadata for PresentationBackgroundInteraction.Kind;
}

ValueMetadata *type metadata accessor for PresentationContentInteraction.Kind()
{
  return &type metadata for PresentationContentInteraction.Kind;
}

unsigned char *storeEnumTagSinglePayload for PresentationPassthroughBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881C69B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationPassthroughBehavior.Kind()
{
  return &type metadata for PresentationPassthroughBehavior.Kind;
}

unsigned char *storeEnumTagSinglePayload for PresentationAdaptation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881C6AB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationAdaptation.Kind()
{
  return &type metadata for PresentationAdaptation.Kind;
}

uint64_t getEnumTagSinglePayload for PresentationDetent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 57) >> 5) | (4
                                                          * ((*(void *)(a1 + 8) >> 57) & 0x18 | *(void *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for PresentationDetent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)uint64_t result = a2 - 125;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for PresentationDetent.Identifier(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 62;
  if (v1 == 3) {
    return (*(_DWORD *)a1 + 3);
  }
  else {
    return v1;
  }
}

void *destructiveInjectEnumTag for PresentationDetent.Identifier(void *result, uint64_t a2)
{
  if (a2 < 3)
  {
    result[1] = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  }
  else
  {
    *uint64_t result = (a2 - 3);
    result[1] = 0xC000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationDetent.Identifier()
{
  return &type metadata for PresentationDetent.Identifier;
}

uint64_t assignWithCopy for PresentationOptionsPreference(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v6)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_retain();
      swift_release();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      swift_release();
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    }
    else
    {
      outlined destroy of Binding<PresentationDetent>(a1 + 8);
      long long v7 = *(_OWORD *)(a2 + 24);
      *unsigned int v4 = *v5;
      *(_OWORD *)(a1 + 24) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 24);
    *unsigned int v4 = *v5;
    *(_OWORD *)(a1 + 24) = v8;
  }
  Swift::String v9 = (unint64_t *)(a1 + 48);
  Swift::String v10 = *(void **)(a1 + 48);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  unint64_t v11 = *(void *)(a2 + 48);
  if (v10 == (void *)2)
  {
    if (v11 < 2)
    {
LABEL_20:
      *Swift::String v9 = v11;
      goto LABEL_21;
    }
    if (v11 == 2)
    {
      unint64_t v11 = 2;
      goto LABEL_20;
    }
LABEL_16:
    *Swift::String v9 = v11;
    id v12 = (id)v11;
    goto LABEL_21;
  }
  if (v11 == 2)
  {
    outlined destroy of PresentationDimmingBehavior(a1 + 48);
LABEL_19:
    unint64_t v11 = *(void *)(a2 + 48);
    goto LABEL_20;
  }
  if ((unint64_t)v10 < 2)
  {
    if (v11 < 2) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  if (v11 < 2)
  {
    outlined destroy of PresentationSizing?(a1 + 48, (uint64_t (*)(void))type metadata accessor for UISheetPresentationControllerDetentIdentifier);
    goto LABEL_19;
  }
  *Swift::String v9 = v11;
  id v19 = (id)v11;

LABEL_21:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  uint64_t v13 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v13;
  uint64_t v14 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v14;
  uint64_t v15 = *(void *)(a2 + 120);
  if (!*(void *)(a1 + 120))
  {
    if (v15)
    {
      *(void *)(a1 + 120) = v15;
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 96, a2 + 96);
      goto LABEL_28;
    }
LABEL_27:
    long long v16 = *(_OWORD *)(a2 + 96);
    long long v17 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 96) = v16;
    *(_OWORD *)(a1 + 112) = v17;
    goto LABEL_28;
  }
  if (!v15)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 96);
    goto LABEL_27;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 96), (uint64_t *)(a2 + 96));
LABEL_28:
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  return a1;
}

uint64_t outlined destroy of PresentationSizing?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t assignWithTake for PresentationOptionsPreference(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16))
  {
    uint64_t v4 = *(void *)(a2 + 16);
    if (v4)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_release();
      *(void *)(a1 + 16) = v4;
      swift_release();
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      goto LABEL_6;
    }
    outlined destroy of Binding<PresentationDetent>(a1 + 8);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
LABEL_6:
  long long v7 = (unint64_t *)(a1 + 48);
  uint64_t v6 = *(void **)(a1 + 48);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  unint64_t v8 = *(void *)(a2 + 48);
  if (v6 == (void *)2)
  {
    if (v8 != 2) {
      goto LABEL_15;
    }
LABEL_11:
    *long long v7 = 2;
    goto LABEL_16;
  }
  if (v8 == 2)
  {
    outlined destroy of PresentationDimmingBehavior(a1 + 48);
    goto LABEL_11;
  }
  if ((unint64_t)v6 < 2)
  {
LABEL_15:
    *long long v7 = v8;
    goto LABEL_16;
  }
  if (v8 < 2)
  {
    outlined destroy of PresentationSizing?(a1 + 48, (uint64_t (*)(void))type metadata accessor for UISheetPresentationControllerDetentIdentifier);
    goto LABEL_15;
  }
  *long long v7 = v8;

LABEL_16:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  if (*(void *)(a1 + 120)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 96);
  }
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  return a1;
}

void *initializeBufferWithCopyOfBuffer for PresentationDimmingBehavior(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF) {
    id v4 = v3;
  }
  *a1 = v3;
  return a1;
}

void destroy for PresentationDimmingBehavior(void **a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF) {
}
  }

void **assignWithCopy for PresentationDimmingBehavior(void **a1, void **a2)
{
  uint64_t v3 = *a1;
  id v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      id v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    id v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  id v5 = v4;

  return a1;
}

void **assignWithTake for PresentationDimmingBehavior(void **a1, unint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v4 < 0xFFFFFFFF)
  {

LABEL_5:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for PresentationDimmingBehavior(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PresentationDimmingBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationDimmingBehavior()
{
  return &type metadata for PresentationDimmingBehavior;
}

unint64_t lazy protocol witness table accessor for type PresentationDetent.Identifier and conformance PresentationDetent.Identifier()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationDetent.Identifier and conformance PresentationDetent.Identifier;
  if (!lazy protocol witness table cache variable for type PresentationDetent.Identifier and conformance PresentationDetent.Identifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationDetent.Identifier and conformance PresentationDetent.Identifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationAdaptation.Kind and conformance PresentationAdaptation.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationAdaptation.Kind and conformance PresentationAdaptation.Kind;
  if (!lazy protocol witness table cache variable for type PresentationAdaptation.Kind and conformance PresentationAdaptation.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationAdaptation.Kind and conformance PresentationAdaptation.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationPassthroughBehavior.Kind and conformance PresentationPassthroughBehavior.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationPassthroughBehavior.Kind and conformance PresentationPassthroughBehavior.Kind;
  if (!lazy protocol witness table cache variable for type PresentationPassthroughBehavior.Kind and conformance PresentationPassthroughBehavior.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationPassthroughBehavior.Kind and conformance PresentationPassthroughBehavior.Kind);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentationContentInteraction.Kind and conformance PresentationContentInteraction.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationContentInteraction.Kind and conformance PresentationContentInteraction.Kind;
  if (!lazy protocol witness table cache variable for type PresentationContentInteraction.Kind and conformance PresentationContentInteraction.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationContentInteraction.Kind and conformance PresentationContentInteraction.Kind);
  }
  return result;
}

void type metadata accessor for Binding<PresentationDetent>?()
{
  if (!lazy cache variable for type metadata for Binding<PresentationDetent>?)
  {
    type metadata accessor for AnyHashable?(255, &lazy cache variable for type metadata for Binding<PresentationDetent>, (uint64_t)&type metadata for PresentationDetent, MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationDetent>?);
    }
  }
}

ValueMetadata *type metadata accessor for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView()
{
  return &type metadata for EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView;
}

ValueMetadata *type metadata accessor for PresentationDetent.CustomPresentationDetentWrapper()
{
  return &type metadata for PresentationDetent.CustomPresentationDetentWrapper;
}

uint64_t UIKitGestureRecognizer.updateInheritedPhase(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  static Semantics.v6.getter();
  uint64_t result = isLinkedOnOrAfter(_:)();
  if (result)
  {
    uint64_t result = MEMORY[0x18C111F70]();
    if ((result & 1) == 0)
    {
      uint64_t result = static CoreTesting.isRunning.getter();
      if ((result & 1) == 0)
      {
        uint64_t v4 = v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastInheritedPhase;
        if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastInheritedPhase + 8) & 1) != 0
          || *(void *)v4 != v2)
        {
          uint64_t result = swift_weakLoadStrong();
          if (result)
          {
            dispatch thunk of EventBindingBridge.setInheritedPhase(_:)();
            uint64_t result = swift_release();
          }
          *(void *)uint64_t v4 = v2;
          *(unsigned char *)(v4 + 8) = 0;
        }
      }
    }
  }
  return result;
}

id UIKitGestureRecognizer.init()()
{
  swift_weakInit();
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialScale] = 0x3FF0000000000000;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialAngle] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_scrollConverter];
  *(_DWORD *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  *((void *)v1 + 2) = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_gestureCategory] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastInheritedPhase];
  *(void *)uint64_t v2 = 0;
  v2[8] = 1;
  uint64_t v3 = &v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastState];
  *(void *)uint64_t v3 = 0;
  v3[8] = 1;
  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for UIKitGestureRecognizer();
  id v4 = objc_msgSendSuper2(&v11, sel_initWithTarget_action_, 0, 0);
  uint64_t v5 = one-time initialization token for back;
  id v6 = v4;
  if (v5 != -1) {
    swift_once();
  }
  uint64_t v7 = static UIPressType.back;
  id v8 = v6;
  specialized ContiguousArray.reserveCapacity(_:)();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 0);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 1);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 2);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 3);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 4);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 5);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, 6);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithInteger_, v7);
  specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
  specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized ContiguousArray._endMutation()();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  objc_msgSend(v8, sel_setAllowedPressTypes_, isa);

  objc_msgSend(v8, sel_setDelaysTouchesEnded_, 0);
  return v8;
}

Swift::Void __swiftcall UIKitGestureRecognizer.reset()()
{
  uint64_t v1 = v0;
  if (swift_weakLoadStrong())
  {
    lazy protocol witness table accessor for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer();
    dispatch thunk of EventBindingBridge.reset(eventSource:resetForwardedEventDispatchers:)();
    swift_release();
  }
  uint64_t v2 = v0 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_scrollConverter;
  swift_beginAccess();
  if (*(_DWORD *)v2 == -1)
  {
    __break(1u);
  }
  else
  {
    ++*(_DWORD *)v2;
    *(void *)(v2 + 8) = 0;
    *(void *)(v2 + 16) = 0;
    uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastState;
    *(void *)uint64_t v3 = 0;
    *(unsigned char *)(v3 + 8) = 1;
    uint64_t v4 = v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastInheritedPhase;
    *(void *)uint64_t v4 = 0;
    *(unsigned char *)(v4 + 8) = 1;
  }
}

Swift::Bool __swiftcall UIKitGestureRecognizer.shouldReceive(_:)(UIEvent a1)
{
  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (MEMORY[0x18C111F70]() & 1) == 0
    && (static CoreTesting.isRunning.getter() & 1) == 0
    && v1[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastInheritedPhase + 8] == 1)
  {
    uint64_t v5 = 0;
    UIKitGestureRecognizer.updateInheritedPhase(_:)(&v5);
  }
  uint64_t v3 = (objc_class *)type metadata accessor for UIKitGestureRecognizer();
  v6.receiver = v1;
  v6.super_class = v3;
  return objc_msgSendSuper2(&v6, sel_shouldReceiveEvent_, a1.super.isa);
}

Swift::Void __swiftcall UIKitGestureRecognizer._updateForActiveEvents()()
{
  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (MEMORY[0x18C111F70]() & 1) == 0
    && (static CoreTesting.isRunning.getter() & 1) == 0)
  {
    id v1 = objc_msgSend(v0, sel_state);
    if ((v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastState + 8] & 1) == 0
      && (id v2 = *(id *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastState], v1 != v2)
      && (v2 != (id)3 ? (BOOL v3 = v2 == 0) : (BOOL v3 = 1),
          v3 && (objc_msgSend(v0, sel_state) == (id)5 || objc_msgSend(v0, sel_state) == (id)4)))
    {
      uint64_t v4 = 2;
    }
    else
    {
      uint64_t v4 = objc_msgSend(v0, sel__hasUnmetFailureRequirements) ^ 1;
    }
    uint64_t v5 = v4;
    UIKitGestureRecognizer.updateInheritedPhase(_:)(&v5);
  }
}

void @objc UIKitGestureRecognizer.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject, &lazy cache variable for type metadata for UITouch);
  uint64_t v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a4;
  id v7 = a1;
  uint64_t v8 = UIKitGestureRecognizer.convert(touches:with:)(v6, v9);
  if (swift_weakLoadStrong())
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v8);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();

    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t protocol witness for EventBindingSource.attach(to:) in conformance UIKitGestureRecognizer()
{
  swift_weakAssign();
  uint64_t Strong = swift_weakLoadStrong();
  id v2 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130);
  swift_retain();
  v2(Strong);
  swift_release();

  return swift_release();
}

void *protocol witness for EventBindingSource.didUpdate(gestureCategory:in:) in conformance UIKitGestureRecognizer(void *result)
{
  *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_gestureCategory) = *result;
  return result;
}

uint64_t UIKitGestureRecognizer._transformChanged(with:)(void *a1)
{
  if (objc_msgSend(a1, sel_phase) == (id)1)
  {
    objc_msgSend(a1, sel_scale);
    *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialScale) = v3;
    objc_msgSend(a1, sel_rotation);
    *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialAngle) = -v4;
  }
  type metadata accessor for (UITransformEvent, TransformEvent)(0, &lazy cache variable for type metadata for (UITransformEvent, TransformEvent), (unint64_t *)&lazy cache variable for type metadata for UITransformEvent);
  uint64_t v6 = v5;
  objc_msgSend(a1, sel_locationInView_, 0);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  objc_msgSend(a1, sel_timestamp);
  uint64_t v12 = v11;
  id v13 = objc_msgSend(a1, sel_phase);
  uint64_t v14 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialScale);
  objc_msgSend(a1, sel_scale);
  uint64_t v16 = v15;
  uint64_t v17 = OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialAngle;
  uint64_t v18 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialAngle);
  objc_msgSend(a1, sel_rotation);
  double v20 = v19;
  double v21 = *(double *)(v1 + v17);
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if ((unint64_t)v13 >= 5) {
      char v23 = 3;
    }
    else {
      char v23 = 0x302010003uLL >> (8 * v13);
    }
    type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    *(void *)(inited + 32) = v6;
    *(void *)(inited + 40) = a1;
    *(void *)(inited + 72) = &type metadata for TransformEvent;
    *(void *)(inited + 80) = lazy protocol witness table accessor for type TransformEvent and conformance TransformEvent();
    uint64_t v25 = swift_allocObject();
    *(void *)(inited + 48) = v25;
    *(void *)(v25 + 16) = v12;
    *(unsigned char *)(v25 + 24) = v23;
    *(void *)(v25 + 32) = 0;
    *(void *)(v25 + 40) = v8;
    *(void *)(v25 + 48) = v10;
    *(void *)(v25 + 56) = v8;
    *(void *)(v25 + 64) = v10;
    *(void *)(v25 + 72) = v14;
    *(void *)(v25 + 80) = v16;
    *(void *)(v25 + 88) = v18;
    *(double *)(v25 + 96) = (v20 * -128.0 + v21 * -128.0) * 0.0078125;
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    swift_setDeallocating();
    type metadata accessor for (EventID, EventType)();
    swift_arrayDestroy();
    lazy protocol witness table accessor for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t UIKitGestureRecognizer._scrollingChanged(with:)(unint64_t a1)
{
  id v2 = v1;
  id v4 = objc_msgSend(v2, sel_view);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = objc_msgSend(v4, sel_window);
  }
  else
  {
    id v6 = 0;
  }
  swift_beginAccess();
  unint64_t v7 = ScrollEventConverter.convert(_:in:)(a1, v6);
  swift_endAccess();

  if (swift_weakLoadStrong())
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v7);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer();
    dispatch thunk of EventBindingBridge.send(_:source:)();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

void *specialized UIKitGestureRecognizer.convert(buttonEvents:with:)(uint64_t a1)
{
  id v2 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
    lazy protocol witness table accessor for type UIScene and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type UIPress and conformance NSObject, (unint64_t *)&lazy cache variable for type metadata for UIPress);
    Set.Iterator.init(_cocoa:)();
    a1 = v47;
    uint64_t v44 = v48;
    uint64_t v3 = v49;
    uint64_t v4 = v50;
    unint64_t v5 = v51;
  }
  else
  {
    uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v44 = a1 + 56;
    uint64_t v7 = ~v6;
    uint64_t v8 = -v6;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = v7;
    uint64_t v4 = 0;
  }
  int64_t v43 = (unint64_t)(v3 + 64) >> 6;
  uint64_t v45 = a1;
  while (a1 < 0)
  {
    if (!__CocoaSet.Iterator.next()()) {
      goto LABEL_58;
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPress);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v14 = v46;
    swift_unknownObjectRelease();
    uint64_t v13 = v4;
    uint64_t v11 = v5;
    if (!v46) {
      goto LABEL_58;
    }
LABEL_31:
    type metadata accessor for (UITransformEvent, TransformEvent)(0, &lazy cache variable for type metadata for (UIPress, PhysicalButtonEvent), (unint64_t *)&lazy cache variable for type metadata for UIPress);
    Swift::UInt v19 = v18;
    objc_msgSend(v14, sel_timestamp);
    uint64_t v21 = v20;
    id v22 = objc_msgSend(v14, sel_phase);
    if ((unint64_t)v22 >= 5) {
      char v23 = 3;
    }
    else {
      char v23 = 0x302010100uLL >> (8 * v22);
    }
    id v24 = objc_msgSend(v14, sel_type);
    char v25 = 0;
    switch((unint64_t)v24)
    {
      case 0uLL:
        goto LABEL_47;
      case 1uLL:
        char v25 = 1;
        goto LABEL_47;
      case 2uLL:
        char v25 = 2;
        goto LABEL_47;
      case 3uLL:
        char v25 = 3;
        goto LABEL_47;
      case 4uLL:
        char v25 = 4;
        goto LABEL_47;
      case 5uLL:
        char v25 = 5;
        goto LABEL_47;
      case 6uLL:
        char v25 = 6;
        goto LABEL_47;
      case 0x1EuLL:
        char v25 = 7;
        goto LABEL_47;
      case 0x1FuLL:
        char v25 = 8;
        goto LABEL_47;
      default:
        if (one-time initialization token for back != -1) {
          swift_once();
        }
        if ((id)static UIPressType.back != v24) {
          goto LABEL_63;
        }
        char v25 = 9;
LABEL_47:
        uint64_t v26 = v2;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v46 = v26;
        Swift::UInt v28 = v19;
        unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v19, (Swift::UInt)v14);
        uint64_t v31 = v26[2];
        BOOL v32 = (v29 & 1) == 0;
        uint64_t v33 = v31 + v32;
        if (__OFADD__(v31, v32))
        {
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
LABEL_62:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
LABEL_63:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
          JUMPOUT(0x1881C9010);
        }
        char v34 = v29;
        if (v26[3] >= v33)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            id v2 = v26;
            if (v29) {
              goto LABEL_8;
            }
          }
          else
          {
            specialized _NativeDictionary.copy()();
            id v2 = v26;
            if (v34) {
              goto LABEL_8;
            }
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, isUniquelyReferenced_nonNull_native);
          unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v28, (Swift::UInt)v14);
          if ((v34 & 1) != (v36 & 1)) {
            goto LABEL_62;
          }
          unint64_t v30 = v35;
          id v2 = v26;
          if (v34)
          {
LABEL_8:
            uint64_t v10 = v2[7] + 32 * v30;
            swift_release();
            *(void *)uint64_t v10 = v21;
            *(unsigned char *)(v10 + 8) = v23;
            *(void *)(v10 + 16) = 0;
            *(unsigned char *)(v10 + 24) = v25;
            goto LABEL_9;
          }
        }
        v2[(v30 >> 6) + 8] |= 1 << v30;
        uint64_t v37 = (Swift::UInt *)(v2[6] + 16 * v30);
        *uint64_t v37 = v28;
        v37[1] = (Swift::UInt)v14;
        uint64_t v38 = v2[7] + 32 * v30;
        *(void *)uint64_t v38 = v21;
        *(unsigned char *)(v38 + 8) = v23;
        *(void *)(v38 + 16) = 0;
        *(unsigned char *)(v38 + 24) = v25;
        uint64_t v39 = v2[2];
        BOOL v40 = __OFADD__(v39, 1);
        uint64_t v41 = v39 + 1;
        if (v40) {
          goto LABEL_60;
        }
        v2[2] = v41;
LABEL_9:

        swift_bridgeObjectRelease();
        uint64_t v4 = v13;
        unint64_t v5 = v11;
        a1 = v45;
        break;
    }
  }
  if (v5)
  {
    uint64_t v11 = (v5 - 1) & v5;
    unint64_t v12 = __clz(__rbit64(v5)) | (v4 << 6);
    uint64_t v13 = v4;
    goto LABEL_30;
  }
  int64_t v15 = v4 + 1;
  if (__OFADD__(v4, 1)) {
    goto LABEL_61;
  }
  if (v15 < v43)
  {
    unint64_t v16 = *(void *)(v44 + 8 * v15);
    uint64_t v13 = v4 + 1;
    if (!v16)
    {
      uint64_t v13 = v4 + 2;
      if (v4 + 2 >= v43) {
        goto LABEL_58;
      }
      unint64_t v16 = *(void *)(v44 + 8 * v13);
      if (!v16)
      {
        uint64_t v13 = v4 + 3;
        if (v4 + 3 >= v43) {
          goto LABEL_58;
        }
        unint64_t v16 = *(void *)(v44 + 8 * v13);
        if (!v16)
        {
          uint64_t v13 = v4 + 4;
          if (v4 + 4 >= v43) {
            goto LABEL_58;
          }
          unint64_t v16 = *(void *)(v44 + 8 * v13);
          if (!v16)
          {
            uint64_t v17 = v4 + 5;
            do
            {
              if (v43 == v17) {
                goto LABEL_58;
              }
              unint64_t v16 = *(void *)(v44 + 8 * v17++);
            }
            while (!v16);
            uint64_t v13 = v17 - 1;
          }
        }
      }
    }
    uint64_t v11 = (v16 - 1) & v16;
    unint64_t v12 = __clz(__rbit64(v16)) + (v13 << 6);
LABEL_30:
    id v14 = *(id *)(*(void *)(a1 + 48) + 8 * v12);
    if (!v14) {
      goto LABEL_58;
    }
    goto LABEL_31;
  }
LABEL_58:
  outlined consume of Set<UIPress>.Iterator._Variant();
  return v2;
}

void specialized UIKitGestureRecognizer.init(coder:)()
{
  swift_weakInit();
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialScale] = 0x3FF0000000000000;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_initialAngle] = 0;
  uint64_t v1 = &v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_scrollConverter];
  *(_DWORD *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
  *((void *)v1 + 2) = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_gestureCategory] = 0;
  id v2 = &v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastInheritedPhase];
  *(void *)id v2 = 0;
  v2[8] = 1;
  uint64_t v3 = &v0[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastState];
  *(void *)uint64_t v3 = 0;
  v3[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id specialized UIKitGestureRecognizer.didUpdate(phase:in:)(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1);
  id v3 = objc_msgSend(v1, sel_state);
  uint64_t v4 = 3;
  switch(v2)
  {
    case 1:
      if (v3) {
        uint64_t v4 = 2;
      }
      else {
        uint64_t v4 = 1;
      }
      break;
    case 2:
      break;
    case 3:
      uint64_t v5 = 4;
      if (v3 == (id)5) {
        uint64_t v5 = 5;
      }
      if (v3) {
        uint64_t v4 = v5;
      }
      else {
        uint64_t v4 = 5;
      }
      break;
    default:
      uint64_t v4 = (uint64_t)v3;
      break;
  }
  id result = objc_msgSend(v1, sel_setState_, v4);
  uint64_t v7 = &v1[OBJC_IVAR____TtC7SwiftUI22UIKitGestureRecognizer_lastState];
  *(void *)uint64_t v7 = v4;
  v7[8] = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer;
  if (!lazy protocol witness table cache variable for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer)
  {
    type metadata accessor for UIKitGestureRecognizer();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitGestureRecognizer and conformance UIKitGestureRecognizer);
  }
  return result;
}

uint64_t sub_1881C9288()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for _ContiguousArrayStorage<(EventID, EventType)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>)
  {
    type metadata accessor for (EventID, EventType)();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>);
    }
  }
}

uint64_t sub_1881C9318()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1881C9350()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for (UITransformEvent, TransformEvent)(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for NSObject(255, a3);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_1881C93F8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1881C9430()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t associated type witness table accessor for StepperStyle.Body : View in DefaultStepperStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for StepperStyle.makeBody(configuration:) in conformance DefaultStepperStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v8;
  *(void *)(a2 + 48) = v9;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(void *)(a2 + 88) = KeyPath;
  *(unsigned char *)(a2 + 96) = 0;
  swift_retain();
  outlined copy of AppIntentExecutor?(v4);
  outlined copy of AppIntentExecutor?(v6);

  return swift_retain();
}

ValueMetadata *type metadata accessor for DefaultStepperStyle()
{
  return &type metadata for DefaultStepperStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>>)
  {
    type metadata accessor for ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>();
    type metadata accessor for StepperStyleModifier<MenuStepperStyle>(255, &lazy cache variable for type metadata for StepperStyleModifier<SegmentedButtonStepperStyle>, (void (*)(void))lazy protocol witness table accessor for type SegmentedButtonStepperStyle and conformance SegmentedButtonStepperStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>, StepperStyleModifier<SegmentedButtonStepperStyle>>);
    }
  }
}

void type metadata accessor for Stepper<StepperStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for Stepper<StepperStyleConfiguration.Label>)
  {
    unint64_t v0 = type metadata accessor for Stepper();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Stepper<StepperStyleConfiguration.Label>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MenuStepperStyle and conformance MenuStepperStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuStepperStyle and conformance MenuStepperStyle;
  if (!lazy protocol witness table cache variable for type MenuStepperStyle and conformance MenuStepperStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuStepperStyle and conformance MenuStepperStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SegmentedButtonStepperStyle and conformance SegmentedButtonStepperStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SegmentedButtonStepperStyle and conformance SegmentedButtonStepperStyle;
  if (!lazy protocol witness table cache variable for type SegmentedButtonStepperStyle and conformance SegmentedButtonStepperStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SegmentedButtonStepperStyle and conformance SegmentedButtonStepperStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t sub_1881C97C8()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for TabPlacementModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881C98F8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabPlacementModifier()
{
  return &type metadata for TabPlacementModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TabPlacementModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance TabPlacementModifier()
{
  char v1 = *v0;
  *(unsigned char *)(swift_allocObject() + 16) = v1;
  type metadata accessor for _ViewModifier_Content<TabPlacementModifier>();
  lazy protocol witness table accessor for type _ViewModifier_Content<TabPlacementModifier> and conformance _ViewModifier_Content<A>();
  View.transformTrait<A>(_:transform:)();

  return swift_release();
}

uint64_t sub_1881C99F4()
{
  return swift_deallocObject();
}

unsigned char *partial apply for closure #1 in TabPlacementModifier.body(content:)(unsigned char *result)
{
  *unint64_t result = *(unsigned char *)(v1 + 16);
  return result;
}

void type metadata accessor for _ViewModifier_Content<TabPlacementModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<TabPlacementModifier>)
  {
    lazy protocol witness table accessor for type TabPlacementModifier and conformance TabPlacementModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<TabPlacementModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<TabPlacementModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<TabPlacementModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<TabPlacementModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<TabPlacementModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<TabPlacementModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t sub_1881C9AC4()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for SwiftUIDefaultAccentColorProvider()
{
  return &type metadata for SwiftUIDefaultAccentColorProvider;
}

SwiftUI::BorderedTableStyle __swiftcall BorderedTableStyle.init()()
{
  result.alternatingRowBackgrounds.guts = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::BorderedTableStyle __swiftcall BorderedTableStyle.init(alternatesRowBackgrounds:)(Swift::Bool alternatesRowBackgrounds)
{
  result.alternatingRowBackgrounds.guts = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void BorderedTableStyle.makeBody(configuration:)()
{
}

uint64_t associated type witness table accessor for TableStyle.Body : View in BorderedTableStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unsigned char *storeEnumTagSinglePayload for BorderedTableStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *SwiftUI::BorderedTableStyle result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881C9C68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *SwiftUI::BorderedTableStyle result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BorderedTableStyle()
{
  return &type metadata for BorderedTableStyle;
}

uint64_t EnvironmentValues.effectiveButtonRepeatTiming.getter@<X0>(void *a1@<X8>)
{
  if (!*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
    uint64_t result = swift_release_n();
    if (v6 == 1)
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
      swift_retain_n();
      PropertyList.subscript.getter();
      goto LABEL_6;
    }
LABEL_7:
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
  swift_retain_n();
  swift_retain_n();
  PropertyList.Tracker.value<A>(_:for:)();
  swift_release_n();
  uint64_t result = swift_release_n();
  if (v6 != 1) {
    goto LABEL_7;
  }
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  swift_retain_n();
  swift_retain_n();
  PropertyList.Tracker.value<A>(_:for:)();
  swift_release_n();
LABEL_6:
  uint64_t result = swift_release_n();
  uint64_t v4 = v5;
LABEL_8:
  *a1 = v4;
  return result;
}

uint64_t View.buttonRepeatBehavior(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<ButtonRepeatBehavior>();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v14 - v7;
  char v9 = *a1;
  swift_getKeyPath();
  char v15 = v9;
  View.environment<A>(_:_:)();
  swift_release();
  unint64_t v10 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ButtonRepeatBehavior> and conformance _EnvironmentKeyWritingModifier<A>();
  v14[1] = a3;
  long long v14[2] = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t HasCustomRepeatBehavior = lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior();
  View.input<A>(_:)((uint64_t)&type metadata for ButtonRepeatBehavior.HasCustomRepeatBehavior, v5, (uint64_t)&type metadata for ButtonRepeatBehavior.HasCustomRepeatBehavior, WitnessTable, HasCustomRepeatBehavior);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ButtonRepeatBehavior>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ButtonRepeatBehavior>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ButtonRepeatBehavior>);
    }
  }
}

uint64_t EnvironmentValues.buttonRepeatTiming.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.buttonRepeatTiming : EnvironmentValues@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.buttonRepeatTiming.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return swift_release();
}

void static ButtonRepeatBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ButtonRepeatBehavior.enabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ButtonRepeatBehavior.disabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void ButtonRepeatBehavior.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static ButtonRepeatBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int ButtonRepeatBehavior.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.buttonRepeatBehavior.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.buttonRepeatBehavior : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatBehavior.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatBehavior.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.buttonRepeatBehavior : EnvironmentValues()
{
  return EnvironmentValues.buttonRepeatBehavior.setter();
}

uint64_t sub_1881CA840()
{
  return EnvironmentValues.buttonRepeatBehavior.setter();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ButtonRepeatBehavior> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ButtonRepeatBehavior> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ButtonRepeatBehavior> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ButtonRepeatBehavior>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ButtonRepeatBehavior> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ButtonRepeatBehavior.HasCustomRepeatBehavior()
{
  return PropertyList.subscript.setter();
}

Swift::Double_optional __swiftcall ButtonRepeatTiming.Iterator.next()()
{
  uint64_t v1 = *v0;
  unint64_t v2 = *(void *)(*v0 + 16);
  if (v2 >= 2)
  {
    if (v0[1] != *(void *)(v1 + 48)) {
      goto LABEL_5;
    }
    LOBYTE(v3) = specialized Array.replaceSubrange<A>(_:with:)(0, 1);
    uint64_t v1 = *v0;
    unint64_t v2 = *(void *)(*v0 + 16);
  }
  if (!v2)
  {
    LOBYTE(v3) = 0;
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v5 = v0[1];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(void *)(v1 + 40);
    v0[1] = v7;
  }
LABEL_9:
  result.value = v4;
  result.is_nil = v3;
  return result;
}

void one-time initialization function for iOSStepper()
{
  static ButtonRepeatTiming.iOSStepper = (uint64_t)&outlined read-only object #0 of one-time initialization function for iOSStepper;
}

uint64_t (*EnvironmentValues.buttonRepeatTiming.modify(uint64_t a1))(void *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.buttonRepeatTiming.modify;
}

uint64_t EnvironmentValues.buttonRepeatTiming.modify(void *a1, char a2)
{
  uint64_t v3 = a1[2];
  a1[1] = *a1;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonRepeatTiming.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonRepeatTiming.Key>);
  swift_bridgeObjectRetain();
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v3 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v3 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ButtonRepeatTiming.Key@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for iOSStepper != -1) {
    swift_once();
  }
  *a1 = static ButtonRepeatTiming.iOSStepper;

  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type ButtonRepeatBehavior and conformance ButtonRepeatBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonRepeatBehavior and conformance ButtonRepeatBehavior;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior and conformance ButtonRepeatBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior and conformance ButtonRepeatBehavior);
  }
  return result;
}

uint64_t sub_1881CAE14()
{
  swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter();

  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for ButtonRepeatBehavior()
{
  return &type metadata for ButtonRepeatBehavior;
}

uint64_t sub_1881CAE6C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for ViewInputFlagModifier<ButtonRepeatBehavior.HasCustomRepeatBehavior>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<ButtonRepeatBehavior.HasCustomRepeatBehavior>)
  {
    lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ButtonRepeatBehavior.HasCustomRepeatBehavior>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ButtonRepeatBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881CB044);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ButtonRepeatBehavior.Guts()
{
  return &type metadata for ButtonRepeatBehavior.Guts;
}

ValueMetadata *type metadata accessor for ButtonRepeatBehavior.Key()
{
  return &type metadata for ButtonRepeatBehavior.Key;
}

ValueMetadata *type metadata accessor for ButtonRepeatTiming.Key()
{
  return &type metadata for ButtonRepeatTiming.Key;
}

unint64_t lazy protocol witness table accessor for type ButtonRepeatBehavior.Guts and conformance ButtonRepeatBehavior.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonRepeatBehavior.Guts and conformance ButtonRepeatBehavior.Guts;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior.Guts and conformance ButtonRepeatBehavior.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior.Guts and conformance ButtonRepeatBehavior.Guts);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ButtonRepeatBehavior.HasCustomRepeatBehavior()
{
  return &protocol witness table for ButtonRepeatBehavior.HasCustomRepeatBehavior;
}

uint64_t View.buttonOutset(_:)()
{
  return swift_release();
}

uint64_t key path setter for _ButtonGesture.action : _ButtonGesture(uint64_t *a1, uint64_t (**a2)())
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t _ButtonGesture.action.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t _ButtonGesture.action.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_ButtonGesture.action.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for _ButtonGesture.pressingAction : _ButtonGesture@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    unsigned int v6 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;

  return outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v3, v4);
}

uint64_t key path setter for _ButtonGesture.pressingAction : _ButtonGesture(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    unsigned int v6 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  }
  else
  {
    unsigned int v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *(void *)(a2 + 16);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v3, v4);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7);
  *(void *)(a2 + 16) = v6;
  *(void *)(a2 + 24) = v5;
  return result;
}

uint64_t _ButtonGesture.pressingAction.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t _ButtonGesture.pressingAction.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v2 + 16));
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*_ButtonGesture.pressingAction.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ButtonGesture.init(action:pressing:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = result;
  *(void *)(a5 + 8) = a2;
  *(void *)(a5 + 16) = a3;
  *(void *)(a5 + 24) = a4;
  *(void *)(a5 + 32) = 0;
  *(unsigned char *)(a5 + 40) = 1;
  return result;
}

uint64_t static _ButtonGesture._makeGesture(gesture:inputs:)()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

uint64_t _ButtonGesture.internalBody.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v6 = *v1;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 9) = *(long long *)((char *)v1 + 25);
  closure #1 in _ButtonGesture.internalBody.getter((uint64_t)&v6, a1);
  *(void *)(a1 + 72) = swift_getKeyPath();
  *(_WORD *)(a1 + 80) = 0;
  long long v4 = v7[0];
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 113) = *(_OWORD *)((char *)v7 + 9);
  return outlined retain of _ButtonGesture((uint64_t)&v6);
}

__n128 closure #1 in _ButtonGesture.internalBody.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    uint64_t v7 = swift_allocObject();
    uint64_t v8 = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
    *(void *)(v7 + 16) = thunk for @escaping @callee_guaranteed (@unowned Bool) -> ()partial apply;
    *(void *)(v7 + 24) = v6;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ())partial apply;
    *(void *)(v9 + 24) = v7;
    swift_retain();
    char v10 = 0;
    uint64_t v11 = partial apply for closure #1 in closure #1 in closure #1 in _ButtonGesture.internalBody.getter;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    uint64_t v8 = 0;
    char v10 = -1;
  }
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v4, v5);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
  unint64_t v12 = (_OWORD *)swift_allocObject();
  long long v13 = *(_OWORD *)(a1 + 16);
  v12[1] = *(_OWORD *)a1;
  unint64_t v12[2] = v13;
  *(_OWORD *)((char *)v12 + 41) = *(_OWORD *)(a1 + 25);
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(unsigned char *)(a1 + 40);
  outlined retain of _ButtonGesture(a1);
  MapGesture.init(_:)();
  __n128 result = v17;
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = partial apply for closure #2 in closure #1 in _ButtonGesture.internalBody.getter;
  *(void *)(a2 + 32) = v12;
  *(void *)(a2 + 40) = v14;
  *(unsigned char *)(a2 + 48) = v15;
  *(__n128 *)(a2 + 56) = v17;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in _ButtonGesture.internalBody.getter(char a1, uint64_t a2, uint64_t a3)
{
  BOOL v5 = a1 == 2;
  type metadata accessor for MainActor();
  _OWORD v7[2] = a2;
  v7[3] = a3;
  BOOL v8 = v5;
  return specialized static MainActor.assumeIsolated<A>(_:file:line:)((uint64_t)partial apply for closure #1 in closure #1 in closure #1 in closure #1 in _ButtonGesture.internalBody.getter, (uint64_t)v7);
}

uint64_t closure #2 in closure #1 in _ButtonGesture.internalBody.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for MainActor();
  _OWORD v6[2] = a4;
  return specialized static MainActor.assumeIsolated<A>(_:file:line:)((uint64_t)partial apply for closure #1 in closure #2 in closure #1 in _ButtonGesture.internalBody.getter, (uint64_t)v6);
}

uint64_t _ButtonGesture.LegacyBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v28 = a1;
  type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0();
  uint64_t v27 = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  BOOL v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)v1;
  uint64_t v7 = *(unsigned __int8 *)(v1 + 8);
  int v8 = *(unsigned __int8 *)(v1 + 9);
  uint64_t v9 = *(void *)(v1 + 24);
  *(void *)&long long v26 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 32);
  uint64_t v11 = *(void *)(v1 + 40);
  double v12 = *(double *)(v1 + 48);
  int v25 = *(unsigned __int8 *)(v1 + 56);
  outlined copy of Environment<CGFloat?>.Content(v6, v7, v8);
  uint64_t v13 = specialized Environment.wrappedValue.getter(v6, v7 | (v8 << 8));
  char v15 = v14;
  outlined consume of Environment<CGFloat?>.Content(v6, v7, v8);
  if (v15)
  {
    static _GraphInputs.defaultInterfaceIdiom.getter();
    long long v17 = v29;
    long long v34 = v29;
    double v16 = 25.0;
    if ((AnyInterfaceIdiom.accepts<A>(_:)() & 1) == 0)
    {
      long long v34 = v17;
      if (AnyInterfaceIdiom.accepts<A>(_:)()) {
        double v16 = 0.0;
      }
      else {
        double v16 = 70.0;
      }
    }
  }
  else
  {
    double v16 = *(double *)&v13;
  }
  if (v25) {
    double v12 = 0.0;
  }
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v26;
  *(void *)(v18 + 24) = v9;
  *(double *)&long long v29 = v16;
  *((double *)&v29 + 1) = v12;
  uint64_t v30 = v10;
  uint64_t v31 = v11;
  BOOL v32 = partial apply for closure #1 in Gesture<>.callbacks(pressing:pressed:);
  uint64_t v33 = v18;
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v10, v11);
  type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>();
  lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>);
  swift_retain();
  Gesture.cancellable()();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
  MapGesture.init(_:)();
  Swift::UInt v19 = *(void (**)(uint64_t, char *, uint64_t))(v3 + 16);
  long long v26 = v29;
  uint64_t v21 = v27;
  uint64_t v20 = v28;
  v19(v28, v5, v27);
  type metadata accessor for ModifierGesture<MapGesture<LegacyButtonGesture.Value, ()>, <<opaque return type of Gesture.truePreference<A>(_:)>>.0>();
  *(_OWORD *)(v20 + *(int *)(v22 + 52)) = v26;
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v21);
}

uint64_t sub_1881CBB84@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.buttonOutset.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1881CBBC8()
{
  return EnvironmentValues.buttonOutset.setter();
}

unint64_t lazy protocol witness table accessor for type _ButtonGesture and conformance _ButtonGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type _ButtonGesture and conformance _ButtonGesture;
  if (!lazy protocol witness table cache variable for type _ButtonGesture and conformance _ButtonGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ButtonGesture and conformance _ButtonGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ButtonGesture and conformance _ButtonGesture;
  if (!lazy protocol witness table cache variable for type _ButtonGesture and conformance _ButtonGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ButtonGesture and conformance _ButtonGesture);
  }
  return result;
}

uint64_t outlined retain of _ButtonGesture(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v2, v3);
  return a1;
}

uint64_t protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance _ButtonGesture@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v6 = *v1;
  v7[0] = v3;
  *(_OWORD *)((char *)v7 + 9) = *(long long *)((char *)v1 + 25);
  closure #1 in _ButtonGesture.internalBody.getter((uint64_t)&v6, a1);
  *(void *)(a1 + 72) = swift_getKeyPath();
  *(_WORD *)(a1 + 80) = 0;
  long long v4 = v7[0];
  *(_OWORD *)(a1 + 88) = v6;
  *(_OWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 113) = *(_OWORD *)((char *)v7 + 9);
  return outlined retain of _ButtonGesture((uint64_t)&v6);
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance _ButtonGesture()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance _ButtonGesture()
{
}

uint64_t ButtonActionModifier.PlatformAction.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ButtonActionModifier();
  uint64_t Value = AGGraphGetValue();
  long long v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t ButtonActionModifier.PlatformAction.value.getter()
{
  uint64_t v0 = type metadata accessor for ButtonActionModifier();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  long long v3 = (char *)&v7 - v2;
  ButtonActionModifier.PlatformAction.modifier.getter((uint64_t)&v7 - v2);
  uint64_t v4 = *(void *)&v3[*(int *)(v0 + 36)];
  BOOL v5 = *(void (**)(char *, uint64_t))(v1 + 8);
  swift_retain();
  v5(v3, v0);
  return v4;
}

uint64_t protocol witness for Rule.value.getter in conformance ButtonActionModifier<A>.PlatformAction@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t result = ButtonActionModifier.PlatformAction.value.getter();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = v3;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = v4;
    *(void *)(result + 24) = v5;
    long long v6 = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
  }
  else
  {
    long long v6 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)())result;
  return result;
}

uint64_t protocol witness for static PressableEventValue.isPressing(_:) in conformance LegacyButtonGesture.Value(uint64_t a1)
{
  char v1 = *(unsigned char *)(a1 + 24);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 25);
  uint64_t result = 0;
  if (v2 != 3) {
    return v1 & 1;
  }
  return result;
}

uint64_t LegacyButtonGesture.body.getter(double a1, double a2)
{
  type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0(0, &lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0, type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, &lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>, type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int v8 = &v17[-v7];
  type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = swift_allocObject();
  *(double *)(v12 + 16) = a1;
  *(double *)(v12 + 24) = a2;
  uint64_t v18 = partial apply for closure #1 in LegacyButtonGesture.body.getter;
  uint64_t v19 = v12;
  v17[15] = 3;
  type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(0);
  char v14 = v13;
  uint64_t v15 = lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>, type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>);
  Gesture.dependency(_:)();
  swift_release();
  uint64_t v18 = v14;
  uint64_t v19 = v15;
  swift_getOpaqueTypeConformance2();
  Gesture.eventFilter<A>(forType:_:)();
  (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
  lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>);
  Gesture.eventFilter<A>(forType:_:)();
  return outlined destroy of ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>);
}

BOOL closure #1 in closure #1 in LegacyButtonGesture.body.getter(uint64_t a1)
{
  return *(unsigned char *)(a1 + 24) == 0;
}

uint64_t closure #2 in closure #1 in LegacyButtonGesture.body.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  uint64_t v7 = *(void *)result;
  uint64_t v6 = *(void *)(result + 8);
  uint64_t v8 = *(void *)(result + 16);
  uint64_t v9 = *(void *)(result + 24);
  uint64_t v10 = *(void *)(result + 32);
  uint64_t v11 = *(void *)(result + 40);
  uint64_t v13 = *(void *)(result + 48);
  uint64_t v12 = *(void *)(result + 56);
  char v14 = *(unsigned char *)(result + 72);
  switch(v14)
  {
    case 1:
      goto LABEL_4;
    case 2:
      CGFloat v33 = -a3;
      uint64_t v34 = *(void *)result;
      uint64_t v35 = *(void *)(result + 24);
      uint64_t v36 = *(void *)(result + 32);
      uint64_t v37 = *(void *)(result + 40);
      uint64_t v38 = *(void *)(result + 48);
      uint64_t v57 = *(void *)(result + 64);
      swift_retain();
      uint64_t v39 = 0;
      v65.origin.CGFloat x = 0.0;
      v65.origin.CGFloat y = 0.0;
      v65.size.CGFloat width = a4;
      v65.size.CGFloat height = a5;
      CGRect v66 = CGRectInset(v65, v33, v33);
      CGFloat x = v66.origin.x;
      CGFloat y = v66.origin.y;
      CGFloat width = v66.size.width;
      CGFloat height = v66.size.height;
      uint64_t v44 = v6;
      SpatialEvent.location.getter();
      uint64_t v46 = v45;
      uint64_t v48 = v47;
      uint64_t v59 = v6;
      SpatialEvent.location.getter();
      v61.CGFloat x = v49;
      v61.CGFloat y = v50;
      v67.origin.CGFloat x = x;
      v67.origin.CGFloat y = y;
      v67.size.CGFloat width = width;
      v67.size.CGFloat height = height;
      BOOL v51 = CGRectContainsPoint(v67, v61);
      uint64_t result = outlined consume of GesturePhase<SpatialEvent>(v34, v59, v8, v35, v36, v37, v38, v12, v57, 2);
      if (v51)
      {
        char v52 = 2;
        char v53 = 1;
        uint64_t v39 = v46;
        uint64_t v54 = v44;
      }
      else
      {
        uint64_t v54 = 0;
        char v53 = 0;
        char v52 = 3;
        uint64_t v48 = 0;
      }
      *(void *)a2 = v39;
      *(void *)(a2 + 8) = v48;
      *(void *)(a2 + 16) = v54;
      *(unsigned char *)(a2 + 24) = v53;
      *(unsigned char *)(a2 + 25) = v52;
      return result;
    case 3:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      __int16 v17 = 768;
      goto LABEL_9;
    default:
      if (v8 == 1)
      {
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        __int16 v17 = 2;
LABEL_9:
        *(_WORD *)(a2 + 24) = v17;
      }
      else
      {
LABEL_4:
        uint64_t v56 = *(void *)(result + 64);
        CGFloat v18 = -a3;
        outlined copy of GesturePhase<SpatialEvent>(v7, v6, v8, v9, v10, v11, v13, v12, v56, v14);
        uint64_t v19 = 0;
        v62.origin.CGFloat x = 0.0;
        v62.origin.CGFloat y = 0.0;
        v62.size.CGFloat width = a4;
        v62.size.CGFloat height = a5;
        CGRect v63 = CGRectInset(v62, v18, v18);
        CGFloat v20 = v63.origin.x;
        CGFloat v21 = v63.origin.y;
        CGFloat v22 = v63.size.width;
        CGFloat v23 = v63.size.height;
        uint64_t v24 = v6;
        SpatialEvent.location.getter();
        uint64_t v26 = v25;
        uint64_t v28 = v27;
        uint64_t v58 = v6;
        SpatialEvent.location.getter();
        v60.CGFloat x = v29;
        v60.CGFloat y = v30;
        v64.origin.CGFloat x = v20;
        v64.origin.CGFloat y = v21;
        v64.size.CGFloat width = v22;
        v64.size.CGFloat height = v23;
        BOOL v31 = CGRectContainsPoint(v64, v60);
        uint64_t result = outlined consume of GesturePhase<SpatialEvent>(v7, v58, v8, v9, v10, v11, v13, v12, v56, v14);
        if (v31)
        {
          char v32 = 1;
          uint64_t v19 = v26;
        }
        else
        {
          uint64_t v24 = 0;
          char v32 = 2;
          uint64_t v28 = 0;
        }
        *(void *)a2 = v19;
        *(void *)(a2 + 8) = v28;
        *(void *)(a2 + 16) = v24;
        *(unsigned char *)(a2 + 24) = v32;
        *(unsigned char *)(a2 + 25) = 0;
      }
      return result;
  }
}

uint64_t protocol witness for Gesture.body.getter in conformance LegacyButtonGesture()
{
  return LegacyButtonGesture.body.getter(*v0, v0[1]);
}

void (*EnvironmentValues.buttonOutset.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1ED419730, (uint64_t)&protocol witness table for ButtonOutsetKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonOutsetKey>, (uint64_t)&unk_1ED419730, (uint64_t)&protocol witness table for ButtonOutsetKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonOutsetKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v4 = *((unsigned char *)v3 + 24);
  *uint64_t v3 = v3[2];
  *((unsigned char *)v3 + 8) = v4;
  return EnvironmentValues.buttonOutset.modify;
}

_UNKNOWN **base witness table accessor for Gesture in _ButtonGesture()
{
  return &protocol witness table for _ButtonGesture;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in _ButtonGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1881CC89C@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @callee_guaranteed () -> ();
  a2[1] = (uint64_t (*)())v5;

  return swift_retain();
}

uint64_t assignWithTake for _ButtonGesture(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  if (!*(void *)(a1 + 16))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  swift_release();
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

unint64_t lazy protocol witness table accessor for type StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type _MapGesture<PrimitiveButtonGesture, ()> and conformance _MapGesture<A, B>, (void (*)(uint64_t))type metadata accessor for _MapGesture<PrimitiveButtonGesture, ()>);
    lazy protocol witness table accessor for type _ButtonGesture.LegacyBody and conformance _ButtonGesture.LegacyBody();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody>()
{
  if (!lazy cache variable for type metadata for StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody>)
  {
    type metadata accessor for _MapGesture<PrimitiveButtonGesture, ()>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ImprovedButtonGestureFeature, _MapGesture<PrimitiveButtonGesture, ()>, _ButtonGesture.LegacyBody>);
    }
  }
}

void type metadata accessor for _MapGesture<PrimitiveButtonGesture, ()>()
{
  if (!lazy cache variable for type metadata for _MapGesture<PrimitiveButtonGesture, ()>)
  {
    unint64_t v0 = type metadata accessor for _MapGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<PrimitiveButtonGesture, ()>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ButtonGesture.LegacyBody and conformance _ButtonGesture.LegacyBody()
{
  unint64_t result = lazy protocol witness table cache variable for type _ButtonGesture.LegacyBody and conformance _ButtonGesture.LegacyBody;
  if (!lazy protocol witness table cache variable for type _ButtonGesture.LegacyBody and conformance _ButtonGesture.LegacyBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ButtonGesture.LegacyBody and conformance _ButtonGesture.LegacyBody);
  }
  return result;
}

uint64_t sub_1881CCB9C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1881CCC34()
{
  lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<CGFloat?>);
  return swift_getWitnessTable();
}

uint64_t destroy for _ButtonGesture.LegacyBody(uint64_t a1)
{
  outlined consume of Environment<CGFloat?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned char *)(a1 + 9));
  uint64_t result = swift_release();
  if (*(void *)(a1 + 32))
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for _ButtonGesture.LegacyBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v6, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = v5;
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v8;
  swift_retain();
  if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v9;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for _ButtonGesture.LegacyBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v6 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v6, v5);
  uint64_t v7 = *(void *)a1;
  char v8 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = v4;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v7, v9, v8);
  uint64_t v10 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v11)
    {
      uint64_t v13 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v11;
      *(void *)(a1 + 40) = v13;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v11)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v12 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  swift_retain();
  swift_release();
LABEL_8:
  uint64_t v14 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v14;
  return a1;
}

uint64_t assignWithTake for _ButtonGesture.LegacyBody(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 9);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = *(void *)a2;
  uint64_t v8 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v6, v8, v7);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  uint64_t v9 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = v9;
      *(void *)(a1 + 40) = v11;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    goto LABEL_8;
  }
  if (!v9)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = v10;
  swift_release();
LABEL_8:
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ButtonGesture.LegacyBody(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ButtonGesture.LegacyBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for _ButtonGesture.LegacyBody()
{
  return &unk_1ED418AA8;
}

uint64_t outlined destroy of ButtonPressingAction(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for PrimitiveButtonGesture(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 16) != 255)
  {
    int v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 != 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v4 & 1;
      outlined consume of HoverCallback();
      goto LABEL_6;
    }
    outlined destroy of ButtonPressingAction(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
LABEL_6:
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

ValueMetadata *type metadata accessor for ButtonPressingAction()
{
  return &type metadata for ButtonPressingAction;
}

uint64_t getEnumTagSinglePayload for ButtonActionModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1881CD258);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ButtonActionModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1881CD44CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          CGFloat v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *CGFloat v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

void *type metadata accessor for ButtonOutsetKey()
{
  return &unk_1ED419730;
}

_UNKNOWN **base witness table accessor for Gesture in PrimitiveButtonGesture()
{
  return &protocol witness table for PrimitiveButtonGesture;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in _ButtonGesture.LegacyBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PrimitiveButtonGesture.Child.value.getter()
{
  lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>);
  return Gesture.requiredTapCount(_:)();
}

double PrimitiveButtonGesture.Child.effectiveOutset.getter()
{
  type metadata accessor for CGFloat?(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBB718]);
  uint64_t Value = (unsigned char *)AGGraphGetValue();
  if ((Value[8] & 1) == 0) {
    return *(double *)Value;
  }
  char v1 = AnyInterfaceIdiom.accepts<A>(_:)();
  double result = 25.0;
  if ((v1 & 1) == 0)
  {
    char v3 = AnyInterfaceIdiom.accepts<A>(_:)();
    double result = 70.0;
    if (v3) {
      return 0.0;
    }
  }
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PrimitiveButtonGesture.Child@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0();
  char v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

void protocol witness for static Rule.initialValue.getter in conformance PrimitiveButtonGesture.Phase(_WORD *a1@<X8>)
{
  *a1 = -256;
}

uint64_t protocol witness for Rule.value.getter in conformance PrimitiveButtonGesture.Phase()
{
  return GesturePhase.withValue<A>(_:)();
}

void protocol witness for Gesture.body.getter in conformance PrimitiveButtonGesture()
{
}

uint64_t PrimitiveButtonGestureCore.body.getter@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v23[2] = a3;
  type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0(0, &lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0, type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, &lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>, type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unsigned int v11 = (char *)v23 - v10;
  type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>();
  v23[1] = v15;
  MEMORY[0x1F4188790](v15);
  unint64_t v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = swift_allocObject();
  *(double *)(v18 + 16) = a4;
  *(void *)(v18 + 24) = a1;
  *(unsigned char *)(v18 + 32) = a2 & 1;
  uint64_t v25 = partial apply for closure #1 in PrimitiveButtonGestureCore.body.getter;
  uint64_t v26 = v18;
  char v24 = 3;
  type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(0);
  CGFloat v20 = v19;
  uint64_t v21 = lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>, type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>);
  Gesture.dependency(_:)();
  swift_release();
  uint64_t v25 = v20;
  uint64_t v26 = v21;
  swift_getOpaqueTypeConformance2();
  Gesture.eventFilter<A>(forType:_:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>);
  Gesture.eventFilter<A>(forType:_:)();
  outlined destroy of ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>);
  lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>);
  Gesture.cancellable()();
  return outlined destroy of ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>);
}

uint64_t closure #2 in closure #1 in PrimitiveButtonGestureCore.body.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>)
{
  uint64_t v6 = *(void *)result;
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v8 = *(void *)(result + 16);
  uint64_t v7 = *(void *)(result + 24);
  uint64_t v10 = *(void *)(result + 32);
  uint64_t v9 = *(void *)(result + 40);
  uint64_t v12 = *(void *)(result + 48);
  uint64_t v11 = *(void *)(result + 56);
  uint64_t v13 = *(void *)(result + 64);
  switch(*(unsigned char *)(result + 72))
  {
    case 1:
      v40[0] = *(void *)result;
      uint64_t v41 = v5;
      uint64_t v42 = v8;
      char v43 = v7;
      uint64_t v44 = v10;
      uint64_t v45 = v9;
      uint64_t v46 = v12;
      uint64_t v47 = v11;
      uint64_t v48 = v13;
      double result = PrimitiveButtonGestureCore.makeValue(event:size:)((uint64_t)v40, a2, a4, a5, a3);
      *(unsigned char *)(a2 + 25) = 1;
      break;
    case 2:
      v40[0] = *(void *)result;
      uint64_t v41 = v5;
      uint64_t v42 = v8;
      char v43 = v7;
      uint64_t v44 = v10;
      uint64_t v45 = v9;
      uint64_t v46 = v12;
      uint64_t v47 = v11;
      uint64_t v48 = v13;
      swift_retain();
      SpatialEvent.location.getter();
      v49.CGFloat x = v19;
      v49.CGFloat y = v20;
      uint64_t v21 = 0;
      v51.origin.CGFloat x = 0.0;
      v51.origin.CGFloat y = 0.0;
      v51.size.CGFloat width = a4;
      v51.size.CGFloat height = a5;
      if (CGRectContainsPoint(v51, v49))
      {
        unsigned __int8 v39 = 0;
      }
      else
      {
        v52.origin.CGFloat x = 0.0;
        v52.origin.CGFloat y = 0.0;
        v52.size.CGFloat width = a4;
        v52.size.CGFloat height = a5;
        CGRect v53 = CGRectInset(v52, -a3, -a3);
        CGFloat x = v53.origin.x;
        CGFloat y = v53.origin.y;
        CGFloat width = v53.size.width;
        CGFloat height = v53.size.height;
        v40[0] = v6;
        uint64_t v41 = v5;
        uint64_t v42 = v8;
        char v43 = v7;
        uint64_t v44 = v10;
        uint64_t v45 = v9;
        uint64_t v46 = v12;
        uint64_t v47 = v11;
        uint64_t v48 = v13;
        SpatialEvent.location.getter();
        v50.CGFloat x = v26;
        v50.CGFloat y = v27;
        v54.origin.CGFloat x = x;
        v54.origin.CGFloat y = y;
        v54.size.CGFloat width = width;
        v54.size.CGFloat height = height;
        if (CGRectContainsPoint(v54, v50)) {
          char v28 = 1;
        }
        else {
          char v28 = 2;
        }
        unsigned __int8 v39 = v28;
      }
      uint64_t v29 = v11;
      uint64_t v30 = v13;
      uint64_t v38 = v29;
      v40[0] = v6;
      uint64_t v31 = v5;
      uint64_t v41 = v5;
      uint64_t v42 = v8;
      char v43 = v7;
      uint64_t v44 = v10;
      uint64_t v45 = v9;
      uint64_t v46 = v12;
      uint64_t v47 = v29;
      uint64_t v48 = v30;
      SpatialEvent.location.getter();
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      double result = outlined consume of GesturePhase<SpatialEvent>(v6, v5, v8, v7, v10, v9, v12, v38, v30, 2);
      unsigned __int8 v36 = v39;
      if (v39 > 1u)
      {
        uint64_t v31 = 0;
        unsigned __int8 v36 = 0;
        char v37 = 3;
        uint64_t v35 = 0;
      }
      else
      {
        char v37 = 2;
        uint64_t v21 = v33;
      }
      *(void *)a2 = v21;
      *(void *)(a2 + 8) = v35;
      *(void *)(a2 + 16) = v31;
      *(unsigned char *)(a2 + 24) = v36;
      *(unsigned char *)(a2 + 25) = v37;
      break;
    case 3:
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      __int16 v18 = 768;
      goto LABEL_7;
    default:
      if (v8 == 1)
      {
        *(void *)a2 = 0;
        *(void *)(a2 + 8) = 0;
        *(void *)(a2 + 16) = 0;
        __int16 v18 = 3;
LABEL_7:
        *(_WORD *)(a2 + 24) = v18;
      }
      else
      {
        v40[0] = *(void *)result;
        uint64_t v41 = v5;
        uint64_t v42 = v8;
        char v43 = v7;
        uint64_t v44 = v10;
        uint64_t v45 = v9;
        uint64_t v46 = v12;
        uint64_t v47 = v11;
        uint64_t v48 = v13;
        double result = PrimitiveButtonGestureCore.makeValue(event:size:)((uint64_t)v40, a2, a4, a5, a3);
        *(unsigned char *)(a2 + 25) = 0;
      }
      break;
  }
  return result;
}

uint64_t PrimitiveButtonGestureCore.makeValue(event:size:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, double a5@<D2>)
{
  uint64_t v8 = *(void *)(a1 + 8);
  SpatialEvent.location.getter();
  v22.CGFloat x = v9;
  v22.CGFloat y = v10;
  v24.origin.CGFloat x = 0.0;
  v24.origin.CGFloat y = 0.0;
  v24.size.CGFloat width = a3;
  v24.size.CGFloat height = a4;
  if (CGRectContainsPoint(v24, v22))
  {
    char v11 = 0;
  }
  else
  {
    v25.origin.CGFloat x = 0.0;
    v25.origin.CGFloat y = 0.0;
    v25.size.CGFloat width = a3;
    v25.size.CGFloat height = a4;
    CGRect v26 = CGRectInset(v25, -a5, -a5);
    CGFloat x = v26.origin.x;
    CGFloat y = v26.origin.y;
    CGFloat height = v26.size.height;
    CGFloat width = v26.size.width;
    SpatialEvent.location.getter();
    v23.CGFloat x = v14;
    v23.CGFloat y = v15;
    v27.origin.CGFloat x = x;
    v27.origin.CGFloat y = y;
    v27.size.CGFloat height = height;
    v27.size.CGFloat width = width;
    if (CGRectContainsPoint(v27, v23)) {
      char v11 = 1;
    }
    else {
      char v11 = 2;
    }
  }
  uint64_t result = SpatialEvent.location.getter();
  *(void *)a2 = v17;
  *(void *)(a2 + 8) = v18;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = v11;
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance PrimitiveButtonGestureCore@<X0>(uint64_t a1@<X8>)
{
  return PrimitiveButtonGestureCore.body.getter(*(void *)(v1 + 8), *(unsigned char *)(v1 + 16), a1, *(double *)v1);
}

uint64_t (*PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(uint64_t *a1, unsigned char *a2))()
{
  unsigned int v3 = *((unsigned __int8 *)a1 + 24);
  uint64_t v5 = *((unsigned __int8 *)a1 + 25);
  switch(*((unsigned char *)a1 + 25))
  {
    case 1:
      int v6 = *a2;
      if (v3 >= 2)
      {
        if (v6 != 1)
        {
          int v7 = 1;
LABEL_18:
          int v22 = *(unsigned __int8 *)(v2 + 16);
          if (v22 == 255)
          {
LABEL_19:
            uint64_t v5 = 0;
            *a2 = v7;
            return (uint64_t (*)())v5;
          }
          uint64_t v28 = *(void *)v2;
          uint64_t v27 = *(void *)(v2 + 8);
          if (v22)
          {
            if (v6 == v7 || (v6 - 1) < 2) {
              goto LABEL_19;
            }
          }
          else if (v6 == v7)
          {
            goto LABEL_19;
          }
          char v29 = v22 & 1;
          uint64_t v30 = swift_allocObject();
          *(void *)(v30 + 16) = v28;
          *(void *)(v30 + 24) = v27;
          *(unsigned char *)(v30 + 32) = v29;
          *(unsigned char *)(v30 + 33) = v7;
          *a2 = v7;
          outlined copy of HoverCallback();
          return partial apply for closure #4 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:);
        }
      }
      else if (v6 != 2)
      {
        int v7 = 2;
        goto LABEL_18;
      }
      return 0;
    case 2:
      uint64_t v9 = a1[1];
      uint64_t v8 = a1[2];
      uint64_t v10 = *a1;
      outlined init with take of ButtonPressingAction?(v2, (uint64_t)v32);
      outlined init with take of ButtonPressingAction?((uint64_t)v32, (uint64_t)v33);
      unsigned __int8 v11 = v34;
      if (v34 == 255) {
        goto LABEL_6;
      }
      uint64_t v16 = v33[0];
      uint64_t v17 = v33[1];
      int v18 = *a2;
      if (v34)
      {
        if ((v18 - 1) < 2) {
          goto LABEL_21;
        }
      }
      else if (v18 == 2)
      {
LABEL_21:
        uint64_t v23 = swift_allocObject();
        long long v24 = *(_OWORD *)(v2 + 16);
        *(_OWORD *)(v23 + 40) = *(_OWORD *)v2;
        *(void *)(v23 + 16) = v16;
        *(void *)(v23 + 24) = v17;
        *(unsigned char *)(v23 + 32) = v11 & 1;
        *(_OWORD *)(v23 + 56) = v24;
        *(void *)(v23 + 72) = *(void *)(v2 + 32);
        *(void *)(v23 + 80) = v10;
        *(void *)(v23 + 88) = v9;
        *(void *)(v23 + 96) = v8;
        *(unsigned char *)(v23 + 104) = v3;
        *a2 = 0;
        outlined retain of ButtonPressingAction?((uint64_t)v32);
        outlined retain of ButtonPressingAction?((uint64_t)v32);
        swift_retain();
        return partial apply for closure #2 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:);
      }
LABEL_6:
      uint64_t v12 = swift_allocObject();
      long long v13 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v12 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v12 + 32) = v13;
      *(void *)(v12 + 48) = *(void *)(v2 + 32);
      *(void *)(v12 + 56) = v10;
      *(void *)(v12 + 64) = v9;
      *(void *)(v12 + 72) = v8;
      *(unsigned char *)(v12 + 80) = v3;
      *a2 = 0;
      outlined retain of ButtonPressingAction?((uint64_t)v32);
      swift_retain();
      return partial apply for closure #3 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:);
    case 3:
      int v15 = *(unsigned __int8 *)(v2 + 16);
      if (v15 == 255) {
        goto LABEL_8;
      }
      uint64_t v20 = *(void *)v2;
      uint64_t v19 = *(void *)(v2 + 8);
      int v21 = *a2;
      if (v15)
      {
        if ((v21 - 1) < 2) {
          goto LABEL_23;
        }
      }
      else if (v21 == 2)
      {
LABEL_23:
        char v25 = v15 & 1;
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 16) = v20;
        *(void *)(v26 + 24) = v19;
        *(unsigned char *)(v26 + 32) = v25;
        *a2 = 0;
        outlined copy of HoverCallback();
        return partial apply for closure #1 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:);
      }
LABEL_8:
      uint64_t v5 = 0;
      *a2 = 0;
      return (uint64_t (*)())v5;
    default:
      return (uint64_t (*)())v5;
  }
}

uint64_t closure #2 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(void (*a1)(void), double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void, void, void))(a6 + 24))(*(void *)&a2, *(void *)&a3, 0);
}

uint64_t closure #4 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(void (*a1)(BOOL), uint64_t a2, char a3, BOOL a4)
{
  BOOL v4 = a4;
  if (a3) {
    BOOL v4 = (a4 - 1) < 2u;
  }
  swift_retain();
  a1(v4);

  return outlined consume of HoverCallback();
}

uint64_t closure #1 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(void (*a1)(void))
{
  swift_retain();
  a1(0);

  return outlined consume of HoverCallback();
}

uint64_t (*protocol witness for GestureCallbacks.dispatch(phase:state:) in conformance PrimitiveButtonGestureCallbacks(uint64_t *a1, unsigned char *a2))()
{
  return PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(a1, a2);
}

uint64_t (*protocol witness for GestureCallbacks.cancel(state:) in conformance PrimitiveButtonGestureCallbacks(unsigned __int8 *a1))()
{
  int v2 = *((unsigned __int8 *)v1 + 16);
  if (v2 == 255) {
    return 0;
  }
  int v3 = *a1;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  if (v2)
  {
    if ((v3 - 1) > 1) {
      return 0;
    }
  }
  else if (v3 != 2)
  {
    return 0;
  }
  char v7 = v2 & 1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v4;
  *(void *)(v8 + 24) = v5;
  *(unsigned char *)(v8 + 32) = v7;
  outlined copy of HoverCallback();
  return partial apply for closure #1 in PrimitiveButtonGestureCallbacks.cancel(state:);
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonGesture.Child and conformance PrimitiveButtonGesture.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonGesture.Child and conformance PrimitiveButtonGesture.Child;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonGesture.Child and conformance PrimitiveButtonGesture.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonGesture.Child and conformance PrimitiveButtonGesture.Child);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonGesture.Phase and conformance PrimitiveButtonGesture.Phase()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonGesture.Phase and conformance PrimitiveButtonGesture.Phase;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonGesture.Phase and conformance PrimitiveButtonGesture.Phase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonGesture.Phase and conformance PrimitiveButtonGesture.Phase);
  }
  return result;
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>)
  {
    type metadata accessor for CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>> and conformance CallbacksGesture<A>, (void (*)(uint64_t))type metadata accessor for CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>);
    lazy protocol witness table accessor for type LegacyButtonGesture and conformance LegacyButtonGesture();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>);
    }
  }
}

void type metadata accessor for CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>()
{
  if (!lazy cache variable for type metadata for CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>)
  {
    _s7SwiftUI16CallbacksGestureVyAA015PrimitiveButtondC033_2218E1141B3D7C3A65B6697591AFB638LLVGMaTm_0(255, &lazy cache variable for type metadata for PressableGestureCallbacks<LegacyButtonGesture.Value>, (uint64_t (*)(void))lazy protocol witness table accessor for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value, (uint64_t)&unk_1ED42C5D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PressableGestureCallbacks);
    lazy protocol witness table accessor for type PressableGestureCallbacks<LegacyButtonGesture.Value> and conformance PressableGestureCallbacks<A>();
    unint64_t v0 = type metadata accessor for CallbacksGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>);
    }
  }
}

void _s7SwiftUI16CallbacksGestureVyAA015PrimitiveButtondC033_2218E1141B3D7C3A65B6697591AFB638LLVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value()
{
  unint64_t result = lazy protocol witness table cache variable for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value;
  if (!lazy protocol witness table cache variable for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value;
  if (!lazy protocol witness table cache variable for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PressableGestureCallbacks<LegacyButtonGesture.Value> and conformance PressableGestureCallbacks<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PressableGestureCallbacks<LegacyButtonGesture.Value> and conformance PressableGestureCallbacks<A>;
  if (!lazy protocol witness table cache variable for type PressableGestureCallbacks<LegacyButtonGesture.Value> and conformance PressableGestureCallbacks<A>)
  {
    _s7SwiftUI16CallbacksGestureVyAA015PrimitiveButtondC033_2218E1141B3D7C3A65B6697591AFB638LLVGMaTm_0(255, &lazy cache variable for type metadata for PressableGestureCallbacks<LegacyButtonGesture.Value>, (uint64_t (*)(void))lazy protocol witness table accessor for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value, (uint64_t)&unk_1ED42C5D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PressableGestureCallbacks);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PressableGestureCallbacks<LegacyButtonGesture.Value> and conformance PressableGestureCallbacks<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LegacyButtonGesture and conformance LegacyButtonGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type LegacyButtonGesture and conformance LegacyButtonGesture;
  if (!lazy protocol witness table cache variable for type LegacyButtonGesture and conformance LegacyButtonGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LegacyButtonGesture and conformance LegacyButtonGesture);
  }
  return result;
}

uint64_t sub_1881CEA1C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

void type metadata accessor for ModifierGesture<MapGesture<LegacyButtonGesture.Value, ()>, <<opaque return type of Gesture.truePreference<A>(_:)>>.0>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<LegacyButtonGesture.Value, ()>, <<opaque return type of Gesture.truePreference<A>(_:)>>.0>)
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(255, &lazy cache variable for type metadata for MapGesture<LegacyButtonGesture.Value, ()>, (uint64_t)&unk_1ED42C5D8, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F3F370]);
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0();
    lazy protocol witness table accessor for type MapGesture<LegacyButtonGesture.Value, ()> and conformance MapGesture<A, B>();
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<LegacyButtonGesture.Value, ()>, <<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<LegacyButtonGesture.Value, ()> and conformance MapGesture<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type MapGesture<LegacyButtonGesture.Value, ()> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<LegacyButtonGesture.Value, ()> and conformance MapGesture<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(255, &lazy cache variable for type metadata for MapGesture<LegacyButtonGesture.Value, ()>, (uint64_t)&unk_1ED42C5D8, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F3F370]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<LegacyButtonGesture.Value, ()> and conformance MapGesture<A, B>);
  }
  return result;
}

uint64_t specialized static LegacyButtonGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2
    && *(double *)(a1 + 8) == *(double *)(a2 + 8)
    && *(double *)(a1 + 16) == *(double *)(a2 + 16))
  {
    return (*(unsigned __int8 *)(a2 + 24) ^ *(unsigned __int8 *)(a1 + 24) ^ 1) & 1;
  }
  else
  {
    return 0;
  }
}

BOOL specialized static PrimitiveButtonGestureCore.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24);
}

uint64_t type metadata accessor for ButtonActionModifier.PlatformAction()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1881CECC0()
{
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in _ButtonGesture.internalBody.getter(uint64_t a1, uint64_t a2, char a3)
{
  return closure #2 in closure #1 in _ButtonGesture.internalBody.getter(a1, a2, a3 & 1, v3 + 16);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in _ButtonGesture.internalBody.getter(char a1)
{
  return closure #1 in closure #1 in closure #1 in _ButtonGesture.internalBody.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in _ButtonGesture.internalBody.getter()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(unsigned __int8 *)(v0 + 32));
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in _ButtonGesture.internalBody.getter()
{
  return (**(uint64_t (***)(void))(v0 + 16))();
}

void *type metadata accessor for PrimitiveButtonGesture.Phase()
{
  return &unk_1ED43AAC8;
}

uint64_t getEnumTagSinglePayload for PrimitiveButtonGestureCore.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PrimitiveButtonGestureCore.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PrimitiveButtonGestureCore.Value()
{
  return &type metadata for PrimitiveButtonGestureCore.Value;
}

void *type metadata accessor for PrimitiveButtonGesture.Child()
{
  return &unk_1ED473F80;
}

ValueMetadata *type metadata accessor for PrimitiveButtonGestureCore()
{
  return &type metadata for PrimitiveButtonGestureCore;
}

uint64_t initializeWithCopy for PrimitiveButtonGestureCallbacks(uint64_t a1, uint64_t *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (v4 == 255)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  }
  else
  {
    char v5 = v4 & 1;
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    outlined copy of HoverCallback();
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = v5;
  }
  uint64_t v8 = a2[4];
  *(void *)(a1 + 24) = a2[3];
  *(void *)(a1 + 32) = v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PrimitiveButtonGestureCallbacks(uint64_t a1, long long *a2)
{
  int v4 = *((unsigned __int8 *)a2 + 16);
  if (*(unsigned __int8 *)(a1 + 16) == 255)
  {
    if (v4 == 255)
    {
      long long v6 = *a2;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = v6;
    }
    else
    {
      char v10 = v4 & 1;
      uint64_t v11 = *(void *)a2;
      uint64_t v12 = *((void *)a2 + 1);
      outlined copy of HoverCallback();
      *(void *)a1 = v11;
      *(void *)(a1 + 8) = v12;
      *(unsigned char *)(a1 + 16) = v10;
    }
  }
  else if (v4 == 255)
  {
    outlined destroy of ButtonPressingAction(a1);
    char v5 = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = *a2;
    *(unsigned char *)(a1 + 16) = v5;
  }
  else
  {
    char v7 = v4 & 1;
    uint64_t v8 = *(void *)a2;
    uint64_t v9 = *((void *)a2 + 1);
    outlined copy of HoverCallback();
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 16) = v7;
    outlined consume of HoverCallback();
  }
  uint64_t v13 = *((void *)a2 + 4);
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = v13;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PrimitiveButtonGestureCallbacks(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 16) != 255)
  {
    int v4 = *(unsigned __int8 *)(a2 + 16);
    if (v4 != 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = v4 & 1;
      outlined consume of HoverCallback();
      goto LABEL_6;
    }
    outlined destroy of ButtonPressingAction(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
LABEL_6:
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PrimitiveButtonGestureCallbacks()
{
  return &type metadata for PrimitiveButtonGestureCallbacks;
}

void *type metadata accessor for LegacyButtonGesture()
{
  return &unk_1ED42C660;
}

uint64_t getEnumTagSinglePayload for LegacyButtonGesture.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LegacyButtonGesture.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for LegacyButtonGesture.Value()
{
  return &unk_1ED42C5D8;
}

unsigned char *storeEnumTagSinglePayload for ButtonPressPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881CF1E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ButtonPressPhase()
{
  return &type metadata for ButtonPressPhase;
}

uint64_t sub_1881CF220()
{
  return lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type _MapGesture<<<opaque return type of Gesture.truePreference<A>(_:)>>.0, ()> and conformance _MapGesture<A, B>, (void (*)(uint64_t))type metadata accessor for _MapGesture<<<opaque return type of Gesture.truePreference<A>(_:)>>.0, ()>);
}

void type metadata accessor for _MapGesture<<<opaque return type of Gesture.truePreference<A>(_:)>>.0, ()>()
{
  if (!lazy cache variable for type metadata for _MapGesture<<<opaque return type of Gesture.truePreference<A>(_:)>>.0, ()>)
  {
    type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0();
    type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<LegacyButtonGesture.Value>>, LegacyButtonGesture>);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for _MapGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<<<opaque return type of Gesture.truePreference<A>(_:)>>.0, ()>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ButtonPressPhase and conformance ButtonPressPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonPressPhase and conformance ButtonPressPhase;
  if (!lazy protocol witness table cache variable for type ButtonPressPhase and conformance ButtonPressPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonPressPhase and conformance ButtonPressPhase);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ButtonActionModifier<A>.PlatformAction()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in LegacyButtonGesture()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for LegacyButtonGesture.Value(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LegacyButtonGesture.Value and conformance LegacyButtonGesture.Value();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in PrimitiveButtonGestureCore()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1881CF48C()
{
  return objectdestroy_91Tm();
}

uint64_t partial apply for closure #1 in PrimitiveButtonGestureCallbacks.cancel(state:)()
{
  return closure #1 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(*(void (**)(void))(v0 + 16));
}

uint64_t sub_1881CF4B4()
{
  return objectdestroy_91Tm();
}

uint64_t partial apply for closure #4 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)()
{
  return closure #4 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(*(void (**)(BOOL))(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32), *(unsigned __int8 *)(v0 + 33));
}

uint64_t outlined init with take of ButtonPressingAction?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CGFloat?(0, &lazy cache variable for type metadata for ButtonPressingAction?, (uint64_t)&type metadata for ButtonPressingAction, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1881CF554()
{
  if (*(unsigned __int8 *)(v0 + 32) != 255) {
    outlined consume of HoverCallback();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)()
{
  return (*(uint64_t (**)(void, void, void))(v0 + 40))(*(void *)(v0 + 56), *(void *)(v0 + 64), 0);
}

uint64_t outlined retain of ButtonPressingAction?(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of ButtonPressingAction?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined copy of HoverCallback();
  }
  return result;
}

uint64_t sub_1881CF620()
{
  outlined consume of HoverCallback();
  if (*(unsigned __int8 *)(v0 + 56) != 255) {
    outlined consume of HoverCallback();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)()
{
  return closure #2 in PrimitiveButtonGestureCallbacks.dispatch(phase:state:)(*(void (**)(void))(v0 + 16), *(double *)(v0 + 80), *(double *)(v0 + 88), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), v0 + 40);
}

uint64_t sub_1881CF698()
{
  return objectdestroy_91Tm();
}

uint64_t objectdestroy_91Tm()
{
  outlined consume of HoverCallback();

  return swift_deallocObject();
}

void type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(uint64_t a1)
{
}

void type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(a4, a5);
    unint64_t v8 = type metadata accessor for SizeGesture();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>(uint64_t a1)
{
}

void type metadata accessor for ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>)
  {
    uint64_t v0 = MEMORY[0x1E4F3F638];
    type metadata accessor for CGFloat?(255, &lazy cache variable for type metadata for DelayedGesture<SpatialEvent>, MEMORY[0x1E4F3F638], MEMORY[0x1E4F3F928]);
    type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(255, (unint64_t *)&lazy cache variable for type metadata for EventListener<SpatialEvent>, v0, MEMORY[0x1E4F3F630], MEMORY[0x1E4F3F758]);
    lazy protocol witness table accessor for type DelayedGesture<SpatialEvent> and conformance DelayedGesture<A>();
    lazy protocol witness table accessor for type EventListener<SpatialEvent> and conformance EventListener<A>();
    unint64_t v1 = type metadata accessor for ModifierGesture();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DelayedGesture<SpatialEvent> and conformance DelayedGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DelayedGesture<SpatialEvent> and conformance DelayedGesture<A>;
  if (!lazy protocol witness table cache variable for type DelayedGesture<SpatialEvent> and conformance DelayedGesture<A>)
  {
    type metadata accessor for CGFloat?(255, &lazy cache variable for type metadata for DelayedGesture<SpatialEvent>, MEMORY[0x1E4F3F638], MEMORY[0x1E4F3F928]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DelayedGesture<SpatialEvent> and conformance DelayedGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value> and conformance MapGesture<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value> and conformance MapGesture<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(255, &lazy cache variable for type metadata for MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, MEMORY[0x1E4F3F638], (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value, MEMORY[0x1E4F3F370]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value> and conformance MapGesture<A, B>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>)
  {
    type metadata accessor for CGFloat?(255, &lazy cache variable for type metadata for EventFilter<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value, MEMORY[0x1E4F3F4E8]);
    type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0(255, &lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0, type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, &lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>, type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>);
    lazy protocol witness table accessor for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type EventFilter<PrimitiveButtonGestureCore.Value> and conformance EventFilter<A>, &lazy cache variable for type metadata for EventFilter<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value);
    type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(255);
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>, type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CGFloat?(255, a2, a3, MEMORY[0x1E4F3F4E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>)
  {
    type metadata accessor for CGFloat?(255, &lazy cache variable for type metadata for EventFilter<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value, MEMORY[0x1E4F3F4E8]);
    type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>();
    lazy protocol witness table accessor for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type EventFilter<PrimitiveButtonGestureCore.Value> and conformance EventFilter<A>, &lazy cache variable for type metadata for EventFilter<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value);
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>);
    }
  }
}

uint64_t sub_1881CFC8C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PrimitiveButtonGestureCore.body.getter@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v7 = *(void *)(v3 + 16);
  double v8 = *(double *)(v3 + 24);
  int v9 = *(unsigned __int8 *)(v3 + 32);
  if (v9) {
    double v10 = 0.012;
  }
  else {
    double v10 = v8;
  }
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v7;
  *(double *)(result + 24) = v8;
  *(unsigned char *)(result + 32) = v9;
  *(double *)(result + 40) = a2;
  *(double *)(result + 48) = a3;
  *(unsigned char *)a1 = 0;
  *(double *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = closure #1 in closure #1 in PrimitiveButtonGestureCore.body.getter;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = partial apply for closure #2 in closure #1 in PrimitiveButtonGestureCore.body.getter;
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t sub_1881CFD50()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in PrimitiveButtonGestureCore.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in closure #1 in PrimitiveButtonGestureCore.body.getter(a1, a2, v2[2], v2[5], v2[6]);
}

void type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(a4, a5);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v9) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(uint64_t a1)
{
}

void type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>(uint64_t a1)
{
}

void type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, PrimitiveButtonGestureCore.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, void (*a5)(void))
{
  if (!*a2)
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(255, a3, MEMORY[0x1E4F3F638], a4, MEMORY[0x1E4F3F370]);
    type metadata accessor for ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>();
    a5();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>);
    unint64_t v7 = type metadata accessor for ModifierGesture();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<SpatialEvent, LegacyButtonGesture.Value> and conformance MapGesture<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type MapGesture<SpatialEvent, LegacyButtonGesture.Value> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<SpatialEvent, LegacyButtonGesture.Value> and conformance MapGesture<A, B>)
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonOutsetKey>(255, &lazy cache variable for type metadata for MapGesture<SpatialEvent, LegacyButtonGesture.Value>, MEMORY[0x1E4F3F638], (uint64_t)&unk_1ED42C5D8, MEMORY[0x1E4F3F370]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<SpatialEvent, LegacyButtonGesture.Value> and conformance MapGesture<A, B>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>)
  {
    type metadata accessor for CGFloat?(255, &lazy cache variable for type metadata for EventFilter<LegacyButtonGesture.Value>, (uint64_t)&unk_1ED42C5D8, MEMORY[0x1E4F3F4E8]);
    type metadata accessor for <<opaque return type of Gesture.dependency(_:)>>.0(255, &lazy cache variable for type metadata for <<opaque return type of Gesture.dependency(_:)>>.0, type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>, &lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>, type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>);
    lazy protocol witness table accessor for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>, &lazy cache variable for type metadata for EventFilter<LegacyButtonGesture.Value>, (uint64_t)&unk_1ED42C5D8);
    type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>(255);
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>> and conformance SizeGesture<A>, type metadata accessor for SizeGesture<ModifierGesture<MapGesture<SpatialEvent, LegacyButtonGesture.Value>, ModifierGesture<DelayedGesture<SpatialEvent>, EventListener<SpatialEvent>>>>);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>);
    }
  }
}

void type metadata accessor for CGFloat?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1881D01B0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LegacyButtonGesture.body.getter@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v7;
  *(void *)(result + 24) = v8;
  *(double *)(result + 32) = a2;
  *(double *)(result + 40) = a3;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = closure #1 in closure #1 in LegacyButtonGesture.body.getter;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = partial apply for closure #2 in closure #1 in LegacyButtonGesture.body.getter;
  *(void *)(a1 + 40) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1881D0290()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in LegacyButtonGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in closure #1 in LegacyButtonGesture.body.getter(a1, a2, v2[2], v2[4], v2[5]);
}

uint64_t sub_1881D02AC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_1881D02E4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ButtonActionModifier() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 34) & ~v2), v1);
  swift_release();

  return swift_deallocObject();
}

unsigned char *storeEnumTagSinglePayload for PrimitiveButtonGestureCore.LocationInBounds(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881D04A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for PrimitiveButtonGestureCore.LocationInBounds()
{
  return &unk_1ED44BF20;
}

uint64_t sub_1881D04DC()
{
  type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>();
  lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, ModifierGesture<EventFilter<PrimitiveButtonGestureCore.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>);
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1881D0578()
{
  return lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>);
}

void type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>)
  {
    type metadata accessor for CGFloat?(255, &lazy cache variable for type metadata for EventFilter<LegacyButtonGesture.Value>, (uint64_t)&unk_1ED42C5D8, MEMORY[0x1E4F3F4E8]);
    type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>();
    lazy protocol witness table accessor for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>(&lazy protocol witness table cache variable for type EventFilter<LegacyButtonGesture.Value> and conformance EventFilter<A>, &lazy cache variable for type metadata for EventFilter<LegacyButtonGesture.Value>, (uint64_t)&unk_1ED42C5D8);
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<LegacyButtonGesture.Value>, ModifierGesture<EventFilter<LegacyButtonGesture.Value>, <<opaque return type of Gesture.dependency(_:)>>.0>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonGestureCore.LocationInBounds and conformance PrimitiveButtonGestureCore.LocationInBounds()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonGestureCore.LocationInBounds and conformance PrimitiveButtonGestureCore.LocationInBounds;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonGestureCore.LocationInBounds and conformance PrimitiveButtonGestureCore.LocationInBounds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonGestureCore.LocationInBounds and conformance PrimitiveButtonGestureCore.LocationInBounds);
  }
  return result;
}

uint64_t closure #1 in UIKitSearchFieldAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = type metadata accessor for KitRepresentable(0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(a2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  outlined init with take of Binding<(TextSelection?, VersionSeed)>(a1 + 24, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for PlatformItem.PrimaryContent?);
  outlined init with take of Binding<(TextSelection?, VersionSeed)>((uint64_t)v18, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlatformItem.PrimaryContent?);
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)v19) != 1)
  {
    if (v19[0])
    {
      id v14 = objc_msgSend(v19[0], sel_string);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v13 = v15;
    }
    else
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
    }
  }
  outlined init with take of Binding<(TextSelection?, VersionSeed)>((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  uint64_t v16 = (uint64_t *)&v11[*(int *)(v9 + 20)];
  *uint64_t v16 = v12;
  v16[1] = v13;
  return outlined init with take of Binding<(TextSelection?, VersionSeed)>((uint64_t)v11, a3, type metadata accessor for KitRepresentable);
}

uint64_t protocol witness for View.body.getter in conformance UIKitSearchFieldAdaptor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](a1 - 8);
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(v2, (uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for UIKitSearchFieldAdaptor);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  outlined init with take of Binding<(TextSelection?, VersionSeed)>((uint64_t)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6, type metadata accessor for UIKitSearchFieldAdaptor);
  swift_retain();
  uint64_t v8 = static Alignment.center.getter();
  uint64_t v10 = v9;
  uint64_t v11 = v2 + *(int *)(type metadata accessor for SearchFieldConfiguration(0) + 32);
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  char v14 = *(unsigned char *)(v11 + 16);
  uint64_t v15 = *(void *)(v11 + 24);
  outlined copy of Text.Storage(*(void *)v11, v13, v14);
  swift_bridgeObjectRetain();
  uint64_t result = swift_release();
  *(void *)a2 = partial apply for closure #1 in UIKitSearchFieldAdaptor.body.getter;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = v12;
  *(void *)(a2 + 40) = v13;
  *(unsigned char *)(a2 + 48) = v14;
  *(void *)(a2 + 56) = v15;
  return result;
}

id KitRepresentable.makeUIView(context:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C00]), sel_init);
  objc_msgSend(v2, sel_setDelegate_, v1);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_textDidChange_, 0x20000);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_editingDidBegin_, 0x10000);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_editingDidEnd_, 0x40000);
  return v2;
}

void KitRepresentable.updateUIView(_:context:)(id a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for (TextSelection?, VersionSeed)();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v85 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TextSelection?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v89 = (uint64_t)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v97 = (uint64_t)&v85 - v12;
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v90 = *(void *)(v13 - 8);
  uint64_t v91 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v96 = (uint64_t)&v85 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v87 = type metadata accessor for SearchEnvironmentProperties(0);
  MEMORY[0x1F4188790](v87);
  uint64_t v88 = (uint64_t)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>?(0);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v100 = (uint64_t)&v85 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v99 = (char *)&v85 - v19;
  uint64_t v20 = type metadata accessor for AttributedString();
  uint64_t v93 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  int v22 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(void *)(a2 + 16);
  uint64_t v27 = *(void *)(a2 + 24);
  char v29 = *(void **)(a2 + 40);
  BOOL v30 = *(unsigned char *)(a2 + 32) == 1;
  id v101 = a1;
  uint64_t v86 = v7;
  uint64_t v94 = v20;
  uint64_t v98 = v24;
  if (v30)
  {
    uint64_t v95 = &v85;
    MEMORY[0x1F4188790](v24);
    *(&v85 - 2) = (char *)__ROR8__(v28, 32);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v28, v27, 1);
    id v31 = v29;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v28, v27, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v28, v27, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v28, v27, 1);

    a1 = v101;
    uint64_t v28 = v102;
    uint64_t v27 = v103;
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  uint64_t v32 = v29;
  specialized UIKitTextInput.update(in:)(v28, v27);
  specialized UIKitTextInputTraits.updateTraits(in:)(v28, v27);
  specialized UITextInputTraits_Private.updatePrivateTraits(in:)(v28, v27);
  uint64_t v92 = v32;
  uint64_t v95 = (char **)OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_isViewUpdating;
  v32[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_isViewUpdating] = 1;
  uint64_t v33 = (uint64_t *)(v3 + *(int *)(type metadata accessor for KitRepresentable(0) + 20));
  uint64_t v34 = v33[1];
  if (!v34) {
    goto LABEL_10;
  }
  uint64_t v35 = *v33;
  id v36 = objc_msgSend(a1, sel_placeholder);
  if (v36)
  {
    char v37 = v36;
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v39;

    if (v38 == v35 && v34 == v40)
    {
      swift_bridgeObjectRelease();
      a1 = v101;
LABEL_10:
      objc_msgSend(a1, sel_setPlaceholder_, 0);
      goto LABEL_12;
    }
    char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    a1 = v101;
    if (v41) {
      goto LABEL_10;
    }
  }
  uint64_t v42 = (void *)MEMORY[0x18C115780](v35, v34);
  objc_msgSend(a1, sel_setPlaceholder_, v42);

LABEL_12:
  uint64_t v44 = v93;
  uint64_t v43 = v94;
  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x18C113DA0]();
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v22, &v26[*(int *)(v98 + 36)], v43);
  String.init(_:)();
  uint64_t v102 = v28;
  uint64_t v103 = v27;
  uint64_t v104 = 0;
  uint64_t v105 = 0;
  default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  uint64_t v45 = (void *)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  swift_bridgeObjectRelease();
  uint64_t v46 = (uint64_t)v99;
  if (v45)
  {
    id v47 = objc_msgSend(a1, sel_attributedText);
    if (!v47) {
      goto LABEL_15;
    }
    uint64_t v48 = v47;
    type metadata accessor for NSAttributedString();
    id v49 = v45;
    id v50 = v48;
    LOBYTE(v48) = static NSObject.== infix(_:_:)();

    a1 = v101;
    if ((v48 & 1) == 0) {
LABEL_15:
    }
      objc_msgSend(a1, sel_setAttributedText_, v45);
  }
  _ss8RangeSetVySS5IndexVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchStorage, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchStorage, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v27)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  uint64_t v51 = v91;
  CGRect v52 = v92;
  swift_release_n();
  if (v102)
  {
    uint64_t v53 = v88;
    SearchEnvironmentStorage.properties.getter(v88);
    swift_release();
    outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(v53 + *(int *)(v87 + 24), v46, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>?);
    outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v53, type metadata accessor for SearchEnvironmentProperties);
    uint64_t v54 = v90;
  }
  else
  {
    uint64_t v54 = v90;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v90 + 56))(v46, 1, 1, v51);
  }
  uint64_t v55 = (uint64_t)&v52[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_selection];
  swift_beginAccess();
  outlined assign with take of Binding<(TextSelection?, VersionSeed)>?(v46, v55);
  swift_endAccess();
  uint64_t v56 = v55;
  uint64_t v57 = v100;
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(v56, v100, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v57, 1, v51) != 1)
  {
    outlined init with take of Binding<(TextSelection?, VersionSeed)>(v57, v96, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
    uint64_t v60 = (uint64_t)v85;
    MEMORY[0x18C113DA0](v51);
    int v61 = *(_DWORD *)(v60 + *(int *)(v86 + 48));
    uint64_t v62 = v97;
    outlined init with take of Binding<(TextSelection?, VersionSeed)>(v60, v97, (uint64_t (*)(void))type metadata accessor for TextSelection?);
    uint64_t v63 = v62;
    uint64_t v64 = v89;
    outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(v63, v89, (uint64_t (*)(void))type metadata accessor for TextSelection?);
    uint64_t v65 = type metadata accessor for TextSelection(0);
    char v66 = 1;
    int v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 48))(v64, 1, v65);
    uint64_t v68 = (uint64_t (*)(void))type metadata accessor for TextSelection?;
    if (v67 == 1)
    {
      uint64_t v69 = 0;
      uint64_t v70 = 0;
    }
    else
    {
      uint64_t v71 = TextSelection.range.getter();
      uint64_t v64 = v89;
      uint64_t v69 = v71;
      uint64_t v70 = v72;
      char v66 = v73 & 1;
      uint64_t v68 = type metadata accessor for TextSelection;
    }
    outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v64, v68);
    if (v61 == -1) {
      goto LABEL_41;
    }
    int v74 = *(_DWORD *)&v52[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_expectedSelectionVersion];
    if (v74 == -1 || v61 != v74) {
      goto LABEL_41;
    }
    uint64_t v75 = UITextField.uiSelectedRange.getter();
    if (v66)
    {
      if (v77)
      {
LABEL_41:
        swift_release();
        swift_release();
        outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v97, (uint64_t (*)(void))type metadata accessor for TextSelection?);
        uint64_t v58 = type metadata accessor for Binding<(TextSelection?, VersionSeed)>;
        uint64_t v59 = v96;
        goto LABEL_42;
      }
    }
    else if ((v77 & 1) == 0 && !((v75 ^ (unint64_t)v69) >> 14) && (v76 ^ (unint64_t)v70) < 0x4000)
    {
      goto LABEL_41;
    }
    id v78 = objc_msgSend(v101, sel_text);
    if (v78)
    {
      uint64_t v79 = v78;
      uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v82 = v81;

      if (v66)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v102 = v69;
        uint64_t v103 = v70;
        uint64_t v104 = v80;
        uint64_t v105 = v82;
        _ss8RangeSetVySS5IndexVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Range<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBB6A0]);
        lazy protocol witness table accessor for type Range<String.Index> and conformance Range<A>();
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v83 = _NSRange.init<A, B>(_:in:)();
        objc_msgSend(v101, sel_setSelectionRange_, v83, v84);
      }
    }
    goto LABEL_41;
  }
  swift_release();
  swift_release();
  uint64_t v58 = type metadata accessor for Binding<(TextSelection?, VersionSeed)>?;
  uint64_t v59 = v57;
LABEL_42:
  outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v59, (uint64_t (*)(void))v58);
  *((unsigned char *)v95 + (void)v52) = 0;
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance KitRepresentable@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(v2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  uint64_t v7 = (objc_class *)type metadata accessor for Coordinator(0);
  uint64_t v8 = objc_allocWithZone(v7);
  v8[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_isViewUpdating] = 0;
  uint64_t v9 = &v8[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_selection];
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_DWORD *)&v8[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_expectedSelectionVersion] = 0;
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v6, (uint64_t)&v8[OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_state], (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  v13.receiver = v8;
  v13.super_class = v7;
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  uint64_t result = outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  *a1 = v11;
  return result;
}

double protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance KitRepresentable(uint64_t a1, id a2)
{
  objc_msgSend(a2, sel_sizeThatFits_, *MEMORY[0x1E4FB2C68], *(double *)(MEMORY[0x1E4FB2C68] + 8));
  static _LayoutTraits.Dimension.fixed(_:)();
  double result = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(double *)(a1 + 40) = v5;
  return result;
}

void Coordinator.textDidChange(_:)(void *a1)
{
  uint64_t v21 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v21);
  long long v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for AttributeContainer();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v20 - v11;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v14 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_isViewUpdating) & 1) == 0)
  {
    outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(v1 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_state, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
    id v17 = objc_msgSend(a1, sel_text);
    if (v17)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v4;

      long long v4 = v20;
    }
    AttributeContainer.init()();
    AttributedString.init(_:attributes:)();
    MEMORY[0x18C113DA0](v14);
    uint64_t v18 = &v4[*(int *)(v21 + 36)];
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v18, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v18, v12, v6);
    SearchFieldState.textDidChange(from:)();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19(v12, v6);
    v19(v9, v6);
    dispatch thunk of AnyLocation.set(_:transaction:)();
    outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v4, type metadata accessor for SearchFieldState);
    outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  }
}

uint64_t closure #1 in Coordinator.editingDidBegin(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v2);
  long long v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (unsigned __int8 *)&v18 - v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (unsigned __int8 *)&v18 - v9;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(a1 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_state, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  MEMORY[0x18C113DA0](v12);
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v10, (uint64_t)v7, type metadata accessor for SearchFieldState);
  if ((*v7 & 1) == 0)
  {
    int v15 = v7[2];
    outlined init with copy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v7, (uint64_t)v4, type metadata accessor for SearchFieldState);
    if (v15 == 2)
    {
      int v15 = v4[3];
      outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v4, type metadata accessor for SearchFieldState);
      if (v15 == 2)
      {
        unsigned __int8 v16 = 0;
LABEL_7:
        *uint64_t v7 = v16;
        v7[*(int *)(v2 + 40)] = 1;
        goto LABEL_8;
      }
    }
    else
    {
      outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v4, type metadata accessor for SearchFieldState);
    }
    unsigned __int8 v16 = v15 & 1;
    goto LABEL_7;
  }
LABEL_8:
  if ((specialized static SearchFieldState.== infix(_:_:)(v10, v7) & 1) == 0) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v7, type metadata accessor for SearchFieldState);
  outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v10, type metadata accessor for SearchFieldState);
  return outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
}

uint64_t closure #1 in Coordinator.editingDidEnd(_:)(uint64_t a1)
{
  uint64_t v45 = a1;
  uint64_t v1 = type metadata accessor for AttributedString.CharacterView();
  uint64_t v46 = *(void *)(v1 - 8);
  uint64_t v47 = v1;
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v40 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v40 - v9;
  uint64_t v11 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v11);
  uint64_t v44 = (uint64_t)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)&v40 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (unsigned __int8 *)&v40 - v17;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v20 = v19;
  MEMORY[0x1F4188790](v19);
  int v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(v45 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_state, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  uint64_t v40 = v22;
  MEMORY[0x18C113DA0](v20);
  char v41 = v18;
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v18, (uint64_t)v15, type metadata accessor for SearchFieldState);
  *int v15 = 2;
  AttributedString.init(stringLiteral:)();
  uint64_t v42 = v11;
  uint64_t v23 = &v15[*(int *)(v11 + 36)];
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v23, v4);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v5 + 24);
  uint64_t v45 = v4;
  v24(v23, v10, v4);
  uint64_t v43 = v7;
  AttributedString.characters.getter();
  uint64_t v25 = AttributedString.CharacterView._count.getter();
  uint64_t v26 = v47;
  uint64_t v27 = *(void (**)(char *, uint64_t))(v46 + 8);
  v27(v3, v47);
  AttributedString.characters.getter();
  uint64_t v28 = AttributedString.CharacterView._count.getter();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v27)(v3, v26);
  uint64_t v30 = v28 - v25;
  if (__OFSUB__(v28, v25))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    return result;
  }
  uint64_t v31 = v44;
  if (v30 < 0)
  {
    BOOL v32 = __OFSUB__(0, v30);
    uint64_t v30 = v25 - v28;
    if (v32) {
      goto LABEL_19;
    }
  }
  if (v30 != 1 || v28 < 1 || *v15 == 2) {
    goto LABEL_11;
  }
  int v33 = v15[2];
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v15, v44, type metadata accessor for SearchFieldState);
  if (v33 == 2)
  {
    int v34 = *(unsigned __int8 *)(v31 + 3);
    outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v31, type metadata accessor for SearchFieldState);
    if (v34 == 2 || (v34 & 1) == 0) {
      goto LABEL_11;
    }
  }
  else
  {
    outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v31, type metadata accessor for SearchFieldState);
    if ((v33 & 1) == 0) {
      goto LABEL_11;
    }
  }
  *int v15 = 1;
LABEL_11:
  uint64_t v35 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v36 = v45;
  v35(v10, v45);
  v35(v43, v36);
  if ((v15[8] & 1) == 0)
  {
    *((_DWORD *)v15 + 1) = 0;
    v15[8] = 1;
  }
  char v37 = v41;
  v15[*(int *)(v42 + 40)] = 0;
  char v38 = specialized static SearchFieldState.== infix(_:_:)(v37, (unsigned __int8 *)v15);
  uint64_t v39 = (uint64_t)v40;
  if ((v38 & 1) == 0) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v15, type metadata accessor for SearchFieldState);
  outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v37, type metadata accessor for SearchFieldState);
  return outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v39, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
}

uint64_t ObjC metadata update function for Coordinator()
{
  return type metadata accessor for Coordinator(0);
}

uint64_t type metadata accessor for Coordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for Coordinator);
}

void type metadata completion function for Coordinator()
{
  type metadata accessor for Binding<SearchFieldState>(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<(TextSelection?, VersionSeed)>?(319);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t Coordinator.textFieldDidChangeSelection(_:)(uint64_t a1)
{
  uint64_t v66 = a1;
  type metadata accessor for TextSelection?(0);
  uint64_t v60 = *(void *)(v2 - 8);
  uint64_t v3 = *(void *)(v60 + 64);
  MEMORY[0x1F4188790](v2 - 8);
  int v61 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v62 = (uint64_t *)((char *)&v56 - v5);
  uint64_t v6 = type metadata accessor for TextSelection(0);
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v63 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (TextSelection?, VersionSeed)();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>?(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  MEMORY[0x1F4188790](v14);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v56 - v19;
  uint64_t v21 = v1 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_selection;
  swift_beginAccess();
  uint64_t v22 = v21;
  uint64_t v23 = v16;
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(v22, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) == 1)
  {
    uint64_t v24 = type metadata accessor for Binding<(TextSelection?, VersionSeed)>?;
    uint64_t v25 = (uint64_t)v13;
    return outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v25, (uint64_t (*)(void))v24);
  }
  uint64_t v26 = (uint64_t)v63;
  uint64_t v56 = v23;
  uint64_t v57 = v17;
  uint64_t v58 = (uint64_t)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = v1;
  outlined init with take of Binding<(TextSelection?, VersionSeed)>((uint64_t)v13, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
  MEMORY[0x18C113DA0](v15);
  uint64_t v27 = v64;
  uint64_t v28 = v20;
  uint64_t v29 = v65;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v10, 1, v65))
  {
    outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (TextSelection?, VersionSeed));
    UITextField.uiSelectedRange.getter();
    if ((v30 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_10:
    uint64_t v24 = type metadata accessor for Binding<(TextSelection?, VersionSeed)>;
    uint64_t v25 = (uint64_t)v28;
    return outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v25, (uint64_t (*)(void))v24);
  }
  uint64_t v31 = v28;
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v10, v26, type metadata accessor for TextSelection);
  outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (TextSelection?, VersionSeed));
  uint64_t v32 = TextSelection.range.getter();
  unint64_t v34 = v33;
  char v36 = v35;
  outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v26, type metadata accessor for TextSelection);
  uint64_t v37 = UITextField.uiSelectedRange.getter();
  if (v36)
  {
    uint64_t v28 = v31;
    if (v39) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v28 = v31;
    if ((v39 & 1) == 0 && !((v37 ^ (unint64_t)v32) >> 14) && (v38 ^ v34) < 0x4000) {
      goto LABEL_10;
    }
  }
LABEL_12:
  uint64_t v40 = (uint64_t)v28;
  uint64_t v41 = UITextField.uiSelectedRange.getter();
  if (v43)
  {
    uint64_t v45 = 1;
    uint64_t v44 = (uint64_t)v62;
  }
  else
  {
    uint64_t v44 = (uint64_t)v62;
    *uint64_t v62 = v41;
    *(void *)(v44 + 8) = v42;
    type metadata accessor for TextSelection.Indices(0);
    swift_storeEnumTagMultiPayload();
    uint64_t v45 = 0;
    *(unsigned char *)(v44 + *(int *)(v29 + 20)) = 0;
  }
  uint64_t v46 = v60;
  uint64_t v47 = (uint64_t)v61;
  uint64_t v48 = v59;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v44, v45, 1, v29);
  int v49 = *(_DWORD *)(v48
                  + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_expectedSelectionVersion)
      + 1;
  *(_DWORD *)(v48 + OBJC_IVAR____TtC7SwiftUIP33_87E15EBB5C00F49DEF8C638A73559D9211Coordinator_expectedSelectionVersion) = v49;
  uint64_t v50 = v40;
  uint64_t v51 = v58;
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(v40, v58, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(v44, v47, (uint64_t (*)(void))type metadata accessor for TextSelection?);
  unint64_t v52 = (*(unsigned __int8 *)(v56 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  unint64_t v53 = (v57 + *(unsigned __int8 *)(v46 + 80) + v52) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  uint64_t v54 = swift_allocObject();
  outlined init with take of Binding<(TextSelection?, VersionSeed)>(v51, v54 + v52, (uint64_t (*)(void))type metadata accessor for Binding<(TextSelection?, VersionSeed)>);
  outlined init with take of Binding<(TextSelection?, VersionSeed)>(v47, v54 + v53, (uint64_t (*)(void))type metadata accessor for TextSelection?);
  *(_DWORD *)(v54 + ((v3 + v53 + 3) & 0xFFFFFFFFFFFFFFFCLL)) = v49;
  static Update.enqueueAction(_:)();
  swift_release();
  outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v44, (uint64_t (*)(void))type metadata accessor for TextSelection?);
  uint64_t v24 = type metadata accessor for Binding<(TextSelection?, VersionSeed)>;
  uint64_t v25 = v50;
  return outlined destroy of Binding<(TextSelection?, VersionSeed)>?(v25, (uint64_t (*)(void))v24);
}

uint64_t closure #2 in Coordinator.textFieldDidChangeSelection(_:)(uint64_t a1, uint64_t a2, int a3)
{
  type metadata accessor for (TextSelection?, VersionSeed)();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(int *)(v8 + 56);
  outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(a2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for TextSelection?);
  *(_DWORD *)&v7[v9] = a3;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  return outlined destroy of Binding<(TextSelection?, VersionSeed)>?((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for (TextSelection?, VersionSeed));
}

uint64_t sub_1881D2DB8()
{
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  uint64_t v2 = v1 - 8;
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  type metadata accessor for TextSelection?(0);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  swift_release();
  swift_release();
  unint64_t v7 = v0 + v3 + *(int *)(v2 + 40);
  uint64_t v8 = type metadata accessor for TextSelection(0);
  uint64_t v9 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
  if (!v9(v7, 1, v8))
  {
    type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _ss8RangeSetVySS5IndexVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v7, v10);
    }
  }
  if (!v9(v0 + v6, 1, v8))
  {
    type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      _ss8RangeSetVySS5IndexVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v0 + v6, v11);
    }
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Coordinator.textFieldDidChangeSelection(_:)()
{
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>(0);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  type metadata accessor for TextSelection?(0);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (v2 + v3 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  int v7 = *(_DWORD *)(v0 + ((*(void *)(v5 + 64) + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL));

  return closure #2 in Coordinator.textFieldDidChangeSelection(_:)(v0 + v2, v0 + v6, v7);
}

uint64_t partial apply for closure #1 in Coordinator.editingDidEnd(_:)()
{
  return closure #1 in Coordinator.editingDidEnd(_:)(*(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in Coordinator.editingDidBegin(_:)()
{
  return closure #1 in Coordinator.editingDidBegin(_:)(*(void *)(v0 + 16));
}

void *initializeBufferWithCopyOfBuffer for UIKitSearchFieldAdaptor(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (void *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int v7 = (int *)v4;
    a1[1] = a2[1];
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *uint64_t v10 = *((unsigned char *)a2 + v9);
    v10[1] = *((unsigned char *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    uint64_t v12 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v13 = v12[9];
    uint64_t v32 = &v11[v13];
    unint64_t v33 = &v10[v13];
    uint64_t v14 = type metadata accessor for AttributedString();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v33, v32, v14);
    v10[v12[10]] = v11[v12[10]];
    uint64_t v16 = v12[11];
    uint64_t v17 = &v10[v16];
    uint64_t v18 = &v11[v16];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
    uint64_t v19 = v7[6];
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    int v22 = v21[8];
    if (v22 == 255)
    {
      *(void *)uint64_t v20 = *(void *)v21;
      v20[8] = v21[8];
    }
    else
    {
      char v23 = v22 & 1;
      uint64_t v24 = *(void *)v21;
      outlined copy of PlatformItemCollection.Storage(*(void *)v21, v22 & 1);
      *(void *)uint64_t v20 = v24;
      v20[8] = v23;
    }
    *((unsigned char *)a1 + v7[7]) = *((unsigned char *)a2 + v7[7]);
    uint64_t v25 = v7[8];
    uint64_t v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = *(void *)((char *)a2 + v25);
    uint64_t v29 = *((void *)v27 + 1);
    char v30 = v27[16];
    outlined copy of Text.Storage(v28, v29, v30);
    *(void *)uint64_t v26 = v28;
    *((void *)v26 + 1) = v29;
    v26[16] = v30;
    *((void *)v26 + 3) = *((void *)v27 + 3);
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *initializeWithCopy for UIKitSearchFieldAdaptor(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v6 = *(int *)(v5 + 32);
  int v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *int v7 = *((unsigned char *)a2 + v6);
  v7[1] = *((unsigned char *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  v7[8] = *((unsigned char *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9[9];
  uint64_t v31 = &v7[v10];
  uint64_t v11 = &v8[v10];
  uint64_t v12 = type metadata accessor for AttributedString();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_retain();
  swift_retain();
  v13(v31, v11, v12);
  v7[v9[10]] = v8[v9[10]];
  uint64_t v14 = v9[11];
  uint64_t v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  v15[4] = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  uint64_t v17 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v18 = v17[6];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  int v21 = v20[8];
  if (v21 == 255)
  {
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
  }
  else
  {
    char v22 = v21 & 1;
    uint64_t v23 = *(void *)v20;
    outlined copy of PlatformItemCollection.Storage(*(void *)v20, v21 & 1);
    *(void *)uint64_t v19 = v23;
    v19[8] = v22;
  }
  *((unsigned char *)a1 + v17[7]) = *((unsigned char *)a2 + v17[7]);
  uint64_t v24 = v17[8];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)((char *)a2 + v24);
  uint64_t v28 = *((void *)v26 + 1);
  char v29 = v26[16];
  outlined copy of Text.Storage(v27, v28, v29);
  *(void *)uint64_t v25 = v27;
  *((void *)v25 + 1) = v28;
  v25[16] = v29;
  *((void *)v25 + 3) = *((void *)v26 + 3);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithTake for UIKitSearchFieldAdaptor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  int v7 = (char *)a2 + v5;
  *uint64_t v6 = *((unsigned char *)a2 + v5);
  v6[1] = *((unsigned char *)a2 + v5 + 1);
  *((_WORD *)v6 + 1) = *(_WORD *)((char *)a2 + v5 + 2);
  v6[8] = *((unsigned char *)a2 + v5 + 8);
  *((_DWORD *)v6 + 1) = *(_DWORD *)((char *)a2 + v5 + 4);
  uint64_t v8 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v9 = v8[9];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  v6[v8[10]] = v7[v8[10]];
  uint64_t v13 = v8[11];
  uint64_t v14 = &v6[v13];
  uint64_t v15 = &v7[v13];
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  uint64_t v16 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v17 = v16[6];
  uint64_t v18 = (uint64_t)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  int v20 = *((unsigned __int8 *)a1 + v17 + 8);
  if (v20 != 255)
  {
    int v21 = v19[8];
    if (v21 != 255)
    {
      uint64_t v22 = *(void *)v18;
      *(void *)uint64_t v18 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v21 & 1;
      outlined consume of PlatformItemCollection.Storage(v22, v20 & 1);
      goto LABEL_6;
    }
    outlined destroy of PlatformItemCollection(v18);
  }
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v19[8];
LABEL_6:
  *((unsigned char *)a1 + v16[7]) = *((unsigned char *)a2 + v16[7]);
  uint64_t v23 = v16[8];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  LOBYTE(v23) = v25[16];
  uint64_t v26 = *(void *)v24;
  uint64_t v27 = *((void *)v24 + 1);
  char v28 = v24[16];
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  v24[16] = v23;
  outlined consume of Text.Storage(v26, v27, v28);
  *((void *)v24 + 3) = *((void *)v25 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitSearchFieldAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1881D3708);
}

uint64_t sub_1881D3708(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UIKitSearchFieldAdaptor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1881D3788);
}

uint64_t sub_1881D3788(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UIKitSearchFieldAdaptor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitSearchFieldAdaptor);
}

uint64_t associated type witness table accessor for View.Body : View in UIKitSearchFieldAdaptor()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of Binding<(TextSelection?, VersionSeed)>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1881D389C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UIKitSearchFieldAdaptor(0) - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  swift_release();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v4 = *(int *)(v3 + 32);
  uint64_t v5 = v2 + v4 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  uint64_t v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v8 = v2 + *(int *)(v7 + 24);
  int v9 = *(unsigned __int8 *)(v8 + 8);
  if (v9 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v8, v9 & 1);
  }
  outlined consume of Text.Storage(*(void *)(v2 + *(int *)(v7 + 32)), *(void *)(v2 + *(int *)(v7 + 32) + 8), *(unsigned char *)(v2 + *(int *)(v7 + 32) + 16));
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIKitSearchFieldAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for UIKitSearchFieldAdaptor(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in UIKitSearchFieldAdaptor.body.getter(a1, v6, a2);
}

uint64_t type metadata accessor for KitRepresentable(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for KitRepresentable);
}

uint64_t outlined init with take of Binding<(TextSelection?, VersionSeed)>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *initializeBufferWithCopyOfBuffer for KitRepresentable(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)v7 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *uint64_t v10 = *((unsigned char *)a2 + v9);
    v10[1] = *((unsigned char *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    uint64_t v12 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v13 = v12[9];
    uint64_t v24 = &v11[v13];
    uint64_t v25 = &v10[v13];
    uint64_t v14 = type metadata accessor for AttributedString();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v25, v24, v14);
    v10[v12[10]] = v11[v12[10]];
    uint64_t v16 = v12[11];
    uint64_t v17 = &v10[v16];
    uint64_t v18 = &v11[v16];
    v17[4] = v18[4];
    *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
    uint64_t v19 = *(int *)(a3 + 20);
    int v20 = (void *)((char *)v7 + v19);
    int v21 = (void *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *int v20 = *v21;
    v20[1] = v22;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for KitRepresentable(uint64_t a1)
{
  swift_release();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v3 = a1 + *(int *)(v2 + 32);
  uint64_t v4 = v3 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  uint64_t v5 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for KitRepresentable(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  _WORD v8[8] = *((unsigned char *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v23 = &v8[v11];
  uint64_t v12 = &v9[v11];
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  v14(v23, v12, v13);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  v16[4] = v17[4];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (void *)((char *)a1 + v18);
  int v20 = (void *)((char *)a2 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for KitRepresentable(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  void v8[2] = *((unsigned char *)a2 + v7 + 2);
  v8[3] = *((unsigned char *)a2 + v7 + 3);
  LODWORD(v7) = *(_DWORD *)((char *)a2 + v7 + 4);
  _WORD v8[8] = v9[8];
  *((_DWORD *)v8 + 1) = v7;
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (void *)((char *)a1 + v18);
  int v20 = (void *)((char *)a2 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for KitRepresentable(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  *uint64_t v9 = *((unsigned char *)a2 + v8);
  v9[1] = *((unsigned char *)a2 + v8 + 1);
  *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
  v9[8] = *((unsigned char *)a2 + v8 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
  uint64_t v11 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v12 = v11[9];
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  v9[v11[10]] = v10[v11[10]];
  uint64_t v16 = v11[11];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  v17[4] = v18[4];
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for KitRepresentable(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  _WORD v8[8] = *((unsigned char *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  v16[4] = v17[4];
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (void *)((char *)a1 + v18);
  int v20 = (void *)((char *)a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for KitRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1881D4248);
}

uint64_t sub_1881D4248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for KitRepresentable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1881D432C);
}

void sub_1881D432C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
}

void type metadata completion function for KitRepresentable()
{
  type metadata accessor for Binding<SearchFieldState>(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

_UNKNOWN **sub_1881D4480()
{
  return &protocol witness table for PlatformItemsReader<A, B, C>;
}

uint64_t outlined assign with take of Binding<(TextSelection?, VersionSeed)>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<(TextSelection?, VersionSeed)>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Binding<(TextSelection?, VersionSeed)>?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in PhysicalButtonPressGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t View.onPhysicalButtonPress(_:perform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  outlined copy of AppIntentExecutor?(a2);
  lazy protocol witness table accessor for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture();
  Gesture.onEnded(_:)();
  swift_release();
  type metadata accessor for _EndedGesture<PhysicalButtonPressGesture>();
  _s7SwiftUI13_EndedGestureVyAA019PhysicalButtonPressD0VGACyxGAA0D0AAWlTm_0(&lazy protocol witness table cache variable for type _EndedGesture<PhysicalButtonPressGesture> and conformance _EndedGesture<A>, (void (*)(uint64_t))type metadata accessor for _EndedGesture<PhysicalButtonPressGesture>);
  View.gesture<A>(_:including:)();
  return swift_release();
}

uint64_t closure #1 in PhysicalButtonPressGesture.body.getter@<X0>(uint64_t result@<X0>, __int16 a2@<W1>, char *a3@<X8>)
{
  char v3 = *(unsigned char *)(result + 25);
  char v4 = 10;
  switch(v3)
  {
    case 1:
      switch(*(unsigned char *)(result + 24))
      {
        case 1:
          if ((a2 & 2) == 0) {
            goto LABEL_25;
          }
          char v4 = 1;
          char v3 = 1;
          break;
        case 2:
          if ((a2 & 4) == 0) {
            goto LABEL_25;
          }
          char v3 = 1;
          char v4 = 2;
          break;
        case 3:
          if ((a2 & 8) == 0) {
            goto LABEL_25;
          }
          char v3 = 1;
          char v4 = 3;
          break;
        case 4:
          if ((a2 & 0x10) == 0) {
            goto LABEL_25;
          }
          char v3 = 1;
          char v4 = 4;
          break;
        case 5:
          if ((a2 & 0x20) == 0) {
            goto LABEL_25;
          }
          char v3 = 1;
          char v4 = 5;
          break;
        case 6:
          if ((a2 & 0x40) == 0) {
            goto LABEL_25;
          }
          char v3 = 1;
          char v4 = 6;
          break;
        case 7:
          if ((a2 & 0x80) == 0) {
            goto LABEL_25;
          }
          char v3 = 1;
          char v4 = 7;
          break;
        case 8:
          if ((a2 & 0x100) == 0) {
            goto LABEL_25;
          }
          char v3 = 1;
          char v4 = 8;
          break;
        case 9:
          if ((a2 & 0x200) == 0) {
            goto LABEL_25;
          }
          char v3 = 1;
          char v4 = 9;
          break;
        default:
          if (a2)
          {
            char v4 = 0;
            char v3 = 1;
          }
          else
          {
LABEL_25:
            char v3 = 0;
          }
          break;
      }
      break;
    case 2:
      switch(*(unsigned char *)(result + 24))
      {
        case 1:
          if ((a2 & 2) == 0) {
            goto LABEL_43;
          }
          char v3 = 2;
          char v4 = 1;
          break;
        case 2:
          if ((a2 & 4) == 0) {
            goto LABEL_43;
          }
          char v4 = 2;
          char v3 = 2;
          break;
        case 3:
          if ((a2 & 8) == 0) {
            goto LABEL_43;
          }
          char v3 = 2;
          char v4 = 3;
          break;
        case 4:
          if ((a2 & 0x10) == 0) {
            goto LABEL_43;
          }
          char v3 = 2;
          char v4 = 4;
          break;
        case 5:
          if ((a2 & 0x20) == 0) {
            goto LABEL_43;
          }
          char v3 = 2;
          char v4 = 5;
          break;
        case 6:
          if ((a2 & 0x40) == 0) {
            goto LABEL_43;
          }
          char v3 = 2;
          char v4 = 6;
          break;
        case 7:
          if ((a2 & 0x80) == 0) {
            goto LABEL_43;
          }
          char v3 = 2;
          char v4 = 7;
          break;
        case 8:
          if ((a2 & 0x100) == 0) {
            goto LABEL_43;
          }
          char v3 = 2;
          char v4 = 8;
          break;
        case 9:
          if ((a2 & 0x200) == 0) {
            goto LABEL_43;
          }
          char v3 = 2;
          char v4 = 9;
          break;
        default:
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          char v4 = 0;
          char v3 = 2;
          break;
      }
      break;
    case 3:
LABEL_43:
      char v4 = 0;
      char v3 = 3;
      break;
    default:
      break;
  }
  *a3 = v4;
  a3[1] = v3;
  return result;
}

BOOL PhysicalButtonPressGesture.AllowedButtonTypes.insert(_:)(unsigned char *a1, char *a2)
{
  char v3 = *a2;
  uint64_t v4 = qword_1883D7198[*a2];
  uint64_t v5 = *v2 & v4;
  if (!v5) {
    *v2 |= v4;
  }
  *a1 = v3;
  return v5 == 0;
}

char *PhysicalButtonPressGesture.AllowedButtonTypes.remove(_:)@<X0>(char *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = qword_1883D7198[v3];
  if ((*v2 & v4) == 0) {
    LOBYTE(v3) = 10;
  }
  *v2 &= ~v4;
  *a2 = v3;
  return result;
}

char *PhysicalButtonPressGesture.AllowedButtonTypes.update(with:)@<X0>(char *result@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = qword_1883D7198[v3];
  uint64_t v5 = *v2;
  *v2 |= v4;
  if ((v5 & v4) == 0) {
    LOBYTE(v3) = 10;
  }
  *a2 = v3;
  return result;
}

BOOL protocol witness for SetAlgebra.contains(_:) in conformance PhysicalButtonPressGesture.AllowedButtonTypes(char *a1)
{
  return (qword_1883D7198[*a1] & *v1) != 0;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance PhysicalButtonPressGesture.AllowedButtonTypes@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = specialized SetAlgebra<>.init(arrayLiteral:)(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance PhysicalButtonPressGesture()
{
  uint64_t v1 = *v0;
  *(void *)(swift_allocObject() + 16) = v1;
  type metadata accessor for ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>>();
  _s7SwiftUI13_EndedGestureVyAA019PhysicalButtonPressD0VGACyxGAA0D0AAWlTm_0(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>>);
  Gesture.dependency(_:)();
  return swift_release();
}

uint64_t sub_1881D4ACC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PhysicalButtonPressGesture.body.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in PhysicalButtonPressGesture.body.getter(a1, *(void *)(v2 + 16), a2);
}

void type metadata accessor for ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>>)
  {
    type metadata accessor for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>(255, &lazy cache variable for type metadata for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, MEMORY[0x1E4F40468], MEMORY[0x1E4F3F370]);
    type metadata accessor for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>(255, &lazy cache variable for type metadata for EventListener<PhysicalButtonEvent>, MEMORY[0x1E4F40478], MEMORY[0x1E4F3F758]);
    lazy protocol witness table accessor for type MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType> and conformance MapGesture<A, B>();
    lazy protocol witness table accessor for type EventListener<PhysicalButtonEvent> and conformance EventListener<A>();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, EventListener<PhysicalButtonEvent>>);
    }
  }
}

void type metadata accessor for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, MEMORY[0x1E4F40480]);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType> and conformance MapGesture<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType> and conformance MapGesture<A, B>)
  {
    type metadata accessor for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>(255, &lazy cache variable for type metadata for MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType>, MEMORY[0x1E4F40468], MEMORY[0x1E4F3F370]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<PhysicalButtonEvent, PhysicalButtonEvent.ButtonType> and conformance MapGesture<A, B>);
  }
  return result;
}

uint64_t sub_1881D4C84()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for PhysicalButtonPressGesture.AllowedButtonTypes()
{
  return &type metadata for PhysicalButtonPressGesture.AllowedButtonTypes;
}

uint64_t sub_1881D4CD4()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes;
  if (!lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes;
  if (!lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes;
  if (!lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes;
  if (!lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonPressGesture.AllowedButtonTypes and conformance PhysicalButtonPressGesture.AllowedButtonTypes);
  }
  return result;
}

uint64_t TemporalStack.init(states:alignment:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7, a1, a6);
  uint64_t result = type metadata accessor for TemporalStack();
  uint64_t v13 = (void *)(a7 + *(int *)(result + 68));
  *uint64_t v13 = a2;
  v13[1] = a3;
  uint64_t v14 = (void *)(a7 + *(int *)(result + 72));
  *uint64_t v14 = a4;
  v14[1] = a5;
  return result;
}

uint64_t type metadata accessor for TemporalStack()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for TemporalStateViewModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TemporalStateViewModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881D5324);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for TemporalStateViewModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for TemporalStack()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TemporalStack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unsigned int v10 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    int v11 = (_OWORD *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v10 = *v11;
    unsigned int v12 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = v12[1];
    unsigned int v14 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v14 = *v12;
    v14[1] = v13;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TemporalStack(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t initializeWithCopy for TemporalStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TemporalStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  uint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TemporalStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  v7[1] = v8[1];
  *(_OWORD *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TemporalStack(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1881D58D0);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for TemporalStack(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1881D5AE0);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

_UNKNOWN **base witness table accessor for View in TemporalStack<A, B>()
{
  return &protocol witness table for TemporalStack<A, B>;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance TemporalStack<A, B>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  return static TemporalStack._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a3 + 48), *(void *)(a3 + 56), a4);
}

uint64_t static TemporalStack._makeView(view:inputs:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, unint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  unint64_t v118 = a7;
  uint64_t v119 = a8;
  uint64_t v110 = a4;
  unint64_t v111 = a6;
  uint64_t v107 = a5;
  uint64_t v99 = a3;
  uint64_t v92 = a9;
  uint64_t v159 = *MEMORY[0x1E4F143B8];
  LODWORD(v98) = *a1;
  unint64_t v9 = *(void *)a2;
  LODWORD(v122) = *(_DWORD *)(a2 + 8);
  unint64_t v10 = *(void *)(a2 + 16);
  unsigned int v11 = *(_DWORD *)(a2 + 24);
  unsigned int v12 = *(_DWORD *)(a2 + 28);
  unsigned int v13 = *(_DWORD *)(a2 + 36);
  unsigned int v116 = *(_DWORD *)(a2 + 32);
  unsigned int v117 = v12;
  unint64_t v14 = *(void *)(a2 + 48);
  unint64_t v108 = *(void *)(a2 + 40);
  uint64_t v109 = v10;
  unsigned int v15 = *(_DWORD *)(a2 + 56);
  unsigned int v113 = *(_DWORD *)(a2 + 60);
  unsigned int v114 = v11;
  unsigned int v16 = *(_DWORD *)(a2 + 68);
  unsigned int v112 = *(_DWORD *)(a2 + 64);
  unsigned int v18 = *(_DWORD *)(a2 + 72);
  unsigned int v17 = *(_DWORD *)(a2 + 76);
  unsigned int v19 = *(_DWORD *)(a2 + 80);
  unint64_t v132 = v14;
  LODWORD(v133) = v15;
  uint64_t v148 = v9;
  unint64_t v150 = v10;
  unsigned int v149 = v122;
  unint64_t v151 = __PAIR64__(v12, v11);
  unint64_t v152 = __PAIR64__(v13, v116);
  unint64_t v153 = v108;
  unint64_t v154 = v14;
  unint64_t v155 = __PAIR64__(v113, v15);
  unint64_t v156 = __PAIR64__(v16, v112);
  unint64_t v157 = __PAIR64__(v17, v18);
  unsigned int v158 = v19;
  unsigned int v106 = v13;
  unint64_t v115 = v14;
  unint64_t v105 = v9;
  unsigned int v103 = v16;
  unsigned int v104 = v15;
  unsigned int v101 = v17;
  unsigned int v102 = v18;
  unsigned int v100 = v19;
  unsigned int v97 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v97)
  {
    unint64_t v132 = v9;
    LODWORD(v133) = v122;
    uint64_t v134 = v109;
    unint64_t v135 = __PAIR64__(v117, v114);
    unint64_t v136 = __PAIR64__(v13, v116);
    unint64_t v137 = v108;
    unint64_t v138 = v14;
    unint64_t v139 = __PAIR64__(v113, v15);
    unint64_t v140 = __PAIR64__(v16, v112);
    unint64_t v141 = __PAIR64__(v17, v18);
    LODWORD(v142) = v19;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _ViewInputs.animatedPosition()();
    _ViewInputs.containerPosition.setter();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  LODWORD(v126) = v98;
  uint64_t v20 = v99;
  unint64_t v132 = v99;
  unint64_t v133 = v110;
  uint64_t v134 = v107;
  unint64_t v135 = v111;
  unint64_t v136 = v118;
  unint64_t v137 = v119;
  type metadata accessor for TemporalStack();
  v91[1] = type metadata accessor for _GraphValue();
  unsigned int v121 = _GraphValue.value.getter();
  unsigned int v94 = v149;
  unsigned int v95 = v158;
  uint64_t AssociatedTypeWitness = v148;
  swift_retain();
  unint64_t v96 = v150;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = default argument 3 of TemporalStackChildren.init(view:inputs:childGeometries:children:nextID:)();
  id v22 = (id)AGSubgraphGetCurrent();
  if (!v22) {
    goto LABEL_21;
  }
  uint64_t v93 = v91;
  LODWORD(v132) = v121;
  int v23 = *MEMORY[0x1E4F4E7A0];
  unint64_t v133 = AssociatedTypeWitness;
  LODWORD(v134) = v94;
  unint64_t v135 = v96;
  unint64_t v136 = v151;
  unint64_t v137 = v152;
  unint64_t v138 = v153;
  unint64_t v139 = v154;
  unint64_t v140 = v155;
  unint64_t v141 = v156;
  unint64_t v142 = v157;
  unsigned int v143 = v95;
  int v144 = v23;
  id v145 = v22;
  uint64_t v146 = v21;
  int v147 = 0;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = v107;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for TemporalStackChild();
  v90[2] = type metadata accessor for Array();
  uint64_t v126 = v20;
  uint64_t v127 = v110;
  uint64_t v128 = v24;
  unint64_t v129 = v111;
  uint64_t v25 = v119;
  unint64_t v130 = v118;
  uint64_t v131 = v119;
  uint64_t v26 = type metadata accessor for TemporalStackChildren();
  v90[3] = v26;
  v90[4] = swift_getWitnessTable();
  uint64_t v27 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v132, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v90, v26, MEMORY[0x1E4FBC248], v27, MEMORY[0x1E4FBC278], v28);
  char v29 = v145;
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unsigned int v30 = v126;
  _ViewOutputs.init()();
  uint64_t v31 = v118;
  unsigned int v121 = v30;
  unint64_t v96 = v26;
  if (v97)
  {
    _DisplayList_Identity.init()();
    unsigned int v97 = v132;
    unint64_t v132 = v105;
    LODWORD(v133) = v122;
    unint64_t v32 = v108;
    uint64_t v134 = v109;
    uint64_t v33 = v109;
    unint64_t v135 = __PAIR64__(v117, v114);
    unsigned int v34 = v114;
    unsigned int v35 = v117;
    unint64_t v136 = __PAIR64__(v106, v116);
    unsigned int v36 = v116;
    unint64_t v137 = v108;
    unint64_t v138 = v115;
    unint64_t v139 = __PAIR64__(v113, v104);
    unint64_t v140 = __PAIR64__(v103, v112);
    unsigned int v37 = v101;
    unint64_t v141 = __PAIR64__(v101, v102);
    LODWORD(v142) = v100;
    LODWORD(v124) = v97;
    _ViewInputs.pushIdentity(_:)();
    unint64_t v38 = v105;
    unint64_t v132 = v105;
    LODWORD(v133) = v122;
    uint64_t v134 = v33;
    unint64_t v135 = __PAIR64__(v35, v34);
    unint64_t v136 = __PAIR64__(v106, v36);
    unsigned int v39 = v106;
    unint64_t v40 = v115;
    unint64_t v137 = v32;
    unint64_t v138 = v115;
    LODWORD(v32) = v104;
    unint64_t v139 = __PAIR64__(v113, v104);
    unsigned int v41 = v112;
    unint64_t v140 = __PAIR64__(v103, v112);
    unsigned int v42 = v102;
    unint64_t v141 = __PAIR64__(v37, v102);
    unsigned int v43 = v100;
    LODWORD(v142) = v100;
    unsigned int v95 = _ViewInputs.animatedSize()();
    unint64_t v132 = v38;
    LODWORD(v133) = v122;
    uint64_t v44 = v109;
    uint64_t v134 = v109;
    unint64_t v135 = __PAIR64__(v117, v114);
    unint64_t v136 = __PAIR64__(v39, v116);
    unint64_t v45 = v108;
    unint64_t v137 = v108;
    unint64_t v138 = v40;
    unint64_t v139 = __PAIR64__(v113, v32);
    LODWORD(v32) = v113;
    unint64_t v140 = __PAIR64__(v103, v41);
    unsigned int v46 = v103;
    unint64_t v141 = __PAIR64__(v101, v42);
    unsigned int v47 = v101;
    LODWORD(v142) = v43;
    unsigned int v94 = _ViewInputs.animatedPosition()();
    unint64_t v132 = v105;
    LODWORD(v133) = v122;
    uint64_t v134 = v44;
    unsigned int v48 = v106;
    unint64_t v135 = __PAIR64__(v117, v114);
    unint64_t v136 = __PAIR64__(v106, v116);
    unint64_t v137 = v45;
    unint64_t v138 = v115;
    unint64_t v139 = __PAIR64__(v32, v104);
    unint64_t v140 = __PAIR64__(v46, v112);
    unint64_t v141 = __PAIR64__(v47, v102);
    LODWORD(v142) = v43;
    uint64_t v49 = _ViewInputs.containerPosition.getter();
    unint64_t v132 = __PAIR64__(v121, v97);
    unint64_t v133 = __PAIR64__(v94, v95);
    LODWORD(v134) = v49;
    MEMORY[0x1F4188790](v49);
    uint64_t v50 = type metadata accessor for TemporalStackDisplayList();
    v90[-2] = v50;
    v90[-1] = swift_getWitnessTable();
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<DisplayList>, MEMORY[0x1E4F3F4D0], MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v132, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_20, (uint64_t)&v90[-4], v50, MEMORY[0x1E4FBC248], v51, MEMORY[0x1E4FBC278], v52);
    uint64_t v31 = v118;
    uint64_t v25 = v119;
    uint64_t v53 = v107;
    LOBYTE(v132) = 0;
    _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t v53 = v24;
    unsigned int v48 = v106;
  }
  uint64_t v54 = v111;
  if ((v48 & 0x22) != 0)
  {
    unsigned int v55 = v48;
    LODWORD(v132) = v98;
    _GraphValue.value.getter();
    closure #1 in static TemporalStack._makeView(view:inputs:)(1, v99, v110, v53, v54, v31, v25);
    unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    unint64_t v57 = v105;
    unint64_t v132 = v105;
    int v58 = (int)v122;
    LODWORD(v133) = v122;
    uint64_t v59 = v109;
    uint64_t v134 = v109;
    unsigned int v60 = v114;
    unint64_t v135 = __PAIR64__(v117, v114);
    unint64_t v136 = __PAIR64__(v55, v116);
    unint64_t v137 = v108;
    unint64_t v138 = v115;
    unint64_t v139 = __PAIR64__(v113, v104);
    unint64_t v140 = __PAIR64__(v103, v112);
    unint64_t v141 = __PAIR64__(v101, v102);
    LODWORD(v142) = v100;
    uint64_t v61 = _ViewInputs.environment.getter();
    unint64_t v132 = __PAIR64__(OffsetAttribute2, v121);
    LODWORD(v133) = v61;
    MEMORY[0x1F4188790](v61);
    uint64_t v62 = type metadata accessor for TemporalStackLayoutComputer();
    v90[-2] = v62;
    v90[-1] = swift_getWitnessTable();
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, MEMORY[0x1E4F3F978], MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v132, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v90[-4], v62, MEMORY[0x1E4FBC248], v63, MEMORY[0x1E4FBC278], v64);
    unsigned int v65 = v106;
    if ((v106 & 0x20) != 0)
    {
      unint64_t v132 = v57;
      LODWORD(v133) = v58;
      uint64_t v134 = v59;
      unint64_t v135 = __PAIR64__(v117, v60);
      unint64_t v136 = __PAIR64__(v106, v116);
      unint64_t v66 = v108;
      uint64_t v98 = v124;
      unint64_t v137 = v108;
      unint64_t v138 = v115;
      unsigned int v68 = v103;
      unsigned int v67 = v104;
      unint64_t v139 = __PAIR64__(v113, v104);
      unsigned int v70 = v112;
      unsigned int v69 = v113;
      unint64_t v140 = __PAIR64__(v103, v112);
      unsigned int v71 = v102;
      unint64_t v141 = __PAIR64__(v101, v102);
      LODWORD(v142) = v100;
      unsigned int v97 = _ViewInputs.size.getter();
      unint64_t v132 = v105;
      LODWORD(v133) = v122;
      uint64_t v134 = v109;
      unint64_t v135 = __PAIR64__(v117, v114);
      unint64_t v136 = __PAIR64__(v65, v116);
      unint64_t v137 = v66;
      unint64_t v138 = v115;
      unint64_t v139 = __PAIR64__(v69, v67);
      unint64_t v140 = __PAIR64__(v68, v70);
      unint64_t v141 = __PAIR64__(v101, v71);
      LODWORD(v142) = v100;
      _ViewInputs.position.getter();
      LayoutChildGeometries.init(parentSize:parentPosition:layoutComputer:)();
      unint64_t v124 = v132;
      LODWORD(v125) = v133;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for [ViewGeometry], MEMORY[0x1E4F3F668], MEMORY[0x1E4FBB320]);
      lazy protocol witness table accessor for type LayoutChildGeometries and conformance LayoutChildGeometries();
      uint64_t v72 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v72);
      uint64_t v73 = v110;
      v90[-8] = v99;
      v90[-7] = v73;
      unint64_t v74 = v111;
      v90[-6] = v107;
      v90[-5] = v74;
      uint64_t v75 = v119;
      v90[-4] = v118;
      v90[-3] = v75;
      LODWORD(v90[-2]) = v76;
      MEMORY[0x1F4188790](v76);
      v90[-4] = v96;
      v90[-3] = partial apply for closure #2 in static TemporalStack._makeView(view:inputs:);
      v90[-2] = v77;
      AGGraphMutateAttribute();
    }
    LOBYTE(v132) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
  unint64_t v124 = v115;
  uint64_t v125 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    uint64_t v122 = &v125;
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      id v78 = (void (*)(unint64_t *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v80 = *v79;
      v78(&v132, 0);
      uint64_t v81 = v125;
      unint64_t v132 = v124;
      swift_bridgeObjectRetain();
      uint64_t v82 = PreferenceKeys.endIndex.getter();
      if (v81 < 0 || v81 >= v82) {
        break;
      }
      uint64_t v83 = v81 + 1;
      uint64_t v125 = v83;
      uint64_t v84 = swift_bridgeObjectRelease();
      if (v80 != MEMORY[0x1E4F3F488])
      {
        LODWORD(v132) = v121;
        MEMORY[0x1F4188790](v84);
        v90[-4] = swift_getAssociatedTypeWitness();
        uint64_t v85 = type metadata accessor for TemporalStackPreference();
        v90[-3] = v85;
        v90[-2] = swift_getWitnessTable();
        uint64_t v86 = type metadata accessor for Attribute();
        _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v132, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)&v90[-6], v85, MEMORY[0x1E4FBC248], v86, MEMORY[0x1E4FBC278], v87);
        swift_beginAccess();
        char v123 = 0;
        _ViewOutputs.subscript.setter();
        swift_endAccess();
        uint64_t v83 = v125;
      }
      if (v83 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
LABEL_19:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_beginAccess();
  uint64_t v89 = v92;
  *uint64_t v92 = v126;
  v89[1] = v127;
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance TemporalStack<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TemporalStack<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance TemporalStack<A, B>()
{
}

double static TemporalStateViewModifier._makeView(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, unint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  uint64_t v53 = a5;
  unint64_t v52 = a4;
  uint64_t v62 = a6;
  uint64_t v91 = *MEMORY[0x1E4F143B8];
  unsigned int v51 = *a1;
  unint64_t v7 = *(void *)a2;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  unsigned int v10 = *(_DWORD *)(a2 + 24);
  unsigned int v11 = *(_DWORD *)(a2 + 28);
  unsigned int v12 = *(_DWORD *)(a2 + 32);
  unsigned int v13 = *(_DWORD *)(a2 + 36);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v15 = *(void *)(a2 + 48);
  unsigned int v17 = *(_DWORD *)(a2 + 56);
  unsigned int v16 = *(_DWORD *)(a2 + 60);
  unsigned int v18 = *(_DWORD *)(a2 + 64);
  unsigned int v19 = *(_DWORD *)(a2 + 68);
  unsigned int v20 = *(_DWORD *)(a2 + 72);
  unsigned int v21 = *(_DWORD *)(a2 + 76);
  int v22 = *(_DWORD *)(a2 + 80);
  unint64_t v82 = v7;
  int v83 = v8;
  uint64_t v84 = v9;
  *(void *)&long long v85 = __PAIR64__(v11, v10);
  *((void *)&v85 + 1) = __PAIR64__(v13, v12);
  uint64_t v86 = v14;
  unint64_t v87 = v15;
  *(void *)&long long v88 = __PAIR64__(v16, v17);
  *((void *)&v88 + 1) = __PAIR64__(v19, v18);
  unint64_t v89 = __PAIR64__(v21, v20);
  int v90 = v22;
  int v61 = v8;
  unsigned int v60 = v10;
  unsigned int v59 = v11;
  unsigned int v58 = v12;
  unsigned int v57 = v13;
  unsigned int v66 = v16;
  unsigned int v55 = v18;
  unsigned int v54 = v19;
  unsigned int v65 = v20;
  unsigned int v64 = v21;
  int v63 = v22;
  unint64_t v56 = v7;
  swift_retain();
  uint64_t v69 = v9;
  swift_retain();
  uint64_t v68 = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewInputs.animatedPosition()();
  _ViewInputs.containerPosition.setter();
  unint64_t v73 = v82;
  LODWORD(v74) = v83;
  uint64_t v75 = v9;
  long long v76 = v85;
  uint64_t v77 = v14;
  unint64_t v78 = v15;
  long long v79 = v88;
  unint64_t v80 = v89;
  int v81 = v90;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v23 = swift_bridgeObjectRetain();
  a3(&v71, v23, &v73);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v73 = v15;
  unsigned int v67 = v17;
  LODWORD(v74) = v17;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    LODWORD(v73) = v51;
    type metadata accessor for TemporalStateViewModifier();
    type metadata accessor for _GraphValue();
    unsigned int v24 = _GraphValue.value.getter();
    unint64_t v73 = v71;
    double v74 = v72;
    uint64_t v25 = _ViewOutputs.subscript.getter();
    unsigned int v26 = *MEMORY[0x1E4F4E7A0];
    if ((v25 & 0x100000000) != 0) {
      unsigned int v27 = *MEMORY[0x1E4F4E7A0];
    }
    else {
      unsigned int v27 = v25;
    }
    unint64_t v73 = __PAIR64__(v27, v24);
    MEMORY[0x1F4188790](v25);
    uint64_t State = type metadata accessor for TemporalStateViewModifier.MakeState();
    uint64_t WitnessTable = swift_getWitnessTable();
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<TemporalState>, (uint64_t)&unk_1ED473A48, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v73, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v48, State, MEMORY[0x1E4FBC248], v28, MEMORY[0x1E4FBC278], v29);
    unsigned int v51 = v70;
    unint64_t v73 = v15;
    LODWORD(v74) = v67;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unint64_t v73 = v71;
      double v74 = v72;
      uint64_t v30 = _ViewOutputs.subscript.getter();
      unint64_t v73 = v56;
      if ((v30 & 0x100000000) == 0) {
        unsigned int v26 = v30;
      }
      LODWORD(v74) = v61;
      uint64_t v75 = v69;
      *(void *)&long long v76 = __PAIR64__(v59, v60);
      *((void *)&v76 + 1) = __PAIR64__(v57, v58);
      uint64_t v77 = v68;
      unint64_t v78 = v15;
      *(void *)&long long v79 = __PAIR64__(v66, v67);
      *((void *)&v79 + 1) = __PAIR64__(v54, v55);
      unint64_t v80 = __PAIR64__(v64, v65);
      int v81 = v63;
      uint64_t v31 = _ViewInputs.transaction.getter();
      unint64_t v73 = __PAIR64__(v26, v51);
      LODWORD(v74) = v31;
      MEMORY[0x1F4188790](v31);
      uint64_t v32 = type metadata accessor for TemporalStateViewModifier.AddState();
      uint64_t State = v32;
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for Attribute<[ArchivedViewState]>();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v73, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v48, v32, MEMORY[0x1E4FBC248], v33, MEMORY[0x1E4FBC278], v34);
      static AGAttributeFlags.transactional.getter();
      AGGraphSetFlags();
      LOBYTE(v73) = 0;
      _ViewOutputs.subscript.setter();
    }
    _DisplayList_Identity.init()();
    LODWORD(v53) = v73;
    unint64_t v35 = v56;
    unint64_t v73 = v56;
    int v36 = v61;
    LODWORD(v74) = v61;
    uint64_t v75 = v69;
    unsigned int v37 = v60;
    unsigned int v38 = v59;
    *(void *)&long long v76 = __PAIR64__(v59, v60);
    unsigned int v39 = v58;
    unsigned int v40 = v57;
    *((void *)&v76 + 1) = __PAIR64__(v57, v58);
    uint64_t v77 = v68;
    unint64_t v78 = v15;
    unint64_t v52 = v15;
    unsigned int v41 = v67;
    *(void *)&long long v79 = __PAIR64__(v66, v67);
    unsigned int v42 = v55;
    unsigned int v43 = v54;
    *((void *)&v79 + 1) = __PAIR64__(v54, v55);
    unint64_t v80 = __PAIR64__(v64, v65);
    int v81 = v63;
    unsigned int v70 = v53;
    _ViewInputs.pushIdentity(_:)();
    unint64_t v73 = v35;
    LODWORD(v74) = v36;
    uint64_t v75 = v69;
    *(void *)&long long v76 = __PAIR64__(v38, v37);
    *((void *)&v76 + 1) = __PAIR64__(v40, v39);
    uint64_t v77 = v68;
    unint64_t v78 = v52;
    *(void *)&long long v79 = __PAIR64__(v66, v41);
    *((void *)&v79 + 1) = __PAIR64__(v43, v42);
    unint64_t v80 = __PAIR64__(v64, v65);
    int v81 = v63;
    int v44 = _ViewInputs.animatedSize()();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    char v45 = v73;
    unint64_t v73 = __PAIR64__(v51, v53);
    LODWORD(v74) = v44;
    BYTE4(v74) = v45;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type TemporalStateDisplayList and conformance TemporalStateDisplayList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v73) = 0;
    _ViewOutputs.subscript.setter();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unsigned int v46 = (double *)v62;
  *uint64_t v62 = v71;
  double result = v72;
  v46[1] = v72;
  return result;
}

uint64_t TemporalStateViewModifier.MakeState.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TemporalStateViewModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t TemporalStateViewModifier.MakeState.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1))
  {
    uint64_t result = 0;
    *(unsigned char *)(a2 + 10) = 0;
    *(_WORD *)(a2 + 8) = 0;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v5 = *(unsigned char *)(Value + 10);
    *(_WORD *)(a2 + 8) = *(_WORD *)(Value + 8);
    *(unsigned char *)(a2 + 10) = v5;
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)a2 = result;
  return result;
}

double TemporalStateViewModifier.MakeState.value.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  int v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TemporalStateViewModifier();
  MEMORY[0x1F4188790](v9 - 8);
  unsigned int v11 = (char *)&v17 - v10;
  TemporalStateViewModifier.MakeState.modifier.getter((uint64_t)&v17 - v10);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, a2);
  StrongHash.init<A>(of:)();
  long long v17 = v24;
  int v12 = v25;
  TemporalStateViewModifier.MakeState.content.getter(a1, (uint64_t)&v18);
  uint64_t v13 = v18;
  if (v18)
  {
    __int16 v14 = v19;
    char v15 = v20;
  }
  else
  {
    DisplayList.init()();
    uint64_t v13 = v21;
    __int16 v14 = v22;
    char v15 = v23;
  }
  double result = *(double *)&v17;
  *(_OWORD *)a3 = v17;
  *(_DWORD *)(a3 + 16) = v12;
  *(void *)(a3 + 24) = v13;
  *(_WORD *)(a3 + 32) = v14;
  *(unsigned char *)(a3 + 34) = v15;
  return result;
}

uint64_t TemporalStateViewModifier.AddState.childStates.getter(uint64_t a1)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1)) {
    return 0;
  }
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, MEMORY[0x1E4FBB320]);
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

double protocol witness for static Rule.initialValue.getter in conformance TemporalStateViewModifier<A>.MakeState@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 31) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double protocol witness for Rule.value.getter in conformance TemporalStateViewModifier<A>.MakeState@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return TemporalStateViewModifier.MakeState.value.getter(*v2, *(void *)(a1 + 16), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TemporalStateViewModifier<A>.MakeState(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

char *TemporalStateViewModifier.AddState.value.getter(uint64_t a1)
{
  int v1 = a1;
  uint64_t v2 = TemporalStateViewModifier.AddState.childStates.getter(a1);
  if (v2) {
    uint64_t v3 = (char *)v2;
  }
  else {
    uint64_t v3 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v5 = *(void *)Value;
  uint64_t v6 = *(void *)(Value + 8);
  int v7 = *(_DWORD *)(Value + 16);
  AGGraphGetValue();
  swift_retain();
  uint64_t v8 = Transaction.animation.getter();
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
  }
  unint64_t v10 = *((void *)v3 + 2);
  unint64_t v9 = *((void *)v3 + 3);
  if (v10 >= v9 >> 1) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v3);
  }
  *((void *)v3 + 2) = v10 + 1;
  unsigned int v11 = &v3[32 * v10];
  *((void *)v11 + 4) = v5;
  *((void *)v11 + 5) = v6;
  *((_DWORD *)v11 + 12) = v7;
  *((_DWORD *)v11 + 13) = v1;
  *((void *)v11 + 7) = v8;
  return v3;
}

char *protocol witness for Rule.value.getter in conformance TemporalStateViewModifier<A>.AddState@<X0>(char **a1@<X8>)
{
  double result = TemporalStateViewModifier.AddState.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TemporalStateViewModifier<A>.AddState(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TemporalStateViewModifier<A>@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  return static TemporalStateViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TemporalStateViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

_UNKNOWN **base witness table accessor for ViewModifier in TemporalStateViewModifier<A>()
{
  return &protocol witness table for TemporalStateViewModifier<A>;
}

uint64_t default argument 3 of TemporalStackChildren.init(view:inputs:childGeometries:children:nextID:)()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TemporalStackChild();

  return Array.init()();
}

uint64_t closure #1 in static TemporalStack._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v8 = type metadata accessor for TemporalStack();
  uint64_t v9 = a1 + *(int *)(v8 + 68);
  long long v14[2] = v8;
  uint64_t v10 = MEMORY[0x1E4F417C8];
  uint64_t v11 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_24, (uint64_t)v14, v10, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
  return v15;
}

double TemporalStackChild.init(state:hash:subgraph:outputs:id:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v12 = *(_DWORD *)(a2 + 16);
  double v13 = *a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7, a1, a6);
  __int16 v14 = (int *)type metadata accessor for TemporalStackChild();
  uint64_t v15 = a7 + v14[7];
  *(_OWORD *)uint64_t v15 = *(_OWORD *)a2;
  *(_DWORD *)(v15 + 16) = v12;
  *(void *)(a7 + v14[8]) = a3;
  uint64_t v16 = (double *)(a7 + v14[9]);
  *uint64_t v16 = v13;
  double result = a4[1];
  v16[1] = result;
  *(_DWORD *)(a7 + v14[10]) = a5;
  return result;
}

uint64_t TemporalStackChildren.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TemporalStack();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t TemporalStackChildren.updateValue()(void *a1)
{
  uint64_t v115 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[2];
  unint64_t v96 = *(void (***)(char *, char *, uint64_t))(v3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for TemporalStackChild();
  uint64_t v78 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v73 - v7;
  uint64_t v100 = AssociatedTypeWitness;
  uint64_t v91 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v97 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v99 = (uint64_t)&v73 - v12;
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13 - 8);
  int v90 = (char *)&v73 - v14;
  uint64_t v93 = swift_getAssociatedTypeWitness();
  uint64_t v77 = *(void *)(v93 - 8);
  MEMORY[0x1F4188790](v93);
  uint64_t v92 = (char *)&v73 - v15;
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[5];
  uint64_t v18 = a1[6];
  uint64_t v19 = a1[7];
  uint64_t v105 = v4;
  uint64_t v106 = v16;
  uint64_t v82 = v16;
  uint64_t v83 = v3;
  uint64_t v107 = v3;
  uint64_t v108 = v17;
  uint64_t v81 = v17;
  uint64_t v98 = v18;
  *(void *)&long long v109 = v18;
  *((void *)&v109 + 1) = v19;
  uint64_t v80 = v19;
  unsigned int v95 = (void (**)(char *, uint64_t))type metadata accessor for TemporalStack();
  uint64_t v20 = (uint64_t)*(v95 - 1);
  MEMORY[0x1F4188790](v95);
  __int16 v22 = (char *)&v73 - v21;
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v24);
  unsigned int v94 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v73 - v27;
  uint64_t v29 = *(void *)(v1 + 8);
  int v30 = *(_DWORD *)(v1 + 16);
  uint64_t v31 = *(void *)(v1 + 24);
  LODWORD(v27) = *(_DWORD *)(v1 + 112);
  LODWORD(v105) = *(_DWORD *)v1;
  uint64_t v106 = v29;
  LODWORD(v107) = v30;
  uint64_t v108 = v31;
  long long v32 = *(_OWORD *)(v1 + 48);
  long long v109 = *(_OWORD *)(v1 + 32);
  long long v110 = v32;
  long long v33 = *(_OWORD *)(v1 + 80);
  long long v111 = *(_OWORD *)(v1 + 64);
  long long v112 = v33;
  long long v113 = *(_OWORD *)(v1 + 96);
  int v114 = v27;
  double v74 = a1;
  TemporalStackChildren.view.getter((uint64_t)v22);
  uint64_t v76 = v23;
  uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v23 + 16);
  v34(v28, v22, v4);
  (*(void (**)(char *, void))(v20 + 8))(v22, v95);
  char v104 = 0;
  uint64_t v105 = 0;
  uint64_t v84 = v1;
  unint64_t v35 = (uint64_t *)(v1 + 104);
  uint64_t v36 = swift_bridgeObjectRetain();
  uint64_t v37 = MEMORY[0x18C115C50](v36, v6);
  swift_bridgeObjectRelease();
  uint64_t v103 = v37;
  uint64_t v75 = v28;
  unsigned int v38 = v28;
  uint64_t v39 = v4;
  v34(v94, v38, v4);
  unsigned int v40 = v90;
  uint64_t v41 = v99;
  uint64_t v42 = v100;
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v85 = v39;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  uint64_t v43 = v91;
  int v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48);
  uint64_t v88 = v91 + 48;
  unint64_t v87 = v44;
  if (v44(v40, 1, v42) != 1)
  {
    uint64_t v53 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v43 + 32);
    uint64_t v52 = v43 + 32;
    uint64_t v86 = v53;
    unint64_t v96 = (void (**)(char *, char *, uint64_t))(v52 - 16);
    unsigned int v95 = (void (**)(char *, uint64_t))(v78 + 8);
    uint64_t v91 = v52;
    unsigned int v54 = (uint64_t (**)(char *, uint64_t))(v52 - 24);
    int v79 = *MEMORY[0x1E4F4E7A0];
    for (uint64_t i = v53(v41, v40, v42); ; uint64_t i = v86(v56, v57, v55))
    {
      uint64_t v58 = v105;
      uint64_t v59 = v103;
      if (v103 < v105) {
        break;
      }
      unsigned int v94 = (char *)((unint64_t)v54 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
      if (v105 != v103)
      {
        while (v58 < v59)
        {
          Array.subscript.getter();
          unsigned int v60 = v97;
          uint64_t v61 = v100;
          (*v96)(v97, v8, v100);
          (*v95)(v8, v6);
          char v62 = dispatch thunk of static Equatable.== infix(_:_:)();
          int v63 = *v54;
          uint64_t i = (*v54)(v60, v61);
          if (v62)
          {
            if (v105 != v58)
            {
              uint64_t v102 = v105;
              uint64_t v101 = v58;
              type metadata accessor for Array();
              swift_getWitnessTable();
              MutableCollection.swapAt(_:_:)();
              char v104 = 1;
            }
            uint64_t v55 = v100;
            uint64_t v56 = v99;
            goto LABEL_10;
          }
          if (v59 == ++v58) {
            goto LABEL_17;
          }
        }
        goto LABEL_22;
      }
LABEL_17:
      uint64_t i = AGGraphGetCurrentAttribute();
      if (i == v79) {
        goto LABEL_24;
      }
      unsigned int v64 = i;
      uint64_t v65 = v84;
      id v66 = (id)AGSubgraphGetGraph();
      unsigned int v67 = (void *)AGSubgraphCreate();

      AGSubgraphAddChild();
      AGGraphClearUpdate();
      id v68 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      *((void *)&v71 + 1) = v80;
      *(void *)&long long v71 = v98;
      *((void *)&v70 + 1) = v81;
      *(void *)&long long v70 = v83;
      uint64_t v69 = v65;
      uint64_t v56 = v99;
      closure #1 in TemporalStackChildren.updateValue()(v69, v64, v99, (uint64_t)v67, (uint64_t)&v105, &v104, &v103, v85, v82, v70, v71);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      int v63 = *v54;
      uint64_t v55 = v100;
LABEL_10:
      ++v105;
      v63((char *)v56, v55);
      unsigned int v57 = v90;
      dispatch thunk of IteratorProtocol.next()();
      if (v87(v57, 1, v55) == 1) {
        goto LABEL_2;
      }
    }
    goto LABEL_23;
  }
LABEL_2:
  uint64_t i = (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v92, v93);
  uint64_t v46 = v105;
  uint64_t v47 = v103;
  if (v103 < v105)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v103 != v105)
  {
    unsigned int v48 = (uint64_t (**)(char *, uint64_t))(v78 + 8);
    while (v46 < v47)
    {
      --v47;
      type metadata accessor for Array();
      Array.remove(at:)();
      AGSubgraphRef.willInvalidate(isInserted:)(1);
      AGSubgraphInvalidate();
      uint64_t i = (*v48)(v8, v6);
      char v104 = 1;
      if (v46 == v47) {
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
LABEL_26:
  if ((v104 & 1) == 0)
  {
    type metadata accessor for Array();
    uint64_t i = AGGraphGetOutputValue();
    if (i) {
      return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v75, v85);
    }
  }
LABEL_7:
  uint64_t v102 = *v35;
  MEMORY[0x1F4188790](i);
  *((void *)&v71 + 1) = v74;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v49 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v102, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v70 + 8, v49, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v50);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v76 + 8))(v75, v85);
}

uint64_t closure #1 in TemporalStackChildren.updateValue()(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned char *a6, void *a7, uint64_t a8, uint64_t a9, long long a10, long long a11)
{
  unint64_t v87 = a6;
  uint64_t v88 = a7;
  uint64_t v85 = a5;
  uint64_t v86 = (void *)a4;
  uint64_t v96 = 0;
  uint64_t v97 = a3;
  unsigned int v71 = a2;
  *(void *)&long long v99 = *((void *)&a11 + 1);
  uint64_t v94 = a11;
  uint64_t v98 = *((void *)&a10 + 1);
  uint64_t v76 = a9;
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  uint64_t v93 = a10;
  uint64_t v95 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for TemporalStackChild();
  uint64_t v83 = *(void *)(v14 - 8);
  uint64_t v84 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v81 = &v70[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v16);
  uint64_t v82 = &v70[-v17];
  uint64_t v77 = AssociatedTypeWitness;
  uint64_t v89 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v91 = &v70[-v19];
  *(void *)&long long v114 = a8;
  *((void *)&v114 + 1) = a9;
  long long v115 = a10;
  long long v116 = a11;
  uint64_t v20 = type metadata accessor for TemporalStackChildView();
  uint64_t v79 = *(void *)(v20 - 8);
  uint64_t v80 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v78 = &v70[-v21];
  int v90 = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a1 + 112) = v90 + 1;
  LODWORD(v21) = *(_DWORD *)(a1 + 16);
  uint64_t v22 = *(void *)(a1 + 24);
  uint64_t v24 = *(void *)(a1 + 48);
  uint64_t v23 = *(int **)(a1 + 56);
  uint64_t v74 = *(void *)(a1 + 8);
  uint64_t v75 = v24;
  uint64_t v92 = v23;
  int v25 = *(_DWORD *)(a1 + 88);
  *(void *)&long long v110 = v74;
  DWORD2(v110) = v21;
  *(_OWORD *)((char *)v111 + 8) = *(_OWORD *)(a1 + 32);
  *((void *)&v111[1] + 1) = v24;
  *(void *)long long v112 = v23;
  *(_OWORD *)&v112[8] = *(_OWORD *)(a1 + 64);
  *(void *)&v112[24] = *(void *)(a1 + 80);
  int v113 = v25;
  swift_beginAccess();
  int v26 = *(_DWORD *)(v22 + 16);
  uint64_t v27 = *(void *)(v22 + 24);
  long long v28 = *(_OWORD *)(v22 + 32);
  long long v72 = *(_OWORD *)(v22 + 48);
  long long v73 = v28;
  uint64_t v30 = *(void *)(v22 + 64);
  uint64_t v29 = *(void *)(v22 + 72);
  LOBYTE(AssociatedTypeWitness) = *(unsigned char *)(v22 + 80);
  char v31 = *(unsigned char *)(v22 + 81);
  uint64_t v32 = *(void *)(v22 + 88);
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v33 = swift_allocObject();
  *(_DWORD *)(v33 + 16) = v26;
  *(void *)(v33 + 24) = v27;
  long long v34 = v72;
  *(_OWORD *)(v33 + 32) = v73;
  *(_OWORD *)(v33 + 48) = v34;
  *(void *)(v33 + 64) = v30;
  *(void *)(v33 + 72) = v29;
  *(unsigned char *)(v33 + 80) = AssociatedTypeWitness;
  *(unsigned char *)(v33 + 81) = v31;
  *(void *)(v33 + 88) = v32;
  swift_retain();
  *(void *)&v111[0] = v33;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.pushStableIndex(_:)(0);
  uint64_t v92 = (int *)a1;
  int v35 = *(_DWORD *)(a1 + 92);
  uint64_t v36 = v76;
  *(void *)&long long v114 = v95;
  *((void *)&v114 + 1) = v76;
  *(void *)&long long v115 = v93;
  *((void *)&v115 + 1) = v98;
  *(void *)&long long v116 = v94;
  *((void *)&v116 + 1) = v99;
  uint64_t v37 = type metadata accessor for TemporalStackChildren();
  if (v35 == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v38 = v77;
  }
  else
  {
    *(void *)&long long v114 = __PAIR64__(v90, v71);
    DWORD2(v114) = v35;
    MEMORY[0x1F4188790](v37);
    uint64_t v38 = v77;
    uint64_t v39 = type metadata accessor for TemporalStackChildGeometry();
    *(void *)&v70[-16] = v39;
    *(void *)&v70[-8] = swift_getWitnessTable();
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for Attribute<ViewGeometry>, MEMORY[0x1E4F3F668], MEMORY[0x1E4F4E740]);
    uint64_t v40 = v96;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v114, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v70[-32], v39, MEMORY[0x1E4FBC248], v41, MEMORY[0x1E4FBC278], v42);
    uint64_t v96 = v40;
    Attribute<A>.size()();
    _ViewInputs.size.setter();
    Attribute<A>.origin()();
    _ViewInputs.position.setter();
  }
  uint64_t v43 = (uint64_t)v91;
  int v44 = *v92;
  uint64_t v89 = *(void *)(v89 + 16);
  ((void (*)(unsigned char *, uint64_t, uint64_t))v89)(v91, v97, v38);
  char v45 = v78;
  uint64_t v46 = TemporalStackChildView.init(view:state:)(v44, v43, v78);
  MEMORY[0x1F4188790](v46);
  uint64_t v47 = v80;
  *(void *)&v70[-32] = v36;
  *(void *)&v70[-24] = v47;
  *(void *)&v70[-16] = swift_getWitnessTable();
  uint64_t v48 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v45, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v70[-48], v47, MEMORY[0x1E4FBC248], v48, MEMORY[0x1E4FBC278], v49);
  (*(void (**)(_DWORD *, uint64_t))(v79 + 8))(v45, v47);
  _GraphValue.init(_:)();
  long long v117 = *(_OWORD *)v112;
  long long v116 = v111[1];
  long long v118 = *(_OWORD *)&v112[16];
  long long v114 = v110;
  long long v115 = v111[0];
  long long v106 = v111[1];
  long long v107 = *(_OWORD *)v112;
  long long v108 = *(_OWORD *)&v112[16];
  int v119 = v113;
  double v100 = *(double *)v112;
  LODWORD(v101) = *(_DWORD *)&v112[8];
  int v109 = v113;
  long long v104 = v110;
  long long v105 = v111[0];
  static View.makeDebuggableView(view:inputs:)();
  char v50 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  int v51 = v90;
  if (v50)
  {
    ((void (*)(uint64_t, uint64_t, uint64_t))v89)(v43, v97, v38);
    StrongHash.init<A>(of:)();
    long long v52 = v104;
    int v53 = v51;
    uint64_t v54 = v105;
    uint64_t v55 = *(void *)&v102;
    unint64_t v56 = v103;
    outlined retain of _ViewInputs((uint64_t)&v114);
    swift_bridgeObjectRetain();
    LOBYTE(v100) = 0;
    uint64_t v57 = v54;
    int v51 = v53;
    unint64_t v58 = v56;
    uint64_t v43 = (uint64_t)v91;
    specialized static AccessibilityAttachmentModifier.makeAccessibilityPropertiesTransform<A>(_:value:inputs:outputs:)(v52, *((uint64_t *)&v52 + 1), v57, (uint64_t)&v114, v55, v58);
    swift_bridgeObjectRelease();
    outlined release of _ViewInputs((uint64_t)&v114);
    _ViewOutputs.subscript.setter();
  }
  uint64_t v59 = v97;
  unsigned int v60 = (void (*)(uint64_t, uint64_t, uint64_t))v89;
  ((void (*)(uint64_t, uint64_t, uint64_t))v89)(v43, v97, v38);
  StrongHash.init<A>(of:)();
  int v61 = v105;
  long long v99 = v104;
  v60(v43, v59, v38);
  long long v104 = v99;
  LODWORD(v105) = v61;
  double v100 = v102;
  unint64_t v101 = v103;
  char v62 = v82;
  uint64_t v63 = v43;
  unsigned int v64 = v86;
  double v65 = TemporalStackChild.init(state:hash:subgraph:outputs:id:)(v63, (uint64_t)&v104, (uint64_t)v86, &v100, v51, v38, (uint64_t)v82);
  uint64_t v67 = v83;
  uint64_t v66 = v84;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t, double))(v83 + 16))(v81, v62, v84, v65);
  type metadata accessor for Array();
  id v68 = v64;
  Array.insert(_:at:)();
  (*(void (**)(unsigned char *, uint64_t))(v67 + 8))(v62, v66);
  *unint64_t v87 = 1;
  ++*v88;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t TemporalStackChildView.init(view:state:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for TemporalStackChildView() + 68);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v4, a2, AssociatedTypeWitness);
}

uint64_t TemporalStackChildView.value.getter()
{
  return Rule.withObservation<A>(do:)();
}

uint64_t closure #1 in TemporalStackChildView.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  v23[0] = a1;
  v23[1] = a8;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v14 = type metadata accessor for TemporalStack();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v23 - v16;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v27 = a5;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v18 = type metadata accessor for TemporalStackChildView();
  uint64_t v19 = v23[0];
  TemporalStackChildren.view.getter((uint64_t)v17);
  uint64_t v20 = *(void (**)(uint64_t))&v17[*(int *)(v14 + 72)];
  uint64_t v21 = *(void (**)(char *, uint64_t))(v15 + 8);
  swift_retain();
  v21(v17, v14);
  v20(v19 + *(int *)(v18 + 68));
  return swift_release();
}

uint64_t TemporalStackChildGeometry.value.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, _OWORD *a3@<X8>)
{
  int v4 = HIDWORD(a1);
  uint64_t v21 = a3;
  uint64_t v5 = type metadata accessor for TemporalStackChild();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v20 - v7;
  int v22 = a2;
  uint64_t v23 = specialized TemporalStackChildGeometry.children.getter();
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t result = RandomAccessCollection<>.indices.getter();
  unint64_t v10 = v24;
  uint64_t v11 = v25;
  if (v24 == v25) {
    return static ViewGeometry.zero.getter();
  }
  if (v25 < v24)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
  }
  else
  {
    uint64_t v12 = (uint64_t (**)(char *, uint64_t))(v6 + 8);
    for (uint64_t i = v24 << 6; ; i += 64)
    {
      if ((uint64_t)v10 >= v11)
      {
        __break(1u);
        goto LABEL_13;
      }
      specialized TemporalStackChildGeometry.children.getter();
      swift_bridgeObjectRetain();
      Array.subscript.getter();
      swift_bridgeObjectRelease();
      int v14 = *(_DWORD *)&v8[*(int *)(v5 + 40)];
      uint64_t result = (*v12)(v8, v5);
      if (v14 == v4) {
        break;
      }
      if (v11 == ++v10) {
        return static ViewGeometry.zero.getter();
      }
    }
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for [ViewGeometry], MEMORY[0x1E4F3F668], MEMORY[0x1E4FBB320]);
    uint64_t result = AGGraphGetValue();
    if ((v10 & 0x8000000000000000) != 0) {
      goto LABEL_14;
    }
    if (v10 < *(void *)(*(void *)result + 16))
    {
      uint64_t v15 = *(void *)result + i;
      uint64_t v16 = *(void *)(v15 + 48);
      uint64_t v17 = *(void *)(v15 + 56);
      uint64_t v18 = v21;
      *uint64_t v21 = *(_OWORD *)(v15 + 32);
      *((void *)v18 + 2) = v16;
      *((void *)v18 + 3) = v17;
      long long v19 = *(_OWORD *)(v15 + 80);
      v18[2] = *(_OWORD *)(v15 + 64);
      v18[3] = v19;
      return swift_retain();
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TemporalStackChildGeometry<A>@<X0>(_OWORD *a1@<X8>)
{
  return TemporalStackChildGeometry.value.getter(*(void *)v1, *(_DWORD *)(v1 + 8), a1);
}

uint64_t TemporalStackLayoutComputer.updateValue()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  *(void *)&long long v16 = specialized TemporalStackChildGeometry.children.getter();
  _OWORD v11[2] = v1;
  type metadata accessor for TemporalStackChild();
  uint64_t v2 = type metadata accessor for Array();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TemporalStackLayoutComputer.updateValue(), (uint64_t)v11, v2, MEMORY[0x1E4F407E8], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v4);
  swift_bridgeObjectRelease();
  uint64_t result = AGGraphGetCurrentAttribute();
  int v6 = *MEMORY[0x1E4F4E7A0];
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    LayoutProxyCollection.init(context:attributes:)();
    int v7 = v16;
    uint64_t v8 = *((void *)&v16 + 1);
    uint64_t result = AGGraphGetCurrentAttribute();
    if (result != v6)
    {
      LOBYTE(v16) = 1;
      SizeAndSpacingContext.init(context:owner:environment:)();
      int v9 = DWORD2(v16);
      uint64_t v10 = v16;
      long long v16 = *(_OWORD *)AGGraphGetValue();
      uint64_t v14 = v10;
      int v15 = v9;
      int v12 = v7;
      uint64_t v13 = v8;
      lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout();
      swift_getWitnessTable();
      Layout.updateLayoutComputer<A>(rule:layoutContext:children:)();
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in TemporalStackLayoutComputer.updateValue()()
{
  return LayoutProxyAttributes.init(layoutComputer:traitsList:)();
}

uint64_t TemporalStateDisplayList.updateValue()()
{
  DisplayList.Version.init(forUpdate:)();
  uint64_t v0 = swift_allocObject();
  uint64_t Value = AGGraphGetValue();
  int v2 = *(_DWORD *)(Value + 16);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)Value;
  *(_DWORD *)(v0 + 32) = v2;
  AGGraphGetValue();
  AGGraphGetValue();
  uint64_t v3 = swift_bridgeObjectRetain();
  MEMORY[0x18C114450](v3);
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v5, v6);
  DisplayList.init(_:)();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return outlined consume of DisplayList.Item.Value(v5, v6);
}

uint64_t TemporalStackDisplayList.value.getter(uint64_t a1)
{
  unsigned int v3 = *(_DWORD *)(v1 + 8);
  unsigned int v4 = *(_DWORD *)(v1 + 12);
  int v5 = *(_DWORD *)(v1 + 16);
  DisplayList.Version.init(forUpdate:)();
  uint64_t v6 = v25;
  long long v25 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  long long v25 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  int v16 = *(void *)v1;
  *((void *)&v25 + 1) = __PAIR64__(v4, v3);
  LODWORD(v26) = v5;
  *(void *)&long long v25 = specialized TemporalStackDisplayList.children.getter();
  uint64_t v18 = *(void *)(a1 + 16);
  type metadata accessor for TemporalStackChild();
  uint64_t v7 = type metadata accessor for Array();
  type metadata accessor for (StrongHash, DisplayList)();
  uint64_t v9 = v8;
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TemporalStackDisplayList.value.getter, (uint64_t)v17, v7, v9, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v11);
  swift_bridgeObjectRelease();
  uint64_t v21 = v12;
  long long v22 = xmmword_18834C6D0;
  char v24 = 0;
  __int16 v23 = 0;
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v14 = Value[1];
  long long v25 = *Value;
  long long v26 = v14;
  MEMORY[0x18C114450]();
  int v20 = v16;
  uint64_t v19 = v6;
  DisplayList.Item.init(_:frame:identity:version:)();
  return DisplayList.init(_:)();
}

uint64_t closure #1 in TemporalStackDisplayList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for TemporalStackChild() + 28);
  int v4 = *(_DWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_DWORD *)(a2 + 16) = v4;
  if ((_ViewOutputs.subscript.getter() & 0x100000000) != 0) {
    return DisplayList.init()();
  }
  uint64_t Value = AGGraphGetValue();
  __int16 v6 = *(_WORD *)(Value + 8);
  char v7 = *(unsigned char *)(Value + 10);
  *(void *)(a2 + 24) = *(void *)Value;
  *(_WORD *)(a2 + 32) = v6;
  *(unsigned char *)(a2 + 34) = v7;
  return swift_bridgeObjectRetain();
}

uint64_t TemporalStackPreference.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v49 = (char *)&v43 - v9;
  uint64_t v10 = type metadata accessor for TemporalStackChild();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  double v13 = MEMORY[0x1F4188790](v10);
  int v15 = (char *)&v43 - v14;
  int v16 = *(void (**)(uint64_t, uint64_t, double))(a3 + 16);
  uint64_t v52 = a4;
  v16(a2, a3, v13);
  uint64_t v17 = a3;
  uint64_t v51 = a1;
  uint64_t v57 = a2;
  uint64_t v18 = specialized TemporalStackPreference.children.getter();
  uint64_t v19 = swift_bridgeObjectRetain();
  if (MEMORY[0x18C115CB0](v19, v10))
  {
    uint64_t v20 = v8;
    uint64_t v21 = 0;
    long long v22 = &v15[*(int *)(v10 + 36)];
    uint64_t v54 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v55 = (void (**)(char *, void *, uint64_t))(v11 + 16);
    uint64_t v56 = v17;
    uint64_t v46 = (void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    uint64_t v47 = v17 + 24;
    char v45 = (void (**)(uint64_t, uint64_t))(v20 + 8);
    uint64_t v43 = v12;
    int v44 = (void (**)(uint64_t, char *, uint64_t))(v20 + 32);
    int v53 = 1;
    __int16 v23 = v15;
    uint64_t v48 = v11;
    while (1)
    {
      Swift::Bool IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)();
      if (IsNativeType)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v23, v18+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v21, v10);
        uint64_t v32 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_14;
        }
      }
      else
      {
        uint64_t result = _ArrayBuffer._getElementSlowPath(_:)();
        if (v43 != 8)
        {
          __break(1u);
          return result;
        }
        v58[0] = result;
        (*v55)(v23, v58, v10);
        swift_unknownObjectRelease();
        uint64_t v32 = v21 + 1;
        if (__OFADD__(v21, 1))
        {
LABEL_14:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      uint64_t v33 = *(void *)v22;
      long long v34 = *v54;
      swift_bridgeObjectRetain();
      uint64_t v35 = *((void *)v22 + 1);
      v34(v23, v10);
      v58[0] = v33;
      v58[1] = v35;
      uint64_t v36 = _ViewOutputs.subscript.getter();
      uint64_t v37 = swift_bridgeObjectRelease();
      if ((v36 & 0x100000000) == 0)
      {
        if (v53)
        {
          uint64_t v24 = AssociatedTypeWitness;
          uint64_t Value = AGGraphGetValue();
          long long v26 = v22;
          uint64_t v27 = v23;
          uint64_t v28 = v49;
          (*v46)(v49, Value, v24);
          uint64_t v29 = v52;
          (*v45)(v52, v24);
          uint64_t v30 = v28;
          __int16 v23 = v27;
          long long v22 = v26;
          uint64_t v11 = v48;
          (*v44)(v29, v30, v24);
        }
        else
        {
          double v38 = MEMORY[0x1F4188790](v37);
          uint64_t v39 = v52;
          uint64_t v41 = v56;
          uint64_t v40 = v57;
          *(&v43 - 4) = v51;
          *(&v43 - 3) = v40;
          *(&v43 - 2) = v41;
          *((_DWORD *)&v43 - 2) = v36;
          (*(void (**)(uint64_t, uint64_t (*)@<X0>(uint64_t@<X8>), double))(v41 + 24))(v39, partial apply for closure #1 in TemporalStackPreference.value.getter, v38);
        }
        int v53 = 0;
      }
      ++v21;
      if (v32 == MEMORY[0x18C115CB0](v18, v10)) {
        return swift_bridgeObjectRelease();
      }
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in TemporalStackPreference.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t Value = AGGraphGetValue();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, Value, AssociatedTypeWitness);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance TemporalStackPreference<A, B>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for Rule.value.getter in conformance TemporalStackPreference<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return TemporalStackPreference.value.getter(a1[2], a1[3], a1[4], a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TemporalStackPreference<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t specialized static TemporalState.== infix(_:_:)(int32x4_t *a1, int32x4_t *a2)
{
  char v3 = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*a1, *a2)), 0xFuLL))) & 1) != 0
    && a1[1].i32[0] == a2[1].i32[0])
  {
    __int8 v4 = a2[2].i8[2];
    __int16 v5 = a2[2].i16[0];
    uint64_t v6 = a2[1].i64[1];
    __int8 v7 = a1[2].i8[2];
    __int16 v8 = a1[2].i16[0];
    uint64_t v13 = a1[1].i64[1];
    __int16 v14 = v8;
    __int8 v15 = v7;
    uint64_t v10 = v6;
    __int16 v11 = v5;
    __int8 v12 = v4;
    char v3 = MEMORY[0x18C10C5C0](&v13, &v10);
  }
  return v3 & 1;
}

uint64_t type metadata accessor for TemporalStackChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TemporalStackChildren()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for TemporalStackPreference()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TemporalStackLayoutComputer()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type LayoutChildGeometries and conformance LayoutChildGeometries()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutChildGeometries and conformance LayoutChildGeometries;
  if (!lazy protocol witness table cache variable for type LayoutChildGeometries and conformance LayoutChildGeometries)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutChildGeometries and conformance LayoutChildGeometries);
  }
  return result;
}

uint64_t partial apply for closure #2 in static TemporalStack._makeView(view:inputs:)(uint64_t a1)
{
  int v3 = *(_DWORD *)(v1 + 64);
  uint64_t result = type metadata accessor for TemporalStackChildren();
  *(_DWORD *)(a1 + 92) = v3;
  return result;
}

uint64_t type metadata accessor for TemporalStackDisplayList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TemporalStateViewModifier.MakeState()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type TemporalStateDisplayList and conformance TemporalStateDisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type TemporalStateDisplayList and conformance TemporalStateDisplayList;
  if (!lazy protocol witness table cache variable for type TemporalStateDisplayList and conformance TemporalStateDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TemporalStateDisplayList and conformance TemporalStateDisplayList);
  }
  return result;
}

uint64_t type metadata accessor for TemporalStateViewModifier.AddState()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<[ArchivedViewState]>()
{
  if (!lazy cache variable for type metadata for Attribute<[ArchivedViewState]>)
  {
    _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(255, &lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<[ArchivedViewState]>);
    }
  }
}

uint64_t sub_1881DA52C()
{
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for TemporalStateDisplayList(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 13)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TemporalStateDisplayList(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 13) = v3;
  return result;
}

void *type metadata accessor for TemporalStateDisplayList()
{
  return &unk_1ED4735D8;
}

uint64_t initializeWithCopy for TemporalState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TemporalState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  return a1;
}

uint64_t assignWithTake for TemporalState(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(unsigned char *)(a1 + 34) = *(unsigned char *)(a2 + 34);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemporalState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 35)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TemporalState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 34) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 35) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 35) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for TemporalState()
{
  return &unk_1ED473A48;
}

uint64_t initializeWithCopy for TemporalStackChildren(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  uint64_t v6 = *(void **)(a2 + 96);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v6;
  *(void *)(a1 + 104) = v5;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TemporalStackChildren(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  long long v4 = *(void **)(a2 + 96);
  uint64_t v5 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v4;
  id v6 = v4;

  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

__n128 __swift_memcpy116_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for TemporalStackChildren(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;

  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemporalStackChildren(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 116)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TemporalStackChildren(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 116) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 116) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata completion function for TemporalStackChild()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TemporalStackChild(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 27) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4) > 0x18)
  {
    uint64_t v9 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v11 = ((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    long long v12 = *(_OWORD *)v11;
    *(_DWORD *)(v10 + 16) = *(_DWORD *)(v11 + 16);
    *(_OWORD *)unint64_t v10 = v12;
    uint64_t v13 = (void *)((v10 + 27) & 0xFFFFFFFFFFFFFFF8);
    __int16 v14 = (void **)((v11 + 27) & 0xFFFFFFFFFFFFFFF8);
    __int8 v15 = *v14;
    *uint64_t v13 = *v14;
    unint64_t v16 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v16 = *(void *)v17;
    *(_DWORD *)(v16 + 8) = *(_DWORD *)(v17 + 8);
    *(_DWORD *)(v16 + 12) = *(_DWORD *)(v17 + 12);
    *(_DWORD *)((v16 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)((v17 + 19) & 0xFFFFFFFFFFFFFFF8);
    id v18 = v15;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for TemporalStackChild(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TemporalStackChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  int v9 = *(_DWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_DWORD *)(v7 + 16) = v9;
  unint64_t v10 = (void *)((v7 + 27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = (void **)((v8 + 27) & 0xFFFFFFFFFFFFFFF8);
  long long v12 = *v11;
  *unint64_t v10 = *v11;
  unint64_t v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(v14 + 8);
  *(_DWORD *)(v13 + 12) = *(_DWORD *)(v14 + 12);
  *(_DWORD *)((v13 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)((v14 + 19) & 0xFFFFFFFFFFFFFFF8);
  id v15 = v12;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TemporalStackChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 3;
  unint64_t v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v7 = *v8;
  v7[1] = v8[1];
  _OWORD v7[2] = v8[2];
  v7[3] = v8[3];
  void v7[4] = v8[4];
  int v9 = (void **)(((unint64_t)v7 + 27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void **)(((unint64_t)v8 + 27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = *v10;
  long long v12 = *v9;
  *int v9 = *v10;
  id v13 = v11;

  unint64_t v14 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v14 + 8) = *(_DWORD *)(v15 + 8);
  *(_DWORD *)(v14 + 12) = *(_DWORD *)(v15 + 12);
  *(_DWORD *)((v14 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)((v15 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for TemporalStackChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  int v9 = *(_DWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_DWORD *)(v7 + 16) = v9;
  unint64_t v10 = (void *)((v7 + 27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = (void *)((v8 + 27) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v10 = *v11;
  long long v12 = (_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v13 = (_OWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v12 = *v13;
  *(_DWORD *)(((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TemporalStackChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 3;
  unint64_t v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v7 = *v8;
  v7[1] = v8[1];
  _OWORD v7[2] = v8[2];
  v7[3] = v8[3];
  void v7[4] = v8[4];
  int v9 = (void **)(((unint64_t)v7 + 27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void **)(((unint64_t)v8 + 27) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v11 = *v9;
  *int v9 = *v10;

  unint64_t v12 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v12 = *(void *)v13;
  swift_bridgeObjectRelease();
  *(_DWORD *)(v12 + 8) = *(_DWORD *)(v13 + 8);
  *(_DWORD *)(v12 + 12) = *(_DWORD *)(v13 + 12);
  *(_DWORD *)((v12 + 19) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)((v13 + 19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemporalStackChild(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2
    && *((unsigned char *)a1
       + ((((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 27) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v7 + *a1 + 1;
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v9 = *(void *)(((((unint64_t)a1 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 27) & 0xFFFFFFFFFFFFFFF8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

void storeEnumTagSinglePayload for TemporalStackChild(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = (((((((v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 27) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v8 >= a2)
  {
    if (v8 < a3) {
      a1[v10] = 0;
    }
    if (a2)
    {
      if (v7 < 0x7FFFFFFF)
      {
        unint64_t v13 = (void *)((((unint64_t)&a1[v9 + 3] & 0xFFFFFFFFFFFFFFFCLL) + 27) & 0xFFFFFFFFFFFFFFF8);
        if ((a2 & 0x80000000) != 0) {
          uint64_t v14 = a2 ^ 0x80000000;
        }
        else {
          uint64_t v14 = a2 - 1;
        }
        *unint64_t v13 = v14;
      }
      else
      {
        unint64_t v12 = *(void (**)(void))(v6 + 56);
        v12();
      }
    }
  }
  else
  {
    int v11 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v11;
    if (v8 < a3) {
      a1[v10] = 1;
    }
  }
}

uint64_t base witness table accessor for _AttributeBody in TemporalStackPreference<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TemporalStateViewModifier<A>.MakeState()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TemporalStateViewModifier<A>.AddState()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TemporalStackDisplayList<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TemporalStackLayoutComputer<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TemporalStackChildren<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TemporalStackChildView()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for TemporalStackChildGeometry()
{
  return __swift_instantiateGenericMetadata();
}

void _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t specialized TemporalStackChildGeometry.children.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t specialized TemporalStackDisplayList.children.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t specialized TemporalStackPreference.children.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t partial apply for closure #1 in TemporalStackPreference.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TemporalStackPreference.value.getter(a1);
}

uint64_t partial apply for closure #1 in TemporalStackLayoutComputer.updateValue()()
{
  return closure #1 in TemporalStackLayoutComputer.updateValue()();
}

unint64_t lazy protocol witness table accessor for type _ZStackLayout and conformance _ZStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout;
  if (!lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ZStackLayout and conformance _ZStackLayout);
  }
  return result;
}

uint64_t partial apply for closure #1 in TemporalStackDisplayList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in TemporalStackDisplayList.value.getter(a1, a2);
}

void type metadata accessor for (StrongHash, DisplayList)()
{
  if (!lazy cache variable for type metadata for (StrongHash, DisplayList))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StrongHash, DisplayList));
    }
  }
}

uint64_t type metadata completion function for TemporalStackChildView()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TemporalStackChildView(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if ((v6 | 3uLL) > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 4) & (unint64_t)~v6) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(v6 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v6 + 4) & ~v6, ((unint64_t)a2 + v6 + 4) & ~v6, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t destroy for TemporalStackChildView(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = AssociatedTypeWitness;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  return v4(v6, v5);
}

_DWORD *initializeWithCopy for TemporalStackChildView(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *assignWithCopy for TemporalStackChildView(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *initializeWithTake for TemporalStackChildView(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *assignWithTake for TemporalStackChildView(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for TemporalStackChildView(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (!a2) {
    return 0;
  }
  if (a2 <= v6) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v7 + 4) & ~v7) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v6)
      {
        unint64_t v13 = *(uint64_t (**)(unint64_t))(v5 + 48);
        return v13(((unint64_t)a1 + v7 + 4) & ~v7);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v6 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for TemporalStackChildView(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 4) & ~v8) + *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v11 = ~v7 + a2;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v9)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        return;
      default:
        return;
    }
  }
  switch(v10)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881DBF50);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v15 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
        v15((unint64_t)&a1[v8 + 4] & ~v8, a2);
      }
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in TemporalStackChildGeometry<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TemporalStackChildView<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in TemporalStackChildView.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TemporalStackChildView.value.getter(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], a1);
}

unint64_t SelectionBasedStorage.$menu.getter(unsigned int a1)
{
  uint64_t v1 = a1;
  if (*MEMORY[0x1E4F4E7A0] == a1) {
    uint64_t v1 = 0;
  }
  return v1 | ((unint64_t)(*MEMORY[0x1E4F4E7A0] == a1) << 32);
}

unint64_t SelectionBasedStorage.$action.getter(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = a2;
  if (*MEMORY[0x1E4F4E7A0] == a2) {
    uint64_t v2 = 0;
  }
  return v2 | ((unint64_t)(*MEMORY[0x1E4F4E7A0] == a2) << 32);
}

unint64_t SelectionBasedStorage.$isSelectionEnabled.getter(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = HIDWORD(a2);
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a2)) {
    unint64_t v2 = 0;
  }
  return v2 | ((unint64_t)(*MEMORY[0x1E4F4E7A0] == HIDWORD(a2)) << 32);
}

uint64_t _GraphInputs.setSelectionStorage<A>(_:forType:)(uint64_t a1, uint64_t a2)
{
  v3[0] = a1;
  v3[1] = a2;
  type metadata accessor for _GraphInputs.SelectionBasedStorageKey();
  swift_getWitnessTable();
  return specialized _GraphInputs.subscript.setter((uint64_t)v3);
}

unint64_t WeakSelectionBasedStorage.$menu.getter()
{
  unsigned int Attribute = AGWeakAttributeGetAttribute();
  if (Attribute == *MEMORY[0x1E4F4E7A0]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = Attribute;
  }
  return v1 | ((unint64_t)(Attribute == *MEMORY[0x1E4F4E7A0]) << 32);
}

uint64_t (*WeakSelectionBasedStorage.action.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6))()
{
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Optional();
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue) {
    return (uint64_t (*)())1;
  }
  uint64_t v9 = *WeakValue;
  if (!*WeakValue) {
    return 0;
  }
  uint64_t v10 = WeakValue[1];
  unsigned int v11 = (void *)swift_allocObject();
  _OWORD v11[2] = a5;
  v11[3] = a6;
  void v11[4] = v9;
  void v11[5] = v10;
  swift_retain();
  return thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A>) -> (@out ())partial apply;
}

unint64_t WeakSelectionBasedStorage.$isSelectionEnabled.getter()
{
  unsigned int Attribute = AGWeakAttributeGetAttribute();
  if (Attribute == *MEMORY[0x1E4F4E7A0]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = Attribute;
  }
  return v1 | ((unint64_t)(Attribute == *MEMORY[0x1E4F4E7A0]) << 32);
}

unint64_t WeakSelectionBasedStorage.$action.getter()
{
  unsigned int Attribute = AGWeakAttributeGetAttribute();
  if (Attribute == *MEMORY[0x1E4F4E7A0]) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = Attribute;
  }
  return v1 | ((unint64_t)(Attribute == *MEMORY[0x1E4F4E7A0]) << 32);
}

uint64_t SelectionMenuModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)&long long v29 = a2;
  *((void *)&v29 + 1) = a3;
  swift_retain();
  type metadata accessor for SelectionMenuModifier();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for _ViewModifier_Content();
  *(void *)&long long v41 = a4;
  *((void *)&v41 + 1) = a5;
  *(void *)&long long v42 = a6;
  *((void *)&v42 + 1) = a7;
  uint64_t v12 = type metadata accessor for SelectionMenuModifierCore();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v39, &v29, v11, v12, WitnessTable);
  swift_release();
  long long v29 = v39[0];
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v27 = WitnessTable;
  uint64_t v28 = &protocol witness table for SelectionMenuModifierCore<A, B>;
  uint64_t v15 = swift_getWitnessTable();
  View.sharingPickerHost()(v14, v15);
  swift_release();
  v39[6] = v47;
  v39[7] = v48;
  v39[8] = v49;
  v39[2] = v43;
  void v39[3] = v44;
  v39[4] = v45;
  v39[5] = v46;
  v39[0] = v41;
  v39[1] = v42;
  long long v23 = v47;
  long long v24 = v48;
  long long v25 = v49;
  long long v19 = v43;
  long long v20 = v44;
  long long v21 = v45;
  long long v22 = v46;
  uint64_t v40 = v50;
  uint64_t v26 = v50;
  long long v17 = v41;
  long long v18 = v42;
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v17);
  outlined release of ModifiedContent<ModifiedContent<_ViewModifier_Content<SelectionMenuModifier<A, B>>, SelectionMenuModifierCore<A, B>>, StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>>((uint64_t)v39);
  long long v47 = v35;
  long long v48 = v36;
  long long v49 = v37;
  long long v43 = v31;
  long long v44 = v32;
  long long v45 = v33;
  long long v46 = v34;
  long long v41 = v29;
  long long v42 = v30;
  long long v23 = v35;
  long long v24 = v36;
  long long v25 = v37;
  long long v19 = v31;
  long long v20 = v32;
  long long v21 = v33;
  long long v22 = v34;
  uint64_t v50 = v38;
  uint64_t v26 = v38;
  long long v17 = v29;
  long long v18 = v30;
  static ViewBuilder.buildExpression<A>(_:)(&v17);
  return outlined release of ModifiedContent<ModifiedContent<_ViewModifier_Content<SelectionMenuModifier<A, B>>, SelectionMenuModifierCore<A, B>>, StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>>((uint64_t)&v41);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance SelectionMenuModifier<A, B>(uint64_t a1, uint64_t *a2)
{
  return SelectionMenuModifier.body(content:)(a1, *v2, v2[1], a2[2], a2[3], a2[4], a2[5]);
}

uint64_t static SelectionMenuModifierCore._makeInputs(modifier:inputs:)(int *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  int v11 = *a1;
  int v12 = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  uint64_t v14 = *(void *)(a2 + 40);
  id v42 = *(id *)a2;
  LODWORD(v43) = v12;
  uint64_t v44 = v13;
  long long v45 = *(_OWORD *)(a2 + 24);
  *(void *)&long long v46 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewInputs.init(withoutGeometry:)();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
  LODWORD(v38) = v11;
  uint64_t v15 = (uint64_t)a3;
  id v42 = a3;
  uint64_t v36 = a4;
  uint64_t v43 = a4;
  uint64_t v16 = a5;
  uint64_t v44 = a5;
  uint64_t v37 = a6;
  *(void *)&long long v45 = a6;
  type metadata accessor for SelectionMenuModifierCore();
  type metadata accessor for _GraphValue();
  int v17 = _GraphValue.value.getter();
  long long v35 = v55;
  uint64_t v18 = v57;
  long long v34 = v58;
  id v19 = (id)AGSubgraphGetCurrent();
  if (!v19) {
    __break(1u);
  }
  v33[1] = v33;
  id v42 = v19;
  LODWORD(v43) = v17;
  uint64_t v44 = v52;
  LODWORD(v45) = v53;
  *((void *)&v45 + 1) = v54;
  long long v46 = v35;
  uint64_t v47 = v56;
  uint64_t v48 = v57;
  long long v49 = v34;
  uint64_t v50 = v59;
  int v51 = v60;
  MEMORY[0x1F4188790](v19);
  *(void *)&long long v35 = v18;
  type metadata accessor for Set();
  v30[2] = swift_getFunctionTypeMetadata1();
  uint64_t v38 = v15;
  uint64_t v39 = v36;
  uint64_t v40 = v16;
  uint64_t v41 = v37;
  uint64_t v31 = type metadata accessor for SelectionMenuModifierCore.Child();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v42, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v30, v31, MEMORY[0x1E4FBC248], v20, MEMORY[0x1E4FBC278], v21);
  long long v22 = v42;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  uint64_t v23 = v38;
  int v24 = *(_DWORD *)(a2 + 8);
  uint64_t v25 = *(void *)(a2 + 16);
  uint64_t v26 = *(void *)(a2 + 40);
  id v42 = *(id *)a2;
  LODWORD(v43) = v24;
  uint64_t v44 = v25;
  long long v45 = *(_OWORD *)(a2 + 24);
  *(void *)&long long v46 = v26;
  uint64_t v27 = _GraphInputs.selectionStorage<A>(forType:)();
  _GraphInputs.setSelectionStorage<A>(_:forType:)(v27 & 0xFFFFFFFF00000000 | v23, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t (*SelectionMenuModifierCore.Child.value.getter(uint64_t a1))(uint64_t a1)
{
  long long v3 = *(_OWORD *)(v1 + 80);
  v12[4] = *(_OWORD *)(v1 + 64);
  void v12[5] = v3;
  int v13 = *(_DWORD *)(v1 + 96);
  long long v4 = *(_OWORD *)(v1 + 16);
  v12[0] = *(_OWORD *)v1;
  v12[1] = v4;
  long long v5 = *(_OWORD *)(v1 + 48);
  unint64_t v12[2] = *(_OWORD *)(v1 + 32);
  v12[3] = v5;
  uint64_t v6 = swift_allocObject();
  long long v7 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 32) = v7;
  long long v8 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v6 + 112) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v6 + 128) = v8;
  *(_DWORD *)(v6 + 144) = *(_DWORD *)(v1 + 96);
  long long v9 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)v1;
  *(_OWORD *)(v6 + 64) = v9;
  long long v10 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v6 + 96) = v10;
  outlined retain of SelectionEditMenuModifier<A>.Child((void **)v12);
  return partial apply for closure #1 in SelectionMenuModifierCore.Child.value.getter;
}

uint64_t closure #1 in SelectionMenuModifierCore.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  AGGraphClearUpdate();
  id v10 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in closure #1 in SelectionMenuModifierCore.Child.value.getter(a2, a1, a4, a6, &v12);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v12;
}

uint64_t closure #1 in closure #1 in SelectionMenuModifierCore.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = &v29[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v14 = v13[5];
  long long v39 = v13[4];
  long long v40 = v14;
  int v41 = *((_DWORD *)v13 + 24);
  long long v15 = v13[1];
  long long v35 = *v13;
  long long v36 = v15;
  long long v16 = v13[3];
  long long v37 = v13[2];
  long long v38 = v16;
  uint64_t v31 = v17;
  uint64_t v32 = v18;
  uint64_t v33 = v19;
  uint64_t v34 = v20;
  type metadata accessor for SelectionMenuModifierCore.Child();
  uint64_t v21 = (void (*)(uint64_t))specialized SelectionMenuModifierCore.Child.modifier.getter();
  swift_retain();
  v21(a2);
  swift_release();
  uint64_t v30 = a3;
  uint64_t v22 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v29, a3, MEMORY[0x1E4FBC248], v22, MEMORY[0x1E4FBC278], v23);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a3);
  _GraphValue.init(_:)();
  long long v24 = *(_OWORD *)(a1 + 64);
  long long v37 = *(_OWORD *)(a1 + 48);
  long long v38 = v24;
  long long v39 = *(_OWORD *)(a1 + 80);
  LODWORD(v40) = *(_DWORD *)(a1 + 96);
  long long v25 = *(_OWORD *)(a1 + 32);
  long long v35 = *(_OWORD *)(a1 + 16);
  long long v36 = v25;
  (*(void (**)(uint64_t *__return_ptr, char *, long long *, uint64_t, uint64_t))(a4 + 24))(&v31, (char *)&v28 + 4, &v35, a3, a4);
  *(void *)&long long v35 = v31;
  DWORD2(v35) = v32;
  uint64_t v26 = PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  if ((v26 & 0x100000000) != 0)
  {
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  else
  {
    AGGraphGetValue();
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a5 = result;
  return result;
}

__n128 protocol witness for Rule.value.getter in conformance SelectionMenuModifierCore<A, B>.Child@<Q0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = SelectionMenuModifierCore.Child.value.getter(a1);
  uint64_t v6 = v5;
  uint64_t v7 = swift_allocObject();
  __n128 result = *(__n128 *)(a1 + 16);
  long long v9 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(v7 + 16) = result;
  *(_OWORD *)(v7 + 32) = v9;
  *(void *)(v7 + 48) = v4;
  *(void *)(v7 + 56) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<A>) -> (@owned PlatformItemList);
  a2[1] = v7;
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SelectionMenuModifierCore<A, B>(int *a1, uint64_t a2, uint64_t a3)
{
  return static SelectionMenuModifierCore._makeInputs(modifier:inputs:)(a1, a2, *(void **)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SelectionMenuModifierCore<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for SelectionMenuModifierCore<A, B>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SelectionMenuModifierCore<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for SelectionMenuModifierCore<A, B>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SelectionMenuModifierCore<A, B>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t static SelectionActionModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[5];
  uint64_t v22 = *a2;
  LODWORD(KeyPath) = v6;
  uint64_t v24 = v7;
  long long v25 = *(_OWORD *)(a2 + 3);
  uint64_t v26 = v8;
  uint64_t v9 = _GraphInputs.selectionStorage<A>(forType:)();
  unint64_t v11 = v10 & 0xFFFFFFFF00000000;
  type metadata accessor for SelectionActionModifier();
  type metadata accessor for _GraphValue();
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  LODWORD(v22) = _GraphValue.value.getter();
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = type metadata accessor for Focus();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v22, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v16, v18, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v13);
  swift_release();
  swift_release();
  return _GraphInputs.setSelectionStorage<A>(_:forType:)(v9, v11 | v15);
}

uint64_t key path getter for SelectionActionModifier.action : <A>SelectionActionModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1)
  {
    uint64_t v7 = a3 + a2;
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(void *)(v8 + 32) = v5;
    *(void *)(v8 + 40) = v6;
    uint64_t v9 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<A>) -> ();
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  *a4 = v9;
  a4[1] = v8;

  return outlined copy of AppIntentExecutor?(v5);
}

uint64_t key path setter for SelectionActionModifier.action : <A>SelectionActionModifier<A>(uint64_t *a1, uint64_t (**a2)(uint64_t a1), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1)
  {
    uint64_t v7 = a4 + a3;
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = *(_OWORD *)(v7 - 16);
    *(void *)(v8 + 32) = v5;
    *(void *)(v8 + 40) = v6;
    uint64_t v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A>) -> (@out ());
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = 0;
  }
  uint64_t v10 = *a2;
  unint64_t v11 = a2[1];
  outlined copy of AppIntentExecutor?(v5);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v10, v11);
  *a2 = v9;
  a2[1] = (uint64_t (*)(uint64_t))v8;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SelectionActionModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for SelectionActionModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SelectionActionModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for SelectionActionModifier<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SelectionActionModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SelectionActionModifier<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return static SelectionActionModifier._makeInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t static SelectionEnabledModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[5];
  uint64_t v22 = *a2;
  LODWORD(KeyPath) = v6;
  uint64_t v24 = v7;
  long long v25 = *(_OWORD *)(a2 + 3);
  uint64_t v26 = v8;
  uint64_t v9 = _GraphInputs.selectionStorage<A>(forType:)();
  unsigned int v11 = v10;
  type metadata accessor for SelectionEnabledModifier();
  type metadata accessor for _GraphValue();
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  LODWORD(v22) = _GraphValue.value.getter();
  uint64_t KeyPath = swift_getKeyPath();
  FunctionTypeMetadata1 = swift_getFunctionTypeMetadata1();
  uint64_t v18 = type metadata accessor for Focus();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v22, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v16, v18, MEMORY[0x1E4FBC248], v12, MEMORY[0x1E4FBC278], v13);
  swift_release();
  swift_release();
  return _GraphInputs.setSelectionStorage<A>(_:forType:)(v9, v11 | ((unint64_t)v15 << 32));
}

uint64_t key path getter for SelectionEnabledModifier.isEnabled : <A>SelectionEnabledModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a3 + a2;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 40) = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@unowned Bool);
  a4[1] = v8;

  return swift_retain();
}

uint64_t key path setter for SelectionEnabledModifier.isEnabled : <A>SelectionEnabledModifier<A>(uint64_t *a1, uint64_t (**a2)(), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + a3;
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(v5 - 16);
  *(void *)(v8 + 32) = v7;
  *(void *)(v8 + 40) = v6;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Bool);
  a2[1] = (uint64_t (*)())v8;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SelectionEnabledModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for SelectionEnabledModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SelectionEnabledModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for SelectionEnabledModifier<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SelectionEnabledModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SelectionEnabledModifier<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return static SelectionEnabledModifier._makeInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t View.contextMenu<A, B>(forSelectionType:menu:primaryAction:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X4>, uint64_t a5@<X5>, uint64_t (*a6)()@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v34 = (uint64_t (*)())a3;
  long long v35 = a4;
  uint64_t v36 = a8;
  uint64_t v29 = a2;
  uint64_t v31 = a9;
  uint64_t v32 = a1;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v43 = a11;
  uint64_t v44 = _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>);
  uint64_t v33 = MEMORY[0x1E4F3FBC0];
  long long v39 = a6;
  long long v40 = (void *)v14;
  uint64_t v41 = a10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for SelectionMenuModifier();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v30 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v29 - v17;
  uint64_t v19 = (void *)swift_allocObject();
  unint64_t v19[2] = a5;
  v19[3] = a6;
  v19[4] = a7;
  uint64_t v21 = v31;
  uint64_t v20 = v32;
  v19[5] = v31;
  v19[6] = a10;
  v19[7] = a11;
  v19[8] = v20;
  v19[9] = v29;
  long long v39 = partial apply for closure #1 in View.contextMenu<A, B>(forSelectionType:menu:primaryAction:);
  long long v40 = v19;
  swift_retain();
  uint64_t v22 = v21;
  MEMORY[0x18C113660](&v39, a5, v15, v21);
  swift_release();
  uint64_t v24 = (uint64_t)v34;
  uint64_t v23 = v35;
  long long v39 = v34;
  long long v40 = v35;
  outlined copy of AppIntentExecutor?((uint64_t)v34);
  uint64_t v25 = type metadata accessor for SelectionActionModifier();
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v37 = v22;
  uint64_t v38 = v26;
  uint64_t v27 = swift_getWitnessTable();
  MEMORY[0x18C113660](&v39, v16, v25, v27);
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v24, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v18, v16);
}

uint64_t type metadata accessor for SelectionMenuModifier()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1881DD764()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for SelectionActionModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.contextMenu<A, B>(forSelectionType:menu:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = (void *)swift_allocObject();
  _OWORD v16[2] = a4;
  void v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  v16[6] = a8;
  v16[7] = a9;
  v16[8] = a2;
  v16[9] = a3;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  type metadata accessor for ModifiedContent();
  unint64_t v19[2] = a9;
  v19[3] = _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>);
  swift_getWitnessTable();
  v19[0] = partial apply for closure #1 in View.contextMenu<A, B>(forSelectionType:menu:primaryAction:);
  v19[1] = v16;
  swift_retain();
  uint64_t v17 = type metadata accessor for SelectionMenuModifier();
  MEMORY[0x18C113660](v19, a4, v17, a7);
  return swift_release();
}

uint64_t closure #1 in View.contextMenu<A, B>(forSelectionType:menu:primaryAction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a6 - 8);
  double v8 = MEMORY[0x1F4188790](a1);
  unsigned int v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11(v8);
  View.styleContext<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, a6);
}

uint64_t partial apply for closure #1 in View.contextMenu<A, B>(forSelectionType:menu:primaryAction:)(uint64_t a1)
{
  return closure #1 in View.contextMenu<A, B>(forSelectionType:menu:primaryAction:)(a1, v1[8], v1[9], v1[2], v1[3], v1[4]);
}

uint64_t View.contextMenu<A, B>(presenting:menu:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t (*a4)()@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  return View.contextMenu<A, B>(forSelectionType:menu:primaryAction:)(a1, a2, 0, 0, a3, a4, a5, a8, a6, a7, a9);
}

uint64_t View.selectionDisabled<A>(for:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a4;
  void v13[3] = a5;
  void v13[4] = a6;
  void v13[5] = a7;
  void v13[6] = a2;
  v13[7] = a3;
  v16[0] = partial apply for closure #1 in View.selectionDisabled<A>(for:_:);
  v16[1] = v13;
  uint64_t v14 = type metadata accessor for SelectionEnabledModifier();
  swift_retain();
  MEMORY[0x18C113660](v16, a4, v14, a6);
  return swift_release();
}

uint64_t sub_1881DDB5C()
{
  swift_release();

  return swift_deallocObject();
}

BOOL partial apply for closure #1 in View.selectionDisabled<A>(for:_:)()
{
  return ((*(uint64_t (**)(void))(v0 + 48))() & 1) == 0;
}

uint64_t type metadata accessor for SelectionEnabledModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.contextAction<A>(forSelectionType:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v12[0] = a2;
  v12[1] = a3;
  uint64_t v10 = type metadata accessor for SelectionActionModifier();
  swift_retain();
  MEMORY[0x18C113660](v12, a4, v10, a6);
  return outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(a2, a3);
}

uint64_t sub_1881DDC70()
{
  return swift_getWitnessTable();
}

uint64_t sub_1881DDDCC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1881DDEE0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzSHRd__r__lAA15ModifiedContentVyxAA24SelectionEnabledModifier33_E64D6BCC46683FFB4BDFBD3A47C476DFLLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for SelectionEnabledModifier);
}

uint64_t sub_1881DDF00(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzSHRd__r__lAA15ModifiedContentVyxAA24SelectionEnabledModifier33_E64D6BCC46683FFB4BDFBD3A47C476DFLLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for SelectionActionModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzSHRd__r__lAA15ModifiedContentVyxAA24SelectionEnabledModifier33_E64D6BCC46683FFB4BDFBD3A47C476DFLLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for WeakSelectionBasedStorage()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in SelectionActionModifier<A>()
{
  return &protocol witness table for SelectionActionModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in SelectionEnabledModifier<A>()
{
  return &protocol witness table for SelectionEnabledModifier<A>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SelectionMenuModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for SelectionMenuModifierCore()
{
  return swift_getGenericMetadata();
}

uint64_t outlined release of ModifiedContent<ModifiedContent<_ViewModifier_Content<SelectionMenuModifier<A, B>>, SelectionMenuModifierCore<A, B>>, StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  long long v11 = *(_OWORD *)(a1 + 96);
  long long v12 = *(_OWORD *)(a1 + 80);
  long long v10 = *(_OWORD *)(a1 + 112);
  uint64_t v8 = *(void *)(a1 + 128);
  swift_release();
  outlined consume of SharingPickerHostModifier.Model?(v14, v13, v2, v3, v4, v5, v6, v7, v12, *((uint64_t *)&v12 + 1), v11, *((uint64_t *)&v11 + 1), v10, *((uint64_t *)&v10 + 1), v8);
  swift_release();
  return a1;
}

uint64_t sub_1881DE0F8()
{
  return 16;
}

__n128 sub_1881DE104(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1881DE110()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out Bool)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 32))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@unowned Bool)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1881DE1BC()
{
  return 16;
}

__n128 sub_1881DE1C8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A>) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 32);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<A>) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 32))(*a1);
}

uint64_t sub_1881DE238()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in SelectionMenuModifierCore<A, B>()
{
  return &protocol witness table for SelectionMenuModifierCore<A, B>;
}

uint64_t type metadata accessor for SelectionMenuModifierCore.Child()
{
  return swift_getGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in SelectionMenuModifierCore<A, B>.Child()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in WeakSelectionBasedStorage.init(_:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in WeakSelectionBasedStorage.init(_:)(a1);
}

{
  uint64_t result;

  __n128 result = AGCreateWeakAttribute();
  *a1 = result;
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<A>) -> (@owned PlatformItemList)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 48))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1881DE428()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SelectionMenuModifierCore.Child.value.getter(uint64_t a1)
{
  return closure #1 in SelectionMenuModifierCore.Child.value.getter(a1, (uint64_t)(v1 + 6), v1[2], v1[3], v1[4], v1[5]);
}

uint64_t specialized SelectionMenuModifierCore.Child.modifier.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI28_LazyLayout_PlacedSubview_V1VG_AF01_fg1_hI0Vs5NeverOTg503_s7d5UI25_fg12_Placements_j23V8subviewsSayAA01_cd15_hi7_F0VGvsQ63_cd1_hI0VAFcfu_33_2a9f168c8e9544d59c906f81ada6624eAfITf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v16;
    uint64_t v4 = (char *)(a1 + 48);
    do
    {
      uint64_t v5 = *((void *)v4 - 2);
      uint64_t v6 = *((void *)v4 - 1);
      char v7 = *v4;
      uint64_t v13 = *((void *)v4 + 1);
      char v12 = v4[16];
      long long v14 = *(_OWORD *)(v4 + 40);
      long long v15 = *(_OWORD *)(v4 + 24);
      unint64_t v8 = *(void *)(v16 + 16);
      unint64_t v9 = *(void *)(v16 + 24);
      swift_retain();
      if (v8 >= v9 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v8 + 1, 1);
      }
      *(void *)(v16 + 16) = v8 + 1;
      uint64_t v10 = v16 + 72 * v8;
      *(void *)(v10 + 32) = v5;
      *(void *)(v10 + 40) = v6;
      *(unsigned char *)(v10 + 48) = v7;
      *(void *)(v10 + 56) = v13;
      *(unsigned char *)(v10 + 64) = v12;
      *(_OWORD *)(v10 + 72) = v15;
      *(_OWORD *)(v10 + 88) = v14;
      v4 += 72;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void static LazyLayout_V1.layoutProperties.getter(_WORD *a1@<X8>)
{
}

{
  *a1 = 2;
}

double LazyLayout_V1.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)@<D0>(__n128 *a1@<X8>)
{
  return LazyLayout_V1.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:)(a1);
}

{
  double result;

  *(void *)&uint64_t result = LazyLayout_V1.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a1).n128_u64[0];
  return result;
}

double LazyLayout_V1.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:)@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = LazyLayout_V1.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a1).n128_u64[0];
  return result;
}

__n128 LazyLayout_V1.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)@<Q0>(__n128 *a1@<X8>)
{
  Array.subscript.getter();
  swift_release();
  a1->n128_u64[0] = v3;
  a1->n128_u8[8] = v4;
  a1[1].n128_u64[0] = v5;
  a1[1].n128_u8[8] = v6;
  __n128 result = v7;
  a1[2] = v7;
  a1[3].n128_u64[0] = v8;
  a1[3].n128_u64[1] = v9;
  return result;
}

void _LazyLayout_Properties_V1.init()(_WORD *a1@<X8>)
{
  *a1 = 2;
}

__n128 _LazyLayout_PlacedSubview_V1.placement.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  char v4 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = *(void *)(v1 + 8);
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  __n128 result = *(__n128 *)(v1 + 40);
  long long v6 = *(_OWORD *)(v1 + 56);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  return result;
}

uint64_t static LazyLayoutAdaptor_V1.layoutProperties.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(a2 + 24))(&v3);
  return (unsigned __int16)v3;
}

uint64_t static LazyLayoutAdaptor_V1.initialCache.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v12 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v8);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v10, AssociatedTypeWitness);
}

double LazyLayoutAdaptor_V1.sizeThatFits(proposedSize:subviews:context:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  outlined init with copy of _LazyLayout_Subviews(a5, (uint64_t)v12);
  double v10 = (*(double (**)(uint64_t))(*(void *)(a8 + 24) + 40))(a1);
  outlined destroy of _LazyLayout_Subviews_V1((uint64_t)v12);
  return v10;
}

uint64_t LazyLayoutAdaptor_V1.spacing(subviews:context:cache:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  outlined init with copy of _LazyLayout_Subviews(a1, (uint64_t)v11);
  long long v10 = *a2;
  (*(void (**)(uint64_t *__return_ptr, unsigned char *, long long *, uint64_t, void))(*(void *)(a4 + 24) + 48))(&v12, v11, &v10, a3, *(void *)(a4 + 16));
  uint64_t result = outlined destroy of _LazyLayout_Subviews_V1((uint64_t)v11);
  *a5 = v12;
  return result;
}

double LazyLayoutAdaptor_V1.place(subviews:context:cache:in:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  memcpy(__dst, a2, 0x129uLL);
  char v9 = *((unsigned char *)a4 + 40);
  char v10 = *((unsigned char *)a4 + 64);
  uint64_t v16 = *a4;
  long long v17 = *(_OWORD *)(a4 + 1);
  long long v18 = *(_OWORD *)(a4 + 3);
  char v19 = v9;
  long long v20 = *((_OWORD *)a4 + 3);
  char v21 = v10;
  outlined init with copy of _LazyLayout_Subviews(a1, (uint64_t)v15);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t *, void))(*(void *)(a5 + 24) + 56))(v15, __dst, a3, &v16, *(void *)(a5 + 16));
  outlined destroy of _LazyLayout_Subviews_V1((uint64_t)v15);
  char v11 = v19;
  char v12 = v21;
  *a4 = v16;
  *(_OWORD *)(a4 + 1) = v17;
  *(_OWORD *)(a4 + 3) = v18;
  *((unsigned char *)a4 + 40) = v11;
  double result = *(double *)&v20;
  *((_OWORD *)a4 + 3) = v20;
  *((unsigned char *)a4 + 64) = v12;
  return result;
}

double LazyLayoutAdaptor_V1.estimatedPlacement(subviews:context:cache:in:)(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  memcpy(__dst, a2, 0x129uLL);
  char v9 = *((unsigned char *)a4 + 8);
  uint64_t v10 = a4[10];
  uint64_t v20 = *a4;
  char v21 = v9;
  long long v11 = *((_OWORD *)a4 + 2);
  long long v22 = *((_OWORD *)a4 + 1);
  long long v23 = v11;
  long long v12 = *((_OWORD *)a4 + 4);
  long long v24 = *((_OWORD *)a4 + 3);
  long long v25 = v12;
  uint64_t v26 = v10;
  outlined init with copy of _LazyLayout_Subviews(a1, (uint64_t)v19);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t *, void))(*(void *)(a5 + 24) + 64))(v19, __dst, a3, &v20, *(void *)(a5 + 16));
  outlined destroy of _LazyLayout_Subviews_V1((uint64_t)v19);
  char v13 = v21;
  uint64_t v14 = v26;
  *a4 = v20;
  *((unsigned char *)a4 + 8) = v13;
  long long v15 = v23;
  *((_OWORD *)a4 + 1) = v22;
  *((_OWORD *)a4 + 2) = v15;
  double result = *(double *)&v24;
  long long v17 = v25;
  *((_OWORD *)a4 + 3) = v24;
  *((_OWORD *)a4 + 4) = v17;
  a4[10] = v14;
  return result;
}

__n128 LazyLayoutAdaptor_V1.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)@<Q0>(void *__src@<X4>, uint64_t a2@<X0>, unsigned int a3@<W3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  memcpy(__dst, __src, sizeof(__dst));
  type metadata accessor for _LazyLayout_Subview_V1?(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  uint64_t v10 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = MEMORY[0x1E4FBC248];
  uint64_t v13 = MEMORY[0x1E4FBC278];
  uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in LazyLayoutAdaptor_V1.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:), 0, v10, (uint64_t)&type metadata for _LazyLayout_PlacedSubview_V1, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v14);
  uint64_t v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in LazyLayoutAdaptor_V1.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:), 0, v10, (uint64_t)&type metadata for _LazyLayout_PlacedSubview_V1, v12, WitnessTable, v13, v16);
  memcpy(v28, __dst, 0x129uLL);
  outlined init with copy of _LazyLayout_Subviews(a4, (uint64_t)v27);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, void, void *, unsigned char *, uint64_t, void, void))(*(void *)(a6 + 24) + 72))(&v29, a2, v15, v17, a3, v28, v27, a5, *(void *)(a6 + 16), *(void *)(a6 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of _LazyLayout_Subviews_V1((uint64_t)v27);
  char v18 = v30;
  uint64_t v19 = v31;
  char v20 = v32;
  __n128 result = v33;
  long long v22 = v34;
  *(void *)a7 = v29;
  *(unsigned char *)(a7 + 8) = v18;
  *(void *)(a7 + 16) = v19;
  *(unsigned char *)(a7 + 24) = v20;
  *(__n128 *)(a7 + 32) = result;
  *(_OWORD *)(a7 + 48) = v22;
  return result;
}

uint64_t closure #1 in LazyLayoutAdaptor_V1.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in LazyLayoutAdaptor_V1.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a1, a2);
}

{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;

  char v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned char *)(a1 + 16);
  char v4 = *(void *)(a1 + 24);
  unint64_t v5 = *(unsigned char *)(a1 + 32);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v4;
  *(unsigned char *)(a2 + 32) = v5;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  return swift_retain();
}

__n128 LazyLayoutAdaptor_V1.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:)@<Q0>(void *__src@<X4>, uint64_t a2@<X0>, unsigned int a3@<W3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  memcpy(__dst, __src, sizeof(__dst));
  type metadata accessor for _LazyLayout_Subview_V1?(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  uint64_t v10 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = MEMORY[0x1E4FBC248];
  uint64_t v13 = MEMORY[0x1E4FBC278];
  uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in LazyLayoutAdaptor_V1.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:), 0, v10, (uint64_t)&type metadata for _LazyLayout_PlacedSubview_V1, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v14);
  uint64_t v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))closure #1 in LazyLayoutAdaptor_V1.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:), 0, v10, (uint64_t)&type metadata for _LazyLayout_PlacedSubview_V1, v12, WitnessTable, v13, v16);
  memcpy(v28, __dst, 0x129uLL);
  outlined init with copy of _LazyLayout_Subviews(a4, (uint64_t)v27);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, void, void *, unsigned char *, uint64_t, void, void))(*(void *)(a6 + 24) + 80))(&v29, a2, v15, v17, a3, v28, v27, a5, *(void *)(a6 + 16), *(void *)(a6 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of _LazyLayout_Subviews_V1((uint64_t)v27);
  char v18 = v30;
  uint64_t v19 = v31;
  char v20 = v32;
  __n128 result = v33;
  long long v22 = v34;
  *(void *)a7 = v29;
  *(unsigned char *)(a7 + 8) = v18;
  *(void *)(a7 + 16) = v19;
  *(unsigned char *)(a7 + 24) = v20;
  *(__n128 *)(a7 + 32) = result;
  *(_OWORD *)(a7 + 48) = v22;
  return result;
}

uint64_t LazyLayoutAdaptor_V1.boundingRect(at:subviews:context:cache:)@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  memcpy(__dst, __src, 0x129uLL);
  outlined init with copy of _LazyLayout_Subviews(a3, (uint64_t)v13);
  (*(void (**)(void *__return_ptr, uint64_t, unsigned char *, unsigned char *, uint64_t, void))(*(void *)(a5 + 24) + 88))(v14, a2, v13, __dst, a4, *(void *)(a5 + 16));
  outlined destroy of _LazyLayout_Subviews_V1((uint64_t)v13);
  return outlined init with take of CGRect?((uint64_t)v14, a6);
}

uint64_t protocol witness for static LazyLayout.layoutProperties.getter in conformance LazyLayoutAdaptor_V1<A>(uint64_t a1)
{
  return static LazyLayoutAdaptor_V1.layoutProperties.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for static LazyLayout.initialCache.getter in conformance LazyLayoutAdaptor_V1<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static LazyLayoutAdaptor_V1.initialCache.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

double protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyLayoutAdaptor_V1<A>(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return LazyLayoutAdaptor_V1.sizeThatFits(proposedSize:subviews:context:cache:)(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, a8);
}

uint64_t protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyLayoutAdaptor_V1<A>()
{
  return specialized LazyLayoutAdaptor_V1.firstIndex<A>(of:subviews:context:)();
}

uint64_t protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyLayoutAdaptor_V1<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  LazyLayoutAdaptor_V1.boundingRect(at:subviews:context:cache:)(a3, a1, a2, a4, a5, (uint64_t)v8);
  return outlined init with take of CGRect?((uint64_t)v8, a6);
}

void protocol witness for LazyLayout.pinnedViews.getter in conformance LazyLayoutAdaptor_V1<A>(_DWORD *a1@<X8>)
{
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance LazyLayoutAdaptor_V1<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for LazyLayoutAdaptor_V1<A>);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyLayoutAdaptor_V1<A>()
{
}

uint64_t _LazyLayout_Properties_V1.axes.getter()
{
  return *v0;
}

uint64_t _LazyLayout_Properties_V1.axes.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_LazyLayout_Properties_V1.axes.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *v1;
  return _LazyLayout_Properties_V1.axes.modify;
}

uint64_t _LazyLayout_Properties_V1.axes.modify(uint64_t result)
{
  **(unsigned char **)__n128 result = *(unsigned char *)(result + 8);
  return result;
}

uint64_t _LazyLayout_Properties_V1.multipleViewAxes.getter()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t _LazyLayout_Properties_V1.multipleViewAxes.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 1) = result;
  return result;
}

unsigned char *(*_LazyLayout_Properties_V1.multipleViewAxes.modify(uint64_t a1))(unsigned char *result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(v1 + 1);
  return _LazyLayout_Properties_V1.multipleViewAxes.modify;
}

unsigned char *_LazyLayout_Properties_V1.multipleViewAxes.modify(unsigned char *result)
{
  *(unsigned char *)(*(void *)result + 1) = result[8];
  return result;
}

BOOL static _LazyLayout_Properties_V1.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _LazyLayout_Properties_V1(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t _LazyLayout_Subviews_V1.estimatedCount.getter()
{
  return _ViewList_Node.estimatedCount(style:)();
}

uint64_t _LazyLayout_Subviews_V1.views(from:)@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of _LazyLayout_Subviews(v1, a1);
}

uint64_t _LazyLayout_Subviews_V1.SubviewsSequence.makeIterator()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = outlined init with copy of _LazyLayout_Subviews(v1, a1);
  *(void *)(a1 + 120) = 0;
  return result;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance _LazyLayout_Subviews_V1.SubviewsSequence@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of _LazyLayout_Subviews(v1, a1);
  *(void *)(a1 + 120) = 0;

  return outlined destroy of _LazyLayout_Subviews_V1.SubviewsSequence(v1);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance _LazyLayout_Subviews_V1.SubviewsSequence()
{
  uint64_t v1 = specialized _copySequenceToContiguousArray<A>(_:)(v0);
  outlined destroy of _LazyLayout_Subviews_V1.SubviewsSequence(v0);
  return v1;
}

uint64_t _LazyLayout_Subviews_V1.SubviewsIterator.next()@<X0>(_OWORD *a1@<X8>)
{
  *(_OWORD *)((char *)a1 + 79) = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  v6[13] = *(void *)(v1 + 120);
  outlined init with copy of _LazyLayout_Subviews(v1, (uint64_t)v5);
  uint64_t v4 = v6[11];
  outlined init with copy of _ViewList_Node((uint64_t)v6, (uint64_t)v3);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v3);
  swift_bridgeObjectRelease();
  return outlined destroy of _LazyLayout_Subviews((uint64_t)v5);
}

uint64_t closure #1 in _LazyLayout_Subviews_V1.SubviewsIterator.next()(uint64_t a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  outlined destroy of _LazyLayout_Subview_V1?(a4, &lazy cache variable for type metadata for _LazyLayout_Subview_V1?, (uint64_t)&type metadata for _LazyLayout_Subview_V1);
  uint64_t result = outlined init with copy of _LazyLayout_Subview(a1, a4);
  *a2 = 1;
  uint64_t v9 = *(void *)(a3 + 120);
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    *(void *)(a3 + 120) = v11;
  }
  return result;
}

uint64_t partial apply for closure #1 in _LazyLayout_Subviews_V1.SubviewsIterator.next()(uint64_t a1, unsigned char *a2)
{
  return closure #1 in _LazyLayout_Subviews_V1.SubviewsIterator.next()(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

double _LazyLayout_Subview_V1.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  outlined init with copy of _LazyLayout_Subview(v6, (uint64_t)v13);
  outlined init with copy of _LazyLayout_Subview_V1?(a6, (uint64_t)v11);
  if (v11[0])
  {
    outlined init with copy of _LazyLayout_Subview((uint64_t)v11, (uint64_t)v12);
    outlined destroy of _LazyLayout_Subview_V1((uint64_t)v11);
  }
  else
  {
    outlined destroy of _LazyLayout_Subview_V1?((uint64_t)v11, &lazy cache variable for type metadata for _LazyLayout_Subview_V1?, (uint64_t)&type metadata for _LazyLayout_Subview_V1);
    memset(v12, 0, 95);
  }
  LOBYTE(v11[0]) = a2 & 1;
  double v9 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
  outlined destroy of _LazyLayout_Subview_V1?((uint64_t)v12, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview);
  outlined destroy of _LazyLayout_Subview((uint64_t)v13);
  return v9;
}

uint64_t outlined init with copy of _LazyLayout_Subview_V1?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _LazyLayout_Subview_V1?(0, &lazy cache variable for type metadata for _LazyLayout_Subview_V1?, (uint64_t)&type metadata for _LazyLayout_Subview_V1, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of _LazyLayout_Subview_V1?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for _LazyLayout_Subview_V1?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined destroy of _LazyLayout_Subview_V1(uint64_t a1)
{
  return a1;
}

uint64_t _LazyLayout_Subview_V1.place(at:anchor:proposal:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  LOBYTE(v7) = a1 & 1;
  _ProposedSize.init(_:)();
  _Placement.init(proposedSize:anchoring:at:)();
  uint64_t v4 = LazyLayoutViewCache.item(data:)(v2 + 16);
  swift_beginAccess();
  uint64_t result = swift_unownedRetainStrong();
  if (result)
  {
    int v6 = *(_DWORD *)(result + 212);
    uint64_t result = swift_release();
    *(_DWORD *)(v4 + 188) = v6;
    *(_DWORD *)(v4 + 196) = 0;
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v7;
    *(unsigned char *)(a2 + 16) = v8;
    *(void *)(a2 + 24) = v9;
    *(unsigned char *)(a2 + 32) = v10;
    *(void *)(a2 + 40) = v11;
    *(void *)(a2 + 48) = v12;
    *(void *)(a2 + 56) = v13;
    *(void *)(a2 + 64) = v14;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t _LazyLayout_SizeAndSpacingContext_V1.containerSize.getter()
{
  uint64_t result = *(unsigned int *)(v0 + 12);
  if (result != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = AGGraphGetValue();
    return MEMORY[0x18C114450](Value, v3, v4, v5);
  }
  return result;
}

uint64_t _LazyLayout_SizeAndSpacingContext_V1.subscript.getter()
{
  return _LazyLayout_SizeAndSpacingContext.subscript.getter();
}

double _LazyLayout_PlacementContext_V1.size.getter()
{
  return *(double *)(v0 + 32);
}

double _LazyLayout_PlacementContext_V1.contentInsets.getter()
{
  return *(double *)(v0 + 200);
}

__n128 _LazyLayout_PlacementContext_V1.containingScrollGeometry.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 72);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 56);
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(v1 + 104);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 88);
  *(_OWORD *)(a1 + 48) = v3;
  long long v4 = *(_OWORD *)(v1 + 136);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 120);
  *(_OWORD *)(a1 + 80) = v4;
  __n128 result = *(__n128 *)(v1 + 152);
  *(__n128 *)(a1 + 96) = result;
  return result;
}

__n128 _LazyLayout_PlacementContext_V1.nearestScrollGeometry.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 184);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 168);
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(v1 + 216);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 200);
  *(_OWORD *)(a1 + 48) = v3;
  long long v4 = *(_OWORD *)(v1 + 248);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 232);
  *(_OWORD *)(a1 + 80) = v4;
  __n128 result = *(__n128 *)(v1 + 264);
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t _LazyLayout_PlacementContext_V1.containerSize.getter()
{
  uint64_t result = *(unsigned int *)(v0 + 12);
  if (result != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = AGGraphGetValue();
    return MEMORY[0x18C114450](Value, v3, v4, v5);
  }
  return result;
}

uint64_t _LazyLayout_PlacementContext_V1.visibleRect.getter()
{
  uint64_t v1 = v0 + 56;
  if (*(unsigned char *)(v1 + 240) == 1) {
    ScrollGeometry.outsetForAX(limit:)(*(CGSize *)(v1 + 224));
  }
  return ScrollGeometry.visibleRect.getter();
}

uint64_t _LazyLayout_PlacedSubview_V1.isHeader.getter()
{
  return *(unsigned __int8 *)(*(void *)v0 + 165);
}

uint64_t _LazyLayout_PlacedSubview_V1.isFooter.getter()
{
  return *(unsigned __int8 *)(*(void *)v0 + 166);
}

double _LazyLayout_PlacedSubview_V1.size.getter()
{
  return _LazyLayout_PlacedSubview.size.getter();
}

double _LazyLayout_PlacedSubview_V1.origin.getter()
{
  swift_retain();
  double v0 = _LazyLayout_PlacedSubview.size.getter();
  *(void *)&double v2 = *(_OWORD *)&_Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v1, *(unint64_t *)&v0));
  swift_release();
  return v2;
}

double _LazyLayout_PlacedSubview_V1.frame.getter()
{
  swift_retain();
  double v0 = _LazyLayout_PlacedSubview.size.getter();
  *(void *)&double v2 = *(_OWORD *)&_Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v1, *(unint64_t *)&v0));
  _LazyLayout_PlacedSubview.size.getter();
  swift_release();
  return v2;
}

uint64_t _LazyLayout_Placements_V1.subviews.getter()
{
  uint64_t v1 = *v0;
  int64_t v2 = *(void *)(*v0 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v4 = 0;
    uint64_t v3 = v18;
    unint64_t v5 = *(void *)(v18 + 16);
    uint64_t v13 = 72 * v5;
    uint64_t v14 = v1;
    do
    {
      uint64_t v6 = *(void *)(v1 + v4 + 32);
      uint64_t v7 = *(void *)(v1 + v4 + 40);
      char v8 = *(unsigned char *)(v1 + v4 + 48);
      uint64_t v9 = *(void *)(v1 + v4 + 56);
      char v15 = *(unsigned char *)(v1 + v4 + 64);
      long long v16 = *(_OWORD *)(v1 + v4 + 72);
      long long v17 = *(_OWORD *)(v1 + v4 + 88);
      unint64_t v10 = *(void *)(v18 + 24);
      swift_retain();
      if (v5 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v5 + 1, 1);
      }
      *(void *)(v18 + 16) = v5 + 1;
      uint64_t v1 = v14;
      uint64_t v11 = v18 + v13 + v4;
      *(void *)(v11 + 32) = v6;
      *(void *)(v11 + 40) = v7;
      *(unsigned char *)(v11 + 48) = v8;
      *(void *)(v11 + 56) = v9;
      *(unsigned char *)(v11 + 64) = v15;
      *(_OWORD *)(v11 + 72) = v16;
      v4 += 72;
      ++v5;
      *(_OWORD *)(v11 + 88) = v17;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t key path getter for _LazyLayout_Placements_V1.subviews : _LazyLayout_Placements_V1@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = _LazyLayout_Placements_V1.subviews.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for _LazyLayout_Placements_V1.subviews : _LazyLayout_Placements_V1(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI28_LazyLayout_PlacedSubview_V1VG_AF01_fg1_hI0Vs5NeverOTg503_s7d5UI25_fg12_Placements_j23V8subviewsSayAA01_cd15_hi7_F0VGvsQ63_cd1_hI0VAFcfu_33_2a9f168c8e9544d59c906f81ada6624eAfITf3nnnpk_nTf1cn_n(v3);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t _LazyLayout_Placements_V1.subviews.setter(uint64_t a1)
{
  uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI28_LazyLayout_PlacedSubview_V1VG_AF01_fg1_hI0Vs5NeverOTg503_s7d5UI25_fg12_Placements_j23V8subviewsSayAA01_cd15_hi7_F0VGvsQ63_cd1_hI0VAFcfu_33_2a9f168c8e9544d59c906f81ada6624eAfITf3nnnpk_nTf1cn_n(a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v2;
  return result;
}

uint64_t (*_LazyLayout_Placements_V1.subviews.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[3] = v1;
  *a1 = _LazyLayout_Placements_V1.subviews.getter();
  return _LazyLayout_Placements_V1.subviews.modify;
}

uint64_t _LazyLayout_Placements_V1.subviews.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (uint64_t *)a1[3];
  if (a2)
  {
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI28_LazyLayout_PlacedSubview_V1VG_AF01_fg1_hI0Vs5NeverOTg503_s7d5UI25_fg12_Placements_j23V8subviewsSayAA01_cd15_hi7_F0VGvsQ63_cd1_hI0VAFcfu_33_2a9f168c8e9544d59c906f81ada6624eAfITf3nnnpk_nTf1cn_n(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *uint64_t v2 = v4;
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI28_LazyLayout_PlacedSubview_V1VG_AF01_fg1_hI0Vs5NeverOTg503_s7d5UI25_fg12_Placements_j23V8subviewsSayAA01_cd15_hi7_F0VGvsQ63_cd1_hI0VAFcfu_33_2a9f168c8e9544d59c906f81ada6624eAfITf3nnnpk_nTf1cn_n(*a1);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v2 = v6;
  }
  return result;
}

double _LazyLayout_Placements_V1.validRect.getter()
{
  return *(double *)(v0 + 8);
}

void _LazyLayout_Placements_V1.validRect.setter(double a1, double a2, double a3, double a4)
{
  v4[1] = a1;
  v4[2] = a2;
  v4[3] = a3;
  v4[4] = a4;
}

void (*_LazyLayout_Placements_V1.validRect.modify(void *a1))(void **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  long long v4 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)(v1 + 8);
  *((_OWORD *)v3 + 1) = v4;
  return _LazyLayout_Placements_V1.validRect.modify;
}

void _LazyLayout_Placements_V1.validRect.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[4];
  long long v3 = *((_OWORD *)v1 + 1);
  *(_OWORD *)(v2 + 8) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 24) = v3;
  free(v1);
}

Swift::Void __swiftcall _LazyLayout_Placements_V1.invalidateSize()()
{
  *(unsigned char *)(v0 + 40) = 1;
}

Swift::Void __swiftcall _LazyLayout_Placements_V1.translate(by:)(CGSize by)
{
  *(CGFloat *)(v1 + 48) = by.width;
  *(CGFloat *)(v1 + 56) = by.height;
}

uint64_t _LazyLayout_EstimatedPlacements_V1.index.getter()
{
  return *(void *)v0;
}

uint64_t _LazyLayout_EstimatedPlacements_V1.index.setter(uint64_t result, char a2)
{
  *(void *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t (*_LazyLayout_EstimatedPlacements_V1.index.modify(uint64_t a1))(uint64_t result)
{
  *(void *)(a1 + 16) = v1;
  char v2 = *(unsigned char *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  return _LazyLayout_EstimatedPlacements_V1.index.modify;
}

uint64_t _LazyLayout_EstimatedPlacements_V1.index.modify(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  char v2 = *(unsigned char *)(result + 8);
  *(void *)uint64_t v1 = *(void *)result;
  *(unsigned char *)(v1 + 8) = v2;
  return result;
}

uint64_t _LazyLayout_EstimatedPlacements_V1.subview.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    long long v3 = *(_OWORD *)(v1 + 72);
    long long v4 = *(_OWORD *)(v1 + 56);
    uint64_t v5 = *(void *)(v1 + 40);
    uint64_t v6 = *(void *)(v1 + 24);
    uint64_t v7 = *(void *)(v1 + 32) & 1;
    uint64_t v8 = *(void *)(v1 + 48) & 1;
    *(void *)a1 = v2;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v8 = 0;
    *(void *)(a1 + 16) = 0;
    long long v4 = 0uLL;
    *(_OWORD *)a1 = 0u;
    long long v3 = 0uLL;
  }
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = v4;
  *(_OWORD *)(a1 + 56) = v3;
  return swift_retain();
}

uint64_t key path getter for _LazyLayout_EstimatedPlacements_V1.subview : _LazyLayout_EstimatedPlacements_V1@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    long long v4 = *(_OWORD *)(a1 + 72);
    long long v5 = *(_OWORD *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v9 = a1 + 24;
    uint64_t v8 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(v9 + 8) & 1;
    uint64_t v11 = v7 & 1;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v10 = 0;
    uint64_t v6 = 0;
    uint64_t v11 = 0;
    long long v5 = 0uLL;
    long long v4 = 0uLL;
  }
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v11;
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 56) = v4;
  return swift_retain();
}

uint64_t key path setter for _LazyLayout_EstimatedPlacements_V1.subview : _LazyLayout_EstimatedPlacements_V1(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v4 = a1[7];
    uint64_t v12 = a1[8];
    uint64_t v6 = a1[5];
    uint64_t v5 = a1[6];
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2] & 1;
    uint64_t v10 = a1[4] & 1;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    uint64_t v10 = 0;
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    uint64_t v12 = 0;
  }
  swift_retain();
  uint64_t result = swift_release();
  a2[2] = v3;
  a2[3] = v8;
  a2[4] = v9;
  a2[5] = v7;
  a2[6] = v10;
  a2[7] = v6;
  a2[8] = v5;
  a2[9] = v4;
  a2[10] = v12;
  return result;
}

uint64_t _LazyLayout_EstimatedPlacements_V1.subview.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v4 = a1[7];
    uint64_t v3 = a1[8];
    uint64_t v6 = a1[5];
    uint64_t v5 = a1[6];
    uint64_t v7 = a1[3];
    uint64_t v8 = a1[1];
    uint64_t v9 = a1[2] & 1;
    uint64_t v10 = a1[4] & 1;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    uint64_t v10 = 0;
    uint64_t v6 = 0;
    uint64_t v5 = 0;
    uint64_t v4 = 0;
    uint64_t v3 = 0;
  }
  uint64_t result = swift_release();
  v1[2] = v2;
  v1[3] = v8;
  v1[4] = v9;
  v1[5] = v7;
  v1[6] = v10;
  v1[7] = v6;
  v1[8] = v5;
  v1[9] = v4;
  v1[10] = v3;
  return result;
}

void (*_LazyLayout_EstimatedPlacements_V1.subview.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = (char *)malloc(0x50uLL);
  *a1 = v3;
  *((void *)v3 + 9) = v1;
  uint64_t v4 = *(void *)(v1 + 16);
  if (v4)
  {
    long long v5 = *(_OWORD *)(v1 + 72);
    long long v6 = *(_OWORD *)(v1 + 56);
    uint64_t v7 = *(void *)(v1 + 40);
    uint64_t v8 = *(void *)(v1 + 24);
    uint64_t v9 = *(void *)(v1 + 32) & 1;
    uint64_t v10 = *(void *)(v1 + 48) & 1;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v7 = 0;
    uint64_t v10 = 0;
    long long v6 = 0uLL;
    long long v5 = 0uLL;
  }
  *(void *)uint64_t v3 = v4;
  *((void *)v3 + 1) = v8;
  *((void *)v3 + 2) = v9;
  *((void *)v3 + 3) = v7;
  *((void *)v3 + 4) = v10;
  *(_OWORD *)(v3 + 40) = v6;
  *(_OWORD *)(v3 + 56) = v5;
  swift_retain();
  return _LazyLayout_EstimatedPlacements_V1.subview.modify;
}

void _LazyLayout_EstimatedPlacements_V1.subview.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = **a1;
  if (a2)
  {
    if (v3)
    {
      uint64_t v4 = v2[6];
      uint64_t v19 = v2[7];
      uint64_t v20 = v2[8];
      uint64_t v5 = v2[5];
      uint64_t v6 = v2[3];
      uint64_t v7 = v2[1];
      uint64_t v8 = v2[2] & 1;
      uint64_t v9 = v2[4] & 1;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v6 = 0;
      uint64_t v9 = 0;
      uint64_t v5 = 0;
      uint64_t v4 = 0;
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    long long v17 = (void *)v2[9];
    swift_retain();
    swift_release();
    void v17[2] = v3;
    void v17[3] = v7;
    v17[4] = v8;
    v17[5] = v6;
    v17[6] = v9;
    v17[7] = v5;
    v17[8] = v4;
    v17[9] = v19;
    v17[10] = v20;
    swift_release();
  }
  else
  {
    if (v3)
    {
      uint64_t v10 = v2[7];
      uint64_t v21 = v2[8];
      uint64_t v12 = v2[5];
      uint64_t v11 = v2[6];
      uint64_t v13 = v2[3];
      uint64_t v14 = v2[1];
      uint64_t v15 = v2[2] & 1;
      uint64_t v16 = v2[4] & 1;
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v13 = 0;
      uint64_t v16 = 0;
      uint64_t v12 = 0;
      uint64_t v11 = 0;
      uint64_t v10 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v18 = (void *)v2[9];
    swift_release();
    v18[2] = v3;
    v18[3] = v14;
    void v18[4] = v15;
    v18[5] = v13;
    void v18[6] = v16;
    v18[7] = v12;
    unsigned char v18[8] = v11;
    v18[9] = v10;
    v18[10] = v21;
  }

  free(v2);
}

uint64_t _LazyLayout_Placement_V1.proposedSize.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _LazyLayout_Placement_V1.proposedSize.getter(MEMORY[0x1E4F3F408], a2, a3, a4, a5, a6, a7, a8);
}

uint64_t (*_LazyLayout_Placement_V1.proposedSize.modify(void *a1))(double *a1, uint64_t a2)
{
  a1[2] = v1;
  _Placement.proposedSize.getter();
  *a1 = v3;
  a1[1] = v4;
  return _LazyLayout_Placement_V1.proposedSize.modify;
}

uint64_t _LazyLayout_Placement_V1.proposedSize.modify(double *a1, uint64_t a2)
{
  return _LazyLayout_Placement_V1.proposedSize.modify(a1, a2, MEMORY[0x1E4F3F410]);
}

double _LazyLayout_Placement_V1.anchor.getter()
{
  return *(double *)(v0 + 32);
}

void _LazyLayout_Placement_V1.anchor.setter(double a1, double a2)
{
  *(double *)(v2 + 32) = a1;
  *(double *)(v2 + 40) = a2;
}

__n128 (*_LazyLayout_Placement_V1.anchor.modify(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 32);
  return _LazyLayout_Placement_V1.anchor.modify;
}

__n128 _LazyLayout_Placement_V1.anchor.modify(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(a1[1].n128_u64[0] + 32) = *a1;
  return result;
}

uint64_t _LazyLayout_Placement_V1.position.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return _LazyLayout_Placement_V1.proposedSize.getter(MEMORY[0x1E4F3F418], a2, a3, a4, a5, a6, a7, a8);
}

uint64_t _LazyLayout_Placement_V1.proposedSize.getter(uint64_t (*a1)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return a1(a1, a2, a3, a4, a5, a6, a7, a8);
}

void key path getter for _LazyLayout_Placement_V1.proposedSize : _LazyLayout_Placement_V1(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double (*a4)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(double *)a9 = a4(a1, a2, a3, a4, a5, a6, a7, a8);
  *(void *)(a9 + 8) = v10;
}

uint64_t (*_LazyLayout_Placement_V1.position.modify(void *a1))(double *a1, uint64_t a2)
{
  a1[2] = v1;
  _Placement.anchorPosition.getter();
  *a1 = v3;
  a1[1] = v4;
  return _LazyLayout_Placement_V1.position.modify;
}

uint64_t _LazyLayout_Placement_V1.position.modify(double *a1, uint64_t a2)
{
  return _LazyLayout_Placement_V1.proposedSize.modify(a1, a2, MEMORY[0x1E4F3F420]);
}

uint64_t _LazyLayout_Placement_V1.proposedSize.modify(double *a1, uint64_t a2, uint64_t (*a3)(double, double))
{
  return a3(*a1, a1[1]);
}

__n128 _LazyLayout_Placement_V1.init(proposedSize:anchor:position:)@<Q0>(uint64_t a1@<X8>)
{
  _Placement.init(proposedSize:anchoring:at:)();
  __n128 result = v7;
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  *(__n128 *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  return result;
}

uint64_t _LazyLayoutRoot_V1.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t _LazyLayoutRoot_V1.layout.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _LazyLayoutRoot_V1.layout.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_LazyLayoutRoot_V1.layout.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _LazyLayoutRoot_V1._makeView(root:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v28)(void *__return_ptr, uint64_t, long long *);
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  long long v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  uint64_t v29 = a4;
  uint64_t v28 = a3;
  uint64_t v27 = a6;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v7 = *a1;
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  long long v26 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[7];
  uint64_t v14 = a2[8];
  uint64_t v15 = a2[9];
  int v16 = *((_DWORD *)a2 + 20);
  LODWORD(v31) = v7;
  type metadata accessor for _LazyLayoutRoot_V1();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a5 - 8) + 64)) {
    closure #1 in static _LazyLayoutRoot_V1._makeView(root:inputs:body:)(1, a5);
  }
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  LODWORD(v31) = OffsetAttribute2;
  MEMORY[0x1F4188790](OffsetAttribute2);
  uint64_t v18 = type metadata accessor for LazyLayoutAdaptor_V1();
  void v23[2] = v18;
  uint64_t Adaptor = type metadata accessor for _LazyLayoutRoot_V1.MakeAdaptor();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v31, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v23, Adaptor, MEMORY[0x1E4FBC248], v19, MEMORY[0x1E4FBC278], v20);
  _GraphValue.init(_:)();
  uint64_t v31 = v8;
  char v32 = v9;
  __n128 v33 = v10;
  long long v34 = v11;
  long long v35 = v12;
  uint64_t v36 = v26;
  uint64_t v37 = v13;
  uint64_t v38 = v14;
  long long v39 = v15;
  long long v40 = v16;
  uint64_t v21 = swift_getWitnessTable();
  return static LazyLayout._makeView(root:inputs:body:)(&v30, (uint64_t)&v31, v28, v18, v21, v27);
}

uint64_t closure #1 in static _LazyLayoutRoot_V1._makeView(root:inputs:body:)(uint64_t a1, uint64_t a2)
{
  _OWORD v7[2] = type metadata accessor for _LazyLayoutRoot_V1();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t _LazyLayoutRoot_V1.MakeAdaptor.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  int v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance _LazyLayoutRoot_V1<A>.MakeAdaptor@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LazyLayoutAdaptor_V1();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance _LazyLayoutRoot_V1<A>.MakeAdaptor@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _LazyLayoutRoot_V1.MakeAdaptor.value.getter(*v2, *(void *)(a1 + 16), a2);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance _LazyLayoutRoot_V1<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _LazyLayoutRoot_V1._makeView(root:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), a6);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _LazyLayoutRoot_V1<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for _LazyLayoutRoot_V1<A>);
}

uint64_t type metadata accessor for _LazyLayoutRoot_V1()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LazyLayoutAdaptor_V1()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _LazyLayoutRoot_V1.MakeAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _LazyLayout_Subviews_V1.SubviewsIterator and conformance _LazyLayout_Subviews_V1.SubviewsIterator()
{
  unint64_t result = lazy protocol witness table cache variable for type _LazyLayout_Subviews_V1.SubviewsIterator and conformance _LazyLayout_Subviews_V1.SubviewsIterator;
  if (!lazy protocol witness table cache variable for type _LazyLayout_Subviews_V1.SubviewsIterator and conformance _LazyLayout_Subviews_V1.SubviewsIterator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LazyLayout_Subviews_V1.SubviewsIterator and conformance _LazyLayout_Subviews_V1.SubviewsIterator);
  }
  return result;
}

unsigned char *sub_1881E0E3C@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unsigned char *sub_1881E0E48(unsigned char *result, unsigned char *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1881E0E54@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(result + 1);
  return result;
}

unsigned char *sub_1881E0E60(unsigned char *result, uint64_t a2)
{
  *(unsigned char *)(a2 + 1) = *result;
  return result;
}

__n128 sub_1881E0E74@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

__n128 sub_1881E0E84(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 24) = v3;
  return result;
}

uint64_t sub_1881E0E94@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_1881E0EA8(uint64_t result, uint64_t a2)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

void sub_1881E0EC4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
}

uint64_t sub_1881E0EF0()
{
  return _Placement.proposedSize.setter();
}

__n128 sub_1881E0F18@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = a1[2];
  *a2 = result;
  return result;
}

__n128 sub_1881E0F24(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[2] = *a1;
  return result;
}

void sub_1881E0F30(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
}

uint64_t sub_1881E0F5C()
{
  return _Placement.anchorPosition.setter();
}

uint64_t dispatch thunk of static LazyLayout_V1.layoutProperties.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static LazyLayout_V1.initialCache.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of LazyLayout_V1.sizeThatFits(proposedSize:subviews:context:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 40))();
}

uint64_t dispatch thunk of LazyLayout_V1.spacing(subviews:context:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 48))();
}

uint64_t dispatch thunk of LazyLayout_V1.place(subviews:context:cache:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t dispatch thunk of LazyLayout_V1.estimatedPlacement(subviews:context:cache:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 64))();
}

uint64_t dispatch thunk of LazyLayout_V1.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 72))();
}

uint64_t dispatch thunk of LazyLayout_V1.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 80))();
}

uint64_t dispatch thunk of LazyLayout_V1.boundingRect(at:subviews:context:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 88))();
}

uint64_t storeEnumTagSinglePayload for _LazyLayout_Properties_V1(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)__n128 result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1881E1118);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for _LazyLayout_Properties_V1()
{
  return &type metadata for _LazyLayout_Properties_V1;
}

ValueMetadata *type metadata accessor for _LazyLayout_Subviews_V1()
{
  return &type metadata for _LazyLayout_Subviews_V1;
}

uint64_t initializeWithCopy for _LazyLayout_Subviews_V1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  unsigned int v4 = (void *)(a2 + 16);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 101);
  swift_retain();
  switch(v5)
  {
    case 1:
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      long long v9 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 72) = v9;
      uint64_t v10 = v9;
      uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
      swift_bridgeObjectRetain();
      v11(a1 + 48, a2 + 48, v10);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
      char v7 = 1;
      goto LABEL_6;
    case 2:
      *(void *)(a1 + 16) = *v4;
      char v7 = 2;
LABEL_6:
      *(unsigned char *)(a1 + 101) = v7;
      goto LABEL_7;
    case 3:
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      uint64_t v8 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v8;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(unsigned char *)(a1 + 101) = 3;
      swift_bridgeObjectRetain();
LABEL_7:
      swift_bridgeObjectRetain();
      break;
    default:
      long long v6 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v6;
      (**(void (***)(uint64_t, void *))(v6 - 8))(a1 + 16, v4);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
      *(unsigned char *)(a1 + 101) = 0;
      break;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _LazyLayout_Subviews_V1(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (a1 != a2)
  {
    outlined destroy of _ViewList_Node(a1 + 16);
    switch(*(unsigned char *)(a2 + 101))
    {
      case 1:
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v6 = *(void *)(a2 + 72);
        *(void *)(a1 + 72) = v6;
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        char v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
        swift_bridgeObjectRetain();
        v7(a1 + 48, a2 + 48, v6);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        int v8 = *(_DWORD *)(a2 + 96);
        *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
        *(_DWORD *)(a1 + 96) = v8;
        *(unsigned char *)(a1 + 101) = 1;
        goto LABEL_7;
      case 2:
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 101) = 2;
        goto LABEL_7;
      case 3:
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(unsigned char *)(a1 + 101) = 3;
        swift_bridgeObjectRetain();
LABEL_7:
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v4 = *(void *)(a2 + 40);
        *(void *)(a1 + 40) = v4;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
        char v5 = *(unsigned char *)(a2 + 60);
        *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
        *(unsigned char *)(a1 + 60) = v5;
        *(unsigned char *)(a1 + 101) = 0;
        break;
    }
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v9 = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  *(unsigned char *)(a1 + 118) = *(unsigned char *)(a2 + 118);
  return a1;
}

ValueMetadata *type metadata accessor for _LazyLayout_Subviews_V1.SubviewsSequence()
{
  return &type metadata for _LazyLayout_Subviews_V1.SubviewsSequence;
}

uint64_t destroy for _LazyLayout_Subviews_V1(uint64_t a1)
{
  swift_release();
  switch(*(unsigned char *)(a1 + 101))
  {
    case 0:
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
      break;
    case 1:
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
      goto LABEL_5;
    case 2:
      goto LABEL_5;
    case 3:
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _LazyLayout_Subviews_V1.SubviewsIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 101);
  swift_retain();
  switch(v5)
  {
    case 1:
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      long long v9 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 72) = v9;
      uint64_t v10 = v9;
      uint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
      swift_bridgeObjectRetain();
      v11(a1 + 48, a2 + 48, v10);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
      char v7 = 1;
      goto LABEL_6;
    case 2:
      *(void *)(a1 + 16) = *v4;
      char v7 = 2;
LABEL_6:
      *(unsigned char *)(a1 + 101) = v7;
      goto LABEL_7;
    case 3:
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      uint64_t v8 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v8;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(unsigned char *)(a1 + 101) = 3;
      swift_bridgeObjectRetain();
LABEL_7:
      swift_bridgeObjectRetain();
      break;
    default:
      long long v6 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v6;
      (**(void (***)(uint64_t, void *))(v6 - 8))(a1 + 16, v4);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
      *(unsigned char *)(a1 + 101) = 0;
      break;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _LazyLayout_Subviews_V1.SubviewsIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (a1 != a2)
  {
    outlined destroy of _ViewList_Node(a1 + 16);
    switch(*(unsigned char *)(a2 + 101))
    {
      case 1:
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v6 = *(void *)(a2 + 72);
        *(void *)(a1 + 72) = v6;
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        char v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
        swift_bridgeObjectRetain();
        v7(a1 + 48, a2 + 48, v6);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        int v8 = *(_DWORD *)(a2 + 96);
        *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
        *(_DWORD *)(a1 + 96) = v8;
        *(unsigned char *)(a1 + 101) = 1;
        goto LABEL_7;
      case 2:
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 101) = 2;
        goto LABEL_7;
      case 3:
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(unsigned char *)(a1 + 101) = 3;
        swift_bridgeObjectRetain();
LABEL_7:
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v4 = *(void *)(a2 + 40);
        *(void *)(a1 + 40) = v4;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
        char v5 = *(unsigned char *)(a2 + 60);
        *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
        *(unsigned char *)(a1 + 60) = v5;
        *(unsigned char *)(a1 + 101) = 0;
        break;
    }
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v9 = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  *(unsigned char *)(a1 + 118) = *(unsigned char *)(a2 + 118);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t assignWithTake for _LazyLayout_Subviews_V1.SubviewsIterator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (a1 != a2)
  {
    outlined destroy of _ViewList_Node(a1 + 16);
    long long v4 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v4;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 94) = *(void *)(a2 + 94);
    long long v5 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v5;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  *(unsigned char *)(a1 + 118) = *(unsigned char *)(a2 + 118);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for _LazyLayout_Subviews_V1.SubviewsIterator(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _LazyLayout_Subviews_V1.SubviewsIterator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _LazyLayout_Subviews_V1.SubviewsIterator()
{
  return &type metadata for _LazyLayout_Subviews_V1.SubviewsIterator;
}

ValueMetadata *type metadata accessor for _LazyLayout_Subview_V1()
{
  return &type metadata for _LazyLayout_Subview_V1;
}

ValueMetadata *type metadata accessor for _LazyLayout_SizeAndSpacingContext_V1()
{
  return &type metadata for _LazyLayout_SizeAndSpacingContext_V1;
}

ValueMetadata *type metadata accessor for _LazyLayout_PlacementContext_V1()
{
  return &type metadata for _LazyLayout_PlacementContext_V1;
}

ValueMetadata *type metadata accessor for _LazyLayout_EstimatedPlacementContext_V1()
{
  return &type metadata for _LazyLayout_EstimatedPlacementContext_V1;
}

ValueMetadata *type metadata accessor for _LazyLayout_PlacedSubview_V1()
{
  return &type metadata for _LazyLayout_PlacedSubview_V1;
}

ValueMetadata *type metadata accessor for _LazyLayout_Placements_V1()
{
  return &type metadata for _LazyLayout_Placements_V1;
}

ValueMetadata *type metadata accessor for _LazyLayout_EstimatedPlacements_V1()
{
  return &type metadata for _LazyLayout_EstimatedPlacements_V1;
}

ValueMetadata *type metadata accessor for _LazyLayout_Placement_V1()
{
  return &type metadata for _LazyLayout_Placement_V1;
}

uint64_t getEnumTagSinglePayload for _LazyLayoutRoot_V1(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _LazyLayoutRoot_V1(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881E1FA0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for LazyLayoutAdaptor_V1<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in _LazyLayoutRoot_V1<A>.MakeAdaptor()
{
  return swift_getWitnessTable();
}

uint64_t outlined destroy of _LazyLayout_Subviews_V1(uint64_t a1)
{
  return a1;
}

void specialized _VariadicView_ViewRoot<>.body(children:)()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized LazyLayoutAdaptor_V1.firstIndex<A>(of:subviews:context:)()
{
  DragDropDefaultPreviewResponder.contentShapeKind.getter(&v1);
  return _LazyLayout_Subviews.firstIndex<A>(id:style:)();
}

void type metadata accessor for _LazyLayout_Subview_V1?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of _LazyLayout_Subviews_V1.SubviewsSequence(uint64_t a1)
{
  return a1;
}

uint64_t type metadata completion function for LazyLayoutAdaptor_V1.Cache()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for LazyLayoutAdaptor_V1.Cache(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for LazyLayoutAdaptor_V1.Cache(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for LazyLayoutAdaptor_V1.Cache(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for LazyLayoutAdaptor_V1.Cache(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for LazyLayoutAdaptor_V1.Cache(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for LazyLayoutAdaptor_V1.Cache(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyLayoutAdaptor_V1.Cache(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        int v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void storeEnumTagSinglePayload for LazyLayoutAdaptor_V1.Cache(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881E29B0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t type metadata accessor for LazyLayoutAdaptor_V1.Cache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SelectionContext.canSelect<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for Binding<Selection>(0, &lazy cache variable for type metadata for [Selectable], (unint64_t *)&lazy cache variable for type metadata for Selectable, (uint64_t)&protocol descriptor for Selectable, MEMORY[0x1E4FBB320]);
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v9 = *WeakValue;
    swift_bridgeObjectRetain();
    uint64_t v10 = *(void *)(v9 + 16);
    if (!v10) {
      goto LABEL_8;
    }
  }
  else
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    uint64_t v10 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v10)
    {
LABEL_8:
      uint64_t v15 = 2;
      goto LABEL_10;
    }
  }
  int v11 = (void *)(v9 + 32);
  while (1)
  {
    uint64_t v12 = v11[3];
    uint64_t v13 = v11[4];
    __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(a1, a4, a5, v12, v13);
    if (v14 != 2) {
      break;
    }
    v11 += 5;
    if (!--v10) {
      goto LABEL_8;
    }
  }
  uint64_t v15 = v14;
LABEL_10:
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t SelectionContext.isSelected<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for Binding<Selection>(0, &lazy cache variable for type metadata for Binding<Selection>, (unint64_t *)&lazy cache variable for type metadata for Selection, (uint64_t)&protocol descriptor for Selection, MEMORY[0x1E4F41638]);
  uint64_t v9 = v8;
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (!WeakValue) {
    return 2;
  }
  outlined init with copy of Binding<Selection>(WeakValue, (uint64_t)v19);
  MEMORY[0x18C113DA0](v16, v9);
  uint64_t v11 = v17;
  uint64_t v12 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  char v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 32))(a1, a4, a5, v11, v12);
  outlined destroy of Binding<Selection>((uint64_t)v19);
  uint64_t v14 = v13 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  return v14;
}

uint64_t View.selectionContainer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Binding();
  double v11 = MEMORY[0x1F4188790](v10);
  char v13 = &v19[-v12 - 8];
  (*(void (**)(unsigned char *, uint64_t, double))(v14 + 16))(&v19[-v12 - 8], a1, v11);
  double v16 = SelectionContainerModifier.init<A>(_:)((uint64_t)v13, a3, a5, v15, (uint64_t)v19);
  MEMORY[0x18C113660](v19, a2, &type metadata for SelectionContainerModifier, a4, v16);
  return outlined destroy of SelectionContainerModifier((uint64_t)v19);
}

void View.focusedSelectionContainer<A>(_:focusState:priority:)()
{
}

uint64_t sub_1881E2D60()
{
  return swift_getWitnessTable();
}

uint64_t get_witness_table_7SwiftUI4ViewRzAA9SelectionRd__r__lAA15ModifiedContentVyxAA0D17ContainerModifier33_6368CFA25CABC3E0C4568665562C417FLLVGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance SelectionContainerModifier@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of Binding<Selection>(v1, (uint64_t)v4);
  outlined init with copy of PrimitiveSelectionContainerModifier((uint64_t)v4, a1);
  return outlined destroy of PrimitiveSelectionContainerModifier((uint64_t)v4);
}

uint64_t outlined init with copy of Binding<Selection>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<Selection>(0, &lazy cache variable for type metadata for Binding<Selection>, (unint64_t *)&lazy cache variable for type metadata for Selection, (uint64_t)&protocol descriptor for Selection, MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PrimitiveSelectionContainerModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of PrimitiveSelectionContainerModifier(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for _GraphInputs.SelectionContextKey()
{
  return &type metadata for _GraphInputs.SelectionContextKey;
}

uint64_t assignWithTake for SelectionContainerModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in PrimitiveSelectionContainerModifier()
{
  return &protocol witness table for PrimitiveSelectionContainerModifier;
}

unint64_t protocol witness for Rule.value.getter in conformance PrimitiveSelectionContainerModifier.MakeSelectionContext@<X0>(uint64_t a1@<X8>)
{
  int v3 = *(_DWORD *)(v1 + 4);
  uint64_t v4 = AGCreateWeakAttribute();
  if (v3 == *MEMORY[0x1E4F4E7A0])
  {
    unint64_t result = 0;
    LODWORD(v6) = 0;
  }
  else
  {
    unint64_t result = AGCreateWeakAttribute();
    unint64_t v6 = HIDWORD(result);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 8) = result;
  *(_DWORD *)(a1 + 12) = v6;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance PrimitiveSelectionContainerModifier()
{
}

uint64_t outlined destroy of Binding<Selection>(uint64_t a1)
{
  type metadata accessor for Binding<Selection>(0, &lazy cache variable for type metadata for Binding<Selection>, (unint64_t *)&lazy cache variable for type metadata for Selection, (uint64_t)&protocol descriptor for Selection, MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Binding<Selection>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = type metadata accessor for CVarArg(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void *type metadata accessor for PrimitiveSelectionContainerModifier.MakeSelectionContext()
{
  return &unk_1ED4615B8;
}

uint64_t UIGestureRecognizerRepresentableContext.coordinator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t UIGestureRecognizerRepresentableContext.converter.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 36);
  int v4 = *(_DWORD *)(v3 + 56);
  *(void *)a2 = *(void *)v3;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v3 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(v3 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(v3 + 40);
  *(_DWORD *)(a2 + 56) = v4;
  return swift_retain();
}

__n128 UIGestureRecognizerRepresentableContext.init(coordinator:converter:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 14);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  __n128 v13 = *(__n128 *)(a2 + 3);
  long long v14 = *(_OWORD *)(a2 + 1);
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a3, a1, AssociatedTypeWitness);
  uint64_t v11 = a3 + *(int *)(type metadata accessor for UIGestureRecognizerRepresentableContext() + 36);
  *(void *)uint64_t v11 = v6;
  *(_OWORD *)(v11 + 8) = v14;
  __n128 result = v13;
  *(__n128 *)(v11 + 24) = v13;
  *(void *)(v11 + 40) = v9;
  *(void *)(v11 + 48) = v10;
  *(_DWORD *)(v11 + 56) = v7;
  return result;
}

double UIGestureRecognizerRepresentableCoordinateSpaceConverter.location<A>(in:)()
{
  uint64_t v1 = *v0;
  uint64_t v2 = MEMORY[0x18C119DF0](*v0 + 24);
  if (!v2) {
    return 0.0;
  }
  uint64_t v3 = (void *)v2;
  int v4 = (void *)MEMORY[0x18C119DF0](v1 + 16);
  if (v4)
  {
    unsigned int v5 = v4;
    id v6 = objc_msgSend(v4, sel_window);
  }
  else
  {
    id v6 = 0;
  }
  objc_msgSend(v3, sel_locationInView_, v6);

  double v7 = UIGestureRecognizerRepresentableCoordinateSpaceConverter.convert<A>(globalPoint:to:)();
  return v7;
}

double UIGestureRecognizerRepresentableCoordinateSpaceConverter.convert<A>(globalPoint:to:)()
{
  MEMORY[0x18C113CA0]();
  GeometryProxy.convert<A>(globalPoint:to:)();
  double v1 = v0;
  static Update.end()();
  return v1;
}

void *UIGestureRecognizerRepresentableCoordinateSpaceConverter.velocity<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UIGestureRecognizerRepresentableCoordinateSpaceConverter.velocity<A>(in:)(a1, a2, a3, &selRef_velocityInView_, (SEL *)&selRef__swiftui_globalVelocity);
}

void *UIGestureRecognizerRepresentableCoordinateSpaceConverter.translation<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return UIGestureRecognizerRepresentableCoordinateSpaceConverter.velocity<A>(in:)(a1, a2, a3, &selRef_translationInView_, (SEL *)&selRef__swiftui_globalTranslation);
}

void *UIGestureRecognizerRepresentableCoordinateSpaceConverter.velocity<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, SEL *a5)
{
  __n128 result = (void *)MEMORY[0x18C119DF0](*v5 + 24);
  if (result)
  {
    uint64_t v9 = result;
    if (objc_msgSend(result, sel_respondsToSelector_, *a4))
    {
      [v9 *a5];
      double v10 = UIGestureRecognizerRepresentableCoordinateSpaceConverter.convert<A>(globalPoint:to:)();

      return *(void **)&v10;
    }
    else
    {

      return 0;
    }
  }
  return result;
}

double UIGestureRecognizerRepresentableProxy.convert<A>(globalPoint:to:)()
{
  return 0.0;
}

double UIGestureRecognizerRepresentableProxy.location<A>(in:)()
{
  return 0.0;
}

uint64_t View.gesture<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  double v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for GestureRecognizerModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for GestureRecognizerModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t dispatch thunk of UIGestureRecognizerRepresentable.makeCoordinator(proxy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of UIGestureRecognizerRepresentable.makeCoordinator(converter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of UIGestureRecognizerRepresentable.makeUIGestureRecognizer(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of UIGestureRecognizerRepresentable.updateUIGestureRecognizer(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of UIGestureRecognizerRepresentable.handleUIGestureRecognizerAction(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t type metadata completion function for UIGestureRecognizerRepresentableContext()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIGestureRecognizerRepresentableContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 60 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v10 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    long long v12 = *(_OWORD *)(v11 + 8);
    long long v13 = *(_OWORD *)(v11 + 24);
    long long v14 = *(_OWORD *)(v11 + 40);
    *(_DWORD *)(v10 + 56) = *(_DWORD *)(v11 + 56);
    *(_OWORD *)(v10 + 40) = v14;
    *(_OWORD *)(v10 + 24) = v13;
    *(_OWORD *)(v10 + 8) = v12;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for UIGestureRecognizerRepresentableContext(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);

  return swift_release();
}

uint64_t initializeWithCopy for UIGestureRecognizerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  int v9 = *(_DWORD *)(v8 + 56);
  long long v10 = *(_OWORD *)(v8 + 40);
  long long v11 = *(_OWORD *)(v8 + 24);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v7 + 24) = v11;
  *(_OWORD *)(v7 + 40) = v10;
  *(_DWORD *)(v7 + 56) = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UIGestureRecognizerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  swift_retain();
  swift_release();
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(v8 + 16);
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v8 + 20);
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v8 + 36);
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v7 + 44) = *(_DWORD *)(v8 + 44);
  *(_DWORD *)(v7 + 48) = *(_DWORD *)(v8 + 48);
  *(_DWORD *)(v7 + 52) = *(_DWORD *)(v8 + 52);
  *(_DWORD *)(v7 + 56) = *(_DWORD *)(v8 + 56);
  return a1;
}

uint64_t initializeWithTake for UIGestureRecognizerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (long long *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = v8[1];
  long long v9 = v8[2];
  long long v11 = *v8;
  *(_OWORD *)((char *)v7 + 44) = *(long long *)((char *)v8 + 44);
  v7[1] = v10;
  _OWORD v7[2] = v9;
  *unint64_t v7 = v11;
  return a1;
}

uint64_t assignWithTake for UIGestureRecognizerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  swift_release();
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  *(_DWORD *)(v7 + 16) = *(_DWORD *)(v8 + 16);
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v8 + 20);
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v8 + 24);
  *(_DWORD *)(v7 + 28) = *(_DWORD *)(v8 + 28);
  *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
  *(_DWORD *)(v7 + 36) = *(_DWORD *)(v8 + 36);
  *(_DWORD *)(v7 + 40) = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v7 + 44) = *(_DWORD *)(v8 + 44);
  *(_DWORD *)(v7 + 48) = *(_DWORD *)(v8 + 48);
  *(_DWORD *)(v7 + 52) = *(_DWORD *)(v8 + 52);
  *(_DWORD *)(v7 + 56) = *(_DWORD *)(v8 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIGestureRecognizerRepresentableContext(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2 && *((unsigned char *)a1 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 60)) {
    return v7 + *a1 + 1;
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    long long v10 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v10(a1);
  }
}

void storeEnumTagSinglePayload for UIGestureRecognizerRepresentableContext(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 60;
  if (v9 >= a2)
  {
    if (v9 < a3) {
      *((unsigned char *)a1 + v10) = 0;
    }
    if (a2)
    {
      if (v7 < 0x7FFFFFFF)
      {
        unint64_t v12 = ((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
        if ((a2 & 0x80000000) != 0)
        {
          *(_OWORD *)(v12 + 40) = 0u;
          uint64_t v13 = a2 ^ 0x80000000;
          *(_OWORD *)(v12 + 24) = 0u;
          *(_OWORD *)(v12 + 8) = 0u;
          *(_DWORD *)(v12 + 56) = 0;
        }
        else
        {
          uint64_t v13 = (a2 - 1);
        }
        *(void *)unint64_t v12 = v13;
      }
      else
      {
        unint64_t v11 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
        v11(a1, a2);
      }
    }
  }
  else
  {
    bzero(a1, v10);
    *a1 = ~v9 + a2;
    if (v9 < a3) {
      *((unsigned char *)a1 + v10) = 1;
    }
  }
}

uint64_t type metadata accessor for UIGestureRecognizerRepresentableContext()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for UIGestureRecognizerRepresentableCoordinateSpaceConverter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UIGestureRecognizerRepresentableCoordinateSpaceConverter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t assignWithTake for UIGestureRecognizerRepresentableCoordinateSpaceConverter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIGestureRecognizerRepresentableCoordinateSpaceConverter(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 60)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UIGestureRecognizerRepresentableCoordinateSpaceConverter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 60) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 60) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIGestureRecognizerRepresentableCoordinateSpaceConverter()
{
  return &type metadata for UIGestureRecognizerRepresentableCoordinateSpaceConverter;
}

uint64_t type metadata accessor for UIGestureRecognizerRepresentableProxy()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static GestureRecognizerModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, double)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X8>)
{
  void (*v90)(unint64_t *__return_ptr, double);
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned char *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned char *v103;
  int v104;
  unsigned char *v105;
  long long v106;
  long long v107;
  int v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unsigned char v114[24];
  unsigned char *v115;
  unint64_t v116;
  long long v117;
  unint64_t v118;
  int v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  long long v127;
  unsigned char *v128;
  unsigned char *v129;
  long long v130;
  unint64_t v131;
  int v132;
  uint64_t v133;

  uint64_t v89 = a6;
  int v90 = a3;
  unint64_t v133 = *MEMORY[0x1E4F143B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v95 = &v78[-v11];
  uint64_t v96 = a4;
  uint64_t v97 = a5;
  uint64_t v12 = type metadata accessor for GestureRepresentableChild();
  uint64_t v87 = *(void *)(v12 - 8);
  uint64_t v88 = v12;
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v86 = &v78[-v14];
  int v84 = *a1;
  LODWORD(v14) = *(_DWORD *)(a2 + 8);
  uint64_t v15 = *(void *)(a2 + 16);
  unsigned int v16 = *(_DWORD *)(a2 + 24);
  unsigned int v17 = *(_DWORD *)(a2 + 28);
  unsigned int v18 = *(_DWORD *)(a2 + 32);
  unsigned int v19 = *(_DWORD *)(a2 + 36);
  uint64_t v20 = *(unsigned char **)(a2 + 40);
  uint64_t v21 = *(unsigned char **)(a2 + 48);
  unsigned int v23 = *(_DWORD *)(a2 + 56);
  unsigned int v22 = *(_DWORD *)(a2 + 60);
  unsigned int v25 = *(_DWORD *)(a2 + 64);
  unsigned int v24 = *(_DWORD *)(a2 + 68);
  unsigned int v26 = *(_DWORD *)(a2 + 72);
  unsigned int v27 = *(_DWORD *)(a2 + 76);
  int v28 = *(_DWORD *)(a2 + 80);
  unint64_t v29 = *(void *)a2;
  long long v111 = *(void *)a2;
  long long v104 = v14;
  LODWORD(v112) = v14;
  uint64_t v30 = v15;
  int v113 = v15;
  unsigned int v31 = v16;
  *(_DWORD *)long long v114 = v16;
  unsigned int v32 = v17;
  *(_DWORD *)&v114[4] = v17;
  unsigned int v33 = v18;
  *(_DWORD *)&v114[8] = v18;
  unsigned int v34 = v19;
  *(_DWORD *)&v114[12] = v19;
  unint64_t v103 = v20;
  *(void *)&v114[16] = v20;
  long long v115 = v21;
  long long v116 = __PAIR64__(v22, v23);
  unint64_t v101 = v25;
  double v102 = v22;
  *(void *)&long long v117 = __PAIR64__(v24, v25);
  long long v99 = v26;
  double v100 = v24;
  *((void *)&v117 + 1) = __PAIR64__(v27, v26);
  LODWORD(v107) = v27;
  LODWORD(v106) = v28;
  LODWORD(v118) = v28;
  v90(&v109, v13);
  long long v105 = v21;
  long long v111 = (unint64_t)v21;
  LODWORD(v112) = v23;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if ((result & 1) == 0) {
    goto LABEL_4;
  }
  int v90 = (void (*)(unint64_t *__return_ptr, double))v78;
  unint64_t v124 = v29;
  uint64_t v125 = v104;
  uint64_t v126 = v30;
  uint64_t v93 = v32;
  uint64_t v94 = v31;
  *(void *)&uint64_t v127 = __PAIR64__(v32, v31);
  uint64_t v91 = v34;
  uint64_t v92 = v33;
  *((void *)&v127 + 1) = __PAIR64__(v34, v33);
  uint64_t v36 = v103;
  uint64_t v128 = v103;
  unint64_t v129 = v105;
  uint64_t v98 = v23;
  *(void *)&unint64_t v130 = __PAIR64__(v102, v23);
  *((void *)&v130 + 1) = __PAIR64__(v100, v101);
  uint64_t v131 = __PAIR64__(v107, v99);
  unint64_t v132 = v106;
  MEMORY[0x1F4188790](result);
  uint64_t WitnessTable = v96;
  uint64_t v77 = v97;
  LODWORD(v122) = v84;
  type metadata accessor for GestureRecognizerModifier();
  type metadata accessor for _GraphValue();
  unint64_t v37 = v29;
  swift_retain();
  uint64_t v38 = v30;
  uint64_t v82 = v30;
  swift_retain();
  long long v39 = v36;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.subscript.getter();
  int v40 = v111;
  static DynamicPropertyCache.fields(of:)();
  long long v108 = v40;
  _DynamicPropertyBuffer.init<A>(fields:container:inputs:)();
  uint64_t v41 = v122;
  type metadata accessor for _GraphValue();
  uint64_t v42 = v123;
  LODWORD(v111) = v40;
  LODWORD(v90) = _GraphValue.value.getter();
  long long v111 = v124;
  LODWORD(v112) = v125;
  int v113 = v126;
  *(_OWORD *)long long v114 = v127;
  *(void *)&v114[16] = v128;
  int v84 = _GraphInputs.phase.getter();
  uint64_t v122 = v41;
  char v123 = v42;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v95, 1, 1);
  unint64_t v83 = v37;
  long long v111 = v37;
  int v43 = v104;
  LODWORD(v112) = v104;
  int v113 = v38;
  LODWORD(v41) = v93;
  unsigned int v44 = v94;
  *(_DWORD *)long long v114 = v94;
  *(_DWORD *)&v114[4] = v93;
  LODWORD(v36) = v92;
  *(_DWORD *)&v114[8] = v92;
  *(_DWORD *)&v114[12] = v91;
  *(void *)&v114[16] = v39;
  long long v115 = v105;
  long long v116 = __PAIR64__(v102, v98);
  LODWORD(v38) = v101;
  LODWORD(v39) = v102;
  *(void *)&long long v117 = __PAIR64__(v100, v101);
  unsigned int v45 = v100;
  *((void *)&v117 + 1) = __PAIR64__(v107, v99);
  LODWORD(v118) = v106;
  LODWORD(AssociatedTypeWitness) = _ViewInputs.size.getter();
  long long v111 = v37;
  LODWORD(v112) = v43;
  uint64_t v46 = v82;
  int v113 = v82;
  *(_DWORD *)long long v114 = v44;
  *(_DWORD *)&v114[4] = v41;
  *(_DWORD *)&v114[8] = v36;
  unsigned int v47 = v91;
  *(_DWORD *)&v114[12] = v91;
  uint64_t v48 = v103;
  *(void *)&v114[16] = v103;
  long long v115 = v105;
  LODWORD(v36) = v99;
  long long v116 = __PAIR64__(v39, v98);
  *(void *)&long long v117 = __PAIR64__(v45, v38);
  *((void *)&v117 + 1) = __PAIR64__(v107, v99);
  LODWORD(v41) = v107;
  LODWORD(v38) = v106;
  LODWORD(v118) = v106;
  int v81 = _ViewInputs.position.getter();
  long long v111 = v83;
  int v49 = v104;
  LODWORD(v112) = v104;
  int v113 = v46;
  *(_DWORD *)long long v114 = v94;
  *(_DWORD *)&v114[4] = v93;
  *(_DWORD *)&v114[8] = v92;
  *(_DWORD *)&v114[12] = v47;
  *(void *)&v114[16] = v48;
  uint64_t v50 = v105;
  long long v115 = v105;
  LODWORD(v39) = v98;
  long long v116 = __PAIR64__(v102, v98);
  *(void *)&long long v117 = __PAIR64__(v100, v101);
  *((void *)&v117 + 1) = __PAIR64__(v41, v36);
  LODWORD(v118) = v38;
  int v80 = _ViewInputs.transform.getter();
  unint64_t v51 = v83;
  long long v111 = v83;
  LODWORD(v112) = v49;
  int v113 = v46;
  LODWORD(v46) = v93;
  unsigned int v52 = v94;
  *(_DWORD *)long long v114 = v94;
  *(_DWORD *)&v114[4] = v93;
  LODWORD(v36) = v92;
  *(_DWORD *)&v114[8] = v92;
  *(_DWORD *)&v114[12] = v47;
  *(void *)&v114[16] = v103;
  long long v115 = v50;
  long long v116 = __PAIR64__(v102, v39);
  LODWORD(v50) = v101;
  LODWORD(v39) = v102;
  *(void *)&long long v117 = __PAIR64__(v100, v101);
  LODWORD(v38) = v99;
  unsigned int v53 = v100;
  *((void *)&v117 + 1) = __PAIR64__(v107, v99);
  LODWORD(v118) = v106;
  int v79 = _ViewInputs.environment.getter();
  long long v111 = v51;
  LODWORD(v112) = v104;
  int v113 = v82;
  *(_DWORD *)long long v114 = v52;
  *(_DWORD *)&v114[4] = v46;
  *(_DWORD *)&v114[8] = v36;
  *(_DWORD *)&v114[12] = v91;
  *(void *)&v114[16] = v103;
  long long v115 = v105;
  long long v116 = __PAIR64__(v39, v98);
  *(void *)&long long v117 = __PAIR64__(v53, v50);
  *((void *)&v117 + 1) = __PAIR64__(v107, v38);
  LODWORD(v118) = v106;
  int v54 = _ViewInputs.safeAreaInsets.getter();
  uint64_t v77 = v97;
  long long v55 = v86;
  uint64_t v56 = GestureRepresentableChild.init(representable:phase:links:coordinator:defaultCoordinator:recognizer:recognizerBox:size:position:transform:environment:safeAreaInsets:)((int)v90, v84, &v122, (uint64_t)v95, 0, 0, 0, AssociatedTypeWitness, (uint64_t)v86, v81, v80, v79, v54);
  MEMORY[0x1F4188790](v56);
  uint64_t v57 = type metadata accessor for ConcreteRecognizer();
  uint64_t v58 = v88;
  v75[0] = v57;
  v75[1] = v88;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v59 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v55, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)&v78[-48], v58, MEMORY[0x1E4FBC248], v59, MEMORY[0x1E4FBC278], v60);
  (*(void (**)(unsigned char *, uint64_t))(v87 + 8))(v55, v58);
  unsigned int v61 = v111;
  long long v111 = v109;
  long long v112 = v110;
  unsigned int v62 = _ViewOutputs.viewResponders()();
  unint64_t v63 = v124;
  int v64 = v125;
  uint64_t v65 = v126;
  uint64_t v67 = v128;
  unint64_t v66 = (unint64_t)v129;
  long long v106 = v130;
  long long v107 = v127;
  unint64_t v68 = v131;
  int v69 = v132;
  uint64_t result = (uint64_t)(id)AGSubgraphGetCurrent();
  if (result)
  {
    long long v105 = v78;
    long long v111 = __PAIR64__(v62, v61);
    long long v112 = v63;
    LODWORD(v113) = v64;
    *(void *)long long v114 = v65;
    *(_OWORD *)&v114[8] = v107;
    long long v115 = v67;
    long long v116 = v66;
    long long v117 = v106;
    long long v118 = v68;
    int v119 = v69;
    uint64_t v120 = 0;
    unsigned int v121 = (id)result;
    MEMORY[0x1F4188790](result);
    uint64_t v70 = type metadata accessor for RepresentableGestureResponderFilter();
    uint64_t WitnessTable = v70;
    uint64_t v77 = swift_getWitnessTable();
    type metadata accessor for _ContiguousArrayStorage<EventBindingSource>(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x1E4F4E740]);
    uint64_t v72 = v71;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v111, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)v75, v70, MEMORY[0x1E4FBC248], v72, MEMORY[0x1E4FBC278], v73);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    LOBYTE(v111) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
LABEL_4:
    uint64_t v74 = v89;
    *uint64_t v89 = v109;
    v74[1] = v110;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in static GestureRecognizerModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  _OWORD v7[2] = type metadata accessor for GestureRecognizerModifier();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t GestureRepresentableChild.init(representable:phase:links:coordinator:defaultCoordinator:recognizer:recognizerBox:size:position:transform:environment:safeAreaInsets:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, int a10, int a11, int a12, int a13)
{
  uint64_t v17 = *a3;
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(void *)(a9 + 8) = v17;
  *(void *)(a9 + 16) = a3[1];
  unsigned int v18 = (int *)type metadata accessor for GestureRepresentableChild();
  uint64_t v19 = a9 + v18[11];
  swift_getAssociatedTypeWitness();
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 32))(v19, a4, v20);
  *(void *)(a9 + v18[12]) = a5;
  *(void *)(a9 + v18[13]) = a6;
  *(void *)(a9 + v18[14]) = a7;
  *(_DWORD *)(a9 + v18[15]) = a8;
  *(_DWORD *)(a9 + v18[16]) = a10;
  *(_DWORD *)(a9 + v18[17]) = a11;
  *(_DWORD *)(a9 + v18[18]) = a12;
  *(_DWORD *)(a9 + v18[19]) = a13;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance GestureRecognizerModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, double)@<X2>, uint64_t a4@<X4>, unint64_t *a5@<X8>)
{
  return static GestureRecognizerModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance GestureRecognizerModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t RecognizerBox.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RecognizerBox()
{
  return self;
}

uint64_t type metadata completion function for DefaultGestureRecognizerRepresentableCoordinator()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t v0 = type metadata accessor for UIGestureRecognizerRepresentableContext();
    if (v2 <= 0x3F)
    {
      uint64_t inited = swift_initClassMetadata2();
      if (inited) {
        return inited;
      }
      else {
        return 0;
      }
    }
  }
  return v0;
}

uint64_t DefaultGestureRecognizerRepresentableCoordinator.__allocating_init(representable:context:)(uint64_t a1, uint64_t a2)
{
  return DefaultGestureRecognizerRepresentableCoordinator.init(representable:context:)(a1, a2);
}

uint64_t DefaultGestureRecognizerRepresentableCoordinator.init(representable:context:)(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(*(void *)v2 + 80) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 96), a1, *(void *)(*(void *)v2 + 80));
  uint64_t v4 = v2 + *(void *)(*(void *)v2 + 104);
  uint64_t v5 = type metadata accessor for UIGestureRecognizerRepresentableContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a2, v5);
  return v2;
}

uint64_t DefaultGestureRecognizerRepresentableCoordinator.dispatch(target:)(void *a1)
{
  id v19 = a1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = type metadata accessor for UIGestureRecognizerRepresentableContext();
  uint64_t v18 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v18 - v7;
  uint64_t v9 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = (uint64_t)v1 + *(void *)(v2 + 96);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v13, v3);
  uint64_t v14 = (uint64_t)v1 + *(void *)(*v1 + 104);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v14, v5);
  uint64_t v15 = *(void (**)(void))(v4 + 56);
  id v16 = v19;
  v15();

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v3);
}

uint64_t @objc DefaultGestureRecognizerRepresentableCoordinator.dispatch(target:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  swift_retain();
  DefaultGestureRecognizerRepresentableCoordinator.dispatch(target:)(v3);

  return swift_release();
}

uint64_t DefaultGestureRecognizerRepresentableCoordinator.deinit()
{
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 96), *(void *)(*(void *)v0 + 80));
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 104);
  uint64_t v2 = type metadata accessor for UIGestureRecognizerRepresentableContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t DefaultGestureRecognizerRepresentableCoordinator.__deallocating_deinit()
{
  DefaultGestureRecognizerRepresentableCoordinator.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DefaultGestureRecognizerRepresentableCoordinator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for RepresentableGestureResponder()
{
  return swift_initClassMetadata2();
}

uint64_t GestureRepresentableChild.recognizerBox.getter(uint64_t a1)
{
  uint64_t v2 = *(int *)(a1 + 56);
  if (*(void *)(v1 + v2))
  {
    uint64_t v3 = *(void *)(v1 + v2);
  }
  else
  {
    uint64_t v4 = v1;
    type metadata accessor for ViewGraph();
    uint64_t v5 = MEMORY[0x18C114EE0]();
    type metadata accessor for RecognizerBox();
    uint64_t v3 = swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    swift_beginAccess();
    uint64_t v6 = (void *)MEMORY[0x18C119DF0](v5 + 200);
    if (v6)
    {
      uint64_t v7 = *(void *)(v5 + 208);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v9 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(&v11, v9, v9, ObjectType, v7);
      swift_unknownObjectRelease();
      swift_release();
      uint64_t v6 = v11;
    }
    else
    {
      swift_release();
    }
    swift_unknownObjectWeakAssign();

    swift_retain();
    swift_release();
    *(void *)(v4 + v2) = v3;
  }
  swift_retain();
  return v3;
}

uint64_t GestureRepresentableChild.updateValue()(uint64_t a1)
{
  uint64_t v147 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v136 = *(void *)(a1 + 16);
  uint64_t v3 = v136;
  uint64_t v5 = type metadata accessor for ConcreteRecognizer();
  uint64_t v113 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  long long v112 = (void *)((char *)v108 - v6);
  uint64_t v128 = type metadata accessor for UIGestureRecognizerRepresentableContext();
  uint64_t v123 = *(void *)(v128 - 8);
  MEMORY[0x1F4188790](v128);
  long long v110 = (char *)v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unint64_t v137 = (char *)v108 - v9;
  uint64_t v122 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v10);
  long long v116 = (char *)v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  long long v111 = (char *)v108 - v13;
  MEMORY[0x1F4188790](v14);
  long long v118 = (char *)v108 - v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v131 = type metadata accessor for Optional();
  uint64_t v119 = *(void *)(v131 - 8);
  MEMORY[0x1F4188790](v131);
  long long v115 = (char *)v108 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v120 = (char *)v108 - v18;
  MEMORY[0x1F4188790](v19);
  long long v117 = (char *)v108 - v20;
  MEMORY[0x1F4188790](v21);
  unsigned int v23 = (char *)v108 - v22;
  uint64_t v24 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v25);
  int v109 = (char *)v108 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  unint64_t v29 = (char *)v108 - v28;
  uint64_t Value = AGGraphGetValue();
  char v32 = v31;
  uint64_t v121 = v24;
  unsigned int v33 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  v108[1] = v24 + 16;
  v108[0] = v33;
  v33(v29, Value, v3);
  unsigned int v34 = (int *)AGGraphGetValue();
  char v36 = v35;
  int v37 = *v34;
  uint64_t v141 = v3;
  uint64_t v142 = v4;
  uint64_t v135 = v4;
  uint64_t v130 = v1;
  uint64_t v143 = v1;
  int v144 = v37;
  uint64_t v134 = v29;
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v29, (uint64_t)partial apply for closure #1 in GestureRepresentableChild.updateValue(), (uint64_t)v140, v3, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v38);
  uint64_t v132 = 0;
  uint64_t v114 = v5;
  if (v138)
  {
    char v39 = 1;
LABEL_3:
    uint64_t v40 = (uint64_t)v137;
    uint64_t v41 = AssociatedTypeWitness;
    goto LABEL_8;
  }
  Outputuint64_t Value = AGGraphGetOutputValue();
  char v39 = 1;
  if (!OutputValue) {
    goto LABEL_3;
  }
  uint64_t v41 = AssociatedTypeWitness;
  if (v32)
  {
    uint64_t v40 = (uint64_t)v137;
  }
  else
  {
    uint64_t v40 = (uint64_t)v137;
    if ((v36 & 1) == 0) {
      char v39 = AGGraphCurrentAttributeWasModified();
    }
  }
LABEL_8:
  char v138 = v39;
  uint64_t v43 = v130;
  v139[0] = *(_DWORD *)(v130 + *(int *)(a1 + 76)) == *MEMORY[0x1E4F4E7A0];
  GeometryProxy.init(owner:size:environment:transform:position:safeAreaInsets:seed:)();
  int v44 = *(_DWORD *)&v139[48];
  long long v127 = *(_OWORD *)v139;
  long long v126 = *(_OWORD *)&v139[16];
  long long v125 = *(_OWORD *)&v139[32];
  uint64_t v129 = GestureRepresentableChild.recognizerBox.getter(a1);
  *(void *)unint64_t v139 = v129;
  *(_OWORD *)&v139[8] = v127;
  *(_OWORD *)&v139[24] = v126;
  *(_OWORD *)&v139[40] = v125;
  *(_DWORD *)&v139[56] = v44;
  unsigned int v45 = (char *)(v43 + *(int *)(a1 + 44));
  uint64_t v46 = v119;
  unsigned int v47 = *(void (**)(char *, char *, uint64_t))(v119 + 16);
  uint64_t v48 = v131;
  *(void *)&long long v127 = v119 + 16;
  *(void *)&long long v126 = v47;
  v47(v23, v45, v131);
  uint64_t v49 = *(void *)(v41 - 8);
  uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
  *(void *)&long long v125 = v49 + 48;
  unint64_t v124 = v50;
  unsigned int v51 = v50((uint64_t)v23, 1, v41);
  unsigned int v52 = v23;
  uint64_t v53 = v48;
  (*(void (**)(char *, uint64_t))(v46 + 8))(v52, v48);
  if (v51 == 1)
  {
    uint64_t v54 = v122;
    long long v55 = v118;
    uint64_t v56 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v122 + 16))(v118, v43, a1);
    MEMORY[0x1F4188790](v56);
    uint64_t v57 = v135;
    v108[-4] = v136;
    v108[-3] = v57;
    v108[-2] = v134;
    v108[-1] = v139;
    swift_getWitnessTable();
    uint64_t v58 = v117;
    uint64_t v59 = v132;
    StatefulRule.withObservation<A>(do:)();
    uint64_t v132 = v59;
    uint64_t v53 = v131;
    uint64_t v60 = v54;
    uint64_t v41 = AssociatedTypeWitness;
    unsigned int v61 = v55;
    uint64_t v40 = (uint64_t)v137;
    (*(void (**)(char *, uint64_t))(v60 + 8))(v61, a1);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v49 + 56))(v58, 0, 1, v41);
    unsigned int v62 = v58;
    uint64_t v63 = v135;
    (*(void (**)(char *, char *, uint64_t))(v46 + 40))(v45, v62, v53);
    uint64_t v64 = v128;
  }
  else
  {
    uint64_t v64 = v128;
    uint64_t v63 = v135;
  }
  uint64_t v65 = (uint64_t)v120;
  ((void (*)(char *, char *, uint64_t))v126)(v120, v45, v53);
  if (v124(v65, 1, v41) == 1) {
    __break(1u);
  }
  v145[0] = *(_OWORD *)v139;
  v145[1] = *(_OWORD *)&v139[16];
  *(_OWORD *)uint64_t v146 = *(_OWORD *)&v139[32];
  *(_OWORD *)&v146[12] = *(_OWORD *)&v139[44];
  uint64_t v66 = v136;
  __n128 v67 = UIGestureRecognizerRepresentableContext.init(coordinator:converter:)(v65, (uint64_t *)v145, v40);
  uint64_t v68 = *(int *)(a1 + 52);
  uint64_t v69 = v130;
  if (*(void *)(v130 + v68))
  {
    swift_retain();
  }
  else
  {
    uint64_t v120 = v45;
    uint64_t v70 = v122;
    uint64_t v71 = v68;
    uint64_t v72 = v111;
    uint64_t v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v122 + 16))(v111, v130, a1, v67);
    MEMORY[0x1F4188790](v73);
    v108[-4] = v66;
    v108[-3] = v74;
    v108[-2] = v134;
    v108[-1] = v40;
    swift_getAssociatedTypeWitness();
    swift_retain();
    swift_getWitnessTable();
    uint64_t v75 = v132;
    StatefulRule.withObservation<A>(do:)();
    uint64_t v132 = v75;
    uint64_t v76 = v70;
    uint64_t v64 = v128;
    uint64_t v77 = v72;
    uint64_t v68 = v71;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v77, a1);
    uint64_t v78 = *(void *)&v145[0];

    *(void *)(v69 + v71) = v78;
    GestureRepresentableChild.recognizerBox.getter(a1);
    swift_unknownObjectWeakAssign();
    swift_release();
    uint64_t v79 = *(int *)(a1 + 48);
    if (!*(void *)(v69 + v79))
    {
      uint64_t v80 = v136;
      type metadata accessor for DefaultGestureRecognizerRepresentableCoordinator();
      uint64_t v81 = (uint64_t)v109;
      ((void (*)(char *, char *, uint64_t))v108[0])(v109, v134, v80);
      uint64_t v82 = (uint64_t)v110;
      (*(void (**)(char *, char *, uint64_t))(v123 + 16))(v110, v137, v64);
      swift_allocObject();
      uint64_t result = DefaultGestureRecognizerRepresentableCoordinator.init(representable:context:)(v81, v82);
      int v84 = *(void **)(v69 + v71);
      if (!v84) {
        goto LABEL_30;
      }
      uint64_t v85 = result;
      id v86 = v84;
      objc_msgSend(v86, sel_addTarget_action_, v85, sel_dispatchWithTarget_);

      *(void *)(v69 + v79) = v85;
    }
    uint64_t v40 = (uint64_t)v137;
    uint64_t v63 = v135;
    unsigned int v45 = v120;
  }
  if (v138 != 1)
  {
    swift_release();
    long long v107 = v134;
    uint64_t v89 = v136;
    goto LABEL_25;
  }
  uint64_t v119 = v68;
  uint64_t v120 = v45;
  uint64_t v87 = *(void *)(v69 + *(int *)(a1 + 48));
  uint64_t v88 = v134;
  uint64_t v89 = v136;
  if (v87)
  {
    uint64_t v90 = v87 + *(void *)(*(void *)v87 + 96);
    swift_beginAccess();
    uint64_t v91 = *(void (**)(uint64_t, char *, uint64_t))(v121 + 24);
    swift_retain();
    v91(v90, v88, v89);
    swift_endAccess();
    uint64_t v92 = v87 + *(void *)(*(void *)v87 + 104);
    swift_beginAccess();
    uint64_t v93 = v92;
    uint64_t v40 = (uint64_t)v137;
    (*(void (**)(uint64_t, char *, uint64_t))(v123 + 24))(v93, v137, v64);
    swift_endAccess();
    swift_release();
  }
  uint64_t v94 = v122;
  uint64_t v95 = v88;
  uint64_t v96 = v116;
  uint64_t v97 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v122 + 16))(v116, v69, a1);
  MEMORY[0x1F4188790](v97);
  v108[-6] = v89;
  v108[-5] = v63;
  v108[-4] = v95;
  v108[-3] = v69;
  v108[-2] = v40;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v99 = MEMORY[0x1E4FBC848];
  StatefulRule.withObservation<A>(do:)();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v96, a1);
  double v100 = *(void **)(v69 + v119);
  if (v100)
  {
    uint64_t v101 = (uint64_t)v115;
    ((void (*)(char *, char *, uint64_t))v126)(v115, v120, v131);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v124)(v101, 1, AssociatedTypeWitness);
    if (result != 1)
    {
      double v102 = v112;
      uint64_t v103 = ConcreteRecognizer.init(recognizer:coordinator:)((uint64_t)v100, v101, v112);
      MEMORY[0x1F4188790](v103);
      v108[-2] = a1;
      v108[-1] = WitnessTable;
      id v104 = v100;
      uint64_t v105 = v114;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v102, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v108[-4], v114, MEMORY[0x1E4FBC248], v99 + 8, MEMORY[0x1E4FBC278], v106);
      swift_release();
      (*(void (**)(void *, uint64_t))(v113 + 8))(v102, v105);
      uint64_t v40 = (uint64_t)v137;
      long long v107 = v134;
      uint64_t v64 = v128;
LABEL_25:
      (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v40, v64);
      return (*(uint64_t (**)(char *, uint64_t))(v121 + 8))(v107, v89);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t closure #2 in GestureRepresentableChild.updateValue()(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v10, v8);
  long long v11 = a2[1];
  v13[0] = *a2;
  v13[1] = v11;
  v14[0] = a2[2];
  *(_OWORD *)((char *)v14 + 12) = *(_OWORD *)((char *)a2 + 44);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(a4 + 32))(v13, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, a3);
}

uint64_t closure #3 in GestureRepresentableChild.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v9 + 16))(v12, v10);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 40))(a2, a3, a4);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, a3);
  *a5 = v13;
  return result;
}

uint64_t closure #4 in GestureRepresentableChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a4 - 8);
  double v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v11, v9);
  uint64_t result = type metadata accessor for GestureRepresentableChild();
  uint64_t v13 = *(void **)(a2 + *(int *)(result + 52));
  if (v13)
  {
    uint64_t v14 = *(void (**)(void))(a5 + 48);
    id v15 = v13;
    v14();

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ConcreteRecognizer.init(recognizer:coordinator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for ConcreteRecognizer() + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v6(v4, a2, AssociatedTypeWitness);
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance GestureRepresentableChild<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ConcreteRecognizer();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t RepresentableGestureResponderFilter.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(v0 + 96);
  if (!v2)
  {
    type metadata accessor for RepresentableGestureResponder();
    int v3 = *(_DWORD *)v0;
    int v4 = *(_DWORD *)(v1 + 16);
    uint64_t v5 = *(void *)(v1 + 24);
    uint64_t v7 = *(void *)(v1 + 48);
    uint64_t v6 = *(void *)(v1 + 56);
    int v8 = *(_DWORD *)(v1 + 88);
    double v9 = *(void **)(v1 + 104);
    uint64_t v16 = *(void *)(v1 + 8);
    int v17 = v4;
    uint64_t v18 = v5;
    long long v19 = *(_OWORD *)(v1 + 32);
    uint64_t v20 = v7;
    uint64_t v21 = v6;
    long long v22 = *(_OWORD *)(v1 + 64);
    uint64_t v23 = *(void *)(v1 + 80);
    int v24 = v8;
    Currentunsigned int Attribute = AGGraphGetCurrentAttribute();
    if (CurrentAttribute == *MEMORY[0x1E4F4E7A0]) {
      __break(1u);
    }
    int v11 = CurrentAttribute;
    swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v12 = v9;
    uint64_t v2 = RepresentableGestureResponder.init(representable:inputs:context:viewSubgraph:)(v3, (uint64_t)&v16, v11);
    *(void *)(v1 + 96) = v2;
  }
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v13)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_188351940;
    *(void *)(v15 + 32) = v2;
    uint64_t v16 = v15;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t RepresentableGestureResponder.__allocating_init(representable:inputs:context:viewSubgraph:)(int a1, uint64_t a2, int a3)
{
  return RepresentableGestureResponder.init(representable:inputs:context:viewSubgraph:)(a1, a2, a3);
}

uint64_t RepresentableGestureResponder.recognizerSource.getter()
{
  if (*(void *)(v0 + 232))
  {
    uint64_t v1 = *(void *)(v0 + 232);
  }
  else
  {
    type metadata accessor for ConcreteRecognizer();
    uint64_t v2 = *(void **)AGGraphGetInputValue();
    type metadata accessor for EventBindingSourceAdaptor();
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 16) = v2;
    *(void *)(v0 + 232) = v1;
    id v3 = v2;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t RepresentableGestureResponder.init(representable:inputs:context:viewSubgraph:)(int a1, uint64_t a2, int a3)
{
  *(void *)(v3 + 224) = 0;
  *(void *)(v3 + 232) = 0;
  *(_DWORD *)(v3 + 216) = a1;
  *(_DWORD *)(v3 + 220) = a3;
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t RepresentableGestureResponder.isValid.getter()
{
  if (!*(void *)(v0 + 224)) {
    return 0;
  }
  id v1 = (id)AGGraphGetAttributeSubgraph();
  uint64_t IsValid = AGSubgraphIsValid();

  return IsValid;
}

uint64_t RepresentableGestureResponder.gestureContainer.getter()
{
  if (*(void *)(v0 + 224)) {
    return swift_unknownObjectRetain();
  }
  uint64_t v1 = v0;
  uint64_t v2 = (void *)DefaultLayoutViewResponder.viewSubgraph.getter();
  int IsValid = AGSubgraphIsValid();

  if (!IsValid) {
    return 0;
  }
  swift_getWitnessTable();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = _ViewInputs.makeGestureContainer(responder:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)(v1 + 224) = v4;
  swift_unknownObjectRelease();
  uint64_t result = *(void *)(v1 + 224);
  if (result) {
    return swift_unknownObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t RepresentableGestureResponder.eventSources.getter()
{
  type metadata accessor for _ContiguousArrayStorage<EventBindingSource>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<EventBindingSource>, (uint64_t (*)(uint64_t))type metadata accessor for EventBindingSource, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18834BB80;
  uint64_t v1 = RepresentableGestureResponder.recognizerSource.getter();
  unint64_t v2 = lazy protocol witness table accessor for type EventBindingSourceAdaptor and conformance EventBindingSourceAdaptor();
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v2;
  return v0;
}

uint64_t RepresentableGestureResponder.detachContainer()()
{
  *(void *)(v0 + 224) = 0;
  return swift_unknownObjectRelease();
}

void RepresentableGestureResponder.__allocating_init(inputs:)()
{
}

void RepresentableGestureResponder.__allocating_init(inputs:viewSubgraph:)()
{
}

uint64_t RepresentableGestureResponder.__ivar_destroyer()
{
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t RepresentableGestureResponder.deinit()
{
  uint64_t v0 = DefaultLayoutViewResponder.deinit();
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t RepresentableGestureResponder.__deallocating_deinit()
{
  RepresentableGestureResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for RepresentableGestureResponder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for AnyGestureContainingResponder.gestureType.getter in conformance RepresentableGestureResponder<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(void *)(a1 + class metadata base offset for RepresentableGestureResponder), *(void *)(a1 + class metadata base offset for RepresentableGestureResponder + 8), a3, a4);
}

uint64_t EventBindingSourceAdaptor.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
  if (result == a1)
  {
    uint64_t v10 = *(void *)(v3 + 16);
    uint64_t v9 = *(void *)(a2 - 8);
    if (*(void *)(v9 + 64) == 8)
    {
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v9 + 16))(a3, &v10, a2);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a3, 0, 1, a2);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56);
    return v8(a3, 1, 1, a2);
  }
  return result;
}

uint64_t type metadata accessor for EventBindingSourceAdaptor()
{
  return self;
}

uint64_t sub_1881E75C8()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for ConcreteRecognizer()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void **initializeBufferWithCopyOfBuffer for ConcreteRecognizer(void **a1, void **a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = (char *)*a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (void **)&v9[(v6 & 0xF8 ^ 0x1F8) & (v6 + 16)];
    swift_retain();
  }
  else
  {
    uint64_t v12 = ~v6;
    char v13 = (char *)a1 + v6;
    uint64_t v14 = (char *)a2 + v6;
    uint64_t v15 = (unint64_t)(v13 + 8) & v12;
    uint64_t v16 = (unint64_t)(v14 + 8) & v12;
    int v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    uint64_t v18 = v9;
    v17(v15, v16, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t destroy for ConcreteRecognizer(id *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = AssociatedTypeWitness;
  unint64_t v6 = ((unint64_t)a1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  return v4(v6, v5);
}

void **initializeWithCopy for ConcreteRecognizer(void **a1, void **a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  id v11 = v4;
  v7(v9, v10, AssociatedTypeWitness);
  return a1;
}

void **assignWithCopy for ConcreteRecognizer(void **a1, void **a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  id v6 = v4;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), AssociatedTypeWitness);
  return a1;
}

void *initializeWithTake for ConcreteRecognizer(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), AssociatedTypeWitness);
  return a1;
}

void **assignWithTake for ConcreteRecognizer(void **a1, void **a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConcreteRecognizer(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v10 = ((v8 + 8) & ~v8) + v9;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      if ((v6 & 0x80000000) != 0)
      {
        int v17 = *(uint64_t (**)(unint64_t))(v5 + 48);
        return v17(((unint64_t)a1 + v8 + 8) & ~v8);
      }
      else
      {
        uint64_t v16 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v16) = -1;
        }
        return (v16 + 1);
      }
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v10 | v15) + 1;
}

void storeEnumTagSinglePayload for ConcreteRecognizer(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 8) & ~v8) + *(void *)(v6 + 64);
  if (a3 <= v9)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v12 = ~v9 + a2;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v10)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1881E7FA0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          int v17 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
          v17((unint64_t)&a1[v8 + 8] & ~v8, a2);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v16 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v16 = (a2 - 1);
          }
          *(void *)a1 = v16;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ConcreteRecognizer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for GestureRecognizerModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for GestureRecognizerModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881E8354);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in GestureRecognizerModifier<A>()
{
  return &protocol witness table for GestureRecognizerModifier<A>;
}

unint64_t lazy protocol witness table accessor for type EventBindingSourceAdaptor and conformance EventBindingSourceAdaptor()
{
  unint64_t result = lazy protocol witness table cache variable for type EventBindingSourceAdaptor and conformance EventBindingSourceAdaptor;
  if (!lazy protocol witness table cache variable for type EventBindingSourceAdaptor and conformance EventBindingSourceAdaptor)
  {
    type metadata accessor for EventBindingSourceAdaptor();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventBindingSourceAdaptor and conformance EventBindingSourceAdaptor);
  }
  return result;
}

uint64_t type metadata accessor for GestureRepresentableChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in static GestureRecognizerModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static GestureRecognizerModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for RepresentableGestureResponderFilter()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _ContiguousArrayStorage<EventBindingSource>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void destroy for RepresentableGestureResponderFilter(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v2 = *(void **)(a1 + 104);
}

uint64_t initializeWithCopy for RepresentableGestureResponderFilter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v4 = *(void **)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v5 = v4;
  return a1;
}

uint64_t assignWithCopy for RepresentableGestureResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void **)(a2 + 104);
  id v5 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v4;
  id v6 = v4;

  return a1;
}

uint64_t assignWithTake for RepresentableGestureResponderFilter(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  swift_release();
  uint64_t v4 = *(void **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);

  return a1;
}

uint64_t type metadata completion function for GestureRepresentableChild()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for GestureRepresentableChild(_DWORD *a1, _DWORD *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  BOOL v9 = v6 <= 7u && (v6 & 0x100000) == 0;
  if (v9
    && (size_t v10 = v8 + 7,
        ((((((((((((v8 + 7 + ((v6 + 24) & ~(unint64_t)v6)) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 11) & 0xFFFFFFFFFFFFFFF8)
          + 11) & 0xFFFFFFFFFFFFFFF8)
        + 11) & 0xFFFFFFFFFFFFFFF8 | 4) <= 0x18))
  {
    uint64_t v11 = AssociatedTypeWitness;
    *a1 = *a2;
    unsigned int v12 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v13 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *unsigned int v12 = *v13;
    unsigned int v14 = (_OWORD *)(((unint64_t)v12 + 11) & 0xFFFFFFFFFFFFFFF8);
    int v15 = (_OWORD *)(((unint64_t)v13 + 11) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v14 = *v15;
    uint64_t v16 = (void *)(((unint64_t)v14 + v7 + 16) & ~v7);
    int v17 = (const void *)(((unint64_t)v15 + v7 + 16) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v17, 1, AssociatedTypeWitness))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v11);
    }
    long long v19 = (void *)(((unint64_t)v16 + v10) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)(((unint64_t)v17 + v10) & 0xFFFFFFFFFFFFFFF8);
    *long long v19 = *v20;
    uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    long long v22 = (void **)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = *v22;
    *uint64_t v21 = *v22;
    int v24 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v24 = *v25;
    uint64_t v26 = (_DWORD *)(((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = (_DWORD *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v26 = *v27;
    v26[1] = v27[1];
    uint64_t v28 = (_DWORD *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v29 = (_DWORD *)(((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v28 = *v29;
    v28[1] = v29[1];
    *(_DWORD *)(((unint64_t)v28 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v29 + 11) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    id v30 = v23;
  }
  else
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (_DWORD *)(v18 + ((v6 & 0xF8 ^ 0x1F8u) & (v6 + 16)));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for GestureRepresentableChild(uint64_t a1)
{
  unint64_t v1 = (((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, AssociatedTypeWitness);
  }
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  if (!*(_DWORD *)(v3 + 84)) {
    ++v5;
  }
  unint64_t v6 = ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();

  return swift_release();
}

_DWORD *initializeWithCopy for GestureRepresentableChild(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  unint64_t v5 = (_OWORD *)(((unint64_t)v3 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (_OWORD *)(((unint64_t)v4 + 11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v5 = *v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  size_t v10 = (void *)(((unint64_t)v5 + v9 + 16) & ~v9);
  uint64_t v11 = (const void *)(((unint64_t)v6 + v9 + 16) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, AssociatedTypeWitness))
  {
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
    if (v12) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v13 + 1;
    }
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
    uint64_t v16 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v15 = v8 + 56;
    v16(v10, 0, 1, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v15 + 28);
    size_t v13 = *(void *)(v15 + 8);
  }
  if (v12) {
    size_t v17 = v13;
  }
  else {
    size_t v17 = v13 + 1;
  }
  uint64_t v18 = (void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v19 = (void *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = *v19;
  uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void **)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v22 = *v21;
  *uint64_t v20 = *v21;
  uint64_t v23 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v24 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v23 = *v24;
  uint64_t v25 = (_DWORD *)(((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (_DWORD *)(((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v27 = (unint64_t)v26 + 11;
  *uint64_t v25 = *v26;
  v25[1] = v26[1];
  uint64_t v28 = (_DWORD *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v28 = *(_DWORD *)(v27 & 0xFFFFFFFFFFFFFFF8);
  v28[1] = *(_DWORD *)((v27 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)(((unint64_t)v28 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((v27 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  id v29 = v22;
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for GestureRepresentableChild(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  unint64_t v5 = ((unint64_t)v3 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)v4 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v5 = *(void *)v6;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(v6 + 8);
  *(_DWORD *)(v5 + 12) = *(_DWORD *)(v6 + 12);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  size_t v10 = (void *)((v9 + 16 + v5) & ~v9);
  uint64_t v11 = (void *)((v9 + 16 + v6) & ~v9);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v13 = v12(v10, 1, AssociatedTypeWitness);
  int v14 = v12(v11, 1, AssociatedTypeWitness);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v10, v11, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 24))(v10, v11, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  if (v15) {
    size_t v17 = v16;
  }
  else {
    size_t v17 = v16 + 1;
  }
  memcpy(v10, v11, v17);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v18 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v19 = (uint64_t)v10 + v18 + 7;
  uint64_t v20 = (uint64_t)v11 + v18 + 7;
  unint64_t v21 = (v20 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v19 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v20 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v21 & 0xFFFFFFFFFFFFFFF8) + 15;
  int v24 = *(void **)(v21 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = *(void **)v23;
  *(void *)unint64_t v23 = v24;
  v23 += 15;
  id v27 = v24;

  v25 &= 0xFFFFFFFFFFFFFFF8;
  uint64_t v28 = *(void *)v25;
  v25 += 11;
  *(void *)(v23 & 0xFFFFFFFFFFFFFFF8) = v28;
  unint64_t v29 = (v23 & 0xFFFFFFFFFFFFFFF8) + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v29 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  *(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 4) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 4);
  id v30 = (_DWORD *)(((v25 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  char v31 = (_DWORD *)(((v29 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  *char v31 = *v30;
  v31[1] = v30[1];
  *(_DWORD *)(((unint64_t)v31 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v30 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *initializeWithTake for GestureRepresentableChild(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  unint64_t v5 = (_OWORD *)(((unint64_t)v3 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (_OWORD *)(((unint64_t)v4 + 11) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v5 = *v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  size_t v10 = (void *)(((unint64_t)v5 + v9 + 16) & ~v9);
  uint64_t v11 = (const void *)(((unint64_t)v6 + v9 + 16) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, AssociatedTypeWitness))
  {
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
    if (v12) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v13 + 1;
    }
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
    size_t v16 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v15 = v8 + 56;
    v16(v10, 0, 1, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v15 + 28);
    size_t v13 = *(void *)(v15 + 8);
  }
  if (v12) {
    size_t v17 = v13;
  }
  else {
    size_t v17 = v13 + 1;
  }
  uint64_t v18 = (void *)(((unint64_t)v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v18 = *v19;
  uint64_t v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  unint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v22 = *v23;
  int v24 = (_DWORD *)(((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (_DWORD *)(((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = (unint64_t)v25 + 11;
  *int v24 = *v25;
  v24[1] = v25[1];
  id v27 = (_DWORD *)(((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8);
  *id v27 = *(_DWORD *)(v26 & 0xFFFFFFFFFFFFFFF8);
  v27[1] = *(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)(((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((v26 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

_DWORD *assignWithTake for GestureRepresentableChild(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  unint64_t v5 = ((unint64_t)v3 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)v4 + 11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v5 = *(void *)v6;
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(v6 + 8);
  *(_DWORD *)(v5 + 12) = *(_DWORD *)(v6 + 12);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  size_t v10 = (void *)((v9 + 16 + v5) & ~v9);
  uint64_t v11 = (void *)((v9 + 16 + v6) & ~v9);
  int v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v8 + 48);
  int v13 = v12(v10, 1, AssociatedTypeWitness);
  int v14 = v12(v11, 1, AssociatedTypeWitness);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v10, v11, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v10, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  else
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v8 + 40))(v10, v11, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
    int v15 = *(_DWORD *)(v8 + 84);
    size_t v16 = *(void *)(v8 + 64);
  }
  if (v15) {
    size_t v17 = v16;
  }
  else {
    size_t v17 = v16 + 1;
  }
  memcpy(v10, v11, v17);
LABEL_12:
  if (*(_DWORD *)(v8 + 84)) {
    uint64_t v18 = *(void *)(v8 + 64);
  }
  else {
    uint64_t v18 = *(void *)(v8 + 64) + 1;
  }
  uint64_t v19 = (uint64_t)v10 + v18 + 7;
  uint64_t v20 = (void *)(((unint64_t)v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v19 & 0xFFFFFFFFFFFFFFF8) = *v20;
  unint64_t v21 = (v19 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  v21 &= 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (void **)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = *(void **)v21;
  *(void *)unint64_t v21 = *v22;

  unint64_t v24 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)v25;
  v25 += 11;
  *(void *)unint64_t v24 = v26;
  v24 += 11;
  swift_release();
  *(_DWORD *)(v24 & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(v25 & 0xFFFFFFFFFFFFFFF8);
  *(_DWORD *)((v24 & 0xFFFFFFFFFFFFFFF8) + 4) = *(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 4);
  id v27 = (_DWORD *)(((v25 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v28 = (_DWORD *)(((v24 & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v28 = *v27;
  v28[1] = v27[1];
  *(_DWORD *)(((unint64_t)v28 + 11) & 0xFFFFFFFFFFFFFFF8) = *(_DWORD *)(((unint64_t)v27 + 11) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for GestureRepresentableChild(_DWORD *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  unsigned int v7 = v6 - 1;
  if (!v6) {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v10 + 7;
  if (v8 < a2
    && *((unsigned char *)a1
       + ((((((((((((v11 + ((v9 + 24) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 11) & 0xFFFFFFFFFFFFFFF8)
           + 11) & 0xFFFFFFFFFFFFFFF8)
         + 11) & 0xFFFFFFFFFFFFFFF8 | 4)))
  {
    return v8 + *a1 + 1;
  }
  unint64_t v13 = ((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + v9 + 16) & ~v9;
  if (v7 < 0x7FFFFFFE)
  {
    unint64_t v15 = *(void *)((v11 + v13) & 0xFFFFFFFFFFFFFFF8);
    if (v15 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    if ((v15 + 1) >= 2) {
      return v15;
    }
    else {
      return 0;
    }
  }
  else
  {
    unsigned int v14 = (*(uint64_t (**)(unint64_t))(v5 + 48))(v13);
    if (v14 >= 2) {
      return v14 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for GestureRepresentableChild(_DWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 1;
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  if (!v7) {
    unsigned int v8 = 0;
  }
  if (v8 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  else {
    unsigned int v10 = v8;
  }
  uint64_t v11 = (v9 + 24) & ~v9;
  if (v7) {
    size_t v12 = *(void *)(v6 + 64);
  }
  else {
    size_t v12 = *(void *)(v6 + 64) + 1;
  }
  unint64_t v13 = (((((((((((v12 + 7 + v11) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
           + 11) & 0xFFFFFFFFFFFFFFF8)
         + 11) & 0xFFFFFFFFFFFFFFF8)
       + 11) & 0xFFFFFFFFFFFFFFF8 | 4;
  if (v10 >= a2)
  {
    if (v10 < a3) {
      *((unsigned char *)a1 + v13) = 0;
    }
    if (a2)
    {
      unsigned int v14 = (unsigned char *)(((((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFF8) + v9 + 16) & ~v9);
      if (v8 < 0x7FFFFFFE)
      {
        uint64_t v18 = (void *)((unint64_t)&v14[v12 + 7] & 0xFFFFFFFFFFFFFFF8);
        if (a2 > 0x7FFFFFFE)
        {
          *uint64_t v18 = 0;
          *(_DWORD *)uint64_t v18 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *uint64_t v18 = a2;
        }
      }
      else if (v8 >= a2)
      {
        uint64_t v19 = *(void (**)(unsigned char *, void))(v6 + 56);
        v19(v14, a2 + 1);
      }
      else
      {
        if (v12 <= 3) {
          int v15 = ~(-1 << (8 * v12));
        }
        else {
          int v15 = -1;
        }
        if (v12)
        {
          int v16 = v15 & (~v8 + a2);
          if (v12 <= 3) {
            int v17 = v12;
          }
          else {
            int v17 = 4;
          }
          bzero(v14, v12);
          switch(v17)
          {
            case 2:
              *(_WORD *)unsigned int v14 = v16;
              break;
            case 3:
              *(_WORD *)unsigned int v14 = v16;
              _OWORD v14[2] = BYTE2(v16);
              break;
            case 4:
              *(_DWORD *)unsigned int v14 = v16;
              break;
            default:
              *unsigned int v14 = v16;
              break;
          }
        }
      }
    }
  }
  else
  {
    bzero(a1, (((((((((((v12 + 7 + v11) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 11) & 0xFFFFFFFFFFFFFFF8)+ 11) & 0xFFFFFFFFFFFFFFF8)+ 11) & 0xFFFFFFFFFFFFFFF8 | 4);
    *a1 = ~v10 + a2;
    if (v10 < a3) {
      *((unsigned char *)a1 + v13) = 1;
    }
  }
}

uint64_t base witness table accessor for _AttributeBody in RepresentableGestureResponderFilter<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in GestureRepresentableChild<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in GestureRepresentableChild.updateValue()@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = _DynamicPropertyBuffer.update(container:phase:)();
  *a1 = result & 1;
  return result;
}

uint64_t partial apply for closure #2 in GestureRepresentableChild.updateValue()()
{
  return closure #2 in GestureRepresentableChild.updateValue()(*(void *)(v0 + 32), *(_OWORD **)(v0 + 40), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #3 in GestureRepresentableChild.updateValue()@<X0>(uint64_t *a1@<X8>)
{
  return closure #3 in GestureRepresentableChild.updateValue()(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t partial apply for closure #4 in GestureRepresentableChild.updateValue()()
{
  return closure #4 in GestureRepresentableChild.updateValue()(v0[4], v0[5], v0[6], v0[2], v0[3]);
}

void __swiftcall _MenuButtonStyleConfiguration.init()()
{
}

void _MenuButtonStyleConfiguration.label.getter()
{
}

void _MenuButtonStyleConfiguration.label.setter()
{
}

void _MenuButtonStyleConfiguration.label.modify()
{
}

void _MenuButtonStyleConfiguration.content.getter()
{
}

void View.menuButtonStyle<A>(_:)()
{
}

unint64_t instantiation function for generic protocol witness table for _MenuButtonStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in _MenuButtonStyleConfiguration.Label()
{
  return &protocol witness table for _MenuButtonStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for _MenuButtonStyleConfiguration.Content(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in _MenuButtonStyleConfiguration.Content()
{
  return &protocol witness table for _MenuButtonStyleConfiguration.Content;
}

uint64_t dispatch thunk of MenuButtonStyle._body(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for _MenuButtonStyleConfiguration()
{
  return &type metadata for _MenuButtonStyleConfiguration;
}

ValueMetadata *type metadata accessor for _MenuButtonStyleConfiguration.Label()
{
  return &type metadata for _MenuButtonStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for _MenuButtonStyleConfiguration.Content()
{
  return &type metadata for _MenuButtonStyleConfiguration.Content;
}

uint64_t sub_1881E9BB4()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for MenuButtonStyleWriter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for MenuButtonStyleWriter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for MenuButtonStyleWriter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881E9FB0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

ValueMetadata *type metadata accessor for ResolvedMenuButton()
{
  return &type metadata for ResolvedMenuButton;
}

_UNKNOWN **base witness table accessor for View in ResolvedMenuButton()
{
  return &protocol witness table for ResolvedMenuButton;
}

_UNKNOWN **base witness table accessor for ViewModifier in MenuButtonStyleWriter<A>()
{
  return &protocol witness table for MenuButtonStyleWriter<A>;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance MenuButtonStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for MenuButtonStyleWriter<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance MenuButtonStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for MenuButtonStyleWriter<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance MenuButtonStyleWriter<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

void protocol witness for View.body.getter in conformance ResolvedMenuButton()
{
}

void _MenuButtonStyleConfiguration.content.setter()
{
}

BOOL static NavigationSplitViewColumn.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static NavigationSplitViewColumn.sidebar.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static NavigationSplitViewColumn.detail.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static NavigationSplitViewColumn.content.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void NavigationSplitViewColumn.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int NavigationSplitViewColumn.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewColumn and conformance NavigationSplitViewColumn()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewColumn and conformance NavigationSplitViewColumn;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewColumn and conformance NavigationSplitViewColumn)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewColumn and conformance NavigationSplitViewColumn);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitViewColumn.Tag and conformance NavigationSplitViewColumn.Tag()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitViewColumn.Tag and conformance NavigationSplitViewColumn.Tag;
  if (!lazy protocol witness table cache variable for type NavigationSplitViewColumn.Tag and conformance NavigationSplitViewColumn.Tag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitViewColumn.Tag and conformance NavigationSplitViewColumn.Tag);
  }
  return result;
}

void TupleCommandContent.body.getter()
{
}

uint64_t TupleCommandContent._resolve(into:)(long long *a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TupleCommandContent.Visitor();
  uint64_t v25 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unsigned int v10 = (char *)&v24 - v9;
  lazy protocol witness table accessor for type CommandsDescriptor and conformance CommandsDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v11 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, v4);
  uint64_t v12 = *((void *)a1 + 2);
  int v13 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  long long v26 = *a1;
  v13(v10, v7, v4);
  unsigned int v14 = &v10[*(int *)(v8 + 28)];
  *(_OWORD *)unsigned int v14 = v26;
  *((void *)v14 + 2) = v12;
  *(void *)&v10[*(int *)(v8 + 32)] = 0;
  uint64_t v15 = *(void *)(v11 + 16);
  if (v15)
  {
    uint64_t v16 = *(int *)(v8 + 32);
    int v17 = (long long *)(v11 + 40);
    do
    {
      long long v18 = *v17;
      int v17 = (long long *)((char *)v17 + 24);
      long long v26 = v18;
      *(void *)&v10[v16] = AGTupleElementOffset();
      long long v27 = v26;
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v10, v8, (uint64_t)&protocol witness table for TupleCommandContent<A>.Visitor);
      --v15;
    }
    while (v15);
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = &v10[*(int *)(v8 + 28)];
  uint64_t v20 = *((void *)v19 + 1);
  uint64_t v21 = *((void *)v19 + 2);
  *(void *)a1 = *(void *)v19;
  *((void *)a1 + 1) = v20;
  *((void *)a1 + 2) = v21;
  unint64_t v22 = *(uint64_t (**)(char *, uint64_t))(v25 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v22(v10, v8);
}

uint64_t type metadata accessor for TupleCommandContent.Visitor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TupleCommandContent.Visitor.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a1;
  return _ss15withUnsafeBytes2of_q0_xz_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)partial apply for closure #1 in TupleCommandContent.Visitor.visit<A>(type:), (uint64_t)&v10, v11, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], a8);
}

void closure #1 in TupleCommandContent.Visitor.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v14)
  {
    uint64_t v15 = type metadata accessor for TupleCommandContent.Visitor();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1 + *(void *)(a3 + *(int *)(v15 + 32)), a6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(a7 + 40))(a3 + *(int *)(v15 + 28), a6, a7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a6);
  }
  else
  {
    __break(1u);
  }
}

uint64_t _ss15withUnsafeBytes2of_q0_xz_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  double v12 = MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v17(v16, v16 + *(void *)(*(void *)(v15 - 8) + 64), v14, v12);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t protocol witness for CommandsTypeVisitor.visit<A>(type:) in conformance TupleCommandContent<A>.Visitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return TupleCommandContent.Visitor.visit<A>(type:)(a1, a4, a2, a3, a5, a6, a7, a8);
}

void protocol witness for Commands.body.getter in conformance TupleCommandContent<A>()
{
}

uint64_t static Group<A>._makeCommands(content:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 14);
  LODWORD(v15) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  long long v14 = *(_OWORD *)(a2 + 5);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v15 = v7;
  int v16 = v8;
  uint64_t v17 = v9;
  uint64_t v18 = v11;
  uint64_t v19 = v12;
  long long v20 = v14;
  int v21 = v10;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(v22, &v15, a3, a4);
}

uint64_t Group<A>._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, void))(a3 + 40))(a1, *(void *)(a2 + 16));
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeCommands(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for Commands._resolve(into:) in conformance <A> Group<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Group<A>._resolve(into:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t getEnumTagSinglePayload for TupleCommandContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TupleCommandContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881EAD70);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata completion function for TupleCommandContent.Visitor()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for TupleCommandContent.Visitor(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleCommandContent.Visitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unsigned int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v7 = *v8;
  v7[1] = v8[1];
  _OWORD v7[2] = v8[2];
  *(void *)(((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleCommandContent.Visitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unsigned int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  size_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v7 = *v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7[1] = v8[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  _OWORD v7[2] = v8[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for TupleCommandContent.Visitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(void *)(v7 + 16) = v9;
  *(void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TupleCommandContent.Visitor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  swift_bridgeObjectRelease();
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  _OWORD v7[2] = v8[2];
  swift_bridgeObjectRelease();
  *(void *)(((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleCommandContent.Visitor(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1881EB2F4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for TupleCommandContent.Visitor(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
                unint64_t v19[2] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              *uint64_t v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1881EB4FCLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

void partial apply for closure #1 in TupleCommandContent.Visitor.visit<A>(type:)(uint64_t a1, uint64_t a2)
{
  closure #1 in TupleCommandContent.Visitor.visit<A>(type:)(a1, a2, v2[5], v2[6], v2[2], v2[3], v2[4]);
}

double MenuSectionStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _OWORD *a4@<X8>)
{
  uint64_t v8 = *(void *)(v4 + 8);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 16);
  uint64_t v10 = static VerticalAlignment.center.getter();
  *(void *)&v29[0] = 0;
  *((void *)&v29[0] + 1) = 0xE000000000000000;
  Namespace.wrappedValue.getter();
  _print_unlocked<A, B>(_:_:)();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0;
  *(void *)(v11 + 24) = 0xE000000000000000;
  v25[0] = v10;
  v25[1] = 0;
  char v26 = 1;
  long long v27 = partial apply for closure #1 in View.platformItemIdentifier(_:);
  uint64_t v28 = v11;
  v20[0] = 2;
  memset(&v20[1], 0, 24);
  v20[4] = 0xC000000000000000;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  specialized Environment.wrappedValue.getter(v8, v9, &v19);
  outlined consume of Environment<Bool?>.Content(v8, v9);
  LOBYTE(v10) = v19;
  outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  specialized View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:)(v20, 0, 0, 0, v10, (uint64_t)v25, a1, a2, (uint64_t)v29, a3);
  swift_release();
  long long v12 = v35;
  long long v13 = v37[0];
  a4[8] = v36;
  a4[9] = v13;
  *(_OWORD *)((char *)a4 + 153) = *(_OWORD *)((char *)v37 + 9);
  long long v14 = v31;
  long long v15 = v33;
  a4[4] = v32;
  a4[5] = v15;
  a4[6] = v34;
  a4[7] = v12;
  long long v16 = v29[1];
  *a4 = v29[0];
  a4[1] = v16;
  double result = *(double *)&v30;
  a4[2] = v30;
  a4[3] = v14;
  return result;
}

uint64_t EnvironmentValues.menuSectionsControlSize.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>, (uint64_t)&type metadata for EnvironmentValues.MenuSectionsControlSize, (uint64_t)&protocol witness table for EnvironmentValues.MenuSectionsControlSize, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>, (uint64_t)&type metadata for EnvironmentValues.MenuSectionsControlSize, (uint64_t)&protocol witness table for EnvironmentValues.MenuSectionsControlSize, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.menuSectionsControlSize.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>, (uint64_t)&type metadata for EnvironmentValues.MenuSectionsControlSize, (uint64_t)&protocol witness table for EnvironmentValues.MenuSectionsControlSize, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.menuSectionsControlSize(_:)()
{
  return swift_release();
}

uint64_t key path getter for EnvironmentValues.menuSectionsControlSize : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>, (uint64_t)&type metadata for EnvironmentValues.MenuSectionsControlSize, (uint64_t)&protocol witness table for EnvironmentValues.MenuSectionsControlSize, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>, (uint64_t)&type metadata for EnvironmentValues.MenuSectionsControlSize, (uint64_t)&protocol witness table for EnvironmentValues.MenuSectionsControlSize, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.menuSectionsControlSize : EnvironmentValues()
{
  return EnvironmentValues.menuSectionsControlSize.setter();
}

uint64_t sub_1881EBB08()
{
  return EnvironmentValues.menuSectionsControlSize.setter();
}

uint64_t sub_1881EBB40()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ControlSize>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ControlSize>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ControlSize>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ControlSize> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>, (uint64_t)&type metadata for EnvironmentValues.MenuSectionsControlSize, (uint64_t)&protocol witness table for EnvironmentValues.MenuSectionsControlSize, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.MenuSectionsControlSize()
{
  return &type metadata for EnvironmentValues.MenuSectionsControlSize;
}

uint64_t assignWithCopy for MenuSectionStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  unsigned __int8 v4 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v3, v4);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Environment<Bool?>.Content(v5, v6);
  return a1;
}

uint64_t assignWithTake for MenuSectionStyle(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of Environment<Bool?>.Content(v4, v5);
  return a1;
}

uint64_t associated type witness table accessor for SectionStyle.Body : View in MenuSectionStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1881EBDAC()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>)
  {
    type metadata accessor for ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    type metadata accessor for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>(255, &lazy cache variable for type metadata for HStack<SectionStyleConfiguration.Header>, (uint64_t)&type metadata for SectionStyleConfiguration.Header, (uint64_t)&protocol witness table for SectionStyleConfiguration.Header, MEMORY[0x1E4F415B8]);
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>);
    }
  }
}

void type metadata accessor for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>()
{
  if (!lazy cache variable for type metadata for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>);
    unint64_t v0 = type metadata accessor for PlatformItemListGeneratingViewModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>);
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>(255, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, MEMORY[0x1E4F417F8], MEMORY[0x1E4F40578]);
    type metadata accessor for SectionStyleModifier<MenuSectionStyle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for SectionStyleModifier<MenuSectionStyle>()
{
  if (!lazy cache variable for type metadata for SectionStyleModifier<MenuSectionStyle>)
  {
    lazy protocol witness table accessor for type MenuSectionStyle and conformance MenuSectionStyle();
    unint64_t v0 = type metadata accessor for SectionStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SectionStyleModifier<MenuSectionStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>);
    lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>();
    lazy protocol witness table accessor for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, (void (*)(void))lazy protocol witness table accessor for type HStack<SectionStyleConfiguration.Header> and conformance HStack<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<SectionStyleConfiguration.Header>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleModifier<MenuSectionStyle>>, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<SectionStyleConfiguration.Header> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<SectionStyleConfiguration.Header> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<SectionStyleConfiguration.Header> and conformance HStack<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.MenuSectionsControlSize>(255, &lazy cache variable for type metadata for HStack<SectionStyleConfiguration.Header>, (uint64_t)&type metadata for SectionStyleConfiguration.Header, (uint64_t)&protocol witness table for SectionStyleConfiguration.Header, MEMORY[0x1E4F415B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<SectionStyleConfiguration.Header> and conformance HStack<A>);
  }
  return result;
}

void static PresentationKind.sheet.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t EnvironmentValues.presentationKind.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void static PresentationKind.popover.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static PresentationKind.none.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t key path getter for EnvironmentValues.presentationKind : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.presentationKind : EnvironmentValues()
{
  return EnvironmentValues.presentationKind.setter();
}

uint64_t EnvironmentValues.presentationKind.setter()
{
  type metadata accessor for EnvironmentPropertyKey<PresentationKind.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static PresentationKind.fullScreenCover.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static PresentationKind.blurOverFullScreen.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

BOOL static PresentationKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PresentationKind.description.getter()
{
  return String.init<A>(describing:)();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresentationKind()
{
  return String.init<A>(describing:)();
}

uint64_t sub_1881EC998()
{
  return EnvironmentValues.presentationKind.setter();
}

unsigned char *storeEnumTagSinglePayload for PresentationKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881ECAA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentationKind.Tag()
{
  return &type metadata for PresentationKind.Tag;
}

ValueMetadata *type metadata accessor for PresentationKind.Key()
{
  return &type metadata for PresentationKind.Key;
}

unint64_t lazy protocol witness table accessor for type PresentationKind.Tag and conformance PresentationKind.Tag()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationKind.Tag and conformance PresentationKind.Tag;
  if (!lazy protocol witness table cache variable for type PresentationKind.Tag and conformance PresentationKind.Tag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationKind.Tag and conformance PresentationKind.Tag);
  }
  return result;
}

void *PasteButton.init(supportedContentTypes:payloadAction:)@<X0>(BOOL a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, BOOL *a4@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  type metadata accessor for PasteboardEventObserver();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t result = PasteboardEventObserver.init(_:)(a1, (uint64_t)partial apply for closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:), v8);
  *a4 = a1;
  a4[1] = (BOOL)partial apply for closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:);
  a4[2] = v8;
  a4[3] = 0;
  a4[4] = (BOOL)result;
  return result;
}

uint64_t sub_1881ECBF0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t (*partial apply for closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:)(uint64_t a1))()
{
  return closure #1 in PasteHelper.init(supportedContentTypes:payloadAction:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for PasteboardEventObserver()
{
  uint64_t result = type metadata singleton initialization cache for PasteboardEventObserver;
  if (!type metadata singleton initialization cache for PasteboardEventObserver) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void PasteButton.init<A>(supportedContentTypes:validator:payloadAction:)()
{
}

{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t PasteButton.init<A>(payloadType:onPaste:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  swift_retain();
  uint64_t v10 = PasteHelper.init<A>(onPaste:)(a1, a2, a3, a4);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  type metadata accessor for PasteboardEventObserver();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  long long v15 = PasteboardEventObserver.init(_:)(v10, v12, v14);
  uint64_t result = swift_release();
  *a5 = v10;
  a5[1] = v12;
  a5[2] = v14;
  a5[3] = 0;
  a5[4] = (uint64_t)v15;
  return result;
}

uint64_t PasteButton.pasteButton.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Button<Label<Text, Image>>();
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  unsigned int v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v7 = v1[1];
  long long v27 = *v1;
  *(_OWORD *)uint64_t v28 = v7;
  *(void *)&v28[16] = *((void *)v1 + 4);
  uint64_t v8 = swift_allocObject();
  long long v9 = v1[1];
  *(_OWORD *)(v8 + 16) = *v1;
  *(_OWORD *)(v8 + 32) = v9;
  *(void *)(v8 + 48) = *((void *)v1 + 4);
  *unsigned int v6 = 256;
  uint64_t v10 = (void (*(**)())(void))((char *)v6 + *(int *)(v4 + 44));
  *uint64_t v10 = partial apply for closure #1 in PasteButton.pasteButton.getter;
  v10[1] = (void (*(*)())(void))v8;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  uint64_t v11 = (char *)v6 + *(int *)(v4 + 48);
  outlined retain of PasteButton((uint64_t)&v27);
  uint64_t v12 = static Text.System.paste.getter();
  uint64_t v14 = v13;
  char v16 = v15;
  uint64_t v18 = v17;
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0xD000000000000010;
  *(void *)(v19 + 24) = 0x8000000188342FF0;
  *(_DWORD *)(v19 + 32) = 0;
  *(unsigned char *)(v19 + 36) = 1;
  *(_OWORD *)(v19 + 40) = xmmword_18834C6B0;
  *(void *)(v19 + 56) = 0xD000000000000010;
  *(void *)(v19 + 64) = 0x8000000188342FF0;
  *(_OWORD *)(v19 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v19 + 88) = 0;
  *(void *)uint64_t v11 = v12;
  *((void *)v11 + 1) = v14;
  v11[16] = v16 & 1;
  *((void *)v11 + 3) = v18;
  *((void *)v11 + 4) = v19;
  long long v29 = *(_OWORD *)&v28[8];
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  outlined release of AnyDynamicChild<A, B>((uint64_t)&v29);
  char v20 = v26[15];
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = swift_allocObject();
  *(unsigned char *)(v22 + 16) = (v20 & 1) == 0;
  outlined init with copy of ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>((uint64_t)v6, a1, (uint64_t (*)(void))type metadata accessor for Button<Label<Text, Image>>);
  type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>();
  long long v24 = (uint64_t *)(a1 + *(int *)(v23 + 36));
  *long long v24 = KeyPath;
  v24[1] = (uint64_t)partial apply for closure #1 in View.disabled(_:);
  v24[2] = v22;
  return outlined destroy of ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Button<Label<Text, Image>>);
}

void (*closure #1 in PasteButton.pasteButton.getter(uint64_t *a1))(void)
{
  uint64_t result = (void (*)(void))PasteHelper.validatedPasteHandler.getter(*a1, a1[1], a1[2]);
  if (result)
  {
    uint64_t v2 = (uint64_t)result;
    result();
    return (void (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  }
  return result;
}

uint64_t PasteButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  long long v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v1[1];
  uint64_t v13 = v1[2];
  uint64_t v12 = v1[3];
  uint64_t v14 = v1[4];
  uint64_t v28 = *v1;
  uint64_t v10 = v28;
  uint64_t v29 = v11;
  uint64_t v30 = v13;
  uint64_t v31 = v12;
  uint64_t v32 = v14;
  PasteButton.pasteButton.getter((uint64_t)v5);
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v15;
  *(void *)(v18 + 24) = v17;
  outlined init with copy of ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>);
  uint64_t v19 = (uint64_t (**)(uint64_t))&v9[*(int *)(v7 + 44)];
  *uint64_t v19 = partial apply for closure #1 in View.platformItemIdentifier(_:);
  v19[1] = (uint64_t (*)(uint64_t))v18;
  outlined destroy of ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>);
  outlined init with take of ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>((uint64_t)v9, a1);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl>();
  uint64_t v21 = a1 + *(int *)(v20 + 52);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v23 = swift_getKeyPath();
  uint64_t v24 = swift_getKeyPath();
  uint64_t v25 = swift_getKeyPath();
  *(void *)uint64_t v21 = KeyPath;
  *(unsigned char *)(v21 + 8) = 0;
  *(void *)(v21 + 16) = v23;
  *(_WORD *)(v21 + 24) = 0;
  *(void *)(v21 + 32) = v24;
  *(unsigned char *)(v21 + 40) = 0;
  *(void *)(v21 + 48) = v25;
  *(unsigned char *)(v21 + 56) = 0;
  *(void *)(v21 + 64) = v10;
  *(void *)(v21 + 72) = v11;
  *(void *)(v21 + 80) = v13;
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PasteButton()
{
  return static StaticIf<>._viewListCount(inputs:)();
}

void PasteButton.init(supportedTypes:payloadAction:)()
{
}

void PasteButton.init<A>(supportedTypes:validator:payloadAction:)()
{
}

uint64_t PasteboardEventObserver.canPaste.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

void *PasteboardEventObserver.init(_:)(BOOL a1, uint64_t a2, uint64_t a3)
{
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC70]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = &v16[-v10];
  uint64_t v12 = (char *)v3 + OBJC_IVAR____TtC7SwiftUIP33_B62A21EA259929D05882C7658D395AEF23PasteboardEventObserver__canPaste;
  v16[15] = 0;
  Published.init(initialValue:)();
  (*(void (**)(char *, unsigned char *, uint64_t))(v9 + 32))(v12, v11, v8);
  void v3[2] = a1;
  _OWORD v3[3] = a2;
  v3[4] = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  v17.value._rawuint64_t Value = 0;
  v17.is_nil = a1;
  LOBYTE(a2) = PasteHelper.canPaste(_:)(v17);
  swift_getKeyPath();
  swift_getKeyPath();
  v16[14] = a2 & 1;
  swift_retain();
  static Published.subscript.setter();
  id v13 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v14 = one-time initialization token for uiPasteboardChangedSyncNotification;
  swift_retain();
  if (v14 != -1) {
    swift_once();
  }
  objc_msgSend(v13, sel_addObserver_selector_name_object_, v3, sel_invalidateEnabledState, static NSNotificationName.uiPasteboardChangedSyncNotification, 0);

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

void type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>)
  {
    type metadata accessor for Button<Label<Text, Image>>();
    _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_2(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>);
    }
  }
}

void type metadata accessor for Button<Label<Text, Image>>()
{
  if (!lazy cache variable for type metadata for Button<Label<Text, Image>>)
  {
    type metadata accessor for Label<Text, Image>();
    _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>);
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<Label<Text, Image>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>();
    type metadata accessor for _PreferenceTransformModifier<ValidTestCasesPreferenceKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>);
    }
  }
}

uint64_t sub_1881ED7B4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl>)
  {
    _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F410E8]);
    type metadata accessor for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl>);
    }
  }
}

uint64_t sub_1881ED904()
{
  return EnvironmentValues.effectiveLabelStyle.setter();
}

uint64_t associated type witness table accessor for View.Body : View in PasteButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t initializeWithCopy for PasteButton(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PasteButton(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for PasteButton(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for PasteButton()
{
  return &type metadata for PasteButton;
}

uint64_t PasteboardEventObserver.__deallocating_deinit()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for uiPasteboardChangedSyncNotification != -1) {
    swift_once();
  }
  objc_msgSend(v1, sel_removeObserver_name_object_, v0, static NSNotificationName.uiPasteboardChangedSyncNotification, 0);

  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v2 = v0 + OBJC_IVAR____TtC7SwiftUIP33_B62A21EA259929D05882C7658D395AEF23PasteboardEventObserver__canPaste;
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for PasteboardEventObserver()
{
  return type metadata accessor for PasteboardEventObserver();
}

uint64_t PasteboardEventObserver.invalidateEnabledState()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  v3.value._rawuint64_t Value = 0;
  v3.is_nil = v1;
  PasteHelper.canPaste(_:)(v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void type metadata completion function for PasteboardEventObserver()
{
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_2(319, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F1AC70]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>, UIKitPasteControl> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>();
    _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_1(&lazy protocol witness table cache variable for type Button<Label<Text, Image>> and conformance Button<A>, (void (*)(uint64_t))type metadata accessor for Button<Label<Text, Image>>);
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance PasteboardEventObserver@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for PasteboardEventObserver();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t one-time initialization function for uiPasteboardChangedSyncNotification()
{
  uint64_t result = MEMORY[0x18C115780](0xD000000000000024, 0x8000000188342FC0);
  static NSNotificationName.uiPasteboardChangedSyncNotification = result;
  return result;
}

uint64_t key path getter for PasteboardEventObserver.canPaste : PasteboardEventObserver@<X0>(unsigned char *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t key path setter for PasteboardEventObserver.canPaste : PasteboardEventObserver()
{
  return static Published.subscript.setter();
}

uint64_t sub_1881EE0C4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void (*partial apply for closure #1 in PasteButton.pasteButton.getter())(void)
{
  return closure #1 in PasteButton.pasteButton.getter((uint64_t *)(v0 + 16));
}

uint64_t outlined retain of PasteButton(uint64_t a1)
{
  return a1;
}

uint64_t sub_1881EE168()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<Button<Label<Text, Image>>, _EnvironmentKeyTransformModifier<Bool>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo27UIAccessibilityCustomActionCG_SSs5NeverOTg5059_s7SwiftUI17AccessibilityNodeC11actionNamesSaySSGSgvgSSSo27deF54Ccfu_33_5e0b8d60cfc3e6e2a3f018f1bb98e0f4AHSSTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
    if (!v2) {
      return (char *)v3;
    }
    uint64_t v15 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v15;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x18C117680](v5, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      id v8 = objc_msgSend(v6, sel_name);
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;

      unint64_t v13 = *(void *)(v15 + 16);
      unint64_t v12 = *(void *)(v15 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
      }
      ++v5;
      *(void *)(v15 + 16) = v13 + 1;
      uint64_t v14 = v15 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      if (v2 == v5) {
        return (char *)v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t static AccessibilityNodeProxy.makeProxyForIdentifiedView(with:environment:)@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  *(void *)&long long v72 = *a2;
  *((void *)&v72 + 1) = v6;
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0 || !v4) {
    goto LABEL_7;
  }
  uint64_t v7 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v8 == 1)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      unint64_t v12 = (char *)MEMORY[0x18C117680](0, v4);
      uint64_t v11 = (char *)MEMORY[0x18C117680](0, v4);
    }
    else
    {
      if (!*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
      uint64_t v11 = (char *)*(id *)(v4 + 32);
      unint64_t v12 = v11;
    }
    unint64_t v13 = static AccessibilityCore.queryChildren(element:options:)((uint64_t)v11, 3);
    uint64_t v14 = MEMORY[0x18C119DF0](&v11[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_bridgedChild]);
    if (v14)
    {
      uint64_t v15 = (void *)v14;
      uint64_t v16 = (unint64_t *)(v14 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
      swift_beginAccess();
      unint64_t v17 = *v16;
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v17 = MEMORY[0x1E4FBC860];
    }
    *(void *)&long long v72 = v13;
    specialized Array.append<A>(contentsOf:)(v17);

    static AccessibilityNodeProxy.makeProxyForIdentifiedView(for:children:depth:)(v12, (unint64_t)v13, 1, (unint64_t *)v68);
    swift_bridgeObjectRelease();

    long long v75 = v68[8];
    v76[0] = v68[9];
    v76[1] = v68[10];
    *(void *)&v76[2] = v69;
    *(_OWORD *)&v73[48] = v68[4];
    *(_OWORD *)&v73[64] = v68[5];
    *(_OWORD *)&v73[80] = v68[6];
    long long v74 = v68[7];
    long long v72 = v68[0];
    *(_OWORD *)uint64_t v73 = v68[1];
    *(_OWORD *)&v73[16] = v68[2];
    *(_OWORD *)&v73[32] = v68[3];
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v72, v24, v25, v26);
    goto LABEL_8;
  }
  if (!v8)
  {
LABEL_7:
    _s7SwiftUI22AccessibilityNodeProxyVSgWOi0_((uint64_t)&v72);
LABEL_8:
    uint64_t v9 = a3;
    return outlined init with take of AccessibilityNodeProxy?((uint64_t)&v72, v9);
  }
  uint64_t v64 = v6;
  uint64_t v66 = v5;
  *(void *)&v68[0] = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8 & ~(v8 >> 63), 0);
  if (v8 < 0)
  {
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v63 = a3;
  uint64_t v18 = *(void *)&v68[0];
  if ((v4 & 0xC000000000000001) != 0)
  {
    for (uint64_t i = 0; i != v8; ++i)
    {
      Swift::UInt v20 = *(void *)(MEMORY[0x18C117680](i, v4) + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      Swift::Int v21 = Hasher._finalize()();
      swift_unknownObjectRelease();
      *(void *)&v68[0] = v18;
      unint64_t v23 = *(void *)(v18 + 16);
      unint64_t v22 = *(void *)(v18 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1);
        uint64_t v18 = *(void *)&v68[0];
      }
      *(void *)(v18 + 16) = v23 + 1;
      *(void *)(v18 + 8 * v23 + 32) = v21;
    }
  }
  else
  {
    uint64_t v27 = (void *)(v4 + 32);
    do
    {
      Swift::UInt v28 = *(void *)(*v27 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      Swift::Int v29 = Hasher._finalize()();
      *(void *)&v68[0] = v18;
      unint64_t v31 = *(void *)(v18 + 16);
      unint64_t v30 = *(void *)(v18 + 24);
      if (v31 >= v30 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1);
        uint64_t v18 = *(void *)&v68[0];
      }
      *(void *)(v18 + 16) = v31 + 1;
      *(void *)(v18 + 8 * v31 + 32) = v29;
      ++v27;
      --v8;
    }
    while (v8);
  }
  uint64_t v8 = Array<A>.hashValue.getter();
  swift_release();
  LODWORD(a3) = dword_1ED438098;
  *(void *)&long long v72 = v66;
  *((void *)&v72 + 1) = v64;
  EnvironmentValues.layoutDirection.getter();
  swift_bridgeObjectRetain();
  uint64_t v32 = v4 & 0xFFFFFFFFFFFFFF8;
  if (v4 >> 62)
  {
    uint64_t v32 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v4);
    swift_bridgeObjectRelease();
  }
  *(void *)&long long v72 = v32;
  unint64_t v4 = 0;
  specialized MutableCollection<>.sort(by:)((uint64_t *)&v72, 0, 4, v68[0]);
  uint64_t v7 = v72;
  if ((v72 & 0x8000000000000000) != 0 || (v72 & 0x4000000000000000) != 0)
  {
LABEL_57:
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    if (v33) {
      goto LABEL_33;
    }
LABEL_58:
    swift_release();
    uint64_t v35 = MEMORY[0x1E4FBC860];
    uint64_t v62 = v63;
LABEL_59:
    LOBYTE(v71) = 1;
    *(void *)&long long v72 = v8;
    WORD4(v72) = 1;
    HIDWORD(v72) = a3;
    *(_DWORD *)uint64_t v73 = a3;
    memset(&v73[8], 0, 81);
    *(void *)&long long v74 = 0;
    BYTE8(v74) = 1;
    long long v75 = 0uLL;
    *(void *)&v76[0] = v35;
    memset((char *)v76 + 8, 0, 32);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v72, v59, v60, v61);
    uint64_t v9 = v62;
    return outlined init with take of AccessibilityNodeProxy?((uint64_t)&v72, v9);
  }
  uint64_t v33 = *(void *)(v72 + 16);
  if (!v33) {
    goto LABEL_58;
  }
LABEL_33:
  int v65 = a3;
  uint64_t v67 = v8;
  uint64_t v71 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33 & ~(v33 >> 63), 0);
  if (v33 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v34 = 0;
    uint64_t v35 = v71;
    uint64_t v36 = v33 - 1;
    if ((v7 & 0xC000000000000001) == 0) {
      goto LABEL_36;
    }
LABEL_35:
    for (j = (char *)MEMORY[0x18C117680](v34, v7); ; j = (char *)*(id *)(v7 + 8 * v34 + 32))
    {
      uint64_t v38 = j;
      char v39 = (unint64_t *)&j[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
      swift_beginAccess();
      unint64_t v40 = *v39;
      if ((v40 & 0x8000000000000000) != 0 || (v40 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v41 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v40);
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v41 = v40 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n();
      }
      *(void *)&long long v72 = v41;
      specialized MutableCollection<>.sort(by:)((uint64_t *)&v72, 0, 2, 2);
      if (v4) {
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v42 = static AccessibilityCore.queryFilter(elements:options:)(v72, 3);
      swift_release();
      uint64_t v43 = MEMORY[0x18C119DF0](&v38[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_bridgedChild]);
      if (v43)
      {
        int v44 = (void *)v43;
        unsigned int v45 = (unint64_t *)(v43 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
        swift_beginAccess();
        unint64_t v46 = *v45;
        swift_bridgeObjectRetain();
      }
      else
      {
        unint64_t v46 = MEMORY[0x1E4FBC860];
      }
      uint64_t v70 = v42;
      specialized Array.append<A>(contentsOf:)(v46);
      static AccessibilityNodeProxy.makeProxyForIdentifiedView(for:children:depth:)(v38, (unint64_t)v42, 1, (unint64_t *)&v72);

      swift_bridgeObjectRelease();
      uint64_t v71 = v35;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v35 + 16) + 1, 1);
        uint64_t v35 = v71;
      }
      unint64_t v48 = *(void *)(v35 + 16);
      unint64_t v47 = *(void *)(v35 + 24);
      if (v48 >= v47 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v47 > 1), v48 + 1, 1);
        uint64_t v35 = v71;
      }
      *(void *)(v35 + 16) = v48 + 1;
      uint64_t v49 = v35 + 184 * v48;
      long long v50 = v72;
      long long v51 = *(_OWORD *)v73;
      long long v52 = *(_OWORD *)&v73[32];
      *(_OWORD *)(v49 + 64) = *(_OWORD *)&v73[16];
      *(_OWORD *)(v49 + 80) = v52;
      *(_OWORD *)(v49 + 32) = v50;
      *(_OWORD *)(v49 + 48) = v51;
      long long v53 = *(_OWORD *)&v73[48];
      long long v54 = *(_OWORD *)&v73[64];
      long long v55 = v74;
      *(_OWORD *)(v49 + 128) = *(_OWORD *)&v73[80];
      *(_OWORD *)(v49 + 144) = v55;
      *(_OWORD *)(v49 + 96) = v53;
      *(_OWORD *)(v49 + 112) = v54;
      long long v56 = v75;
      long long v57 = v76[0];
      long long v58 = v76[1];
      *(void *)(v49 + 208) = *(void *)&v76[2];
      *(_OWORD *)(v49 + 176) = v57;
      *(_OWORD *)(v49 + 192) = v58;
      *(_OWORD *)(v49 + 160) = v56;
      if (v36 == v34)
      {
        swift_release();
        uint64_t v62 = v63;
        uint64_t v8 = v67;
        LODWORD(a3) = v65;
        goto LABEL_59;
      }
      ++v34;
      if ((v7 & 0xC000000000000001) != 0) {
        goto LABEL_35;
      }
LABEL_36:
      ;
    }
  }
  swift_release();
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t AccessibilityNodeProxy.id.getter()
{
  return *(void *)v0;
}

uint64_t AccessibilityNodeProxy.id.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*AccessibilityNodeProxy.id.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.isOpaque.getter()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t AccessibilityNodeProxy.isOpaque.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 8) = result;
  return result;
}

uint64_t (*AccessibilityNodeProxy.isOpaque.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.isPlatformNode.getter()
{
  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t AccessibilityNodeProxy.isPlatformNode.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 9) = result;
  return result;
}

uint64_t (*AccessibilityNodeProxy.isPlatformNode.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double AccessibilityNodeProxy.visibility.getter@<D0>(double *a1@<X8>)
{
  double result = *(double *)(v1 + 12);
  *a1 = result;
  return result;
}

double AccessibilityNodeProxy.visibility.setter(double *a1)
{
  double result = *a1;
  *(double *)(v1 + 12) = *a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.visibility.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.label.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityNodeProxy.label.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*AccessibilityNodeProxy.label.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.value.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityNodeProxy.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return result;
}

uint64_t (*AccessibilityNodeProxy.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.hint.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityNodeProxy.hint.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 56) = a1;
  *(void *)(v2 + 64) = a2;
  return result;
}

uint64_t (*AccessibilityNodeProxy.hint.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.identifier.getter()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityNodeProxy.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 72) = a1;
  *(void *)(v2 + 80) = a2;
  return result;
}

uint64_t (*AccessibilityNodeProxy.identifier.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

__n128 AccessibilityNodeProxy.traits.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *(__n128 *)(v1 + 88);
  *a1 = result;
  return result;
}

__n128 AccessibilityNodeProxy.traits.setter(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)(v1 + 88) = *a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.traits.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.isDisabled.getter()
{
  return *(unsigned __int8 *)(v0 + 104);
}

uint64_t AccessibilityNodeProxy.isDisabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 104) = result;
  return result;
}

uint64_t (*AccessibilityNodeProxy.isDisabled.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.sortPriority.getter()
{
  return *(void *)(v0 + 112);
}

uint64_t AccessibilityNodeProxy.sortPriority.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 112) = result;
  *(unsigned char *)(v2 + 120) = a2 & 1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.sortPriority.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.actions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityNodeProxy.actions.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 128) = a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.actions.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.customContent.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityNodeProxy.customContent.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 136) = a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.customContent.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.children.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityNodeProxy.children.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 144) = a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.children.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.inputLabels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityNodeProxy.inputLabels.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 152) = a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.inputLabels.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.url.getter()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AccessibilityNodeProxy.url.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 160) = a1;
  *(void *)(v2 + 168) = a2;
  return result;
}

uint64_t (*AccessibilityNodeProxy.url.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.metadata.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AccessibilityNodeProxy.metadata.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 176) = a1;
  return result;
}

uint64_t (*AccessibilityNodeProxy.metadata.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AccessibilityNodeProxy.serializedData.getter()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  lazy protocol witness table accessor for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy();
  uint64_t v0 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  swift_release();
  return v0;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy);
  }
  return result;
}

uint64_t static AccessibilityNodeProxy.deserialize(_:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  lazy protocol witness table accessor for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  v6[8] = v16;
  _OWORD v6[9] = v17;
  v6[10] = v18;
  uint64_t v7 = v19;
  void v6[4] = v12;
  v6[5] = v13;
  void v6[6] = v14;
  v6[7] = v15;
  v6[0] = v8;
  v6[1] = v9;
  _OWORD v6[2] = v10;
  _OWORD v6[3] = v11;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v6, v2, v3, v4);
  return outlined init with take of AccessibilityNodeProxy?((uint64_t)v6, a1);
}

__n128 AccessibilityNodeProxy.init(id:isOpaque:isPlatformNode:visibility:label:value:hint:identifier:traits:isDisabled:sortPriority:actions:customContent:children:inputLabels:url:metadata:)@<Q0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, uint64_t a12, _OWORD *a13, char a14, uint64_t a15, char a16, long long a17, long long a18, __n128 a19, uint64_t a20)
{
  __n128 result = a19;
  *(void *)a9 = a1;
  *(unsigned char *)(a9 + 8) = a2;
  *(unsigned char *)(a9 + 9) = a3;
  *(void *)(a9 + 12) = *a4;
  *(void *)(a9 + 24) = a5;
  *(void *)(a9 + 32) = a6;
  *(void *)(a9 + 40) = a7;
  *(void *)(a9 + 48) = a8;
  *(_OWORD *)(a9 + 56) = a10;
  *(void *)(a9 + 72) = a11;
  *(void *)(a9 + 80) = a12;
  *(_OWORD *)(a9 + 88) = *a13;
  *(unsigned char *)(a9 + 104) = a14;
  *(void *)(a9 + 112) = a15;
  *(unsigned char *)(a9 + 120) = a16 & 1;
  *(_OWORD *)(a9 + 128) = a17;
  *(_OWORD *)(a9 + 144) = a18;
  *(__n128 *)(a9 + 160) = a19;
  *(void *)(a9 + 176) = a20;
  return result;
}

uint64_t static AccessibilityNodeProxy.makeProxyForIdentifiedView(for:children:depth:)@<X0>(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  v244 = a4;
  uint64_t v245 = a3;
  unint64_t v257 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v233 = *(void *)(v5 - 8);
  uint64_t v234 = v5;
  MEMORY[0x1F4188790](v5);
  v232 = (char *)&v231 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI15LinkDestinationV13ConfigurationVSgMaTm_0(0, &lazy cache variable for type metadata for LinkDestination.Configuration?, MEMORY[0x1E4F3FB80]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v243 = (uint64_t)&v231 - v8;
  uint64_t v9 = type metadata accessor for AccessibilityCustomAttributes.Value();
  uint64_t v247 = *(void *)(v9 - 8);
  uint64_t v248 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v251 = (uint64_t)&v231 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI15LinkDestinationV13ConfigurationVSgMaTm_0(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, MEMORY[0x1E4F41118]);
  MEMORY[0x1F4188790](v11 - 8);
  v255 = (char *)&v231 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  v250 = (char *)&v231 - v14;
  AccessibilityNode.attachment.getter((uint64_t *)&v260);
  uint64_t v15 = v260;

  uint64_t v16 = swift_bridgeObjectRetain();
  uint64_t v17 = specialized AccessibilityProperties.subscript.getter(v16);
  uint64_t v254 = v15;
  swift_bridgeObjectRelease();
  unint64_t v253 = v17;
  v249 = a1;
  if (v17)
  {
    uint64_t v18 = *(void *)(v253 + 16);
    if (v18)
    {
      v256 = &a1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
      v252 = a1;
      uint64_t v19 = swift_bridgeObjectRetain() + 56;
      Swift::UInt v20 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        char v21 = *(unsigned char *)(v19 - 8);
        uint64_t v23 = *(void *)(v19 - 24);
        uint64_t v22 = *(void *)(v19 - 16);
        uint64_t v24 = *((void *)v256 + 1);
        *(void *)&unsigned long long v260 = *(void *)v256;
        *((void *)&v260 + 1) = v24;
        unsigned long long v274 = 0uLL;
        uint64_t v272 = 0;
        outlined copy of Text.Storage(v23, v22, v21);
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v25 = Text.resolveString(in:with:idiom:)();
        id v258 = v26;
        uint64_t v259 = v25;
        swift_release();
        swift_release();
        outlined consume of Text.Storage(v23, v22, v21);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::UInt v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v20 + 2) + 1, 1, v20);
        }
        unint64_t v28 = *((void *)v20 + 2);
        unint64_t v27 = *((void *)v20 + 3);
        if (v28 >= v27 >> 1) {
          Swift::UInt v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v20);
        }
        *((void *)v20 + 2) = v28 + 1;
        Swift::Int v29 = &v20[16 * v28];
        id v30 = v258;
        *((void *)v29 + 4) = v259;
        *((void *)v29 + 5) = v30;
        v19 += 32;
        --v18;
      }
      while (v18);

      swift_bridgeObjectRelease();
    }
    else
    {
      Swift::UInt v20 = (char *)MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::UInt v20 = 0;
  }
  v242 = v20;
  *(void *)&unsigned long long v260 = v254;
  if (*(void *)(AccessibilityProperties.customContentList.getter() + 16))
  {
    unint64_t isUniquelyReferenced_nonNull_native = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
    uint64_t v32 = *(void *)&v249[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
    *(void *)&unsigned long long v260 = *(void *)&v249[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
    *((void *)&v260 + 1) = v32;
    swift_retain();
    swift_retain();
    unint64_t v33 = Array<A>.resolve(in:)();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (v33 >> 62) {
      goto LABEL_41;
    }
    uint64_t v34 = *(char **)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v34)
    {
      v256 = (char *)(v33 & 0xC000000000000001);
      uint64_t v35 = 4;
      v252 = v34;
      unint64_t v253 = v33;
      while (1)
      {
        id v36 = v256 ? (id)MEMORY[0x18C117680](v35 - 4, v33) : *(id *)(v33 + 8 * v35);
        int v37 = v36;
        uint64_t v38 = (char *)(v35 - 3);
        if (__OFADD__(v35 - 4, 1)) {
          break;
        }
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v259 = v35 - 3;
          id v39 = objc_msgSend(v36, sel_label);
          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v42 = v41;

          id v258 = v37;
          id v43 = objc_msgSend(v37, sel_value);
          unint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v45 = v44;

          unint64_t v46 = isUniquelyReferenced_nonNull_native;
          unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(void *)&unsigned long long v260 = v46;
          unint64_t v48 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v42);
          uint64_t v49 = *(void *)(v46 + 16);
          BOOL v50 = (v47 & 1) == 0;
          uint64_t v51 = v49 + v50;
          if (__OFADD__(v49, v50)) {
            goto LABEL_39;
          }
          char v52 = v47;
          if (*(void *)(v46 + 24) >= v51)
          {
            if (isUniquelyReferenced_nonNull_native)
            {
              unint64_t isUniquelyReferenced_nonNull_native = v260;
              if ((v47 & 1) == 0) {
                goto LABEL_33;
              }
            }
            else
            {
              specialized _NativeDictionary.copy()();
              unint64_t isUniquelyReferenced_nonNull_native = v260;
              if ((v52 & 1) == 0) {
                goto LABEL_33;
              }
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v51, isUniquelyReferenced_nonNull_native);
            unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v42);
            if ((v52 & 1) != (v54 & 1)) {
              goto LABEL_169;
            }
            unint64_t v48 = v53;
            unint64_t isUniquelyReferenced_nonNull_native = v260;
            if ((v52 & 1) == 0)
            {
LABEL_33:
              *(void *)(isUniquelyReferenced_nonNull_native + 8 * (v48 >> 6) + 64) |= 1 << v48;
              long long v56 = (uint64_t *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 16 * v48);
              *long long v56 = v40;
              v56[1] = v42;
              long long v57 = (unint64_t *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 16 * v48);
              *long long v57 = v33;
              v57[1] = v45;
              uint64_t v58 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
              BOOL v59 = __OFADD__(v58, 1);
              uint64_t v60 = v58 + 1;
              if (v59) {
                goto LABEL_40;
              }
              *(void *)(isUniquelyReferenced_nonNull_native + 16) = v60;
              swift_bridgeObjectRetain();
              goto LABEL_35;
            }
          }
          long long v55 = (unint64_t *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 16 * v48);
          swift_bridgeObjectRelease();
          *long long v55 = v33;
          v55[1] = v45;
LABEL_35:

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v34 = v252;
          unint64_t v33 = v253;
          uint64_t v38 = (char *)v259;
          goto LABEL_18;
        }

LABEL_18:
        ++v35;
        if (v38 == v34) {
          goto LABEL_42;
        }
      }
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      swift_bridgeObjectRetain();
      uint64_t v34 = (char *)_CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_42:
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t isUniquelyReferenced_nonNull_native = 0;
  }
  unint64_t v246 = isUniquelyReferenced_nonNull_native;
  type metadata accessor for AccessibilityNodeProxy?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>, MEMORY[0x1E4F40BB8], MEMORY[0x1E4FBBE00]);
  uint64_t v61 = swift_allocObject();
  LOBYTE(v260) = 4;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v260, (char *)&v274);
  AccessibilityVisibility.init(_:)();
  int v241 = *(_DWORD *)(v61 + 32);
  swift_setDeallocating();
  swift_deallocClassInstance();
  uint64_t v62 = v245 - 1;
  if (v245 < 1)
  {
    uint64_t v259 = 0;
    uint64_t v245 = MEMORY[0x1E4FBC860];
  }
  else
  {
    unint64_t v63 = v257;
    if (v257 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v64 = *(void *)((v257 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v64)
    {
      *(void *)&unsigned long long v274 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v64 & ~(v64 >> 63), 0);
      if (v64 < 0)
      {
        __break(1u);
LABEL_168:
        swift_release();
        __break(1u);
LABEL_169:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      uint64_t v65 = 0;
      uint64_t v259 = 0;
      unint64_t v66 = v63 & 0xC000000000000001;
      uint64_t v67 = v274;
      do
      {
        uint64_t v68 = v259;
        if (v66) {
          uint64_t v69 = (char *)MEMORY[0x18C117680](v65, v257);
        }
        else {
          uint64_t v69 = (char *)*(id *)(v257 + 8 * v65 + 32);
        }
        uint64_t v70 = v69;
        uint64_t v71 = (unint64_t *)&v69[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
        swift_beginAccess();
        unint64_t v72 = *v71;
        if ((v72 & 0x8000000000000000) != 0 || (v72 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain_n();
          uint64_t v73 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v72);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v73 = v72 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain_n();
        }
        *(void *)&unsigned long long v260 = v73;
        specialized MutableCollection<>.sort(by:)((uint64_t *)&v260, 0, 2, 2);
        if (v68) {
          goto LABEL_168;
        }
        uint64_t v259 = 0;
        swift_bridgeObjectRelease();
        long long v74 = static AccessibilityCore.queryFilter(elements:options:)(v260, 3);
        swift_release();
        uint64_t v75 = MEMORY[0x18C119DF0](&v70[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_bridgedChild]);
        if (v75)
        {
          uint64_t v76 = (void *)v75;
          uint64_t v77 = (unint64_t *)(v75 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children);
          swift_beginAccess();
          unint64_t v78 = *v77;
          swift_bridgeObjectRetain();
        }
        else
        {
          unint64_t v78 = MEMORY[0x1E4FBC860];
        }
        *(void *)&unsigned long long v260 = v74;
        specialized Array.append<A>(contentsOf:)(v78);
        static AccessibilityNodeProxy.makeProxyForIdentifiedView(for:children:depth:)(&v260, v70, v260, v62);

        swift_bridgeObjectRelease();
        char v79 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&unsigned long long v274 = v67;
        if ((v79 & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v67 + 16) + 1, 1);
          uint64_t v67 = v274;
        }
        unint64_t v81 = *(void *)(v67 + 16);
        unint64_t v80 = *(void *)(v67 + 24);
        if (v81 >= v80 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v80 > 1), v81 + 1, 1);
          uint64_t v67 = v274;
        }
        ++v65;
        *(void *)(v67 + 16) = v81 + 1;
        unint64_t v82 = v67 + 184 * v81;
        unsigned long long v83 = v260;
        long long v84 = v261;
        long long v85 = v263;
        *(_OWORD *)(v82 + 64) = v262;
        *(_OWORD *)(v82 + 80) = v85;
        *(_OWORD *)(v82 + 32) = v83;
        *(_OWORD *)(v82 + 48) = v84;
        long long v86 = v264;
        long long v87 = v265;
        long long v88 = v267;
        *(_OWORD *)(v82 + 128) = v266;
        *(_OWORD *)(v82 + 144) = v88;
        *(_OWORD *)(v82 + 96) = v86;
        *(_OWORD *)(v82 + 112) = v87;
        long long v89 = v268;
        long long v90 = v269;
        long long v91 = v270;
        *(void *)(v82 + 208) = v271;
        *(_OWORD *)(v82 + 176) = v90;
        *(_OWORD *)(v82 + 192) = v91;
        *(_OWORD *)(v82 + 160) = v89;
      }
      while (v64 != v65);
      uint64_t v245 = v67;
    }
    else
    {
      uint64_t v245 = MEMORY[0x1E4FBC860];
      uint64_t v259 = 0;
    }
  }
  uint64_t v92 = AccessibilityNode.resolvedPlainTextLabel.getter();
  unint64_t v94 = v93;
  uint64_t v95 = AccessibilityNode.resolvedPlainTextValue.getter();
  unint64_t v239 = v94;
  uint64_t v240 = v92;
  if (v96)
  {
    unint64_t v237 = v96;
    uint64_t v238 = v95;
    goto LABEL_77;
  }
  uint64_t v97 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v97, &v260);
  swift_bridgeObjectRelease();
  if (!*((void *)&v262 + 1))
  {
    double v100 = &lazy cache variable for type metadata for AccessibilityValueStorage?;
    uint64_t v101 = MEMORY[0x1E4F40E80];
    double v102 = &v260;
LABEL_75:
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_4((uint64_t)v102, v100, v101);
    uint64_t v98 = 0;
    unint64_t v237 = 0;
    goto LABEL_76;
  }
  outlined init with copy of AnyAccessibilityValue?((uint64_t)&v260, (uint64_t)&v274);
  outlined destroy of AccessibilityValueStorage((uint64_t)&v260);
  if (!*((void *)&v275 + 1))
  {
    double v100 = &lazy cache variable for type metadata for AnyAccessibilityValue?;
    uint64_t v101 = MEMORY[0x1E4F40788];
    double v102 = &v274;
    goto LABEL_75;
  }
  uint64_t v98 = AnyAccessibilityValue.displayDescription.getter();
  unint64_t v237 = v99;
  outlined destroy of AnyAccessibilityValue((uint64_t)&v274);
LABEL_76:
  uint64_t v238 = v98;
LABEL_77:
  AccessibilityNode.attachment.getter((uint64_t *)&v260);
  uint64_t v103 = v260;

  *(void *)&unsigned long long v260 = v103;
  uint64_t v104 = AccessibilityProperties.hints.getter();
  swift_bridgeObjectRelease();
  if (one-time initialization token for comma != -1) {
    goto LABEL_165;
  }
  while (1)
  {
    uint64_t v105 = static Text.Accessibility.comma;
    uint64_t v106 = qword_1EB308110;
    char v107 = byte_1EB308118;
    outlined copy of Text.Storage(static Text.Accessibility.comma, qword_1EB308110, byte_1EB308118);
    swift_bridgeObjectRetain();
    uint64_t v108 = specialized AccessibilityNode.resolvedPlainTexts(_:separator:)(v104);
    unint64_t v235 = v109;
    uint64_t v236 = v108;
    outlined consume of Text.Storage(v105, v106, v107);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&unsigned long long v260 = v254;
    AccessibilityProperties.traits.getter();
    uint64_t v110 = swift_bridgeObjectRetain();
    long long v111 = (void *)specialized AccessibilityProperties.subscript.getter(v110);
    swift_bridgeObjectRelease();
    uint64_t v112 = v111[2];
    if (v112)
    {
      uint64_t v113 = (uint64_t)(v111 + 4);
      id v258 = v111;
      swift_bridgeObjectRetain();
      uint64_t v114 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        outlined init with copy of AnyAccessibilityAction(v113, (uint64_t)&v260);
        unint64_t v117 = *((void *)&v277 + 1);
        unint64_t v116 = v277;
        uint64_t v118 = *((void *)&v261 + 1);
        uint64_t v119 = v262;
        __swift_project_boxed_opaque_existential_1(&v260, *((uint64_t *)&v261 + 1));
        unsigned long long v274 = __PAIR128__(v117, v116);
        uint64_t v120 = (*(uint64_t (**)(unsigned long long *, uint64_t, uint64_t))(v119 + 48))(&v274, v118, v119);
        uint64_t v122 = v121;
        __int16 v124 = v123;
        outlined destroy of AnyAccessibilityAction((uint64_t)&v260);
        if ((v124 & 0x100) == 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v114 + 2) + 1, 1, v114);
          }
          unint64_t v126 = *((void *)v114 + 2);
          unint64_t v125 = *((void *)v114 + 3);
          if (v126 >= v125 >> 1) {
            uint64_t v114 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v125 > 1), v126 + 1, 1, v114);
          }
          *((void *)v114 + 2) = v126 + 1;
          long long v115 = &v114[24 * v126];
          *((void *)v115 + 4) = v120;
          *((void *)v115 + 5) = v122;
          v115[48] = v124 & 1;
        }
        v113 += 48;
        --v112;
      }
      while (v112);
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v114 = (char *)MEMORY[0x1E4FBC860];
    }
    uint64_t v127 = *((void *)v114 + 2);
    uint64_t v129 = v249;
    uint64_t v128 = (uint64_t)v250;
    uint64_t v130 = (uint64_t)v255;
    if (v127)
    {
      uint64_t v131 = (uint64_t *)(v114 + 32);
      uint64_t v133 = *((void *)&v277 + 1);
      uint64_t v132 = v277;
      do
      {
        uint64_t v135 = *v131;
        v131 += 3;
        uint64_t v134 = v135;
        if (v135)
        {
          if ((v133 & 1) == 0)
          {
            v133 |= 1uLL;
            *((void *)&v277 + 1) = v133;
          }
          if ((v132 & 1) == 0)
          {
            v132 |= 1uLL;
            *(void *)&unsigned long long v277 = v132;
          }
        }
        if ((~v134 & 0x10000) == 0)
        {
          if ((v133 & 2) == 0)
          {
            v133 |= 2uLL;
            *((void *)&v277 + 1) = v133;
          }
          if ((v132 & 2) == 0)
          {
            v132 |= 2uLL;
            *(void *)&unsigned long long v277 = v132;
          }
        }
        --v127;
      }
      while (v127);
    }
    swift_bridgeObjectRelease();
    uint64_t v136 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v136, &v260);
    swift_bridgeObjectRelease();
    if (*((void *)&v262 + 1))
    {
      unsigned long long v274 = v277;
      uint64_t v137 = AccessibilityValueStorage.impliedRole(for:)((uint64_t *)&v274);
      __int16 v139 = v138;
      outlined destroy of AccessibilityValueStorage((uint64_t)&v260);
      if ((v139 & 0x100) == 0) {
        AccessibilityRole.update(traits:)(&v277, v137);
      }
    }
    else
    {
      _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_4((uint64_t)&v260, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
    }
    unint64_t v140 = (void *)MEMORY[0x1E4FBC868];
    if (!_SwiftUIIsAppleInternalBuild())
    {
      id v258 = v140;
      goto LABEL_132;
    }
    *(void *)&unsigned long long v260 = objc_msgSend(v129, sel_accessibilityTraits);
    uint64_t v141 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v143 = v142;
    char v144 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&unsigned long long v260 = v140;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v141, v143, 0x737469617254, 0xE600000000000000, v144);
    id v258 = (id)v260;
    swift_bridgeObjectRelease();
    uint64_t v145 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v145, &v260);
    swift_bridgeObjectRelease();
    unint64_t v146 = v260;
    if (!(void)v260) {
      goto LABEL_132;
    }
    uint64_t v147 = AccessibilityCustomAttributes.attributeNames.getter();
    uint64_t v148 = *(void *)(v147 + 16);
    if (!v148) {
      break;
    }
    uint64_t v104 = v248;
    unsigned int v149 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v247 + 56);
    unint64_t v257 = v247 + 48;
    uint64_t v231 = v147;
    unint64_t v150 = (uint64_t *)(v147 + 40);
    v252 = (char *)(v247 + 56);
    unint64_t v253 = v146;
    while (1)
    {
      uint64_t v153 = *(v150 - 1);
      uint64_t v154 = *v150;
      if (*(void *)(v146 + 16))
      {
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        uint64_t v155 = v153;
        unint64_t v156 = specialized __RawDictionaryStorage.find<A>(_:)(v153, v154);
        if (v157)
        {
          uint64_t v158 = v247;
          outlined init with copy of AccessibilityCustomAttributes.Value(*(void *)(v146 + 56) + *(void *)(v247 + 72) * v156, v128);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v158 + 56))(v128, 0, 1, v104);
        }
        else
        {
          (*v149)(v128, 1, 1, v104);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v153 = v155;
        uint64_t v130 = (uint64_t)v255;
      }
      else
      {
        (*v149)(v128, 1, 1, v104);
        swift_bridgeObjectRetain();
      }
      outlined init with copy of AccessibilityCustomAttributes.Value?(v128, v130);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))v257)(v130, 1, v104) == 1) {
        goto LABEL_112;
      }
      uint64_t v159 = v130;
      uint64_t v160 = v153;
      outlined init with take of AccessibilityCustomAttributes.Value(v159, v251);
      swift_bridgeObjectRetain();
      uint64_t v161 = AccessibilityCustomAttributes.Value.displayDescription.getter();
      v256 = v162;
      v163 = v258;
      uint64_t v104 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&unsigned long long v260 = v163;
      uint64_t v164 = v160;
      unint64_t v166 = specialized __RawDictionaryStorage.find<A>(_:)(v160, v154);
      uint64_t v167 = v163[2];
      BOOL v168 = (v165 & 1) == 0;
      uint64_t v169 = v167 + v168;
      if (__OFADD__(v167, v168)) {
        break;
      }
      char v170 = v165;
      if (v163[3] >= v169)
      {
        if ((v104 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v169, v104);
        unint64_t v171 = specialized __RawDictionaryStorage.find<A>(_:)(v164, v154);
        if ((v170 & 1) != (v172 & 1)) {
          goto LABEL_169;
        }
        unint64_t v166 = v171;
      }
      uint64_t v104 = v248;
      uint64_t v173 = (void *)v260;
      id v258 = (id)v260;
      if (v170)
      {
        unint64_t v151 = (uint64_t *)(*(void *)(v260 + 56) + 16 * v166);
        swift_bridgeObjectRelease();
        unint64_t v152 = v256;
        *unint64_t v151 = v161;
        v151[1] = (uint64_t)v152;
      }
      else
      {
        *(void *)(v260 + 8 * (v166 >> 6) + 64) |= 1 << v166;
        uint64_t v174 = (uint64_t *)(v173[6] + 16 * v166);
        *uint64_t v174 = v164;
        v174[1] = v154;
        unint64_t v175 = (uint64_t *)(v173[7] + 16 * v166);
        v176 = v256;
        *unint64_t v175 = v161;
        v175[1] = (uint64_t)v176;
        uint64_t v177 = v173[2];
        BOOL v59 = __OFADD__(v177, 1);
        uint64_t v178 = v177 + 1;
        if (v59) {
          goto LABEL_164;
        }
        v173[2] = v178;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of AccessibilityCustomAttributes.Value(v251, MEMORY[0x1E4F41118]);
      uint64_t v130 = (uint64_t)v255;
      uint64_t v128 = (uint64_t)v250;
      unsigned int v149 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v252;
      unint64_t v146 = v253;
LABEL_112:
      v150 += 2;
      outlined destroy of AccessibilityCustomAttributes.Value?(v128, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, MEMORY[0x1E4F41118]);
      swift_bridgeObjectRelease();
      if (!--v148)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v129 = v249;
        goto LABEL_132;
      }
    }
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    swift_once();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_132:
  uint64_t v179 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v179, &v274);
  swift_bridgeObjectRelease();
  if (*((void *)&v276 + 1))
  {
    unsigned long long v260 = v274;
    long long v261 = v275;
    long long v262 = v276;
    if (AccessibilityValueStorage.isBounded.getter())
    {
      AccessibilityValueStorage.platformMinValue.getter();
      uint64_t v180 = MEMORY[0x1E4FBC840];
      if (*((void *)&v275 + 1))
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (swift_dynamicCast())
        {
          id v181 = v273;
          id v182 = objc_msgSend(v273, sel_stringValue);
          uint64_t v183 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v185 = v184;

          id v186 = v258;
          goto LABEL_140;
        }
      }
      else
      {
        _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_4((uint64_t)&v274, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
      }
      id v186 = v258;
      uint64_t v183 = 0;
      uint64_t v185 = 0xE000000000000000;
LABEL_140:
      id v187 = v186;
      char v188 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&unsigned long long v274 = v187;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v183, v185, 0x756C6156206E694DLL, 0xE900000000000065, v188);
      uint64_t v189 = v274;
      swift_bridgeObjectRelease();
      AccessibilityValueStorage.platformMaxValue.getter();
      if (*((void *)&v275 + 1))
      {
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if (swift_dynamicCast())
        {
          id v190 = v273;
          id v191 = objc_msgSend(v273, sel_stringValue);
          uint64_t v192 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v194 = v193;

          goto LABEL_145;
        }
      }
      else
      {
        _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_4((uint64_t)&v274, (unint64_t *)&lazy cache variable for type metadata for Any?, v180 + 8);
      }
      uint64_t v192 = 0;
      uint64_t v194 = 0xE000000000000000;
LABEL_145:
      char v195 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&unsigned long long v274 = v189;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v192, v194, 0x756C61562078614DLL, 0xE900000000000065, v195);
      id v258 = (id)v274;
      swift_bridgeObjectRelease();
    }
    outlined destroy of AccessibilityValueStorage((uint64_t)&v260);
  }
  else
  {
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_4((uint64_t)&v274, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
  }
  Swift::UInt v196 = *(void *)&v129[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v196);
  Swift::Int v197 = Hasher._finalize()();
  AccessibilityNode.platformElement.getter();
  long long v199 = v198;
  if (v198) {

  }
  uint64_t v200 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v200, (uint64_t)&v260);
  swift_bridgeObjectRelease();
  unint64_t v201 = *((void *)&v260 + 1);
  unint64_t v257 = v197;
  if (*((void *)&v260 + 1))
  {
    if (v261 >= 2u)
    {
      swift_bridgeObjectRelease();
      v256 = 0;
      unint64_t v201 = 0;
    }
    else
    {
      v256 = (char *)v260;
    }
  }
  else
  {
    v256 = 0;
  }
  unsigned long long v202 = v277;
  v203 = v249;
  unsigned long long v260 = *(_OWORD *)&v249[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  LODWORD(v253) = EnvironmentValues.isEnabled.getter();
  uint64_t v204 = swift_bridgeObjectRetain();
  v255 = (char *)specialized AccessibilityProperties.subscript.getter(v204);
  char v206 = v205;
  swift_bridgeObjectRelease();
  v207 = v203;
  v208 = specialized Sequence.compactMap<A>(_:)((uint64_t)&outlined read-only object #0 of AccessibilityNode.actionNames.getter);

  swift_arrayDestroy();
  v209 = closure #2 in AccessibilityNode.actionNames.getter();
  *(void *)&unsigned long long v260 = v208;
  specialized Array.append<A>(contentsOf:)((uint64_t)v209);
  uint64_t v210 = v260;
  id v211 = objc_msgSend(v207, sel_accessibilityCustomActions);
  if (v211)
  {
    v212 = v211;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
    unint64_t v213 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v214 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo27UIAccessibilityCustomActionCG_SSs5NeverOTg5059_s7SwiftUI17AccessibilityNodeC11actionNamesSaySSGSgvgSSSo27deF54Ccfu_33_5e0b8d60cfc3e6e2a3f018f1bb98e0f4AHSSTf3nnnpk_nTf1cn_n(v213);
    swift_bridgeObjectRelease();
  }
  else
  {
    v214 = (char *)MEMORY[0x1E4FBC860];
  }
  *(void *)&unsigned long long v260 = v210;
  specialized Array.append<A>(contentsOf:)((uint64_t)v214);
  unint64_t v215 = v260;
  unint64_t v216 = v246;
  swift_bridgeObjectRetain();
  uint64_t v217 = swift_bridgeObjectRetain();
  uint64_t v218 = v243;
  specialized AccessibilityProperties.subscript.getter(v217, v243);
  swift_bridgeObjectRelease_n();
  uint64_t v219 = type metadata accessor for LinkDestination.Configuration();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v219 - 8) + 48))(v218, 1, v219) == 1)
  {
    outlined destroy of AccessibilityCustomAttributes.Value?(v218, &lazy cache variable for type metadata for LinkDestination.Configuration?, MEMORY[0x1E4F3FB80]);
    uint64_t v220 = 0;
    unint64_t v221 = 0;
  }
  else
  {
    v222 = v232;
    LinkDestination.Configuration.url.getter();
    outlined destroy of AccessibilityCustomAttributes.Value(v218, MEMORY[0x1E4F3FB80]);
    uint64_t v220 = URL.absoluteString.getter();
    unint64_t v221 = v223;
    v224 = v222;
    unint64_t v216 = v246;
    (*(void (**)(char *, uint64_t))(v233 + 8))(v224, v234);
  }
  unint64_t v225 = (unint64_t)v258;
  if (!*((void *)v258 + 2))
  {
    swift_bridgeObjectRelease();
    unint64_t v225 = 0;
  }
  LOBYTE(v260) = v206 & 1;
  v226 = v244;
  unint64_t *v244 = v257;
  BOOL v227 = (v253 & 1) == 0;
  *((unsigned char *)v226 + 8) = 0;
  *((unsigned char *)v226 + 9) = v199 != 0;
  int v228 = v241;
  *((_DWORD *)v226 + 3) = v241;
  *((_DWORD *)v226 + 4) = v228;
  v226[3] = v240;
  v226[4] = v239;
  v226[5] = v238;
  v226[6] = v237;
  v226[7] = v236;
  v226[8] = v235;
  v226[9] = (unint64_t)v256;
  v226[10] = v201;
  *(_OWORD *)(v226 + 11) = v202;
  *((unsigned char *)v226 + 104) = v227;
  v226[14] = (unint64_t)v255;
  *((unsigned char *)v226 + 120) = v206 & 1;
  v226[16] = v215;
  v226[17] = v216;
  v229 = v242;
  v226[18] = v245;
  v226[19] = (unint64_t)v229;
  v226[20] = v220;
  v226[21] = v221;
  v226[22] = v225;
  return swift_bridgeObjectRelease();
}

void AccessibilityNodeProxy.hash(into:)(uint64_t a1)
{
  Swift::UInt8 v3 = *(unsigned char *)(v1 + 8);
  Swift::UInt8 v4 = *(unsigned char *)(v1 + 9);
  Swift::UInt32 v6 = *(_DWORD *)(v1 + 12);
  Swift::UInt32 v5 = *(_DWORD *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 64);
  uint64_t v23 = *(void *)(v1 + 80);
  Swift::UInt64 v24 = *(void *)(v1 + 88);
  Swift::UInt64 v25 = *(void *)(v1 + 96);
  Swift::UInt64 v22 = *(void *)(v1 + 112);
  Swift::UInt8 v26 = *(unsigned char *)(v1 + 104);
  int v27 = *(unsigned __int8 *)(v1 + 120);
  uint64_t v10 = *(void *)(v1 + 144);
  uint64_t v28 = *(void *)(v1 + 128);
  uint64_t v29 = *(void *)(v1 + 136);
  uint64_t v30 = *(void *)(v1 + 152);
  uint64_t v31 = *(void *)(v1 + 168);
  uint64_t v32 = *(void *)(v1 + 176);
  Hasher._combine(_:)(*(void *)v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  if (v7)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if (v8)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_6;
    }
LABEL_9:
    Hasher._combine(_:)(0);
    uint64_t v11 = v30;
    if (v23) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  Hasher._combine(_:)(0);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_6:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = v30;
  if (v23)
  {
LABEL_7:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
LABEL_10:
  Hasher._combine(_:)(0);
LABEL_11:
  Hasher._combine(_:)(v24);
  Hasher._combine(_:)(v25);
  Hasher._combine(_:)(v26);
  if (v27)
  {
    Hasher._combine(_:)(0);
    if (v28) {
      goto LABEL_13;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v22 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      Swift::UInt64 v15 = v22;
    }
    else {
      Swift::UInt64 v15 = 0;
    }
    Hasher._combine(_:)(v15);
    if (v28)
    {
LABEL_13:
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(*(void *)(v28 + 16));
      uint64_t v12 = *(void *)(v28 + 16);
      if (v12)
      {
        swift_bridgeObjectRetain();
        uint64_t v13 = v28 + 40;
        do
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          swift_bridgeObjectRelease();
          v13 += 16;
          --v12;
        }
        while (v12);
        swift_bridgeObjectRelease();
      }
      uint64_t v14 = v29;
      if (v29) {
        goto LABEL_18;
      }
      goto LABEL_24;
    }
  }
  Hasher._combine(_:)(0);
  uint64_t v14 = v29;
  if (v29)
  {
LABEL_18:
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Dictionary<>.hash(into:)(a1, v14);
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
LABEL_24:
  Hasher._combine(_:)(0);
LABEL_25:
  Swift::UInt v16 = *(void *)(v10 + 16);
  Hasher._combine(_:)(v16);
  if (v16)
  {
    swift_bridgeObjectRetain();
    AccessibilityNodeProxy.hash(into:)(a1);
    Swift::UInt v17 = v16 - 1;
    if (v17)
    {
      uint64_t v18 = v10 + 216;
      do
      {
        AccessibilityNodeProxy.hash(into:)(a1);
        v18 += 184;
        --v17;
      }
      while (v17);
    }
    swift_bridgeObjectRelease();
  }
  if (!v11)
  {
    Hasher._combine(_:)(0);
    if (v31) {
      goto LABEL_36;
    }
LABEL_41:
    Hasher._combine(_:)(0);
    uint64_t v21 = v32;
    if (v32) {
      goto LABEL_37;
    }
LABEL_42:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(*(void *)(v11 + 16));
  uint64_t v19 = *(void *)(v11 + 16);
  if (v19)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = v11 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v20 += 16;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  if (!v31) {
    goto LABEL_41;
  }
LABEL_36:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = v32;
  if (!v32) {
    goto LABEL_42;
  }
LABEL_37:
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain();
  specialized Dictionary<>.hash(into:)(a1, v21);

  swift_bridgeObjectRelease();
}

uint64_t AccessibilityNodeProxy.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 25705;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x65757161704F7369;
      break;
    case 2:
      uint64_t result = 0x6F6674616C507369;
      break;
    case 3:
      uint64_t result = 0x696C696269736976;
      break;
    case 4:
      uint64_t result = 0x6C6562616CLL;
      break;
    case 5:
      uint64_t result = 0x65756C6176;
      break;
    case 6:
      uint64_t result = 1953393000;
      break;
    case 7:
      uint64_t result = 0x696669746E656469;
      break;
    case 8:
      uint64_t result = 0x737469617274;
      break;
    case 9:
      uint64_t result = 0x6C62617369447369;
      break;
    case 10:
      uint64_t result = 0x6F69725074726F73;
      break;
    case 11:
      uint64_t result = 0x736E6F69746361;
      break;
    case 12:
      uint64_t result = 0x6F436D6F74737563;
      break;
    case 13:
      uint64_t result = 0x6E6572646C696863;
      break;
    case 14:
      uint64_t result = 0x62614C7475706E69;
      break;
    case 15:
      uint64_t result = 7107189;
      break;
    case 16:
      uint64_t result = 0x617461646174656DLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityNodeProxy.CodingKeys()
{
  return AccessibilityNodeProxy.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityNodeProxy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized AccessibilityNodeProxy.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance AccessibilityNodeProxy.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 17;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityNodeProxy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityNodeProxy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AccessibilityNodeProxy.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityNodeProxy.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityNodeProxy.CodingKeys>, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v20 - v6;
  int v8 = *(unsigned __int8 *)(v1 + 8);
  int v38 = *(unsigned __int8 *)(v1 + 9);
  int v39 = v8;
  uint64_t v9 = *(void *)(v1 + 12);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v36 = *(void *)(v1 + 32);
  uint64_t v37 = v10;
  uint64_t v11 = *(void *)(v1 + 48);
  uint64_t v34 = *(void *)(v1 + 40);
  uint64_t v35 = v11;
  uint64_t v12 = *(void *)(v1 + 64);
  uint64_t v32 = *(void *)(v1 + 56);
  uint64_t v33 = v12;
  uint64_t v13 = *(void *)(v1 + 80);
  uint64_t v30 = *(void *)(v1 + 72);
  uint64_t v31 = v13;
  uint64_t v14 = *(void *)(v1 + 96);
  uint64_t v28 = *(void *)(v1 + 88);
  uint64_t v29 = v14;
  LODWORD(v10) = *(unsigned __int8 *)(v1 + 104);
  uint64_t v15 = *(void *)(v1 + 112);
  int v26 = *(unsigned __int8 *)(v1 + 120);
  int v27 = v10;
  uint64_t v24 = *(void *)(v1 + 128);
  uint64_t v25 = v15;
  uint64_t v16 = *(void *)(v1 + 136);
  uint64_t v22 = *(void *)(v1 + 144);
  uint64_t v23 = v16;
  uint64_t v21 = *(void *)(v1 + 152);
  v20[0] = *(void *)(v1 + 160);
  uint64_t v17 = *(void *)(v1 + 176);
  v20[1] = *(void *)(v1 + 168);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v41) = 0;
  uint64_t v18 = v40;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v18) {
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v40 = v17;
  LOBYTE(v41) = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v41) = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  uint64_t v41 = v9;
  char v43 = 3;
  lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v41) = 4;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v41) = 5;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v41) = 6;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  LOBYTE(v41) = 7;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v41 = v28;
  uint64_t v42 = v29;
  char v43 = 8;
  lazy protocol witness table accessor for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  LOBYTE(v41) = 9;
  KeyedEncodingContainer.encode(_:forKey:)();
  LOBYTE(v41) = 10;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v41 = v24;
  char v43 = 11;
  type metadata accessor for AccessibilityNodeProxy?(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v41 = v23;
  char v43 = 12;
  type metadata accessor for [String : String]();
  lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  uint64_t v41 = v22;
  char v43 = 13;
  type metadata accessor for AccessibilityNodeProxy?(0, &lazy cache variable for type metadata for [AccessibilityNodeProxy], (uint64_t)&type metadata for AccessibilityNodeProxy, MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [AccessibilityNodeProxy] and conformance <A> [A](&lazy protocol witness table cache variable for type [AccessibilityNodeProxy] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  uint64_t v41 = v21;
  char v43 = 14;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  LOBYTE(v41) = 15;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v41 = v40;
  char v43 = 16;
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  return (*(uint64_t (**)(void, uint64_t))(v5 + 8))(0, v4);
}

Swift::Int AccessibilityNodeProxy.hashValue.getter()
{
  Hasher.init(_seed:)();
  AccessibilityNodeProxy.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t AccessibilityNodeProxy.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityNodeProxy.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityNodeProxy.CodingKeys>, MEMORY[0x1E4FBBDC0]);
  uint64_t v78 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v8 = (char *)&v55 - v7;
  char v121 = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  char v79 = a1;
  if (v2)
  {
    uint64_t v80 = v2;
    uint64_t v123 = 0;
LABEL_4:
    int v10 = 0;
    goto LABEL_5;
  }
  uint64_t v76 = a2;
  LOBYTE(v93) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v93) = 1;
  int v12 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v93) = 2;
  int v75 = KeyedDecodingContainer.decode(_:forKey:)();
  LOBYTE(v81) = 3;
  lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v74 = v12;
  int v13 = v93;
  int v14 = HIDWORD(v93);
  LOBYTE(v93) = 4;
  uint64_t v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v71 = v14;
  int v72 = v13;
  LOBYTE(v93) = 5;
  uint64_t v16 = v15;
  swift_bridgeObjectRetain();
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v123 = v16;
  uint64_t v19 = v18;
  uint64_t v69 = v17;
  uint64_t v70 = v9;
  LOBYTE(v93) = 6;
  swift_bridgeObjectRetain();
  uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v22 = v21;
  uint64_t v67 = v20;
  uint64_t v68 = v19;
  LOBYTE(v93) = 7;
  swift_bridgeObjectRetain();
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v25 = v24;
  uint64_t v66 = v23;
  LOBYTE(v81) = 8;
  lazy protocol witness table accessor for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v80 = 0;
  uint64_t v26 = v73;
  uint64_t v27 = v6;
  uint64_t v64 = v94;
  uint64_t v65 = v93;
  LOBYTE(v93) = 9;
  int v63 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v80 = 0;
  LOBYTE(v93) = 10;
  uint64_t v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  int v62 = v28;
  uint64_t v80 = 0;
  char v121 = v62 & 1;
  type metadata accessor for AccessibilityNodeProxy?(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  LOBYTE(v81) = 11;
  uint64_t v60 = lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A]);
  uint64_t v29 = v80;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v80 = v29;
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  uint64_t v30 = v93;
  type metadata accessor for [String : String]();
  uint64_t v32 = v31;
  LOBYTE(v81) = 12;
  uint64_t v33 = lazy protocol witness table accessor for type [String : String] and conformance <> [A : B](&lazy protocol witness table cache variable for type [String : String] and conformance <> [A : B]);
  uint64_t v59 = v30;
  swift_bridgeObjectRetain();
  uint64_t v57 = v33;
  uint64_t v58 = v32;
  uint64_t v34 = v80;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v80 = v34;
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  uint64_t v35 = v93;
  type metadata accessor for AccessibilityNodeProxy?(0, &lazy cache variable for type metadata for [AccessibilityNodeProxy], (uint64_t)&type metadata for AccessibilityNodeProxy, MEMORY[0x1E4FBB320]);
  LOBYTE(v81) = 13;
  lazy protocol witness table accessor for type [AccessibilityNodeProxy] and conformance <A> [A](&lazy protocol witness table cache variable for type [AccessibilityNodeProxy] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type AccessibilityNodeProxy and conformance AccessibilityNodeProxy);
  uint64_t v56 = v35;
  swift_bridgeObjectRetain();
  uint64_t v36 = v80;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v80 = v36;
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  LOBYTE(v81) = 14;
  uint64_t v77 = v93;
  swift_bridgeObjectRetain();
  uint64_t v37 = v80;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v80 = v37;
  if (v37)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    int v10 = 1;
    goto LABEL_5;
  }
  uint64_t v38 = v93;
  LOBYTE(v93) = 15;
  uint64_t v39 = v38;
  swift_bridgeObjectRetain();
  uint64_t v40 = v80;
  uint64_t v60 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v80 = v40;
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  uint64_t v42 = v41;
  char v118 = 16;
  swift_bridgeObjectRetain();
  uint64_t v43 = v80;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v80 = v43;
  if (!v43)
  {
    char v44 = v74 & 1;
    LODWORD(v58) = v74 & 1;
    int v74 = v75 & 1;
    int v75 = v63 & 1;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v78);
    uint64_t v45 = v119;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)&long long v81 = v70;
    BYTE8(v81) = v44;
    BYTE9(v81) = v74;
    HIDWORD(v81) = v72;
    LODWORD(v82) = v71;
    *((void *)&v82 + 1) = v26;
    *(void *)&long long v83 = v123;
    uint64_t v46 = v68;
    *((void *)&v83 + 1) = v69;
    *(void *)&long long v84 = v68;
    *((void *)&v84 + 1) = v67;
    *(void *)&long long v85 = v22;
    *((void *)&v85 + 1) = v66;
    *(void *)&long long v86 = v25;
    *((void *)&v86 + 1) = v65;
    *(void *)&long long v87 = v64;
    BYTE8(v87) = v75;
    *(void *)&long long v88 = v61;
    BYTE8(v88) = v62 & 1;
    uint64_t v47 = v59;
    uint64_t v48 = v56;
    *(void *)&long long v89 = v59;
    *((void *)&v89 + 1) = v56;
    *(void *)&long long v90 = v77;
    *((void *)&v90 + 1) = v39;
    *(void *)&long long v91 = v60;
    *((void *)&v91 + 1) = v42;
    uint64_t v92 = v45;
    outlined retain of AccessibilityNodeProxy((uint64_t)&v81);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    long long v49 = v90;
    uint64_t v50 = v76;
    *(_OWORD *)(v76 + 128) = v89;
    *(_OWORD *)(v50 + 144) = v49;
    *(_OWORD *)(v50 + 160) = v91;
    *(void *)(v50 + 176) = v92;
    long long v51 = v86;
    *(_OWORD *)(v50 + 64) = v85;
    *(_OWORD *)(v50 + 80) = v51;
    long long v52 = v88;
    *(_OWORD *)(v50 + 96) = v87;
    *(_OWORD *)(v50 + 112) = v52;
    long long v53 = v82;
    *(_OWORD *)uint64_t v50 = v81;
    *(_OWORD *)(v50 + 16) = v53;
    long long v54 = v84;
    *(_OWORD *)(v50 + 32) = v83;
    *(_OWORD *)(v50 + 48) = v54;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
    uint64_t v93 = v70;
    LOBYTE(v94) = v58;
    BYTE1(v94) = v74;
    HIDWORD(v94) = v72;
    int v95 = v71;
    uint64_t v96 = v73;
    uint64_t v97 = v123;
    uint64_t v98 = v69;
    uint64_t v99 = v46;
    uint64_t v100 = v67;
    uint64_t v101 = v22;
    uint64_t v102 = v66;
    uint64_t v103 = v25;
    uint64_t v104 = v65;
    uint64_t v105 = v64;
    char v106 = v75;
    *(_DWORD *)char v107 = v122[0];
    *(_DWORD *)&v107[3] = *(_DWORD *)((char *)v122 + 3);
    uint64_t v108 = v61;
    char v109 = v121;
    *(_DWORD *)uint64_t v110 = *(_DWORD *)v120;
    *(_DWORD *)&v110[3] = *(_DWORD *)&v120[3];
    uint64_t v111 = v47;
    uint64_t v112 = v48;
    uint64_t v113 = v77;
    uint64_t v114 = v39;
    uint64_t v115 = v60;
    uint64_t v116 = v42;
    uint64_t v117 = v45;
    return outlined release of AccessibilityNodeProxy((uint64_t)&v93);
  }
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int v10 = 1;
LABEL_5:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v79);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityNodeProxy()
{
  Hasher.init(_seed:)();
  AccessibilityNodeProxy.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityNodeProxy()
{
  Hasher.init(_seed:)();
  AccessibilityNodeProxy.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityNodeProxy@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityNodeProxy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityNodeProxy(void *a1)
{
  return AccessibilityNodeProxy.encode(to:)(a1);
}

void specialized Dictionary<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = a2 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  uint64_t v4 = v3 & *(void *)(a2 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v6 = 0;
  int64_t v7 = 0;
  while (1)
  {
    if (v4)
    {
      v4 &= v4 - 1;
      goto LABEL_5;
    }
    int64_t v8 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v8 >= v5) {
      goto LABEL_19;
    }
    uint64_t v9 = *(void *)(v11 + 8 * v8);
    ++v7;
    if (!v9)
    {
      int64_t v7 = v8 + 1;
      if (v8 + 1 >= v5) {
        goto LABEL_19;
      }
      uint64_t v9 = *(void *)(v11 + 8 * v7);
      if (!v9) {
        break;
      }
    }
LABEL_18:
    uint64_t v4 = (v9 - 1) & v9;
LABEL_5:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v6 ^= Hasher._finalize()();
  }
  int64_t v10 = v8 + 2;
  if (v10 >= v5)
  {
LABEL_19:
    swift_release();
    Hasher._combine(_:)(v6);
    return;
  }
  uint64_t v9 = *(void *)(v11 + 8 * v10);
  if (v9)
  {
    int64_t v7 = v10;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v7 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v7 >= v5) {
      goto LABEL_19;
    }
    uint64_t v9 = *(void *)(v11 + 8 * v7);
    ++v10;
    if (v9) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
}

BOOL specialized static AccessibilityNodeProxy.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (*(void *)a1 != *(void *)a2
    || ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 9) ^ *(unsigned __int8 *)(a2 + 9)) & 1) != 0
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
  {
    return result;
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v132 = *(void *)(a1 + 40);
  uint64_t v138 = *(void *)(a1 + 48);
  uint64_t v128 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v136 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v8 = *(void *)(a1 + 96);
  int v9 = *(unsigned __int8 *)(a1 + 104);
  double v10 = *(double *)(a1 + 112);
  char v11 = *(unsigned char *)(a1 + 120);
  int v12 = *(void **)(a1 + 128);
  uint64_t v13 = *(void *)(a1 + 136);
  uint64_t v14 = *(void *)(a1 + 144);
  uint64_t v15 = *(void **)(a1 + 152);
  uint64_t v16 = *(void *)(a1 + 160);
  uint64_t v17 = *(void *)(a1 + 168);
  uint64_t v18 = *(void *)(a1 + 176);
  uint64_t v19 = *(void *)(a2 + 32);
  uint64_t v129 = *(void *)(a2 + 40);
  uint64_t v20 = *(void *)(a2 + 48);
  uint64_t v127 = *(void *)(a2 + 56);
  uint64_t v135 = *(void *)(a2 + 64);
  uint64_t v125 = *(void *)(a2 + 72);
  uint64_t v126 = *(void *)(a2 + 80);
  int v21 = *(unsigned __int8 *)(a2 + 104);
  double v22 = *(double *)(a2 + 112);
  int v23 = *(unsigned __int8 *)(a2 + 120);
  uint64_t v25 = *(void **)(a2 + 128);
  uint64_t v24 = *(void *)(a2 + 136);
  uint64_t v27 = *(void *)(a2 + 144);
  uint64_t v26 = *(void **)(a2 + 152);
  uint64_t v29 = *(void *)(a2 + 160);
  uint64_t v28 = *(void *)(a2 + 168);
  uint64_t v30 = *(void *)(a2 + 176);
  if (!v4)
  {
    uint64_t v123 = *(void *)(a2 + 96);
    uint64_t v124 = *(void *)(a2 + 88);
    if (v19) {
      return 0;
    }
    goto LABEL_13;
  }
  if (!v19) {
    return 0;
  }
  uint64_t v123 = *(void *)(a2 + 96);
  uint64_t v124 = *(void *)(a2 + 88);
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && v4 == v19) {
    goto LABEL_13;
  }
  int v98 = *(unsigned __int8 *)(a2 + 120);
  int v102 = *(unsigned __int8 *)(a1 + 104);
  uint64_t v88 = *(void *)(a1 + 136);
  uint64_t v91 = *(void *)(a1 + 144);
  long long v81 = *(void **)(a1 + 152);
  long long v82 = *(void **)(a2 + 152);
  uint64_t v95 = *(void *)(a1 + 168);
  uint64_t v97 = *(void *)(a1 + 160);
  uint64_t v31 = *(void *)(a2 + 176);
  uint64_t v32 = *(void *)(a1 + 176);
  uint64_t v118 = *(void *)(a2 + 136);
  char v106 = *(void **)(a2 + 128);
  uint64_t v110 = *(void **)(a1 + 128);
  char v85 = *(unsigned char *)(a1 + 120);
  uint64_t v33 = *(void *)(a2 + 160);
  uint64_t v34 = *(void *)(a2 + 168);
  uint64_t v35 = *(void *)(a1 + 96);
  int v36 = *(unsigned __int8 *)(a2 + 104);
  uint64_t v37 = *(void *)(a1 + 88);
  char v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t v6 = v37;
  int v21 = v36;
  uint64_t v8 = v35;
  int v23 = v98;
  int v9 = v102;
  uint64_t v28 = v34;
  uint64_t v29 = v33;
  uint64_t v15 = v81;
  uint64_t v26 = v82;
  int v12 = v110;
  uint64_t v25 = v106;
  char v11 = v85;
  uint64_t v24 = v118;
  uint64_t v18 = v32;
  uint64_t v30 = v31;
  uint64_t v17 = v95;
  uint64_t v16 = v97;
  uint64_t v13 = v88;
  uint64_t v14 = v91;
  char v39 = v38;
  BOOL result = 0;
  if (v39)
  {
LABEL_13:
    if (v138)
    {
      if (!v20) {
        return 0;
      }
      if (v132 != v129 || v138 != v20)
      {
        int v103 = v9;
        uint64_t v96 = v17;
        uint64_t v92 = v30;
        uint64_t v114 = v27;
        uint64_t v119 = v24;
        uint64_t v40 = v18;
        uint64_t v130 = v7;
        uint64_t v41 = v14;
        uint64_t v42 = v26;
        uint64_t v133 = v29;
        char v107 = v25;
        uint64_t v111 = v12;
        char v43 = v11;
        int v99 = v23;
        int v139 = v21;
        uint64_t v44 = v13;
        uint64_t v45 = v28;
        uint64_t v46 = v8;
        uint64_t v47 = v6;
        char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v6 = v47;
        uint64_t v8 = v46;
        int v23 = v99;
        int v9 = v103;
        uint64_t v28 = v45;
        uint64_t v13 = v44;
        int v21 = v139;
        uint64_t v25 = v107;
        int v12 = v111;
        char v11 = v43;
        uint64_t v29 = v133;
        uint64_t v26 = v42;
        uint64_t v14 = v41;
        uint64_t v7 = v130;
        uint64_t v18 = v40;
        uint64_t v27 = v114;
        uint64_t v24 = v119;
        uint64_t v30 = v92;
        uint64_t v17 = v96;
        char v49 = v48;
        BOOL result = 0;
        if ((v49 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v20)
    {
      return 0;
    }
    if (v136)
    {
      if (!v135) {
        return 0;
      }
      if (v128 != v127 || v136 != v135)
      {
        int v104 = v9;
        uint64_t v115 = v27;
        uint64_t v120 = v24;
        uint64_t v50 = v15;
        uint64_t v51 = v18;
        uint64_t v93 = v14;
        long long v52 = v26;
        uint64_t v134 = v29;
        uint64_t v108 = v25;
        uint64_t v112 = v12;
        char v86 = v11;
        int v100 = v23;
        uint64_t v89 = v13;
        uint64_t v53 = v28;
        uint64_t v54 = v8;
        uint64_t v131 = v7;
        uint64_t v55 = v6;
        char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        uint64_t v6 = v55;
        uint64_t v7 = v131;
        uint64_t v8 = v54;
        int v23 = v100;
        int v9 = v104;
        uint64_t v28 = v53;
        uint64_t v13 = v89;
        uint64_t v14 = v93;
        uint64_t v25 = v108;
        int v12 = v112;
        char v11 = v86;
        uint64_t v29 = v134;
        uint64_t v26 = v52;
        uint64_t v18 = v51;
        uint64_t v15 = v50;
        uint64_t v27 = v115;
        uint64_t v24 = v120;
        char v57 = v56;
        BOOL result = 0;
        if ((v57 & 1) == 0) {
          return result;
        }
      }
    }
    else if (v135)
    {
      return 0;
    }
    if (v7)
    {
      uint64_t v58 = v124;
      if (!v126) {
        return 0;
      }
      if (v5 != v125 || v7 != v126)
      {
        int v140 = v21;
        uint64_t v59 = v6;
        int v101 = v23;
        int v105 = v9;
        uint64_t v60 = v8;
        char v109 = v25;
        uint64_t v113 = v12;
        char v87 = v11;
        uint64_t v116 = v27;
        uint64_t v121 = v24;
        uint64_t v90 = v13;
        uint64_t v94 = v14;
        long long v83 = v26;
        uint64_t v61 = v15;
        uint64_t v62 = v28;
        uint64_t v63 = v18;
        char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
        BOOL result = 0;
        if ((v64 & 1) == 0) {
          return result;
        }
        if (v59 != v124) {
          return result;
        }
        if (v60 != v123) {
          return result;
        }
        uint64_t v18 = v63;
        uint64_t v28 = v62;
        int v23 = v101;
        uint64_t v15 = v61;
        uint64_t v13 = v90;
        uint64_t v14 = v94;
        uint64_t v26 = v83;
        uint64_t v27 = v116;
        uint64_t v24 = v121;
        uint64_t v25 = v109;
        int v12 = v113;
        char v11 = v87;
        if ((v105 ^ v140)) {
          return result;
        }
LABEL_40:
        if (v11)
        {
          if (!v23) {
            return 0;
          }
        }
        else
        {
          if (v10 == v22) {
            char v65 = v23;
          }
          else {
            char v65 = 1;
          }
          if (v65) {
            return 0;
          }
        }
        if (v12)
        {
          if (!v25) {
            return 0;
          }
          uint64_t v117 = v27;
          uint64_t v122 = v24;
          uint64_t v66 = v15;
          uint64_t v67 = v18;
          uint64_t v68 = v14;
          uint64_t v69 = v26;
          uint64_t v70 = v13;
          uint64_t v71 = v28;
          char v72 = specialized static Array<A>.== infix(_:_:)(v12, v25);
          uint64_t v28 = v71;
          uint64_t v13 = v70;
          uint64_t v26 = v69;
          uint64_t v14 = v68;
          uint64_t v18 = v67;
          uint64_t v15 = v66;
          uint64_t v27 = v117;
          if ((v72 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          uint64_t v122 = v24;
          if (v25) {
            return 0;
          }
        }
        if (v13)
        {
          if (!v122) {
            return 0;
          }
          long long v84 = v26;
          uint64_t v73 = v14;
          int v74 = v15;
          uint64_t v137 = v18;
          uint64_t v141 = v28;
          swift_bridgeObjectRetain();
          uint64_t v75 = swift_bridgeObjectRetain();
          char v76 = specialized static Dictionary<>.== infix(_:_:)(v75, v122);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v76 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          long long v84 = v26;
          uint64_t v73 = v14;
          int v74 = v15;
          uint64_t v137 = v18;
          uint64_t v141 = v28;
          if (v122) {
            return 0;
          }
        }
        if (specialized static Array<A>.== infix(_:_:)(v73, v27))
        {
          if (v74)
          {
            if (!v84 || (specialized static Array<A>.== infix(_:_:)(v74, v84) & 1) == 0) {
              return 0;
            }
          }
          else if (v84)
          {
            return 0;
          }
          if (v17)
          {
            if (!v141) {
              return 0;
            }
            uint64_t v77 = v137;
            if (v16 != v29 || v17 != v141)
            {
              char v78 = _stringCompareWithSmolCheck(_:_:expecting:)();
              BOOL result = 0;
              if ((v78 & 1) == 0) {
                return result;
              }
            }
          }
          else
          {
            uint64_t v77 = v137;
            if (v141) {
              return 0;
            }
          }
          if (v77)
          {
            if (!v30) {
              return 0;
            }
            swift_bridgeObjectRetain();
            uint64_t v79 = swift_bridgeObjectRetain();
            char v80 = specialized static Dictionary<>.== infix(_:_:)(v79, v30);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return (v80 & 1) != 0;
          }
          if (!v30) {
            return 1;
          }
        }
        return 0;
      }
    }
    else
    {
      uint64_t v58 = v124;
      if (v126) {
        return 0;
      }
    }
    BOOL result = 0;
    if (v6 != v58 || v8 != v123 || ((v9 ^ v21) & 1) != 0) {
      return result;
    }
    goto LABEL_40;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitStorageProxy and conformance AccessibilityTraitStorageProxy);
  }
  return result;
}

void type metadata accessor for KeyedEncodingContainer<AccessibilityNodeProxy.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type AccessibilityNodeProxy.CodingKeys and conformance AccessibilityNodeProxy.CodingKeys();
    unint64_t v7 = a3(a1, &unk_1ED4380B0, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityNodeProxy?(255, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [AccessibilityNodeProxy] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityNodeProxy?(255, &lazy cache variable for type metadata for [AccessibilityNodeProxy], (uint64_t)&type metadata for AccessibilityNodeProxy, MEMORY[0x1E4FBB320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of AccessibilityNodeProxy(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of AccessibilityNodeProxy(uint64_t a1)
{
  return a1;
}

uint64_t destroy for AccessibilityNodeProxy()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityNodeProxy(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v7;
  uint64_t v8 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = v8;
  uint64_t v9 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v9;
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityNodeProxy(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v4 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v4;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityNodeProxy(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityNodeProxy(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 184)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 144);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityNodeProxy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 184) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 144) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 184) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityNodeProxy()
{
  return &type metadata for AccessibilityNodeProxy;
}

uint64_t getEnumTagSinglePayload for AccessibilityNodeProxy.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF0) {
    goto LABEL_17;
  }
  if (a2 + 16 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 16) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 16;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 16;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x11;
  int v8 = v6 - 17;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AccessibilityNodeProxy.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *uint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1881F39A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

void *type metadata accessor for AccessibilityNodeProxy.CodingKeys()
{
  return &unk_1ED4380B0;
}

uint64_t specialized AccessibilityNodeProxy.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65757161704F7369 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F6674616C507369 && a2 == 0xEE0065646F4E6D72 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x696C696269736976 && a2 == 0xEA00000000007974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C6562616CLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 1953393000 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x737469617274 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6C62617369447369 && a2 == 0xEA00000000006465 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x6F69725074726F73 && a2 == 0xEC00000079746972 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x736E6F69746361 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6F436D6F74737563 && a2 == 0xED0000746E65746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x6E6572646C696863 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x62614C7475706E69 && a2 == 0xEB00000000736C65 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 7107189 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 16;
    }
    else {
      return 17;
    }
  }
}

void _s7SwiftUI15LinkDestinationV13ConfigurationVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined destroy of AccessibilityCustomAttributes.Value?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  _s7SwiftUI15LinkDestinationV13ConfigurationVSgMaTm_0(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined destroy of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of AccessibilityCustomAttributes.Value?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI15LinkDestinationV13ConfigurationVSgMaTm_0(0, &lazy cache variable for type metadata for AccessibilityCustomAttributes.Value?, MEMORY[0x1E4F41118]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of AccessibilityCustomAttributes.Value(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessibilityCustomAttributes.Value();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AnyAccessibilityValue?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityNodeProxy?(0, &lazy cache variable for type metadata for AnyAccessibilityValue?, MEMORY[0x1E4F40788], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AccessibilityNodeProxy?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation3URLV_s5NeverO7SwiftUI19FileExportOperationVTg503_s7f158UI4ViewPAAE10_fileMover33_CF0E99507E0561E72608AD5A23D06699LL11isPresented0D012onCompletion0O12CancellationQrAA7BindingVySbG_10Foundation3URLVSgys6ResultOyAOs5b13_pGcyyctFAA19hiJ8VAOXEfU_AI7BindingVySbGs6ResultOyAFsAC_pGIegn_Ieg_Tf1ncn_n@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v29 = a6;
  uint64_t v30 = a8;
  uint64_t v26 = a5;
  uint64_t v27 = a7;
  int v25 = a4;
  uint64_t v28 = a3;
  uint64_t v31 = a9;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v16 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
  type metadata accessor for FileExportOperation?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = &v24[-v18];
  _s10Foundation3URLVSgWOcTm_3(a1, (uint64_t)&v24[-v18], (unint64_t *)&lazy cache variable for type metadata for URL?, v16);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v13 + 48))(v19, 1, v12) == 1)
  {
    uint64_t v20 = type metadata accessor for FileExportOperation(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v31, 1, 1, v20);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v13 + 32))(v15, v19, v12);
    uint64_t v21 = v31;
    closure #1 in View._fileMover(isPresented:file:onCompletion:onCancellation:)((uint64_t)v15, a2, v28, v25 & 1, v26, v29, v27, v30, v31);
    if (v9)
    {
      (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
    (*(void (**)(unsigned char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v23 = type metadata accessor for FileExportOperation(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v21, 0, 1, v23);
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t View.fileMover(isPresented:file:onCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return View._fileMover(isPresented:file:onCompletion:onCancellation:)(a1, a2, a3, a4, a5, a6, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a9, a7, a8);
}

uint64_t View._fileMover(isPresented:file:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v40 = a9;
  uint64_t v41 = a10;
  uint64_t v42 = a11;
  type metadata accessor for FileExportOperation?(0, &lazy cache variable for type metadata for FileExportOperation?, (void (*)(uint64_t))type metadata accessor for FileExportOperation);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = &v33[-v16];
  uint64_t v18 = (void (*)(uint64_t))MEMORY[0x1E4F276F0];
  type metadata accessor for FileExportOperation?(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = &v33[-v20];
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  char v22 = a3 & 1;
  int v34 = a3;
  char v46 = a3;
  type metadata accessor for Binding<Bool>();
  uint64_t v24 = v23;
  MEMORY[0x18C113DA0](&v47);
  int v25 = v47;
  uint64_t v35 = a4;
  _s10Foundation3URLVSgWOcTm_3(a4, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for URL?, v18);
  if (v25 == 1)
  {
    uint64_t v26 = type metadata accessor for URL();
    int v27 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v21, 1, v26);
    outlined destroy of Result<URL, Error>?((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
    if (v27 == 1)
    {
      static os_log_type_t.fault.getter();
      uint64_t v28 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();
    }
  }
  else
  {
    outlined destroy of Result<URL, Error>?((uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  }
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  char v46 = v22;
  MEMORY[0x18C113DA0](&v43, v24);
  if (v43 == 1)
  {
    swift_retain();
    swift_retain();
    uint64_t v29 = v37;
    swift_retain();
    uint64_t v30 = v39;
    swift_retain();
    _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF10Foundation3URLV_s5NeverO7SwiftUI19FileExportOperationVTg503_s7f158UI4ViewPAAE10_fileMover33_CF0E99507E0561E72608AD5A23D0669911isPresented0D012onCompletion0O12CancellationQrAA7BindingVySbG_10Foundation3URLVSgys6ResultOyAOs5b13_pGcyyctFAA19hiJ8VAOXEfU_AI7BindingVySbGs6ResultOyAFsAC_pGIegn_Ieg_Tf1ncn_n(v35, a1, a2, v34 & 1, v36, v29, v38, v30, (uint64_t)v17);
  }
  else
  {
    uint64_t v31 = type metadata accessor for FileExportOperation(0);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v17, 1, 1, v31);
  }
  View.preference<A>(key:value:)();
  return outlined destroy of Result<URL, Error>?((uint64_t)v17, &lazy cache variable for type metadata for FileExportOperation?, (void (*)(uint64_t))type metadata accessor for FileExportOperation);
}

uint64_t View.fileMover<A>(isPresented:files:onCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return View._fileMover<A>(isPresented:files:onCompletion:onCancellation:)(a1, a2, a3, a4, a5, a6, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a9, a7, a8, a10, a11);
}

uint64_t View._fileMover<A>(isPresented:files:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v63 = a6;
  uint64_t v64 = a8;
  uint64_t v61 = a5;
  uint64_t v62 = a7;
  uint64_t v66 = a9;
  uint64_t v65 = a13;
  uint64_t v67 = a12;
  uint64_t v71 = a10;
  type metadata accessor for FileExportOperation?(0, &lazy cache variable for type metadata for FileExportOperation?, (void (*)(uint64_t))type metadata accessor for FileExportOperation);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (uint64_t *)((char *)&v59 - v18);
  type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>();
  uint64_t v70 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v69 = (uint64_t *)((char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v22 = *(void *)(a11 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v60 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  int v27 = (char *)&v59 - v26;
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v59 - v29;
  uint64_t v74 = a1;
  uint64_t v76 = a1;
  uint64_t v77 = a2;
  uint64_t v68 = a2;
  int v72 = a3 & 1;
  char v78 = a3;
  type metadata accessor for Binding<Bool>();
  uint64_t v32 = v31;
  MEMORY[0x18C113DA0](&v79);
  int v33 = v79;
  int v34 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v73 = a4;
  v34(v30, a4, a11);
  if (v33 == 1)
  {
    char v35 = dispatch thunk of Collection.isEmpty.getter();
    uint64_t v36 = *(void (**)(char *, uint64_t))(v22 + 8);
    v36(v30, a11);
    if (v35)
    {
      static os_log_type_t.fault.getter();
      uint64_t v37 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();
    }
  }
  else
  {
    uint64_t v36 = *(void (**)(char *, uint64_t))(v22 + 8);
    v36(v30, a11);
  }
  uint64_t v38 = v68;
  uint64_t v76 = v74;
  uint64_t v77 = v68;
  char v78 = v72;
  MEMORY[0x18C113DA0](&v75, v32);
  int v39 = v75;
  v34(v27, v73, a11);
  if (v39 != 1)
  {
    v36(v27, a11);
    uint64_t v41 = v67;
    goto LABEL_9;
  }
  char v40 = dispatch thunk of Collection.isEmpty.getter();
  v36(v27, a11);
  uint64_t v41 = v67;
  if (v40)
  {
LABEL_9:
    uint64_t v56 = type metadata accessor for FileExportOperation(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56))(v19, 1, 1, v56);
    goto LABEL_10;
  }
  v34(v60, v73, a11);
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v43 = Array.init<A>(_:)();
  uint64_t v44 = v41;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = v74;
  *(void *)(v45 + 24) = v38;
  *(unsigned char *)(v45 + 32) = v72;
  uint64_t v46 = v63;
  *(void *)(v45 + 40) = v61;
  *(void *)(v45 + 48) = v46;
  uint64_t v47 = (int *)type metadata accessor for FileExportOperation(0);
  char v48 = (uint64_t *)((char *)v19 + v47[5]);
  *char v48 = 0;
  v48[1] = 0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))((char *)v19 + v47[6], 1, 1, v42);
  char v49 = (_OWORD *)((char *)v19 + v47[7]);
  *char v49 = 0u;
  v49[1] = 0u;
  uint64_t v50 = (_OWORD *)((char *)v19 + v47[8]);
  *uint64_t v50 = 0u;
  v50[1] = 0u;
  uint64_t v51 = (_OWORD *)((char *)v19 + v47[9]);
  *uint64_t v51 = 0u;
  v51[1] = 0u;
  long long v52 = (char *)v19 + v47[10];
  type metadata accessor for Predicate<Pack{URL}>();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 1, 1, v53);
  *((unsigned char *)v19 + v47[11]) = 2;
  uint64_t v54 = (char *)v19 + v47[12];
  *(void *)uint64_t v54 = 0;
  v54[8] = 1;
  *uint64_t v19 = v43;
  v19[1] = (uint64_t)partial apply for closure #1 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:);
  unint64_t v19[2] = v45;
  uint64_t v41 = v44;
  uint64_t v55 = v64;
  v19[3] = v62;
  void v19[4] = v55;
  type metadata accessor for FileExportOperation.Mode(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t *, void, uint64_t, int *))(*((void *)v47 - 1) + 56))(v19, 0, 1, v47);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
LABEL_10:
  char v57 = v69;
  specialized FileDialogConfiguration.init(preferenceKey:operation:)((uint64_t)v19, v69);
  MEMORY[0x18C113660](v57, v71, v70, v41);
  return outlined destroy of FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>((uint64_t)v57, (uint64_t (*)(void))type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>);
}

uint64_t View.fileMover(isPresented:file:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return View._fileMover(isPresented:file:onCompletion:onCancellation:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t View.fileMover<A>(isPresented:files:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return View._fileMover<A>(isPresented:files:onCompletion:onCancellation:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_1881F55E0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _PreferenceWritingModifier<FileExportOperation.Key>()
{
  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<FileExportOperation.Key>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<FileExportOperation.Key>);
    }
  }
}

uint64_t sub_1881F56DC()
{
  return swift_getWitnessTable();
}

void type metadata accessor for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>()
{
  if (!lazy cache variable for type metadata for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>)
  {
    type metadata accessor for FileExportOperation(255);
    unint64_t v0 = type metadata accessor for FileDialogConfiguration();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<FileExportOperation.Key> and conformance _PreferenceWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in View._fileMover(isPresented:file:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v40 = a6;
  uint64_t v36 = a5;
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v19, a1, v15, v17);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  uint64_t v39 = a3;
  *(unsigned char *)(v20 + 32) = a4;
  *(void *)(v20 + 40) = v36;
  *(void *)(v20 + 48) = a6;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a2;
  *(void *)(v21 + 24) = a3;
  *(unsigned char *)(v21 + 32) = a4;
  uint64_t v22 = v38;
  *(void *)(v21 + 40) = v37;
  *(void *)(v21 + 48) = v22;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(a9, v19, v15);
  uint64_t v23 = type metadata accessor for FileExportOperation.Move(0);
  uint64_t v24 = (uint64_t (**)(uint64_t))(a9 + *(int *)(v23 + 20));
  *uint64_t v24 = partial apply for closure #1 in closure #1 in View._fileMover(isPresented:file:onCompletion:onCancellation:);
  v24[1] = (uint64_t (*)(uint64_t))v20;
  uint64_t v25 = (uint64_t (**)())(a9 + *(int *)(v23 + 24));
  *uint64_t v25 = partial apply for closure #2 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:);
  v25[1] = (uint64_t (*)())v21;
  uint64_t v26 = (int *)type metadata accessor for FileExportOperation(0);
  int v27 = (void *)(a9 + v26[5]);
  *int v27 = 0;
  v27[1] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(a9 + v26[6], 1, 1, v15);
  uint64_t v28 = (_OWORD *)(a9 + v26[7]);
  *uint64_t v28 = 0u;
  v28[1] = 0u;
  uint64_t v29 = (_OWORD *)(a9 + v26[8]);
  *uint64_t v29 = 0u;
  v29[1] = 0u;
  uint64_t v30 = (_OWORD *)(a9 + v26[9]);
  *uint64_t v30 = 0u;
  v30[1] = 0u;
  uint64_t v31 = a9 + v26[10];
  type metadata accessor for Predicate<Pack{URL}>();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 1, 1, v32);
  *(unsigned char *)(a9 + v26[11]) = 2;
  uint64_t v33 = a9 + v26[12];
  *(void *)uint64_t v33 = 0;
  *(unsigned char *)(v33 + 8) = 1;
  type metadata accessor for FileExportOperation.Mode(0);
  swift_storeEnumTagMultiPayload();
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in closure #1 in View._fileMover(isPresented:file:onCompletion:onCancellation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v15 = a5;
  type metadata accessor for FileExportOperation?(0, &lazy cache variable for type metadata for Result<URL, Error>?, (void (*)(uint64_t))type metadata accessor for Result<URL, Error>);
  MEMORY[0x1F4188790](v6 - 8);
  int v8 = (char *)&v15 - v7;
  type metadata accessor for Result<URL, Error>();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v16 = 0;
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  _s10Foundation3URLVSgWOcTm_3(a1, (uint64_t)v8, &lazy cache variable for type metadata for Result<URL, Error>?, (void (*)(uint64_t))type metadata accessor for Result<URL, Error>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1) {
    return outlined destroy of Result<URL, Error>?((uint64_t)v8, &lazy cache variable for type metadata for Result<URL, Error>?, (void (*)(uint64_t))type metadata accessor for Result<URL, Error>);
  }
  outlined init with take of Result<URL, Error>((uint64_t)v8, (uint64_t)v13);
  v15(v13);
  return outlined destroy of FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Result<URL, Error>);
}

uint64_t outlined destroy of Result<URL, Error>?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for FileExportOperation?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t partial apply for closure #1 in closure #1 in View._fileMover(isPresented:file:onCompletion:onCancellation:)(uint64_t a1)
{
  return closure #1 in closure #1 in View._fileMover(isPresented:file:onCompletion:onCancellation:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void (**)(char *))(v1 + 40));
}

void type metadata accessor for FileExportOperation?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with take of Result<URL, Error>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Result<URL, Error>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of FileDialogConfiguration<FileExportOperation.Key, FileExportOperation>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithCopy for NavigationListState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for NavigationListState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for NavigationListState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationListState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 44)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationListState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 44) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 44) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationListState()
{
  return &type metadata for NavigationListState;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1)
{
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (v4)
  {
    unint64_t v8 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_21:
    uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8 * v9);
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = v13 + 40;
      do
      {
        swift_retain();
        swift_retain();
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        swift_release();
        v15 += 24;
        --v14;
      }
      while (v14);
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  int64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v10 >= v5) {
    return swift_release();
  }
  unint64_t v11 = *(void *)(v16 + 8 * v10);
  ++v7;
  if (v11) {
    goto LABEL_20;
  }
  int64_t v7 = v10 + 1;
  if (v10 + 1 >= v5) {
    return swift_release();
  }
  unint64_t v11 = *(void *)(v16 + 8 * v7);
  if (v11) {
    goto LABEL_20;
  }
  int64_t v7 = v10 + 2;
  if (v10 + 2 >= v5) {
    return swift_release();
  }
  unint64_t v11 = *(void *)(v16 + 8 * v7);
  if (v11) {
    goto LABEL_20;
  }
  int64_t v7 = v10 + 3;
  if (v10 + 3 >= v5) {
    return swift_release();
  }
  unint64_t v11 = *(void *)(v16 + 8 * v7);
  if (v11) {
    goto LABEL_20;
  }
  int64_t v12 = v10 + 4;
  if (v12 >= v5) {
    return swift_release();
  }
  unint64_t v11 = *(void *)(v16 + 8 * v12);
  int64_t v7 = v12;
  if (v11)
  {
LABEL_20:
    unint64_t v4 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v5) {
      return swift_release();
    }
    unint64_t v11 = *(void *)(v16 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_20;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 32 * v4);
  swift_retain();
  swift_retain();
  swift_retain();
  return v6;
}

Swift::Bool __swiftcall NavigationListState.isAnyEditing()()
{
  int64_t v1 = 0;
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  uint64_t v5 = v2 + 64;
  unint64_t v6 = v4 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v3 + 63) >> 6;
  while (v6)
  {
    unint64_t v8 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    unint64_t v9 = v8 | (v1 << 6);
LABEL_5:
    if (*(unsigned char *)(*(void *)(v2 + 56) + v9) == 1) {
      return 1;
    }
  }
  int64_t v10 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v10 >= v7) {
    return 0;
  }
  unint64_t v11 = *(void *)(v5 + 8 * v10);
  ++v1;
  if (v11) {
    goto LABEL_24;
  }
  int64_t v1 = v10 + 1;
  if (v10 + 1 >= v7) {
    return 0;
  }
  unint64_t v11 = *(void *)(v5 + 8 * v1);
  if (v11) {
    goto LABEL_24;
  }
  int64_t v1 = v10 + 2;
  if (v10 + 2 >= v7) {
    return 0;
  }
  unint64_t v11 = *(void *)(v5 + 8 * v1);
  if (v11) {
    goto LABEL_24;
  }
  int64_t v1 = v10 + 3;
  if (v10 + 3 >= v7) {
    return 0;
  }
  unint64_t v11 = *(void *)(v5 + 8 * v1);
  if (v11) {
    goto LABEL_24;
  }
  int64_t v1 = v10 + 4;
  if (v10 + 4 >= v7) {
    return 0;
  }
  unint64_t v11 = *(void *)(v5 + 8 * v1);
  if (v11)
  {
LABEL_24:
    unint64_t v6 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v1 << 6);
    goto LABEL_5;
  }
  int64_t v12 = v10 + 5;
  if (v12 >= v7) {
    return 0;
  }
  unint64_t v11 = *(void *)(v5 + 8 * v12);
  if (v11)
  {
    int64_t v1 = v12;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v1 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v1 >= v7) {
      return 0;
    }
    unint64_t v11 = *(void *)(v5 + 8 * v1);
    ++v12;
    if (v11) {
      goto LABEL_24;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall NavigationListState.clearAllSelections()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 8);
  if (!*(void *)(v2 + 16) && !*(void *)(*(void *)(v0 + 16) + 16)) {
    return 0;
  }
  uint64_t v31 = v2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v2 + 32);
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(v2 + 64);
  int64_t v32 = (unint64_t)(v3 + 63) >> 6;
  Swift::Bool result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (v5) {
    goto LABEL_9;
  }
LABEL_10:
  int64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
  }
  else
  {
    if (v10 >= v32) {
      goto LABEL_37;
    }
    unint64_t v11 = *(void *)(v31 + 8 * v10);
    ++v7;
    if (v11) {
      goto LABEL_23;
    }
    int64_t v7 = v10 + 1;
    if (v10 + 1 >= v32) {
      goto LABEL_37;
    }
    unint64_t v11 = *(void *)(v31 + 8 * v7);
    if (v11) {
      goto LABEL_23;
    }
    int64_t v7 = v10 + 2;
    if (v10 + 2 >= v32) {
      goto LABEL_37;
    }
    unint64_t v11 = *(void *)(v31 + 8 * v7);
    if (v11) {
      goto LABEL_23;
    }
    int64_t v12 = v10 + 3;
    if (v12 >= v32)
    {
LABEL_37:
      swift_release();
      uint64_t v30 = swift_bridgeObjectRetain();
      specialized Sequence.forEach(_:)(v30);
      swift_bridgeObjectRelease_n();
      *(void *)(v1 + 16) = MEMORY[0x1E4FBC868];
      return 1;
    }
    unint64_t v11 = *(void *)(v31 + 8 * v12);
    if (v11)
    {
      int64_t v7 = v12;
LABEL_23:
      unint64_t v5 = (v11 - 1) & v11;
      for (unint64_t i = __clz(__rbit64(v11)) + (v7 << 6); ; unint64_t i = v8 | (v7 << 6))
      {
        uint64_t v13 = (_OWORD *)(*(void *)(v2 + 48) + 48 * i);
        long long v14 = v13[1];
        v34[0] = *v13;
        v34[1] = v14;
        v34[2] = v13[2];
        type metadata accessor for Binding<AnyListSelection>(0, &lazy cache variable for type metadata for Binding<AnyListSelection>, (uint64_t)&type metadata for AnyListSelection, MEMORY[0x1E4F41638]);
        uint64_t v16 = v15;
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        double v17 = MEMORY[0x18C113DA0](&v33, v16);
        char v18 = (*(uint64_t (**)(void *))(*(void *)v33 + 128))(v17);
        dispatch thunk of AnyLocation.set(_:transaction:)();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        if ((v18 & 1) == 0) {
          break;
        }
        uint64_t v19 = *(unsigned int *)(v1 + 40);
        if (v19 != -1)
        {
          unint64_t v20 = ((v19 << 32) - 0x100000000) ^ ((unint64_t)((v19 << 32) - 0x100000000) >> 22);
          unint64_t v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
          unint64_t v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
          int v23 = (v22 >> 31) ^ v22;
          if (v19) {
            int v24 = v23;
          }
          else {
            int v24 = 1;
          }
          *(_DWORD *)(v1 + 40) = v24;
        }
        unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v34);
        if (v26)
        {
          unint64_t v27 = v25;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v29 = *(void *)(v1 + 24);
          *(void *)(v1 + 24) = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            specialized _NativeDictionary.copy()();
          }
          specialized _NativeDictionary._delete(at:)(v27, v29);
          *(void *)(v1 + 24) = v29;
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          Swift::Bool result = swift_bridgeObjectRelease();
          if (!v5) {
            goto LABEL_10;
          }
        }
        else
        {
          swift_release();
          swift_release();
          Swift::Bool result = swift_release();
          if (!v5) {
            goto LABEL_10;
          }
        }
LABEL_9:
        unint64_t v8 = __clz(__rbit64(v5));
        v5 &= v5 - 1;
      }
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      return 0;
    }
    while (1)
    {
      int64_t v7 = v12 + 1;
      if (__OFADD__(v12, 1)) {
        break;
      }
      if (v7 >= v32) {
        goto LABEL_37;
      }
      unint64_t v11 = *(void *)(v31 + 8 * v7);
      ++v12;
      if (v11) {
        goto LABEL_23;
      }
    }
  }
  __break(1u);
  return result;
}

void *NavigationListState.boundSelectionChange(metatypeID:selectionPopsSubsequentColumn:request:splitViewState:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  long long v7 = *(_OWORD *)(a3 + 104);
  long long v8 = *(_OWORD *)(a3 + 72);
  v72[1] = *(_OWORD *)(a3 + 88);
  _DWORD v72[2] = v7;
  v72[0] = v8;
  uint64_t v9 = *(void *)(v5 + 8);
  if (*(void *)(v9 + 16))
  {
    char v33 = *(unsigned char *)(a3 + 120);
    uint64_t v12 = *(void *)(a4 + 16);
    uint64_t v13 = *(void *)(a4 + 32);
    uint64_t v34 = *(void *)(a4 + 24);
    uint64_t v35 = *(void *)a4;
    uint64_t v14 = *(void *)(a4 + 40);
    uint64_t v36 = *(void *)(a4 + 48);
    uint64_t v37 = *(void *)(a4 + 56);
    uint64_t v38 = *(void *)(a4 + 8);
    unsigned __int16 v39 = *(_WORD *)(a4 + 64);
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v72);
    if (v16)
    {
      double v17 = (void *)(*(void *)(v9 + 56) + 40 * v15);
      if (v17[4] == a1)
      {
        uint64_t v20 = v17[1];
        uint64_t v19 = v17[2];
        *(void *)&__src[0] = *v17;
        *((void *)&__src[0] + 1) = v20;
        *(void *)&__src[1] = v19;
        type metadata accessor for Binding<AnyListSelection>(0, &lazy cache variable for type metadata for Binding<AnyListSelection>, (uint64_t)&type metadata for AnyListSelection, MEMORY[0x1E4F41638]);
        uint64_t v22 = v21;
        swift_retain();
        swift_retain();
        swift_retain();
        MEMORY[0x18C113DA0](&v47, v22);
        unsigned int v23 = NavigationListState.updateSelection(_:for:)(v47, v72);
        swift_release();
        if ((v23 & 1) == 0)
        {
          swift_release();
          swift_release();
          swift_release();
          unsigned int v24 = 0;
LABEL_24:
          _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v47);
          __src[0] = xmmword_18834FC50;
          LOBYTE(__src[1]) = 2;
          outlined init with take of NavigationState.UpdateResult((long long *)&v47, (_OWORD *)((char *)&__src[1] + 8));
          *(void *)((char *)&__src[17] + 4) = v24;
          return memcpy(a5, __src, 0x11CuLL);
        }
        if (v12 == 1)
        {
          swift_release();
          swift_release();
          swift_release();
          if (a2) {
            goto LABEL_21;
          }
        }
        else
        {
          if (v13)
          {
            uint64_t v41 = 0;
            memset(v40, 0, sizeof(v40));
            char v42 = 4;
            outlined init with take of NavigationListState.Selection?((uint64_t)v72 + 8, (uint64_t)v73, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
            outlined init with take of NavigationListState.Selection?((uint64_t)v73, (uint64_t)v74, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
            if (v75 >= 3u || v75 == 6) {
              char v26 = 3;
            }
            else {
              char v26 = v75;
            }
            outlined init with take of NavigationUpdateEvent.Action((uint64_t)v40, (uint64_t)&v43);
            char v46 = v26;
            outlined init with copy of NavigationUpdateEvent((uint64_t)&v43, (uint64_t)__src);
            uint64_t v27 = swift_allocObject();
            *(void *)(v27 + 16) = v13;
            *(void *)(v27 + 24) = v14;
            long long v28 = __src[1];
            *(_OWORD *)(v27 + 32) = __src[0];
            *(_OWORD *)(v27 + 48) = v28;
            *(_OWORD *)(v27 + 64) = __src[2];
            *(_OWORD *)(v27 + 74) = *(_OWORD *)((char *)&__src[2] + 10);
            outlined copy of AppIntentExecutor?(v13);
            outlined copy of AppIntentExecutor?(v13);
            outlined consume of NavigationSplitViewState?(v35, v38, v12, v34, v13, v14, v36, v37, v39, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
            static Update.enqueueAction(_:)();
            swift_release();
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v13);
            outlined destroy of NavigationUpdateEvent((uint64_t)&v43);
            swift_release();
            swift_release();
            swift_release();
            outlined consume of NavigationSplitViewState?(v35, v38, v12, v34, v13, v14, v36, v37, v39, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
            _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v47);
            goto LABEL_19;
          }
          outlined copy of Binding<NavigationSplitViewColumn>?(v38, v12);
          outlined copy of AppIntentExecutor?(0);
          outlined copy of Binding<NavigationSplitViewColumn>?(v36, v37);
          swift_release();
          swift_release();
          swift_release();
          outlined consume of NavigationSplitViewState?(v35, v38, v12, v34, 0, v14, v36, v37, v39, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
          if (a2)
          {
LABEL_21:
            outlined init with take of NavigationListState.Selection?((uint64_t)v72 + 8, (uint64_t)v40, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
            outlined init with take of NavigationListState.Selection?((uint64_t)v40, (uint64_t)&v43, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key);
            if (v44 == 6 || v44 - 2 < 4) {
              goto LABEL_23;
            }
            if (v44)
            {
              uint64_t v32 = 2;
            }
            else
            {
              uint64_t v32 = 1;
              if (v45 != 3) {
                uint64_t v32 = 2;
              }
            }
            long long v48 = 0u;
            long long v49 = 0u;
            long long v50 = 0u;
            uint64_t v47 = (v23 >> 8) & 1;
            uint64_t v51 = 0;
            char v52 = 20;
            uint64_t v53 = v43;
            uint64_t v54 = v44;
            uint64_t v55 = v45;
            uint64_t v56 = 0;
            uint64_t v57 = 0;
            uint64_t v58 = 0;
            char v59 = v33;
            uint64_t v60 = 0;
            uint64_t v61 = v43;
            uint64_t v62 = v32;
            uint64_t v63 = v45;
            long long v64 = 0u;
            long long v65 = 0u;
            long long v66 = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            uint64_t v69 = 0;
            char v70 = -1;
            destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v47, v29, v30, v31);
LABEL_19:
            __src[0] = xmmword_18834FC50;
            LOBYTE(__src[1]) = 2;
            outlined init with take of NavigationState.UpdateResult((long long *)&v47, (_OWORD *)((char *)&__src[1] + 8));
            *(void *)((char *)&__src[17] + 4) = 1;
            return memcpy(a5, __src, 0x11CuLL);
          }
        }
LABEL_23:
        unsigned int v24 = 1;
        goto LABEL_24;
      }
    }
  }
  _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)&v47);
  __src[0] = xmmword_18834FC50;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult((long long *)&v47, (_OWORD *)((char *)&__src[1] + 8));
  *(void *)((char *)&__src[17] + 4) = 0;
  return memcpy(a5, __src, 0x11CuLL);
}

void *NavigationListState.presentValue(_:activeBinding:selectionPopsSubsequentColumn:request:splitViewState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, char a5@<W4>, long long *a6@<X5>, void *a7@<X8>)
{
  uint64_t v8 = v7;
  long long v10 = a6[7];
  long long v106 = a6[6];
  long long v107 = v10;
  long long v108 = a6[8];
  uint64_t v109 = *((void *)a6 + 18);
  long long v11 = a6[3];
  long long v103 = a6[2];
  long long v104 = v11;
  long long v12 = a6[5];
  *(_OWORD *)int v105 = a6[4];
  *(_OWORD *)&v105[16] = v12;
  long long v13 = a6[1];
  long long v101 = *a6;
  long long v102 = v13;
  uint64_t v14 = *(void *)&v105[16];
  unsigned __int8 v15 = v105[24];
  if (BYTE8(v108) != 6)
  {
    __dst = a7;
    long long v91 = *(_OWORD *)&v105[8];
    uint64_t v92 = *(void *)&v105[24];
    uint64_t v93 = v106;
    char v94 = BYTE8(v106);
    uint64_t v95 = v107;
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&__src[0] = *(void *)(v8 + 16);
    char v33 = *(void **)&__src[0];
    *(void *)(v8 + 16) = 0x8000000000000000;
    unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v91);
    uint64_t v36 = v33[2];
    BOOL v37 = (v34 & 1) == 0;
    uint64_t v38 = v36 + v37;
    if (__OFADD__(v36, v37))
    {
      __break(1u);
    }
    else
    {
      char v39 = v34;
      if (v33[3] >= v38)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          char v33 = *(void **)&__src[0];
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, isUniquelyReferenced_nonNull_native);
        char v33 = *(void **)&__src[0];
        unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v91);
        if ((v39 & 1) != (v41 & 1))
        {
          Swift::Bool result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t v35 = v40;
      }
      *(void *)(v8 + 16) = v33;
      swift_bridgeObjectRelease();
      char v42 = *(void **)(v8 + 16);
      swift_bridgeObjectRetain();
      if ((v39 & 1) == 0) {
        specialized _NativeDictionary._insert(at:key:value:)(v35, &v91, MEMORY[0x1E4FBC860], v42);
      }
      uint64_t v8 = v42[7];
      swift_bridgeObjectRelease();
      char v33 = *(void **)(v8 + 8 * v35);
      char v43 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v8 + 8 * v35) = v33;
      if (v43) {
        goto LABEL_16;
      }
    }
    char v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v33[2] + 1, 1, v33);
    *(void *)(v8 + 8 * v35) = v33;
LABEL_16:
    unint64_t v45 = v33[2];
    unint64_t v44 = v33[3];
    if (v45 >= v44 >> 1)
    {
      char v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v44 > 1), v45 + 1, 1, v33);
      *(void *)(v8 + 8 * v35) = v33;
    }
    void v33[2] = v45 + 1;
    char v46 = &v33[3 * v45];
    v46[4] = a2;
    v46[5] = a3;
    *((unsigned char *)v46 + 48) = a4 & 1;
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v63);
    __src[0] = xmmword_18834FC50;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult((long long *)v63, (_OWORD *)((char *)&__src[1] + 8));
    *(void *)((char *)&__src[17] + 4) = 0;
    return memcpy(__dst, __src, 0x11CuLL);
  }
  long long v96 = *(_OWORD *)&v105[8];
  uint64_t v97 = *(void *)&v105[24];
  uint64_t v60 = v106;
  uint64_t v98 = v106;
  char v99 = BYTE8(v106);
  uint64_t v100 = v107;
  specialized Dictionary.subscript.getter((uint64_t)&v96, *(void *)(v8 + 8), (uint64_t)v82);
  uint64_t v17 = outlined init with take of NavigationListState.Selection?((uint64_t)v82, (uint64_t)&v83, &lazy cache variable for type metadata for NavigationListState.Selection?, (uint64_t)&type metadata for NavigationListState.Selection);
  uint64_t v21 = v84;
  if (!v84) {
    goto LABEL_5;
  }
  __dst = a7;
  uint64_t v22 = v83;
  long long v59 = v85;
  uint64_t v23 = v86;
  if (v23 == (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(v17))
  {
    uint64_t v57 = v23;
    uint64_t v88 = v22;
    uint64_t v87 = v59;
    *(void *)&__src[0] = v22;
    *((void *)&__src[0] + 1) = v21;
    *(void *)&__src[1] = v59;
    type metadata accessor for Binding<AnyListSelection>(0, &lazy cache variable for type metadata for Binding<AnyListSelection>, (uint64_t)&type metadata for AnyListSelection, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v62);
    uint64_t v47 = v62;
    if (((*(uint64_t (**)(uint64_t))(*(void *)v62 + 112))(a1) & 1) == 0)
    {
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v88);
      swift_release();
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v87);
      swift_release();
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v63);
      __src[0] = xmmword_18834FC50;
      LOBYTE(__src[1]) = 2;
      outlined init with take of NavigationState.UpdateResult((long long *)v63, (_OWORD *)((char *)&__src[1] + 8));
      *(void *)((char *)&__src[17] + 4) = 0;
      return memcpy(a7, __src, 0x11CuLL);
    }
    (*(void (**)(uint64_t))(*(void *)v47 + 136))(a1);
    uint64_t v48 = swift_retain();
    char v49 = NavigationListState.updateSelection(_:for:)(v48, &v96);
    swift_release();
    if (v49)
    {
      uint64_t v51 = swift_allocObject();
      *(void *)(v51 + 16) = v22;
      *(void *)(v51 + 24) = v21;
      *(_OWORD *)(v51 + 32) = v59;
      *(void *)(v51 + 48) = v57;
      *(void *)(v51 + 56) = v47;
      swift_retain();
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v88);
      swift_retain();
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v87);
      static Update.enqueueAction(_:)();
      swift_release();
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v88);
      swift_release();
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v87);
      swift_release();
      unsigned int v50 = 1;
      if ((a5 & 1) != 0 && v15 != 6 && v15 - 2 >= 4)
      {
        if (v15)
        {
          uint64_t v56 = 2;
          uint64_t v55 = v60;
        }
        else
        {
          uint64_t v55 = v60;
          uint64_t v56 = 1;
          if (v60 != 3) {
            uint64_t v56 = 2;
          }
        }
        *(void *)uint64_t v63 = 1;
        memset(&v63[8], 0, 56);
        char v64 = 20;
        uint64_t v65 = v14;
        uint64_t v66 = v15;
        uint64_t v67 = v55;
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        uint64_t v70 = 0;
        char v71 = BYTE8(v107);
        *(void *)&long long v72 = 0;
        *((void *)&v72 + 1) = v14;
        *(void *)&long long v73 = v56;
        *((void *)&v73 + 1) = v55;
        long long v74 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        uint64_t v79 = 0;
        char v80 = -1;
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v63, v52, v53, v54);
        __src[0] = xmmword_18834FC50;
        LOBYTE(__src[1]) = 2;
        outlined init with take of NavigationState.UpdateResult((long long *)v63, (_OWORD *)((char *)&__src[1] + 8));
        *(void *)((char *)&__src[17] + 4) = 1;
        return memcpy(__dst, __src, 0x11CuLL);
      }
    }
    else
    {
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v88);
      swift_release();
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v87);
      swift_release();
      unsigned int v50 = 0;
    }
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v63);
    __src[0] = xmmword_18834FC50;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult((long long *)v63, (_OWORD *)((char *)&__src[1] + 8));
    *(void *)((char *)&__src[17] + 4) = v50;
    return memcpy(__dst, __src, 0x11CuLL);
  }
  uint64_t v90 = v22;
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v90);
  swift_release();
  uint64_t v89 = v59;
  uint64_t v17 = outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v89);
LABEL_5:
  if (v15 == 6)
  {
    *(void *)&__src[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(v17);
    type metadata accessor for Any.Type();
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v26 = v25;
    lazy protocol witness table accessor for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError();
    swift_allocError();
    *(void *)uint64_t v27 = v24;
    *(void *)(v27 + 8) = v26;
    *(void *)(v27 + 16) = 0;
    *(void *)(v27 + 24) = 0;
    *(unsigned char *)(v27 + 32) = 1;
    return (void *)swift_willThrow();
  }
  else
  {
    *(_OWORD *)uint64_t v63 = v101;
    *(_OWORD *)&v63[16] = v102;
    *(_OWORD *)&v63[32] = v103;
    *(_OWORD *)&v63[48] = v104;
    char v64 = v105[0];
    uint64_t v65 = v14;
    uint64_t v66 = v15;
    uint64_t v67 = v60;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    uint64_t v70 = 0;
    char v71 = BYTE8(v107);
    long long v72 = 0u;
    long long v73 = 0u;
    *(void *)&long long v74 = 0;
    *((void *)&v74 + 1) = 0x1FFFFFFFELL;
    long long v75 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    uint64_t v79 = 0;
    char v80 = -1;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v63, v18, v19, v20);
    __src[0] = xmmword_18834FC50;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult((long long *)v63, (_OWORD *)((char *)&__src[1] + 8));
    *(void *)((char *)&__src[17] + 4) = 0;
    memcpy(a7, __src, 0x11CuLL);
    return (void *)outlined retain of NavigationRequest.ListRequest((uint64_t)&v101);
  }
}

uint64_t specialized closure #1 in NavigationListState.presentValue(_:activeBinding:selectionPopsSubsequentColumn:request:splitViewState:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  swift_retain();
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v2);
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  swift_release();
  return outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v2);
}

uint64_t sub_1881F763C()
{
  swift_release();
  if (*(unsigned __int8 *)(v0 + 88) - 1 <= 2) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  }

  return swift_deallocObject();
}

uint64_t outlined retain of NavigationRequest.ListRequest(uint64_t a1)
{
  return a1;
}

uint64_t sub_1881F76D8()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in NavigationListState.presentValue(_:activeBinding:selectionPopsSubsequentColumn:request:splitViewState:)()
{
  return specialized closure #1 in NavigationListState.presentValue(_:activeBinding:selectionPopsSubsequentColumn:request:splitViewState:)(v0 + 16);
}

uint64_t initializeWithCopy for NavigationListState.Selection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for NavigationListState.Selection(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for NavigationListState.Selection(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for NavigationListState.Selection()
{
  return &type metadata for NavigationListState.Selection;
}

uint64_t UIKitDatePicker._resolvedUIKitDatePicker()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  type metadata accessor for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(0, &lazy cache variable for type metadata for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v42 - v6;
  type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v54 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>();
  uint64_t v52 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v53 = (uint64_t)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v55 = (uint64_t)&v42 - v13;
  uint64_t v14 = type metadata accessor for UIKitDatePicker(0);
  uint64_t v15 = v14 - 8;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>, MEMORY[0x1E4F40578]);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v42 - v19;
  uint64_t v21 = type metadata accessor for UIKitDatePickerRepresentable(0);
  uint64_t v22 = (int *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI28DatePickerStyleConfigurationVWOcTm_0(v1, (uint64_t)v24, type metadata accessor for DatePickerStyleConfiguration);
  specialized Environment.wrappedValue.getter((uint64_t)&v24[v22[7]]);
  specialized Environment.wrappedValue.getter((uint64_t)&v24[v22[8]]);
  specialized Environment.wrappedValue.getter((uint64_t)&v24[v22[9]]);
  uint64_t v25 = *(void *)(v1 + *(int *)(v15 + 28));
  *(void *)&v24[v22[10]] = v25;
  _s7SwiftUI28DatePickerStyleConfigurationVWOcTm_0(v2, (uint64_t)v17, type metadata accessor for UIKitDatePicker);
  if (v25 != 3)
  {
    _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_1((uint64_t)v17, type metadata accessor for UIKitDatePicker);
LABEL_7:
    uint64_t v40 = *(int *)(v5 + 40);
    _s7SwiftUI28DatePickerStyleConfigurationVWOcTm_0((uint64_t)v24, (uint64_t)v7, type metadata accessor for UIKitDatePickerRepresentable);
    v7[v40] = 2;
    outlined init with copy of LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>((uint64_t)v7, (uint64_t)v20);
    type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    outlined destroy of LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>((uint64_t)v7);
    goto LABEL_8;
  }
  uint64_t v26 = *(void *)&v17[*(int *)(type metadata accessor for DatePickerStyleConfiguration(0) + 32)];
  if (one-time initialization token for hourAndMinute != -1) {
    swift_once();
  }
  uint64_t v27 = static DatePickerComponents.hourAndMinute;
  _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_1((uint64_t)v17, type metadata accessor for UIKitDatePicker);
  if (v26 == v27) {
    goto LABEL_7;
  }
  uint64_t v28 = *(int *)(v5 + 40);
  _s7SwiftUI28DatePickerStyleConfigurationVWOcTm_0((uint64_t)v24, (uint64_t)v7, type metadata accessor for UIKitDatePickerRepresentable);
  v7[v28] = 2;
  uint64_t v29 = v54;
  outlined init with copy of LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>((uint64_t)v7, v54);
  outlined destroy of LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>((uint64_t)v7);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v50 = v56;
  uint64_t v51 = a1;
  uint64_t v30 = v58;
  char v31 = v59;
  uint64_t v32 = v60;
  char v33 = v61;
  uint64_t v34 = v62;
  int v48 = v63;
  int v49 = v57;
  uint64_t v47 = v64;
  int v46 = v65;
  uint64_t v45 = v66;
  int v44 = v67;
  uint64_t v43 = v68;
  uint64_t v42 = v69;
  uint64_t v35 = v53;
  _s7SwiftUI28DatePickerStyleConfigurationVWOcTm_0(v29, v53, (uint64_t (*)(void))type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>);
  uint64_t v36 = v35 + *(int *)(v52 + 36);
  *(void *)uint64_t v36 = v50;
  *(unsigned char *)(v36 + 8) = v49;
  *(void *)(v36 + 16) = v30;
  *(unsigned char *)(v36 + 24) = v31;
  *(void *)(v36 + 32) = v32;
  *(unsigned char *)(v36 + 40) = v33;
  *(void *)(v36 + 48) = v34;
  a1 = v51;
  *(unsigned char *)(v36 + 56) = v48;
  *(void *)(v36 + 64) = v47;
  *(unsigned char *)(v36 + 72) = v46;
  *(void *)(v36 + 80) = v45;
  *(unsigned char *)(v36 + 88) = v44;
  uint64_t v37 = v42;
  *(void *)(v36 + 96) = v43;
  *(void *)(v36 + 104) = v37;
  _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_1(v29, (uint64_t (*)(void))type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>);
  uint64_t v38 = v35;
  uint64_t v39 = v55;
  outlined init with take of ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>(v38, v55);
  _s7SwiftUI28DatePickerStyleConfigurationVWOcTm_0(v39, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>);
  type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>.Storage, MEMORY[0x1E4F40568]);
  swift_storeEnumTagMultiPayload();
  _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_1(v39, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>);
LABEL_8:
  outlined init with take of _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>((uint64_t)v20, a1);
  return _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_1((uint64_t)v24, type metadata accessor for UIKitDatePickerRepresentable);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance UIKitDatePicker()
{
  type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>();
  type metadata accessor for StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>();
  lazy protocol witness table accessor for type ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v0 = static ModifiedContent<>._viewListCount(inputs:)();
  if ((v1 & 1) == 0)
  {
    type metadata accessor for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(0, &lazy cache variable for type metadata for ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>, (uint64_t)&type metadata for ResolvedLabeledContent, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Content, UIKitDatePickerRepresentable>();
    lazy protocol witness table accessor for type ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>();
    BOOL v2 = v0 != static ModifiedContent<>._viewListCount(inputs:)();
    if ((v3 | v2)) {
      return 0;
    }
  }
  return v0;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance GraphicalDatePickersFillWidth()
{
  if (static StyleContextAcceptsPredicate.evaluate(inputs:)()) {
    char v0 = 1;
  }
  else {
    char v0 = static StyleContextAcceptsPredicate.evaluate(inputs:)();
  }
  return v0 & 1;
}

uint64_t UIKitDatePickerRepresentable.Coordinator.dateChanged(_:)(void *a1)
{
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v42 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v37 - v6;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v40 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v39 = (char *)&v37 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v38 = (char *)&v37 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v37 - v16;
  double v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v37 - v20;
  id v41 = a1;
  id v22 = objc_msgSend(a1, sel_date, v19);
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v43 = v1;
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_configuration;
  swift_beginAccess();
  uint64_t v24 = type metadata accessor for DatePickerStyleConfiguration(0);
  outlined init with copy of Date?(v23 + *(int *)(v24 + 24), (uint64_t)v7);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v25(v7, 1, v8) == 1)
  {
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_1((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v17, v7, v8);
    lazy protocol witness table accessor for type Date and conformance Date();
    if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
      uint64_t v26 = v21;
    }
    else {
      uint64_t v26 = v17;
    }
    uint64_t v27 = v38;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v38, v26, v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 40))(v21, v27, v8);
  }
  uint64_t v28 = v42;
  outlined init with copy of Date?(v23 + *(int *)(v24 + 28), v42);
  if (v25((char *)v28, 1, v8) == 1)
  {
    id v29 = (id)_s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_1(v28, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  }
  else
  {
    uint64_t v30 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v39, v28, v8);
    lazy protocol witness table accessor for type Date and conformance Date();
    if (dispatch thunk of static Comparable.< infix(_:_:)()) {
      char v31 = v21;
    }
    else {
      char v31 = v30;
    }
    uint64_t v32 = v40;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v40, v31, v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v30, v8);
    id v29 = (id)(*(uint64_t (**)(char *, char *, uint64_t))(v9 + 40))(v21, v32, v8);
  }
  uint64_t v33 = v43;
  if (*(void *)(v43
                 + OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_style) == 2)
  {
    id v29 = objc_msgSend(v41, sel_window);
    if (v29)
    {

      id v29 = objc_msgSend(v41, sel_layoutIfNeeded);
    }
  }
  MEMORY[0x1F4188790](v29);
  *(&v37 - 2) = v33;
  *(&v37 - 1) = (uint64_t)v21;
  MEMORY[0x1F4188790](v34);
  *(&v37 - 2) = (uint64_t)partial apply for closure #1 in UIKitDatePickerRepresentable.Coordinator.dateChanged(_:);
  *(&v37 - 1) = v35;
  static Update.dispatchImmediately<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v21, v8);
}

uint64_t UIKitDatePickerRepresentable.Coordinator.__ivar_destroyer()
{
  return _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_1(v0+ OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_configuration, type metadata accessor for DatePickerStyleConfiguration);
}

id UIKitDatePickerRepresentable.Coordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitDatePickerRepresentable.Coordinator(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for UIKitDatePickerRepresentable.Coordinator()
{
  return type metadata accessor for UIKitDatePickerRepresentable.Coordinator(0);
}

uint64_t type metadata accessor for UIKitDatePickerRepresentable.Coordinator(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitDatePickerRepresentable.Coordinator);
}

uint64_t type metadata completion function for UIKitDatePickerRepresentable.Coordinator()
{
  uint64_t result = type metadata accessor for DatePickerStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t destroy for UIKitDatePicker(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v10 = a1 + *(int *)(v9 + 24);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v11(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v12 = a1 + *(int *)(v9 + 28);
  if (!v11(v12, 1, v6)) {
    v8(v12, v6);
  }
  uint64_t v13 = a1 + a2[6];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  }
  else
  {
    swift_release();
  }
  uint64_t v15 = a1 + a2[7];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = type metadata accessor for Calendar();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  }
  else
  {
    swift_release();
  }
  uint64_t v17 = a1 + a2[8];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = type metadata accessor for TimeZone();
    double v19 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);
    return v19(v17, v18);
  }
  else
  {
    return swift_release();
  }
}

void *initializeWithCopy for UIKitDatePicker(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_retain();
  swift_retain();
  v12(v8, v9, v10);
  uint64_t v13 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v14 = v13[6];
  uint64_t v36 = a1;
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = &a2[v14];
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v17(&a2[v14], 1, v10))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v12(v15, v16, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  uint64_t v19 = v13[7];
  uint64_t v20 = (char *)v36 + v19;
  uint64_t v21 = &a2[v19];
  if (v17(&a2[v19], 1, v10))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v12(v20, v21, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
  }
  *(void *)((char *)v36 + v13[8]) = *(void *)&a2[v13[8]];
  uint64_t v23 = a3[6];
  *(void *)((char *)v36 + a3[5]) = *(void *)&a2[a3[5]];
  uint64_t v24 = (void *)((char *)v36 + v23);
  uint64_t v25 = &a2[v23];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = type metadata accessor for Locale();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
  }
  else
  {
    *uint64_t v24 = *(void *)v25;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v27 = a3[7];
  uint64_t v28 = (void *)((char *)v36 + v27);
  id v29 = &a2[v27];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v30 = type metadata accessor for Calendar();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
  }
  else
  {
    *uint64_t v28 = *(void *)v29;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v31 = a3[8];
  uint64_t v32 = (void *)((char *)v36 + v31);
  uint64_t v33 = &a2[v31];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v34 = type metadata accessor for TimeZone();
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
  }
  else
  {
    void *v32 = *(void *)v33;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  return v36;
}

char *assignWithCopy for UIKitDatePicker(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_retain();
  swift_release();
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v43 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v43(v7, v8, v9);
  uint64_t v45 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v11 = v45[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(&a1[v11], 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v13, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
LABEL_6:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v43(v12, v13, v9);
LABEL_7:
  uint64_t v18 = v45[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = v14(&a1[v18], 1, v9);
  int v22 = v14(v20, 1, v9);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v19, v20, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v19, v9);
LABEL_12:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  v43(v19, v20, v9);
LABEL_13:
  *(void *)&a1[v45[8]] = *(void *)&a2[v45[8]];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  if (a1 != a2)
  {
    uint64_t v24 = a3[6];
    uint64_t v25 = &a1[v24];
    uint64_t v26 = &a2[v24];
    uint64_t v27 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27A78];
    uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_1((uint64_t)&a1[v24], (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v27, v28);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v29 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v25, v26, v29);
    }
    else
    {
      *(void *)uint64_t v25 = *(void *)v26;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = a3[7];
    uint64_t v31 = &a1[v30];
    uint64_t v32 = &a2[v30];
    uint64_t v33 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27CA0];
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_1((uint64_t)&a1[v30], (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v33, v34);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v35 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16))(v31, v32, v35);
    }
    else
    {
      *(void *)uint64_t v31 = *(void *)v32;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v36 = a3[8];
    uint64_t v37 = &a1[v36];
    uint64_t v38 = &a2[v36];
    uint64_t v39 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27D68];
    uint64_t v40 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_1((uint64_t)&a1[v36], (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v39, v40);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v41 = type metadata accessor for TimeZone();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v41 - 8) + 16))(v37, v38, v41);
    }
    else
    {
      *(void *)uint64_t v37 = *(void *)v38;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void *initializeWithTake for UIKitDatePicker(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  uint64_t v13 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v14 = v13[6];
  uint64_t v42 = a1;
  int v15 = (char *)a1 + v14;
  int v16 = &a2[v14];
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v17(&a2[v14], 1, v10))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v12(v15, v16, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  uint64_t v19 = v13[7];
  uint64_t v20 = (char *)v42 + v19;
  int v21 = &a2[v19];
  if (v17(&a2[v19], 1, v10))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v12(v20, v21, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
  }
  *(void *)((char *)v42 + v13[8]) = *(void *)&a2[v13[8]];
  uint64_t v23 = a3[6];
  *(void *)((char *)v42 + a3[5]) = *(void *)&a2[a3[5]];
  uint64_t v24 = (char *)v42 + v23;
  uint64_t v25 = &a2[v23];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  uint64_t v27 = v26;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v28 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v24, v25, v28);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v24, v25, *(void *)(*(void *)(v27 - 8) + 64));
  }
  uint64_t v29 = a3[7];
  uint64_t v30 = (char *)v42 + v29;
  uint64_t v31 = &a2[v29];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
  uint64_t v33 = v32;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v34 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v30, v31, v34);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v30, v31, *(void *)(*(void *)(v33 - 8) + 64));
  }
  uint64_t v35 = a3[8];
  uint64_t v36 = (char *)v42 + v35;
  uint64_t v37 = &a2[v35];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
  uint64_t v39 = v38;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v40 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v36, v37, v40);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v36, v37, *(void *)(*(void *)(v39 - 8) + 64));
  }
  return v42;
}

char *assignWithTake for UIKitDatePicker(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_release();
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  int v49 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v49(v7, v8, v9);
  uint64_t v51 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v11 = v51[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(&a1[v11], 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
LABEL_6:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v49(v12, v13, v9);
LABEL_7:
  uint64_t v18 = v51[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  int v21 = v14(&a1[v18], 1, v9);
  int v22 = v14(v20, 1, v9);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v20, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v19, v9);
LABEL_12:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  v49(v19, v20, v9);
LABEL_13:
  *(void *)&a1[v51[8]] = *(void *)&a2[v51[8]];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  if (a1 != a2)
  {
    uint64_t v24 = a3[6];
    uint64_t v25 = &a1[v24];
    uint64_t v26 = &a2[v24];
    uint64_t v27 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27A78];
    uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_1((uint64_t)&a1[v24], (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, v27, v28);
    uint64_t v30 = v29;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v31 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v25, v26, v31);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
    }
    uint64_t v32 = a3[7];
    uint64_t v33 = &a1[v32];
    uint64_t v34 = &a2[v32];
    uint64_t v35 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27CA0];
    uint64_t v36 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_1((uint64_t)&a1[v32], (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, v35, v36);
    uint64_t v38 = v37;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v39 = type metadata accessor for Calendar();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v33, v34, v39);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
    }
    uint64_t v40 = a3[8];
    uint64_t v41 = &a1[v40];
    uint64_t v42 = &a2[v40];
    uint64_t v43 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27D68];
    int v44 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
    _s7SwiftUI11EnvironmentV7ContentOy10Foundation6LocaleV_GWOhTm_1((uint64_t)&a1[v40], (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, v43, v44);
    uint64_t v46 = v45;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v47 = type metadata accessor for TimeZone();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(v41, v42, v47);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v41, v42, *(void *)(*(void *)(v46 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitDatePicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1881FA284);
}

uint64_t sub_1881FA284(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Environment<Locale>, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4E0]);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[6];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Environment<Calendar>, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4E0]);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4E0]);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[8];

  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for UIKitDatePicker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1881FA4C0);
}

uint64_t sub_1881FA4C0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Environment<Locale>, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4E0]);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[6];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Environment<Calendar>, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4E0]);
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[7];
    goto LABEL_7;
  }
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4E0]);
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[8];

  return v19(v21, a2, a2, v20);
}

uint64_t type metadata accessor for UIKitDatePicker(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitDatePicker);
}

void type metadata completion function for UIKitDatePicker()
{
  type metadata accessor for DatePickerStyleConfiguration(319);
  if (v0 <= 0x3F)
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
    if (v1 <= 0x3F)
    {
      _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(319, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F3F4D8]);
      if (v2 <= 0x3F)
      {
        _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(319, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F3F4D8]);
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in UIKitDatePicker()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for UIKitDatePickerRepresentable(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitDatePickerRepresentable);
}

void type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>)
  {
    type metadata accessor for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(255, &lazy cache variable for type metadata for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>();
    type metadata accessor for StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>);
    }
  }
}

void type metadata accessor for StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>)
  {
    lazy protocol witness table accessor for type GraphicalDatePickersFillWidth and conformance GraphicalDatePickersFillWidth();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GraphicalDatePickersFillWidth and conformance GraphicalDatePickersFillWidth()
{
  unint64_t result = lazy protocol witness table cache variable for type GraphicalDatePickersFillWidth and conformance GraphicalDatePickersFillWidth;
  if (!lazy protocol witness table cache variable for type GraphicalDatePickersFillWidth and conformance GraphicalDatePickersFillWidth)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GraphicalDatePickersFillWidth and conformance GraphicalDatePickersFillWidth);
  }
  return result;
}

id UIKitDatePickerRepresentable.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v36 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(a2 + 40);
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, v8, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0]();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v34 = *(void (**)(char *, uint64_t))(v16 + 8);
  v34(v18, v15);
  objc_msgSend(a1, sel_setDate_, isa);

  outlined init with copy of Date?(v3 + *(int *)(v6 + 24), (uint64_t)v14);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  Class v21 = 0;
  if (v20(v14, 1, v15) != 1)
  {
    Class v21 = Date._bridgeToObjectiveC()().super.isa;
    v34(v14, v15);
  }
  objc_msgSend(a1, sel_setMinimumDate_, v21);

  outlined init with copy of Date?(v3 + *(int *)(v6 + 28), (uint64_t)v11);
  uint64_t v22 = v6;
  if (v20(v11, 1, v15) == 1)
  {
    Class v23 = 0;
  }
  else
  {
    Class v23 = Date._bridgeToObjectiveC()().super.isa;
    v34(v11, v15);
  }
  uint64_t v25 = v35;
  uint64_t v24 = (uint64_t)v36;
  objc_msgSend(a1, sel_setMaximumDate_, v23);

  uint64_t v26 = type metadata accessor for UIKitDatePickerRepresentable(0);
  Class v27 = Locale._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setLocale_, v27);

  Class v28 = Calendar._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setCalendar_, v28);

  Class v29 = TimeZone._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_setTimeZone_, v29);

  uint64_t v30 = *(void *)(v3 + *(int *)(v26 + 32));
  objc_msgSend(a1, sel_setPreferredDatePickerStyle_, v30);
  v37[0] = *(void *)(v3 + *(int *)(v22 + 32));
  objc_msgSend(a1, sel_setDatePickerMode_, specialized UIDatePickerMode.init(_:)(v37));
  uint64_t v31 = OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_style;
  *(void *)(v25
            + OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_style) = v30;
  _s7SwiftUI28DatePickerStyleConfigurationVWOcTm_0(v3, v24, type metadata accessor for DatePickerStyleConfiguration);
  uint64_t v32 = v25
      + OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_configuration;
  swift_beginAccess();
  outlined assign with take of DatePickerStyleConfiguration(v24, v32);
  id result = (id)swift_endAccess();
  if (*(void *)(v25 + v31) == 2)
  {
    id result = objc_msgSend(a1, sel_window);
    if (result)
    {

      return objc_msgSend(a1, sel_layoutIfNeeded);
    }
  }
  return result;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitDatePickerRepresentable(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB16B0]), sel_init);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_dateChanged_, 4096);
  return v2;
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitDatePickerRepresentable@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for DatePickerStyleConfiguration(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI28DatePickerStyleConfigurationVWOcTm_0(v2, (uint64_t)v7, type metadata accessor for DatePickerStyleConfiguration);
  uint64_t v8 = *(void *)(v2 + *(int *)(a1 + 32));
  uint64_t v9 = (objc_class *)type metadata accessor for UIKitDatePickerRepresentable.Coordinator(0);
  uint64_t v10 = (char *)objc_allocWithZone(v9);
  _s7SwiftUI28DatePickerStyleConfigurationVWOcTm_0((uint64_t)v7, (uint64_t)&v10[OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_configuration], type metadata accessor for DatePickerStyleConfiguration);
  *(void *)&v10[OBJC_IVAR____TtCV7SwiftUIP33_796E60B90620AEB0B6972B2798FF4F4228UIKitDatePickerRepresentable11Coordinator_style] = v8;
  v13.receiver = v10;
  v13.super_class = v9;
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  uint64_t result = _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_1((uint64_t)v7, type metadata accessor for DatePickerStyleConfiguration);
  *a2 = v11;
  return result;
}

uint64_t protocol witness for UIViewRepresentable._overrideSizeThatFits(_:in:uiView:) in conformance UIKitDatePickerRepresentable(void *a1, int a2, id a3)
{
  uint64_t result = (uint64_t)objc_msgSend(a3, sel_datePickerStyle);
  if ((result & 0xFFFFFFFFFFFFFFFELL) == 2)
  {
    uint64_t v6 = result;
    uint64_t result = (uint64_t)objc_msgSend(a3, sel_sizeThatFits_, *MEMORY[0x1E4FB2C68], *(double *)(MEMORY[0x1E4FB2C68] + 8));
    a1[1] = v8;
    if (v6 == 2) {
      *a1 = v7;
    }
  }
  return result;
}

id protocol witness for UIViewRepresentable._overrideLayoutTraits(_:for:) in conformance UIKitDatePickerRepresentable(int a1, id a2)
{
  id result = objc_msgSend(a2, sel_datePickerStyle);
  if (result == (id)3)
  {
    _LayoutTraits.Dimension.min.setter();
    return (id)_LayoutTraits.Dimension.max.setter();
  }
  return result;
}

uint64_t outlined init with copy of LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(0, &lazy cache variable for type metadata for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>();
    uint64_t v7 = v6;
    type metadata accessor for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(255, &lazy cache variable for type metadata for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t outlined destroy of LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(uint64_t a1)
{
  type metadata accessor for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(0, &lazy cache variable for type metadata for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>, MEMORY[0x1E4F40578]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s7SwiftUI28DatePickerStyleConfigurationVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI28DatePickerStyleConfigurationVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable> and conformance <> LabeledContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier);
}

unint64_t lazy protocol witness table accessor for type LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable> and conformance <> LabeledContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(255, &lazy cache variable for type metadata for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&type metadata for DatePickerStyleConfiguration.Label, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabeledContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>)
  {
    lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label();
    unint64_t v0 = type metadata accessor for StaticSourceWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>);
    }
  }
}

void type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Content, UIKitDatePickerRepresentable>()
{
  if (!lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Content, UIKitDatePickerRepresentable>)
  {
    type metadata accessor for UIKitDatePickerRepresentable(255);
    lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content();
    unint64_t v0 = type metadata accessor for StaticSourceWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticSourceWriter<LabeledContentStyleConfiguration.Content, UIKitDatePickerRepresentable>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>(255, &lazy cache variable for type metadata for ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>>, (uint64_t (*)(uint64_t))type metadata accessor for StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>, (uint64_t)&type metadata for ResolvedLabeledContent, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ResolvedLabeledContent, StaticSourceWriter<LabeledContentStyleConfiguration.Label, DatePickerStyleConfiguration.Label>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in UIKitDatePickerRepresentable.Coordinator.dateChanged(_:)()
{
  return closure #1 in UIKitDatePickerRepresentable.Coordinator.dateChanged(_:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void *type metadata accessor for GraphicalDatePickersFillWidth()
{
  return &unk_1ED455DD8;
}

uint64_t *initializeBufferWithCopyOfBuffer for UIKitDatePickerRepresentable(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a1;
    a1[1] = a2[1];
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
    uint64_t v8 = *(int *)(v7 + 32);
    uint64_t v9 = (char *)v6 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(void *)(v11 - 8);
    objc_super v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_retain();
    swift_retain();
    v13(v9, v10, v11);
    uint64_t v37 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
    uint64_t v14 = v37[6];
    uint64_t v15 = (char *)v6 + v14;
    uint64_t v16 = (char *)a2 + v14;
    uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v17((char *)a2 + v14, 1, v11))
    {
      _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
    uint64_t v19 = v37[7];
    uint64_t v20 = (char *)v6 + v19;
    Class v21 = (char *)a2 + v19;
    if (v17((char *)a2 + v19, 1, v11))
    {
      _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
      memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
    }
    else
    {
      v13(v20, v21, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v20, 0, 1, v11);
    }
    *(uint64_t *)((char *)v6 + v37[8]) = *(uint64_t *)((char *)a2 + v37[8]);
    uint64_t v23 = a3[5];
    uint64_t v24 = (char *)v6 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
    uint64_t v27 = a3[6];
    Class v28 = (char *)v6 + v27;
    Class v29 = (char *)a2 + v27;
    uint64_t v30 = type metadata accessor for Calendar();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
    uint64_t v31 = a3[7];
    uint64_t v32 = (char *)v6 + v31;
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v34 = type metadata accessor for TimeZone();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16))(v32, v33, v34);
    *(uint64_t *)((char *)v6 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  }
  return v6;
}

uint64_t destroy for UIKitDatePickerRepresentable(uint64_t a1, int *a2)
{
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v5 = a1 + *(int *)(v4 + 32);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v10 = a1 + *(int *)(v9 + 24);
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v11(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v12 = a1 + *(int *)(v9 + 28);
  if (!v11(v12, 1, v6)) {
    v8(v12, v6);
  }
  uint64_t v13 = a1 + a2[5];
  uint64_t v14 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = a1 + a2[6];
  uint64_t v16 = type metadata accessor for Calendar();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);
  uint64_t v17 = a1 + a2[7];
  uint64_t v18 = type metadata accessor for TimeZone();
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8);

  return v19(v17, v18);
}

void *initializeWithCopy for UIKitDatePickerRepresentable(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  swift_retain();
  swift_retain();
  v12(v8, v9, v10);
  uint64_t v35 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v13 = v35[6];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = &a2[v13];
  uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v16(&a2[v13], 1, v10))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  uint64_t v18 = v35[7];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = &a2[v18];
  if (v16(&a2[v18], 1, v10))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    v12(v19, v20, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v19, 0, 1, v10);
  }
  *(void *)((char *)a1 + v35[8]) = *(void *)&a2[v35[8]];
  uint64_t v22 = a3[5];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  uint64_t v26 = a3[6];
  uint64_t v27 = (char *)a1 + v26;
  Class v28 = &a2[v26];
  uint64_t v29 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 16))(v27, v28, v29);
  uint64_t v30 = a3[7];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = &a2[v30];
  uint64_t v33 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16))(v31, v32, v33);
  *(void *)((char *)a1 + a3[8]) = *(void *)&a2[a3[8]];
  return a1;
}

char *assignWithCopy for UIKitDatePickerRepresentable(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  *((void *)a1 + 1) = a2[1];
  swift_retain();
  swift_release();
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v37(v7, v8, v9);
  uint64_t v39 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v11 = v39[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(&a1[v11], 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v13, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
LABEL_6:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v37(v12, v13, v9);
LABEL_7:
  uint64_t v18 = v39[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = (char *)a2 + v18;
  int v21 = v14(&a1[v18], 1, v9);
  int v22 = v14(v20, 1, v9);
  if (!v21)
  {
    if (!v22)
    {
      v37(v19, v20, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v19, v9);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v19, v20, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
LABEL_13:
  *(void *)&a1[v39[8]] = *(void *)((char *)a2 + v39[8]);
  uint64_t v24 = a3[5];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 24))(v25, v26, v27);
  uint64_t v28 = a3[6];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 24))(v29, v30, v31);
  uint64_t v32 = a3[7];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 24))(v33, v34, v35);
  *(void *)&a1[a3[8]] = *(void *)((char *)a2 + a3[8]);
  return a1;
}

void *initializeWithTake for UIKitDatePickerRepresentable(void *a1, char *a2, int *a3)
{
  uint64_t v5 = *((void *)a2 + 1);
  *a1 = *(void *)a2;
  a1[1] = v5;
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = &a2[v7];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v12(v8, v9, v10);
  uint64_t v35 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v13 = v35[6];
  uint64_t v14 = (char *)a1 + v13;
  int v15 = &a2[v13];
  int v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v16(&a2[v13], 1, v10))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  uint64_t v18 = v35[7];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = &a2[v18];
  if (v16(&a2[v18], 1, v10))
  {
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    v12(v19, v20, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v19, 0, 1, v10);
  }
  *(void *)((char *)a1 + v35[8]) = *(void *)&a2[v35[8]];
  uint64_t v22 = a3[5];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
  uint64_t v26 = a3[6];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = &a2[v26];
  uint64_t v29 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
  uint64_t v30 = a3[7];
  uint64_t v31 = (char *)a1 + v30;
  uint64_t v32 = &a2[v30];
  uint64_t v33 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v31, v32, v33);
  *(void *)((char *)a1 + a3[8]) = *(void *)&a2[a3[8]];
  return a1;
}

char *assignWithTake for UIKitDatePickerRepresentable(char *a1, void *a2, int *a3)
{
  *(void *)a1 = *a2;
  swift_release();
  *((void *)a1 + 1) = a2[1];
  swift_release();
  _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<Date>, MEMORY[0x1E4F27928], MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v37(v7, v8, v9);
  uint64_t v39 = (int *)type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v11 = v39[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(&a1[v11], 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v13, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
LABEL_6:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v37(v12, v13, v9);
LABEL_7:
  uint64_t v18 = v39[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = (char *)a2 + v18;
  int v21 = v14(&a1[v18], 1, v9);
  int v22 = v14(v20, 1, v9);
  if (!v21)
  {
    if (!v22)
    {
      v37(v19, v20, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v19, v9);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    _s7SwiftUI7BindingVy10Foundation4DateVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v19, v20, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v19, 0, 1, v9);
LABEL_13:
  *(void *)&a1[v39[8]] = *(void *)((char *)a2 + v39[8]);
  uint64_t v24 = a3[5];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 40))(v25, v26, v27);
  uint64_t v28 = a3[6];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for Calendar();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 40))(v29, v30, v31);
  uint64_t v32 = a3[7];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for TimeZone();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 40))(v33, v34, v35);
  *(void *)&a1[a3[8]] = *(void *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitDatePickerRepresentable(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1881FCEFC);
}

uint64_t sub_1881FCEFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[6];
    goto LABEL_7;
  }
  uint64_t v16 = type metadata accessor for TimeZone();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
  uint64_t v18 = v16;
  uint64_t v19 = a1 + a3[7];

  return v17(v19, a2, v18);
}

uint64_t storeEnumTagSinglePayload for UIKitDatePickerRepresentable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1881FD0A8);
}

uint64_t sub_1881FD0A8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for DatePickerStyleConfiguration(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_8:
    return v11(v12, a2, a2, v10);
  }
  uint64_t v13 = type metadata accessor for Locale();
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a4[5];
LABEL_7:
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_8;
  }
  uint64_t v16 = type metadata accessor for Calendar();
  if (*(_DWORD *)(*(void *)(v16 - 8) + 84) == a3)
  {
    uint64_t v10 = v16;
    uint64_t v14 = *(void *)(v16 - 8);
    uint64_t v15 = a4[6];
    goto LABEL_7;
  }
  uint64_t v18 = type metadata accessor for TimeZone();
  uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v20 = v18;
  uint64_t v21 = a1 + a4[7];

  return v19(v21, a2, a2, v20);
}

uint64_t type metadata completion function for UIKitDatePickerRepresentable()
{
  uint64_t result = type metadata accessor for DatePickerStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Locale();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Calendar();
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for TimeZone();
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    lazy protocol witness table accessor for type LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable> and conformance <> LabeledContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier>, StaticIf<GraphicalDatePickersFillWidth, _FlexFrameLayout, EmptyModifier>>, LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<DatePickerStyleConfiguration.Label, UIKitDatePickerRepresentable>, LabelsHiddenModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized UIDatePickerMode.init(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (one-time initialization token for hourAndMinute != -1) {
    swift_once();
  }
  if (v1 == static DatePickerComponents.hourAndMinute) {
    return 0;
  }
  if (one-time initialization token for date != -1) {
    swift_once();
  }
  uint64_t v3 = static DatePickerComponents.date;
  if (v1 == static DatePickerComponents.date) {
    return 1;
  }
  if ((static DatePickerComponents.date & ~static DatePickerComponents.hourAndMinute) == 0) {
    uint64_t v3 = 0;
  }
  if (v1 == (v3 | static DatePickerComponents.hourAndMinute)) {
    return 2;
  }
  _StringGuts.grow(_:)(25);
  v4._object = (void *)0x8000000188343110;
  v4._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined assign with take of DatePickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DatePickerStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ButtonDefaultRenderingModeModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

BOOL protocol witness for static Feature.isEnabled.getter in conformance ShouldRenderAsTemplate()
{
  return (isLinkedOnOrAfter(_:)() & 1) == 0;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ShouldRenderAsTemplate()
{
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ShouldRenderAsTemplate()
{
  return &protocol witness table for ShouldRenderAsTemplate;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonDefaultRenderingModeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1881FD924@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.defaultRenderingMode.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1881FD968()
{
  return EnvironmentValues.defaultRenderingMode.setter();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<ButtonDefaultRenderingModeModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonDefaultRenderingModeModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ButtonDefaultRenderingModeModifier>);
    lazy protocol witness table accessor for type _ViewModifier_Content<ButtonDefaultRenderingModeModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>>)
  {
    type metadata accessor for _ViewModifier_Content<ButtonDefaultRenderingModeModifier>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonDefaultRenderingModeModifier>, _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<ButtonDefaultRenderingModeModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<ButtonDefaultRenderingModeModifier>)
  {
    lazy protocol witness table accessor for type ButtonDefaultRenderingModeModifier and conformance ButtonDefaultRenderingModeModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<ButtonDefaultRenderingModeModifier>);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.TemplateRenderingMode>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ButtonDefaultRenderingModeModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

__n128 DocumentGroup.body.getter@<Q0>(uint64_t a1@<X8>)
{
  outlined init with copy of DocumentGroupConfiguration(v1, (uint64_t)v6);
  long long v3 = v6[5];
  *(_OWORD *)(a1 + 64) = v6[4];
  *(_OWORD *)(a1 + 80) = v3;
  *(void *)(a1 + 96) = v7;
  long long v4 = v6[1];
  *(_OWORD *)a1 = v6[0];
  *(_OWORD *)(a1 + 16) = v4;
  __n128 result = (__n128)v6[3];
  *(_OWORD *)(a1 + 32) = v6[2];
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t associated type witness table accessor for Scene.Body : Scene in DocumentGroup<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v6 = *(_OWORD *)(a1 + 44);
  type metadata accessor for DocumentGroup.DocumentContentScene();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<UISceneAdaptorConfiguration>(0, &lazy cache variable for type metadata for _GraphValue<DocumentGroupConfiguration>, (uint64_t)&type metadata for DocumentGroupConfiguration, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  PreferencesOutputs.init()();
  uint64_t v7 = *(void *)((char *)&v6 + 4);
  int v8 = HIDWORD(v6);
  outlined retain of [Text.Modifier]((uint64_t)&v7);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t closure #1 in static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)(uint64_t a1)
{
  _OWORD v5[2] = type metadata accessor for DocumentGroup.DocumentContentScene();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_25, (uint64_t)v5, (uint64_t)&type metadata for DocumentGroupConfiguration, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5[5];
}

uint64_t implicit closure #1 in static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)(int a1, _OWORD *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  long long v2 = a2[1];
  v10[0] = *a2;
  v10[1] = v2;
  _OWORD v10[2] = a2[2];
  LODWORD(v10[0]) = a1;
  DWORD1(v10[0]) = _GraphInputs.environment.getter();
  uint64_t List = type metadata accessor for DocumentGroup.MakeList();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for _GraphValue<UISceneAdaptorConfiguration>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<SceneList>, (uint64_t)&type metadata for SceneList, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v7, List, MEMORY[0x1E4FBC248], v3, MEMORY[0x1E4FBC278], v4);
  return v6;
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance DocumentGroup<A, B>.DocumentContentScene@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)(a1, a2);
}

uint64_t DocumentGroup.MakeList.value.getter()
{
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of DocumentGroupConfiguration(Value, (uint64_t)__src);
  IdentifiedDocumentGroupConfiguration.init(_:)((uint64_t)__src, (uint64_t)v13);
  outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v13, (uint64_t)__src);
  LOBYTE(__src[16]) = 2;
  uint64_t v1 = v14;
  uint64_t v2 = v15;
  char v3 = v16;
  outlined copy of SceneID(v14, v15, v16);
  DisplayList.Version.init(forUpdate:)();
  uint64_t v4 = v11[2];
  _DiscreteSymbolEffectModifier.EffectEnvironment.environment.getter(v11);
  uint64_t v5 = v11[0];
  uint64_t v6 = v11[1];
  uint64_t v7 = MEMORY[0x1E4FBC860];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  __src[17] = v1;
  _OWORD __src[18] = v2;
  LOBYTE(__src[19]) = v3;
  __src[20] = v4;
  __src[21] = v5;
  __src[22] = v6;
  LOBYTE(__src[23]) = 0;
  memset(&__src[24], 0, 17);
  __src[27] = 0;
  __src[28] = 0;
  LOBYTE(__src[29]) = 1;
  __src[30] = 0;
  __src[31] = 0;
  LOBYTE(__src[32]) = 1;
  *(_WORD *)((char *)&__src[32] + 1) = 0;
  __src[33] = v7;
  __src[34] = v8;
  type metadata accessor for _GraphValue<UISceneAdaptorConfiguration>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SceneList.Item>, (uint64_t)&type metadata for SceneList.Item, MEMORY[0x1E4FBBE00]);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18834BB80;
  memcpy((void *)(v9 + 32), __src, 0x118uLL);
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v13);
  return v9;
}

uint64_t protocol witness for Rule.value.getter in conformance DocumentGroup<A, B>.MakeList@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DocumentGroup.MakeList.value.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for DocumentGroup()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **sub_1881FE1D8()
{
  return &protocol witness table for DocumentGroup<A, B>.DocumentContentScene;
}

uint64_t type metadata accessor for DocumentGroup.DocumentContentScene()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)(uint64_t a1)
{
  return closure #1 in static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)(a1);
}

uint64_t partial apply for implicit closure #1 in static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)()
{
  return implicit closure #1 in static DocumentGroup.DocumentContentScene._makeScene(scene:inputs:)(*(_DWORD *)(v0 + 40), *(_OWORD **)(v0 + 48));
}

uint64_t type metadata accessor for DocumentGroup.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in DocumentGroup<A, B>.MakeList()
{
  return swift_getWitnessTable();
}

uint64_t assignWithTake for ButtonStyleAdaptorMenuStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  LOBYTE(v8) = *(unsigned char *)(v8 + 8);
  uint64_t v10 = *(void *)v7;
  uint64_t v11 = *(unsigned __int8 *)(v7 + 8);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 8) = v8;
  outlined consume of Environment<Bool?>.Content(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonStyleAdaptorMenuStyle(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1881FE440);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((v6 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 > 1) {
    return (v17 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for ButtonStyleAdaptorMenuStyle(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0xFE)
            {
              unint64_t v21 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xFE)
              {
                *(unsigned char *)(v21 + 8) = 0;
                *(void *)unint64_t v21 = a2 - 255;
              }
              else
              {
                *(unsigned char *)(v21 + 8) = -(char)a2;
              }
            }
            else
            {
              uint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x1881FE66CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for CustomButtonMenuStyle()
{
  return &type metadata for CustomButtonMenuStyle;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in ButtonStyleAdaptorMenuStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for MenuStyle.makeBody(configuration:) in conformance CustomButtonMenuStyle@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  outlined copy of AppIntentExecutor?(v3);

  return outlined copy of AppIntentExecutor?(v4);
}

uint64_t CustomButtonMenuStyleWriter.styleBody(configuration:)(_OWORD *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unsigned int v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  char v11 = (char *)v15 - v10;
  long long v12 = a1[1];
  v15[0] = *a1;
  v15[1] = v12;
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(v3 + 24))(v15, v4, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  unsigned int v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedCustomButtonMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in CustomButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for CustomButtonMenuStyleWriter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for CustomButtonMenuStyleWriter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1881FECDCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

ValueMetadata *type metadata accessor for ResolvedCustomButtonMenu()
{
  return &type metadata for ResolvedCustomButtonMenu;
}

uint64_t sub_1881FED6C()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedCustomButtonMenu()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic> and conformance CustomButtonMenuStyleWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic> and conformance CustomButtonMenuStyleWriter<A>;
  if (!lazy protocol witness table cache variable for type CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic> and conformance CustomButtonMenuStyleWriter<A>)
  {
    type metadata accessor for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic> and conformance CustomButtonMenuStyleWriter<A>);
  }
  return result;
}

void type metadata accessor for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>()
{
  if (!lazy cache variable for type metadata for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>)
  {
    lazy protocol witness table accessor for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic();
    unint64_t v0 = type metadata accessor for CustomButtonMenuStyleWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CustomButtonMenuStyleWriter<ButtonMenuStyle.Automatic>);
    }
  }
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in CustomButtonMenuStyleWriter<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1881FEF4C()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t UIViewRepresentableContext.transaction.getter()
{
  specialized ReferenceFileDocumentConfiguration.document.getter();

  return swift_retain();
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitButtonAdaptor<A>(void *a1@<X8>)
{
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitButtonAdaptor<A>(uint64_t *a1@<X1>, void *a2@<X8>)
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UIKitButtonAdaptor<A>()
{
  return static UIViewRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance UIKitButtonAdaptor<A>()
{
}

void UIViewRepresentable.body.getter()
{
}

uint64_t UIViewRepresentable._resetUIView(_:coordinator:destroy:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

double UIViewRepresentable._identifiedViewTree(in:)@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 160) = 2;
  return result;
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitSearchBarAdaptor(void *a1@<X8>)
{
  *a1 = qword_1ED42EC68;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitSearchBarAdaptor(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitSearchBarAdaptor()
{
}

double protocol witness for UIViewRepresentable._identifiedViewTree(in:) in conformance UIKitWheelPicker<A>@<D0>(uint64_t a1@<X8>)
{
  return UIViewRepresentable._identifiedViewTree(in:)(a1);
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitWheelPicker<A>(uint64_t *a1@<X1>, void *a2@<X8>)
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UIKitWheelPicker<A>()
{
  return static UIViewRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance UIKitWheelPicker<A>()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitStepper(void *a1@<X8>)
{
  *a1 = qword_1ED42EBA0;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitStepper(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitStepper()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitPagingView(void *a1@<X8>)
{
  *a1 = qword_1ED42EA10;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitPagingView(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitPagingView()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance SystemSegmentedControl(void *a1@<X8>)
{
  *a1 = qword_1ED42EC90;
}

void protocol witness for static View._makeView(view:inputs:) in conformance SystemSegmentedControl(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance SystemSegmentedControl()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitPasteControl(void *a1@<X8>)
{
  *a1 = qword_1ED42EBC8;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitPasteControl(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitPasteControl()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance PlatformTextFieldAdaptor(void *a1@<X8>)
{
  *a1 = qword_1ED42EB50;
}

void protocol witness for static View._makeView(view:inputs:) in conformance PlatformTextFieldAdaptor(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance PlatformTextFieldAdaptor()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance TextViewAdaptor(void *a1@<X8>)
{
  *a1 = qword_1ED42EB00;
}

void protocol witness for static View._makeView(view:inputs:) in conformance TextViewAdaptor(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance TextViewAdaptor()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitCalendarViewRepresentable(void *a1@<X8>)
{
  *a1 = qword_1ED42EA38;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitCalendarViewRepresentable(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitCalendarViewRepresentable()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitSegmentedControlAdaptor(void *a1@<X8>)
{
  *a1 = qword_1ED42ECE0;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitSegmentedControlAdaptor(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitSegmentedControlAdaptor()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance LinearUIKitProgressView.Base(void *a1@<X8>)
{
  *a1 = qword_1ED42EA88;
}

void protocol witness for static View._makeView(view:inputs:) in conformance LinearUIKitProgressView.Base(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance LinearUIKitProgressView.Base()
{
}

void protocol witness for View.body.getter in conformance CircularUIKitProgressView()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitRichTextEditor(void *a1@<X8>)
{
  *a1 = qword_1ED42EC18;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitRichTextEditor(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitRichTextEditor()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance BackButtonActionableBar.KeyboardBackdropView(void *a1@<X8>)
{
  *a1 = qword_1ED42ECB8;
}

void protocol witness for static View._makeView(view:inputs:) in conformance BackButtonActionableBar.KeyboardBackdropView(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance BackButtonActionableBar.KeyboardBackdropView()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitToolbarAdaptor(void *a1@<X8>)
{
  *a1 = qword_1ED42EC40;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitToolbarAdaptor(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitToolbarAdaptor()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitTextViewAdaptor(void *a1@<X8>)
{
  *a1 = qword_1ED42EB28;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitTextViewAdaptor(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitTextViewAdaptor()
{
}

uint64_t key path setter for EnvironmentValues.keyPressHandlers : EnvironmentValues()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_bridgeObjectRelease();
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitPageIndexView<A>(uint64_t *a1@<X1>, void *a2@<X8>)
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UIKitPageIndexView<A>()
{
  return static UIViewRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance UIKitPageIndexView<A>()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance KitRepresentable(void *a1@<X8>)
{
  *a1 = qword_1ED42EAD8;
}

void protocol witness for static View._makeView(view:inputs:) in conformance KitRepresentable(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance KitRepresentable()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance UIKitDatePickerRepresentable(void *a1@<X8>)
{
  *a1 = qword_1ED42EA60;
}

void protocol witness for static View._makeView(view:inputs:) in conformance UIKitDatePickerRepresentable(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance UIKitDatePickerRepresentable()
{
}

uint64_t key path getter for UIViewRepresentableContext.transaction : <A>UIViewRepresentableContext<A>@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for UIViewRepresentableContext();
  *a1 = specialized ReferenceFileDocumentConfiguration.document.getter();

  return swift_retain();
}

uint64_t key path setter for UIViewRepresentableContext.transaction : <A>UIViewRepresentableContext<A>()
{
  uint64_t v0 = swift_retain();
  return UIViewRepresentableContext.transaction.setter(v0);
}

uint64_t UIViewRepresentableContext.transaction.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t UIViewRepresentableContext.animate(changes:completion:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  swift_retain();
  uint64_t v8 = Transaction.animation.getter();
  uint64_t v9 = swift_release();
  if (v8)
  {
    swift_retain();
    char v10 = Transaction.disablesAnimations.getter();
    uint64_t v11 = swift_release();
    if ((v10 & 1) == 0)
    {
      MEMORY[0x1F4188790](v11);
      _OWORD v14[2] = a1;
      void v14[3] = a2;
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = a3;
      *(void *)(v13 + 24) = a4;
      outlined copy of AppIntentExecutor?((uint64_t)a3);
      specialized static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(v8, partial apply for thunk for @callee_guaranteed () -> (@error @owned Error), (uint64_t)v14, (uint64_t)_sSo6UIViewC7SwiftUIE7animate_7changes10completionyAC9AnimationV_yyXEyycSgtFZySb_SbtcfU_TA_0, v13);
      swift_release();
      return swift_release();
    }
    uint64_t v9 = swift_release();
  }
  uint64_t result = a1(v9);
  if (a3) {
    return a3(result);
  }
  return result;
}

uint64_t PlatformViewRepresentableAdaptor.resetViewProvider(_:coordinator:destroy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(a5 + 24) + 48))(a1, a2, a3, a4, *(void *)(a5 + 16));
}

uint64_t PlatformViewRepresentableAdaptor._identifiedViewTree(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 72))(a1, *(void *)(a2 + 16));
}

uint64_t protocol witness for PlatformViewRepresentable.resetViewProvider(_:coordinator:destroy:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PlatformViewRepresentableAdaptor.resetViewProvider(_:coordinator:destroy:)(*a1, a2, a3, a4, a5);
}

uint64_t protocol witness for PlatformViewRepresentable._identifiedViewTree(in:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2)
{
  return PlatformViewRepresentableAdaptor._identifiedViewTree(in:)(*a1, a2);
}

void protocol witness for View.body.getter in conformance Switch()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance BridgedColorPicker(void *a1@<X8>)
{
  *a1 = qword_1ED42EBF0;
}

void protocol witness for static View._makeView(view:inputs:) in conformance BridgedColorPicker(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance BridgedColorPicker()
{
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance SystemSlider(void *a1@<X8>)
{
  *a1 = qword_1ED42EB78;
}

void protocol witness for static View._makeView(view:inputs:) in conformance SystemSlider(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void protocol witness for View.body.getter in conformance SystemSlider()
{
}

uint64_t sub_18820DFC4()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_18820E00C()
{
  return 16;
}

__n128 sub_18820E018(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of UIViewRepresentable.makeUIView(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of UIViewRepresentable.updateUIView(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of UIViewRepresentable._resetUIView(_:coordinator:destroy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of static UIViewRepresentable.dismantleUIView(_:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of UIViewRepresentable.makeCoordinator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of UIViewRepresentable._identifiedViewTree(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of UIViewRepresentable.sizeThatFits(_:uiView:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 80))();
}

uint64_t dispatch thunk of UIViewRepresentable._overrideSizeThatFits(_:in:uiView:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 88))();
}

uint64_t dispatch thunk of UIViewRepresentable._overrideLayoutTraits(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 96))();
}

uint64_t dispatch thunk of static UIViewRepresentable._modifyBridgedViewInputs(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of static UIViewRepresentable._layoutOptions(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t initializeBufferWithCopyOfBuffer for UIViewRepresentableContext(uint64_t a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 33) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *(void *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v12 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    uint64_t v13 = a2[3];
    char v14 = *((unsigned char *)a2 + 32);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v12, v13, v14);
    *(void *)(a1 + 16) = v12;
    *(void *)(a1 + 24) = v13;
    *(unsigned char *)(a1 + 32) = v14;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16))((a1 + v6 + 33) & ~v6, ((unint64_t)a2 + v6 + 33) & ~v6, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t assignWithCopy for UIViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, v9);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 24))((*(unsigned __int8 *)(v11 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for UIViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((*(unsigned __int8 *)(v6 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for UIViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))((*(unsigned __int8 *)(v9 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIViewRepresentableContext(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 > v7)
  {
    uint64_t v10 = ((v8 + 33) & ~v8) + v9;
    char v11 = 8 * v10;
    if (v10 > 3) {
      goto LABEL_7;
    }
    unsigned int v14 = ((a2 - v7 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 >= 2)
    {
LABEL_7:
      int v12 = *((unsigned __int8 *)a1 + v10);
      if (!*((unsigned char *)a1 + v10)) {
        goto LABEL_23;
      }
LABEL_15:
      int v15 = (v12 - 1) << v11;
      if (v10 > 3) {
        int v15 = 0;
      }
      if (v10)
      {
        if (v10 > 3) {
          LODWORD(v10) = 4;
        }
        switch((int)v10)
        {
          case 2:
            LODWORD(v10) = *a1;
            break;
          case 3:
            LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v10) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v10) = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v17 = v7 + (v10 | v15);
      return (v17 + 1);
    }
  }
LABEL_23:
  if (v6 <= 0x7FFFFFFE)
  {
    uint64_t v16 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v16) = -1;
    }
    int v17 = v16 - 1;
    if (v17 < 0) {
      int v17 = -1;
    }
    return (v17 + 1);
  }
  int v18 = *(uint64_t (**)(unint64_t))(v5 + 48);

  return v18(((unint64_t)a1 + v8 + 33) & ~v8);
}

void storeEnumTagSinglePayload for UIViewRepresentableContext(_WORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v9 = 2147483646;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 33) & ~v8) + *(void *)(v6 + 64);
  if (a3 <= v9)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 - v9 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v12 = ~v9 + a2;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v10)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *a1 = v15;
          *((unsigned char *)a1 + 2) = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(unsigned char *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        *((unsigned char *)a1 + v10) = v13;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v10) = v13;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)((char *)a1 + v10) = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      *((unsigned char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)((char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x18820E988);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0x7FFFFFFE)
        {
          int v17 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
          v17(((unint64_t)a1 + v8 + 33) & ~v8, a2);
        }
        else
        {
          if (a2 > 0x7FFFFFFE)
          {
            uint64_t v16 = (a2 - 0x7FFFFFFF);
            *((void *)a1 + 2) = 0;
            *((void *)a1 + 3) = 0;
            *((unsigned char *)a1 + 32) = 0;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            uint64_t v16 = a2;
          }
          *(void *)a1 = v16;
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for PlatformViewRepresentableAdaptor(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PlatformViewRepresentableAdaptor(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x18820ED24);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    }
  }
}

uint64_t sub_18820F458@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.keyPressHandlers.getter();
  *a1 = result;
  return result;
}

uint64_t sub_18820F494()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<TextEditorTextView> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<TextEditorTextView> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<TextEditorTextView> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<TextEditorTextView>, (uint64_t (*)(uint64_t))type metadata accessor for TextEditorTextView, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<TextEditorTextView> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    }
  }
}

uint64_t _s7SwiftUI33AccessibilityPlatformViewModifierV04makecD9Transform6inputs13representable7outputsyAA01_E6InputsV_14AttributeGraph0M0VyAA0e4LeafE0VyxGGAA01_E7OutputsVztAA0dE13RepresentableRzlFZALyyAA0C10AttachmentVAAE4TreeOzcGyXEfu_TA_0()
{
  return implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)();
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    }
  }
}

uint64_t outlined destroy of RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    }
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPasteControl>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIPasteControl> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIPasteControl> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIPasteControl> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIPasteControl>, &lazy cache variable for type metadata for UIPasteControl);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIPasteControl> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPasteControl>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPasteControl>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<SystemSlider>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<SystemSlider>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSlider>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSlider>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UISlider> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISlider> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISlider> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISlider>, &lazy cache variable for type metadata for UISlider);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISlider> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSlider>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSlider>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<BridgedColorPicker>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIColorWell> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIColorWell> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIColorWell> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIColorWell>, &lazy cache variable for type metadata for UIColorWell);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIColorWell> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BridgedColorPicker>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UISegmentedControl> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISegmentedControl> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISegmentedControl> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISegmentedControl>, &lazy cache variable for type metadata for UISegmentedControl);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISegmentedControl> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<SystemSegmentedControl.UISegmentedControl> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<SystemSegmentedControl.UISegmentedControl> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<SystemSegmentedControl.UISegmentedControl> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<SystemSegmentedControl.UISegmentedControl>, (uint64_t (*)(uint64_t))type metadata accessor for SystemSegmentedControl.UISegmentedControl, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<SystemSegmentedControl.UISegmentedControl> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIDatePicker> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIDatePicker> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIDatePicker> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIDatePicker>, &lazy cache variable for type metadata for UIDatePicker);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIDatePicker> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<CustomizableDocumentViewController> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<CustomizableDocumentViewController> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<CustomizableDocumentViewController> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<CustomizableDocumentViewController>, (uint64_t (*)(uint64_t))type metadata accessor for CustomizableDocumentViewController, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<CustomizableDocumentViewController> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIKitToolbar> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKitToolbar> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKitToolbar> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKitToolbar>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitToolbar, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKitToolbar> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIViewController> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIViewController> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIViewController> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIViewController>, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIViewController> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    }
  }
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIProgressView> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIProgressView> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIProgressView> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIProgressView>, &lazy cache variable for type metadata for UIProgressView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIProgressView> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UICalendarView> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UICalendarView> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UICalendarView> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UICalendarView>, &lazy cache variable for type metadata for UICalendarView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UICalendarView> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIKitTabBarController> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKitTabBarController> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKitTabBarController> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKitTabBarController>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitTabBarController, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKitTabBarController> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>, type metadata accessor for UIKitAdaptableTabView, (uint64_t)&protocol witness table for UIKitAdaptableTabView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPagingView>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<PagingCollectionView> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<PagingCollectionView> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<PagingCollectionView> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<PagingCollectionView>, (uint64_t (*)(uint64_t))type metadata accessor for PagingCollectionView, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<PagingCollectionView> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPagingView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitStepper>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitStepper>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIStepper> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIStepper> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIStepper> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIStepper>, &lazy cache variable for type metadata for UIStepper);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIStepper> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitStepper>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIKBVisualEffectView> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKBVisualEffectView> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKBVisualEffectView> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKBVisualEffectView>, &lazy cache variable for type metadata for UIKBVisualEffectView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKBVisualEffectView> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UIKitSearchBar> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKitSearchBar> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKitSearchBar> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UIKitSearchBar>, (uint64_t (*)(uint64_t))type metadata accessor for UIKitSearchBar, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UIKitSearchBar> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UITextField> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UITextField> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UITextField> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UITextField>, &lazy cache variable for type metadata for UITextField);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UITextField> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<TextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<VerticalTextView> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<VerticalTextView> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<VerticalTextView> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<VerticalTextView>, (uint64_t (*)(uint64_t))type metadata accessor for VerticalTextView, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for RepresentablePreferredFocusableViewInput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<VerticalTextView> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<TextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    }
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<KitRepresentable>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    }
  }
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<KitRepresentable>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RepresentablePreferredFocusableViewInput<UISearchTextField> and conformance RepresentablePreferredFocusableViewInput<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISearchTextField> and conformance RepresentablePreferredFocusableViewInput<A>;
  if (!lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISearchTextField> and conformance RepresentablePreferredFocusableViewInput<A>)
  {
    type metadata accessor for RepresentablePreferredFocusableViewInput<UISearchTextField>(255, &lazy cache variable for type metadata for RepresentablePreferredFocusableViewInput<UISearchTextField>, (unint64_t *)&lazy cache variable for type metadata for UISearchTextField);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RepresentablePreferredFocusableViewInput<UISearchTextField> and conformance RepresentablePreferredFocusableViewInput<A>);
  }
  return result;
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>>()
{
  if (!lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewIdentifiedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    }
  }
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance StyledView()
{
  return static View.makeImplicitRoot(view:inputs:)();
}

void protocol witness for View.body.getter in conformance StyledView()
{
}

void protocol witness for static Rule.initialValue.getter in conformance SectionBody(unsigned char *a1@<X8>)
{
  *a1 = -1;
}

uint64_t protocol witness for Rule.value.getter in conformance SectionBody@<X0>(char *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v3 = *Value;
  uint64_t v4 = Value[1];
  if (!v4)
  {
    uint64_t result = outlined consume of Binding<NavigationSplitViewColumn>?(*Value, 0);
    goto LABEL_5;
  }
  outlined copy of Binding<NavigationSplitViewColumn>?(v3, v4);
  outlined copy of Binding<NavigationSplitViewColumn>?(v3, v4);
  type metadata accessor for _GraphValue<SectionContainer>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v7);
  swift_release();
  swift_release();
  uint64_t result = outlined consume of Binding<NavigationSplitViewColumn>?(v3, v4);
  if (v7)
  {
LABEL_5:
    char v6 = 0;
    goto LABEL_6;
  }
  char v6 = 1;
LABEL_6:
  *a1 = v6;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance SectionContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD020](a1, a2, a3, a4, a5, &protocol witness table for SectionContainer);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance SectionContainer()
{
}

ValueMetadata *type metadata accessor for SectionContainer()
{
  return &type metadata for SectionContainer;
}

_UNKNOWN **sub_18821413C()
{
  return &protocol witness table for StyledView;
}

_UNKNOWN **base witness table accessor for View in StyledView()
{
  return &protocol witness table for StyledView;
}

void *type metadata accessor for SectionBody()
{
  return &unk_1ED40F598;
}

uint64_t TupleTableRowContent.init(_:ofType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t TupleTableRowContent.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 24) - 8) + 16))(a2, v2);
}

uint64_t TupleTableRowContent.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 40))(v2, a1);
}

uint64_t (*TupleTableRowContent.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static TupleTableRowContent._makeRows(content:inputs:)@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int v8 = *a1;
  long long v9 = a2[7];
  long long v50 = a2[6];
  long long v51 = v9;
  long long v52 = a2[8];
  uint64_t v53 = *((void *)a2 + 18);
  long long v10 = a2[3];
  long long v46 = a2[2];
  long long v47 = v10;
  long long v11 = a2[5];
  long long v48 = a2[4];
  long long v49 = v11;
  long long v12 = a2[1];
  long long v44 = *a2;
  long long v45 = v12;
  lazy protocol witness table accessor for type TableRowDescriptor and conformance TableRowDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  *(_OWORD *)&v42[104] = v50;
  *(_OWORD *)&v42[120] = v51;
  *(_OWORD *)&v42[136] = v52;
  *(_OWORD *)&v42[40] = v46;
  *(_OWORD *)&v42[56] = v47;
  *(_OWORD *)&v42[72] = v48;
  *(_OWORD *)&v42[88] = v49;
  *(_OWORD *)&v42[8] = v44;
  uint64_t v13 = *(void *)v42;
  *(_OWORD *)&v42[24] = v45;
  *(_DWORD *)uint64_t v42 = v8;
  *(void *)&v42[152] = v53;
  *(void *)&long long v43 = 0;
  *((void *)&v43 + 1) = MEMORY[0x1E4FBC860];
  uint64_t v14 = *(void *)(v13 + 16);
  if (v14)
  {
    outlined retain of _TableRowInputs((uint64_t)&v44);
    int v15 = (long long *)(v13 + 40);
    do
    {
      long long v16 = *v15;
      int v15 = (long long *)((char *)v15 + 24);
      long long v39 = v16;
      *(void *)&long long v43 = AGTupleElementOffset();
      v41[0] = v16;
      uint64_t List = type metadata accessor for TupleTableRowContent.MakeList();
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v42, List, (uint64_t)&protocol witness table for TupleTableRowContent<A, B>.MakeList);
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    uint64_t v18 = *((void *)&v43 + 1);
  }
  else
  {
    outlined retain of _TableRowInputs((uint64_t)&v44);
    swift_bridgeObjectRelease();
    uint64_t v18 = MEMORY[0x1E4FBC860];
  }
  *(void *)&long long v39 = a3;
  int64_t v19 = *(void *)(v18 + 16);
  uint64_t v20 = MEMORY[0x1E4FBC860];
  if (v19)
  {
    uint64_t v37 = a4;
    uint64_t v38 = a5;
    uint64_t v40 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v19, 0);
    uint64_t v20 = v40;
    uint64_t v36 = v18;
    unint64_t v21 = (_DWORD *)(v18 + 40);
    do
    {
      int v22 = *v21;
      *(void *)&v41[0] = *((void *)v21 - 1);
      DWORD2(v41[0]) = v22;
      uint64_t v23 = PreferencesOutputs.subscript.getter();
      if ((v23 & 0x100000000) != 0) {
        __break(1u);
      }
      int v24 = v23;
      uint64_t v40 = v20;
      unint64_t v26 = *(void *)(v20 + 16);
      unint64_t v25 = *(void *)(v20 + 24);
      if (v26 >= v25 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v26 + 1, 1);
        uint64_t v20 = v40;
      }
      *(void *)(v20 + 16) = v26 + 1;
      *(_DWORD *)(v20 + 4 * v26 + 32) = v24;
      v21 += 4;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = PreferencesOutputs.init()();
  *(void *)&v41[0] = v20;
  MEMORY[0x1F4188790](v27);
  uint64_t v34 = type metadata accessor for TupleTableRowContent.MergeLists();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<TableRowList>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v41, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v33, v34, MEMORY[0x1E4FBC248], v28, MEMORY[0x1E4FBC278], v29);
  uint64_t v30 = swift_bridgeObjectRelease();
  *(void *)&v41[0] = *((void *)&v52 + 1);
  DWORD2(v41[0]) = v53;
  MEMORY[0x1F4188790](v30);
  LODWORD(v34) = v31;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  v41[8] = *(_OWORD *)&v42[128];
  v41[9] = *(_OWORD *)&v42[144];
  v41[10] = v43;
  v41[4] = *(_OWORD *)&v42[64];
  v41[5] = *(_OWORD *)&v42[80];
  v41[6] = *(_OWORD *)&v42[96];
  v41[7] = *(_OWORD *)&v42[112];
  v41[0] = *(_OWORD *)v42;
  v41[1] = *(_OWORD *)&v42[16];
  v41[2] = *(_OWORD *)&v42[32];
  v41[3] = *(_OWORD *)&v42[48];
  return outlined release of TupleTableRowContent<A, B>.MakeList((uint64_t)v41);
}

uint64_t type metadata accessor for TupleTableRowContent.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static TupleTableRowContent._tableRowCount(inputs:)(long long *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v1 = a1[7];
  long long v31 = a1[6];
  long long v32 = v1;
  long long v33 = a1[8];
  uint64_t v34 = *((void *)a1 + 18);
  long long v2 = a1[3];
  long long v27 = a1[2];
  long long v28 = v2;
  long long v3 = a1[5];
  long long v29 = a1[4];
  long long v30 = v3;
  long long v4 = a1[1];
  long long v25 = *a1;
  long long v26 = v4;
  lazy protocol witness table accessor for type TableRowDescriptor and conformance TableRowDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v5 = v13;
  long long v19 = v31;
  long long v20 = v32;
  long long v21 = v33;
  long long v15 = v27;
  long long v16 = v28;
  long long v17 = v29;
  long long v18 = v30;
  long long v13 = v25;
  long long v14 = v26;
  uint64_t v22 = v34;
  uint64_t v23 = 0;
  char v24 = 0;
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    outlined retain of _TableRowInputs((uint64_t)&v25);
    uint64_t v7 = type metadata accessor for TupleTableRowContent.CountRows();
    uint64_t v8 = 40;
    do
    {
      v11[0] = *(_OWORD *)(v5 + v8);
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)&v13, v7, (uint64_t)&protocol witness table for TupleTableRowContent<A, B>.CountRows);
      v8 += 24;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    uint64_t v9 = v23;
  }
  else
  {
    outlined retain of _TableRowInputs((uint64_t)&v25);
    swift_bridgeObjectRelease();
    uint64_t v9 = 0;
  }
  v11[6] = v19;
  v11[7] = v20;
  v11[8] = v21;
  uint64_t v12 = v22;
  _OWORD v11[2] = v15;
  void v11[3] = v16;
  void v11[4] = v17;
  void v11[5] = v18;
  v11[0] = v13;
  v11[1] = v14;
  outlined release of _TableRowInputs((uint64_t)v11);
  return v9;
}

uint64_t static TupleTableRowContent._containsOutlineSymbol(inputs:)(long long *a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v1 = a1[7];
  long long v31 = a1[6];
  long long v32 = v1;
  long long v33 = a1[8];
  uint64_t v34 = *((void *)a1 + 18);
  long long v2 = a1[3];
  long long v27 = a1[2];
  long long v28 = v2;
  long long v3 = a1[5];
  long long v29 = a1[4];
  long long v30 = v3;
  long long v4 = a1[1];
  long long v25 = *a1;
  long long v26 = v4;
  lazy protocol witness table accessor for type TableRowDescriptor and conformance TableRowDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v5 = v14;
  long long v20 = v31;
  long long v21 = v32;
  long long v22 = v33;
  uint64_t v23 = v34;
  long long v16 = v27;
  long long v17 = v28;
  long long v18 = v29;
  long long v19 = v30;
  long long v14 = v25;
  long long v15 = v26;
  char v24 = 0;
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
    outlined retain of _TableRowInputs((uint64_t)&v25);
LABEL_8:
    swift_bridgeObjectRelease();
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  outlined retain of _TableRowInputs((uint64_t)&v25);
  uint64_t v7 = type metadata accessor for TupleTableRowContent.CheckOutline();
  v12[0] = *(_OWORD *)(v5 + 40);
  TypeConformance<>.visitType<A>(visitor:)((uint64_t)&v14, v7, (uint64_t)&protocol witness table for TupleTableRowContent<A, B>.CheckOutline);
  if ((v24 & 1) == 0)
  {
    uint64_t v8 = 64;
    while (--v6)
    {
      uint64_t v9 = v8 + 24;
      v12[0] = *(_OWORD *)(v5 + v8);
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)&v14, v7, (uint64_t)&protocol witness table for TupleTableRowContent<A, B>.CheckOutline);
      uint64_t v8 = v9;
      if (v24) {
        goto LABEL_6;
      }
    }
    goto LABEL_8;
  }
LABEL_6:
  swift_bridgeObjectRelease();
  uint64_t v10 = 1;
LABEL_9:
  _OWORD v12[6] = v20;
  _OWORD v12[7] = v21;
  _OWORD v12[8] = v22;
  uint64_t v13 = v23;
  void v12[2] = v16;
  v12[3] = v17;
  v12[4] = v18;
  void v12[5] = v19;
  v12[0] = v14;
  v12[1] = v15;
  outlined release of _TableRowInputs((uint64_t)v12);
  return v10;
}

uint64_t TupleTableRowContent.MakeList.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  LODWORD(v19[0]) = *(_DWORD *)v4;
  type metadata accessor for TupleTableRowContent();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  long long v8 = *(_OWORD *)(v4 + 120);
  v19[6] = *(_OWORD *)(v4 + 104);
  v19[7] = v8;
  v19[8] = *(_OWORD *)(v4 + 136);
  uint64_t v20 = *(void *)(v4 + 152);
  long long v9 = *(_OWORD *)(v4 + 56);
  unint64_t v19[2] = *(_OWORD *)(v4 + 40);
  v19[3] = v9;
  long long v10 = *(_OWORD *)(v4 + 88);
  void v19[4] = *(_OWORD *)(v4 + 72);
  v19[5] = v10;
  long long v11 = *(_OWORD *)(v4 + 24);
  v19[0] = *(_OWORD *)(v4 + 8);
  v19[1] = v11;
  (*(void (**)(uint64_t *__return_ptr, char *, _OWORD *, uint64_t, uint64_t))(a4 + 48))(&v22, v21, v19, a3, a4);
  uint64_t v12 = v22;
  int v13 = v23;
  uint64_t v14 = *(void *)(v4 + 168);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, (char *)v14);
    uint64_t v14 = result;
  }
  unint64_t v17 = *(void *)(v14 + 16);
  unint64_t v16 = *(void *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v14);
    uint64_t v14 = result;
  }
  *(void *)(v14 + 16) = v17 + 1;
  unint64_t v18 = v14 + 16 * v17;
  *(void *)(v18 + 32) = v12;
  *(_DWORD *)(v18 + 40) = v13;
  *(void *)(v5 + 168) = v14;
  return result;
}

uint64_t protocol witness for TableRowTypeVisitor.visit<A>(type:) in conformance TupleTableRowContent<A, B>.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleTableRowContent.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

void TupleTableRowContent.CountRows.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(v4 + 160)) {
    goto LABEL_5;
  }
  long long v5 = *(_OWORD *)(v4 + 112);
  void v14[6] = *(_OWORD *)(v4 + 96);
  v14[7] = v5;
  v14[8] = *(_OWORD *)(v4 + 128);
  uint64_t v6 = *(void *)(v4 + 152);
  uint64_t v15 = *(void *)(v4 + 144);
  long long v7 = *(_OWORD *)(v4 + 48);
  _OWORD v14[2] = *(_OWORD *)(v4 + 32);
  void v14[3] = v7;
  long long v8 = *(_OWORD *)(v4 + 80);
  void v14[4] = *(_OWORD *)(v4 + 64);
  v14[5] = v8;
  long long v9 = *(_OWORD *)(v4 + 16);
  v14[0] = *(_OWORD *)v4;
  v14[1] = v9;
  uint64_t v10 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(a4 + 56))(v14, a3, a4);
  if (v11)
  {
LABEL_5:
    uint64_t v12 = 0;
    char v13 = 1;
    goto LABEL_6;
  }
  uint64_t v12 = v6 + v10;
  if (!__OFADD__(v6, v10))
  {
    char v13 = 0;
LABEL_6:
    *(void *)(v4 + 152) = v12;
    *(unsigned char *)(v4 + 160) = v13;
    return;
  }
  __break(1u);
}

void protocol witness for TableRowTypeVisitor.visit<A>(type:) in conformance TupleTableRowContent<A, B>.CountRows(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t TupleTableRowContent.CheckOutline.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(unsigned char *)(v4 + 152))
  {
    uint64_t result = 1;
  }
  else
  {
    long long v6 = *(_OWORD *)(v4 + 112);
    v10[6] = *(_OWORD *)(v4 + 96);
    v10[7] = v6;
    v10[8] = *(_OWORD *)(v4 + 128);
    uint64_t v11 = *(void *)(v4 + 144);
    long long v7 = *(_OWORD *)(v4 + 48);
    _OWORD v10[2] = *(_OWORD *)(v4 + 32);
    _OWORD v10[3] = v7;
    long long v8 = *(_OWORD *)(v4 + 80);
    v10[4] = *(_OWORD *)(v4 + 64);
    v10[5] = v8;
    long long v9 = *(_OWORD *)(v4 + 16);
    v10[0] = *(_OWORD *)v4;
    v10[1] = v9;
    uint64_t result = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(a4 + 64))(v10, a3, a4);
  }
  *(unsigned char *)(v4 + 152) = result & 1;
  return result;
}

uint64_t protocol witness for TableRowTypeVisitor.visit<A>(type:) in conformance TupleTableRowContent<A, B>.CheckOutline(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return TupleTableRowContent.CheckOutline.visit<A>(type:)(a1, a4, a2, a3);
}

uint64_t TupleTableRowContent.MergeLists.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v5 = 0;
    uint64_t v4 = v13;
    do
    {
      uint64_t Value = AGGraphGetValue();
      outlined init with copy of TableRowList(Value, (uint64_t)&v14);
      unint64_t v8 = *(void *)(v13 + 16);
      unint64_t v7 = *(void *)(v13 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      }
      ++v5;
      *(void *)(v13 + 16) = v8 + 1;
      uint64_t v9 = v13 + 40 * v8;
      long long v10 = v14;
      long long v11 = v15;
      *(void *)(v9 + 64) = v16;
      *(_OWORD *)(v9 + 32) = v10;
      *(_OWORD *)(v9 + 48) = v11;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
  }
  *((void *)&v15 + 1) = &type metadata for MergedTableRowGenerator;
  unint64_t v16 = &protocol witness table for MergedTableRowGenerator;
  *(void *)&long long v14 = v4;
  return outlined init with take of OptionalBinaryInteger(&v14, a2);
}

uint64_t protocol witness for Rule.value.getter in conformance TupleTableRowContent<A, B>.MergeLists@<X0>(uint64_t a1@<X8>)
{
  return TupleTableRowContent.MergeLists.value.getter(*v1, a1);
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance TupleTableRowContent<A, B>@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TupleTableRowContent._makeRows(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 32), a4);
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance TupleTableRowContent<A, B>(long long *a1)
{
  return static TupleTableRowContent._tableRowCount(inputs:)(a1);
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance TupleTableRowContent<A, B>(long long *a1)
{
  return static TupleTableRowContent._containsOutlineSymbol(inputs:)(a1);
}

uint64_t static Group<A>._makeRows(content:inputs:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = a2[7];
  long long v20 = a2[6];
  long long v21 = v6;
  long long v22 = a2[8];
  uint64_t v23 = *((void *)a2 + 18);
  long long v7 = a2[3];
  long long v16 = a2[2];
  long long v17 = v7;
  long long v8 = a2[5];
  long long v18 = a2[4];
  long long v19 = v8;
  long long v9 = a2[1];
  long long v14 = *a2;
  long long v15 = v9;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v11[6] = v20;
  v11[7] = v21;
  v11[8] = v22;
  uint64_t v12 = v23;
  _OWORD v11[2] = v16;
  void v11[3] = v17;
  void v11[4] = v18;
  void v11[5] = v19;
  v11[0] = v14;
  v11[1] = v15;
  return (*(uint64_t (**)(unsigned char *, _OWORD *, uint64_t, uint64_t))(a4 + 48))(v13, v11, a3, a4);
}

uint64_t static Group<A>._tableRowCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  void v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  _WORD v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  void v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  void v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_OWORD *))(a3 + 56))(v8);
}

uint64_t static Group<A>._containsOutlineSymbol(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  void v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  _WORD v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  void v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  void v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_OWORD *))(a3 + 64))(v8) & 1;
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance <A> Group<A>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeRows(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance <A> Group<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Group<A>._tableRowCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance <A> Group<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Group<A>._containsOutlineSymbol(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t type metadata accessor for TupleTableRowContent.MergeLists()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<TableRowList>()
{
  if (!lazy cache variable for type metadata for Attribute<TableRowList>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableRowList>);
    }
  }
}

uint64_t outlined release of TupleTableRowContent<A, B>.MakeList(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for TupleTableRowContent.CountRows()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TupleTableRowContent.CheckOutline()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for TupleTableRowContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TupleTableRowContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TupleTableRowContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x188215714);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for TupleTableRowContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for TupleTableRowContent.CheckOutline(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleTableRowContent.CheckOutline(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

uint64_t assignWithTake for TupleTableRowContent.CheckOutline(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleTableRowContent.CheckOutline(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 153)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleTableRowContent.CheckOutline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 152) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 153) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 153) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t initializeWithCopy for TupleTableRowContent.CountRows(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleTableRowContent.CountRows(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  uint64_t v4 = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  *(void *)(a1 + 152) = v4;
  return a1;
}

uint64_t assignWithTake for TupleTableRowContent.CountRows(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleTableRowContent.CountRows(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 161)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleTableRowContent.CountRows(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 160) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 161) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 161) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t destroy for TupleTableRowContent.MakeList()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TupleTableRowContent.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  uint64_t v4 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v5 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TupleTableRowContent.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TupleTableRowContent.MakeList(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  uint64_t v4 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TupleTableRowContent.MakeList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TupleTableRowContent.MakeList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in TupleTableRowContent<A, B>.MergeLists()
{
  return swift_getWitnessTable();
}

uint64_t TitleOnlyLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in TitleOnlyLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance TitleOnlyLabelStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>();
    lazy protocol witness table accessor for type _ContainerValueWritingModifier<LabelItemRole?> and conformance _ContainerValueWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>)
  {
    type metadata accessor for _ContainerValueWritingModifier<LabelItemRole?>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _ContainerValueWritingModifier<LabelItemRole?>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ContainerValueWritingModifier<LabelItemRole?> and conformance _ContainerValueWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ContainerValueWritingModifier<LabelItemRole?> and conformance _ContainerValueWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _ContainerValueWritingModifier<LabelItemRole?> and conformance _ContainerValueWritingModifier<A>)
  {
    type metadata accessor for _ContainerValueWritingModifier<LabelItemRole?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ContainerValueWritingModifier<LabelItemRole?> and conformance _ContainerValueWritingModifier<A>);
  }
  return result;
}

id PlatformItemList.Item.configurationIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v1[4].i64, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
  unint64_t v3 = v1[20].u64[1];
  if (v3 >> 2 == 0xFFFFFFFF)
  {
    char v4 = 0;
  }
  else
  {
    BOOL v7 = v3 == 0xC000000000000000;
    int8x16_t v5 = vorrq_s8(vorrq_s8(v1[21], v1[23]), vorrq_s8(v1[22], v1[24]));
    uint64_t v6 = *(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | v1[20].i64[0] | v1[19].i64[1] | v1[19].i64[0] | v1[18].i64[1];
    BOOL v7 = v7 && v6 == 0;
    char v4 = v7;
  }
  uint64_t v8 = v1[38].i64[1];
  uint64_t v10 = v1[1].i64[0];
  uint64_t v9 = v1[1].i64[1];
  int v11 = (void *)v1->i64[0];
  unsigned int v12 = (void *)v1[39].i64[0];
  id v16 = v11;
  if (v12)
  {
    if (v12[2])
    {
      uint64_t v13 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
      unsigned int v12 = *(void **)((char *)v12
                       + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)));
      unsigned int v14 = v12;
    }
    else
    {
      unsigned int v12 = 0;
    }
  }
  *(unsigned char *)a1 = _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v17) == 0;
  *(unsigned char *)(a1 + 1) = v8 != 0;
  *(unsigned char *)(a1 + 2) = v4;
  *(void *)(a1 + 8) = v10;
  *(void *)(a1 + 16) = v9;
  *(void *)(a1 + 24) = v16;
  *(void *)(a1 + 32) = v12;
  swift_bridgeObjectRetain();

  return v16;
}

unint64_t PlatformItemList.Item.ConfigurationIdentifier.identifier.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  int8x16_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of PlatformItem.PrimaryContent?(v0 + 8, (uint64_t)v31, (unint64_t *)&lazy cache variable for type metadata for String?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v31, (uint64_t)v32, (unint64_t *)&lazy cache variable for type metadata for String?);
  if (v32[1])
  {
    unint64_t v6 = v32[0];
  }
  else
  {
    unint64_t v29 = 0;
    unint64_t v30 = 0xE000000000000000;
    BOOL v7 = *(void **)(v0 + 24);
    if (v7)
    {
      id v8 = v7;
      id v9 = objc_msgSend(v8, sel_string);
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unsigned int v12 = v11;

      v13._countAndFlagsBits = v10;
      v13._object = v12;
      String.append(_:)(v13);

      swift_bridgeObjectRelease();
    }
    unsigned int v14 = *(void **)(v1 + 32);
    if (v14)
    {
      id v15 = v14;
      id v16 = objc_msgSend(v15, sel_string);
      uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      long long v19 = v18;

      v20._countAndFlagsBits = v17;
      v20._object = v19;
      String.append(_:)(v20);

      swift_bridgeObjectRelease();
    }
    unint64_t v6 = v29;
    uint64_t v21 = HIBYTE(v30) & 0xF;
    if ((v30 & 0x2000000000000000) == 0) {
      uint64_t v21 = v29 & 0xFFFFFFFFFFFFLL;
    }
    if (!v21)
    {
      swift_bridgeObjectRelease();
      unint64_t v27 = 0;
      unint64_t v28 = 0xE000000000000000;
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      unint64_t v27 = 0xD00000000000001FLL;
      unint64_t v28 = 0x8000000188344090;
      UUID.init()();
      uint64_t v22 = UUID.uuidString.getter();
      char v24 = v23;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v25._countAndFlagsBits = v22;
      v25._object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      unint64_t v6 = v27;
    }
  }
  outlined retain of String?((uint64_t)v31);
  return v6;
}

uint64_t View.scrollPosition(_:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  outlined init with copy of Binding<ScrollPosition>(a1, (uint64_t)v12);
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  char v15 = a4 & 1;
  MEMORY[0x18C113660](v12, a5, MEMORY[0x1E4F41148], a6);
  return outlined destroy of ScrollPositionBindingModifier((uint64_t)v12);
}

uint64_t View.scrollPosition<A>(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Optional();
  uint64_t v7 = type metadata accessor for Binding();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x1F4188790](v7);
  int v11 = (char *)v19 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)v19 - v10, a1, v7, v9);
  static UnitPoint.topLeading.getter();
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v19[0] = v13;
  v19[1] = v15;
  char v20 = 0;
  type metadata accessor for ValueToScrollPosition();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  outlined init with copy of Binding<ScrollPosition>((uint64_t)v24, (uint64_t)v19);
  static UnitPoint.topLeading.getter();
  uint64_t v21 = v16;
  uint64_t v22 = v17;
  char v23 = 0;
  MEMORY[0x18C113660](v19, a2, MEMORY[0x1E4F41148], a4);
  outlined destroy of ScrollPositionBindingModifier((uint64_t)v19);
  return outlined destroy of Binding<ScrollPosition>((uint64_t)v24);
}

uint64_t View.scrollPosition<A>(initialID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Optional();
  double v10 = MEMORY[0x1F4188790](v9);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)v14 - v11, a1, v9, v10);
  v14[1] = a5;
  swift_getWitnessTable();
  ScrollPosition.init<A>(id:anchor:)();
  MEMORY[0x18C113660](v15, a2, MEMORY[0x1E4F404C0], a4);
  return outlined destroy of ScrollValueModifier((uint64_t)v15);
}

uint64_t outlined destroy of ScrollValueModifier(uint64_t a1)
{
  return a1;
}

uint64_t View.scrollPosition(initialAnchor:)(uint64_t a1, uint64_t a2, char a3)
{
  return View.defaultScrollAnchor(_:)(a1, a2, a3 & 1);
}

uint64_t View.scrolled<A>(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return View.scrollPosition<A>(id:anchor:)(a1, 0, 0, 1, a2, a3, a4);
}

uint64_t sub_188216E48()
{
  return swift_getWitnessTable();
}

uint64_t sub_188216EAC()
{
  return get_witness_table_7SwiftUI4ViewRzSHRd__r__lAA15ModifiedContentVyxAA29ScrollPositionBindingModifierVGAaBHPxAaBHD1__AfA0cI0HPyHCHCTm();
}

uint64_t sub_188216EC0()
{
  return get_witness_table_7SwiftUI4ViewRzSHRd__r__lAA15ModifiedContentVyxAA29ScrollPositionBindingModifierVGAaBHPxAaBHD1__AfA0cI0HPyHCHCTm();
}

uint64_t sub_188216ED4()
{
  return swift_getWitnessTable();
}

void type metadata accessor for Binding<ScrollPosition>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t View.tabViewCustomization(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TabViewCustomizationModifier();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<TabViewCustomization>?(a1, (uint64_t)v8);
  MEMORY[0x18C113660](v8, a2, v6, a3);
  return _s7SwiftUI28TabViewCustomizationModifierVWOhTm_0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for TabViewCustomizationModifier);
}

uint64_t type metadata accessor for TabViewCustomizationModifier()
{
  uint64_t result = type metadata singleton initialization cache for TabViewCustomizationModifier;
  if (!type metadata singleton initialization cache for TabViewCustomizationModifier) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1882170D0()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for TabViewCustomizationModifier(uint64_t *a1, uint64_t *a2)
{
  type metadata accessor for Binding<TabViewCustomization>?(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(v4 - 8);
    type metadata accessor for Binding<TabViewCustomization>(0);
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      uint64_t v12 = *(int *)(v8 + 32);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = type metadata accessor for UUID();
      uint64_t v16 = *(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16);
      swift_retain();
      swift_retain();
      v16(v13, v14, v15);
      uint64_t v17 = type metadata accessor for TabViewCustomization();
      *(void *)&v13[*(int *)(v17 + 20)] = *(void *)&v14[*(int *)(v17 + 20)];
      *(void *)&v13[*(int *)(v17 + 24)] = *(void *)&v14[*(int *)(v17 + 24)];
      long long v18 = *(void (**)(uint64_t *, void, uint64_t, uint64_t))(v9 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18(a1, 0, 1, v8);
    }
  }
  return a1;
}

uint64_t destroy for TabViewCustomizationModifier(uint64_t a1)
{
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v3 = v2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    swift_release();
    swift_release();
    uint64_t v5 = a1 + *(int *)(v3 + 32);
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
    type metadata accessor for TabViewCustomization();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void *initializeWithCopy for TabViewCustomizationModifier(void *a1, void *a2)
{
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v4))
  {
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    uint64_t v9 = *(int *)(v5 + 32);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    swift_retain();
    v13(v10, v11, v12);
    uint64_t v14 = type metadata accessor for TabViewCustomization();
    *(void *)&v10[*(int *)(v14 + 20)] = *(void *)&v11[*(int *)(v14 + 20)];
    *(void *)&v10[*(int *)(v14 + 24)] = *(void *)&v11[*(int *)(v14 + 24)];
    uint64_t v15 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithCopy for TabViewCustomizationModifier(void *a1, void *a2)
{
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v4);
  int v9 = v7(a2, 1, v5);
  if (!v8)
  {
    if (!v9)
    {
      *a1 = *a2;
      swift_retain();
      swift_release();
      a1[1] = a2[1];
      swift_retain();
      swift_release();
      uint64_t v19 = *(int *)(v5 + 32);
      char v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      uint64_t v22 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 24))(v20, v21, v22);
      uint64_t v23 = type metadata accessor for TabViewCustomization();
      *(void *)&v20[*(int *)(v23 + 20)] = *(void *)&v21[*(int *)(v23 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)&v20[*(int *)(v23 + 24)] = *(void *)&v21[*(int *)(v23 + 24)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    _s7SwiftUI28TabViewCustomizationModifierVWOhTm_0((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v10 = *(int *)(v5 + 32);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  v14(v11, v12, v13);
  uint64_t v15 = type metadata accessor for TabViewCustomization();
  *(void *)&v11[*(int *)(v15 + 20)] = *(void *)&v12[*(int *)(v15 + 20)];
  *(void *)&v11[*(int *)(v15 + 24)] = *(void *)&v12[*(int *)(v15 + 24)];
  uint64_t v16 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(a1, 0, 1, v5);
  return a1;
}

uint64_t _s7SwiftUI28TabViewCustomizationModifierVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeWithTake for TabViewCustomizationModifier(void *a1, void *a2)
{
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v4))
  {
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
  }
  else
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    uint64_t v9 = *(int *)(v5 + 32);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    uint64_t v13 = type metadata accessor for TabViewCustomization();
    *(void *)&v10[*(int *)(v13 + 20)] = *(void *)&v11[*(int *)(v13 + 20)];
    *(void *)&v10[*(int *)(v13 + 24)] = *(void *)&v11[*(int *)(v13 + 24)];
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *assignWithTake for TabViewCustomizationModifier(void *a1, void *a2)
{
  type metadata accessor for Binding<TabViewCustomization>(0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v4);
  int v9 = v7(a2, 1, v5);
  if (!v8)
  {
    if (!v9)
    {
      *a1 = *a2;
      swift_release();
      a1[1] = a2[1];
      swift_release();
      uint64_t v18 = *(int *)(v5 + 32);
      uint64_t v19 = (char *)a1 + v18;
      char v20 = (char *)a2 + v18;
      uint64_t v21 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 40))(v19, v20, v21);
      uint64_t v22 = type metadata accessor for TabViewCustomization();
      *(void *)&v19[*(int *)(v22 + 20)] = *(void *)&v20[*(int *)(v22 + 20)];
      swift_bridgeObjectRelease();
      *(void *)&v19[*(int *)(v22 + 24)] = *(void *)&v20[*(int *)(v22 + 24)];
      swift_bridgeObjectRelease();
      return a1;
    }
    _s7SwiftUI28TabViewCustomizationModifierVWOhTm_0((uint64_t)a1, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>);
    goto LABEL_6;
  }
  if (v9)
  {
LABEL_6:
    type metadata accessor for Binding<TabViewCustomization>?(0);
    memcpy(a1, a2, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  uint64_t v10 = a2[1];
  *a1 = *a2;
  a1[1] = v10;
  uint64_t v11 = *(int *)(v5 + 32);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  uint64_t v15 = type metadata accessor for TabViewCustomization();
  *(void *)&v12[*(int *)(v15 + 20)] = *(void *)&v13[*(int *)(v15 + 20)];
  *(void *)&v12[*(int *)(v15 + 24)] = *(void *)&v13[*(int *)(v15 + 24)];
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabViewCustomizationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188217C60);
}

uint64_t sub_188217C60(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<TabViewCustomization>?(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TabViewCustomizationModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188217CE0);
}

uint64_t sub_188217CE0(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<TabViewCustomization>?(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

void type metadata completion function for TabViewCustomizationModifier()
{
  type metadata accessor for Binding<TabViewCustomization>?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t EnvironmentValues.tabViewCustomization.setter(uint64_t a1)
{
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v3 - 8);
  outlined init with copy of Binding<TabViewCustomization>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return _s7SwiftUI28TabViewCustomizationModifierVWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TabViewCustomizationModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TabViewCustomizationModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  _OWORD v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance TabViewCustomizationModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance TabViewCustomizationModifier()
{
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type TabViewCustomizationModifier and conformance TabViewCustomizationModifier, (void (*)(uint64_t))type metadata accessor for TabViewCustomizationModifier);

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in TabViewCustomizationModifier()
{
  return &protocol witness table for TabViewCustomizationModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in TabViewCustomizationModifier()
{
  return &protocol witness table for TabViewCustomizationModifier;
}

uint64_t EnvironmentValues.tabViewCustomization.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t specialized static TabViewCustomizationModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v3 - 8);
  long long v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v11 - v7;
  type metadata accessor for TabViewCustomizationModifier();
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of Binding<TabViewCustomization>?(Value, (uint64_t)v8);
  outlined init with copy of Binding<TabViewCustomization>?((uint64_t)v8, (uint64_t)v5);
  type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return _s7SwiftUI28TabViewCustomizationModifierVWOhTm_0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
}

void type metadata accessor for EnvironmentPropertyKey<TabViewCustomization.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewCustomization.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewCustomization.Key>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t EnvironmentValues.isFocused.setter(uint64_t a1)
{
  return EnvironmentValues.isFocused.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>, (uint64_t)&type metadata for EnvironmentValues.IsFocusedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusedKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.isPlatformFocusSystemEnabled.getter()
{
  return EnvironmentValues.isFocused.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>, (uint64_t)&type metadata for EnvironmentValues.IsPlatformFocusSystemEnabled, (uint64_t)&protocol witness table for EnvironmentValues.IsPlatformFocusSystemEnabled, lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled> and conformance EnvironmentPropertyKey<A>);
}

uint64_t View.focusable(_:interactions:)(char a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return View.focusable(_:interactions:)(a1, a2, a3, a4, (uint64_t)&type metadata for FocusInteractions, (uint64_t)&protocol witness table for FocusInteractions);
}

uint64_t View.focusEffect(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.focusEffect.getter@<X0>(BOOL *a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a1 = (v4 & 1) == 0;
  return result;
}

uint64_t key path getter for EnvironmentValues.focusEffect : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.focusEffect.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.focusEffect : EnvironmentValues()
{
  return EnvironmentValues.focusEffect.setter();
}

uint64_t EnvironmentValues.focusEffect.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.focusEffectDisabled(_:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_allocObject();
  *(unsigned char *)(v7 + 16) = a1;
  v10[0] = KeyPath;
  v10[1] = partial apply for closure #1 in View.hoverEffectDisabled(_:);
  _OWORD v10[2] = v7;
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_3(0, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
  MEMORY[0x18C113660](v10, a2, v8, a3);
  swift_release();
  return swift_release();
}

uint64_t EnvironmentValues.isFocusEffectEnabled.getter()
{
  return EnvironmentValues.isFocused.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.isFocusEffectEnabled : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isFocusEffectEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.isFocusEffectEnabled : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.isFocusEffectEnabled.setter(*a1);
}

uint64_t EnvironmentValues.isFocusEffectEnabled.setter(uint64_t a1)
{
  return EnvironmentValues.isFocused.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>);
}

void static FocusInteractions.automatic.getter(uint64_t *a1@<X8>)
{
  uint64_t v1 = unk_1ED422598;
  if ((unk_1ED422598 & ~qword_1ED422590) == 0) {
    uint64_t v1 = 0;
  }
  *a1 = v1 | qword_1ED422590;
}

uint64_t FocusInteractions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t FocusInteractions.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*FocusInteractions.rawValue.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void static FocusEffect.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static FocusEffect.disabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

BOOL static FocusEffect.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t (*EnvironmentValues.isFocusEffectEnabled.modify(uint64_t a1))(uint64_t *a1)
{
  *(void *)a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return EnvironmentValues.isFocusEffectEnabled.modify;
}

uint64_t EnvironmentValues.isFocusEffectEnabled.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_188218D34@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.focusEffect.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t sub_188218D78()
{
  return EnvironmentValues.focusEffect.setter();
}

uint64_t sub_188218DB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_2Tm_1(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.isFocusEffectEnabled.getter, a3);
}

uint64_t sub_188218DC8(unsigned __int8 *a1)
{
  return EnvironmentValues.isFocusEffectEnabled.setter(*a1);
}

uint64_t sub_188218DF0()
{
  return swift_deallocObject();
}

uint64_t FocusableViewResponder.__allocating_init(inputs:)()
{
  return FocusableViewResponder.init(inputs:)();
}

void protocol witness for ViewModifier.body(content:) in conformance _FocusableModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IOSFocusEnabledFlag()
{
  return PropertyList.subscript.setter();
}

SwiftUI::FocusableOptions __swiftcall FocusableOptions.init(rawValue:)(SwiftUI::FocusableOptions rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static FocusableOptions.fromMouse.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static FocusableOptions.fromKeyboard.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static FocusableOptions.platformItemDrawsFocusRingMask.getter(void *a1@<X8>)
{
  *a1 = 4;
}

void static FocusableOptions.platformContainerHandlesFocus.getter(void *a1@<X8>)
{
  *a1 = 8;
}

void static FocusableOptions.preventNavigationToSubviews.getter(void *a1@<X8>)
{
  *a1 = 16;
}

uint64_t static FocusableOptions.all.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for all != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static FocusableOptions.all;
  return result;
}

uint64_t FocusableOptions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t FocusableOptions.resolve(in:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v4 = *v2;
  if (*(void *)(a1 + 8))
  {
    long long v5 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F40930];
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey>, (uint64_t)&unk_1ED421E78, (uint64_t)&protocol witness table for EnvironmentValues.AllControlsNavigableKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey>, (uint64_t)&unk_1ED421E78, (uint64_t)&protocol witness table for EnvironmentValues.AllControlsNavigableKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    unsigned __int8 v6 = v12;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, v5);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    uint64_t v7 = (uint64_t (*)(void, uint64_t, uint64_t))MEMORY[0x1E4F40930];
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey>, (uint64_t)&unk_1ED421E78, (uint64_t)&protocol witness table for EnvironmentValues.AllControlsNavigableKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AllControlsNavigableKey>, (uint64_t)&unk_1ED421E78, (uint64_t)&protocol witness table for EnvironmentValues.AllControlsNavigableKey);
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    unsigned __int8 v6 = v12;
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey, v7);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusEffectEnabledKey>, (uint64_t)&unk_1ED421EB8, (uint64_t)&protocol witness table for EnvironmentValues.IsFocusEffectEnabledKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  if ((v6 & ((v4 & 2) == 0)) != 0) {
    unint64_t v9 = v4 | 2;
  }
  else {
    unint64_t v9 = v4;
  }
  if (!(v11 & 1 | (v9 >> 2) & 1)) {
    v9 |= 4uLL;
  }
  uint64_t v10 = (v9 >> 5) & 1;
  if ((v9 & 3) == 0) {
    LODWORD(v10) = 1;
  }
  if (!v10) {
    v9 |= 0x20uLL;
  }
  *a2 = v9;
  return result;
}

uint64_t EnvironmentValues.focusDisabled.getter()
{
  return EnvironmentValues.isFocused.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FocusDisabledKey>, (uint64_t)&unk_1ED421A60, (uint64_t)&protocol witness table for EnvironmentValues.FocusDisabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FocusDisabledKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.isFocused.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, a2, a3, a4, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>(a5, a2, a3, a4);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t UpdateViewGeometry.updateValue()()
{
  return AGGraphSetOutputValue();
}

uint64_t UpdateFocusableViewResponder.updateValue()()
{
  v37[4] = *MEMORY[0x1E4F143B8];
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  uint64_t Value = AGGraphGetValue();
  char v35 = v2;
  uint64_t v3 = *(void *)Value;
  uint64_t v4 = *(void *)(Value + 8);
  char v33 = *(unsigned char *)(Value + 16);
  uint64_t v5 = *(void *)(Value + 24);
  uint64_t v6 = *(void *)(Value + 32);
  uint64_t v7 = *(void *)(Value + 40);
  uint64_t v8 = *(void *)(Value + 48);
  uint64_t v9 = *(void *)(Value + 56);
  uint64_t v10 = *(void *)(Value + 64);
  uint64_t v31 = *(void *)(Value + 80);
  uint64_t v32 = *(void *)(Value + 72);
  uint64_t v11 = *(void *)(Value + 96);
  uint64_t v30 = *(void *)(Value + 88);
  unsigned __int8 v12 = (char *)AGGraphGetValue();
  char v36 = v13;
  char v34 = *v12;
  uint64_t v14 = *(void *)(v0 + 40);
  uint64_t v15 = (unsigned int *)AGGraphGetValue();
  uint64_t v16 = *((void *)v15 + 1);
  uint64_t v17 = *((void *)v15 + 2);
  uint64_t v18 = *((void *)v15 + 3);
  uint64_t v19 = 0x100000000;
  if (!*((unsigned char *)v15 + 4)) {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *(void *)(v14 + 232);
  uint64_t v21 = *(void *)(v14 + 240);
  uint64_t v22 = *(void *)(v14 + 248);
  uint64_t v23 = *(void *)(v14 + 256);
  *(void *)(v14 + 232) = v19 | *v15;
  *(void *)(v14 + 240) = v16;
  *(void *)(v14 + 248) = v17;
  *(void *)(v14 + 256) = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of FocusItem.ViewItem?(v20, v21, v22);
  outlined consume of FocusItem.ViewItem?(v20, v21, v22);
  v37[0] = v20;
  v37[1] = v21;
  _OWORD v37[2] = v22;
  uint64_t v37[3] = v23;
  FocusableViewResponder.baseItem.didset((int *)v37);
  outlined consume of FocusItem.ViewItem?(v20, v21, v22);
  _sSay7SwiftUI8KeyPressV7HandlerVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  AGGraphGetValue();
  if (v24)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  _sSay7SwiftUI8KeyPressV7HandlerVGMaTm_0(0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  *(void *)(v14 + 224) = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if ((v35 & 1) == 0 && AGGraphGetOutputValue())
  {
    if (v36) {
      goto LABEL_11;
    }
LABEL_10:
    if (AGGraphGetOutputValue()) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  swift_beginAccess();
  *(void *)(v14 + 304) = v3;
  *(void *)(v14 + 312) = v4;
  *(unsigned char *)(v14 + 320) = v33;
  *(void *)(v14 + 328) = v5;
  *(void *)(v14 + 336) = v6;
  *(void *)(v14 + 344) = v7;
  *(void *)(v14 + 352) = v8;
  *(void *)(v14 + 360) = v9;
  *(void *)(v14 + 368) = v10;
  *(void *)(v14 + 376) = v32;
  *(void *)(v14 + 384) = v31;
  *(void *)(v14 + 392) = v30;
  *(void *)(v14 + 400) = v11;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  FocusableViewResponder.geometry.didset();
  if ((v36 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_11:
  *(unsigned char *)(v14 + 297) = v34;
LABEL_12:
  *(unsigned char *)(v14 + 417) = *(unsigned char *)AGGraphGetValue();
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_3(0, &lazy cache variable for type metadata for FocusGroupIdentifier?, (uint64_t)&type metadata for FocusGroupIdentifier, MEMORY[0x1E4FBB718]);
  uint64_t v25 = AGGraphGetValue();
  char v26 = *(unsigned char *)(v25 + 8);
  char v27 = *(unsigned char *)(v25 + 9);
  *(void *)(v14 + 424) = *(void *)v25;
  *(unsigned char *)(v14 + 432) = v26;
  *(unsigned char *)(v14 + 433) = v27;
  if (!AGGraphGetOutputValue())
  {
    _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_188351940;
    *(void *)(v28 + 32) = v14;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

double protocol witness for Rule.value.getter in conformance IsFocusedEnvironmentChild@<D0>(_OWORD *a1@<X8>)
{
  return IsFocusedEnvironmentChild.value.getter(a1);
}

uint64_t ResolvedOptions.value.getter()
{
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value + 8, (uint64_t)v5);
  uint64_t v1 = v6;
  uint64_t v2 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  long long v4 = *(_OWORD *)AGGraphGetValue();
  (*(void (**)(long long *, uint64_t, uint64_t))(v2 + 8))(&v4, v1, v2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
}

uint64_t protocol witness for Rule.value.getter in conformance ResolvedOptions()
{
  return ResolvedOptions.value.getter();
}

void FocusableViewResponder.baseItem.didset(int *a1)
{
  uint64_t v2 = *((void *)a1 + 2);
  if (!*(void *)(v1 + 248))
  {
    if (!v2) {
      return;
    }
    goto LABEL_12;
  }
  BOOL v3 = v2 == 0;
  if (v2) {
    int v4 = *a1;
  }
  else {
    int v4 = 0;
  }
  if (v3 || *(_DWORD *)(v1 + 232) != v4)
  {
LABEL_12:
    uint64_t v6 = *(void **)(v1 + 440);
    if (v6)
    {
      *(void *)(v1 + 440) = 0;
    }
  }
}

uint64_t FocusableViewResponder.geometry.didset()
{
  swift_beginAccess();
  long long v31 = *(_OWORD *)(v0 + 304);
  long long v1 = *(_OWORD *)(v0 + 352);
  long long v34 = *(_OWORD *)(v0 + 336);
  long long v35 = v1;
  long long v2 = *(_OWORD *)(v0 + 392);
  long long v37 = *(_OWORD *)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 368);
  char v32 = *(unsigned char *)(v0 + 320);
  uint64_t v33 = v3;
  uint64_t v36 = v4;
  long long v38 = v2;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  ContentResponderHelper.size.getter();
  uint64_t v6 = v5;
  uint64_t result = swift_endAccess();
  if ((~v6 & 0x7FF0000000000000) == 0 && (v6 & 0xFFFFFFFFFFFFFLL) != 0) {
    goto LABEL_7;
  }
  swift_beginAccess();
  long long v31 = *(_OWORD *)(v0 + 304);
  long long v8 = *(_OWORD *)(v0 + 352);
  long long v34 = *(_OWORD *)(v0 + 336);
  long long v35 = v8;
  long long v9 = *(_OWORD *)(v0 + 392);
  long long v37 = *(_OWORD *)(v0 + 376);
  uint64_t v10 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 368);
  char v32 = *(unsigned char *)(v0 + 320);
  uint64_t v33 = v10;
  uint64_t v36 = v11;
  long long v38 = v9;
  ContentResponderHelper.size.getter();
  uint64_t v13 = v12;
  uint64_t result = swift_endAccess();
  if ((~v13 & 0x7FF0000000000000) == 0 && (v13 & 0xFFFFFFFFFFFFFLL) != 0) {
    goto LABEL_7;
  }
  swift_beginAccess();
  long long v31 = *(_OWORD *)(v0 + 304);
  long long v14 = *(_OWORD *)(v0 + 352);
  long long v34 = *(_OWORD *)(v0 + 336);
  long long v35 = v14;
  long long v15 = *(_OWORD *)(v0 + 392);
  long long v37 = *(_OWORD *)(v0 + 376);
  uint64_t v16 = *(void *)(v0 + 328);
  uint64_t v17 = *(void *)(v0 + 368);
  char v32 = *(unsigned char *)(v0 + 320);
  uint64_t v33 = v16;
  uint64_t v36 = v17;
  long long v38 = v15;
  ContentResponderHelper.size.getter();
  double v19 = v18;
  double v21 = v20;
  uint64_t result = swift_endAccess();
  if (v19 != 0.0) {
    goto LABEL_8;
  }
  if (v21 == 0.0)
  {
LABEL_7:
    *(_OWORD *)(v0 + 264) = 0u;
    *(_OWORD *)(v0 + 280) = 0u;
    *(unsigned char *)(v0 + 296) = 1;
  }
  else
  {
LABEL_8:
    swift_beginAccess();
    long long v31 = *(_OWORD *)(v0 + 304);
    long long v22 = *(_OWORD *)(v0 + 352);
    long long v34 = *(_OWORD *)(v0 + 336);
    long long v35 = v22;
    long long v23 = *(_OWORD *)(v0 + 392);
    long long v37 = *(_OWORD *)(v0 + 376);
    uint64_t v24 = *(void *)(v0 + 328);
    uint64_t v25 = *(void *)(v0 + 368);
    char v32 = *(unsigned char *)(v0 + 320);
    uint64_t v33 = v24;
    uint64_t v36 = v25;
    long long v38 = v23;
    ContentResponderHelper.size.getter();
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    swift_endAccess();
    *(void *)&long long v30 = v27;
    *((void *)&v30 + 1) = v29;
    hostingViewCoordinateSpace.getter();
    BYTE8(v34) = 1;
    CGRect.convert(to:transform:)();
    uint64_t result = outlined destroy of CoordinateSpace((uint64_t)&v31);
    *(_OWORD *)(v0 + 264) = 0uLL;
    *(_OWORD *)(v0 + 280) = v30;
    *(unsigned char *)(v0 + 296) = 0;
  }
  return result;
}