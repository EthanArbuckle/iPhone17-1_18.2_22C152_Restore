uint64_t (*AccessibilityFocusStoreListModifier.ListTransform.value.getter())()
{
  uint64_t v0;

  v0 = *(void *)AGGraphGetValue();
  *(void *)(swift_allocObject() + 16) = v0;
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in AccessibilityFocusStoreListModifier.ListTransform.value.getter;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityFocusStoreListModifier<A>.ListTransform@<X0>(uint64_t (**a1)()@<X8>)
{
  AccessibilityFocusStoreListModifier.ListTransform.value.getter();
  uint64_t v3 = v2;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in AccessibilityFocusStoreListModifier.ListTransform.value.getter;
  *(void *)(result + 24) = v3;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
  a1[1] = (uint64_t (*)())result;
  return result;
}

uint64_t static AccessibilityFocusStoreListModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unint64_t *a7@<X8>)
{
  void (*v46)(unint64_t *__return_ptr);
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t vars8;

  v54 = a5;
  v55 = a6;
  uint64_t v45 = a4;
  v46 = a3;
  v56 = a7;
  v75 = *MEMORY[0x1E4F143B8];
  int v44 = *a1;
  v53 = *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  unsigned int v9 = *(_DWORD *)(a2 + 24);
  unsigned int v10 = *(_DWORD *)(a2 + 28);
  int v12 = *(_DWORD *)(a2 + 32);
  int v11 = *(_DWORD *)(a2 + 36);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v13 = *(void *)(a2 + 48);
  int v15 = *(_DWORD *)(a2 + 56);
  v50 = *(_DWORD *)(a2 + 60);
  v49 = *(_DWORD *)(a2 + 64);
  v48 = *(_DWORD *)(a2 + 68);
  v47 = *(_DWORD *)(a2 + 72);
  int v16 = *(_DWORD *)(a2 + 76);
  v51 = *(_DWORD *)(a2 + 80);
  v52 = v16;
  unint64_t v17 = v13;
  v60 = v13;
  int v18 = v15;
  LODWORD(v61) = v15;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    v60 = v53;
    int v42 = v7;
    LODWORD(v61) = v7;
    v62 = v8;
    unsigned int v41 = v9;
    v63 = __PAIR64__(v10, v9);
    unsigned int v40 = v10;
    int v39 = v12;
    v64 = v12;
    v65 = v11;
    int v38 = v11;
    v66 = v14;
    v67 = v17;
    int v43 = v18;
    v68 = v18;
    v69 = v50;
    v70 = v49;
    v71 = v48;
    v72 = v47;
    v73 = v52;
    v74 = v51;
    v46(&v58);
    LODWORD(v60) = v44;
    type metadata accessor for AccessibilityFocusStoreListModifier();
    type metadata accessor for _GraphValue();
    LODWORD(v46) = _GraphValue.value.getter();
    v60 = v58;
    v61 = v59;
    uint64_t v19 = _ViewOutputs.subscript.getter();
    int v20 = *MEMORY[0x1E4F4E7A0];
    if ((v19 & 0x100000000) == 0) {
      int v20 = v19;
    }
    LODWORD(v45) = v20;
    lazy protocol witness table accessor for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey();
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    unsigned int v21 = v60;
    v60 = v53;
    LODWORD(v61) = v42;
    v62 = v8;
    v63 = __PAIR64__(v40, v41);
    v64 = v39;
    v65 = v38;
    v66 = v14;
    v67 = v17;
    v68 = v43;
    v69 = v50;
    v70 = v49;
    v71 = v48;
    v72 = v47;
    v73 = v52;
    v74 = v51;
    swift_getKeyPath();
    unsigned int v22 = _ViewInputs.mapEnvironment<A>(_:)();
    uint64_t v23 = swift_release();
    v60 = __PAIR64__(v45, v46);
    v61 = __PAIR64__(v22, v21);
    v62 = MEMORY[0x1E4FBC868];
    v63 = MEMORY[0x1E4FBC860];
    MEMORY[0x1F4188790](v23);
    uint64_t v36 = type metadata accessor for AccessibilityFocusStoreListModifier.ItemFilter();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<AccessibilityFocusStoreList>(0, &lazy cache variable for type metadata for Attribute<AccessibilityFocusStoreList>, (uint64_t)&type metadata for AccessibilityFocusStoreList, MEMORY[0x1E4F4E740]);
    uint64_t v24 = MEMORY[0x1E4FBC248];
    uint64_t v25 = MEMORY[0x1E4FBC278];
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v60, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_13, (uint64_t)v35, v36, MEMORY[0x1E4FBC248], v26, MEMORY[0x1E4FBC278], v27);
    swift_bridgeObjectRelease();
    uint64_t v28 = swift_bridgeObjectRelease();
    LODWORD(v60) = v57;
    MEMORY[0x1F4188790](v28);
    uint64_t v29 = type metadata accessor for AccessibilityFocusStoreListModifier.ListTransform();
    uint64_t v36 = v29;
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<(_:)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v60, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_12, (uint64_t)v35, v29, v24, v30, v25, v31);
    v60 = v17;
    LODWORD(v61) = v43;
    MEMORY[0x1F4188790](v17);
    LODWORD(v36) = v32;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    uint64_t result = swift_bridgeObjectRelease();
    v34 = v56;
    *v56 = v58;
    v34[1] = v59;
  }
  else
  {
    return _ViewOutputs.init()();
  }
  return result;
}

uint64_t AccessibilityFocusStoreListModifier.init(binding:prototype:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for AccessibilityFocusState.Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = a4 + *(int *)(type metadata accessor for AccessibilityFocusStoreListModifier() + 36);
  unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);

  return v10(v9, a2, a3);
}

uint64_t type metadata accessor for AccessibilityFocusStoreListModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityFocusStoreListModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  return static AccessibilityFocusStoreListModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityFocusStoreListModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, uint64_t (*a2)(void, void))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  while (1)
  {
    if (v7)
    {
      unint64_t v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      int64_t v10 = v13 + 1;
      if (v13 + 1 >= v8) {
        return swift_release();
      }
      unint64_t v14 = *(void *)(v4 + 8 * v10);
      if (!v14)
      {
        int64_t v10 = v13 + 2;
        if (v13 + 2 >= v8) {
          return swift_release();
        }
        unint64_t v14 = *(void *)(v4 + 8 * v10);
        if (!v14)
        {
          int64_t v10 = v13 + 3;
          if (v13 + 3 >= v8) {
            return swift_release();
          }
          unint64_t v14 = *(void *)(v4 + 8 * v10);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    uint64_t result = a2(*(unsigned __int8 *)(*(void *)(a1 + 48) + v12), *(unsigned __int8 *)(*(void *)(a1 + 56) + v12));
  }
  int64_t v15 = v13 + 4;
  if (v15 >= v8) {
    return swift_release();
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
    int64_t v10 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v10 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v10 >= v8) {
      return swift_release();
    }
    unint64_t v14 = *(void *)(v4 + 8 * v10);
    ++v15;
    if (v14) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_187A49768()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187A497A0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in AccessibilityFocusStoreLocation.set(_:transaction:)()
{
  closure #1 in AccessibilityFocusStoreLocation.set(_:transaction:)(*(void *)(v0 + 32), v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
}

uint64_t sub_187A498A8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MEMORY[0x18C119DF0]();
  *a1 = result;
  return result;
}

uint64_t sub_187A498D0()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for AccessibilityFocusStore.Key()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in AccessibilityFocusStoreLocation.find(for:)(uint64_t a1, unsigned char *a2)
{
  return closure #1 in AccessibilityFocusStoreLocation.find(for:)(a1, a2, *(void *)(v2 + 32), *(char **)(v2 + 40));
}

uint64_t partial apply for closure #1 in AccessibilityFocusStoreLocation.resolve()(uint64_t a1, unsigned char *a2)
{
  return closure #1 in AccessibilityFocusStoreLocation.resolve()(a1, a2, *(void **)(v2 + 16), *(char **)(v2 + 24));
}

uint64_t outlined retain of AccessibilityFocusStoreList.Item(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in AccessibilityFocusStore.makeStoreContent(_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in AccessibilityFocusStore.makeStoreContent(_:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t outlined release of AccessibilityFocusStoreList.Item(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityFocusStoreInputKey()
{
  return &type metadata for AccessibilityFocusStoreInputKey;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityFocusStoreListModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = ((v6 + 16) & ~v6) + v7 + v6;
  unint64_t v9 = (v8 & ~v6) + v7;
  int v10 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v11 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v10 != 0 || v9 > 0x18)
  {
    a1 = (uint64_t *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v6;
    int v16 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v17 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v16 = *v17;
    uint64_t v18 = ((unint64_t)v16 + v6 + 8) & ~v6;
    uint64_t v19 = ((unint64_t)v17 + v6 + 8) & ~v6;
    int v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v20(v18, v19, v4);
    v20(((unint64_t)a1 + v8) & v15, ((unint64_t)a2 + v8) & v15, v4);
  }
  return a1;
}

void *initializeWithTake for AccessibilityFocusStoreListModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32);
  uint64_t v10 = v8 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  v9(((unint64_t)v5 + v11 + 8) & ~v11, ((unint64_t)v6 + v11 + 8) & ~v11, v7);
  uint64_t v12 = ((v11 + 16) & ~v11) + *(void *)(v10 + 32) + v11;
  v9(((unint64_t)a1 + v12) & ~v11, ((unint64_t)a2 + v12) & ~v11, v7);
  return a1;
}

void *assignWithTake for AccessibilityFocusStoreListModifier(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40);
  uint64_t v11 = v9 + 40;
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  v10(((unint64_t)v7 + v12 + 8) & ~v12, (v12 + 8 + v6) & ~v12, v8);
  uint64_t v13 = ((v12 + 16) & ~v12) + *(void *)(v11 + 24) + v12;
  v10(((unint64_t)a1 + v13) & ~v12, ((unint64_t)a2 + v13) & ~v12, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityFocusStoreListModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v9 = a2 - v8;
  if (a2 <= v8) {
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v10 = ((v7 + v6 + ((v6 + 16) & ~v6)) & ~v6) + v7;
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v14 < 2)
    {
LABEL_23:
      int v16 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v16 + v6 + 8) & ~v6);
      }
      unint64_t v17 = *v16;
      if (v17 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      return (v17 + 1);
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_23;
  }
LABEL_15:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 > 3) {
      LODWORD(v10) = 4;
    }
    switch((int)v10)
    {
      case 2:
        LODWORD(v10) = *a1;
        break;
      case 3:
        LODWORD(v10) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v10) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v10) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v10 | v15) + 1;
}

void storeEnumTagSinglePayload for AccessibilityFocusStoreListModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v9 + ((v9 + 16) & ~v9)) & ~v9)
      + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187A4A110);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        uint64_t v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v7 & 0x80000000) != 0)
        {
          int v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(((unint64_t)v18 + v9 + 8) & ~v9);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
      }
      return;
  }
}

uint64_t destroy for AccessibilityFocusStoreList.Item()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityFocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AccessibilityFocusStoreList.Item(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityFocusStoreList.Item(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityFocusStoreList.Item(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityFocusStoreList.Item(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityFocusStoreList.Item()
{
  return &type metadata for AccessibilityFocusStoreList.Item;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityFocusStoreListModifier<A>()
{
  return &protocol witness table for AccessibilityFocusStoreListModifier<A>;
}

uint64_t type metadata accessor for AccessibilityFocusStoreListModifier.ItemFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityFocusStoreListModifier.ListTransform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for AccessibilityFocusStoreListModifier.ItemFilter()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessibilityFocusStoreListModifier.ItemFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityFocusStoreListModifier.ItemFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AccessibilityFocusStoreListModifier.ItemFilter(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityFocusStoreUpdateAction()
{
  return &type metadata for AccessibilityFocusStoreUpdateAction;
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityFocusStoreListModifier<A>.ListTransform()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityFocusStoreListModifier<A>.ItemFilter()
{
  return swift_getWitnessTable();
}

uint64_t outlined init with copy of AccessibilityFocus.Target(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AccessibilityFocus.Target(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in AccessibilityFocus.Target.ancestorAccessibilityNode.getter(void *a1)
{
  return closure #1 in AccessibilityFocus.Target.ancestorAccessibilityNode.getter(a1, *(void ***)(v1 + 16));
}

void type metadata accessor for Attribute<AccessibilityFocusStoreList>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t result = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  }
  return result;
}

uint64_t sub_187A4A7D4()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityFocusStoreUpdateAction.init<A>(prototype:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in AccessibilityFocusStoreUpdateAction.init<A>(prototype:)(a1, a2, a3, v3+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 16) - 8) + 80)), *(void *)(v3 + 16));
}

uint64_t sub_187A4A89C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187A4A8D4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityFocusStoreListModifier.ListTransform.value.getter()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return specialized Array.append<A>(contentsOf:)(v0);
}

ValueMetadata *type metadata accessor for PlatformSearchFieldStyle()
{
  return &type metadata for PlatformSearchFieldStyle;
}

uint64_t associated type witness table accessor for SearchFieldStyle.Body : View in PlatformSearchFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in PlatformSearchFieldStyle.Implementation.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UIKitSearchFieldAdaptor(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unsigned int v12 = (char *)&v16 - v11;
  _s7SwiftUI24SearchFieldConfigurationVWOcTm_1(a1, (uint64_t)&v16 - v11, type metadata accessor for SearchFieldConfiguration);
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0]();
  BOOL v13 = (*v6 & 1) == 0;
  _s7SwiftUI16SearchFieldStateVWOhTm_3((uint64_t)v6, type metadata accessor for SearchFieldState);
  _s7SwiftUI24SearchFieldConfigurationVWOcTm_1((uint64_t)v12, (uint64_t)v9, type metadata accessor for UIKitSearchFieldAdaptor);
  _s7SwiftUI24SearchFieldConfigurationVWOcTm_1((uint64_t)v9, a2, type metadata accessor for UIKitSearchFieldAdaptor);
  type metadata accessor for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)();
  *(unsigned char *)(a2 + *(int *)(v14 + 48)) = v13;
  _s7SwiftUI16SearchFieldStateVWOhTm_3((uint64_t)v12, type metadata accessor for UIKitSearchFieldAdaptor);
  return _s7SwiftUI16SearchFieldStateVWOhTm_3((uint64_t)v9, type metadata accessor for UIKitSearchFieldAdaptor);
}

uint64_t protocol witness for View.body.getter in conformance PlatformSearchFieldStyle.Implementation@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>();
  return closure #1 in PlatformSearchFieldStyle.Implementation.body.getter(v1, a1 + *(int *)(v3 + 44));
}

uint64_t protocol witness for SearchFieldStyle.makeBody(configuration:) in conformance PlatformSearchFieldStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _s7SwiftUI24SearchFieldConfigurationVWOcTm_1(a1, a2, type metadata accessor for SearchFieldConfiguration);
}

void *initializeBufferWithCopyOfBuffer for PlatformSearchFieldStyle.Implementation(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v6 = *a2;
  *a1 = *a2;
  if ((v5 & 0x20000) != 0)
  {
    a1 = (void *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = (int *)v4;
    a1[1] = a2[1];
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v9 = *(int *)(v8 + 32);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *uint64_t v10 = *((unsigned char *)a2 + v9);
    v10[1] = *((unsigned char *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    unsigned int v12 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v13 = v12[9];
    int v32 = &v11[v13];
    v33 = &v10[v13];
    uint64_t v14 = type metadata accessor for AttributedString();
    int v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    v15(v33, v32, v14);
    v10[v12[10]] = v11[v12[10]];
    uint64_t v16 = v12[11];
    int v17 = &v10[v16];
    uint64_t v18 = &v11[v16];
    *(_DWORD *)int v17 = *(_DWORD *)v18;
    v17[4] = v18[4];
    uint64_t v19 = v7[6];
    int v20 = (char *)a1 + v19;
    unsigned int v21 = (char *)a2 + v19;
    int v22 = v21[8];
    if (v22 == 255)
    {
      *(void *)int v20 = *(void *)v21;
      v20[8] = v21[8];
    }
    else
    {
      char v23 = v22 & 1;
      uint64_t v24 = *(void *)v21;
      outlined copy of PlatformItemCollection.Storage(*(void *)v21, v22 & 1);
      *(void *)int v20 = v24;
      v20[8] = v23;
    }
    *((unsigned char *)a1 + v7[7]) = *((unsigned char *)a2 + v7[7]);
    uint64_t v25 = v7[8];
    uint64_t v26 = (char *)a1 + v25;
    uint64_t v27 = (char *)a2 + v25;
    uint64_t v28 = *(void *)((char *)a2 + v25);
    uint64_t v29 = *((void *)v27 + 1);
    char v30 = v27[16];
    outlined copy of Text.Storage(v28, v29, v30);
    *(void *)uint64_t v26 = v28;
    *((void *)v26 + 1) = v29;
    v26[16] = v30;
    *((void *)v26 + 3) = *((void *)v27 + 3);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for PlatformSearchFieldStyle.Implementation(uint64_t a1)
{
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v3 = *(int *)(v2 + 32);
  uint64_t v4 = a1 + *(int *)(type metadata accessor for SearchFieldState(0) + 36) + v3;
  uint64_t v5 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v7 = a1 + *(int *)(v6 + 24);
  int v8 = *(unsigned __int8 *)(v7 + 8);
  if (v8 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v7, v8 & 1);
  }
  outlined consume of Text.Storage(*(void *)(a1 + *(int *)(v6 + 32)), *(void *)(a1 + *(int *)(v6 + 32) + 8), *(unsigned char *)(a1 + *(int *)(v6 + 32) + 16));

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PlatformSearchFieldStyle.Implementation(void *a1, void *a2)
{
  uint64_t v31 = a2[1];
  *a1 = *a2;
  a1[1] = v31;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *uint64_t v6 = *((unsigned char *)a2 + v5);
  v6[1] = *((unsigned char *)a2 + v5 + 1);
  *((_WORD *)v6 + 1) = *(_WORD *)((char *)a2 + v5 + 2);
  v6[8] = *((unsigned char *)a2 + v5 + 8);
  *((_DWORD *)v6 + 1) = *(_DWORD *)((char *)a2 + v5 + 4);
  int v8 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v9 = v8[9];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = type metadata accessor for AttributedString();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_retain();
  swift_retain();
  v13(v10, v11, v12);
  v6[v8[10]] = v7[v8[10]];
  uint64_t v14 = v8[11];
  int v15 = &v6[v14];
  uint64_t v16 = &v7[v14];
  v15[4] = v16[4];
  *(_DWORD *)int v15 = *(_DWORD *)v16;
  int v17 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v18 = v17[6];
  uint64_t v19 = (char *)a1 + v18;
  int v20 = (char *)a2 + v18;
  int v21 = v20[8];
  if (v21 == 255)
  {
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
  }
  else
  {
    char v22 = v21 & 1;
    uint64_t v23 = *(void *)v20;
    outlined copy of PlatformItemCollection.Storage(*(void *)v20, v21 & 1);
    *(void *)uint64_t v19 = v23;
    v19[8] = v22;
  }
  *((unsigned char *)a1 + v17[7]) = *((unsigned char *)a2 + v17[7]);
  uint64_t v24 = v17[8];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)((char *)a2 + v24);
  uint64_t v28 = *((void *)v26 + 1);
  char v29 = v26[16];
  outlined copy of Text.Storage(v27, v28, v29);
  *(void *)uint64_t v25 = v27;
  *((void *)v25 + 1) = v28;
  v25[16] = v29;
  *((void *)v25 + 3) = *((void *)v26 + 3);
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PlatformSearchFieldStyle.Implementation(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *uint64_t v6 = *((unsigned char *)a2 + v5);
  v6[1] = *((unsigned char *)a2 + v5 + 1);
  v6[2] = *((unsigned char *)a2 + v5 + 2);
  v6[3] = *((unsigned char *)a2 + v5 + 3);
  LODWORD(v5) = *(_DWORD *)((char *)a2 + v5 + 4);
  v6[8] = v7[8];
  *((_DWORD *)v6 + 1) = v5;
  int v8 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v9 = v8[9];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  v6[v8[10]] = v7[v8[10]];
  uint64_t v13 = v8[11];
  uint64_t v14 = &v6[v13];
  int v15 = &v7[v13];
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  uint64_t v16 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v17 = v16[6];
  uint64_t v18 = (uint64_t)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  int v20 = *((unsigned __int8 *)a1 + v17 + 8);
  int v21 = *((unsigned __int8 *)a2 + v17 + 8);
  if (v20 == 255)
  {
    if (v21 == 255)
    {
      uint64_t v23 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v19[8];
      *(void *)uint64_t v18 = v23;
    }
    else
    {
      char v28 = v21 & 1;
      uint64_t v29 = *(void *)v19;
      outlined copy of PlatformItemCollection.Storage(v29, v21 & 1);
      *(void *)uint64_t v18 = v29;
      *(unsigned char *)(v18 + 8) = v28;
    }
  }
  else if (v21 == 255)
  {
    outlined destroy of PlatformItemCollection(v18);
    char v22 = v19[8];
    *(void *)uint64_t v18 = *(void *)v19;
    *(unsigned char *)(v18 + 8) = v22;
  }
  else
  {
    char v24 = v21 & 1;
    uint64_t v25 = *(void *)v19;
    outlined copy of PlatformItemCollection.Storage(v25, v21 & 1);
    uint64_t v26 = *(void *)v18;
    char v27 = *(unsigned char *)(v18 + 8);
    *(void *)uint64_t v18 = v25;
    *(unsigned char *)(v18 + 8) = v24;
    outlined consume of PlatformItemCollection.Storage(v26, v27);
  }
  *((unsigned char *)a1 + v16[7]) = *((unsigned char *)a2 + v16[7]);
  uint64_t v30 = v16[8];
  uint64_t v31 = (char *)a1 + v30;
  int v32 = (char *)a2 + v30;
  uint64_t v33 = *(void *)((char *)a2 + v30);
  uint64_t v34 = *((void *)v32 + 1);
  char v35 = v32[16];
  outlined copy of Text.Storage(v33, v34, v35);
  uint64_t v36 = *(void *)v31;
  uint64_t v37 = *((void *)v31 + 1);
  char v38 = v31[16];
  *(void *)uint64_t v31 = v33;
  *((void *)v31 + 1) = v34;
  v31[16] = v35;
  outlined consume of Text.Storage(v36, v37, v38);
  *((void *)v31 + 3) = *((void *)v32 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for PlatformSearchFieldStyle.Implementation(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  int v8 = (char *)a2 + v6;
  *uint64_t v7 = *((unsigned char *)a2 + v6);
  v7[1] = *((unsigned char *)a2 + v6 + 1);
  *((_WORD *)v7 + 1) = *(_WORD *)((char *)a2 + v6 + 2);
  v7[8] = *((unsigned char *)a2 + v6 + 8);
  *((_DWORD *)v7 + 1) = *(_DWORD *)((char *)a2 + v6 + 4);
  uint64_t v9 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v10 = v9[9];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  v7[v9[10]] = v8[v9[10]];
  uint64_t v14 = v9[11];
  int v15 = &v7[v14];
  uint64_t v16 = &v8[v14];
  v15[4] = v16[4];
  *(_DWORD *)int v15 = *(_DWORD *)v16;
  uint64_t v17 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v18 = v17[6];
  uint64_t v19 = (char *)a1 + v18;
  int v20 = (char *)a2 + v18;
  *(void *)uint64_t v19 = *(void *)v20;
  v19[8] = v20[8];
  *((unsigned char *)a1 + v17[7]) = *((unsigned char *)a2 + v17[7]);
  uint64_t v21 = v17[8];
  char v22 = (_OWORD *)((char *)a1 + v21);
  uint64_t v23 = (_OWORD *)((char *)a2 + v21);
  long long v24 = v23[1];
  *char v22 = *v23;
  v22[1] = v24;
  return a1;
}

void *assignWithTake for PlatformSearchFieldStyle.Implementation(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_1(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *uint64_t v6 = *((unsigned char *)a2 + v5);
  v6[1] = *((unsigned char *)a2 + v5 + 1);
  *((_WORD *)v6 + 1) = *(_WORD *)((char *)a2 + v5 + 2);
  v6[8] = *((unsigned char *)a2 + v5 + 8);
  *((_DWORD *)v6 + 1) = *(_DWORD *)((char *)a2 + v5 + 4);
  int v8 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v9 = v8[9];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  v6[v8[10]] = v7[v8[10]];
  uint64_t v13 = v8[11];
  uint64_t v14 = &v6[v13];
  int v15 = &v7[v13];
  *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
  v14[4] = v15[4];
  uint64_t v16 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v17 = v16[6];
  uint64_t v18 = (uint64_t)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  int v20 = *((unsigned __int8 *)a1 + v17 + 8);
  if (v20 != 255)
  {
    int v21 = v19[8];
    if (v21 != 255)
    {
      uint64_t v22 = *(void *)v18;
      *(void *)uint64_t v18 = *(void *)v19;
      *(unsigned char *)(v18 + 8) = v21 & 1;
      outlined consume of PlatformItemCollection.Storage(v22, v20 & 1);
      goto LABEL_6;
    }
    outlined destroy of PlatformItemCollection(v18);
  }
  *(void *)uint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = v19[8];
LABEL_6:
  *((unsigned char *)a1 + v16[7]) = *((unsigned char *)a2 + v16[7]);
  uint64_t v23 = v16[8];
  long long v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  LOBYTE(v23) = v25[16];
  uint64_t v26 = *(void *)v24;
  uint64_t v27 = *((void *)v24 + 1);
  char v28 = v24[16];
  *(_OWORD *)long long v24 = *(_OWORD *)v25;
  v24[16] = v23;
  outlined consume of Text.Storage(v26, v27, v28);
  *((void *)v24 + 3) = *((void *)v25 + 3);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformSearchFieldStyle.Implementation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187A4B6E4);
}

uint64_t sub_187A4B6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PlatformSearchFieldStyle.Implementation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187A4B764);
}

uint64_t sub_187A4B764(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for PlatformSearchFieldStyle.Implementation()
{
  uint64_t result = type metadata singleton initialization cache for PlatformSearchFieldStyle.Implementation;
  if (!type metadata singleton initialization cache for PlatformSearchFieldStyle.Implementation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_187A4B820()
{
  return lazy protocol witness table accessor for type PlatformSearchFieldStyle.Implementation and conformance PlatformSearchFieldStyle.Implementation(&lazy protocol witness table cache variable for type PlatformSearchFieldStyle.Implementation and conformance PlatformSearchFieldStyle.Implementation, (void (*)(uint64_t))type metadata accessor for PlatformSearchFieldStyle.Implementation);
}

uint64_t associated type witness table accessor for View.Body : View in PlatformSearchFieldStyle.Implementation()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>)
  {
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_1(255, &lazy cache variable for type metadata for TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>, (uint64_t (*)(uint64_t))type metadata accessor for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?), MEMORY[0x1E4F41850]);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>);
    }
  }
}

void type metadata accessor for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)()
{
  if (!lazy cache variable for type metadata for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?))
  {
    type metadata accessor for UIKitSearchFieldAdaptor(255);
    type metadata accessor for SearchFieldConfiguration.Suggestions?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?));
    }
  }
}

void type metadata accessor for SearchFieldConfiguration.Suggestions?()
{
  if (!lazy cache variable for type metadata for SearchFieldConfiguration.Suggestions?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SearchFieldConfiguration.Suggestions?);
    }
  }
}

uint64_t sub_187A4B9E4()
{
  return lazy protocol witness table accessor for type PlatformSearchFieldStyle.Implementation and conformance PlatformSearchFieldStyle.Implementation(&lazy protocol witness table cache variable for type VStack<TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>);
}

uint64_t lazy protocol witness table accessor for type PlatformSearchFieldStyle.Implementation and conformance PlatformSearchFieldStyle.Implementation(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for VStack<TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>)
  {
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_1(255, &lazy cache variable for type metadata for TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>, (uint64_t (*)(uint64_t))type metadata accessor for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)> and conformance TupleView<A>)
  {
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_1(255, &lazy cache variable for type metadata for TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)>, (uint64_t (*)(uint64_t))type metadata accessor for (UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?), MEMORY[0x1E4F41850]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(UIKitSearchFieldAdaptor, SearchFieldConfiguration.Suggestions?)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t _ContentShapeKindModifier.init(shape:eoFill:kind:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for _ContentShapeKindModifier();
  *(unsigned char *)(a5 + *(int *)(result + 36)) = a2;
  *(void *)(a5 + *(int *)(result + 40)) = *a3;
  return result;
}

uint64_t _ContentShapeKindModifier.shape.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _ContentShapeKindModifier.shape.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_ContentShapeKindModifier.shape.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ContentShapeKindModifier.eoFill.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _ContentShapeKindModifier.eoFill.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_ContentShapeKindModifier.eoFill.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ContentShapeKindModifier.kind.getter@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(v2 + *(int *)(result + 40));
  return result;
}

void *_ContentShapeKindModifier.kind.setter(void *result, uint64_t a2)
{
  *(void *)(v2 + *(int *)(a2 + 40)) = *result;
  return result;
}

uint64_t (*_ContentShapeKindModifier.kind.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ContentShapeKindResponder.__allocating_init(inputs:)()
{
  return ContentShapeKindResponder.init(inputs:)();
}

uint64_t _ContentShapeKindModifier.contains(points:size:)()
{
  Shape.effectivePath(in:)();
  default argument 2 of Path.contains(points:eoFill:origin:)();
  Path.contains(points:eoFill:origin:)();
  return outlined release of Path((uint64_t)v1);
}

uint64_t _ContentShapeKindModifier.contentPath(size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*(unsigned char *)(v2 + *(int *)(result + 40)))
  {
    uint64_t result = Shape.effectivePath(in:)();
    long long v4 = v7;
    long long v6 = v8;
    char v5 = v9;
  }
  else
  {
    long long v4 = 0uLL;
    char v5 = 6;
    long long v6 = 0uLL;
  }
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v6;
  *(unsigned char *)(a2 + 32) = v5;
  return result;
}

void *_ContentShapeKindModifier.contentPath(size:kind:)@<X0>(void *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((*(void *)(v3 + *(int *)(a2 + 40)) & *result) != 0)
  {
    uint64_t result = (void *)Shape.effectivePath(in:)();
    long long v5 = v8;
    long long v6 = v9;
    char v7 = v10;
  }
  else
  {
    long long v5 = 0uLL;
    char v7 = 6;
    long long v6 = 0uLL;
  }
  *(_OWORD *)a3 = v5;
  *(_OWORD *)(a3 + 16) = v6;
  *(unsigned char *)(a3 + 32) = v7;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:) in conformance _ContentShapeKindModifier<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _ContentShapeKindModifier.contentPath(size:)(a1, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:kind:) in conformance _ContentShapeKindModifier<A>@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _ContentShapeKindModifier.contentPath(size:kind:)(a1, a2, (uint64_t)v6);
  double result = *(double *)v6;
  long long v5 = v6[1];
  *(_OWORD *)a3 = v6[0];
  *(_OWORD *)(a3 + 16) = v5;
  *(unsigned char *)(a3 + 32) = v7;
  return result;
}

uint64_t ContentShapeKindResponder.containsGlobalPoints(_:cacheKey:options:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v11)(uint64_t *__return_ptr, uint64_t, uint64_t, void *);
  double v12;
  double v13;
  uint64_t v14;
  void v15[4];
  uint64_t v16;
  double v17;
  uint64_t v18;

  uint64_t v8 = *a3;
  if (*(unsigned char *)(v4 + 216))
  {
    static Semantics.v6.getter();
    if (isLinkedOnOrAfter(_:)())
    {
      v15[0] = v8;
      type metadata accessor for DefaultLayoutViewResponder();
      uint64_t v11 = (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, void *))method lookup function for ViewResponder();
      v11(&v16, a1, a2 | ((HIDWORD(a2) & 1) << 32), v15);
      uint64_t v12 = v17;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = -1.0;
    }
    v15[3] = v8;
    MultiViewResponder.children.getter();
    swift_beginAccess();
    type metadata accessor for _ContentShapeKindModifier();
    swift_getWitnessTable();
    type metadata accessor for ContentResponderHelper();
    ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)();
    swift_endAccess();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v13 = v17;
    if (v17 <= v12) {
      uint64_t v13 = v12;
    }
    uint64_t v14 = v18;
    *(void *)a4 = v16;
    *(double *)(a4 + 8) = v13;
    *(void *)(a4 + 16) = v14;
  }
  else
  {
    uint64_t v16 = *a3;
    type metadata accessor for DefaultLayoutViewResponder();
    long long v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t *))method lookup function for ViewResponder();
    return v9(a1, a2 | ((HIDWORD(a2) & 1) << 32), &v16);
  }
  return result;
}

uint64_t ContentShapeKindResponder.addContentPath(to:kind:in:observer:)(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = result;
  uint64_t v10 = *a2;
  if ((*(void *)(v5 + 216) & *a2) != 0)
  {
    v14[3] = *(void *)(v5 + 216) & *a2;
    swift_beginAccess();
    type metadata accessor for _ContentShapeKindModifier();
    swift_getWitnessTable();
    type metadata accessor for ContentResponderHelper();
    ContentResponderHelper.addContentPath(to:kind:in:observer:)();
    uint64_t result = swift_endAccess();
    uint64_t v11 = *(void *)(v5 + 216);
    if ((v11 & v10) != 0) {
      uint64_t v12 = ~v11;
    }
    else {
      uint64_t v12 = -1;
    }
    v10 &= v12;
  }
  if (v10)
  {
    v14[0] = v10;
    type metadata accessor for DefaultLayoutViewResponder();
    uint64_t v13 = (uint64_t (*)(uint64_t, void *, uint64_t, uint64_t, uint64_t))method lookup function for ViewResponder();
    return v13(v9, v14, a3, a4, a5);
  }
  return result;
}

unint64_t ContentShapeKindResponder.descriptionName.getter()
{
  swift_beginAccess();
  type metadata accessor for _ContentShapeKindModifier();
  swift_getWitnessTable();
  type metadata accessor for ContentResponderHelper();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 62;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = ContentShapeKinds.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 10272;
  v3._object = (void *)0xE200000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8236;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 8745;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  return 0xD00000000000001ALL;
}

uint64_t ContentShapeKindResponder.extendPrintTree(string:)()
{
  uint64_t v1 = *v0 + class metadata base offset for ContentShapeKindResponder;
  type metadata accessor for _ContentShapeKindModifier();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for ContentResponderHelper();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  Swift::String v5 = (char *)v17 - v4;
  Swift::String v6 = (char *)v0 + *(void *)(v1 + 24);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v6, v2);
  ContentResponderHelper.globalPosition.getter();
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v11._countAndFlagsBits = 91;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v12._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 8236;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  swift_beginAccess();
  ContentResponderHelper.size.getter();
  swift_endAccess();
  v14._countAndFlagsBits = Double.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 4202589;
  v15._object = (void *)0xE300000000000000;
  String.append(_:)(v15);
  v17[0] = v8;
  v17[1] = v10;
  type metadata accessor for (CGFloat, CGFloat)();
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v18);
  return swift_bridgeObjectRelease();
}

uint64_t ContentShapeKindResponder.__allocating_init(inputs:viewSubgraph:)()
{
  return ContentShapeKindResponder.init(inputs:viewSubgraph:)();
}

uint64_t ContentShapeKindResponder.init(inputs:viewSubgraph:)()
{
  *(void *)(v0 + 216) = 1;
  type metadata accessor for _ContentShapeKindModifier();
  swift_getWitnessTable();
  ContentResponderHelper.init()();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t ContentShapeKindResponder.__ivar_destroyer()
{
  uint64_t v1 = (char *)v0 + *(void *)(*v0 + class metadata base offset for ContentShapeKindResponder + 24);
  type metadata accessor for _ContentShapeKindModifier();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for ContentResponderHelper();
  uint64_t v3 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(v1, v2);
}

void *ContentShapeKindResponder.deinit()
{
  uint64_t v0 = (void *)DefaultLayoutViewResponder.deinit();
  uint64_t v1 = (char *)v0 + *(void *)(class metadata base offset for ContentShapeKindResponder + *v0 + 24);
  type metadata accessor for _ContentShapeKindModifier();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for ContentResponderHelper();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t ContentShapeKindResponder.__deallocating_deinit()
{
  ContentShapeKindResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t outlined release of Path(uint64_t a1)
{
  return a1;
}

void *initializeBufferWithCopyOfBuffer for _ContentShapeKindModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = *((unsigned char *)a2 + v6);
    *(void *)((((unint64_t)v4 + v6) & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((((unint64_t)a2 + v6) & 0xFFFFFFFFFFFFFFF8)
                                                                                      + 8);
  }
  return v4;
}

uint64_t initializeWithCopy for _ContentShapeKindModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t assignWithCopy for _ContentShapeKindModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t initializeWithTake for _ContentShapeKindModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t assignWithTake for _ContentShapeKindModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  return a1;
}

uint64_t sub_187A4CE9C()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for ContentShapeKindResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ContentShapeKindResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

void type metadata accessor for (CGFloat, CGFloat)()
{
  if (!lazy cache variable for type metadata for (CGFloat, CGFloat))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CGFloat, CGFloat));
    }
  }
}

void __swiftcall SystemPreferencesSidebarListStyle.init()()
{
}

void static SystemPreferencesSidebarListStyle._makeView<A>(value:inputs:)()
{
}

void static SystemPreferencesSidebarListStyle._makeViewList<A>(value:inputs:)()
{
}

ValueMetadata *type metadata accessor for SystemPreferencesSidebarListStyle()
{
  return &type metadata for SystemPreferencesSidebarListStyle;
}

uint64_t NavigationPath.count.getter()
{
  unint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  unint64_t v4 = *(void *)(v0 + 32);
  if ((*(unsigned char *)(v0 + 24) & 1) == 0) {
    goto LABEL_10;
  }
  if (v2 >> 62)
  {
    outlined copy of NavigationPath.Representation(v2, v1, v3, 1);
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = v5 + v6;
  if (__OFADD__(v5, v6))
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v3 >> 62)
  {
LABEL_17:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v8 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
  outlined consume of NavigationPath.Representation(v2, v1, v3, 1);
  BOOL v9 = __OFADD__(v7, v8);
  uint64_t v10 = v7 + v8;
  if (!v9)
  {
LABEL_12:
    if (!(v4 >> 62)) {
      goto LABEL_13;
    }
    goto LABEL_19;
  }
  __break(1u);
LABEL_10:
  if (!(v2 >> 62))
  {
    uint64_t v10 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  outlined consume of NavigationPath.Representation(v2, v1, v3, 0);
  if (!(v4 >> 62))
  {
LABEL_13:
    uint64_t v11 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = v10 + v11;
    if (!__OFADD__(v10, v11)) {
      return result;
    }
LABEL_21:
    __break(1u);
    return result;
  }
LABEL_19:
  swift_bridgeObjectRetain();
  uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t result = v10 + v13;
  if (__OFADD__(v10, v13)) {
    goto LABEL_21;
  }
  return result;
}

uint64_t NavigationPath.updatePossibilities(from:to:into:)(uint64_t result, int64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  int64_t v8 = result;
  uint64_t v10 = *(void *)v3;
  uint64_t v9 = *(void *)(v3 + 8);
  uint64_t v11 = *(void *)(v3 + 16);
  if ((*(unsigned char *)(v3 + 24) & 1) == 0)
  {
    if (a2 >= result)
    {
      if (result == a2) {
        return result;
      }
      uint64_t v18 = *(void *)(v3 + 16);
      uint64_t result = swift_bridgeObjectRetain();
      while (v8 < a2)
      {
        if ((v10 & 0xC000000000000001) != 0)
        {
          uint64_t v12 = MEMORY[0x18C117680](v8, v10);
        }
        else
        {
          if (v8 < 0) {
            goto LABEL_20;
          }
          if ((unint64_t)v8 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_21;
          }
          uint64_t v12 = *(void *)(v10 + 8 * v8 + 32);
          swift_retain();
        }
        (*(void (**)(uint64_t, int64_t))(*(void *)v12 + 168))(a3, v8);
        if (v5)
        {
          outlined consume of NavigationPath.Representation(v10, v9, v18, 0);
          return swift_release();
        }
        ++v8;
        uint64_t result = swift_release();
        if (a2 == v8) {
          return outlined consume of NavigationPath.Representation(v10, v9, v18, 0);
        }
      }
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
    __break(1u);
    return result;
  }
  *(void *)&long long v16 = *(void *)v3;
  *((void *)&v16 + 1) = v9;
  uint64_t v17 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NavigationPath.CodableRepresentation.updatePossibilities(from:to:into:)(v8, a2, a3);
  long long v13 = v16;
  uint64_t v14 = v11;
  char v15 = 1;
  if (!v5) {
    return NavigationPath.items.setter((uint64_t)&v13);
  }
  NavigationPath.items.setter((uint64_t)&v13);
  return swift_willThrow();
}

BOOL NavigationPath.isEmpty.getter()
{
  unint64_t v1 = *(void *)(v0 + 32);
  if (!NavigationPath.Representation.isEmpty.getter()) {
    return 0;
  }
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  return v2 == 0;
}

uint64_t NavigationPath.append<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ItemBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  ItemBox.__allocating_init(_:)((uint64_t)v6);
  NavigationPath.append<A>(box:)();
  return swift_release();
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void v12[4];

  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[0] = v7;
  v12[1] = v8;
  v12[2] = v9;
  v12[3] = v10;
  type metadata accessor for CodableItemBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, a2);
  CodableItemBox.__allocating_init(_:)((uint64_t)v6);
  NavigationPath.append<A>(box:)();
  return swift_release();
}

Swift::Void __swiftcall NavigationPath.removeLast(_:)(Swift::Int a1)
{
  unint64_t v5 = *(void *)(v3 + 32);
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v12) {
      goto LABEL_7;
    }
    swift_bridgeObjectRetain();
    Swift::Int v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    Swift::Int v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v6) {
      goto LABEL_7;
    }
  }
  if (v6 >= a1) {
    Swift::Int v7 = a1;
  }
  else {
    Swift::Int v7 = v6;
  }
  specialized RangeReplaceableCollection<>.removeLast(_:)(v7, v1, v2);
  BOOL v8 = __OFSUB__(a1, v7);
  a1 -= v7;
  if (v8)
  {
    __break(1u);
    return;
  }
LABEL_7:
  if (a1 >= 1)
  {
    uint64_t v9 = *(void *)(v3 + 8);
    uint64_t v10 = *(void *)(v3 + 16);
    char v11 = *(unsigned char *)(v3 + 24);
    *(void *)&long long v16 = *(void *)v3;
    *((void *)&v16 + 1) = v9;
    uint64_t v17 = v10;
    char v18 = v11;
    outlined copy of NavigationPath.Representation(v16, v9, v10, v11);
    NavigationPath.Representation.removeLast(_:)(a1);
    long long v13 = v16;
    uint64_t v14 = v17;
    char v15 = v18;
    NavigationPath.items.setter((uint64_t)&v13);
  }
}

uint64_t NavigationPath.view<A>(basedOn:applying:index:apparentPosition:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(v8 + 24)) {
    goto LABEL_13;
  }
  long long v10 = *a2;
  uint64_t v12 = *((void *)a2 + 2);
  uint64_t v11 = *((void *)a2 + 3);
  uint64_t v13 = *((void *)a2 + 4);
  long long v14 = *(long long *)((char *)a2 + 40);
  uint64_t v15 = *((void *)a2 + 7);
  uint64_t v16 = *((void *)a2 + 8);
  char v17 = *((unsigned char *)a2 + 72);
  uint64_t v18 = *((void *)a2 + 10);
  uint64_t v20 = *(void *)v8;
  uint64_t v19 = *(void *)(v8 + 8);
  uint64_t v21 = *(void *)(v8 + 16);
  uint64_t v36 = v19;
  unint64_t v35 = *(void *)v8 & 0xC000000000000001;
  long long v33 = v14;
  long long v34 = v10;
  uint64_t v32 = v21;
  if (!v35)
  {
    if ((a5 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10) > a5)
    {
      uint64_t v26 = *(void *)(v20 + 8 * a5 + 32);
      outlined copy of NavigationPath.Representation(v20, v19, v21, 0);
      swift_retain();
      goto LABEL_7;
    }
    __break(1u);
LABEL_13:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = MEMORY[0x18C117680](a5, v20);
LABEL_7:
  long long v37 = v34;
  uint64_t v38 = v12;
  uint64_t v39 = v11;
  uint64_t v40 = v13;
  long long v41 = v33;
  uint64_t v42 = v15;
  uint64_t v43 = v16;
  char v44 = v17;
  uint64_t v45 = v18;
  uint64_t v22 = (*(uint64_t (**)(long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v26 + 176))(&v37, a6, a3, a4, a7, a8);
  swift_release();
  if (v35)
  {
    uint64_t v23 = MEMORY[0x18C117680](a5, v20);
  }
  else
  {
    uint64_t v23 = *(void *)(v20 + 8 * a5 + 32);
    swift_retain();
  }
  uint64_t v24 = outlined consume of NavigationPath.Representation(v20, v36, v32, 0);
  (*(void (**)(uint64_t))(*(void *)v23 + 112))(v24);
  swift_release();
  return v22;
}

uint64_t NavigationPath.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v7 = *(void *)v3;
  uint64_t v8 = *(void *)(v3 + 8);
  uint64_t v9 = *(void *)(v3 + 16);
  if (*(unsigned char *)(v3 + 24))
  {
    unint64_t v10 = *(void *)(v3 + 32);
    if (NavigationPath.CodableRepresentation.contains<A>(_:)(a1, a2, a3)) {
      return 1;
    }
    if (!(v10 >> 62))
    {
      unint64_t v13 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v13)
      {
LABEL_13:
        unint64_t v7 = v10 & 0xC000000000000001;
        if ((v10 & 0xC000000000000001) != 0)
        {
          uint64_t v19 = MEMORY[0x18C117680](0, v10);
        }
        else
        {
          if (!*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            return result;
          }
          uint64_t v19 = *(void *)(v10 + 32);
          swift_retain();
        }
        char v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 152))(a1, a2, a3);
        swift_release();
        if (v20)
        {
LABEL_26:
          swift_bridgeObjectRelease();
          return 1;
        }
        uint64_t v9 = 0;
        uint64_t v8 = v10 & 0xFFFFFFFFFFFFFF8;
        uint64_t v12 = v13 - 1;
        while (v12 != v9)
        {
          unint64_t v21 = v9 + 1;
          if (v7)
          {
            unint64_t v13 = MEMORY[0x18C117680](v9 + 1, v10);
            if (__OFADD__(v21, 1)) {
              goto LABEL_40;
            }
          }
          else
          {
            if (v21 >= *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
            {
              __break(1u);
              goto LABEL_46;
            }
            unint64_t v13 = *(void *)(v10 + 8 * v9 + 40);
            swift_retain();
            if (__OFADD__(v21, 1))
            {
LABEL_40:
              __break(1u);
LABEL_41:
              __break(1u);
              goto LABEL_42;
            }
          }
          char v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 152))(a1, a2, a3);
          swift_release();
          ++v9;
          if (v22) {
            goto LABEL_26;
          }
        }
      }
LABEL_49:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_48:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v13 = result;
    if (result) {
      goto LABEL_13;
    }
    goto LABEL_49;
  }
  uint64_t v12 = v7 & 0xFFFFFFFFFFFFFF8;
  if (!(v7 >> 62))
  {
    unint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_6;
    }
LABEL_43:
    uint64_t v26 = v7;
    uint64_t v27 = v8;
    uint64_t v28 = v9;
LABEL_44:
    outlined consume of NavigationPath.Representation(v26, v27, v28, 0);
    return 0;
  }
LABEL_42:
  swift_bridgeObjectRetain();
  unint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10) {
    goto LABEL_43;
  }
LABEL_6:
  unint64_t v13 = v7 & 0xC000000000000001;
  uint64_t v30 = v8;
  if ((v7 & 0xC000000000000001) != 0)
  {
LABEL_46:
    uint64_t v14 = MEMORY[0x18C117680](0, v7);
  }
  else
  {
    if (!*(void *)(v12 + 16))
    {
      __break(1u);
      goto LABEL_48;
    }
    uint64_t v14 = *(void *)(v7 + 32);
    swift_retain();
  }
  char v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 152))(a1, a2, a3);
  swift_release();
  if ((v15 & 1) == 0)
  {
    uint64_t v29 = v9;
    uint64_t v8 = 0;
    uint64_t v9 = v10 - 1;
    while (1)
    {
      if (v9 == v8)
      {
        uint64_t v26 = v7;
        uint64_t v28 = v29;
        uint64_t v27 = v30;
        goto LABEL_44;
      }
      unint64_t v23 = v8 + 1;
      if (v13)
      {
        uint64_t v24 = MEMORY[0x18C117680](v8 + 1, v7);
        if (__OFADD__(v23, 1)) {
          goto LABEL_39;
        }
      }
      else
      {
        if (v23 >= *(void *)(v12 + 16)) {
          goto LABEL_41;
        }
        uint64_t v24 = *(void *)(v7 + 8 * v8 + 40);
        swift_retain();
        if (__OFADD__(v23, 1))
        {
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
      }
      char v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v24 + 152))(a1, a2, a3);
      swift_release();
      ++v8;
      if (v25)
      {
        uint64_t v16 = v7;
        uint64_t v18 = v29;
        uint64_t v17 = v30;
        goto LABEL_37;
      }
    }
  }
  uint64_t v16 = v7;
  uint64_t v17 = v30;
  uint64_t v18 = v9;
LABEL_37:
  outlined consume of NavigationPath.Representation(v16, v17, v18, 0);
  return 1;
}

uint64_t specialized RangeReplaceableCollection<>.removeLast(_:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = result;
    if (result < 0)
    {
      __break(1u);
    }
    else if (!(*v3 >> 62))
    {
      uint64_t v5 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v6 = -v5;
      if (!__OFSUB__(0, v5)) {
        goto LABEL_5;
      }
      goto LABEL_17;
    }
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v6 = -v5;
    if (!__OFSUB__(0, v5))
    {
LABEL_5:
      uint64_t v7 = -v4;
      if (v6 <= 0 && v6 > v7) {
        goto LABEL_20;
      }
      uint64_t result = v5 - v4;
      if (!__OFADD__(v5, v7))
      {
        if (v5 >= result) {
          return specialized Array.replaceSubrange<A>(_:with:)(result, v5, a3, (void (*)(uint64_t))type metadata accessor for NavigationPath_ItemBoxBase);
        }
LABEL_19:
        __break(1u);
LABEL_20:
        __break(1u);
        return result;
      }
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return result;
}

uint64_t specialized Sequence.allSatisfy(_:)(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      uint64_t v3 = 4;
      while (1)
      {
        uint64_t v4 = v3 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v5 = MEMORY[0x18C117680](v3 - 4, a1);
          uint64_t v6 = v3 - 3;
          if (__OFADD__(v4, 1)) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v5 = *(void *)(a1 + 8 * v3);
          swift_retain();
          uint64_t v6 = v3 - 3;
          if (__OFADD__(v4, 1))
          {
LABEL_12:
            __break(1u);
            goto LABEL_13;
          }
        }
        char v7 = (*(uint64_t (**)(void))(*(void *)v5 + 128))();
        swift_release();
        if (v7)
        {
          ++v3;
          if (v6 != v2) {
            continue;
          }
        }
        goto LABEL_15;
      }
    }
  }
  char v7 = 1;
LABEL_15:
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t NavigationPath.items.setter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  int v6 = *(unsigned __int8 *)(a1 + 24);
  unint64_t v7 = *(void *)(v1 + 32);
  if (!(v7 >> 62))
  {
    if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_6:
    if (!v6) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v8) {
    goto LABEL_6;
  }
LABEL_3:
  if (v6)
  {
LABEL_7:
    if (!*(void *)(v4 + 16))
    {
      uint64_t v12 = v3;
      swift_bridgeObjectRetain();
      unint64_t v10 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v10);
      outlined consume of NavigationPath.Representation(v3, v4, v5, v6);
      goto LABEL_10;
    }
LABEL_8:
    uint64_t result = outlined consume of NavigationPath.Representation(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(unsigned char *)(v2 + 24));
    *(void *)uint64_t v2 = v3;
    *(void *)(v2 + 8) = v4;
    *(void *)(v2 + 16) = v5;
    *(unsigned char *)(v2 + 24) = v6;
    return result;
  }
  uint64_t v12 = v3;
LABEL_10:
  unint64_t v11 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v11);
  outlined consume of NavigationPath.Representation(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(unsigned char *)(v2 + 24));
  *(void *)(v2 + 8) = 0;
  *(void *)(v2 + 16) = 0;
  *(void *)uint64_t v2 = v12;
  *(unsigned char *)(v2 + 24) = 0;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 32) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t NavigationPath.codable.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  char v6 = *(unsigned char *)(v1 + 24);
  unint64_t v7 = *(void *)(v1 + 32);
  v9[0] = v3;
  v9[1] = v4;
  v9[2] = v5;
  char v10 = v6;
  outlined copy of NavigationPath.Representation(v3, v4, v5, v6);
  swift_bridgeObjectRetain();
  return NavigationPath.CodableRepresentation.init(items:subsequentItems:)((uint64_t)v9, v7, a1);
}

uint64_t NavigationPath.CodableRepresentation.init(items:subsequentItems:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (Array<A>.isCodable.getter(a2))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(a2);
      outlined consume of NavigationPath.Representation(v5, v6, v7, 1);
      uint64_t result = outlined consume of NavigationPath.Representation(v5, v6, v7, 1);
      uint64_t v10 = v7;
LABEL_6:
      *a3 = v5;
      a3[1] = v6;
      a3[2] = v10;
      return result;
    }
    swift_bridgeObjectRelease();
    outlined consume of NavigationPath.Representation(v5, v6, v7, 1);
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v11 = swift_bridgeObjectRetain();
    char v12 = Array<A>.isCodable.getter(v11);
    uint64_t result = outlined consume of NavigationPath.Representation(v5, v6, v7, 0);
    if (v12)
    {
      uint64_t v10 = MEMORY[0x1E4FBC860];
      uint64_t v6 = MEMORY[0x1E4FBC860];
      goto LABEL_6;
    }
  }
  uint64_t result = outlined consume of NavigationPath.Representation(v5, v6, v7, v8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t NavigationPath.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v15[2] = a2;
  v15[3] = a3;
  v15[4] = a4;
  v15[5] = partial apply for implicit closure #1 in NavigationPath.init<A>(_:);
  v15[6] = v10;
  unint64_t v11 = (char *)type metadata accessor for NavigationPath_ItemBoxBase();
  uint64_t v13 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@owned ItemBox<A.Sequence.Element>), (uint64_t)v15, a2, v11, MEMORY[0x1E4FBC248], a3, MEMORY[0x1E4FBC278], v12);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  uint64_t result = swift_release();
  *(void *)(a5 + 8) = 0;
  *(void *)(a5 + 16) = 0;
  *(void *)a5 = v13;
  *(unsigned char *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a5 + 40) = 0;
  return result;
}

unsigned char *implicit closure #1 in NavigationPath.init<A>(_:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v7 - v4;
  type metadata accessor for ItemBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, AssociatedTypeWitness);
  return ItemBox.__allocating_init(_:)((uint64_t)v5);
}

unsigned char *ItemBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)swift_allocObject();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 192) - 8) + 32))(&v2[*(void *)(*(void *)v2 + 208)], a1);
  v2[16] = 0;
  return v2;
}

uint64_t NavigationPath.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a2;
  v14[3] = a3;
  void v14[4] = a4;
  v14[5] = a5;
  v14[6] = a6;
  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = a5;
  v19[6] = a6;
  v19[7] = partial apply for implicit closure #1 in NavigationPath.init<A>(_:);
  v19[8] = v14;
  char v15 = (char *)type metadata accessor for NavigationPath_ItemBoxBase();
  uint64_t v17 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@owned CodableItemBox<A.Sequence.Element>), (uint64_t)v19, a2, v15, MEMORY[0x1E4FBC248], a3, MEMORY[0x1E4FBC278], v16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  uint64_t result = swift_release();
  *(void *)(a7 + 8) = 0;
  *(void *)(a7 + 16) = 0;
  *(void *)a7 = v17;
  *(unsigned char *)(a7 + 24) = 0;
  *(void *)(a7 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a7 + 40) = 0;
  return result;
}

unsigned char *implicit closure #1 in NavigationPath.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)v16 - v12;
  v16[0] = v14;
  v16[1] = a4;
  v16[2] = a5;
  v16[3] = a6;
  type metadata accessor for CodableItemBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, AssociatedTypeWitness);
  return CodableItemBox.__allocating_init(_:)((uint64_t)v13);
}

unsigned char *CodableItemBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)swift_allocObject();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 192) - 8) + 32))(&v2[*(void *)(*(void *)v2 + 224)], a1);
  v2[16] = 0;
  return v2;
}

uint64_t NavigationPath.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_4;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_4;
    }
  }
  if (!*(void *)(v4 + 16))
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v11) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (v9) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    char v8 = 0;
    uint64_t v3 = MEMORY[0x1E4FBC860];
    goto LABEL_6;
  }
LABEL_4:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
LABEL_5:
  char v8 = 1;
LABEL_6:
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 40) = 0;
  return result;
}

void NavigationPath.Representation.removeLast(_:)(Swift::Int a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = *(void *)v1;
  uint64_t v6 = (uint64_t)v1 + 8;
  uint64_t v5 = *((void *)v1 + 1);
  unint64_t v7 = *((void *)v1 + 2);
  if ((*((unsigned char *)v1 + 24) & 1) == 0)
  {
    unint64_t v29 = *(void *)v1;
    if (!(v4 >> 62))
    {
      Swift::Int v15 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v15 < a1)
      {
LABEL_19:
        _StringGuts.grow(_:)(53);
        v18._object = (void *)0x800000018832F940;
        v18._countAndFlagsBits = 0xD000000000000015;
        String.append(_:)(v18);
        v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v20._countAndFlagsBits = 0xD000000000000016;
        v20._object = (void *)0x800000018832F960;
        String.append(_:)(v20);
        outlined consume of NavigationPath.Representation(v4, v5, v7, 0);
        v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v21);
        swift_bridgeObjectRelease();
        v22._countAndFlagsBits = 0x736D65746920;
        v22._object = (void *)0xE600000000000000;
        String.append(_:)(v22);
LABEL_24:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
LABEL_12:
      outlined consume of NavigationPath.Representation(v4, v5, v7, 0);
      specialized RangeReplaceableCollection<>.removeLast(_:)(a1, v16, v17);
      *(void *)uint64_t v2 = v29;
      *(void *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      *(unsigned char *)(v6 + 16) = 0;
      return;
    }
LABEL_18:
    swift_bridgeObjectRetain();
    if (_CocoaArrayWrapper.endIndex.getter() < a1) {
      goto LABEL_19;
    }
    goto LABEL_12;
  }
  long long v30 = *v1;
  if (v4 >> 62)
  {
    outlined copy of NavigationPath.Representation(v4, v5, v7, 1);
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v9 = *(void *)(v5 + 16);
  uint64_t v10 = v8 + v9;
  if (__OFADD__(v8, v9))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (!(v7 >> 62))
  {
    uint64_t v11 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    Swift::Int v12 = v10 + v11;
    if (!__OFADD__(v10, v11)) {
      goto LABEL_7;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  Swift::Int v12 = v10 + v23;
  if (__OFADD__(v10, v23)) {
    goto LABEL_22;
  }
LABEL_7:
  if (v12 < a1)
  {
LABEL_23:
    _StringGuts.grow(_:)(53);
    v24._object = (void *)0x800000018832F940;
    v24._countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v24);
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 0xD000000000000016;
    v26._object = (void *)0x800000018832F960;
    String.append(_:)(v26);
    outlined consume of NavigationPath.Representation(v4, v5, v7, 1);
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0x736D65746920;
    v28._object = (void *)0xE600000000000000;
    String.append(_:)(v28);
    goto LABEL_24;
  }
  outlined consume of NavigationPath.Representation(v4, v5, v7, 1);
  if (v12 == a1)
  {
    outlined consume of NavigationPath.Representation(v4, v5, v7, 1);
    unint64_t v14 = 0;
    long long v13 = MEMORY[0x1E4FBC860];
  }
  else
  {
    NavigationPath.CodableRepresentation.removeLast(_:)(a1);
    long long v13 = v30;
    unint64_t v14 = v7;
  }
  *uint64_t v2 = v13;
  *((void *)v2 + 2) = v14;
  *((unsigned char *)v2 + 24) = v12 != a1;
}

Swift::Void __swiftcall NavigationPath.CodableRepresentation.removeLast(_:)(Swift::Int a1)
{
  Swift::Int v3 = a1;
  Swift::Int v4 = *(void *)(v2[1] + 16);
  if (!v4) {
    goto LABEL_9;
  }
  if (v4 >= a1) {
    Swift::Int v5 = a1;
  }
  else {
    Swift::Int v5 = *(void *)(v2[1] + 16);
  }
  if (v5)
  {
    if (v5 < 0)
    {
LABEL_27:
      __break(1u);
LABEL_28:
      __break(1u);
      return;
    }
    specialized Array.replaceSubrange<A>(_:with:)(0, v5);
  }
  BOOL v6 = __OFSUB__(v3, v5);
  v3 -= v5;
  if (v6)
  {
    __break(1u);
  }
  else
  {
LABEL_9:
    if (v3 < 1) {
      return;
    }
    if (!(*v2 >> 62))
    {
      uint64_t v7 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t v8 = -v7;
      if (!__OFSUB__(0, v7)) {
        goto LABEL_12;
      }
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v8 = -v7;
  if (__OFSUB__(0, v7)) {
    goto LABEL_24;
  }
LABEL_12:
  uint64_t v9 = -v3;
  if (v8 <= 0 && v8 > v9) {
    goto LABEL_28;
  }
  uint64_t v11 = v7 - v3;
  if (__OFADD__(v7, v9)) {
    goto LABEL_25;
  }
  if (v7 < v11)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  specialized Array.replaceSubrange<A>(_:with:)(v11, v7, v1, (void (*)(uint64_t))type metadata accessor for NavigationPath_ItemBoxBase);
}

uint64_t NavigationPath.append<A>(box:)()
{
  if (*(unsigned char *)(v0 + 24))
  {
    uint64_t v1 = swift_retain();
    MEMORY[0x18C115B40](v1);
    if (*(void *)((*(void *)(v0 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v0 + 32) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    return specialized Array._endMutation()();
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 8);
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v8 = *(void *)v0;
    outlined copy of NavigationPath.Representation(v8, v3, v4, 0);
    uint64_t v5 = swift_retain();
    MEMORY[0x18C115B40](v5);
    if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v6[1] = 0;
    _OWORD v6[2] = 0;
    v6[0] = v8;
    char v7 = 0;
    return NavigationPath.items.setter((uint64_t)v6);
  }
}

void NavigationPath.CodableRepresentation.updatePossibilities(from:to:into:)(int64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t v5 = v4;
  int64_t v8 = *v3;
  uint64_t v9 = v3[1];
  unint64_t v10 = v3[2];
  if ((unint64_t)v8 >> 62) {
    goto LABEL_25;
  }
  uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v12 = *(void *)(v9 + 16);
    uint64_t v13 = v11 + v12;
    if (__OFADD__(v11, v12))
    {
      __break(1u);
    }
    else if (!(v10 >> 62))
    {
      uint64_t v14 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v10 = v8;
      goto LABEL_6;
    }
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    int64_t v8 = v13 + v14;
    if (__OFADD__(v13, v14)) {
      break;
    }
    if (v8 < a1) {
      goto LABEL_29;
    }
    if (v8 == a1) {
      return;
    }
    while (a1 < v8)
    {
      unint64_t v15 = NavigationPath.CodableRepresentation.item(at:given:)(a1, *(void *)(a3 + 32));
      if (v5)
      {
        unint64_t v10 = v5;
        unint64_t v5 = 0;
        id v16 = (id)v10;
        id v17 = (id)v10;
        uint64_t v9 = type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for Error);
        int v18 = swift_dynamicCast();

        if (v18)
        {
          swift_willThrow();
          return;
        }
        id v19 = (id)v10;
        if (swift_dynamicCast())
        {
          uint64_t v9 = v23;
          if (v23 >= 2)
          {

            lazy protocol witness table accessor for type NavigationPath.Error and conformance NavigationPath.Error();
            swift_allocError();
            *Swift::String v20 = v22;
            v20[1] = v23;
            swift_willThrow();

            return;
          }
          outlined consume of NavigationPath.Error(v22, v23);
        }
      }
      else
      {
        unint64_t v10 = v15;
        if (a1 < a2) {
          (*(void (**)(uint64_t, int64_t))(*(void *)v15 + 168))(a3, a1);
        }
        swift_release();
      }
      if (v8 == ++a1) {
        return;
      }
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_29:
  __break(1u);
}

uint64_t NavigationPath.CodableRepresentation.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *v4;
  unint64_t v23 = v4[2];
  if ((unint64_t)*v4 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    if (!v9) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v9) {
      goto LABEL_19;
    }
  }
  unint64_t v10 = v8 & 0xC000000000000001;
  if ((v8 & 0xC000000000000001) != 0)
  {
LABEL_36:
    uint64_t v11 = MEMORY[0x18C117680](0, v8);
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_38;
    }
    uint64_t v11 = *(void *)(v8 + 32);
    swift_retain();
  }
  char v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 152))(a1, a2, a3);
  swift_release();
  if (v12)
  {
LABEL_7:
    uint64_t v9 = 1;
LABEL_40:
    swift_bridgeObjectRelease();
    return v9;
  }
  uint64_t v13 = 0;
  uint64_t v3 = v9 - 1;
  while (v3 != v13)
  {
    unint64_t v16 = v13 + 1;
    if (v10)
    {
      uint64_t v14 = MEMORY[0x18C117680](v13 + 1, v8);
      if (__OFADD__(v16, 1)) {
        goto LABEL_16;
      }
    }
    else
    {
      if (v16 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_17;
      }
      uint64_t v14 = *(void *)(v8 + 8 * v13 + 40);
      swift_retain();
      if (__OFADD__(v16, 1))
      {
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
    }
    char v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 152))(a1, a2, a3);
    swift_release();
    ++v13;
    if (v15) {
      goto LABEL_7;
    }
  }
LABEL_19:
  swift_bridgeObjectRelease();
  uint64_t v3 = v23;
  if (!(v23 >> 62))
  {
    uint64_t v8 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_21;
    }
LABEL_39:
    uint64_t v9 = 0;
    goto LABEL_40;
  }
LABEL_38:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v8 = result;
  if (!result) {
    goto LABEL_39;
  }
LABEL_21:
  if ((v3 & 0xC000000000000001) != 0)
  {
    uint64_t v18 = MEMORY[0x18C117680](0, v3);
LABEL_24:
    char v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 152))(a1, a2, a3);
    swift_release();
    if (v19)
    {
      uint64_t v9 = 1;
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v20 = v8 - 1;
      while (1)
      {
        uint64_t v9 = v20 != v10;
        if (v20 == v10) {
          break;
        }
        unint64_t v22 = v10 + 1;
        if ((v3 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = MEMORY[0x18C117680](v10 + 1, v3);
          if (__OFADD__(v22, 1)) {
            goto LABEL_34;
          }
        }
        else
        {
          if (v22 >= *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_35;
          }
          uint64_t v8 = *(void *)(v3 + 8 * v10 + 40);
          swift_retain();
          if (__OFADD__(v22, 1))
          {
LABEL_34:
            __break(1u);
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
        }
        char v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v8 + 152))(a1, a2, a3);
        swift_release();
        ++v10;
        if (v21) {
          goto LABEL_40;
        }
      }
    }
    goto LABEL_40;
  }
  if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v18 = *(void *)(v3 + 32);
    swift_retain();
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

unint64_t NavigationPath.CodableRepresentation.item(at:given:)(unint64_t a1, unint64_t a2)
{
  uint64_t v4 = v3;
  unint64_t v5 = v2;
  unint64_t v62 = a1;
  uint64_t v64 = type metadata accessor for String.Encoding();
  char v7 = *(unsigned char **)(v64 - 8);
  v8.n128_f64[0] = MEMORY[0x1F4188790](v64);
  v63 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *v2;
  if (v10 >> 62)
  {
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v12 = *v5;
  unint64_t result = v62;
  if (v11 <= (uint64_t)v62)
  {
    if (!(v12 >> 62))
    {
      uint64_t v15 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
      BOOL v16 = __OFSUB__(v62, v15);
      uint64_t v17 = v62 - v15;
      if (!v16) {
        goto LABEL_10;
      }
LABEL_50:
      __break(1u);
      goto LABEL_51;
    }
  }
  else
  {
    if ((v12 & 0xC000000000000001) != 0) {
      return MEMORY[0x18C117680](v8);
    }
    if ((v62 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) > v62)
    {
      unint64_t v14 = v12 + 8 * v62;
LABEL_33:
      char v7 = *(unsigned char **)(v14 + 32);
      swift_retain();
      return (unint64_t)v7;
    }
    __break(1u);
  }
  swift_bridgeObjectRetain();
  uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  unint64_t result = v62;
  BOOL v16 = __OFSUB__(v62, v55);
  uint64_t v17 = v62 - v55;
  if (v16) {
    goto LABEL_50;
  }
LABEL_10:
  unint64_t v61 = a2;
  uint64_t v18 = v5 + 1;
  uint64_t v19 = *(void *)(v5[1] + 16);
  unint64_t result = v17 - v19;
  if (v17 < v19)
  {
    v60 = (void (**)(char *, uint64_t))(v7 + 8);
    long long v58 = xmmword_18834BB80;
    v59 = v5;
    v57 = v5 + 1;
    while (1)
    {
      uint64_t v20 = (void *)*v18;
      if (!*(void *)(*v18 + 16))
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
        goto LABEL_44;
      }
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v21 = v20[2];
        if (!v21) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew()(v20);
        uint64_t v21 = v20[2];
        if (!v21) {
          goto LABEL_42;
        }
      }
      uint64_t v66 = v17;
      uint64_t v22 = v21 - 1;
      unint64_t v23 = &v20[4 * v22];
      uint64_t v25 = v23[4];
      uint64_t v24 = v23[5];
      v20[2] = v22;
      *uint64_t v18 = v20;
      Swift::String v26 = v63;
      static String.Encoding.utf8.getter();
      uint64_t v27 = String.data(using:allowLossyConversion:)();
      a2 = v28;
      swift_bridgeObjectRelease();
      (*v60)(v26, v64);
      if (a2 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type NavigationPath.Error and conformance NavigationPath.Error();
        swift_allocError();
        _OWORD *v49 = xmmword_18834BB90;
        swift_willThrow();
        goto LABEL_38;
      }
      uint64_t v65 = v4;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      uint64_t v29 = JSONDecoder.init()();
      type metadata accessor for _ContiguousArrayStorage<(CodingUserInfoKey, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(CodingUserInfoKey, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (CodingUserInfoKey, Any), MEMORY[0x1E4FBBE00]);
      type metadata accessor for (CodingUserInfoKey, Any)();
      uint64_t v31 = v30 - 8;
      unint64_t v32 = (*(unsigned __int8 *)(*(void *)(v30 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v30 - 8) + 80);
      uint64_t v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = v58;
      uint64_t v34 = *(int *)(v31 + 56);
      if (one-time initialization token for navigationPathTypesByTag != -1) {
        swift_once();
      }
      unint64_t v35 = v33 + v32;
      uint64_t v36 = (unint64_t *)(v33 + v32 + v34);
      uint64_t v37 = type metadata accessor for CodingUserInfoKey();
      uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)static CodingUserInfoKey.navigationPathTypesByTag);
      (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16))(v35, v38, v37);
      type metadata accessor for [String : Decodable & Encodable.Type]();
      v36[3] = v39;
      unint64_t v40 = v61;
      *uint64_t v36 = v61;
      swift_bridgeObjectRetain();
      specialized Dictionary.init(dictionaryLiteral:)(v33);
      dispatch thunk of JSONDecoder.userInfo.setter();
      unint64_t v5 = v59;
      if (!*(void *)(v40 + 16)) {
        goto LABEL_36;
      }
      swift_bridgeObjectRetain();
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v24);
      if ((v42 & 1) == 0) {
        break;
      }
      uint64_t v43 = *(void *)(*(void *)(v40 + 56) + 24 * v41);
      swift_bridgeObjectRelease_n();
      uint64_t v44 = v65;
      uint64_t v45 = decode #1 <A>(_:) in NavigationPath.CodableRepresentation.item(at:given:)(v43, v29, v27, a2, v43);
      uint64_t v4 = v44;
      if (v44) {
        goto LABEL_37;
      }
      char v7 = v45;
      uint64_t v46 = swift_retain();
      MEMORY[0x18C115B40](v46);
      uint64_t v18 = v57;
      if (*(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_release();
      outlined consume of Data?(v27, a2);
      uint64_t v47 = v66;
      if (!v66) {
        return (unint64_t)v7;
      }
      swift_release();
      BOOL v16 = __OFSUB__(v47, 1);
      uint64_t v17 = v47 - 1;
      if (v16) {
        goto LABEL_43;
      }
    }
    swift_bridgeObjectRelease();
LABEL_36:
    lazy protocol witness table accessor for type NavigationPath.Error and conformance NavigationPath.Error();
    swift_allocError();
    uint64_t *v50 = v25;
    v50[1] = v24;
    swift_willThrow();
LABEL_37:
    swift_release();
    outlined consume of Data?(v27, a2);
    uint64_t v18 = v57;
LABEL_38:
    uint64_t v67 = 0;
    unint64_t v68 = 0xE000000000000000;
    _StringGuts.grow(_:)(141);
    v51._object = (void *)0x800000018832F7F0;
    v51._countAndFlagsBits = 0xD000000000000032;
    String.append(_:)(v51);
    unint64_t v69 = v62;
    v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._countAndFlagsBits = 0xD000000000000059;
    v53._object = (void *)0x800000018832F830;
    String.append(_:)(v53);
    char v7 = (unsigned char *)v68;
    MEMORY[0x18C112B90](v67, v68);
    swift_bridgeObjectRelease();
    int64_t v54 = *(void *)(*v18 + 16);
    unint64_t result = v66;
    if (v54 < v66) {
      goto LABEL_53;
    }
    specialized Array.replaceSubrange<A>(_:with:)(v66, v54);
    swift_bridgeObjectRelease();
    _OWORD v5[2] = MEMORY[0x1E4FBC860];
    swift_willThrow();
    return (unint64_t)v7;
  }
  unint64_t v48 = v5[2];
  if ((v48 & 0xC000000000000001) != 0) {
    return MEMORY[0x18C117680](v8);
  }
  if ((result & 0x8000000000000000) != 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (result < *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    unint64_t v14 = v48 + 8 * result;
    goto LABEL_33;
  }
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

uint64_t Array<A>.isCodable.getter(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_21:
    BOOL v9 = 1;
LABEL_22:
    swift_bridgeObjectRelease();
    return v9;
  }
LABEL_20:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_21;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = MEMORY[0x18C117680](0, a1);
    uint64_t v4 = v5;
LABEL_6:
    char v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 128))(v5);
    swift_release();
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v2 - 1;
      while (1)
      {
        BOOL v9 = v8 == v7;
        if (v8 == v7) {
          break;
        }
        unint64_t v10 = v7 + 1;
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v11 = MEMORY[0x18C117680](v7 + 1, a1);
          if (__OFADD__(v10, 1)) {
            goto LABEL_18;
          }
        }
        else
        {
          if (v10 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_19;
          }
          uint64_t v11 = *(void *)(a1 + 8 * v7 + 40);
          swift_retain();
          if (__OFADD__(v10, 1))
          {
LABEL_18:
            __break(1u);
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        char v12 = (*(uint64_t (**)(void))(*(void *)v11 + 128))();
        swift_release();
        ++v7;
        if ((v12 & 1) == 0) {
          goto LABEL_22;
        }
      }
    }
    else
    {
      BOOL v9 = 0;
    }
    goto LABEL_22;
  }
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = swift_retain();
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t NavigationPath.CodableRepresentation.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v2)
  {
    __swift_project_boxed_opaque_existential_1(v19, v20);
    char v5 = dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter();
    char v6 = (void *)MEMORY[0x1E4FBC860];
    uint64_t v21 = a2;
    if ((v5 & 1) == 0)
    {
      do
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, v20);
        uint64_t v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        uint64_t v11 = v10;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, v20);
        uint64_t v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
        uint64_t v14 = v13;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        }
        unint64_t v16 = v6[2];
        unint64_t v15 = v6[3];
        if (v16 >= v15 >> 1) {
          char v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v15 > 1), v16 + 1, 1, v6);
        }
        _OWORD v6[2] = v16 + 1;
        uint64_t v17 = &v6[4 * v16];
        v17[4] = v9;
        v17[5] = v11;
        v17[6] = v12;
        v17[7] = v14;
        __swift_project_boxed_opaque_existential_1(v19, v20);
      }
      while ((dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter() & 1) == 0);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    uint64_t v7 = v21;
    uint64_t v8 = MEMORY[0x1E4FBC860];
    *uint64_t v21 = MEMORY[0x1E4FBC860];
    v7[1] = v6;
    v7[2] = v8;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t NavigationPath.CodableRepresentation.encode(to:)(void *a1)
{
  unint64_t v3 = *v1;
  unint64_t v15 = v1[1];
  unint64_t v4 = v1[2];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    unint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v16 = v3;
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    unint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    unint64_t v16 = v3;
    if (v5)
    {
LABEL_3:
      uint64_t v19 = v4 & 0xFFFFFFFFFFFFFF8;
      do
      {
        BOOL v6 = __OFSUB__(v5--, 1);
        if (v6)
        {
          __break(1u);
LABEL_32:
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_30;
        }
        if ((v4 & 0xC000000000000001) != 0)
        {
          uint64_t v7 = MEMORY[0x18C117680](v5, v4);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            swift_bridgeObjectRelease();
            goto LABEL_30;
          }
          if (v5 >= *(void *)(v19 + 16)) {
            goto LABEL_34;
          }
          uint64_t v7 = *(void *)(v4 + 32 + 8 * v5);
          swift_retain();
        }
        (*(void (**)(void))(*(void *)v7 + 144))();
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        if (v2) {
          goto LABEL_32;
        }
        uint64_t v8 = swift_bridgeObjectRelease();
        (*(void (**)(uint64_t))(*(void *)v7 + 136))(v8);
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
        swift_release();
        swift_bridgeObjectRelease();
      }
      while (v5);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(v15 + 16);
  if (v9)
  {
    uint64_t v10 = swift_bridgeObjectRetain() + 56;
    while (1)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      swift_bridgeObjectRelease();
      if (v2) {
        goto LABEL_35;
      }
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      swift_bridgeObjectRelease();
      v10 += 32;
      if (!--v9)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  if (v16 >> 62) {
    goto LABEL_42;
  }
  unint64_t v11 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v11; unint64_t v11 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v19 = v16 & 0xFFFFFFFFFFFFFF8;
    while (1)
    {
      BOOL v6 = __OFSUB__(v11--, 1);
      if (v6) {
        break;
      }
      if ((v16 & 0xC000000000000001) != 0)
      {
        uint64_t v12 = MEMORY[0x18C117680](v11, v16);
      }
      else
      {
        if ((v11 & 0x8000000000000000) != 0) {
          goto LABEL_40;
        }
        if (v11 >= *(void *)(v19 + 16)) {
          goto LABEL_41;
        }
        uint64_t v12 = *(void *)(v16 + 32 + 8 * v11);
        swift_retain();
      }
      (*(void (**)(void))(*(void *)v12 + 144))();
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      if (v2) {
        goto LABEL_32;
      }
      uint64_t v13 = swift_bridgeObjectRelease();
      (*(void (**)(uint64_t))(*(void *)v12 + 136))(v13);
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v17, v18);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      swift_release();
      swift_bridgeObjectRelease();
      if (!v11) {
        goto LABEL_30;
      }
    }
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    swift_bridgeObjectRetain();
  }
LABEL_30:
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
}

unsigned char *decode #1 <A>(_:) in NavigationPath.CodableRepresentation.item(at:given:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v14 - v11;
  uint64_t result = (unsigned char *)dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (!v5)
  {
    type metadata accessor for DecodedItemBox();
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, a5);
    return DecodedItemBox.__allocating_init(_:)((uint64_t)v9);
  }
  return result;
}

unsigned char *DecodedItemBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = (unsigned char *)swift_allocObject();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 192) - 8) + 32))(&v2[*(void *)(*(void *)v2 + 216)], a1);
  v2[16] = 0;
  return v2;
}

uint64_t protocol witness for Decodable.init(from:) in conformance NavigationPath.CodableRepresentation@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return NavigationPath.CodableRepresentation.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance NavigationPath.CodableRepresentation(void *a1)
{
  return NavigationPath.CodableRepresentation.encode(to:)(a1);
}

uint64_t protocol witness for Error._domain.getter in conformance NavigationPath.Error()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance NavigationPath.Error()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance NavigationPath.Error()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance NavigationPath.Error()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t NavigationPath.mutateWithCodableCollectionProxy(transform:)(void (*a1)(uint64_t *))
{
  if (*(unsigned char *)(v1 + 24))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v2 = v1;
    uint64_t v4 = *(void *)v1;
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v6 = *(void *)(v2 + 16);
    unint64_t v7 = swift_bridgeObjectRetain();
    if (specialized Sequence.allSatisfy(_:)(v7))
    {
      uint64_t v13 = v4;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v9 = MEMORY[0x1E4FBC860];
      char v12 = 0;
      NavigationPath.items.setter((uint64_t)&v9);
      a1(&v13);
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v9 = v13;
      char v12 = 0;
      return NavigationPath.items.setter((uint64_t)&v9);
    }
    else
    {
      outlined consume of NavigationPath.Representation(v4, v5, v6, 0);
      lazy protocol witness table accessor for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError();
      swift_allocError();
      return swift_willThrow();
    }
  }
  return result;
}

uint64_t NavigationPath.mutateWithCollectionProxy(transform:)(void (*a1)(uint64_t *))
{
  if (v1[3])
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v8 = *v1;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v4 = MEMORY[0x1E4FBC860];
    char v7 = 0;
    swift_bridgeObjectRetain();
    NavigationPath.items.setter((uint64_t)&v4);
    a1(&v8);
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v4 = v8;
    char v7 = 0;
    return NavigationPath.items.setter((uint64_t)&v4);
  }
  return result;
}

uint64_t static NavigationPath.CollectionProxyError.== infix(_:_:)()
{
  return 1;
}

void NavigationPath.CollectionProxyError.hash(into:)()
{
}

Swift::Int NavigationPath.CollectionProxyError.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t NavigationPath.CodableCollectionProxy.startIndex.getter()
{
  return 0;
}

unint64_t NavigationPath.CodableCollectionProxy.subscript.getter@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      uint64_t v5 = *(void *)(v4 + 8 * result + 32);
      uint64_t v6 = swift_retain();
      goto LABEL_5;
    }
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v6 = MEMORY[0x18C117680]();
  uint64_t v5 = v6;
LABEL_5:
  (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v5 + 120))(&v7, v6);
  uint64_t result = swift_release();
  if (v8) {
    return outlined init with take of Decodable & Encodable & Hashable(&v7, a2);
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v6 = a3;
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    if (!(*v3 >> 62))
    {
      uint64_t v8 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v8 >= a2) {
        goto LABEL_4;
      }
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v8 < v4) {
    goto LABEL_39;
  }
LABEL_4:
  uint64_t v8 = v4 - v5;
  if (__OFSUB__(v4, v5))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v7 = v6 >> 62;
  if (!(v6 >> 62))
  {
    uint64_t v9 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v10 = v9 - v8;
    if (!__OFSUB__(v9, v8)) {
      goto LABEL_7;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v12 = v11 + v33;
    if (!__OFADD__(v11, v33)) {
      goto LABEL_9;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v13 = *v3;
    goto LABEL_16;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v10 = v9 - v8;
  if (__OFSUB__(v9, v8)) {
    goto LABEL_43;
  }
LABEL_7:
  uint64_t v33 = v10;
  if (*v3 >> 62) {
    goto LABEL_44;
  }
  uint64_t v11 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v12 = v11 + v10;
  if (__OFADD__(v11, v10)) {
    goto LABEL_46;
  }
LABEL_9:
  unint64_t v13 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v3 = v13;
  uint64_t v11 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v13 & 0x8000000000000000) == 0
    && (v13 & 0x4000000000000000) == 0)
  {
    uint64_t v15 = v13 & 0xFFFFFFFFFFFFFF8;
    if (v12 <= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_19;
    }
    uint64_t v11 = 1;
  }
  uint64_t v32 = v5;
  uint64_t v8 = v4;
  uint64_t v4 = v9;
  uint64_t v9 = v7;
  uint64_t v7 = v6;
  if (v13 >> 62) {
    goto LABEL_47;
  }
  uint64_t v16 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v16 <= v12) {
    uint64_t v16 = v12;
  }
  swift_bridgeObjectRetain();
  *unint64_t v3 = MEMORY[0x18C117690](v11, v16, 1, v13);
  swift_bridgeObjectRelease();
  uint64_t v15 = *v3 & 0xFFFFFFFFFFFFFF8;
  unint64_t v6 = v7;
  uint64_t v7 = v9;
  uint64_t v9 = v4;
  uint64_t v4 = v8;
  uint64_t v5 = v32;
LABEL_19:
  uint64_t v17 = v15 + 32;
  uint64_t v18 = v15 + 32 + 8 * v5;
  type metadata accessor for NavigationPath_ItemBoxBase();
  swift_arrayDestroy();
  uint64_t v19 = v33;
  if (!v33) {
    goto LABEL_29;
  }
  if (!(*v3 >> 62))
  {
    uint64_t v20 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v21 = v20 - v4;
    if (!__OFSUB__(v20, v4)) {
      goto LABEL_22;
    }
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  swift_bridgeObjectRetain();
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v19 = v33;
  uint64_t v21 = v30 - v4;
  if (__OFSUB__(v30, v4)) {
    goto LABEL_50;
  }
LABEL_22:
  if (v21 < 0)
  {
LABEL_55:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v22 = (char *)(v18 + 8 * v9);
  unint64_t v23 = (char *)(v17 + 8 * v4);
  if (v22 != v23 || v22 >= &v23[8 * v21])
  {
    memmove(v22, v23, 8 * v21);
    uint64_t v19 = v33;
  }
  if (*v3 >> 62)
  {
LABEL_51:
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v25 = v31 + v33;
    if (!__OFADD__(v31, v33)) {
      goto LABEL_28;
    }
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v24 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v25 = v24 + v19;
  if (__OFADD__(v24, v19)) {
    goto LABEL_53;
  }
LABEL_28:
  *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10) = v25;
LABEL_29:
  if (v9 >= 1)
  {
    if (v7)
    {
      unint64_t v26 = swift_bridgeObjectRetain();
      uint64_t v27 = specialized _copyCollectionToContiguousArray<A>(_:)(v26);
      swift_bridgeObjectRelease();
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((uint64_t)(v27 + 4), v27[2], v9, v18, v28, (void (*)(uint64_t))type metadata accessor for NavigationPath_ItemBoxBase);
      swift_release();
      goto LABEL_34;
    }
    if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) == v9)
    {
      swift_arrayInitWithCopy();
      goto LABEL_34;
    }
    goto LABEL_54;
  }
LABEL_34:
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v10 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  uint64_t v14 = (uint64_t)&v5[56 * a1 + 32];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v16 = *((void *)v5 + 2);
  BOOL v17 = __OFSUB__(v16, a2);
  uint64_t v18 = v16 - a2;
  if (v17) {
    goto LABEL_26;
  }
  if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v14 + 56);
    uint64_t v19 = &v5[56 * a2 + 32];
    if ((char *)(v14 + 56) != v19 || result >= &v19[56 * v18]) {
      uint64_t result = (char *)memmove(result, v19, 56 * v18);
    }
    uint64_t v20 = *((void *)v5 + 2);
    BOOL v17 = __OFADD__(v20, v9);
    uint64_t v21 = v20 + v9;
    if (!v17)
    {
      *((void *)v5 + 2) = v21;
LABEL_20:
      long long v22 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)a3;
      *(_OWORD *)(v14 + 16) = v22;
      *(_OWORD *)(v14 + 32) = *(_OWORD *)(a3 + 32);
      *(void *)(v14 + 48) = *(void *)(a3 + 48);
      *unint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v3;
  char *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v10 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v13, 1, v5);
    uint64_t v5 = result;
  }
  uint64_t v14 = &v5[8 * a1 + 32];
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = *((void *)v5 + 2);
  uint64_t v16 = __OFSUB__(v15, a2);
  BOOL v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    uint64_t result = v14 + 8;
    uint64_t v18 = &v5[8 * a2 + 32];
    if (v14 + 8 != v18 || result >= &v18[8 * v17]) {
      uint64_t result = (char *)memmove(result, v18, 8 * v17);
    }
    uint64_t v19 = *((void *)v5 + 2);
    uint64_t v16 = __OFADD__(v19, v9);
    uint64_t v20 = v19 + v9;
    if (!v16)
    {
      *((void *)v5 + 2) = v20;
LABEL_20:
      *(void *)uint64_t v14 = a3;
      *unint64_t v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, unint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v8 = a3;
    int64_t v4 = a2;
    uint64_t v5 = a1;
    if (!(*v3 >> 62))
    {
      unint64_t v9 = *(void *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if ((uint64_t)v9 >= a2) {
        goto LABEL_4;
      }
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if ((uint64_t)v9 < v4) {
    goto LABEL_39;
  }
LABEL_4:
  uint64_t v6 = v4 - v5;
  if (__OFSUB__(v4, v5))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v7 = v8 >> 62;
  if (!(v8 >> 62))
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v11 = v10 - v6;
    if (!__OFSUB__(v10, v6)) {
      goto LABEL_7;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v13 = v12 + v32;
    if (!__OFADD__(v12, v32)) {
      goto LABEL_9;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_41:
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v11 = v10 - v6;
  if (__OFSUB__(v10, v6)) {
    goto LABEL_43;
  }
LABEL_7:
  unint64_t v9 = *v3;
  uint64_t v32 = v11;
  if (*v3 >> 62) {
    goto LABEL_44;
  }
  uint64_t v12 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v13 = v12 + v11;
  if (__OFADD__(v12, v11)) {
    goto LABEL_46;
  }
LABEL_9:
  unint64_t v9 = *v3;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v3 = v9;
  unint64_t v30 = v7;
  unint64_t v31 = v8;
  uint64_t v12 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v9 & 0x8000000000000000) == 0 && (v9 & 0x4000000000000000) == 0)
  {
    uint64_t v15 = v9 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_19;
    }
    uint64_t v12 = 1;
  }
  if (v9 >> 62) {
    goto LABEL_47;
  }
  uint64_t v16 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v16 <= v13) {
    uint64_t v16 = v13;
  }
  swift_bridgeObjectRetain();
  unint64_t v9 = MEMORY[0x18C117690](v12, v16, 1, v9);
  swift_bridgeObjectRelease();
  *unint64_t v3 = v9;
  uint64_t v15 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  uint64_t v17 = v15 + 32 + 8 * v5;
  type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
  swift_arrayDestroy();
  uint64_t v18 = v32;
  if (!v32) {
    goto LABEL_29;
  }
  if (!(v9 >> 62))
  {
    uint64_t v19 = *(void *)(v15 + 16);
    uint64_t v20 = v19 - v4;
    if (!__OFSUB__(v19, v4)) {
      goto LABEL_22;
    }
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  swift_bridgeObjectRetain();
  uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v18 = v32;
  uint64_t v20 = v28 - v4;
  if (__OFSUB__(v28, v4)) {
    goto LABEL_50;
  }
LABEL_22:
  if (v20 < 0)
  {
LABEL_55:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v21 = (char *)(v17 + 8 * v10);
  long long v22 = (char *)(v15 + 32 + 8 * v4);
  if (v21 != v22 || v21 >= &v22[8 * v20])
  {
    memmove(v21, v22, 8 * v20);
    uint64_t v18 = v32;
  }
  if (v9 >> 62)
  {
LABEL_51:
    swift_bridgeObjectRetain();
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v24 = v29 + v32;
    if (!__OFADD__(v29, v32)) {
      goto LABEL_28;
    }
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  uint64_t v23 = *(void *)(v15 + 16);
  uint64_t v24 = v23 + v18;
  if (__OFADD__(v23, v18)) {
    goto LABEL_53;
  }
LABEL_28:
  *(void *)(v15 + 16) = v24;
LABEL_29:
  if (v10 >= 1)
  {
    if (v30)
    {
      unint64_t v25 = swift_bridgeObjectRetain();
      unint64_t v26 = specialized _copyCollectionToContiguousArray<A>(_:)(v25);
      swift_bridgeObjectRelease();
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)((uint64_t)(v26 + 4), v26[2], v10, v17, 0, (void (*)(uint64_t))type metadata accessor for NSObject & PlatformAccessibilityElementProtocol);
      swift_release();
      goto LABEL_34;
    }
    if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) == v10)
    {
      swift_arrayInitWithCopy();
      goto LABEL_34;
    }
    goto LABEL_54;
  }
LABEL_34:
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v6 = *v4;
  int64_t v7 = *((void *)*v4 + 2);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v11 > *((void *)v6 + 3) >> 1)
  {
    if (v7 <= v11) {
      int64_t v15 = v7 + v10;
    }
    else {
      int64_t v15 = v7;
    }
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  uint64_t v16 = &v6[16 * a1 + 32];
  uint64_t result = (char *)swift_arrayDestroy();
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v18 = *((void *)v6 + 2);
  BOOL v19 = __OFSUB__(v18, a2);
  uint64_t v20 = v18 - a2;
  if (v19) {
    goto LABEL_26;
  }
  if ((v20 & 0x8000000000000000) == 0)
  {
    uint64_t result = v16 + 16;
    uint64_t v21 = &v6[16 * a2 + 32];
    if (v16 + 16 != v21 || result >= &v21[16 * v20]) {
      uint64_t result = (char *)memmove(result, v21, 16 * v20);
    }
    uint64_t v22 = *((void *)v6 + 2);
    BOOL v19 = __OFADD__(v22, v10);
    uint64_t v23 = v22 + v10;
    if (!v19)
    {
      *((void *)v6 + 2) = v23;
LABEL_20:
      *(void *)uint64_t v16 = a3;
      *((void *)v16 + 1) = a4;
      *int64_t v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  int64_t v7 = *v5;
  int64_t v8 = *((void *)*v5 + 2);
  if (v8 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v11 = 1 - v10;
  if (__OFSUB__(1, v10))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v12 = v8 + v11;
  if (__OFADD__(v8, v11))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!result || v12 > *((void *)v7 + 3) >> 1)
  {
    if (v8 <= v12) {
      int64_t v17 = v8 + v11;
    }
    else {
      int64_t v17 = v8;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v17, 1, v7);
    int64_t v7 = result;
  }
  uint64_t v18 = (uint64_t)&v7[24 * a1 + 32];
  if (!v11) {
    goto LABEL_20;
  }
  uint64_t v19 = *((void *)v7 + 2);
  BOOL v20 = __OFSUB__(v19, a2);
  uint64_t v21 = v19 - a2;
  if (v20) {
    goto LABEL_26;
  }
  if ((v21 & 0x8000000000000000) == 0)
  {
    uint64_t result = (char *)(v18 + 24);
    uint64_t v22 = &v7[24 * a2 + 32];
    size_t v23 = 24 * v21;
    if ((char *)(v18 + 24) != v22 || result >= &v22[v23]) {
      uint64_t result = (char *)memmove(result, v22, v23);
    }
    uint64_t v24 = *((void *)v7 + 2);
    BOOL v20 = __OFADD__(v24, v11);
    uint64_t v25 = v24 + v11;
    if (!v20)
    {
      *((void *)v7 + 2) = v25;
LABEL_20:
      *(void *)uint64_t v18 = a3;
      *(void *)(v18 + 8) = a4;
      *(unsigned char *)(v18 + 16) = a5 & 1;
      *uint64_t v5 = v7;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void (*protocol witness for Collection.subscript.read in conformance NavigationPath.CodableCollectionProxy(void *a1, unint64_t *a2))(uint64_t *a1)
{
  int64_t v4 = malloc(0x38uLL);
  *a1 = v4;
  NavigationPath.CodableCollectionProxy.subscript.getter(*a2, (uint64_t)v4);
  return protocol witness for Collection.subscript.read in conformance NavigationPath.CodableCollectionProxy;
}

void protocol witness for Collection.subscript.read in conformance NavigationPath.CodableCollectionProxy(uint64_t *a1)
{
  uint64_t v1 = (void *)*a1;
  __swift_destroy_boxed_opaque_existential_1(*a1);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance NavigationPath.CodableCollectionProxy(void *a1)
{
  return specialized Collection<>.subscript.getter(*a1, a1[1], *v1);
}

uint64_t protocol witness for Collection.count.getter in conformance NavigationPath.CodableCollectionProxy()
{
  return specialized Collection.underestimatedCount.getter(*v0);
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance NavigationPath.CodableCollectionProxy@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  return protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance NavigationPath.CodableCollectionProxy(a1, a2, a3, (uint64_t (*)(void, uint64_t, void))specialized Collection.index(_:offsetBy:limitedBy:), a4);
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance NavigationPath.CodableCollectionProxy(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance NavigationPath.CodableCollectionProxy(a1, a2, a3, a4, a5, a6, (void (*)(void, void, uint64_t, uint64_t, uint64_t))NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for RangeReplaceableCollection.init<A>(_:) in conformance NavigationPath.CodableCollectionProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184548](a1, a4, a2, a5, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.append<A>(contentsOf:) in conformance NavigationPath.CodableCollectionProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184500](a1, a4, a2, a5, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance NavigationPath.CodableCollectionProxy(long long *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  outlined init with take of Decodable & Encodable & Hashable(a1, (uint64_t)v4);
  specialized NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(v2, v2, (uint64_t)v4);
  return outlined destroy of CollectionOfOne<IntelligenceElement>((uint64_t)v4, &lazy cache variable for type metadata for CollectionOfOne<Decodable & Encodable & Hashable>, (uint64_t (*)(uint64_t))type metadata accessor for Decodable & Encodable & Hashable);
}

uint64_t protocol witness for RangeReplaceableCollection.insert<A>(contentsOf:at:) in conformance NavigationPath.CodableCollectionProxy(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F4184510](a1, a2, a5, a3, a6, a4);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance NavigationPath.CodableCollectionProxy@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized RangeReplaceableCollection.remove(at:)(*a1, a2);
}

double protocol witness for RangeReplaceableCollection._customRemoveLast() in conformance NavigationPath.CodableCollectionProxy@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(keepingCapacity:) in conformance NavigationPath.CodableCollectionProxy(char a1)
{
  return specialized RangeReplaceableCollection.removeAll(keepingCapacity:)(a1);
}

uint64_t specialized RangeReplaceableCollection.removeAll(keepingCapacity:)(char a1)
{
  unint64_t v3 = *v1;
  if (a1)
  {
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7 < 0) {
        __break(1u);
      }
      uint64_t v4 = v7;
    }
    else
    {
      uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    unint64_t v5 = MEMORY[0x1E4FBC860];
    return specialized Array.replaceSubrange<A>(_:with:)(0, v4, v5);
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance NavigationPath.CodableCollectionProxy(uint64_t (*a1)(long long *), uint64_t a2)
{
  return specialized RangeReplaceableCollection.removeAll(where:)(a1, a2);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NavigationPath.CodableCollectionProxy()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance NavigationPath.CodableCollectionProxy(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

uint64_t NavigationPath.CollectionProxy.startIndex.getter()
{
  return 0;
}

uint64_t NavigationPath.CodableCollectionProxy.endIndex.getter()
{
  if (!(*v0 >> 62)) {
    return *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v2;
}

SwiftUI::NavigationPath::CollectionProxy __swiftcall NavigationPath.CollectionProxy.init()()
{
  *uint64_t v0 = MEMORY[0x1E4FBC860];
  return result;
}

Swift::Int __swiftcall NavigationPath.CollectionProxy.index(after:)(Swift::Int after)
{
  BOOL v1 = __OFADD__(after, 1);
  Swift::Int result = after + 1;
  if (v1) {
    __break(1u);
  }
  return result;
}

unint64_t NavigationPath.CollectionProxy.subscript.getter(unint64_t result)
{
  uint64_t v2 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = MEMORY[0x18C117680]();
    uint64_t v3 = v4;
    goto LABEL_5;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v3 = *(void *)(v2 + 8 * result + 32);
  uint64_t v4 = swift_retain();
LABEL_5:
  (*(void (**)(uint64_t))(*(void *)v3 + 112))(v4);

  return swift_release();
}

uint64_t NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  uint64_t v17 = a1;
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  int64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  double v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v17 - v12;
  unint64_t v23 = MEMORY[0x1E4FBC860];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a3, a4, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (!v22) {
      break;
    }
    outlined init with take of OptionalBinaryInteger(&v21, (uint64_t)v19);
    uint64_t v14 = v20;
    int64_t v15 = __swift_project_boxed_opaque_existential_1(v19, v20);
    specialized append #1 <A><A1>(_:) in NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)((uint64_t)v15, &v23, a4, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  swift_beginAccess();
  return specialized Array.replaceSubrange<A>(_:with:)(v17, v18, v23);
}

uint64_t specialized append #1 <A><A1>(_:) in NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ItemBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a4);
  ItemBox.__allocating_init(_:)((uint64_t)v9);
  uint64_t v10 = swift_beginAccess();
  MEMORY[0x18C115B40](v10);
  if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

uint64_t NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a2;
  uint64_t v17 = a1;
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  double v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v17 - v12;
  unint64_t v23 = MEMORY[0x1E4FBC860];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a3, a4, v11);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (!v22) {
      break;
    }
    outlined init with take of Decodable & Encodable & Hashable(&v21, (uint64_t)v19);
    uint64_t v14 = v20;
    int64_t v15 = __swift_project_boxed_opaque_existential_1(v19, v20);
    specialized append #1 <A><A1>(_:) in NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)((uint64_t)v15, &v23, a4, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  swift_beginAccess();
  return specialized Array.replaceSubrange<A>(_:with:)(v17, v18, v23);
}

uint64_t specialized append #1 <A><A1>(_:) in NavigationPath.CodableCollectionProxy.replaceSubrange<A>(_:with:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = v10;
  v16[1] = v11;
  v16[2] = v12;
  v16[3] = v13;
  type metadata accessor for CodableItemBox();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a4);
  CodableItemBox.__allocating_init(_:)((uint64_t)v9);
  uint64_t v14 = swift_beginAccess();
  MEMORY[0x18C115B40](v14);
  if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return swift_endAccess();
}

void (*protocol witness for Collection.subscript.read in conformance NavigationPath.CollectionProxy(void **a1, unint64_t *a2))(uint64_t *a1)
{
  *a1 = malloc(0x28uLL);
  NavigationPath.CollectionProxy.subscript.getter(*a2);
  return protocol witness for Collection.subscript.read in conformance NavigationPath.CodableCollectionProxy;
}

uint64_t protocol witness for Collection.indices.getter in conformance NavigationPath.CodableCollectionProxy@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v3 = *v1;
  *a1 = *v1;
  a1[1] = 0;
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
  }
  else
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
  }
  a1[2] = v4;
  return result;
}

BOOL protocol witness for Collection.isEmpty.getter in conformance NavigationPath.CodableCollectionProxy()
{
  if (*v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v1 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  return v1 == 0;
}

uint64_t *protocol witness for Collection.index(_:offsetBy:) in conformance NavigationPath.CodableCollectionProxy@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    uint64_t v3 = *result;
    if (!a2)
    {
LABEL_6:
      *a3 = v3;
      return result;
    }
    unint64_t v4 = v3 ^ 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v5 = a2 - 1;
    while (v4 > v5)
    {
      ++v3;
      if (!--a2) {
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance NavigationPath.CodableCollectionProxy@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t (*a4)(void, uint64_t, void)@<X5>, uint64_t a5@<X8>)
{
  uint64_t result = a4(*a1, a2, *a3);
  *(void *)a5 = result;
  *(unsigned char *)(a5 + 8) = v7 & 1;
  return result;
}

uint64_t *protocol witness for Collection.distance(from:to:) in conformance NavigationPath.CodableCollectionProxy(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  if (*a2 < *result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (*a2 == *result) {
    return 0;
  }
  unint64_t v4 = (uint64_t *)(v3 - v2);
  if (v3 > v2)
  {
    uint64_t result = 0;
    unint64_t v5 = v3 + ~v2;
    while (v5 <= 0x7FFFFFFFFFFFFFFELL)
    {
      uint64_t result = (uint64_t *)((char *)result + 1);
      if (v4 == result) {
        return result;
      }
    }
    __break(1u);
    goto LABEL_10;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance NavigationPath.CollectionProxy(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance NavigationPath.CodableCollectionProxy(a1, a2, a3, a4, a5, a6, (void (*)(void, void, uint64_t, uint64_t, uint64_t))NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:));
}

uint64_t protocol witness for RangeReplaceableCollection.replaceSubrange<A>(_:with:) in conformance NavigationPath.CodableCollectionProxy(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void, void, uint64_t, uint64_t, uint64_t))
{
  a7(*a1, a1[1], a2, a3, a4);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v9(a2, a3);
}

uint64_t protocol witness for RangeReplaceableCollection.insert(_:at:) in conformance NavigationPath.CollectionProxy(long long *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  outlined init with take of OptionalBinaryInteger(a1, (uint64_t)v4);
  specialized NavigationPath.CollectionProxy.replaceSubrange<A>(_:with:)(v2, v2, (uint64_t)v4);
  return outlined destroy of CollectionOfOne<Hashable>((uint64_t)v4);
}

uint64_t protocol witness for RangeReplaceableCollection.remove(at:) in conformance NavigationPath.CollectionProxy(uint64_t *a1)
{
  return specialized RangeReplaceableCollection.remove(at:)(*a1);
}

uint64_t protocol witness for RangeReplaceableCollection.removeSubrange(_:) in conformance NavigationPath.CollectionProxy(uint64_t *a1)
{
  return specialized Array.replaceSubrange<A>(_:with:)(*a1, a1[1], MEMORY[0x1E4FBC860]);
}

uint64_t protocol witness for RangeReplaceableCollection.removeAll(where:) in conformance NavigationPath.CollectionProxy(uint64_t (*a1)(long long *), uint64_t a2)
{
  return specialized RangeReplaceableCollection.removeAll(where:)(a1, a2);
}

void protocol witness for Sequence.makeIterator() in conformance NavigationPath.CollectionProxy(void *a1@<X8>)
{
  *a1 = *v1;
  a1[1] = 0;
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance NavigationPath.CollectionProxy()
{
  uint64_t v1 = specialized _copyCollectionToContiguousArray<A>(_:)(*v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t protocol witness for Sequence._copyContents(initializing:) in conformance NavigationPath.CollectionProxy(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized Sequence._copySequenceContents(initializing:)(a1, a2, a3, *v3);
}

void NavigationPath_ItemBoxBase.value.getter()
{
}

void NavigationPath_ItemBoxBase.codableValue.getter()
{
}

void NavigationPath_ItemBoxBase.isCodable.getter()
{
}

void NavigationPath_ItemBoxBase.jsonEncoding.getter()
{
}

void NavigationPath_ItemBoxBase.valueTypeTag.getter()
{
}

void NavigationPath_ItemBoxBase.contains<A>(_:)()
{
}

void NavigationPath_ItemBoxBase.equals(_:)()
{
}

void NavigationPath_ItemBoxBase.updatePossibilities(into:pathIndex:)()
{
}

void NavigationPath_ItemBoxBase.view<A>(basedOn:at:applying:)()
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NavigationPath_ItemBoxBase(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 160))(*a2) & 1;
}

uint64_t ItemBox.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = (uint64_t)v1 + *(void *)(*v1 + 208);
  uint64_t v4 = *(void *)(*v1 + 192);
  a1[3] = v4;
  a1[4] = *(void *)(v2 + 200);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v6(boxed_opaque_existential_1, v3, v4);
}

uint64_t ItemBox.isCodable.getter()
{
  _StringGuts.grow(_:)(112);
  v0._countAndFlagsBits = 0x100000000000005BLL;
  v0._object = (void *)0x800000018832F8C0;
  String.append(_:)(v0);
  swift_getMetatypeMetadata();
  v1._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0x800000018832F920;
  v2._countAndFlagsBits = 0x1000000000000013;
  String.append(_:)(v2);
  MEMORY[0x18C112B90](0, 0xE000000000000000);
  swift_bridgeObjectRelease();
  return 0;
}

void ItemBox.jsonEncoding.getter()
{
}

void ItemBox.valueTypeTag.getter()
{
}

uint64_t ItemBox.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v24[0] = a3;
  v24[1] = a1;
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v24 - v8;
  uint64_t v10 = *(void *)(v5 + 192);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = *(void *)(a2 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v19 + 16))(v13, &v3[*(void *)(v5 + 208)], v10, v16);
  int v20 = swift_dynamicCast();
  long long v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v20)
  {
    v21(v9, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v9, a2);
    char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, a2);
  }
  else
  {
    v21(v9, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t ItemBox.equals(_:)()
{
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

unint64_t ItemBox.updatePossibilities(into:pathIndex:)(uint64_t a1, uint64_t a2)
{
  return ResolvedNavigationDestinations.pushResolvers<A>(for:pathIndex:)(v2 + *(void *)(*(void *)v2 + 208), a2, *(void *)(*(void *)v2 + 192));
}

uint64_t ItemBox.view<A>(basedOn:at:applying:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)(v6 + *(void *)(*(void *)v6 + 208), a2, a3, a4, *(void *)(*(void *)v6 + 192), a5, a6);
}

uint64_t ItemBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 192) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 208));
}

uint64_t ItemBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 192) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 208));

  return swift_deallocClassInstance();
}

uint64_t CodableItemBox.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = (uint64_t)v1 + *(void *)(*v1 + 224);
  uint64_t v4 = *(void *)(*v1 + 192);
  a1[3] = v4;
  a1[4] = *(void *)(v2 + 216);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  uint64_t v6 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v6(boxed_opaque_existential_1, v3, v4);
}

uint64_t CodableItemBox.codableValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)v1 + *(void *)(*v1 + 224);
  uint64_t v6 = *(void *)(*v1 + 192);
  *(void *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v4 + 200);
  *(void *)(a1 + 48) = *(void *)(v3 + 216);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a1);
  uint64_t v8 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);

  return v8(boxed_opaque_existential_1, v5, v6);
}

char *CodableItemBox.jsonEncoding.getter()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v4 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v0)
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    static String.Encoding.utf8.getter();
    uint64_t v8 = String.init(data:encoding:)();
    if (v9)
    {
      uint64_t v3 = (char *)v8;
      outlined consume of Data._Representation(v6, v7);
      swift_release();
      return v3;
    }
    lazy protocol witness table accessor for type NavigationPath.Error and conformance NavigationPath.Error();
    swift_allocError();
    *uint64_t v11 = 0;
    v11[1] = 0;
    swift_willThrow();
    outlined consume of Data._Representation(v6, v7);
  }
  swift_release();
  return v3;
}

uint64_t CodableItemBox.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v24[0] = a3;
  v24[1] = a1;
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v24 - v8;
  uint64_t v10 = *(void *)(v5 + 192);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = *(void *)(a2 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v19 + 16))(v13, &v3[*(void *)(v5 + 224)], v10, v16);
  int v20 = swift_dynamicCast();
  long long v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v20)
  {
    v21(v9, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v9, a2);
    char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, a2);
  }
  else
  {
    v21(v9, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t CodableItemBox.equals(_:)()
{
  if (swift_dynamicCastClass()
    || (type metadata accessor for DecodedItemBox(), (uint64_t result = swift_dynamicCastClass()) != 0))
  {
    swift_retain();
    char v1 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    return v1 & 1;
  }
  return result;
}

unint64_t CodableItemBox.updatePossibilities(into:pathIndex:)(uint64_t a1, uint64_t a2)
{
  return ResolvedNavigationDestinations.pushResolvers<A>(for:pathIndex:)(v2 + *(void *)(*(void *)v2 + 224), a2, *(void *)(*(void *)v2 + 192));
}

uint64_t CodableItemBox.view<A>(basedOn:at:applying:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)(v6 + *(void *)(*(void *)v6 + 224), a2, a3, a4, *(void *)(*(void *)v6 + 192), a5, a6);
}

uint64_t CodableItemBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 192) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 224));
}

uint64_t CodableItemBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 192) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 224));

  return swift_deallocClassInstance();
}

uint64_t DecodedItemBox.value.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192);
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v8 - v6, v1 + *(void *)(v4 + 216), v2, v3);
  type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for Hashable);
  return swift_dynamicCast();
}

uint64_t DecodedItemBox.codableValue.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192);
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))((char *)&v8 - v6, v1 + *(void *)(v4 + 216), v2, v3);
  type metadata accessor for Decodable & Encodable & Hashable();
  return swift_dynamicCast();
}

char *DecodedItemBox.jsonEncoding.getter()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  MEMORY[0x1F4188790](v1 - 8);
  double v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  uint64_t v4 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  if (!v0)
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    static String.Encoding.utf8.getter();
    uint64_t v8 = String.init(data:encoding:)();
    if (v9)
    {
      double v3 = (char *)v8;
      outlined consume of Data._Representation(v6, v7);
      swift_release();
      return v3;
    }
    lazy protocol witness table accessor for type NavigationPath.Error and conformance NavigationPath.Error();
    swift_allocError();
    *uint64_t v11 = 0;
    v11[1] = 0;
    swift_willThrow();
    outlined consume of Data._Representation(v6, v7);
  }
  swift_release();
  return v3;
}

uint64_t CodableItemBox.valueTypeTag.getter()
{
  return _typeName(_:qualified:)();
}

uint64_t DecodedItemBox.contains<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v24[0] = a3;
  v24[1] = a1;
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v24 - v8;
  uint64_t v10 = *(void *)(v5 + 192);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = *(void *)(a2 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v19 + 16))(v13, &v3[*(void *)(v5 + 216)], v10, v16);
  int v20 = swift_dynamicCast();
  long long v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v20)
  {
    v21(v9, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v9, a2);
    char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, a2);
  }
  else
  {
    v21(v9, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v22 = 0;
  }
  return v22 & 1;
}

uint64_t DecodedItemBox.equals(_:)(unsigned char *a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = (uint64_t)v1 + *(void *)(v3 + 216);
    MEMORY[0x1F4188790](v4);
    uint64_t v11 = *(void *)(v3 + 192);
    uint64_t v12 = v6;
    int v13 = 3;
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)_s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0, (uint64_t)&v10, v11, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v7);
    swift_release();
    return v14;
  }
  else if (v1[2])
  {
    return 0;
  }
  else
  {
    a1[16] = 1;
    char v9 = (*(uint64_t (**)(uint64_t *))(*(void *)a1 + 160))(v1);
    a1[16] = 0;
    return v9 & 1;
  }
}

unint64_t DecodedItemBox.updatePossibilities(into:pathIndex:)(uint64_t a1, uint64_t a2)
{
  return ResolvedNavigationDestinations.pushResolvers<A>(for:pathIndex:)(v2 + *(void *)(*(void *)v2 + 216), a2, *(void *)(*(void *)v2 + 192));
}

uint64_t DecodedItemBox.view<A>(basedOn:at:applying:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return ResolvedNavigationDestinations.view<A, B>(presenting:at:applying:)(v6 + *(void *)(*(void *)v6 + 216), a2, a3, a4, *(void *)(*(void *)v6 + 192), a5, a6);
}

uint64_t DecodedItemBox.__ivar_destroyer()
{
  return (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 192) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 216));
}

uint64_t DecodedItemBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 192) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 216));

  return swift_deallocClassInstance();
}

uint64_t one-time initialization function for navigationPathTypesByTag()
{
  type metadata accessor for _ContiguousArrayStorage<(CodingUserInfoKey, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for CodingUserInfoKey?, MEMORY[0x1E4FBBC50], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)&v7 - v1;
  uint64_t v3 = type metadata accessor for CodingUserInfoKey();
  __swift_allocate_value_buffer(v3, static CodingUserInfoKey.navigationPathTypesByTag);
  uint64_t v4 = __swift_project_value_buffer(v3, (uint64_t)static CodingUserInfoKey.navigationPathTypesByTag);
  CodingUserInfoKey.init(rawValue:)();
  uint64_t v5 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v3);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v4, v2, v3);
  }
  __break(1u);
  return result;
}

uint64_t CodableItemBox.description.getter()
{
  _StringGuts.grow(_:)(18);
  v0._countAndFlagsBits = 0x49656C6261646F43;
  v0._object = (void *)0xEF28786F426D6574;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CodableItemBox<A>()
{
  return CodableItemBox.description.getter();
}

uint64_t ItemBox.description.getter()
{
  v0._countAndFlagsBits = 0x28786F426D657449;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ItemBox<A>()
{
  return ItemBox.description.getter();
}

uint64_t DecodedItemBox.description.getter()
{
  _StringGuts.grow(_:)(18);
  v0._countAndFlagsBits = 0x496465646F636544;
  v0._object = (void *)0xEF28786F426D6574;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance DecodedItemBox<A>()
{
  return DecodedItemBox.description.getter();
}

uint64_t specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  if (a2 == a3)
  {
    if (result)
    {
      a6(a5);
      return swift_arrayInitWithCopy();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  if (a2 == a3)
  {
    if (result)
    {
      type metadata accessor for NSObject(0, a5);
      return swift_arrayInitWithCopy();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)MEMORY[0x18C117680](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return destroy for ForEach<>.PreferenceTransform.Item;
  }
  __break(1u);
  return result;
}

double (*specialized Array.subscript.read(uint64_t a1, unint64_t a2, uint64_t a3))(void, void, void, void)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a3 + 16) > a2)
  {
    type metadata accessor for IntelligenceElement();
    return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  __break(1u);
  return result;
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  id v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    id v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[16 * a1 + 32];
    uint64_t v15 = &v4[16 * a2 + 32];
    if (a1 != a2 || result >= &v15[16 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 16 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  id v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    id v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[64 * a1 + 32];
    uint64_t v15 = &v4[64 * a2 + 32];
    if (a1 != a2 || result >= &v15[64 * v14]) {
      uint64_t result = (char *)memmove(result, v15, v14 << 6);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  id v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_24;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    id v4 = result;
    if (!v8) {
      goto LABEL_24;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_30;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[96 * a1 + 32];
    uint64_t v15 = &v4[96 * a2 + 32];
    uint64_t v16 = 96 * v14;
    if (96 * a1 < 96 * a2 || (result < &v15[v16] ? (uint64_t v17 = a1 == a2) : (uint64_t v17 = 0), !v17)) {
      uint64_t result = (char *)memmove(result, v15, v16);
    }
    uint64_t v18 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v18, v8);
    uint64_t v19 = v18 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v19;
LABEL_24:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_31;
  }
LABEL_32:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_26;
  }
  id v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_24;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    id v4 = result;
    if (!v8) {
      goto LABEL_24;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_30;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[40 * a1 + 32];
    uint64_t v15 = &v4[40 * a2 + 32];
    uint64_t v16 = 40 * v14;
    if (40 * a1 < 40 * a2 || (result < &v15[v16] ? (uint64_t v17 = a1 == a2) : (uint64_t v17 = 0), !v17)) {
      uint64_t result = (char *)memmove(result, v15, v16);
    }
    uint64_t v18 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v18, v8);
    uint64_t v19 = v18 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v19;
LABEL_24:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_31;
  }
LABEL_32:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  id v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v9 <= *((void *)v4 + 3) >> 1)
  {
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v11, 1, v4);
    id v4 = result;
    if (!v8) {
      goto LABEL_21;
    }
  }
  uint64_t v12 = *((void *)v4 + 2);
  BOOL v13 = __OFSUB__(v12, a2);
  uint64_t v14 = v12 - a2;
  if (v13) {
    goto LABEL_27;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v4[24 * a1 + 32];
    uint64_t v15 = &v4[24 * a2 + 32];
    if (a1 != a2 || result >= &v15[24 * v14]) {
      uint64_t result = (char *)memmove(result, v15, 24 * v14);
    }
    uint64_t v16 = *((void *)v4 + 2);
    BOOL v13 = __OFADD__(v16, v8);
    uint64_t v17 = v16 + v8;
    if (!v13)
    {
      *((void *)v4 + 2) = v17;
LABEL_21:
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ItemBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CodableItemBox()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187A55890()
{
  return swift_deallocObject();
}

unsigned char *partial apply for implicit closure #1 in NavigationPath.init<A>(_:)(uint64_t a1)
{
  return implicit closure #1 in NavigationPath.init<A>(_:)(a1);
}

{
  uint64_t *v1;

  return implicit closure #1 in NavigationPath.init<A>(_:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@owned ItemBox<A.Sequence.Element>)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 40))();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for NavigationPath_ItemBoxBase()
{
  return self;
}

uint64_t sub_187A55910()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.Sequence.Element) -> (@owned CodableItemBox<A.Sequence.Element>)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 56))();
  *a1 = result;
  return result;
}

unint64_t specialized static NavigationPath.CodableRepresentation.== infix(_:_:)(unint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (void *)a1[1];
  unint64_t v3 = a1[2];
  id v4 = (void *)a2[1];
  uint64_t v5 = a2[2];
  if ((specialized static Array<A>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }
  uint64_t v6 = v2[2];
  if (v6 != v4[2]) {
    return 0;
  }
  if (v6)
  {
    uint64_t v7 = v2[6];
    uint64_t v8 = v2[7];
    uint64_t v9 = v4[6];
    uint64_t v10 = v4[7];
    BOOL v11 = v2[4] == v4[4] && v2[5] == v4[5];
    if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      BOOL v12 = v7 == v9 && v8 == v10;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v13 = v6 - 1;
        if (!v13) {
          goto LABEL_15;
        }
        uint64_t v15 = v2 + 11;
        uint64_t v16 = v4 + 11;
        while (1)
        {
          uint64_t v17 = *(v15 - 1);
          uint64_t v18 = *v15;
          uint64_t v19 = *(v16 - 1);
          uint64_t v20 = *v16;
          BOOL v21 = *(v15 - 3) == *(v16 - 3) && *(v15 - 2) == *(v16 - 2);
          if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          BOOL v22 = v17 == v19 && v18 == v20;
          if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            break;
          }
          v15 += 4;
          v16 += 4;
          if (!--v13) {
            goto LABEL_15;
          }
        }
      }
    }
    return 0;
  }
LABEL_15:

  return specialized static Array<A>.== infix(_:_:)(v3, v5);
}

unint64_t lazy protocol witness table accessor for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError;
  if (!lazy protocol witness table cache variable for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError;
  if (!lazy protocol witness table cache variable for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CollectionProxyError and conformance NavigationPath.CollectionProxyError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy;
  if (!lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy;
  if (!lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy;
  if (!lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in NavigationPath.CodableCollectionProxy()
{
  return lazy protocol witness table accessor for type DefaultIndices<NavigationPath.CodableCollectionProxy> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type DefaultIndices<NavigationPath.CodableCollectionProxy> and conformance DefaultIndices<A>, &lazy cache variable for type metadata for DefaultIndices<NavigationPath.CodableCollectionProxy>, MEMORY[0x1E4FBAF10]);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in NavigationPath.CodableCollectionProxy()
{
  return lazy protocol witness table accessor for type DefaultIndices<NavigationPath.CodableCollectionProxy> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type Slice<NavigationPath.CodableCollectionProxy> and conformance Slice<A>, &lazy cache variable for type metadata for Slice<NavigationPath.CodableCollectionProxy>, MEMORY[0x1E4FBC320]);
}

uint64_t lazy protocol witness table accessor for type DefaultIndices<NavigationPath.CodableCollectionProxy> and conformance DefaultIndices<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DefaultIndices<NavigationPath.CodableCollectionProxy>(255, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy, (uint64_t)&type metadata for NavigationPath.CodableCollectionProxy, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<NavigationPath.CodableCollectionProxy> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<NavigationPath.CodableCollectionProxy> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<NavigationPath.CodableCollectionProxy> and conformance <> Slice<A>)
  {
    type metadata accessor for DefaultIndices<NavigationPath.CodableCollectionProxy>(255, &lazy cache variable for type metadata for Slice<NavigationPath.CodableCollectionProxy>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy, (uint64_t)&type metadata for NavigationPath.CodableCollectionProxy, MEMORY[0x1E4FBC320]);
    lazy protocol witness table accessor for type NavigationPath.CodableCollectionProxy and conformance NavigationPath.CodableCollectionProxy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<NavigationPath.CodableCollectionProxy> and conformance <> Slice<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in NavigationPath.CodableCollectionProxy()
{
  return lazy protocol witness table accessor for type DefaultIndices<NavigationPath.CodableCollectionProxy> and conformance DefaultIndices<A>(&lazy protocol witness table cache variable for type IndexingIterator<NavigationPath.CodableCollectionProxy> and conformance IndexingIterator<A>, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<NavigationPath.CodableCollectionProxy>, MEMORY[0x1E4FBBC18]);
}

unint64_t lazy protocol witness table accessor for type DefaultIndices<NavigationPath.CollectionProxy> and conformance DefaultIndices<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultIndices<NavigationPath.CollectionProxy> and conformance DefaultIndices<A>;
  if (!lazy protocol witness table cache variable for type DefaultIndices<NavigationPath.CollectionProxy> and conformance DefaultIndices<A>)
  {
    type metadata accessor for DefaultIndices<NavigationPath.CodableCollectionProxy>(255, &lazy cache variable for type metadata for DefaultIndices<NavigationPath.CollectionProxy>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy, (uint64_t)&type metadata for NavigationPath.CollectionProxy, MEMORY[0x1E4FBAF10]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultIndices<NavigationPath.CollectionProxy> and conformance DefaultIndices<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<NavigationPath.CollectionProxy> and conformance Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<NavigationPath.CollectionProxy> and conformance Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<NavigationPath.CollectionProxy> and conformance Slice<A>)
  {
    type metadata accessor for DefaultIndices<NavigationPath.CodableCollectionProxy>(255, &lazy cache variable for type metadata for Slice<NavigationPath.CollectionProxy>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy, (uint64_t)&type metadata for NavigationPath.CollectionProxy, MEMORY[0x1E4FBC320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<NavigationPath.CollectionProxy> and conformance Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Slice<NavigationPath.CollectionProxy> and conformance <> Slice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Slice<NavigationPath.CollectionProxy> and conformance <> Slice<A>;
  if (!lazy protocol witness table cache variable for type Slice<NavigationPath.CollectionProxy> and conformance <> Slice<A>)
  {
    type metadata accessor for DefaultIndices<NavigationPath.CodableCollectionProxy>(255, &lazy cache variable for type metadata for Slice<NavigationPath.CollectionProxy>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy, (uint64_t)&type metadata for NavigationPath.CollectionProxy, MEMORY[0x1E4FBC320]);
    lazy protocol witness table accessor for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Slice<NavigationPath.CollectionProxy> and conformance <> Slice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexingIterator<NavigationPath.CollectionProxy> and conformance IndexingIterator<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexingIterator<NavigationPath.CollectionProxy> and conformance IndexingIterator<A>;
  if (!lazy protocol witness table cache variable for type IndexingIterator<NavigationPath.CollectionProxy> and conformance IndexingIterator<A>)
  {
    type metadata accessor for DefaultIndices<NavigationPath.CodableCollectionProxy>(255, &lazy cache variable for type metadata for IndexingIterator<NavigationPath.CollectionProxy>, (uint64_t (*)(void))lazy protocol witness table accessor for type NavigationPath.CollectionProxy and conformance NavigationPath.CollectionProxy, (uint64_t)&type metadata for NavigationPath.CollectionProxy, MEMORY[0x1E4FBBC18]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexingIterator<NavigationPath.CollectionProxy> and conformance IndexingIterator<A>);
  }
  return result;
}

void type metadata accessor for DefaultIndices<NavigationPath.CodableCollectionProxy>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t assignWithCopy for NavigationPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of NavigationPath.Representation(*(void *)a2, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  outlined consume of NavigationPath.Representation(v8, v9, v10, v11);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for NavigationPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of NavigationPath.Representation(v6, v7, v8, v9);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

void *assignWithCopy for NavigationPath.CodableRepresentation(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NavigationPath.CodableRepresentation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for NavigationPath.CodableRepresentation()
{
  return &type metadata for NavigationPath.CodableRepresentation;
}

ValueMetadata *type metadata accessor for NavigationPath.CodableCollectionProxy()
{
  return &type metadata for NavigationPath.CodableCollectionProxy;
}

unsigned char *storeEnumTagSinglePayload for NavigationPath.CollectionProxyError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187A56490);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationPath.CollectionProxyError()
{
  return &type metadata for NavigationPath.CollectionProxyError;
}

uint64_t type metadata completion function for ItemBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for CodableItemBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for DecodedItemBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for DecodedItemBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for NavigationPath.Representation(uint64_t a1)
{
  return outlined consume of NavigationPath.Representation(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
}

uint64_t initializeWithCopy for NavigationPath.Representation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of NavigationPath.Representation(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for NavigationPath.Representation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of NavigationPath.Representation(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of NavigationPath.Representation(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for NavigationPath.Representation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of NavigationPath.Representation(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationPath.Representation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationPath.Representation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for NavigationPath.Representation(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t destructiveInjectEnumTag for NavigationPath.Representation(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2 & 1;
  return result;
}

void *type metadata accessor for NavigationPath.Representation()
{
  return &unk_1ED417538;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v9 = a4;
    uint64_t v7 = a3;
    uint64_t v4 = a2;
    uint64_t v6 = a1;
    unint64_t v8 = *v5;
    if (!(*v5 >> 62))
    {
      if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v19 < v4) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t v10 = v4 - v6;
  if (__OFSUB__(v4, v6))
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v11 = v6 - v4;
  if (__OFSUB__(0, v10))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v13 = v20 + v32;
    if (!__OFADD__(v20, v32)) {
      goto LABEL_8;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    uint64_t v15 = 1;
    goto LABEL_22;
  }
  unint64_t v8 = *v5;
  uint64_t v32 = v6 - v4;
  uint64_t v33 = v6;
  if (*v5 >> 62) {
    goto LABEL_18;
  }
  uint64_t v12 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v13 = v12 - v10;
  if (__OFADD__(v12, v11)) {
    goto LABEL_20;
  }
LABEL_8:
  unint64_t v8 = *v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v5 = v8;
  uint64_t v15 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
  {
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFF8;
    if (v13 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    {
      uint64_t v17 = v7;
      uint64_t v18 = v9;
      goto LABEL_27;
    }
    goto LABEL_21;
  }
LABEL_22:
  uint64_t v17 = v7;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v21 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v18 = v9;
  if (v21 <= v13) {
    uint64_t v21 = v13;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = MEMORY[0x18C117690](v15, v21, 1, v8);
  swift_bridgeObjectRelease();
  *uint64_t v5 = v8;
  uint64_t v16 = v8 & 0xFFFFFFFFFFFFFF8;
LABEL_27:
  BOOL v22 = (char *)(v16 + 32 + 8 * v33);
  v18(v17);
  swift_arrayDestroy();
  uint64_t v23 = v32;
  if (v32)
  {
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v23 = v32;
      uint64_t v25 = v30 - v4;
      if (!__OFSUB__(v30, v4))
      {
LABEL_30:
        if (v25 < 0)
        {
LABEL_47:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        unint64_t v26 = (char *)(v16 + 32 + 8 * v4);
        if (v33 != v4 || v22 >= &v26[8 * v25])
        {
          memmove(v22, v26, 8 * v25);
          uint64_t v23 = v32;
        }
        if (!(v8 >> 62))
        {
          uint64_t v27 = *(void *)(v16 + 16);
          uint64_t v28 = v27 + v23;
          if (!__OFADD__(v27, v23))
          {
LABEL_36:
            *(void *)(v16 + 16) = v28;
            goto LABEL_37;
          }
          goto LABEL_46;
        }
LABEL_44:
        swift_bridgeObjectRetain();
        uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v28 = v31 + v32;
        if (!__OFADD__(v31, v32)) {
          goto LABEL_36;
        }
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v24 = *(void *)(v16 + 16);
      uint64_t v25 = v24 - v4;
      if (!__OFSUB__(v24, v4)) {
        goto LABEL_30;
      }
    }
    __break(1u);
    goto LABEL_44;
  }
LABEL_37:

  return specialized Array._endMutation()();
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

char *specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v5 = *v3;
  uint64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v9 = a1 - a2;
  if (__OFSUB__(0, v8))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v10 = v6 - v8;
  if (__OFADD__(v6, v9))
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v10 <= *((void *)v5 + 3) >> 1)
  {
    if (!v9) {
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t result = (char *)a3();
    uint64_t v5 = result;
    if (!v9)
    {
LABEL_18:
      *unsigned int v3 = v5;
      return result;
    }
  }
  uint64_t v13 = *((void *)v5 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_24;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t result = &v5[16 * a1 + 32];
    uint64_t v16 = &v5[16 * a2 + 32];
    if (a1 != a2 || result >= &v16[16 * v15]) {
      uint64_t result = (char *)memmove(result, v16, 16 * v15);
    }
    uint64_t v17 = *((void *)v5 + 2);
    BOOL v14 = __OFADD__(v17, v9);
    uint64_t v18 = v17 + v9;
    if (!v14)
    {
      *((void *)v5 + 2) = v18;
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_26:
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of NavigationPath.Error(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationPath.Error and conformance NavigationPath.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationPath.Error and conformance NavigationPath.Error;
  if (!lazy protocol witness table cache variable for type NavigationPath.Error and conformance NavigationPath.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationPath.Error and conformance NavigationPath.Error);
  }
  return result;
}

void type metadata accessor for (CodingUserInfoKey, Any)()
{
  if (!lazy cache variable for type metadata for (CodingUserInfoKey, Any))
  {
    type metadata accessor for CodingUserInfoKey();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (CodingUserInfoKey, Any));
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(CodingUserInfoKey, Any)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (tag: String, item: String)()
{
  if (!lazy cache variable for type metadata for (tag: String, item: String))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (tag: String, item: String));
    }
  }
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (__OFADD__(v7, v10))
  {
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 - v9 > *(void *)(v6 + 24) >> 1) {
    uint64_t v6 = a3();
  }
  type metadata accessor for ContainerBackgroundHost(0, a4);
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_17;
  }
  uint64_t v14 = *(void *)(v6 + 16);
  BOOL v15 = __OFSUB__(v14, a2);
  uint64_t v16 = v14 - a2;
  if (v15) {
    goto LABEL_23;
  }
  if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = (const void *)(v6 + 32 + 16 * a2);
    if (a1 != a2 || v6 + 32 + 16 * a1 >= (unint64_t)v17 + 16 * v16) {
      uint64_t result = (uint64_t)memmove((void *)(v6 + 32 + 16 * a1), v17, 16 * v16);
    }
    uint64_t v18 = *(void *)(v6 + 16);
    BOOL v15 = __OFADD__(v18, v10);
    uint64_t v19 = v18 - v9;
    if (!v15)
    {
      *(void *)(v6 + 16) = v19;
LABEL_17:
      *uint64_t v4 = v6;
      return result;
    }
    goto LABEL_24;
  }
LABEL_25:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t type metadata accessor for Decodable & Encodable & Hashable()
{
  unint64_t result = lazy cache variable for type metadata for Decodable & Encodable & Hashable;
  if (!lazy cache variable for type metadata for Decodable & Encodable & Hashable)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Decodable & Encodable & Hashable);
  }
  return result;
}

uint64_t outlined destroy of CollectionOfOne<Hashable>(uint64_t a1)
{
  type metadata accessor for CollectionOfOne<Hashable>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for CollectionOfOne<Hashable>()
{
  if (!lazy cache variable for type metadata for CollectionOfOne<Hashable>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for Hashable);
    unint64_t v0 = type metadata accessor for CollectionOfOne();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CollectionOfOne<Hashable>);
    }
  }
}

uint64_t outlined destroy of CollectionOfOne<IntelligenceElement>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for _ContiguousArrayStorage<(CodingUserInfoKey, Any)>(0, a2, a3, MEMORY[0x1E4FBBB08]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t destroy for NavigationPath.Error(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NavigationPath.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for NavigationPath.Error(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for NavigationPath.Error(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationPath.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for NavigationPath.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTag for NavigationPath.Error(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *destructiveInjectEnumTag for NavigationPath.Error(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationPath.Error()
{
  return &type metadata for NavigationPath.Error;
}

uint64_t ArchivedTemplateHost.viewGraph.getter()
{
  specialized _ArchivedViewHost.viewGraph.getter();

  return swift_retain();
}

double ArchivedTemplateHost.currentTimestamp.getter@<D0>(double *a1@<X8>)
{
  swift_beginAccess();
  double result = *(double *)(v1 + 24);
  *a1 = result;
  return result;
}

uint64_t ArchivedTemplateHost.currentTimestamp.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 24) = v2;
  return result;
}

uint64_t (*ArchivedTemplateHost.currentTimestamp.modify())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t ArchivedTemplateHost.propertiesNeedingUpdate.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(_WORD *)(v1 + 32);
  return result;
}

uint64_t ArchivedTemplateHost.propertiesNeedingUpdate.setter(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(_WORD *)(v1 + 32) = v2;
  return result;
}

uint64_t (*ArchivedTemplateHost.propertiesNeedingUpdate.modify())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t ArchivedTemplateHost.renderingPhase.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 34);
  return result;
}

uint64_t ArchivedTemplateHost.renderingPhase.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 34) = v2;
  return result;
}

uint64_t (*ArchivedTemplateHost.renderingPhase.modify())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t ArchivedTemplateHost.externalUpdateCount.getter()
{
  swift_beginAccess();
  return *(void *)(v0 + 40);
}

uint64_t ArchivedTemplateHost.externalUpdateCount.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*ArchivedTemplateHost.externalUpdateCount.modify())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t ArchivedTemplateHost.environment.getter@<X0>(void *a1@<X8>)
{
  unint64_t v3 = (void *)(v1 + *(void *)(*(void *)v1 + 144));
  swift_beginAccess();
  uint64_t v4 = v3[1];
  *a1 = *v3;
  a1[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t key path getter for ArchivedTemplateHost.environment : <A>ArchivedTemplateHost<A>@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = (void *)(*(void *)a1 + *(void *)(**(void **)a1 + 144));
  swift_beginAccess();
  uint64_t v4 = v3[1];
  *a2 = *v3;
  a2[1] = v4;
  swift_retain();
  return swift_retain();
}

uint64_t key path setter for ArchivedTemplateHost.environment : <A>ArchivedTemplateHost<A>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = a1[1];
  v4[0] = v2;
  v4[1] = v1;
  swift_retain();
  swift_retain();
  return ArchivedTemplateHost.environment.setter(v4);
}

uint64_t ArchivedTemplateHost.environment.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = (void *)(v1 + *(void *)(*(void *)v1 + 144));
  swift_beginAccess();
  *uint64_t v4 = v2;
  v4[1] = v3;
  swift_release();
  swift_release();
  return ArchivedTemplateHost.environment.didset();
}

uint64_t ArchivedTemplateHost.environment.didset()
{
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t (*ArchivedTemplateHost.environment.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return ArchivedTemplateHost.environment.modify;
}

uint64_t ArchivedTemplateHost.environment.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return ArchivedTemplateHost.environment.didset();
  }
  return result;
}

double ArchivedTemplateHost.size.getter()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 152);
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t ArchivedTemplateHost.size.setter(double a1, double a2)
{
  unsigned int v5 = (double *)(v2 + *(void *)(*(void *)v2 + 152));
  swift_beginAccess();
  *unsigned int v5 = a1;
  v5[1] = a2;
  return ArchivedTemplateHost.size.didset();
}

uint64_t (*ArchivedTemplateHost.size.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return ArchivedTemplateHost.size.modify;
}

uint64_t ArchivedTemplateHost.size.modify(uint64_t a1, char a2)
{
  return ArchivedTemplateHost.safeAreaInsets.modify(a1, a2);
}

uint64_t ArchivedTemplateHost.safeAreaInsets.modify(uint64_t a1, char a2)
{
  uint64_t result = swift_endAccess();
  if ((a2 & 1) == 0) {
    return ArchivedTemplateHost.size.didset();
  }
  return result;
}

{
  return ArchivedTemplateHost.safeAreaInsets.modify(a1, a2);
}

double ArchivedTemplateHost.safeAreaInsets.getter()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 160);
  swift_beginAccess();
  return *(double *)v1;
}

uint64_t ArchivedTemplateHost.safeAreaInsets.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = (double *)(v4 + *(void *)(*(void *)v4 + 160));
  swift_beginAccess();
  *uint64_t v9 = a1;
  v9[1] = a2;
  v9[2] = a3;
  void v9[3] = a4;
  return ArchivedTemplateHost.size.didset();
}

uint64_t ArchivedTemplateHost.size.didset()
{
  return ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t (*ArchivedTemplateHost.safeAreaInsets.modify(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess();
  return ArchivedTemplateHost.safeAreaInsets.modify;
}

uint64_t *ArchivedTemplateHost.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_allocObject();
  uint64_t v4 = specialized ArchivedTemplateHost.init(_:)();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t *ArchivedTemplateHost.init(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = specialized ArchivedTemplateHost.init(_:)();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t ArchivedTemplateHost.metadata()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v54 = a1;
  Swift::String v51 = *v1;
  uint64_t v53 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  uint64_t v50 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v46 = (char **)((char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata.Graphic?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v45 = (char *)&v45 - v4;
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  MEMORY[0x1F4188790](v5 - 8);
  Swift::String v52 = (char *)&v45 - v6;
  uint64_t v7 = type metadata accessor for OSSignposter();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v45 - v12;
  uint64_t v14 = type metadata accessor for OSSignpostID();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v45 - v19;
  static Signpost.metadataExtraction.getter();
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v48 = v8 + 8;
  uint64_t v49 = v7;
  uint64_t v47 = v21;
  v21(v13, v7);
  static Signpost.metadataExtraction.getter();
  BOOL v22 = OSSignposter.logHandle.getter();
  os_signpost_type_t v23 = static os_signpost_type_t.begin.getter();
  char v24 = OS_os_log.signpostsEnabled.getter();
  uint64_t v55 = v15;
  uint64_t v56 = v14;
  if (v24)
  {
    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v25(v17, v20, v14);
    unint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v26 = 0;
    os_signpost_id_t v27 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1872C6000, v22, v23, v27, "Metadata Extraction", "", v26, 2u);
    uint64_t v14 = v56;
    MEMORY[0x18C119C60](v26, -1, -1);

    (*(void (**)(char *, uint64_t))(v55 + 8))(v17, v14);
  }
  else
  {

    uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  }
  v25(v17, v20, v14);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  v47(v10, v49);
  swift_getWitnessTable();
  uint64_t v28 = (uint64_t)v52;
  ViewRendererHost.preferenceValue<A>(_:)();
  uint64_t v29 = (int *)v53;
  uint64_t v30 = v20;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v28, 1, v53) == 1)
  {
    uint64_t v31 = type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic(0);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56);
    Swift::String v51 = v20;
    uint64_t v33 = v45;
    v32(v45, 1, 1, v31);
    uint64_t v34 = (uint64_t)v46;
    *uint64_t v46 = 0;
    *(void *)(v34 + 8) = 0;
    uint64_t v35 = v34 + v29[6];
    v32((char *)v35, 1, 1, v31);
    *(void *)(v34 + v29[7]) = 0;
    uint64_t v36 = v34 + v29[8];
    uint64_t v37 = type metadata accessor for WidgetAuxiliaryViewMetadata.Progress(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 1, 1, v37);
    uint64_t v38 = v34 + v29[9];
    *(unsigned char *)(v38 + 48) = 0;
    *(_OWORD *)(v38 + 16) = 0u;
    *(_OWORD *)(v38 + 32) = 0u;
    *(_OWORD *)uint64_t v38 = 0u;
    uint64_t v39 = v34 + v29[10];
    uint64_t v40 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1, v40);
    unint64_t v41 = (_OWORD *)(v34 + v29[11]);
    *unint64_t v41 = xmmword_18834BB90;
    v41[1] = 0u;
    v41[2] = 0u;
    v41[3] = 0u;
    uint64_t v42 = (uint64_t)v33;
    uint64_t v30 = v51;
    outlined assign with take of WidgetAuxiliaryViewMetadata.Graphic?(v42, v35);

    *(void *)uint64_t v34 = 0;
    outlined init with take of WidgetAuxiliaryViewMetadata(v34, v54);
    outlined destroy of WidgetAuxiliaryViewMetadata?(v28);
  }
  else
  {
    outlined init with take of WidgetAuxiliaryViewMetadata(v28, v54);
  }
  uint64_t v43 = v55;
  $defer #1 <A>() in ArchivedTemplateHost.metadata()();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v30, v56);
}

uint64_t $defer #1 <A>() in ArchivedTemplateHost.metadata()()
{
  uint64_t v0 = type metadata accessor for OSSignpostError();
  uint64_t v28 = *(void *)(v0 - 8);
  uint64_t v29 = v0;
  MEMORY[0x1F4188790](v0);
  uint64_t v2 = &v24[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v30 = type metadata accessor for OSSignpostID();
  uint64_t v3 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  os_signpost_id_t v27 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = &v24[-v6];
  uint64_t v8 = type metadata accessor for OSSignposter();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static Signpost.metadataExtraction.getter();
  uint64_t v12 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  int v13 = static os_signpost_type_t.end.getter();
  if (OS_os_log.signpostsEnabled.getter())
  {
    int v25 = v13;
    uint64_t v26 = v8;
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v15 = v28;
    uint64_t v14 = v29;
    int v16 = (*(uint64_t (**)(unsigned char *, uint64_t))(v28 + 88))(v2, v29);
    uint64_t v17 = v27;
    uint64_t v18 = v30;
    if (v16 == *MEMORY[0x1E4FBD340])
    {
      uint64_t v19 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v2, v14);
      uint64_t v19 = "";
    }
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v3 + 16))(v17, v7, v18);
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    os_signpost_id_t v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1872C6000, v12, (os_signpost_type_t)v25, v22, "Metadata Extraction", v19, v21, 2u);
    MEMORY[0x18C119C60](v21, -1, -1);

    os_signpost_type_t v23 = *(void (**)(unsigned char *, uint64_t))(v3 + 8);
    v23(v7, v18);
    (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v26);
    return ((uint64_t (*)(unsigned char *, uint64_t))v23)(v17, v18);
  }
  else
  {

    (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v7, v30);
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t ArchivedTemplateHost.preferenceValue<A>(for:)()
{
  mainThreadPrecondition()();
  swift_getWitnessTable();

  return ViewRendererHost.preferenceValue<A>(_:)();
}

uint64_t ArchivedTemplateHost.containsPrivacySensitive.getter()
{
  mainThreadPrecondition()();
  swift_getWitnessTable();
  ViewRendererHost.updateViewGraph<A>(body:)();
  swift_bridgeObjectRelease();
  return (v1 >> 2) & 1;
}

uint64_t closure #1 in ArchivedTemplateHost.containsPrivacySensitive.getter@<X0>(uint64_t a1@<X8>)
{
  GraphHost.instantiateIfNeeded()();
  uint64_t result = ViewGraph.displayList()();
  *(void *)a1 = v3;
  *(_WORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 10) = v5;
  return result;
}

uint64_t ArchivedTemplateHost.deinit()
{
  swift_release();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 136);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  return v0;
}

uint64_t ArchivedTemplateHost.__deallocating_deinit()
{
  ArchivedTemplateHost.deinit();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall ArchivedTemplateHost.updateRootView()()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)v9 - v5;
  (*(void (**)(char *, char *, uint64_t, double))(v3 + 16))((char *)v9 - v5, &v0[*(void *)(v1 + 136)], v2, v4);
  uint64_t v7 = *(void *)(v1 + 88);
  unint64_t v8 = lazy protocol witness table accessor for type CommonModifiers and conformance CommonModifiers();
  v9[0] = v7;
  v9[1] = v8;
  swift_getWitnessTable();
  ViewGraph.setRootView<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

Swift::Void __swiftcall ArchivedTemplateHost.updateEnvironment()()
{
  uint64_t v1 = (uint64_t *)(v0 + *(void *)(*(void *)v0 + 144));
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v3 = one-time initialization token for configuredForPlatform;
  swift_retain_n();
  swift_retain();
  if (v3 != -1) {
    swift_once();
  }
  uint64_t v4 = static EnvironmentValues.configuredForPlatform;
  if (v2)
  {
    swift_release();
    if (!v4 || v2 != v4) {
      EnvironmentValues._configureForPlatform(traitCollection:)(0);
    }
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    EnvironmentValues.plist.setter();
  }
  swift_retain();
  swift_retain();
  GraphHost.setEnvironment(_:)();
  swift_release_n();
  swift_release_n();
}

Swift::Void __swiftcall ArchivedTemplateHost.updateSize()()
{
  uint64_t v1 = (CGSize *)(v0 + *(void *)(*(void *)v0 + 152));
  swift_beginAccess();
  ViewGraph.setProposedSize(_:)(*v1);
}

Swift::Void __swiftcall ArchivedTemplateHost.updateSafeArea()()
{
}

Swift::Void __swiftcall ArchivedTemplateHost.updateContainerSize()()
{
}

uint64_t protocol witness for ViewRendererHost.currentTimestamp.setter in conformance ArchivedTemplateHost<A>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  return ArchivedTemplateHost.currentTimestamp.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance ArchivedTemplateHost<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ArchivedTemplateHost.currentTimestamp.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.setter in conformance ArchivedTemplateHost<A>(__int16 *a1)
{
  __int16 v2 = *a1;
  return ArchivedTemplateHost.propertiesNeedingUpdate.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance ArchivedTemplateHost<A>(void *a1))()
{
  __int16 v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ArchivedTemplateHost.propertiesNeedingUpdate.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.setter in conformance ArchivedTemplateHost<A>(char *a1)
{
  char v2 = *a1;
  return ArchivedTemplateHost.renderingPhase.setter(&v2);
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance ArchivedTemplateHost<A>(void *a1))()
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ArchivedTemplateHost.renderingPhase.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance ArchivedTemplateHost<A>(void *a1))()
{
  char v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ArchivedTemplateHost.externalUpdateCount.modify();
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance ArchivedTemplateHost<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance _ArchivedViewHost<A, B>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for ArchivedTemplateHost<A>, MEMORY[0x1E4F3FE08]);
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance ArchivedTemplateHost<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance _ArchivedViewHost<A, B>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for ArchivedTemplateHost<A>, MEMORY[0x1E4F401C0]);
}

void protocol witness for GraphDelegate.graphDidChange() in conformance ArchivedTemplateHost<A>()
{
  swift_getWitnessTable();

  ViewRendererHost.graphDidChange()();
}

uint64_t *specialized ArchivedTemplateHost.init(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 80);
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v18 - v6;
  v0[3] = 0;
  *((_WORD *)v0 + 16) = 0;
  *((unsigned char *)v0 + 34) = 0;
  v0[5] = 0;
  uint64_t v8 = EnvironmentValues.init()();
  uint64_t v9 = (uint64_t *)((char *)v1 + *(void *)(*v1 + 152));
  *uint64_t v9 = 0;
  v9[1] = 0;
  uint64_t v10 = (_OWORD *)((char *)v1 + *(void *)(*v1 + 160));
  *uint64_t v10 = 0u;
  v10[1] = 0u;
  uint64_t v11 = *(void *)(v2 + 88);
  MEMORY[0x18C113660](v8, v3, &unk_1ED419798, v11);
  uint64_t v12 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))((uint64_t)v1 + *(void *)(*v1 + 136), v7, v4);
  MEMORY[0x18C113CA0](v12);
  char v13 = byte_1ED42F9C9;
  if ((byte_1ED42F9C9 & ~byte_1ED42F9C8) == 0) {
    char v13 = 0;
  }
  char v14 = v13 | byte_1ED42F9C8;
  type metadata accessor for ViewGraph();
  LOBYTE(v18[0]) = v14;
  unint64_t v15 = lazy protocol witness table accessor for type CommonModifiers and conformance CommonModifiers();
  uint64_t v24 = v11;
  unint64_t v25 = v15;
  swift_getWitnessTable();
  v0[2] = ViewGraph.__allocating_init<A>(rootViewType:requestedOutputs:)();
  unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  memset(v18, 0, sizeof(v18));
  char v19 = 0;
  uint64_t v20 = 0;
  unint64_t v21 = v16;
  uint64_t v22 = MEMORY[0x1E4FBC868];
  char v23 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  ViewGraph.append<A>(feature:)();
  outlined consume of FocusStore?(0, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v0 + *(void *)(*v0 + 136), v4);
  ViewGraph.setRootView<A>(_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  LOWORD(v18[0]) = 2;
  swift_getWitnessTable();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  ViewRendererHost.initializeViewGraph()();
  static Update.end()();
  return v0;
}

void type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined assign with take of WidgetAuxiliaryViewMetadata.Graphic?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata.Graphic?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of WidgetAuxiliaryViewMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WidgetAuxiliaryViewMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WidgetAuxiliaryViewMetadata?(uint64_t a1)
{
  type metadata accessor for WidgetAuxiliaryViewMetadata.Graphic?(0, &lazy cache variable for type metadata for WidgetAuxiliaryViewMetadata?, (void (*)(uint64_t))type metadata accessor for WidgetAuxiliaryViewMetadata);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type CommonModifiers and conformance CommonModifiers()
{
  unint64_t result = lazy protocol witness table cache variable for type CommonModifiers and conformance CommonModifiers;
  if (!lazy protocol witness table cache variable for type CommonModifiers and conformance CommonModifiers)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonModifiers and conformance CommonModifiers);
  }
  return result;
}

uint64_t base witness table accessor for ViewGraphDelegate in ArchivedTemplateHost<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for GraphDelegate in ArchivedTemplateHost<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_187A5AD48()
{
  return 16;
}

__n128 sub_187A5AD54(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_187A5AD60@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3 = (__n128 *)(*(void *)a1 + *(void *)(**(void **)a1 + 152));
  swift_beginAccess();
  __n128 result = *v3;
  *a2 = *v3;
  return result;
}

uint64_t sub_187A5ADC0(double *a1)
{
  return ArchivedTemplateHost.size.setter(*a1, a1[1]);
}

uint64_t sub_187A5ADE8()
{
  return 16;
}

__n128 sub_187A5ADF4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_187A5AE00@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)a1 + *(void *)(**(void **)a1 + 160);
  swift_beginAccess();
  __n128 result = *(__n128 *)v3;
  long long v5 = *(_OWORD *)(v3 + 16);
  *a2 = *(_OWORD *)v3;
  a2[1] = v5;
  return result;
}

uint64_t sub_187A5AE60(double *a1)
{
  return ArchivedTemplateHost.safeAreaInsets.setter(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_187A5AE8C()
{
  return 16;
}

__n128 sub_187A5AE98(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for ArchivedTemplateHost()
{
  uint64_t result = type metadata accessor for ModifiedContent();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for ArchivedTemplateHost()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for ArchivedTemplateHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for ArchivedTemplateHost);
}

uint64_t dispatch thunk of ArchivedTemplateHost.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 168))();
}

void *type metadata accessor for CommonModifiers()
{
  return &unk_1ED419798;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in CommonModifiers()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<CommonModifiers> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>>)
  {
    type metadata accessor for _ViewModifier_Content<CommonModifiers>();
    type metadata accessor for WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CommonModifiers>, WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<CommonModifiers>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<CommonModifiers>)
  {
    lazy protocol witness table accessor for type CommonModifiers and conformance CommonModifiers();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<CommonModifiers>);
    }
  }
}

void type metadata accessor for WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>()
{
  if (!lazy cache variable for type metadata for WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>)
  {
    type metadata accessor for _ViewModifier_Content<CommonModifiers>();
    lazy protocol witness table accessor for type _ViewModifier_Content<CommonModifiers> and conformance _ViewModifier_Content<A>();
    unint64_t v0 = type metadata accessor for WidgetAuxiliaryViewMetadataModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryViewMetadataModifier<_ViewModifier_Content<CommonModifiers>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<CommonModifiers> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<CommonModifiers> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<CommonModifiers> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<CommonModifiers>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<CommonModifiers> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t View.accessibilityDataSeries(_:)(void *__src, uint64_t a2, uint64_t a3)
{
  memcpy(__dst, __src, 0x138uLL);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst, v5, v6, v7);
  outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)__dst, (uint64_t)v9);
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B68], (uint64_t)v9, 1, a2, MEMORY[0x1E4F40B68], a3);
}

uint64_t outlined init with take of AccessibilityDataSeriesConfiguration?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityDataSeriesConfiguration?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AccessibilityDataSeriesConfiguration?()
{
  if (!lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?);
    }
  }
}

uint64_t ModifiedContent<>.accessibilityDataSeries(_:)@<X0>(void *__src@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  memcpy(__dst, __src, sizeof(__dst));
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst, v5, v6, v7);
  outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)__dst, (uint64_t)v9);
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40B68], (uint64_t)v9, 1, a2, a3);
}

void static AnimationCompletionCriteria.logicallyComplete.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t withAnimation<A>(_:completionCriteria:_:completion:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v8 = *a2;
  swift_retain();
  Transaction.animation.setter();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a5;
  *(void *)(v9 + 24) = a6;
  swift_retain();
  if (v8) {
    Transaction.addAnimationListener(allFinished:)();
  }
  else {
    Transaction.addAnimationLogicalListener(allFinished:)();
  }
  swift_release();
  swift_retain();
  withTransaction<A>(_:_:)();
  return swift_release_n();
}

uint64_t Transaction.addAnimationCompletion(criteria:_:)(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a2;
    *(void *)(v5 + 24) = a3;
    swift_retain();
    Transaction.addAnimationListener(allFinished:)();
  }
  else
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a2;
    *(void *)(v6 + 24) = a3;
    swift_retain();
    Transaction.addAnimationLogicalListener(allFinished:)();
  }

  return swift_release();
}

BOOL static AnimationCompletionCriteria.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_187A5B5EC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Transaction.addAnimationCompletion(criteria:_:)()
{
  return static Update.enqueueAction(_:)();
}

void static AnimationCompletionCriteria.removed.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void AnimationCompletionCriteria.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int AnimationCompletionCriteria.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type AnimationCompletionCriteria and conformance AnimationCompletionCriteria()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationCompletionCriteria and conformance AnimationCompletionCriteria;
  if (!lazy protocol witness table cache variable for type AnimationCompletionCriteria and conformance AnimationCompletionCriteria)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationCompletionCriteria and conformance AnimationCompletionCriteria);
  }
  return result;
}

void *type metadata accessor for AnimationCompletionCriteria.Storage()
{
  return &unk_1ED44E3A0;
}

unint64_t lazy protocol witness table accessor for type AnimationCompletionCriteria.Storage and conformance AnimationCompletionCriteria.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type AnimationCompletionCriteria.Storage and conformance AnimationCompletionCriteria.Storage;
  if (!lazy protocol witness table cache variable for type AnimationCompletionCriteria.Storage and conformance AnimationCompletionCriteria.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnimationCompletionCriteria.Storage and conformance AnimationCompletionCriteria.Storage);
  }
  return result;
}

uint64_t Color.Resolved.accessibilityName.getter()
{
  unint64_t v0 = (CGColor *)Color.Resolved.cgColor.getter();
  Swift::UInt v1 = AXNameFromColor(v0);

  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v2;
}

uint64_t static ScrollTransitionConfiguration.interactive.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for interactive != -1) {
    swift_once();
  }
  uint64_t v2 = *(void *)algn_1E901F9C8;
  uint64_t v3 = qword_1E901F9D0;
  uint64_t v4 = qword_1E901F9D8;
  uint64_t v5 = qword_1E901F9E0;
  unint64_t v6 = qword_1E901F9E8;
  uint64_t v7 = qword_1E901F9F0;
  *a1 = static ScrollTransitionConfiguration.interactive;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  swift_retain();

  return outlined copy of ScrollTransitionConfiguration.Mode(v2, v3, v4, v5, v6);
}

void *View.scrollTransition<A>(_:axis:transition:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(void *)(a1 + 48);
  long long v8 = *(_OWORD *)(a1 + 16);
  v10[0] = *(_OWORD *)a1;
  v10[1] = v8;
  v10[2] = *(_OWORD *)(a1 + 32);
  uint64_t v11 = v7;
  return View.scrollTransition<A>(_:axis:transition:)((uint64_t *)v10, a2 & 1, a3, a4, a5, a6, a7);
}

void *View.scrollTransition<A>(_:axis:transition:)(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  unint64_t v12 = a1[5];
  uint64_t v13 = a1[6];
  *(void *)&long long v20 = a3;
  *((void *)&v20 + 1) = a4;
  *(void *)&long long v21 = v7;
  *((void *)&v21 + 1) = v8;
  *(void *)&long long v22 = v9;
  *((void *)&v22 + 1) = v10;
  *(void *)&long long v23 = v11;
  *((void *)&v23 + 1) = v12;
  *(void *)&long long v24 = v13;
  *((void *)&v24 + 1) = v7;
  *(void *)&long long v25 = v8;
  *((void *)&v25 + 1) = v9;
  *(void *)&long long v26 = v10;
  *((void *)&v26 + 1) = v11;
  *(void *)&long long v27 = v12;
  *((void *)&v27 + 1) = v13;
  char v28 = a2;
  v18[6] = v26;
  v18[7] = v27;
  char v19 = a2;
  v18[2] = v22;
  void v18[3] = v23;
  v18[4] = v24;
  v18[5] = v25;
  v18[0] = v20;
  v18[1] = v21;
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v8, v9, v10, v11, v12);
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v8, v9, v10, v11, v12);
  uint64_t v14 = type metadata accessor for ScrollTransitionModifier();
  swift_retain();
  MEMORY[0x18C113660](v18, a5, v14, a7);
  return outlined release of ScrollTransitionModifier<A1>(&v20);
}

void *View.scrollTransition<A>(topLeading:bottomTrailing:axis:transition:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a2 + 48);
  long long v10 = *(_OWORD *)(a1 + 16);
  v15[0] = *(_OWORD *)a1;
  v15[1] = v10;
  v15[2] = *(_OWORD *)(a1 + 32);
  uint64_t v16 = v8;
  long long v11 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v11;
  v13[2] = *(_OWORD *)(a2 + 32);
  uint64_t v14 = v9;
  return View.scrollTransition<A>(topLeading:bottomTrailing:axis:transition:)((uint64_t *)v15, (uint64_t *)v13, a3 & 1, a4, a5, a6, a7, a8);
}

void *View.scrollTransition<A>(topLeading:bottomTrailing:axis:transition:)(uint64_t *a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  uint64_t v13 = a1[4];
  unint64_t v12 = a1[5];
  uint64_t v14 = a1[6];
  uint64_t v15 = *a2;
  uint64_t v16 = a2[1];
  uint64_t v17 = a2[2];
  uint64_t v18 = a2[3];
  uint64_t v23 = a2[4];
  uint64_t v21 = a2[6];
  unint64_t v22 = a2[5];
  *(void *)&long long v28 = a4;
  *((void *)&v28 + 1) = a5;
  *(void *)&long long v29 = v8;
  *((void *)&v29 + 1) = v9;
  *(void *)&long long v30 = v10;
  *((void *)&v30 + 1) = v11;
  *(void *)&long long v31 = v13;
  *((void *)&v31 + 1) = v12;
  *(void *)&long long v32 = v14;
  *((void *)&v32 + 1) = v15;
  *(void *)&long long v33 = v16;
  *((void *)&v33 + 1) = v17;
  *(void *)&long long v34 = v18;
  *((void *)&v34 + 1) = v23;
  *(void *)&long long v35 = v22;
  *((void *)&v35 + 1) = v21;
  char v36 = a3;
  v26[6] = v34;
  v26[7] = v35;
  char v27 = a3;
  v26[2] = v30;
  v26[3] = v31;
  v26[4] = v32;
  v26[5] = v33;
  v26[0] = v28;
  v26[1] = v29;
  swift_retain();
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v9, v10, v11, v13, v12);
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v16, v17, v18, v23, v22);
  uint64_t v19 = type metadata accessor for ScrollTransitionModifier();
  MEMORY[0x18C113660](v26, a6, v19, a8);
  return outlined release of ScrollTransitionModifier<A1>(&v28);
}

uint64_t static ScrollTransitionConfiguration.animated(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0x3FE0000000000000;
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = a1;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)(a2 + 48) = 0;

  return swift_retain();
}

uint64_t static ScrollTransitionConfiguration.Threshold.visible(_:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t result = swift_allocObject();
  *(double *)(result + 16) = a2;
  *a1 = result;
  return result;
}

double one-time initialization function for animated()
{
  uint64_t v0 = static Animation.default.getter();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = 0x3FE0000000000000;
  static ScrollTransitionConfiguration.animated = v1;
  unk_1E901F990 = v0;
  double result = 0.0;
  xmmword_1E901F998 = 0u;
  *(_OWORD *)&qword_1E901F9A8 = 0u;
  qword_1E901F9B8 = 0;
  return result;
}

uint64_t static ScrollTransitionConfiguration.animated.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for animated != -1) {
    swift_once();
  }
  uint64_t v2 = unk_1E901F990;
  long long v3 = xmmword_1E901F998;
  uint64_t v4 = qword_1E901F9A8;
  unint64_t v5 = unk_1E901F9B0;
  uint64_t v6 = qword_1E901F9B8;
  *(void *)a1 = static ScrollTransitionConfiguration.animated;
  *(void *)(a1 + 8) = v2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  swift_retain();

  return outlined copy of ScrollTransitionConfiguration.Mode(v2, v3, *((uint64_t *)&v3 + 1), v4, v5);
}

__n128 static ScrollTransitionConfiguration.interactive(timingCurve:)@<Q0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v8 = *a1;
  unint64_t v3 = a1[1].n128_u64[0];
  unint64_t v4 = a1[1].n128_u64[1];
  uint64_t v5 = a1[2].n128_u8[0];
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0x3FF0000000000000;
  *(void *)a2 = v6;
  __n128 result = v8;
  *(__n128 *)(a2 + 8) = v8;
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = v4;
  *(void *)(a2 + 40) = v5 | 0x4000000000000000;
  *(void *)(a2 + 48) = 0;
  return result;
}

__n128 one-time initialization function for interactive()
{
  static UnitCurve.easeInOut.getter();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0x3FF0000000000000;
  static ScrollTransitionConfiguration.interactive = v0;
  __n128 result = v2;
  *(__n128 *)algn_1E901F9C8 = v2;
  qword_1E901F9D8 = v3;
  qword_1E901F9E0 = v4;
  qword_1E901F9E8 = v5 | 0x4000000000000000;
  qword_1E901F9F0 = 0;
  return result;
}

uint64_t outlined copy of ScrollTransitionConfiguration.Mode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((a5 >> 62) <= 1) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for ScrollTransitionModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined consume of ScrollTransitionConfiguration.Mode(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  if ((a5 >> 62) <= 1) {
    return swift_release();
  }
  return result;
}

uint64_t sub_187A5BEE4()
{
  return swift_deallocObject();
}

uint64_t one-time initialization function for identity()
{
  if (one-time initialization token for visible != -1) {
    swift_once();
  }
  static ScrollTransitionConfiguration.identity = static ScrollTransitionConfiguration.Threshold.visible;
  unk_1E901FA00 = 0u;
  unk_1E901FA10 = 0u;
  unk_1E901FA20 = xmmword_18834C6D0;

  return swift_retain();
}

{
  uint64_t result;
  uint64_t v1;
  int v2;
  __int16 v3;
  char v4;

  uint64_t result = static ContentTransition.identity.getter();
  static Text.Transition.identity = v1;
  word_1E9030D9C = v3;
  dword_1E9030D98 = v2;
  byte_1E9030D9E = v4;
  return result;
}

uint64_t static ScrollTransitionConfiguration.identity.getter@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for identity != -1) {
    swift_once();
  }
  uint64_t v2 = unk_1E901FA00;
  uint64_t v3 = qword_1E901FA08;
  uint64_t v4 = unk_1E901FA10;
  uint64_t v5 = qword_1E901FA18;
  unint64_t v6 = unk_1E901FA20;
  uint64_t v7 = qword_1E901FA28;
  *a1 = static ScrollTransitionConfiguration.identity;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = v5;
  a1[5] = v6;
  a1[6] = v7;
  swift_retain();

  return outlined copy of ScrollTransitionConfiguration.Mode(v2, v3, v4, v5, v6);
}

uint64_t ScrollTransitionConfiguration.animation(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2;
  unint64_t v4 = v2[5];
  if (!(v4 >> 62))
  {
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = a1;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(void *)(a2 + 48) = 0;
    goto LABEL_5;
  }
  uint64_t v6 = v2[1];
  uint64_t v5 = v2[2];
  uint64_t v8 = v2[3];
  uint64_t v7 = v2[4];
  if (v4 >> 62 == 1)
  {
    *(void *)a2 = v3;
    *(void *)(a2 + 8) = v6;
    *(void *)(a2 + 16) = v5;
    *(void *)(a2 + 24) = v8;
    *(void *)(a2 + 32) = v7;
    *(void *)(a2 + 40) = v4 & 1 | 0x4000000000000000;
    *(void *)(a2 + 48) = a1;
LABEL_5:
    swift_retain();
    return swift_retain();
  }
  uint64_t v10 = v2[6];
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v4;
  *(void *)(a2 + 48) = v10;
  swift_retain();

  return outlined copy of ScrollTransitionConfiguration.Mode(v6, v5, v8, v7, v4);
}

uint64_t ScrollTransitionConfiguration.threshold(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2[1];
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  unint64_t v8 = v2[5];
  uint64_t v7 = v2[6];
  *a2 = *a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v8;
  a2[6] = v7;
  swift_retain();

  return outlined copy of ScrollTransitionConfiguration.Mode(v3, v4, v5, v6, v8);
}

uint64_t one-time initialization function for visible()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x3FF0000000000000;
  static ScrollTransitionConfiguration.Threshold.visible = result;
  return result;
}

uint64_t static ScrollTransitionConfiguration.Threshold.visible.getter@<X0>(void *a1@<X8>)
{
  return static ScrollTransitionConfiguration.Threshold.visible.getter(&one-time initialization token for visible, &static ScrollTransitionConfiguration.Threshold.visible, a1);
}

uint64_t one-time initialization function for hidden()
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0;
  static ScrollTransitionConfiguration.Threshold.hidden = result;
  return result;
}

uint64_t static ScrollTransitionConfiguration.Threshold.hidden.getter@<X0>(void *a1@<X8>)
{
  return static ScrollTransitionConfiguration.Threshold.visible.getter(one-time initialization token for hidden, &static ScrollTransitionConfiguration.Threshold.hidden, a1);
}

uint64_t static ScrollTransitionConfiguration.Threshold.visible.getter@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;

  return swift_retain();
}

void static ScrollTransitionConfiguration.Threshold.centered.getter(void *a1@<X8>)
{
  *a1 = 0xC000000000000000;
}

uint64_t ScrollTransitionConfiguration.Threshold.interpolated(towards:amount:)@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = *a1;
  uint64_t v7 = *v3;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  *(void *)(v8 + 24) = v6;
  *(double *)(v8 + 32) = a3;
  *a2 = v8 | 0x8000000000000000;
  swift_retain();

  return swift_retain();
}

uint64_t sub_187A5C34C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t ScrollTransitionConfiguration.Threshold.inset(by:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = swift_allocObject();
  *(double *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = v5;
  *a1 = v6 | 0x4000000000000000;

  return swift_retain();
}

uint64_t sub_187A5C3FC()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t ScrollTransitionConfiguration.Threshold.Storage.resolve(targetLength:containerLength:)(unint64_t result, double a2, double a3)
{
  switch(result >> 62)
  {
    case 1uLL:
      uint64_t v5 = *(void *)((result & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      swift_retain();
      ScrollTransitionConfiguration.Threshold.Storage.resolve(targetLength:containerLength:)(v5, a2, a3);
      uint64_t result = swift_release();
      break;
    case 2uLL:
      uint64_t v6 = *(void *)((result & 0x3FFFFFFFFFFFFFFFLL) + 0x10);
      uint64_t v7 = *(void *)((result & 0x3FFFFFFFFFFFFFFFLL) + 0x18);
      swift_retain();
      swift_retain();
      ScrollTransitionConfiguration.Threshold.Storage.resolve(targetLength:containerLength:)(v6, a2, a3);
      ScrollTransitionConfiguration.Threshold.Storage.resolve(targetLength:containerLength:)(v7, a2, a3);
      swift_release();
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t static ScrollTransitionModifier._makeView(modifier:inputs:body:)(int *a1, uint64_t a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  int v37 = *a1;
  unint64_t v2 = *(void *)a2;
  int v3 = *(_DWORD *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 24);
  unsigned int v44 = *(_DWORD *)(a2 + 28);
  unsigned int v51 = *(_DWORD *)(a2 + 32);
  uint64_t v45 = *(void *)(a2 + 40);
  uint64_t v40 = *(void *)(a2 + 48);
  int v41 = *(_DWORD *)(a2 + 56);
  int v50 = *(_DWORD *)(a2 + 68);
  int v48 = *(_DWORD *)(a2 + 60);
  int v49 = *(_DWORD *)(a2 + 72);
  unsigned int v46 = *(_DWORD *)(a2 + 36);
  unsigned int v47 = *(_DWORD *)(a2 + 76);
  int v42 = *(_DWORD *)(a2 + 64);
  unsigned int v43 = *(_DWORD *)(a2 + 80);
  type metadata accessor for ScrollTransitionModifier();
  type metadata accessor for _GraphValue();
  int v34 = _GraphValue.value.getter();
  int v32 = _ViewInputs.position.getter();
  int v30 = _ViewInputs.size.getter();
  unsigned int v27 = _ViewInputs.transform.getter();
  unint64_t v97 = v2;
  unint64_t v100 = v4;
  int v98 = v3;
  *(void *)&long long v101 = __PAIR64__(v44, v5);
  *((void *)&v101 + 1) = __PAIR64__(v46, v51);
  uint64_t v102 = v45;
  uint64_t v103 = v40;
  int v104 = v41;
  int v105 = v48;
  int v106 = v42;
  int v107 = v50;
  int v108 = v49;
  unint64_t v109 = __PAIR64__(v43, v47);
  unsigned int v6 = _ViewInputs.environment.getter();
  unsigned int v36 = *MEMORY[0x1E4F4E7A0];
  unsigned int v7 = *MEMORY[0x1E4F4E7A0];
  LOBYTE(v97) = 1;
  HIDWORD(v97) = v34;
  int v98 = v32;
  int v99 = v30;
  unint64_t v100 = __PAIR64__(v6, v27);
  *(void *)&long long v101 = v7;
  uint64_t v68 = type metadata accessor for ScrollTransitionModifier.StageProgress();
  uint64_t v31 = v68;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v69 = WitnessTable;
  long long v25 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E740];
  type metadata accessor for Attribute<ScrollTransitionProgress>(0, &lazy cache variable for type metadata for Attribute<ScrollTransitionProgress>, (uint64_t)&unk_1ED443980, MEMORY[0x1E4F4E740]);
  uint64_t v33 = v8;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v97, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_15, (uint64_t)v67, v68, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  unint64_t v97 = v2;
  unint64_t v100 = v4;
  int v98 = v3;
  *(void *)&long long v101 = __PAIR64__(v44, v5);
  uint64_t v102 = v45;
  uint64_t v103 = v40;
  *((void *)&v101 + 1) = __PAIR64__(v46, v51);
  int v104 = v41;
  int v105 = v48;
  int v106 = v42;
  int v107 = v50;
  int v108 = v49;
  unint64_t v109 = __PAIR64__(v43, v47);
  LODWORD(v84) = v37;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  closure #1 in static ScrollTransitionModifier._makeView(modifier:inputs:body:)(1);
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  unint64_t v84 = v2;
  unint64_t v87 = v4;
  int v85 = v3;
  *(void *)&long long v88 = __PAIR64__(v44, v5);
  *((void *)&v88 + 1) = __PAIR64__(v46, v51);
  uint64_t v89 = v45;
  uint64_t v90 = v40;
  int v91 = v41;
  int v92 = v48;
  int v93 = v42;
  int v94 = v50;
  int v95 = v49;
  unint64_t v96 = __PAIR64__(v43, v47);
  unint64_t v84 = __PAIR64__(_ViewInputs.transaction.getter(), OffsetAttribute2);
  uint64_t v65 = type metadata accessor for ScrollTransitionModifier.ConfigurationTransaction();
  uint64_t v24 = v65;
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v66 = v29;
  type metadata accessor for Attribute<ScrollTransitionProgress>(0, &lazy cache variable for type metadata for Attribute<Transaction>, MEMORY[0x1E4F3F560], v25);
  uint64_t v26 = v10;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v84, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_13, (uint64_t)v64, v65, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  _ViewInputs.transaction.setter();
  _GraphValue.init(_:)();
  unint64_t v84 = v97;
  int v85 = v98;
  unint64_t v87 = v100;
  long long v88 = v101;
  uint64_t v89 = v102;
  static Animatable._makeAnimatable(value:inputs:)();
  LODWORD(v84) = v37;
  uint64_t v23 = _GraphValue.value.getter();
  unint64_t v84 = v2;
  unint64_t v87 = v4;
  int v85 = v3;
  *(void *)&long long v88 = __PAIR64__(v44, v5);
  *((void *)&v88 + 1) = __PAIR64__(v46, v51);
  uint64_t v89 = v45;
  uint64_t v90 = v40;
  int v91 = v41;
  int v92 = v48;
  int v93 = v42;
  int v94 = v50;
  int v95 = v49;
  unint64_t v96 = __PAIR64__(v43, v47);
  int v22 = _ViewInputs.position.getter();
  unint64_t v84 = v2;
  unint64_t v87 = v4;
  int v85 = v3;
  *(void *)&long long v88 = __PAIR64__(v44, v5);
  *((void *)&v88 + 1) = __PAIR64__(v46, v51);
  uint64_t v89 = v45;
  uint64_t v90 = v40;
  int v91 = v41;
  int v92 = v48;
  int v93 = v42;
  int v94 = v50;
  int v95 = v49;
  unint64_t v96 = __PAIR64__(v43, v47);
  int v21 = _ViewInputs.size.getter();
  unint64_t v84 = v2;
  unint64_t v87 = v4;
  int v85 = v3;
  *(void *)&long long v88 = __PAIR64__(v44, v5);
  *((void *)&v88 + 1) = __PAIR64__(v46, v51);
  uint64_t v89 = v45;
  uint64_t v90 = v40;
  int v91 = v41;
  int v92 = v48;
  int v93 = v42;
  int v94 = v50;
  int v95 = v49;
  unint64_t v96 = __PAIR64__(v43, v47);
  unsigned int v20 = _ViewInputs.transform.getter();
  unint64_t v84 = v2;
  unint64_t v87 = v4;
  int v85 = v3;
  *(void *)&long long v88 = __PAIR64__(v44, v5);
  *((void *)&v88 + 1) = __PAIR64__(v46, v51);
  uint64_t v89 = v45;
  uint64_t v90 = v40;
  int v91 = v41;
  int v92 = v48;
  int v93 = v42;
  int v94 = v50;
  int v95 = v49;
  unint64_t v96 = __PAIR64__(v43, v47);
  unsigned int v12 = _ViewInputs.environment.getter();
  LOBYTE(v84) = 0;
  HIDWORD(v84) = v23;
  int v85 = v22;
  int v86 = v21;
  unint64_t v87 = __PAIR64__(v12, v20);
  *(void *)&long long v88 = v36;
  uint64_t v62 = v31;
  uint64_t v63 = WitnessTable;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v84, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v61, v31, MEMORY[0x1E4FBC248], v33, MEMORY[0x1E4FBC278], v13);
  unint64_t v84 = v2;
  unint64_t v87 = v4;
  int v85 = v3;
  *(void *)&long long v88 = __PAIR64__(v44, v5);
  *((void *)&v88 + 1) = __PAIR64__(v46, v51);
  uint64_t v89 = v45;
  uint64_t v90 = v40;
  int v91 = v41;
  int v92 = v48;
  int v93 = v42;
  int v94 = v50;
  int v95 = v49;
  unint64_t v96 = __PAIR64__(v43, v47);
  LODWORD(v70) = v37;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  closure #2 in static ScrollTransitionModifier._makeView(modifier:inputs:body:)(1);
  unsigned int v14 = AGGraphCreateOffsetAttribute2();
  unint64_t v70 = v2;
  unint64_t v73 = v4;
  int v71 = v3;
  *(void *)&long long v74 = __PAIR64__(v44, v5);
  *((void *)&v74 + 1) = __PAIR64__(v46, v51);
  uint64_t v75 = v45;
  uint64_t v76 = v40;
  int v77 = v41;
  int v78 = v48;
  int v79 = v42;
  int v80 = v50;
  int v81 = v49;
  unsigned int v82 = v47;
  unsigned int v83 = v43;
  unint64_t v70 = __PAIR64__(_ViewInputs.transaction.getter(), v14);
  uint64_t v59 = v24;
  uint64_t v60 = v29;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v70, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v58, v24, MEMORY[0x1E4FBC248], v26, MEMORY[0x1E4FBC278], v15);
  _ViewInputs.transaction.setter();
  _GraphValue.init(_:)();
  unint64_t v70 = v84;
  int v71 = v85;
  unint64_t v73 = v87;
  long long v74 = v88;
  uint64_t v75 = v89;
  static Animatable._makeAnimatable(value:inputs:)();
  LODWORD(v70) = v52;
  type metadata accessor for Attribute<ScrollTransitionProgress>(0, &lazy cache variable for type metadata for _GraphValue<ScrollTransitionProgress>, (uint64_t)&unk_1ED443980, MEMORY[0x1E4F3F590]);
  LODWORD(v33) = _GraphValue.value.getter();
  LODWORD(v70) = v53;
  LODWORD(v31) = _GraphValue.value.getter();
  LODWORD(v70) = v37;
  int v39 = _GraphValue.value.getter();
  unint64_t v70 = v2;
  unint64_t v73 = v4;
  int v71 = v3;
  *(void *)&long long v74 = __PAIR64__(v44, v5);
  *((void *)&v74 + 1) = __PAIR64__(v46, v51);
  uint64_t v75 = v45;
  uint64_t v76 = v40;
  int v77 = v41;
  int v78 = v48;
  int v79 = v42;
  int v80 = v50;
  int v81 = v49;
  unsigned int v82 = v47;
  unsigned int v83 = v43;
  int v38 = _ViewInputs.position.getter();
  unint64_t v70 = v2;
  unint64_t v73 = v4;
  int v71 = v3;
  *(void *)&long long v74 = __PAIR64__(v44, v5);
  *((void *)&v74 + 1) = __PAIR64__(v46, v51);
  uint64_t v75 = v45;
  uint64_t v76 = v40;
  int v77 = v41;
  int v78 = v48;
  int v79 = v42;
  int v80 = v50;
  int v81 = v49;
  unsigned int v82 = v47;
  unsigned int v83 = v43;
  LODWORD(v29) = _ViewInputs.size.getter();
  unint64_t v70 = v2;
  unint64_t v73 = v4;
  int v71 = v3;
  *(void *)&long long v74 = __PAIR64__(v44, v5);
  *((void *)&v74 + 1) = __PAIR64__(v46, v51);
  uint64_t v75 = v45;
  uint64_t v76 = v40;
  int v77 = v41;
  int v78 = v48;
  int v79 = v42;
  int v80 = v50;
  int v81 = v49;
  unsigned int v82 = v47;
  unsigned int v83 = v43;
  LODWORD(v26) = _ViewInputs.transform.getter();
  unint64_t v70 = v2;
  unint64_t v73 = v4;
  int v71 = v3;
  *(void *)&long long v74 = __PAIR64__(v44, v5);
  *((void *)&v74 + 1) = __PAIR64__(v46, v51);
  uint64_t v75 = v45;
  uint64_t v76 = v40;
  int v77 = v41;
  int v78 = v48;
  int v79 = v42;
  int v80 = v50;
  int v81 = v49;
  unsigned int v82 = v47;
  unsigned int v83 = v43;
  unsigned int v16 = _ViewInputs.environment.getter();
  unint64_t v70 = __PAIR64__(v31, v33);
  int v71 = v39;
  int v72 = v38;
  unint64_t v73 = __PAIR64__(v26, v29);
  *(void *)&long long v74 = __PAIR64__(v36, v16);
  uint64_t v55 = type metadata accessor for ScrollTransitionModifier.EffectApplicationModifier();
  uint64_t v56 = type metadata accessor for ScrollTransitionModifier.EffectRule();
  uint64_t v57 = swift_getWitnessTable();
  uint64_t v17 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v70, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v54, v56, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
  _GraphValue.init(_:)();
  unint64_t v70 = v2;
  unint64_t v73 = v4;
  int v71 = v3;
  *(void *)&long long v74 = __PAIR64__(v44, v5);
  *((void *)&v74 + 1) = __PAIR64__(v46, v51);
  uint64_t v75 = v45;
  uint64_t v76 = v40;
  int v77 = v41;
  int v78 = v48;
  int v79 = v42;
  int v80 = v50;
  int v81 = v49;
  unsigned int v82 = v47;
  unsigned int v83 = v43;
  swift_getWitnessTable();
  static ViewModifier._makeView(modifier:inputs:body:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static ScrollTransitionModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1 = a1 + 72;
  _OWORD v5[2] = type metadata accessor for ScrollTransitionModifier();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, (uint64_t)&type metadata for ScrollTransitionConfiguration, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5[5];
}

uint64_t closure #2 in static ScrollTransitionModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  _OWORD v5[2] = type metadata accessor for ScrollTransitionModifier();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_8, (uint64_t)v5, (uint64_t)&type metadata for ScrollTransitionConfiguration, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5[5];
}

uint64_t static ScrollTransitionModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier.makeMultiViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ScrollTransitionModifier<A>(int *a1, uint64_t a2)
{
  return static ScrollTransitionModifier._makeView(modifier:inputs:body:)(a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ScrollTransitionModifier<A>()
{
  return static ScrollTransitionModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ScrollTransitionModifier<A>(long long *a1, uint64_t (*a2)(long long *))
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance OnChangeOfSuggestionsModifier(a1, a2);
}

uint64_t ScrollTransitionModifier.EffectApplicationModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = a5;
  type metadata accessor for ScrollTransitionModifier.EffectApplicationModifier();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for PlaceholderContentView();
  swift_getWitnessTable();
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v35 = v11;
  uint64_t v36 = OpaqueTypeMetadata2;
  uint64_t v37 = WitnessTable;
  uint64_t v38 = OpaqueTypeConformance2;
  uint64_t v14 = swift_getOpaqueTypeMetadata2();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&OpaqueTypeMetadata2 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unsigned int v20 = (char *)&OpaqueTypeMetadata2 - v19;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  double v31 = a6;
  double v32 = a7;
  uint64_t v33 = v26;
  uint64_t v34 = v27;
  uint64_t v21 = swift_checkMetadataState();
  uint64_t v22 = swift_checkMetadataState();
  View.animation<A>(_:body:)();
  uint64_t v35 = v21;
  uint64_t v36 = v22;
  uint64_t v37 = WitnessTable;
  uint64_t v38 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  static ViewBuilder.buildExpression<A>(_:)(v17);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v17, v14);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v23)(v20, v14);
}

uint64_t closure #1 in ScrollTransitionModifier.EffectApplicationModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a5;
  type metadata accessor for ScrollTransitionModifier.EffectApplicationModifier();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  uint64_t v11 = type metadata accessor for PlaceholderContentView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v28 = v11;
  uint64_t v29 = a3;
  uint64_t v30 = WitnessTable;
  uint64_t v31 = a4;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v14 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  uint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v24 - v18;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a3;
  *(void *)(v20 + 24) = a4;
  *(double *)(v20 + 32) = a6;
  *(double *)(v20 + 40) = a7;
  *(void *)(v20 + 48) = v25;
  *(void *)(v20 + 56) = v26;
  swift_retain();
  uint64_t v21 = swift_checkMetadataState();
  View.visualEffect<A>(_:)();
  swift_release();
  uint64_t v28 = v21;
  uint64_t v29 = a3;
  uint64_t v30 = WitnessTable;
  uint64_t v31 = a4;
  swift_getOpaqueTypeConformance2();
  static ViewBuilder.buildExpression<A>(_:)(v16);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v16, OpaqueTypeMetadata2);
  static ViewBuilder.buildExpression<A>(_:)(v19);
  return ((uint64_t (*)(char *, uint64_t))v22)(v19, OpaqueTypeMetadata2);
}

uint64_t ScrollTransitionModifier.EffectApplicationModifier.effect(for:)@<X0>(uint64_t (*a1)(double)@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v54 = a4;
  uint64_t v10 = *(void *)(a3 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v56 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v47 = *(void *)(a2 - 8);
  uint64_t v14 = v47;
  MEMORY[0x1F4188790](v15);
  int v52 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v40 - v18;
  double v21 = MEMORY[0x1F4188790](v20);
  int v53 = (char *)&v40 - v22;
  uint64_t v23 = a1(v21);
  int v48 = v19;
  uint64_t v24 = ((uint64_t (*)(uint64_t, uint64_t))a1)(v23, 1);
  ((void (*)(uint64_t, uint64_t))a1)(v24, 2);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(v54, v19, a2);
  uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v10 + 24);
  uint64_t v51 = v10 + 24;
  v55(a2, v10);
  uint64_t v25 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 40);
  uint64_t v26 = (void (*)(unsigned char *, void))v25(v57, a2, v10);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v50 = *(void *)(AssociatedConformanceWitness + 8);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  uint64_t v28 = *(void (**)(char *, uint64_t))(v56 + 8);
  v56 += 8;
  int v49 = v28;
  v28(v13, AssociatedTypeWitness);
  v26(v57, 0);
  uint64_t v29 = (void (*)(unsigned char *, void))v25(v57, a2, v10);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16);
  unsigned int v43 = v25;
  unsigned int v44 = v30;
  uint64_t v45 = AssociatedConformanceWitness;
  uint64_t v46 = AssociatedConformanceWitness + 16;
  v30(AssociatedTypeWitness, AssociatedConformanceWitness, a5);
  v29(v57, 0);
  v55(a2, v10);
  int v41 = (void (*)(unsigned char *, void))v25(v57, a2, v10);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  uint64_t v31 = v49;
  v49(v13, AssociatedTypeWitness);
  v41(v57, 0);
  uint64_t v42 = v10;
  v55(a2, v10);
  uint64_t v32 = v10;
  uint64_t v33 = v43;
  int v41 = (void (*)(unsigned char *, void))v43(v57, a2, v32);
  dispatch thunk of static AdditiveArithmetic.-= infix(_:_:)();
  v31(v13, AssociatedTypeWitness);
  v41(v57, 0);
  uint64_t v34 = v42;
  uint64_t v35 = (void (*)(unsigned char *, void))v33(v57, a2, v42);
  v44(AssociatedTypeWitness, v45, a6);
  v35(v57, 0);
  uint64_t v36 = v52;
  v55(a2, v34);
  uint64_t v37 = (void (*)(unsigned char *, void))v33(v57, a2, v34);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v49(v13, AssociatedTypeWitness);
  v37(v57, 0);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v47 + 8);
  v38(v36, a2);
  v38(v48, a2);
  return ((uint64_t (*)(char *, uint64_t))v38)(v53, a2);
}

void *ScrollTransitionModifier.EffectRule.container.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ScrollTransitionModifier();
  uint64_t Value = AGGraphGetValue();
  v14[0] = *(_OWORD *)Value;
  long long v3 = *(_OWORD *)(Value + 64);
  long long v5 = *(_OWORD *)(Value + 16);
  long long v4 = *(_OWORD *)(Value + 32);
  v14[3] = *(_OWORD *)(Value + 48);
  void v14[4] = v3;
  v14[1] = v5;
  v14[2] = v4;
  long long v7 = *(_OWORD *)(Value + 96);
  long long v6 = *(_OWORD *)(Value + 112);
  long long v8 = *(_OWORD *)(Value + 80);
  char v15 = *(unsigned char *)(Value + 128);
  v14[6] = v7;
  v14[7] = v6;
  v14[5] = v8;
  long long v9 = *(_OWORD *)(Value + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(Value + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(Value + 128);
  long long v10 = *(_OWORD *)(Value + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(Value + 32);
  *(_OWORD *)(a1 + 48) = v10;
  long long v11 = *(_OWORD *)(Value + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(Value + 64);
  *(_OWORD *)(a1 + 80) = v11;
  long long v12 = *(_OWORD *)(Value + 16);
  *(_OWORD *)a1 = *(_OWORD *)Value;
  *(_OWORD *)(a1 + 16) = v12;
  return outlined retain of ScrollTransitionModifier<A>(v14);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ScrollTransitionModifier<A>.EffectApplicationModifier@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ScrollTransitionModifier.EffectApplicationModifier.body(content:)(*(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(a1 + 16), *(void *)(a1 + 24), a2, *(double *)v2, *(double *)(v2 + 8));
}

uint64_t ScrollTransitionModifier.EffectRule.updateValue()(uint64_t a1)
{
  v13[17] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)AGGraphGetValue();
  uint64_t v3 = *(void *)AGGraphGetValue();
  ScrollTransitionModifier.EffectRule.container.getter((uint64_t)v13);
  uint64_t v5 = v13[0];
  uint64_t v4 = v13[1];
  swift_retain();
  outlined release of ScrollTransitionModifier<A1>(v13);
  v9[0] = v2;
  v9[1] = v3;
  void v9[2] = v5;
  void v9[3] = v4;
  uint64_t v11 = a1;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for ScrollTransitionModifier.EffectApplicationModifier();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v10, v6, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v7);
  return swift_release();
}

uint64_t ScrollTransitionModifier.ConfigurationTransaction.configuration.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  uint64_t v4 = Value[2];
  uint64_t v5 = Value[3];
  uint64_t v6 = Value[4];
  unint64_t v7 = Value[5];
  uint64_t v8 = Value[6];
  *a1 = *Value;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  swift_retain();

  return outlined copy of ScrollTransitionConfiguration.Mode(v3, v4, v5, v6, v7);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollTransitionModifier<A>.EffectRule(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t ScrollTransitionModifier.ConfigurationTransaction.value.getter()
{
  uint64_t v12 = *(void *)AGGraphGetValue();
  ScrollTransitionModifier.ConfigurationTransaction.configuration.getter(v9);
  uint64_t v0 = v9[1];
  uint64_t v1 = v9[2];
  uint64_t v2 = v9[3];
  uint64_t v3 = v9[4];
  unint64_t v4 = v10;
  uint64_t v5 = v11;
  unint64_t v6 = v10 >> 62;
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v0, v1, v2, v3, v4);
  swift_release();
  outlined consume of ScrollTransitionConfiguration.Mode(v0, v1, v2, v3, v4);
  if (!v6 || (v6 == 1 ? (BOOL v7 = v5 == 0) : (BOOL v7 = 1), !v7)) {
    Transaction.animation.setter();
  }
  return v12;
}

void *ScrollTransitionModifier.StageProgress.container.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ScrollTransitionModifier();
  uint64_t Value = AGGraphGetValue();
  v14[0] = *(_OWORD *)Value;
  long long v3 = *(_OWORD *)(Value + 64);
  long long v5 = *(_OWORD *)(Value + 16);
  long long v4 = *(_OWORD *)(Value + 32);
  v14[3] = *(_OWORD *)(Value + 48);
  void v14[4] = v3;
  v14[1] = v5;
  v14[2] = v4;
  long long v7 = *(_OWORD *)(Value + 96);
  long long v6 = *(_OWORD *)(Value + 112);
  long long v8 = *(_OWORD *)(Value + 80);
  char v15 = *(unsigned char *)(Value + 128);
  v14[6] = v7;
  v14[7] = v6;
  v14[5] = v8;
  long long v9 = *(_OWORD *)(Value + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(Value + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(Value + 128);
  long long v10 = *(_OWORD *)(Value + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(Value + 32);
  *(_OWORD *)(a1 + 48) = v10;
  long long v11 = *(_OWORD *)(Value + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(Value + 64);
  *(_OWORD *)(a1 + 80) = v11;
  long long v12 = *(_OWORD *)(Value + 16);
  *(_OWORD *)a1 = *(_OWORD *)Value;
  *(_OWORD *)(a1 + 16) = v12;
  return outlined retain of ScrollTransitionModifier<A>(v14);
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollTransitionModifier<A>.ConfigurationTransaction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ScrollTransitionModifier.ConfigurationTransaction.value.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollTransitionModifier<A>.ConfigurationTransaction(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t ScrollTransitionModifier.StageProgress.updateValue()()
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  ++*(_DWORD *)(v0 + 28);
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E4F4E7A0]) {
    __break(1u);
  }
  int v1 = *(_DWORD *)(v0 + 24);
  char v2 = *(unsigned char *)v0;
  LOBYTE(v27) = *MEMORY[0x1E4F4E7A0] == v1;
  GeometryProxy.init(owner:size:environment:transform:position:safeAreaInsets:seed:)();
  long long v15 = v28;
  long long v16 = v27;
  long long v14 = v29;
  int v13 = v30;
  char v17 = v2;
  ScrollTransitionModifier.StageProgress.container.getter((uint64_t)&v18);
  if (v2)
  {
    uint64_t v4 = *((void *)&v23 + 1);
    uint64_t v3 = v23;
    uint64_t v6 = *((void *)&v24 + 1);
    uint64_t v5 = v24;
    uint64_t v8 = *((void *)&v25 + 1);
    unint64_t v7 = v25;
    uint64_t v9 = *((void *)&v22 + 1);
    long long v27 = v18;
    long long v28 = v19;
    long long v29 = v20;
    long long v30 = v21;
    long long v31 = v22;
    long long v32 = v23;
    long long v33 = v24;
    long long v34 = v25;
    char v35 = v26;
    swift_retain();
  }
  else
  {
    uint64_t v3 = *((void *)&v19 + 1);
    uint64_t v9 = v19;
    uint64_t v5 = *((void *)&v20 + 1);
    uint64_t v4 = v20;
    unint64_t v7 = *((void *)&v21 + 1);
    uint64_t v6 = v21;
    long long v27 = v18;
    long long v28 = v19;
    long long v29 = v20;
    long long v30 = v21;
    uint64_t v12 = v22;
    long long v31 = v22;
    long long v32 = v23;
    char v35 = v26;
    long long v33 = v24;
    long long v34 = v25;
    swift_retain();
    uint64_t v8 = v12;
  }
  outlined copy of ScrollTransitionConfiguration.Mode(v3, v4, v5, v6, v7);
  outlined release of ScrollTransitionModifier<A1>(&v27);
  *(void *)&long long v27 = v9;
  *((void *)&v27 + 1) = v3;
  *(void *)&long long v28 = v4;
  *((void *)&v28 + 1) = v5;
  *(void *)&long long v29 = v6;
  *((void *)&v29 + 1) = v7;
  *(void *)&long long v30 = v8;
  long long v18 = v16;
  long long v19 = v15;
  long long v20 = v14;
  LODWORD(v21) = v13;
  ScrollTransitionModifier.StageProgress.progress(for:geometryProxy:)((uint64_t *)&v27, (uint64_t)&v18, v17);
  *(void *)&long long v27 = v10;
  AGGraphSetOutputValue();
  swift_release();
  return outlined consume of ScrollTransitionConfiguration.Mode(v3, v4, v5, v6, v7);
}

void ScrollTransitionModifier.StageProgress.progress(for:geometryProxy:)(uint64_t *a1, uint64_t a2, char a3)
{
  uint64_t v19 = a1[1];
  uint64_t v20 = *a1;
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[2];
  uint64_t v16 = a1[4];
  unint64_t v24 = a1[5];
  long long v21 = *(_OWORD *)a2;
  long long v22 = *(_OWORD *)(a2 + 16);
  unsigned int v3 = *(_DWORD *)(a2 + 40);
  uint64_t v23 = *(void *)(a2 + 32);
  unsigned int v4 = *(_DWORD *)(a2 + 44);
  int v5 = *(_DWORD *)(a2 + 48);
  char v6 = a3 & 1;
  ScrollTransitionModifier.StageProgress.container.getter((uint64_t)&v28);
  int v7 = v36;
  v37[0] = v28;
  v37[1] = v29;
  v37[2] = v30;
  v37[3] = v31;
  v37[4] = v32;
  v37[5] = v33;
  v37[6] = v34;
  v37[7] = v35;
  unsigned __int8 v38 = v36;
  outlined release of ScrollTransitionModifier<A1>(v37);
  if (v7 == 2)
  {
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    unsigned int v9 = v4;
    unsigned int v10 = v3;
    int v11 = v5;
    uint64_t v12 = *Value;
    uint64_t v13 = Value[1];
    swift_retain();
    swift_retain();
    *(void *)&long long v28 = v12;
    *((void *)&v28 + 1) = v13;
    int v14 = EnvironmentValues.nearestScrollableAxes.getter();
    int v5 = v11;
    unsigned int v3 = v10;
    swift_release();
    unsigned int v4 = v9;
    swift_release();
    char v15 = v14 != 1;
  }
  else
  {
    char v15 = v7 & 1;
  }
  if (v24 >> 62)
  {
    if (v24 >> 62 == 1)
    {
      uint64_t v27 = v20;
      v25[0] = v19;
      v25[1] = v18;
      v25[2] = v17;
      v25[3] = v16;
      char v26 = v24 & 1;
      long long v28 = v21;
      long long v29 = v22;
      *(void *)&long long v30 = v23;
      *((void *)&v30 + 1) = __PAIR64__(v4, v3);
      LODWORD(v31) = v5;
      ScrollTransitionModifier.StageProgress.interactiveProgress(threshold:axis:timingCurve:geometryProxy:)((unint64_t *)&v27, v15, v25, &v28, v6);
    }
  }
  else
  {
    v25[0] = v20;
    long long v28 = v21;
    long long v29 = v22;
    *(void *)&long long v30 = v23;
    *((void *)&v30 + 1) = __PAIR64__(v4, v3);
    LODWORD(v31) = v5;
    ScrollTransitionModifier.StageProgress.animatedProgress(threshold:axis:geometryProxy:)((unint64_t *)v25, v15, &v28);
  }
}

unint64_t ScrollTransitionModifier.StageProgress.animatedProgress(threshold:axis:geometryProxy:)(unint64_t *a1, char a2, long long *a3)
{
  int v3 = a2 & 1;
  unint64_t v4 = *a1;
  int v5 = *((_DWORD *)a3 + 12);
  long long v6 = a3[1];
  long long v17 = *a3;
  long long v18 = v6;
  long long v19 = a3[2];
  int v20 = v5;
  static CoordinateSpaceProtocol<>.scrollView(axis:)();
  GeometryProxy.bounds(of:)();
  outlined destroy of NamedCoordinateSpace((uint64_t)&v15);
  unint64_t result = outlined init with take of CGRect?((uint64_t)v21, (uint64_t)&v17);
  if ((v19 & 1) == 0)
  {
    *(_OWORD *)uint64_t v8 = v18;
    *(_OWORD *)&v8[16] = v17;
    if (v3)
    {
      double Height = CGRectGetHeight(*(CGRect *)&v8[16]);
      uint64_t Value = (long long *)AGGraphGetValue();
      long long v14 = Value[1];
      long long v15 = *Value;
      long long v16 = v14;
      ViewSize.height.getter();
    }
    else
    {
      double Height = CGRectGetWidth(*(CGRect *)&v8[16]);
      unsigned int v10 = (long long *)AGGraphGetValue();
      long long v11 = v10[1];
      long long v15 = *v10;
      long long v16 = v11;
      ViewSize.width.getter();
    }
    return ScrollTransitionConfiguration.Threshold.Storage.resolve(targetLength:containerLength:)(v4, v12, Height);
  }
  return result;
}

double ScrollTransitionModifier.StageProgress.interactiveProgress(threshold:axis:timingCurve:geometryProxy:)(unint64_t *a1, char a2, uint64_t *a3, long long *a4, char a5)
{
  unint64_t v6 = *a1;
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  int v9 = a2 & 1;
  uint64_t v11 = a3[2];
  uint64_t v10 = a3[3];
  char v12 = *((unsigned char *)a3 + 32);
  int v13 = *((_DWORD *)a4 + 12);
  long long v14 = a4[1];
  long long v37 = *a4;
  long long v38 = v14;
  long long v39 = a4[2];
  int v40 = v13;
  static CoordinateSpaceProtocol<>.scrollView(axis:)();
  GeometryProxy.bounds(of:)();
  outlined destroy of NamedCoordinateSpace((uint64_t)&v34);
  outlined init with take of CGRect?((uint64_t)v41, (uint64_t)&v37);
  double v15 = 0.0;
  if ((v39 & 1) == 0)
  {
    double v16 = *((double *)&v37 + 1);
    double v17 = *(double *)&v37;
    *(_OWORD *)long long v18 = v38;
    *(_OWORD *)&v18[16] = v37;
    if (v9)
    {
      double Height = CGRectGetHeight(*(CGRect *)&v18[16]);
      uint64_t Value = (long long *)AGGraphGetValue();
      long long v25 = Value[1];
      long long v34 = *Value;
      long long v35 = v25;
      ViewSize.height.getter();
      double v23 = v26;
    }
    else
    {
      double Height = CGRectGetWidth(*(CGRect *)&v18[16]);
      int v20 = (long long *)AGGraphGetValue();
      long long v21 = v20[1];
      long long v34 = *v20;
      long long v35 = v21;
      ViewSize.width.getter();
      double v23 = v22;
      double v16 = v17;
    }
    ScrollTransitionConfiguration.Threshold.Storage.resolve(targetLength:containerLength:)(v6, v23, Height);
    double v27 = v23 * 0.5 - Height * 0.5;
    double v29 = v28 + v27;
    double v30 = v27 - v28;
    if (a5) {
      double v31 = v30;
    }
    else {
      double v31 = v23;
    }
    if (a5) {
      double v29 = -Height;
    }
    if (v29 < v31)
    {
      double v32 = 0.0;
      if (v16 >= v29)
      {
        double v32 = 1.0;
        if (v16 < v31) {
          double v32 = (v16 - v29) / (v31 - v29);
        }
      }
      *(void *)&long long v34 = v8;
      *((void *)&v34 + 1) = v7;
      *(void *)&long long v35 = v11;
      *((void *)&v35 + 1) = v10;
      char v36 = v12;
      if ((a5 & 1) == 0) {
        double v32 = 1.0 - v32;
      }
      return UnitCurve.value(at:)(v32);
    }
  }
  return v15;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ScrollTransitionModifier<A>.StageProgress(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

double protocol witness for Animatable.animatableData.setter in conformance ScrollTransitionProgress(double *a1)
{
  double result = *a1;
  *int v1 = *(void *)a1;
  return result;
}

double (*protocol witness for Animatable.animatableData.modify in conformance ScrollTransitionProgress(void *a1))(uint64_t a1)
{
  a1[1] = v1;
  *a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance ScrollTransitionProgress;
}

double protocol witness for Animatable.animatableData.modify in conformance ScrollTransitionProgress(uint64_t a1)
{
  double result = *(double *)a1;
  **(void **)(a1 + 8) = *(void *)a1;
  return result;
}

BOOL ScrollTransitionPhase.isIdentity.getter(char a1)
{
  return a1 == 1;
}

BOOL static ScrollTransitionPhase.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

double ScrollTransitionPhase.value.getter(char a1)
{
  return dbl_188374E00[a1];
}

void ScrollTransitionPhase.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int ScrollTransitionPhase.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type ScrollTransitionPhase and conformance ScrollTransitionPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollTransitionPhase and conformance ScrollTransitionPhase;
  if (!lazy protocol witness table cache variable for type ScrollTransitionPhase and conformance ScrollTransitionPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTransitionPhase and conformance ScrollTransitionPhase);
  }
  return result;
}

uint64_t destroy for ScrollTransitionConfiguration(void *a1)
{
  swift_release();
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  unint64_t v6 = a1[5];

  return outlined consume of ScrollTransitionConfiguration.Mode(v2, v3, v4, v5, v6);
}

void *initializeWithCopy for ScrollTransitionConfiguration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  unint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v3, v4, v5, v6, v7);
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  return a1;
}

void *assignWithCopy for ScrollTransitionConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  unint64_t v9 = a2[5];
  uint64_t v8 = a2[6];
  outlined copy of ScrollTransitionConfiguration.Mode(v4, v5, v6, v7, v9);
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  unint64_t v14 = a1[5];
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v9;
  a1[6] = v8;
  outlined consume of ScrollTransitionConfiguration.Mode(v10, v11, v12, v13, v14);
  return a1;
}

uint64_t assignWithTake for ScrollTransitionConfiguration(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v4;
  outlined consume of ScrollTransitionConfiguration.Mode(v5, v6, v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollTransitionConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 40) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for ScrollTransitionConfiguration(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 8) = 0u;
      *(void *)(a1 + 40) = 2 * -a2;
      *(void *)(a1 + 48) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollTransitionConfiguration()
{
  return &type metadata for ScrollTransitionConfiguration;
}

ValueMetadata *type metadata accessor for ScrollTransitionConfiguration.Threshold()
{
  return &type metadata for ScrollTransitionConfiguration.Threshold;
}

unsigned char *storeEnumTagSinglePayload for ScrollTransitionPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *double result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187A5F3E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollTransitionPhase()
{
  return &type metadata for ScrollTransitionPhase;
}

uint64_t sub_187A5F41C()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for ScrollTransitionConfiguration.Threshold.Storage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t destroy for ScrollTransitionConfiguration.Threshold.Storage()
{
  return swift_release();
}

void *assignWithCopy for ScrollTransitionConfiguration.Threshold(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for ScrollTransitionConfiguration.Threshold.Storage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollTransitionConfiguration.Threshold(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7D && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 125);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7C) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ScrollTransitionConfiguration.Threshold(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7C)
  {
    *(void *)double result = a2 - 125;
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7D) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)double result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for ScrollTransitionConfiguration.Threshold.Storage(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 == 3) {
    return (*a1 >> 3) + 3;
  }
  else {
    return v1;
  }
}

unint64_t *destructiveInjectEnumTag for ScrollTransitionConfiguration.Threshold.Storage(unint64_t *result, uint64_t a2)
{
  if (a2 < 3)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 3);
    unint64_t v3 = 0xC000000000000000;
  }
  *double result = v2 | v3;
  return result;
}

void *type metadata accessor for ScrollTransitionConfiguration.Threshold.Storage()
{
  return &unk_1ED456C38;
}

uint64_t destroy for ScrollTransitionConfiguration.Mode(uint64_t a1)
{
  return outlined consume of ScrollTransitionConfiguration.Mode(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t *initializeWithCopy for ScrollTransitionConfiguration.Mode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  outlined copy of ScrollTransitionConfiguration.Mode(*a2, v4, v5, v6, v7);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  return a1;
}

uint64_t *assignWithCopy for ScrollTransitionConfiguration.Mode(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  outlined copy of ScrollTransitionConfiguration.Mode(*a2, v4, v5, v6, v7);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  uint64_t v11 = a1[2];
  uint64_t v12 = a1[3];
  unint64_t v13 = a1[4];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  outlined consume of ScrollTransitionConfiguration.Mode(v9, v10, v11, v12, v13);
  return a1;
}

uint64_t *assignWithTake for ScrollTransitionConfiguration.Mode(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[3];
  unint64_t v7 = a1[4];
  long long v8 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v8;
  *((_OWORD *)a1 + 2) = a2[2];
  outlined consume of ScrollTransitionConfiguration.Mode(v3, v5, v4, v6, v7);
  return a1;
}

ValueMetadata *type metadata accessor for ScrollTransitionConfiguration.Mode()
{
  return &type metadata for ScrollTransitionConfiguration.Mode;
}

uint64_t destroy for ScrollTransitionModifier(void *a1)
{
  swift_release();
  swift_release();
  outlined consume of ScrollTransitionConfiguration.Mode(a1[3], a1[4], a1[5], a1[6], a1[7]);
  swift_release();
  uint64_t v2 = a1[10];
  uint64_t v3 = a1[11];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  unint64_t v6 = a1[14];

  return outlined consume of ScrollTransitionConfiguration.Mode(v2, v3, v4, v5, v6);
}

uint64_t initializeWithCopy for ScrollTransitionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v5, v6, v7, v8, v9);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 88);
  uint64_t v13 = *(void *)(a2 + 96);
  uint64_t v14 = *(void *)(a2 + 104);
  unint64_t v15 = *(void *)(a2 + 112);
  uint64_t v16 = *(void *)(a2 + 120);
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v11, v12, v13, v14, v15);
  *(void *)(a1 + 80) = v11;
  *(void *)(a1 + 88) = v12;
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v14;
  *(void *)(a1 + 112) = v15;
  *(void *)(a1 + 120) = v16;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  return a1;
}

uint64_t assignWithCopy for ScrollTransitionModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  unint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  outlined copy of ScrollTransitionConfiguration.Mode(v5, v6, v7, v8, v9);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 48);
  unint64_t v15 = *(void *)(a1 + 56);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  outlined consume of ScrollTransitionConfiguration.Mode(v11, v12, v13, v14, v15);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  uint64_t v16 = *(void *)(a2 + 80);
  uint64_t v17 = *(void *)(a2 + 88);
  uint64_t v18 = *(void *)(a2 + 96);
  uint64_t v19 = *(void *)(a2 + 104);
  unint64_t v20 = *(void *)(a2 + 112);
  uint64_t v21 = *(void *)(a2 + 120);
  outlined copy of ScrollTransitionConfiguration.Mode(v16, v17, v18, v19, v20);
  uint64_t v22 = *(void *)(a1 + 80);
  uint64_t v23 = *(void *)(a1 + 88);
  uint64_t v24 = *(void *)(a1 + 96);
  uint64_t v25 = *(void *)(a1 + 104);
  unint64_t v26 = *(void *)(a1 + 112);
  *(void *)(a1 + 80) = v16;
  *(void *)(a1 + 88) = v17;
  *(void *)(a1 + 96) = v18;
  *(void *)(a1 + 104) = v19;
  *(void *)(a1 + 112) = v20;
  *(void *)(a1 + 120) = v21;
  outlined consume of ScrollTransitionConfiguration.Mode(v22, v23, v24, v25, v26);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  return a1;
}

__n128 __swift_memcpy129_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for ScrollTransitionModifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  unint64_t v8 = *(void *)(a1 + 56);
  long long v9 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v9;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  outlined consume of ScrollTransitionConfiguration.Mode(v4, v5, v6, v7, v8);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 96);
  uint64_t v13 = *(void *)(a1 + 104);
  unint64_t v14 = *(void *)(a1 + 112);
  long long v15 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v15;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  outlined consume of ScrollTransitionConfiguration.Mode(v10, v11, v12, v13, v14);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollTransitionModifier(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 129)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollTransitionModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 128) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 129) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 129) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in ScrollTransitionModifier<A>()
{
  return &protocol witness table for ScrollTransitionModifier<A>;
}

uint64_t type metadata accessor for ScrollTransitionModifier.StageProgress()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ScrollTransitionModifier.ConfigurationTransaction()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<ScrollTransitionProgress>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t type metadata accessor for ScrollTransitionModifier.EffectApplicationModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ScrollTransitionModifier.EffectRule()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for ScrollTransitionModifier.EffectApplicationModifier(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for ScrollTransitionModifier.EffectApplicationModifier(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v3 = a2[3];
  a1[2] = a2[2];
  a1[3] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for ScrollTransitionModifier.EffectApplicationModifier(_OWORD *a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

void *type metadata accessor for ScrollTransitionProgress()
{
  return &unk_1ED443980;
}

uint64_t getEnumTagSinglePayload for ScrollTransitionModifier.StageProgress(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[32]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollTransitionModifier.StageProgress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ScrollTransitionModifier<A>.StageProgress()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ScrollTransitionModifier<A>.ConfigurationTransaction()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ScrollTransitionModifier<A>.EffectRule()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ScrollTransitionModifier<A>.EffectApplicationModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in ScrollTransitionProgress()
{
  return MEMORY[0x1E4F41890];
}

void *outlined release of ScrollTransitionModifier<A1>(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  unint64_t v6 = a1[7];
  uint64_t v7 = a1[12];
  uint64_t v11 = a1[11];
  uint64_t v12 = a1[10];
  unint64_t v9 = a1[14];
  uint64_t v10 = a1[13];
  swift_release();
  swift_release();
  outlined consume of ScrollTransitionConfiguration.Mode(v2, v3, v4, v5, v6);
  swift_release();
  outlined consume of ScrollTransitionConfiguration.Mode(v12, v11, v7, v10, v9);
  return a1;
}

void *outlined retain of ScrollTransitionModifier<A>(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  unint64_t v6 = a1[7];
  uint64_t v11 = a1[11];
  uint64_t v12 = a1[10];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[12];
  unint64_t v8 = a1[14];
  swift_retain();
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v2, v3, v4, v5, v6);
  swift_retain();
  outlined copy of ScrollTransitionConfiguration.Mode(v12, v11, v10, v9, v8);
  return a1;
}

uint64_t partial apply for closure #1 in ScrollTransitionModifier.EffectApplicationModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ScrollTransitionModifier.EffectApplicationModifier.body(content:)(*(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), a1, *(double *)(v1 + 32), *(double *)(v1 + 40));
}

uint64_t sub_187A5FFF0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in ScrollTransitionModifier.EffectApplicationModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return ScrollTransitionModifier.EffectApplicationModifier.effect(for:)(*(uint64_t (**)(double))(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24), a1, *(double *)(v1 + 32), *(double *)(v1 + 40));
}

unsigned char *storeEnumTagSinglePayload for ScrollTransitionModifier.Stage(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187A60124);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for ScrollTransitionModifier.Stage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187A60164()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for Equatable in ScrollTransitionModifier<A>.Stage()
{
  return swift_getWitnessTable();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_SSs5NeverOTg503_s7d4UI12f34ItemGroupV11descriptionSSvgSSAA0C5G54Ocfu_33_9399ad856152282ea5b6572c43dac5b6AFSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v24 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v4 = a1 + 32;
    do
    {
      outlined init with copy of TabEntry(v4, (uint64_t)__src);
      if (v23)
      {
        uint64_t v5 = memcpy(__dst, __src, sizeof(__dst));
        strcpy((char *)v20, "TabItemGroup ");
        HIWORD(v20[1]) = -4864;
        v6._countAndFlagsBits = TabItemGroup.description.getter(v5);
        String.append(_:)(v6);
        swift_bridgeObjectRelease();
        uint64_t v7 = v20[0];
        uint64_t v8 = v20[1];
        outlined destroy of TabItemGroup((uint64_t)__dst);
      }
      else
      {
        *(_OWORD *)&__dst[64] = *(_OWORD *)&__src[64];
        *(_OWORD *)&__dst[80] = *(_OWORD *)&__src[80];
        *(void *)&__dst[96] = *(void *)&__src[96];
        *(_OWORD *)__dst = *(_OWORD *)__src;
        *(_OWORD *)&__dst[16] = *(_OWORD *)&__src[16];
        *(_OWORD *)&__dst[32] = *(_OWORD *)&__src[32];
        *(_OWORD *)&__dst[48] = *(_OWORD *)&__src[48];
        _StringGuts.grow(_:)(20);
        swift_bridgeObjectRelease();
        strcpy((char *)v20, "TabItem ");
        BYTE1(v20[1]) = 0;
        WORD1(v20[1]) = 0;
        HIDWORD(v20[1]) = -402653184;
        v9._countAndFlagsBits = TabItem.platformIdentifier.getter();
        String.append(_:)(v9);
        swift_bridgeObjectRelease();
        v10._countAndFlagsBits = 0x3D6E656464696820;
        v10._object = (void *)0xE800000000000000;
        String.append(_:)(v10);
        char v11 = TabEntry.hidden.getter();
        BOOL v12 = (v11 & 1) == 0;
        if (v11) {
          uint64_t v13 = 1702195828;
        }
        else {
          uint64_t v13 = 0x65736C6166;
        }
        if (v12) {
          unint64_t v14 = 0xE500000000000000;
        }
        else {
          unint64_t v14 = 0xE400000000000000;
        }
        unint64_t v15 = v14;
        String.append(_:)(*(Swift::String *)&v13);
        swift_bridgeObjectRelease();
        uint64_t v7 = v20[0];
        uint64_t v8 = v20[1];
        outlined destroy of TabItem((uint64_t)__dst);
      }
      uint64_t v2 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
        uint64_t v2 = v24;
      }
      unint64_t v17 = *(void *)(v2 + 16);
      unint64_t v16 = *(void *)(v2 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        uint64_t v2 = v24;
      }
      *(void *)(v2 + 16) = v17 + 1;
      uint64_t v18 = v2 + 16 * v17;
      *(void *)(v18 + 32) = v7;
      *(void *)(v18 + 40) = v8;
      v4 += 272;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t TabItemGroup.init(childEntries:actions:transientIdentifier:header:compactRepresentation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int64_t a7@<X8>)
{
  uint64_t v7 = a5;
  uint64_t v8 = a1;
  int64_t v9 = a7;
  *(_OWORD *)(a7 + 48) = 0u;
  Swift::String v10 = (_OWORD *)(a7 + 48);
  v10[11] = 0u;
  v10[12] = 0u;
  v10[9] = 0u;
  v10[10] = 0u;
  v10[7] = 0u;
  v10[8] = 0u;
  v10[5] = 0u;
  v10[6] = 0u;
  _OWORD v10[3] = 0u;
  v10[4] = 0u;
  v10[1] = 0u;
  v10[2] = 0u;
  uint64_t v59 = (uint64_t)v10;
  uint64_t v11 = *(void *)(a1 + 16);
  BOOL v12 = (char *)MEMORY[0x1E4FBC860];
  if (!v11)
  {
LABEL_45:
    uint64_t v21 = (char *)(v59 + 104);
    *(void *)int64_t v9 = v12;
    *(void *)(v9 + 8) = v8;
    *(void *)(v9 + 16) = a2;
    outlined init with copy of TabItem?(v7, (uint64_t)v74);
    if (v74[3])
    {
      *(void *)&long long v64 = v74[11];
      uint64_t v44 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v44 != -1) {
        goto LABEL_65;
      }
      goto LABEL_47;
    }
    outlined destroy of TabItem?((uint64_t)v74, (uint64_t (*)(void))type metadata accessor for TabItem?);
    uint64_t v48 = a6;
    goto LABEL_50;
  }
  uint64_t v53 = a2;
  int64_t v55 = v9;
  uint64_t v7 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of TabEntry(v7, (uint64_t)v74);
    outlined init with copy of TabEntry((uint64_t)v74, (uint64_t)__src);
    if ((v73 & 1) == 0)
    {
      __dst[4] = *(_OWORD *)&__src[64];
      __dst[5] = *(_OWORD *)&__src[80];
      *(void *)&__dst[6] = *(void *)&__src[96];
      __dst[0] = *(_OWORD *)__src;
      __dst[1] = *(_OWORD *)&__src[16];
      __dst[2] = *(_OWORD *)&__src[32];
      __dst[3] = *(_OWORD *)&__src[48];
      outlined init with copy of TabItem((uint64_t)__dst, (uint64_t)&v64);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
      }
      unint64_t v31 = *((void *)v12 + 2);
      unint64_t v30 = *((void *)v12 + 3);
      if (v31 >= v30 >> 1) {
        BOOL v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v12);
      }
      *((void *)v12 + 2) = v31 + 1;
      double v32 = &v12[104 * v31];
      long long v33 = v64;
      long long v34 = v66;
      *((_OWORD *)v32 + 3) = v65;
      *((_OWORD *)v32 + 4) = v34;
      *((_OWORD *)v32 + 2) = v33;
      long long v35 = v67;
      long long v36 = v68;
      long long v37 = v69;
      *((void *)v32 + 16) = v70;
      *((_OWORD *)v32 + 6) = v36;
      *((_OWORD *)v32 + 7) = v37;
      *((_OWORD *)v32 + 5) = v35;
      outlined destroy of TabItem((uint64_t)__dst);
      goto LABEL_5;
    }
    memcpy(__dst, __src, 0x108uLL);
    outlined init with copy of TabItem?((uint64_t)&__dst[3], (uint64_t)&v64);
    if (*((void *)&v65 + 1))
    {
      v62[4] = v68;
      v62[5] = v69;
      uint64_t v63 = v70;
      v62[0] = v64;
      v62[1] = v65;
      v62[2] = v66;
      v62[3] = v67;
      outlined init with copy of TabItem((uint64_t)v62, (uint64_t)v60);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        BOOL v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
      }
      unint64_t v14 = *((void *)v12 + 2);
      unint64_t v13 = *((void *)v12 + 3);
      if (v14 >= v13 >> 1) {
        BOOL v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v12);
      }
      *((void *)v12 + 2) = v14 + 1;
      unint64_t v15 = &v12[104 * v14];
      long long v16 = v60[0];
      long long v17 = v60[2];
      *((_OWORD *)v15 + 3) = v60[1];
      *((_OWORD *)v15 + 4) = v17;
      *((_OWORD *)v15 + 2) = v16;
      long long v18 = v60[3];
      long long v19 = v60[4];
      long long v20 = v60[5];
      *((void *)v15 + 16) = v61;
      *((_OWORD *)v15 + 6) = v19;
      *((_OWORD *)v15 + 7) = v20;
      *((_OWORD *)v15 + 5) = v18;
      outlined destroy of TabItem((uint64_t)v62);
    }
    uint64_t v21 = *(char **)&__dst[0];
    uint64_t v22 = *(void *)&__dst[1];
    uint64_t v23 = *(void *)(*(void *)&__dst[1] + 16);
    int64_t v9 = *(void *)(*(void *)&__dst[0] + 16);
    int64_t v24 = v9 + v23;
    if (__OFADD__(v9, v23)) {
      goto LABEL_58;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v24 > *((void *)v21 + 3) >> 1)
    {
      if (v9 <= v24) {
        int64_t v26 = v9 + v23;
      }
      else {
        int64_t v26 = v9;
      }
      uint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v26, 1, v21);
    }
    if (*(void *)(v22 + 16))
    {
      if ((*((void *)v21 + 3) >> 1) - *((void *)v21 + 2) < v23) {
        goto LABEL_61;
      }
      swift_arrayInitWithCopy();
      if (v23)
      {
        uint64_t v27 = *((void *)v21 + 2);
        BOOL v28 = __OFADD__(v27, v23);
        uint64_t v29 = v27 + v23;
        if (v28) {
          goto LABEL_63;
        }
        *((void *)v21 + 2) = v29;
      }
    }
    else if (v23)
    {
      goto LABEL_59;
    }
    swift_bridgeObjectRelease();
    uint64_t v38 = *((void *)v21 + 2);
    int64_t v9 = *((void *)v12 + 2);
    int64_t v39 = v9 + v38;
    if (__OFADD__(v9, v38)) {
      goto LABEL_60;
    }
    int v40 = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (v40 && v39 <= *((void *)v12 + 3) >> 1)
    {
      if (*((void *)v21 + 2)) {
        goto LABEL_40;
      }
    }
    else
    {
      if (v9 <= v39) {
        int64_t v41 = v9 + v38;
      }
      else {
        int64_t v41 = v9;
      }
      BOOL v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40, v41, 1, v12);
      if (*((void *)v21 + 2))
      {
LABEL_40:
        if ((*((void *)v12 + 3) >> 1) - *((void *)v12 + 2) < v38) {
          goto LABEL_62;
        }
        swift_arrayInitWithCopy();
        if (v38)
        {
          uint64_t v42 = *((void *)v12 + 2);
          BOOL v28 = __OFADD__(v42, v38);
          uint64_t v43 = v42 + v38;
          if (v28) {
            goto LABEL_64;
          }
          *((void *)v12 + 2) = v43;
        }
        goto LABEL_4;
      }
    }
    if (v38) {
      break;
    }
LABEL_4:
    swift_bridgeObjectRelease();
    outlined destroy of TabItemGroup((uint64_t)__dst);
LABEL_5:
    outlined destroy of TabEntry((uint64_t)v74);
    v7 += 272;
    if (!--v11)
    {
      uint64_t v8 = a1;
      swift_bridgeObjectRelease();
      uint64_t v7 = a5;
      int64_t v9 = v55;
      a2 = v53;
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  swift_once();
LABEL_47:
  LOWORD(__dst[0]) = static TabOptions.TraitKey.defaultValue;
  BYTE2(__dst[0]) = byte_1E90FC582;
  *(_OWORD *)((char *)__dst + 8) = *(_OWORD *)&qword_1E90FC588;
  WORD4(__dst[1]) = word_1E90FC598;
  BYTE10(__dst[1]) = byte_1E90FC59A;
  *(void *)&__dst[2] = qword_1E90FC5A0;
  WORD4(__dst[2]) = word_1E90FC5A8;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  uint64_t v45 = *(void *)&__src[8];
  uint64_t v46 = *(void *)&__src[16];
  int v47 = __src[24];
  outlined copy of TabCustomizationID?(*(uint64_t *)&__src[8], *(uint64_t *)&__src[16], __src[24]);
  outlined consume of TabCustomizationID?(v45, v46, v47);
  swift_bridgeObjectRelease();
  outlined destroy of TabItem((uint64_t)v74);
  uint64_t v48 = a6;
  if (v47 != 255)
  {
    swift_bridgeObjectRelease();
    char v49 = v47 & 1;
    goto LABEL_51;
  }
LABEL_50:
  char v49 = 1;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
LABEL_51:
  *(void *)(v9 + 24) = v45;
  *(void *)(v9 + 32) = v46;
  *(unsigned char *)(v9 + 40) = v49;
  outlined assign with copy of TabItem?(v7, v59);
  outlined assign with copy of TabItem?(v48, (uint64_t)v21);
  if (!*(void *)(*(void *)v9 + 16))
  {
LABEL_55:
    uint64_t v50 = AGMakeUniqueID();
    goto LABEL_56;
  }
  *(void *)__src = *(void *)(*(void *)v9 + 120);
  *(void *)&__dst[0] = MEMORY[0x1E4FBC860];
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if (!*(void *)(v74[0] + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  uint64_t v50 = *(void *)(v74[0] + 32);
  swift_bridgeObjectRelease();
LABEL_56:
  outlined destroy of TabItem?(v48, (uint64_t (*)(void))type metadata accessor for TabItem?);
  uint64_t result = outlined destroy of TabItem?(v7, (uint64_t (*)(void))type metadata accessor for TabItem?);
  *(void *)(v9 + 256) = v50;
  return result;
}

uint64_t TabItemGroup.allChildEntries.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  int64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v5 = v2 + 32;
    uint64_t v4 = v12;
    do
    {
      outlined init with copy of TabItem(v5, (uint64_t)v9);
      outlined init with copy of TabItem((uint64_t)v9, (uint64_t)v10);
      char v11 = 0;
      outlined destroy of TabItem((uint64_t)v9);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
        uint64_t v4 = v12;
      }
      unint64_t v7 = *(void *)(v4 + 16);
      unint64_t v6 = *(void *)(v4 + 24);
      if (v7 >= v6 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
        uint64_t v4 = v12;
      }
      *(void *)(v4 + 16) = v7 + 1;
      outlined init with take of TabEntry((uint64_t)v10, v4 + 272 * v7 + 32);
      v5 += 104;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  v10[0] = v1;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v4);
  return v10[0];
}

BOOL TabItemGroup.sidebarReorderable.getter()
{
  outlined init with copy of TabItem?(v0 + 48, (uint64_t)&v41);
  if (!*((void *)&v42 + 1))
  {
    outlined destroy of TabItem?((uint64_t)&v41, (uint64_t (*)(void))type metadata accessor for TabItem?);
    return 0;
  }
  v48[4] = v45;
  v48[5] = v46;
  uint64_t v49 = v47;
  v48[0] = v41;
  v48[1] = v42;
  v48[2] = v43;
  v48[3] = v44;
  TabItem.resolvedSidebarCustomizationBehavior.getter((char *)&v41);
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
LABEL_22:
    outlined destroy of TabItem((uint64_t)v48);
    return 0;
  }
  int v16 = v41;
  uint64_t v3 = v1 + 32;
  swift_bridgeObjectRetain();
  uint64_t v4 = &protocol witness table for TabOptions.TraitKey;
  while (1)
  {
    outlined init with copy of TabEntry(v3, (uint64_t)&v41);
    outlined init with copy of TabEntry((uint64_t)&v41, (uint64_t)__src);
    if ((v40 & 1) == 0) {
      break;
    }
    uint64_t v5 = memcpy(__dst, __src, 0x108uLL);
    char v6 = TabItemGroup.sidebarReorderable.getter(v5);
    outlined destroy of TabItemGroup((uint64_t)__dst);
    outlined destroy of TabEntry((uint64_t)&v41);
    if (v6) {
      goto LABEL_24;
    }
LABEL_5:
    v3 += 272;
    if (!--v2)
    {
      swift_bridgeObjectRelease();
      goto LABEL_22;
    }
  }
  __dst[4] = *(_OWORD *)&__src[64];
  __dst[5] = *(_OWORD *)&__src[80];
  *(void *)&__dst[6] = *(void *)&__src[96];
  __dst[0] = *(_OWORD *)__src;
  __dst[1] = *(_OWORD *)&__src[16];
  __dst[2] = *(_OWORD *)&__src[32];
  __dst[3] = *(_OWORD *)&__src[48];
  uint64_t v24 = *(void *)&__src[88];
  uint64_t v7 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v7 != -1) {
    swift_once();
  }
  __int16 v17 = static TabOptions.TraitKey.defaultValue;
  char v18 = byte_1E90FC582;
  long long v19 = *(_OWORD *)&qword_1E90FC588;
  __int16 v20 = word_1E90FC598;
  char v21 = byte_1E90FC59A;
  uint64_t v22 = qword_1E90FC5A0;
  __int16 v23 = word_1E90FC5A8;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  int v8 = v36;
  outlined consume of TabCustomizationID?(v32, v33, v34);
  swift_bridgeObjectRelease();
  outlined init with copy of TabItem((uint64_t)__dst, (uint64_t)v31);
  if (v8)
  {
    uint64_t v30 = v37;
    LOWORD(v24) = static TabOptions.TraitKey.defaultValue;
    BYTE2(v24) = byte_1E90FC582;
    long long v25 = *(_OWORD *)&qword_1E90FC588;
    __int16 v26 = word_1E90FC598;
    char v27 = byte_1E90FC59A;
    uint64_t v28 = qword_1E90FC5A0;
    __int16 v29 = word_1E90FC5A8;
    ViewTraitCollection.value<A>(for:defaultValue:)();
    int v9 = HIBYTE(v20);
    outlined consume of TabCustomizationID?(v19, *((uint64_t *)&v19 + 1), v20);
    swift_bridgeObjectRelease();
    outlined destroy of TabItem((uint64_t)v31);
    outlined init with copy of TabItem((uint64_t)__dst, (uint64_t)&v17);
    if (v9)
    {
      char v10 = TabItem.alwaysRequiresCustomizationID.getter();
      outlined destroy of TabItem((uint64_t)&v17);
      outlined init with copy of TabItem((uint64_t)__dst, (uint64_t)v31);
      if ((v10 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
  }
  else
  {
    outlined destroy of TabItem((uint64_t)v31);
    outlined init with copy of TabItem((uint64_t)__dst, (uint64_t)&v17);
  }
  outlined destroy of TabItem((uint64_t)&v17);
  outlined init with copy of TabItem((uint64_t)__dst, (uint64_t)v31);
LABEL_15:
  uint64_t v30 = v37;
  LOWORD(v24) = static TabOptions.TraitKey.defaultValue;
  BYTE2(v24) = byte_1E90FC582;
  long long v25 = *(_OWORD *)&qword_1E90FC588;
  __int16 v26 = word_1E90FC598;
  char v27 = byte_1E90FC59A;
  uint64_t v28 = qword_1E90FC5A0;
  __int16 v29 = word_1E90FC5A8;
  char v11 = v4;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  long long v12 = v19;
  int v13 = v20;
  outlined copy of TabCustomizationID?(v19, *((uint64_t *)&v19 + 1), v20);
  outlined consume of TabCustomizationID?(v12, *((uint64_t *)&v12 + 1), v13);
  swift_bridgeObjectRelease();
  if (v13 == 255)
  {
    outlined destroy of TabItem((uint64_t)v31);
    outlined destroy of TabItem((uint64_t)__dst);
    outlined destroy of TabEntry((uint64_t)&v41);
    uint64_t v4 = v11;
    goto LABEL_5;
  }
  outlined consume of TabCustomizationID?(v12, *((uint64_t *)&v12 + 1), v13);
  uint64_t v4 = v11;
LABEL_17:
  outlined destroy of TabItem((uint64_t)v31);
  uint64_t v24 = *((void *)&__dst[5] + 1);
  __int16 v17 = static TabOptions.TraitKey.defaultValue;
  char v18 = byte_1E90FC582;
  long long v19 = *(_OWORD *)&qword_1E90FC588;
  __int16 v20 = word_1E90FC598;
  char v21 = byte_1E90FC59A;
  uint64_t v22 = qword_1E90FC5A0;
  __int16 v23 = word_1E90FC5A8;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  unsigned int v14 = v35;
  outlined consume of TabCustomizationID?(v32, v33, v34);
  swift_bridgeObjectRelease();
  outlined destroy of TabItem((uint64_t)__dst);
  outlined destroy of TabEntry((uint64_t)&v41);
  if (v14 > 1) {
    goto LABEL_5;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  outlined destroy of TabItem((uint64_t)v48);
  return v16 != 2;
}

uint64_t TabItemGroup.hidden.getter()
{
  outlined init with copy of TabItem?(v0 + 48, (uint64_t)v8);
  if (v9)
  {
    uint64_t v1 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v1 != -1) {
      swift_once();
    }
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    uint64_t v2 = v4;
    outlined consume of TabCustomizationID?(v5, v6, v7);
    swift_bridgeObjectRelease();
    outlined destroy of TabItem((uint64_t)v8);
  }
  else
  {
    outlined destroy of TabItem?((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for TabItem?);
    return 0;
  }
  return v2;
}

void static TabItemGroup.HostView._layoutOptions(_:)(uint64_t *a1@<X8>)
{
  *a1 = qword_1ED4132C0 | 4;
}

id protocol witness for UIViewControllerRepresentable.makeUIViewController(context:) in conformance TabItemGroup.HostView()
{
  uint64_t v1 = *v0;
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1EC0]), sel_initWithNibName_bundle_, 0, 0);
  specialized TabItemGroup.Coordinator.addChildRemovingExistingIfNeeded(_:to:)(v1, v2);
  return v2;
}

void protocol witness for UIViewControllerRepresentable.updateUIViewController(_:context:) in conformance TabItemGroup.HostView(id a1)
{
  specialized TabItemGroup.Coordinator.addChildRemovingExistingIfNeeded(_:to:)(*v1, a1);
}

uint64_t protocol witness for UIViewControllerRepresentable.makeCoordinator() in conformance TabItemGroup.HostView@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for TabItemGroup.Coordinator();
  uint64_t result = swift_allocObject();
  *a1 = result;
  return result;
}

void TabItemGroup.HostCache.removeOldestKey()()
{
  uint64_t v1 = v0;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v2 - 8);
  unsigned __int8 v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (void *)v1[2];
  if (!v5[2])
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return;
  }
  uint64_t v7 = v5[4];
  unint64_t v6 = v5[5];
  swift_bridgeObjectRetain();
  static Log.tabView.getter();
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of TabItem?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  else
  {
    swift_bridgeObjectRetain();
    char v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v21 = v7;
      int v13 = (uint8_t *)v12;
      uint64_t v14 = swift_slowAlloc();
      uint64_t v23 = v14;
      *(_DWORD *)int v13 = 136315138;
      v20[1] = v13 + 4;
      swift_bridgeObjectRetain();
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v6, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v10, v11, "Removing child VC '%s'", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v14, -1, -1);
      MEMORY[0x18C119C60](v13, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v8);
  }
  if (!*(void *)(v1[3] + 16)) {
    goto LABEL_14;
  }
  uint64_t v15 = v1[1];
  if (v15)
  {
    uint64_t v16 = v1[2];
    swift_retain();
    specialized closure #1 in OrderedSet._bucket(for:)((void *)(v15 + 16), v15 + 32, v16, 0);
    uint64_t v18 = v17;
    swift_release();
  }
  else
  {
    uint64_t v18 = 0;
  }
  specialized OrderedSet._removeExistingMember(at:in:)(0, v18);
  long long v19 = (void *)specialized ContiguousArray.remove(at:)(0);
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for TabItemGroup.Coordinator()
{
  return self;
}

uint64_t destroy for TabItemGroup(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of TabCustomizationID.Base();
  if (*(void *)(a1 + 72))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t result = swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 176))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 152);
    swift_release();
    swift_bridgeObjectRelease();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TabItemGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of TabCustomizationID.Base();
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  uint64_t v8 = (_OWORD *)(a1 + 48);
  uint64_t v9 = (_OWORD *)(a2 + 48);
  uint64_t v10 = *(void *)(a2 + 72);
  if (v10)
  {
    uint64_t v11 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = v11;
    (**(void (***)(_OWORD *, _OWORD *))(v10 - 8))(v8, v9);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    int v13 = *(void **)(a2 + 128);
    uint64_t v12 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v13;
    *(void *)(a1 + 136) = v12;
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_retain();
    swift_bridgeObjectRetain();
    id v14 = v13;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v15;
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    long long v16 = *(_OWORD *)(a2 + 64);
    *uint64_t v8 = *v9;
    *(_OWORD *)(a1 + 64) = v16;
    long long v17 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v17;
  }
  uint64_t v18 = (_OWORD *)(a1 + 152);
  long long v19 = (_OWORD *)(a2 + 152);
  uint64_t v20 = *(void *)(a2 + 176);
  if (v20)
  {
    uint64_t v21 = *(void *)(a2 + 184);
    *(void *)(a1 + 176) = v20;
    *(void *)(a1 + 184) = v21;
    (**(void (***)(_OWORD *, _OWORD *))(v20 - 8))(v18, v19);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    uint64_t v23 = *(void **)(a2 + 232);
    uint64_t v22 = *(void *)(a2 + 240);
    *(void *)(a1 + 232) = v23;
    *(void *)(a1 + 240) = v22;
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    swift_retain();
    swift_bridgeObjectRetain();
    id v24 = v23;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v25 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v25;
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    long long v26 = *(_OWORD *)(a2 + 168);
    *uint64_t v18 = *v19;
    *(_OWORD *)(a1 + 168) = v26;
    long long v27 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v27;
  }
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  return a1;
}

uint64_t assignWithCopy for TabItemGroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  outlined copy of TabCustomizationID.Base();
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  outlined consume of TabCustomizationID.Base();
  char v7 = (_OWORD *)(a1 + 48);
  uint64_t v8 = (_OWORD *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v9)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_retain();
      swift_release();
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      uint64_t v10 = *(void **)(a1 + 128);
      uint64_t v11 = *(void **)(a2 + 128);
      *(void *)(a1 + 128) = v11;
      id v12 = v11;

      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
    }
    else
    {
      outlined destroy of TabItem(a1 + 48);
      long long v16 = *(_OWORD *)(a2 + 64);
      long long v15 = *(_OWORD *)(a2 + 80);
      *char v7 = *v8;
      *(_OWORD *)(a1 + 64) = v16;
      *(_OWORD *)(a1 + 80) = v15;
      long long v18 = *(_OWORD *)(a2 + 112);
      long long v17 = *(_OWORD *)(a2 + 128);
      long long v19 = *(_OWORD *)(a2 + 96);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v18;
      *(_OWORD *)(a1 + 128) = v17;
      *(_OWORD *)(a1 + 96) = v19;
    }
  }
  else if (v9)
  {
    *(void *)(a1 + 72) = v9;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 48, a2 + 48);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    int v13 = *(void **)(a2 + 128);
    *(void *)(a1 + 128) = v13;
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_retain();
    swift_bridgeObjectRetain();
    id v14 = v13;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *v8;
    long long v21 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v21;
    *char v7 = v20;
    long long v22 = *(_OWORD *)(a2 + 96);
    long long v23 = *(_OWORD *)(a2 + 112);
    long long v24 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 112) = v23;
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 96) = v22;
  }
  long long v25 = (_OWORD *)(a1 + 152);
  long long v26 = (_OWORD *)(a2 + 152);
  uint64_t v27 = *(void *)(a2 + 176);
  if (*(void *)(a1 + 176))
  {
    if (v27)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 152), (uint64_t *)(a2 + 152));
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_retain();
      swift_release();
      *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      uint64_t v28 = *(void **)(a1 + 232);
      __int16 v29 = *(void **)(a2 + 232);
      *(void *)(a1 + 232) = v29;
      id v30 = v29;

      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
    }
    else
    {
      outlined destroy of TabItem(a1 + 152);
      long long v34 = *(_OWORD *)(a2 + 168);
      long long v33 = *(_OWORD *)(a2 + 184);
      *long long v25 = *v26;
      *(_OWORD *)(a1 + 168) = v34;
      *(_OWORD *)(a1 + 184) = v33;
      long long v36 = *(_OWORD *)(a2 + 216);
      long long v35 = *(_OWORD *)(a2 + 232);
      long long v37 = *(_OWORD *)(a2 + 200);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(_OWORD *)(a1 + 216) = v36;
      *(_OWORD *)(a1 + 232) = v35;
      *(_OWORD *)(a1 + 200) = v37;
    }
  }
  else if (v27)
  {
    *(void *)(a1 + 176) = v27;
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    (**(void (***)(uint64_t, uint64_t))(v27 - 8))(a1 + 152, a2 + 152);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    unint64_t v31 = *(void **)(a2 + 232);
    *(void *)(a1 + 232) = v31;
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    swift_retain();
    swift_bridgeObjectRetain();
    id v32 = v31;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v38 = *v26;
    long long v39 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v39;
    *long long v25 = v38;
    long long v40 = *(_OWORD *)(a2 + 200);
    long long v41 = *(_OWORD *)(a2 + 216);
    long long v42 = *(_OWORD *)(a2 + 232);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(_OWORD *)(a1 + 216) = v41;
    *(_OWORD *)(a1 + 232) = v42;
    *(_OWORD *)(a1 + 200) = v40;
  }
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  return a1;
}

uint64_t outlined destroy of TabItem(uint64_t a1)
{
  return a1;
}

void *__swift_memcpy264_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t assignWithTake for TabItemGroup(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  char v4 = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of TabCustomizationID.Base();
  uint64_t v5 = (_OWORD *)(a1 + 48);
  char v6 = (_OWORD *)(a2 + 48);
  if (*(void *)(a1 + 72))
  {
    if (*(void *)(a2 + 72))
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
      long long v7 = *(_OWORD *)(a2 + 64);
      *uint64_t v5 = *v6;
      *(_OWORD *)(a1 + 64) = v7;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_release();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_bridgeObjectRelease();
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      uint64_t v8 = *(void **)(a1 + 128);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);

      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      goto LABEL_6;
    }
    outlined destroy of TabItem(a1 + 48);
  }
  long long v9 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v9;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  long long v10 = *(_OWORD *)(a2 + 64);
  *uint64_t v5 = *v6;
  *(_OWORD *)(a1 + 64) = v10;
  long long v11 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v11;
LABEL_6:
  id v12 = (_OWORD *)(a1 + 152);
  int v13 = (_OWORD *)(a2 + 152);
  if (!*(void *)(a1 + 176))
  {
LABEL_10:
    long long v16 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v16;
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    long long v17 = *(_OWORD *)(a2 + 168);
    *id v12 = *v13;
    *(_OWORD *)(a1 + 168) = v17;
    long long v18 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v18;
    goto LABEL_11;
  }
  if (!*(void *)(a2 + 176))
  {
    outlined destroy of TabItem(a1 + 152);
    goto LABEL_10;
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 152);
  long long v14 = *(_OWORD *)(a2 + 168);
  *id v12 = *v13;
  *(_OWORD *)(a1 + 168) = v14;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_release();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  long long v15 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);

  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
LABEL_11:
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabItemGroup(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 264)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TabItemGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 264) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 264) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabItemGroup()
{
  return &type metadata for TabItemGroup;
}

uint64_t destroy for TabItemGroup.HostCache()
{
  swift_release();
  swift_release();

  return swift_release();
}

void *initializeWithCopy for TabItemGroup.HostCache(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for TabItemGroup.HostCache(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TabItemGroup.HostCache(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TabItemGroup.HostCache()
{
  return &type metadata for TabItemGroup.HostCache;
}

uint64_t TabItemGroup.description.getter()
{
  v33[0] = 0;
  v33[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(122);
  uint64_t v34 = 0;
  unint64_t v35 = 0xE000000000000000;
  v1._countAndFlagsBits = 2122857;
  v1._object = (void *)0xE300000000000000;
  String.append(_:)(v1);
  uint64_t v2 = v0[3];
  uint64_t v3 = (void *)v0[4];
  outlined copy of TabCustomizationID.Base();
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  outlined consume of TabCustomizationID.Base();
  v5._object = (void *)0xEF20746E756F4379;
  v5._countAndFlagsBits = 0x72746E456261740ALL;
  String.append(_:)(v5);
  v33[0] = *(void *)(v0[1] + 16);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x657449626174202CLL;
  v7._object = (void *)0xEF20746E756F436DLL;
  String.append(_:)(v7);
  v33[0] = *(void *)(*v0 + 16);
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._object = (void *)0xEF20746E756F4373;
  v9._countAndFlagsBits = 0x6E6F69746361202CLL;
  String.append(_:)(v9);
  v33[0] = *(void *)(v0[2] + 16);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x696863206C6C610ALL;
  v11._object = (void *)0xEE00206E6572646CLL;
  String.append(_:)(v11);
  uint64_t v12 = TabItemGroup.allChildEntries.getter();
  uint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_SSs5NeverOTg503_s7d4UI12f34ItemGroupV11descriptionSSvgSSAA0C5G54Ocfu_33_9399ad856152282ea5b6572c43dac5b6AFSSTf3nnnpk_nTf1cn_n(v12);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = MEMORY[0x18C115B70](v13, MEMORY[0x1E4FBB1A0]);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x646165487361680ALL;
  v15._object = (void *)0xEB000000003D7265;
  String.append(_:)(v15);
  outlined init with copy of TabItem?((uint64_t)(v0 + 6), (uint64_t)v33);
  uint64_t v16 = v33[3];
  outlined destroy of TabItem?((uint64_t)v33, (uint64_t (*)(void))type metadata accessor for TabItem?);
  if (v16) {
    uint64_t v17 = 1702195828;
  }
  else {
    uint64_t v17 = 0x65736C6166;
  }
  if (v16) {
    unint64_t v18 = 0xE400000000000000;
  }
  else {
    unint64_t v18 = 0xE500000000000000;
  }
  unint64_t v19 = v18;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x800000018832F9E0;
  v20._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v20);
  BOOL v21 = TabItemGroup.sidebarReorderable.getter();
  BOOL v22 = !v21;
  if (v21) {
    uint64_t v23 = 1702195828;
  }
  else {
    uint64_t v23 = 0x65736C6166;
  }
  if (v22) {
    unint64_t v24 = 0xE500000000000000;
  }
  else {
    unint64_t v24 = 0xE400000000000000;
  }
  unint64_t v25 = v24;
  String.append(_:)(*(Swift::String *)&v23);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x3D6E656464696820;
  v26._object = (void *)0xE800000000000000;
  String.append(_:)(v26);
  char v27 = TabItemGroup.hidden.getter();
  BOOL v28 = (v27 & 1) == 0;
  if (v27) {
    uint64_t v29 = 1702195828;
  }
  else {
    uint64_t v29 = 0x65736C6166;
  }
  if (v28) {
    unint64_t v30 = 0xE500000000000000;
  }
  else {
    unint64_t v30 = 0xE400000000000000;
  }
  unint64_t v31 = v30;
  String.append(_:)(*(Swift::String *)&v29);
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t outlined init with copy of TabItem?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TabItem?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for TabItem?()
{
  if (!lazy cache variable for type metadata for TabItem?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TabItem?);
    }
  }
}

uint64_t outlined init with copy of TabEntry(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of TabItemGroup(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of TabEntry(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of TabItem(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined copy of TabCustomizationID?(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return outlined copy of TabCustomizationID.Base();
  }
  return result;
}

ValueMetadata *type metadata accessor for TabItemGroup.HostView()
{
  return &type metadata for TabItemGroup.HostView;
}

void specialized closure #1 in OrderedSet._bucket(for:)(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (*(void *)(a3 + 16) <= a4)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Hasher._finalize()();
  if (__OFSUB__(1 << *a1, 1))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v6 = _HashTable.UnsafeHandle._startIterator(bucket:)();
  swift_bridgeObjectRelease();
  if (!v6)
  {
LABEL_13:
    __break(1u);
    return;
  }
  while (1)
  {
    uint64_t v7 = _HashTable.BucketIterator.currentValue.getter();
    if ((v8 & 1) == 0 && v7 == a4) {
      break;
    }
    _HashTable.BucketIterator.advance()();
  }
}

void specialized TabItemGroup.Coordinator.addChildRemovingExistingIfNeeded(_:to:)(void *a1, id a2)
{
  id v4 = objc_msgSend(a2, sel_childViewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v5 >> 62))
  {
    if (*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_10:
    swift_bridgeObjectRelease();
    id v23 = 0;
LABEL_11:
    id v12 = objc_msgSend(a2, sel_childViewControllers);
    unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_19;
    }
    objc_msgSend(a2, sel_addChildViewController_, a1);
    id v15 = objc_msgSend(a2, sel_view);
    if (v15)
    {
      uint64_t v16 = v15;
      id v17 = objc_msgSend(a1, sel_view);
      if (v17)
      {
        unint64_t v18 = v17;
        objc_msgSend(v16, sel_addSubview_, v17);

        id v19 = objc_msgSend(a1, sel_view);
        if (v19)
        {
          Swift::String v20 = v19;
          id v21 = objc_msgSend(a2, sel_view);
          if (v21)
          {
            BOOL v22 = v21;
            UIView.constrainToView(_:exceptEdges:identifier:)(v21, 0, 0x476D657449626174, (void *)0xEC00000070756F72);

            swift_bridgeObjectRelease();
            objc_msgSend(a1, sel_didMoveToParentViewController_, a2);
            goto LABEL_19;
          }
LABEL_29:
          __break(1u);
          return;
        }
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  swift_bridgeObjectRetain();
  uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_10;
  }
LABEL_3:
  if ((v5 & 0xC000000000000001) != 0)
  {
    id v6 = (id)MEMORY[0x18C117680](0, v5);
  }
  else
  {
    if (!*(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_25;
    }
    id v6 = *(id *)(v5 + 32);
  }
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v23 = v7;
  char v8 = static NSObject.== infix(_:_:)();

  if ((v8 & 1) == 0)
  {
    id v23 = v23;
    objc_msgSend(v23, sel_willMoveToParentViewController_, 0);
    id v9 = objc_msgSend(v23, sel_view);
    if (v9)
    {
      Swift::String v10 = v9;
      objc_msgSend(v9, sel_removeFromSuperview);

      objc_msgSend(v23, sel_removeFromParentViewController);
      goto LABEL_11;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_19:
}

uint64_t outlined destroy of TabItem?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined assign with copy of TabItem?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TabItem?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t View.representablePreferredFocusableView<A>(_:resolver:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v11[0] = a2;
  v11[1] = a3;
  outlined copy of AppIntentExecutor?(a2);
  uint64_t v9 = type metadata accessor for RepresentablePreferredFocusableViewModifier();
  MEMORY[0x18C113660](v11, a4, v9, a6);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
}

uint64_t type metadata accessor for RepresentablePreferredFocusableViewModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187A62E10()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in RepresentablePreferredFocusableViewModifier<A>()
{
  return &protocol witness table for RepresentablePreferredFocusableViewModifier<A>;
}

uint64_t static RepresentablePreferredFocusableViewModifier._makeViewInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  type metadata accessor for RepresentablePreferredFocusableViewModifier();
  type metadata accessor for _GraphValue();
  uint64_t v14 = a3;
  int v8 = _GraphValue.value.getter();
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for UIView?();
  swift_getFunctionTypeMetadata1();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = type metadata accessor for Focus();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v10, v12, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  swift_release();
  swift_release();
  int v8 = v7;
  type metadata accessor for RepresentablePreferredFocusableViewInput();
  swift_getWitnessTable();
  return specialized _ViewInputs.subscript.setter((uint64_t)&v8);
}

uint64_t key path getter for RepresentablePreferredFocusableViewModifier.resolver : <A>RepresentablePreferredFocusableViewModifier<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1)
  {
    uint64_t v7 = *(void *)(a3 + a2 - 8);
    int v8 = (void *)swift_allocObject();
    v8[2] = v7;
    v8[3] = v5;
    v8[4] = v6;
    uint64_t v9 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> (@owned UIView?);
  }
  else
  {
    uint64_t v9 = 0;
    int v8 = 0;
  }
  *a4 = v9;
  a4[1] = v8;

  return outlined copy of AppIntentExecutor?(v5);
}

uint64_t key path setter for RepresentablePreferredFocusableViewModifier.resolver : <A>RepresentablePreferredFocusableViewModifier<A>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1)
  {
    uint64_t v7 = *(void *)(a4 + a3 - 8);
    int v8 = (void *)swift_allocObject();
    v8[2] = v7;
    v8[3] = v5;
    v8[4] = v6;
    uint64_t v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out UIView?);
  }
  else
  {
    uint64_t v9 = 0;
    int v8 = 0;
  }
  uint64_t v10 = *a2;
  outlined copy of AppIntentExecutor?(v5);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
  *a2 = (uint64_t)v9;
  a2[1] = (uint64_t)v8;
  return result;
}

uint64_t protocol witness for static ViewInputsModifier.graphInputsSemantics.getter in conformance RepresentablePreferredFocusableViewModifier<A>()
{
  return MEMORY[0x1F40FF7D8]();
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance RepresentablePreferredFocusableViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static RepresentablePreferredFocusableViewModifier._makeViewInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RepresentablePreferredFocusableViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF7C8](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RepresentablePreferredFocusableViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance RepresentablePreferredFocusableViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x18C110D90](a1, a2, a3, a4, WitnessTable);
}

uint64_t protocol witness for static GraphInput.isTriviallyReusable.getter in conformance RepresentablePreferredFocusableViewInput<A>()
{
  return MEMORY[0x1F40FD0F8]();
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance RepresentablePreferredFocusableViewInput<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for UIView?();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Optional();
  type metadata accessor for OptionalAttribute();
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD530](a1, a2, a3, a4, WitnessTable);
}

uint64_t sub_187A633FC()
{
  return 8;
}

void *sub_187A63408(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_187A63414()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out UIView?)(uint64_t a1)
{
  void (*v2)(uint64_t *__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void (**)(uint64_t *__return_ptr, uint64_t *))(v1 + 24);
  uint64_t v5 = a1;
  v2(&v4, &v5);
  return v4;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> (@owned UIView?)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 24))(*a1);
  *a2 = result;
  return result;
}

double one-time initialization function for principal()
{
  static ToolbarItemPlacement.principal = 1;
  double result = 0.0;
  unk_1E901FDE8 = 0u;
  unk_1E901FDF8 = 0u;
  byte_1E901FE08 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.principal.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for principal, (uint64_t)&static ToolbarItemPlacement.principal, a1);
}

double one-time initialization function for navigation()
{
  static ToolbarItemPlacement.navigation = 2;
  double result = 0.0;
  unk_1E901FE18 = 0u;
  unk_1E901FE28 = 0u;
  byte_1E901FE38 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.navigation.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(one-time initialization token for navigation, (uint64_t)&static ToolbarItemPlacement.navigation, a1);
}

void one-time initialization function for primaryAction()
{
  static ToolbarItemPlacement.primaryAction = 0;
  byte_1E901FE68 = 0;
}

uint64_t static ToolbarItemPlacement.primaryAction.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for primaryAction, (uint64_t)&static ToolbarItemPlacement.primaryAction, a1);
}

void static ToolbarItemPlacement.primaryAction(initialVisibility:)()
{
}

double one-time initialization function for secondaryAction()
{
  static ToolbarItemPlacement.secondaryAction = 3;
  double result = 0.0;
  unk_1E901FE78 = 0u;
  unk_1E901FE88 = 0u;
  byte_1E901FE98 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.secondaryAction.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for secondaryAction, (uint64_t)&static ToolbarItemPlacement.secondaryAction, a1);
}

double one-time initialization function for status()
{
  static ToolbarItemPlacement.status = 4;
  double result = 0.0;
  unk_1E8FF74A8 = 0u;
  unk_1E8FF74B8 = 0u;
  byte_1E8FF74C8 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.status.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for status, (uint64_t)&static ToolbarItemPlacement.status, a1);
}

double one-time initialization function for cancellationAction()
{
  static ToolbarItemPlacement.cancellationAction = 6;
  double result = 0.0;
  unk_1E901FEA8 = 0u;
  unk_1E901FEB8 = 0u;
  byte_1E901FEC8 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.cancellationAction.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for cancellationAction, (uint64_t)&static ToolbarItemPlacement.cancellationAction, a1);
}

double one-time initialization function for destructiveAction()
{
  static ToolbarItemPlacement.destructiveAction = 7;
  double result = 0.0;
  unk_1E901FED8 = 0u;
  unk_1E901FEE8 = 0u;
  byte_1E901FEF8 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.destructiveAction.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for destructiveAction, (uint64_t)&static ToolbarItemPlacement.destructiveAction, a1);
}

double one-time initialization function for keyboard()
{
  static ToolbarItemPlacement.keyboard = 8;
  double result = 0.0;
  unk_1E901FF08 = 0u;
  unk_1E901FF18 = 0u;
  byte_1E901FF28 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.keyboard.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for keyboard, (uint64_t)&static ToolbarItemPlacement.keyboard, a1);
}

uint64_t static ToolbarItemPlacement.navigationBarLeading.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for navigationBarLeading, (uint64_t)&static ToolbarItemPlacement.navigationBarLeading, a1);
}

uint64_t static ToolbarItemPlacement.topBarLeading.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for navigationBarLeading, (uint64_t)&static ToolbarItemPlacement.navigationBarLeading, a1);
}

uint64_t static ToolbarItemPlacement.topBarTrailing.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for navigationBarTrailing, (uint64_t)&static ToolbarItemPlacement.navigationBarTrailing, a1);
}

void static ToolbarItemPlacement.accessoryBar<A>(id:)()
{
}

void ToolbarItemPlacement.init<A>(id:)()
{
}

double one-time initialization function for navigationBarLeading()
{
  static ToolbarItemPlacement.navigationBarLeading = 9;
  double result = 0.0;
  unk_1E9002158 = 0u;
  unk_1E9002168 = 0u;
  byte_1E9002178 = 2;
  return result;
}

double one-time initialization function for largeNavigationTitleAccessory()
{
  static ToolbarItemPlacement.largeNavigationTitleAccessory = 12;
  double result = 0.0;
  unk_1E8FFA2D0 = 0u;
  unk_1E8FFA2E0 = 0u;
  byte_1E8FFA2F0 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.largeNavigationTitleAccessory.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for largeNavigationTitleAccessory, (uint64_t)&static ToolbarItemPlacement.largeNavigationTitleAccessory, a1);
}

double one-time initialization function for bottomBar()
{
  static ToolbarItemPlacement.bottomBar = 11;
  double result = 0.0;
  unk_1E8FF74D8 = 0u;
  unk_1E8FF74E8 = 0u;
  byte_1E8FF74F8 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.bottomBar.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for bottomBar, (uint64_t)&static ToolbarItemPlacement.bottomBar, a1);
}

void static ToolbarItemPlacement._bottomBar.getter()
{
}

double one-time initialization function for tabSidebar()
{
  static ToolbarItemPlacement.tabSidebar = 15;
  double result = 0.0;
  unk_1E901FF38 = 0u;
  unk_1E901FF48 = 0u;
  byte_1E901FF58 = 2;
  return result;
}

uint64_t static ToolbarItemPlacement.tabSidebar.getter@<X0>(uint64_t a1@<X8>)
{
  return static ToolbarItemPlacement.automatic.getter(&one-time initialization token for tabSidebar, (uint64_t)&static ToolbarItemPlacement.tabSidebar, a1);
}

uint64_t assignWithCopy for ToolbarItemPlacement(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1);
    if (*((unsigned char *)a2 + 40) == 1)
    {
      uint64_t v4 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v5 = *a2;
      long long v6 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v5;
      *(_OWORD *)(a1 + 16) = v6;
    }
  }
  return a1;
}

_OWORD *assignWithTake for ToolbarItemPlacement(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)a1);
    long long v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    *(_OWORD *)((char *)a1 + 25) = *(_OWORD *)((char *)a2 + 25);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarItemPlacement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarItemPlacement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)double result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t assignWithCopy for ToolbarItemPlacement.Role(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v7 = *a2;
      long long v8 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v7;
      *(_OWORD *)(a1 + 16) = v8;
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t assignWithTake for ToolbarItemPlacement.Role(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

double one-time initialization function for _navigationBarTrailing()
{
  static ToolbarItemPlacement._navigationBarTrailing = 21;
  double result = 0.0;
  unk_1E90FC468 = 0u;
  unk_1E90FC478 = 0u;
  byte_1E90FC488 = 2;
  return result;
}

double one-time initialization function for _navigationBarLeading()
{
  static ToolbarItemPlacement._navigationBarLeading = 22;
  double result = 0.0;
  unk_1E90FC498 = 0u;
  unk_1E90FC4A8 = 0u;
  byte_1E90FC4B8 = 2;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ToolbarItemPlacement.Role()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolbarItemPlacement.Role()
{
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.toolbarItemPlacement.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ToolbarItemPlacementKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ToolbarItemPlacementKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.toolbarItemPlacement.setter(uint64_t a1)
{
  outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)&v4);
  type metadata accessor for EnvironmentPropertyKey<ToolbarItemPlacementKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ToolbarItemPlacement.Role(a1);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ToolbarItemPlacementKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&static ToolbarItemPlacementKey.defaultValue, a1);
}

void type metadata accessor for EnvironmentPropertyKey<ToolbarItemPlacementKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ToolbarItemPlacementKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ToolbarItemPlacementKey>);
    }
  }
}

ValueMetadata *type metadata accessor for ToolbarItemPlacementKey()
{
  return &type metadata for ToolbarItemPlacementKey;
}

void static ToolbarItemPlacement.tabBarTrailing.getter()
{
}

void static ToolbarItemPlacement.tabBarLeading.getter()
{
}

void static ToolbarItemPlacement.bottomOrnament.getter()
{
}

void static ToolbarItemPlacement.backDeployable_accessoryBar<A>(id:)()
{
}

uint64_t View.navigationBarItems<A, B>(leading:trailing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  type metadata accessor for ToolbarItem();
  type metadata accessor for ToolbarItem();
  swift_getTupleTypeMetadata2();
  uint64_t v14 = type metadata accessor for TupleToolbarContent();
  type metadata accessor for ToolbarModifier();
  uint64_t v15 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v15);
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  View.toolbar<A>(content:)((void (*)(double))partial apply for closure #1 in View.navigationBarItems<A, B>(leading:trailing:), (uint64_t)v19, a3, v14, a6);
  uint64_t v28 = a6;
  uint64_t v29 = &protocol witness table for ToolbarModifier<A, B>;
  swift_getWitnessTable();
  return _UnaryViewAdaptor.init(_:)();
}

uint64_t closure #1 in View.navigationBarItems<A, B>(leading:trailing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v42 = a6;
  uint64_t v37 = *(void *)(a4 - 8);
  uint64_t v38 = a2;
  MEMORY[0x1F4188790](a1);
  long long v36 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v9;
  uint64_t v41 = v10;
  uint64_t v11 = type metadata accessor for ToolbarItem();
  uint64_t v39 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v17 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = a5;
  uint64_t v21 = type metadata accessor for ToolbarItem();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v33 - v26;
  if (one-time initialization token for _navigationBarLeading != -1) {
    swift_once();
  }
  outlined init with copy of ToolbarItemPlacement((uint64_t)&static ToolbarItemPlacement._navigationBarLeading, (uint64_t)v43);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v34, a3);
  ToolbarItem<>.init(placement:content:)(v43, (uint64_t)v20, a3, v24);
  static ViewBuilder.buildExpression<A>(_:)(v24);
  uint64_t v28 = *(uint64_t (**)(char *, uint64_t))(v22 + 8);
  v28(v24, v21);
  if (one-time initialization token for _navigationBarTrailing != -1) {
    swift_once();
  }
  outlined init with copy of ToolbarItemPlacement((uint64_t)&static ToolbarItemPlacement._navigationBarTrailing, (uint64_t)v43);
  uint64_t v29 = (uint64_t)v36;
  uint64_t v30 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v36, v38, v40);
  ToolbarItem<>.init(placement:content:)(v43, v29, v30, v13);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  unint64_t v31 = *(void (**)(char *, uint64_t))(v39 + 8);
  v31(v13, v11);
  static ToolbarContentBuilder.buildBlock<A, B>(_:_:)((uint64_t)v27, (uint64_t)v16, v21, v11, v42);
  v31(v16, v11);
  return v28(v27, v21);
}

uint64_t partial apply for closure #1 in View.navigationBarItems<A, B>(leading:trailing:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.navigationBarItems<A, B>(leading:trailing:)(v1[8], v1[9], v1[3], v1[4], v1[6], a1);
}

uint64_t View.navigationBarItems<A>(leading:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.navigationBarItems<A>(leading:)(a1, a2, a3, a4, a5, (void (*)(double))partial apply for closure #1 in View.navigationBarItems<A>(leading:));
}

uint64_t partial apply for closure #1 in View.navigationBarItems<A>(leading:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.navigationBarItems<A>(leading:)(&one-time initialization token for _navigationBarLeading, (uint64_t)&static ToolbarItemPlacement._navigationBarLeading, (uint64_t)one-time initialization function for _navigationBarLeading, a1);
}

uint64_t View.navigationBarItems<A>(trailing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return View.navigationBarItems<A>(leading:)(a1, a2, a3, a4, a5, (void (*)(double))partial apply for closure #1 in View.navigationBarItems<A>(trailing:));
}

uint64_t View.navigationBarItems<A>(leading:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(double))
{
  type metadata accessor for ToolbarItem();
  uint64_t v11 = type metadata accessor for TupleToolbarContent();
  type metadata accessor for ToolbarModifier();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  uint64_t v20 = a1;
  View.toolbar<A>(content:)(a6, (uint64_t)v15, a2, v11, a4);
  uint64_t v21 = a4;
  uint64_t v22 = &protocol witness table for ToolbarModifier<A, B>;
  swift_getWitnessTable();
  return _UnaryViewAdaptor.init(_:)();
}

uint64_t closure #1 in View.navigationBarItems<A>(leading:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>)
{
  v21[1] = a5;
  uint64_t v22 = a1;
  uint64_t v23 = a6;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ToolbarItem();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v21 - v17;
  if (*a3 != -1) {
    swift_once();
  }
  outlined init with copy of ToolbarItemPlacement(a4, (uint64_t)v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v22, a2);
  ToolbarItem<>.init(placement:content:)(v24, (uint64_t)v11, a2, v15);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  v19(v15, v12);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v18, v12, &protocol witness table for ToolbarItem<A, B>);
  return v19(v18, v12);
}

uint64_t partial apply for closure #1 in View.navigationBarItems<A>(trailing:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.navigationBarItems<A>(leading:)(&one-time initialization token for _navigationBarTrailing, (uint64_t)&static ToolbarItemPlacement._navigationBarTrailing, (uint64_t)one-time initialization function for _navigationBarTrailing, a1);
}

uint64_t partial apply for closure #1 in View.navigationBarItems<A>(leading:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return closure #1 in View.navigationBarItems<A>(leading:)(*(void *)(v4 + 48), *(void *)(v4 + 24), a1, a2, a3, a4);
}

uint64_t sub_187A649C8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187A64AE0()
{
  return swift_getWitnessTable();
}

uint64_t implicit closure #1 in static TooltipModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t TooltipResponder.__allocating_init(inputs:)()
{
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 216) = *MEMORY[0x1E4F4E7A0];
  *(void *)(v0 + 224) = 0;
  *(void *)(v0 + 232) = 0;
  swift_retain();
  static CGSize.invalidValue.getter();
  *(void *)(v0 + 240) = v1;
  *(void *)(v0 + 248) = v2;
  ViewTransform.init()();
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t TooltipModifier.ResolveText.value.getter()
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  uint64_t v2 = *(void *)(Value + 8);
  char v3 = *(unsigned char *)(Value + 16);
  AGGraphGetValue();
  outlined copy of Text.Storage(v1, v2, v3);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v4 = Text.resolveString(in:with:idiom:)();
  outlined consume of Text.Storage(v1, v2, v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t protocol witness for Rule.value.getter in conformance TooltipModifier.ResolveText@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = TooltipModifier.ResolveText.value.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t closure #1 in TooltipModifier.TransformPlatformItems.value.getter(uint64_t result)
{
  uint64_t v1 = *(void **)result;
  uint64_t v2 = *(void *)(*(void *)result + 16);
  if (v2)
  {
    uint64_t v3 = (void *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
    }
      uint64_t v1 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    for (unint64_t i = 0; i != v2; ++i)
    {
      if (i >= v1[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      uint64_t v5 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
      unint64_t v6 = (unint64_t)v1
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + *(void *)(v5 + 72) * i;
      uint64_t Value = (uint64_t *)AGGraphGetValue();
      uint64_t v9 = *Value;
      uint64_t v8 = Value[1];
      *(void *)(v6 + 584) = v9;
      *(void *)(v6 + 592) = v8;
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
    }
    *uint64_t v3 = v1;
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TooltipModifier.TransformPlatformItems@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  int v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in TooltipModifier.TransformPlatformItems.value.getter;
  *(void *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance TooltipModifier()
{
}

uint64_t closure #1 in TooltipResponder.text.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  AGGraphClearUpdate();
  if (*(_DWORD *)(a1 + 216) == *MEMORY[0x1E4F4E7A0]) {
    goto LABEL_6;
  }
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v6 = *Value;
  unint64_t v5 = Value[1];
  uint64_t v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v7 = *Value & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
  {
LABEL_6:
    uint64_t v6 = 0;
    unint64_t v5 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t result = AGGraphSetUpdate();
  *a2 = v6;
  a2[1] = v5;
  return result;
}

double TooltipResponder.globalFrame.getter()
{
  uint64_t v11 = *(void *)(v0 + 256);
  long long v1 = *(_OWORD *)(v0 + 280);
  long long v12 = *(_OWORD *)(v0 + 264);
  long long v13 = v1;
  unint64_t v2 = *(void *)(v0 + 224);
  unint64_t v3 = *(void *)(v0 + 232);
  swift_retain();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v3, v2));
  double v8 = 0.0;
  uint64_t v9 = 0;
  long long v10 = *(_OWORD *)(v0 + 240);
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  char v7 = 2;
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v5);
  swift_release();
  return v8;
}

Swift::Void __swiftcall TooltipResponder.extendPrintTree(string:)(Swift::String *string)
{
  _sSSSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  static Update.dispatchImmediately<A>(_:)();
  if (v7) {
    uint64_t v1 = v6;
  }
  else {
    uint64_t v1 = 7104878;
  }
  if (v7) {
    unint64_t v2 = v7;
  }
  else {
    unint64_t v2 = 0xE300000000000000;
  }
  unint64_t v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x207069746C6F6F74;
  v5._object = (void *)0xE900000000000028;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
}

uint64_t TooltipResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 216) = *MEMORY[0x1E4F4E7A0];
  *(void *)(v0 + 224) = 0;
  *(void *)(v0 + 232) = 0;
  swift_retain();
  static CGSize.invalidValue.getter();
  *(void *)(v0 + 240) = v1;
  *(void *)(v0 + 248) = v2;
  ViewTransform.init()();
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t TooltipResponder.__ivar_destroyer()
{
  return swift_release();
}

uint64_t TooltipResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for TooltipResponder()
{
  return type metadata accessor for TooltipResponder();
}

uint64_t partial apply for closure #1 in TooltipResponder.text.getter@<X0>(void *a1@<X8>)
{
  return closure #1 in TooltipResponder.text.getter(v1, a1);
}

ValueMetadata *type metadata accessor for HasTooltipKey()
{
  return &type metadata for HasTooltipKey;
}

uint64_t assignWithTake for TooltipModifier(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in TooltipModifier()
{
  return &protocol witness table for TooltipModifier;
}

uint64_t partial apply for implicit closure #1 in static TooltipModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static TooltipModifier._makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type TooltipModifier.TransformPlatformItems and conformance TooltipModifier.TransformPlatformItems()
{
  unint64_t result = lazy protocol witness table cache variable for type TooltipModifier.TransformPlatformItems and conformance TooltipModifier.TransformPlatformItems;
  if (!lazy protocol witness table cache variable for type TooltipModifier.TransformPlatformItems and conformance TooltipModifier.TransformPlatformItems)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TooltipModifier.TransformPlatformItems and conformance TooltipModifier.TransformPlatformItems);
  }
  return result;
}

uint64_t sub_187A654BC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TooltipModifier.TransformPlatformItems.value.getter(uint64_t result)
{
  return closure #1 in TooltipModifier.TransformPlatformItems.value.getter(result);
}

uint64_t sub_187A654D4()
{
  swift_release();

  return swift_deallocObject();
}

void *type metadata accessor for TooltipModifier.TransformPlatformItems()
{
  return &unk_1ED41C448;
}

uint64_t assignWithCopy for TooltipModifier.TooltipResponderUpdater(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for TooltipModifier.TooltipResponderUpdater(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for TooltipModifier.TooltipResponderUpdater(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 28)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TooltipModifier.TooltipResponderUpdater(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 28) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for TooltipModifier.TooltipResponderUpdater()
{
  return &unk_1ED41C338;
}

void *type metadata accessor for TooltipModifier.ResolveText()
{
  return &unk_1ED41C3C8;
}

uint64_t sub_187A6568C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in update #1 <A>() in UIKitStatusBarBridge.updateStatusBar(isAnimated:shouldDefer:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_187A656EC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187A65724()
{
  swift_release();

  return swift_deallocObject();
}

void __swiftcall PullDownMenuBarExtraStyle.init()()
{
}

void PullDownMenuBarExtraStyle._makeMenuBarExtra(_:)()
{
}

void static MenuBarExtraStyle<>.menu.getter()
{
}

ValueMetadata *type metadata accessor for PullDownMenuBarExtraStyle()
{
  return &type metadata for PullDownMenuBarExtraStyle;
}

uint64_t LayoutSubview.containerValues.getter@<X0>(void *a1@<X8>)
{
  uint64_t v5 = *v1;
  uint64_t result = LayoutProxy.traits.getter();
  uint64_t v4 = v6;
  if (!v6)
  {
    uint64_t result = default argument 0 of ContainerValues.init(base:)();
    uint64_t v4 = v5;
  }
  *a1 = v4;
  return result;
}

void static _SystemShapeStyle.primaryFill.getter()
{
}

void static _SystemShapeStyle._makeView<A>(view:inputs:)()
{
}

ValueMetadata *type metadata accessor for _SystemShapeStyle()
{
  return &type metadata for _SystemShapeStyle;
}

void static _SystemShapeStyle.secondaryFill.getter()
{
}

void static _SystemShapeStyle.tertiaryFill.getter()
{
}

void static _SystemShapeStyle.quaternaryFill.getter()
{
}

uint64_t TableRow.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t static TableRow._tableRowCount(inputs:)()
{
  return 1;
}

uint64_t static TableRow._makeRows(content:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 136);
  int v3 = *(_DWORD *)(a2 + 144);
  int v4 = *(_DWORD *)(a2 + 148);
  PreferencesOutputs.init()();
  type metadata accessor for TableRow();
  type metadata accessor for _GraphValue();
  LODWORD(v8) = _GraphValue.value.getter();
  HIDWORD(v8) = v4;
  uint64_t List = type metadata accessor for TableRow.MakeList();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<TableRowList>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableRowList>, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v8, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v12, List, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  uint64_t v8 = v2;
  int v9 = v3;
  int v11 = v10;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for TableRow()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static TableRow._containsOutlineSymbol(inputs:)()
{
  return 0;
}

uint64_t TableRow.MakeList.tableRow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TableRow();
  uint64_t Value = AGGraphGetValue();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t TableRow.MakeList.traits.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1))
  {
    uint64_t result = 0;
  }
  else
  {
    AGGraphGetValue();
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a2 = result;
  return result;
}

uint64_t TableRow.MakeList.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TableRow();
  MEMORY[0x1F4188790](v9 - 8);
  int v11 = (char *)&v17 - v10;
  TableRow.MakeList.tableRow.getter((uint64_t)&v17 - v10);
  long long v12 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
  v12(v8, v11, a2);
  TableRow.MakeList.traits.getter(a1, &v18);
  uint64_t v13 = v18;
  uint64_t v14 = type metadata accessor for TableRow.Generator();
  a3[3] = v14;
  a3[4] = (uint64_t)&protocol witness table for TableRow<A>.Generator;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  uint64_t result = ((uint64_t (*)(uint64_t *, char *, uint64_t))v12)(boxed_opaque_existential_1, v8, a2);
  *(uint64_t *)((char *)boxed_opaque_existential_1 + *(int *)(v14 + 36)) = v13;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TableRow<A>.MakeList@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return TableRow.MakeList.value.getter(*v2, *(void *)(a1 + 16), a2);
}

uint64_t TableRow.Generator.visitRows<A>(applying:from:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v23 = a4;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  v12.n128_f64[0] = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v22 - v13, v6, v9, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, v9);
  char v30 = 1;
  uint64_t v29 = 0;
  memset(v28, 0, sizeof(v28));
  uint64_t v16 = *(void *)(v6 + *(int *)(a3 + 36));
  if (v16)
  {
    uint64_t v27 = *(void *)(v6 + *(int *)(a3 + 36));
    uint64_t v17 = v16;
  }
  else
  {
    ViewTraitCollection.init()();
    uint64_t v17 = v27;
  }
  uint64_t v26 = v17;
  uint64_t v18 = *(uint64_t (**)(char *, char *, _OWORD *, uint64_t *, uint64_t, void, uint64_t, void, uint64_t, uint64_t))(a5 + 8);
  uint64_t v19 = *(void *)(a3 + 24);
  swift_bridgeObjectRetain();
  char v20 = v18(v14, &v30, v28, &v26, v9, MEMORY[0x1E4F417F8], v19, MEMORY[0x1E4F417F0], v23, a5);
  swift_bridgeObjectRelease();
  outlined destroy of TableRowList?((uint64_t)v28);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  if (__OFADD__(*v25, 1))
  {
    __break(1u);
  }
  else
  {
    ++*v25;
    return v20 & 1;
  }
  return result;
}

uint64_t TableRow.Generator.rowIDs.getter()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v3 = &v6[-v2];
  dispatch thunk of Identifiable.id.getter();
  swift_getAssociatedConformanceWitness();
  _convertToAnyHashable<A>(_:)();
  (*(void (**)(unsigned char *, uint64_t))(v1 + 8))(v3, AssociatedTypeWitness);
  v6[40] = 1;
  type metadata accessor for Attribute<TableRowList>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18834BB80;
  outlined init with take of TableRowID((uint64_t)v6, v4 + 32);
  type metadata accessor for WrappedTableRowIDs<[TableRowID]>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  return result;
}

uint64_t protocol witness for TableRowGenerator.visitRows<A>(applying:from:) in conformance TableRow<A>.Generator(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return TableRow.Generator.visitRows<A>(applying:from:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance TableRow<A>(uint64_t a1, uint64_t a2)
{
  return static TableRow._makeRows(content:inputs:)(a1, a2);
}

uint64_t type metadata accessor for TableRow.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for TableRow<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for TableRow(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TableRow(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187A664C4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in TableRow<A>.MakeList()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TableRow.Generator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for TableRow.Generator()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableRow.Generator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for TableRow.Generator(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TableRow.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 48) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 48) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TableRow.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TableRow.Generator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableRow.Generator(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187A66A08);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for TableRow.Generator(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187A66C08);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *uint64_t v18 = 0;
            *(_DWORD *)uint64_t v18 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *uint64_t v18 = a2;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

void type metadata accessor for WrappedTableRowIDs<[TableRowID]>()
{
  if (!lazy cache variable for type metadata for WrappedTableRowIDs<[TableRowID]>)
  {
    type metadata accessor for Attribute<TableRowList>(255, &lazy cache variable for type metadata for [TableRowID], (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [TableRowID] and conformance [A]();
    unint64_t v0 = type metadata accessor for WrappedTableRowIDs();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WrappedTableRowIDs<[TableRowID]>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [TableRowID] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [TableRowID] and conformance [A];
  if (!lazy protocol witness table cache variable for type [TableRowID] and conformance [A])
  {
    type metadata accessor for Attribute<TableRowList>(255, &lazy cache variable for type metadata for [TableRowID], (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [TableRowID] and conformance [A]);
  }
  return result;
}

uint64_t outlined destroy of TableRowList?(uint64_t a1)
{
  type metadata accessor for Attribute<TableRowList>(0, &lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for Attribute<TableRowList>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t static TypeSelectEquivalentKey.defaultValue.getter()
{
  return 0;
}

uint64_t View.typeSelectEquivalent(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t _TypeSelectEquivalentTableRowModifier.body.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Text?(v2, v3, v4, v5);
}

uint64_t protocol witness for _TableRowContentModifier.body.getter in conformance _TypeSelectEquivalentTableRowModifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  *a1 = *v1;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return outlined copy of Text?(v2, v3, v4, v5);
}

unint64_t lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier;
  if (!lazy protocol witness table cache variable for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier);
  }
  return result;
}

uint64_t TableRowContent.typeSelectEquivalent(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v6 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v8 = v7;
  v13[0] = v6;
  v13[1] = v7;
  char v10 = v9 & 1;
  v13[2] = v9 & 1;
  _OWORD v13[3] = v11;
  lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier();
  TableRowContent.modifier<A>(_:)((uint64_t)v13, a5, (uint64_t)&type metadata for _TypeSelectEquivalentTableRowModifier);
  outlined consume of Text.Storage(v6, v8, v10);
  return swift_bridgeObjectRelease();
}

{
  void v7[4];

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier();
  return TableRowContent.modifier<A>(_:)((uint64_t)v7, a5, (uint64_t)&type metadata for _TypeSelectEquivalentTableRowModifier);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void v14[4];

  uint64_t v6 = a2;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v6 = v8;
    char v10 = v9;
    int v12 = v11 & 1;
  }
  else
  {
    uint64_t v7 = 0;
    int v12 = 0;
    char v10 = 0;
  }
  v14[0] = v7;
  v14[1] = v6;
  v14[2] = v12;
  v14[3] = v10;
  lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier();
  TableRowContent.modifier<A>(_:)((uint64_t)v14, a5, (uint64_t)&type metadata for _TypeSelectEquivalentTableRowModifier);
  return outlined consume of Text?(v7, v6, v12, v10);
}

uint64_t TableRowContent.typeSelectEquivalent<A>(_:)(uint64_t a1, uint64_t a2)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v6 = Text.init<A>(_:)();
  uint64_t v8 = v7;
  v13[0] = v6;
  v13[1] = v7;
  char v10 = v9 & 1;
  v13[2] = v9 & 1;
  _OWORD v13[3] = v11;
  lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier();
  TableRowContent.modifier<A>(_:)((uint64_t)v13, a2, (uint64_t)&type metadata for _TypeSelectEquivalentTableRowModifier);
  outlined consume of Text.Storage(v6, v8, v10);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall TypeSelectHost.updateRootView()()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 80);
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = ((double (*)())MEMORY[0x1F4188790])();
  uint64_t v6 = (char *)&v7 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - v5, (uint64_t)v0 + *(void *)(v1 + 136), v2, v4);
  ViewGraph.setRootView<A>(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

Swift::Void __swiftcall TypeSelectHost.updateEnvironment()()
{
  swift_retain();
  swift_retain();
  GraphHost.setEnvironment(_:)();
  swift_release();

  swift_release();
}

uint64_t *TypeSelectHost.deinit()
{
  uint64_t v1 = *v0;
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 136));
  swift_release();
  swift_release();
  return v0;
}

uint64_t TypeSelectHost.__deallocating_deinit()
{
  TypeSelectHost.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ViewRendererHost.viewGraph.getter in conformance TypeSelectHost<A>()
{
  return swift_retain();
}

double protocol witness for ViewRendererHost.currentTimestamp.getter in conformance TypeSelectHost<A>@<D0>(double *a1@<X8>)
{
  swift_beginAccess();
  double result = *(double *)(v1 + 32);
  *a1 = result;
  return result;
}

uint64_t protocol witness for ViewRendererHost.currentTimestamp.setter in conformance TypeSelectHost<A>(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 32) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance TypeSelectHost<A>())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.getter in conformance TypeSelectHost<A>@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(_WORD *)(v1 + 24);
  return result;
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.setter in conformance TypeSelectHost<A>(__int16 *a1)
{
  __int16 v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(_WORD *)(v1 + 24) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance TypeSelectHost<A>())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.getter in conformance TypeSelectHost<A>@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(unsigned char *)(v1 + 26);
  return result;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.setter in conformance TypeSelectHost<A>(char *a1)
{
  char v2 = *a1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 26) = v2;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.renderingPhase.modify in conformance TypeSelectHost<A>())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for ViewRendererHost.externalUpdateCount.getter in conformance TypeSelectHost<A>()
{
  swift_beginAccess();
  return *(void *)(v0 + 40);
}

uint64_t protocol witness for ViewRendererHost.externalUpdateCount.setter in conformance TypeSelectHost<A>(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  *(void *)(v1 + 40) = a1;
  return result;
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance TypeSelectHost<A>())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance TypeSelectHost<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance _ArchivedViewHost<A, B>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for TypeSelectHost<A>, MEMORY[0x1E4F3FE08]);
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance TypeSelectHost<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance _ArchivedViewHost<A, B>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for TypeSelectHost<A>, MEMORY[0x1E4F401C0]);
}

void protocol witness for GraphDelegate.graphDidChange() in conformance TypeSelectHost<A>()
{
  swift_getWitnessTable();

  ViewRendererHost.graphDidChange()();
}

uint64_t View.typeSelectEquivalent(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v3 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v2 = v4;
    uint64_t v6 = v5;
    char v8 = v7 & 1;
  }
  else
  {
    uint64_t v3 = 0;
    char v8 = 0;
    uint64_t v6 = 0;
  }
  View._trait<A>(_:_:)();
  return outlined consume of Text?(v3, v2, v8, v6);
}

uint64_t View.typeSelectEquivalent<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  v11[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.typeSelectEquivalent<A>(_:), (uint64_t)v11, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41420], v5, (uint64_t)&v12);
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  char v8 = v14;
  uint64_t v9 = v15;
  uint64_t v16 = v12;
  uint64_t v17 = v13;
  uint64_t v18 = v14;
  uint64_t v19 = v15;
  View._trait<A>(_:_:)();
  return outlined consume of Text?(v6, v7, v8, v9);
}

uint64_t TableRowContent.typeSelectEquivalent<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TableRowContent.typeSelectEquivalent<A>(_:), (uint64_t)v12, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41420], v6, (uint64_t)&v13);
  uint64_t v7 = v13;
  uint64_t v8 = v14;
  char v9 = v15;
  uint64_t v10 = v16;
  v17[0] = v13;
  v17[1] = v14;
  v17[2] = v15;
  void v17[3] = v16;
  lazy protocol witness table accessor for type _TypeSelectEquivalentTableRowModifier and conformance _TypeSelectEquivalentTableRowModifier();
  TableRowContent.modifier<A>(_:)((uint64_t)v17, a2, (uint64_t)&type metadata for _TypeSelectEquivalentTableRowModifier);
  return outlined consume of Text?(v7, v8, v9, v10);
}

uint64_t closure #1 in View.typeSelectEquivalent<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in TableRowContent.typeSelectEquivalent<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in View.typeSelectEquivalent<A>(_:)(a1, a2);
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in _TypeSelectEquivalentTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for TypeSelectEquivalentKey()
{
  return &type metadata for TypeSelectEquivalentKey;
}

uint64_t destroy for _TypeSelectEquivalentTableRowModifier(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    outlined consume of Text.Storage(*(void *)result, *(void *)(result + 8), *(unsigned char *)(result + 16));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for _TypeSelectEquivalentTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)a2;
    uint64_t v5 = *(void *)(a2 + 8);
    char v6 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v5, v6);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v3;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for _TypeSelectEquivalentTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)a2;
      uint64_t v6 = *(void *)(a2 + 8);
      char v7 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v6, v7);
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)(a1 + 8);
      char v10 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    char v13 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v12, v13);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  return a1;
}

uint64_t assignWithTake for _TypeSelectEquivalentTableRowModifier(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 24)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4)
  {
    outlined destroy of Text(a1);
LABEL_5:
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    return a1;
  }
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Text.Storage(v6, v7, v8);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for _TypeSelectEquivalentTableRowModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _TypeSelectEquivalentTableRowModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _TypeSelectEquivalentTableRowModifier()
{
  return &type metadata for _TypeSelectEquivalentTableRowModifier;
}

uint64_t type metadata completion function for TypeSelectHost()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for TypeSelectHost()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187A68140()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<TypeSelectEquivalentKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<TypeSelectEquivalentKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TypeSelectEquivalentKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<TypeSelectEquivalentKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<TypeSelectEquivalentKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<TypeSelectEquivalentKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<TypeSelectEquivalentKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<TypeSelectEquivalentKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187A68264()
{
  return swift_getWitnessTable();
}

_UNKNOWN **sub_187A682D4()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

uint64_t sub_187A682E0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187A68344()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for GraphDelegate in TypeSelectHost<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ViewGraphDelegate in TypeSelectHost<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in View.typeSelectEquivalent<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in TableRowContent.typeSelectEquivalent<A>(_:)(a1, a2);
}

ValueMetadata *type metadata accessor for PhoneIdiomGroupBoxStyle()
{
  return &type metadata for PhoneIdiomGroupBoxStyle;
}

uint64_t associated type witness table accessor for GroupBoxStyle.Body : View in PhoneIdiomGroupBoxStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PhoneIdiomGroupBoxStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  type metadata accessor for <<opaque return type of View.spacing(_:)>>.0();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = static HorizontalAlignment.center.getter();
  uint64_t v12 = static Font.headline.getter();
  uint64_t KeyPath = swift_getKeyPath();
  a2 &= 1u;
  outlined copy of Environment<Bool>.Content(a1, a2);
  char v14 = specialized Environment.wrappedValue.getter(a1, a2);
  outlined consume of Environment<Bool>.Content(a1, a2);
  if (v14) {
    char v15 = 0;
  }
  else {
    char v15 = static Edge.Set.all.getter();
  }
  v22[3] = v11;
  v22[4] = 0;
  char v23 = 1;
  __int16 v24 = 768;
  uint64_t v25 = KeyPath;
  uint64_t v26 = v12;
  char v27 = v15;
  long long v28 = 0u;
  long long v29 = 0u;
  char v30 = 1;
  __asm { FMOV            V0.2D, #8.0 }
  long long v31 = _Q0;
  __int16 v32 = 1;
  char v33 = 1;
  Spacing.init()();
  v22[1] = v22[2];
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>();
  View.spacing(_:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v10, v7);
}

uint64_t protocol witness for GroupBoxStyle.makeBody(configuration:) in conformance PhoneIdiomGroupBoxStyle@<X0>(uint64_t a1@<X8>)
{
  return PhoneIdiomGroupBoxStyle.makeBody(configuration:)(*(void *)v1, *(unsigned char *)(v1 + 8), a1);
}

void type metadata accessor for <<opaque return type of View.spacing(_:)>>.0()
{
  if (!lazy cache variable for type metadata for <<opaque return type of View.spacing(_:)>>.0)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of View.spacing(_:)>>.0);
    }
  }
}

{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for <<opaque return type of View.spacing(_:)>>.0)
  {
    type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>();
    lazy protocol witness table accessor for type GroupElementsOfContent<Group<ModifiedContent<ModifiedContent<LabeledContentStyleConfiguration.Label, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, ViewInputFlagModifier<MultiViewLabel>>>, Group<GroupElementsOfContent<LabeledContentStyleConfiguration.Content, ModifiedContent<ModifiedContent<_VariadicView.Tree<_LayoutRoot<AnyLayout>, TupleView<(VStack<LabelGroup<TupleView<(ModifiedContent<ModifiedContent<Subview?, _EnvironmentKeyWritingModifier<CGFloat>>, _PaddingLayout>, SubviewsCollectionSlice)>>>?, ModifiedContent<VStack<SubviewsCollection>, _EnvironmentKeyWritingModifier<Color?>>)>>, _PaddingLayout>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<HStack<SubviewsCollectionSlice>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?>>>>> and conformance GroupElementsOfContent<A, B>(&lazy protocol witness table cache variable for type AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>> and conformance AccessibilityAdaptiveStack<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityAdaptiveStack<TupleView<(LabeledContentStyleConfiguration.Label, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<LabeledContentStyleConfiguration.Content, _EnvironmentKeyWritingModifier<Color?>>)>>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of View.spacing(_:)>>.0);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>();
    type metadata accessor for ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>, MEMORY[0x1E4F407B8], MEMORY[0x1E4F407B0], MEMORY[0x1E4F40318]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>();
    type metadata accessor for _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>)
  {
    type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>);
    }
  }
}

void type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>);
    }
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>(255, &lazy cache variable for type metadata for ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, (uint64_t)&type metadata for GroupBoxStyleConfiguration.Label, MEMORY[0x1E4F3FE28], MEMORY[0x1E4F3FBA0]);
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (uint64_t (*)(uint64_t))type metadata accessor for Font?, MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for Font?()
{
  if (!lazy cache variable for type metadata for Font?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Font?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content), MEMORY[0x1E4F41850]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>()
{
  if (!lazy cache variable for type metadata for _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>)
  {
    lazy protocol witness table accessor for type RoundedRectangle and conformance RoundedRectangle();
    unint64_t v0 = type metadata accessor for _InsettableBackgroundShapeModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>);
    }
  }
}

void type metadata accessor for ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>, StyleContextWriter<ContainerStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>>();
    lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle> and conformance _InsettableBackgroundShapeModifier<A, B>(&lazy protocol witness table cache variable for type _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle> and conformance _InsettableBackgroundShapeModifier<A, B>, (void (*)(uint64_t))type metadata accessor for _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>, _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout>();
    lazy protocol witness table accessor for type _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle> and conformance _InsettableBackgroundShapeModifier<A, B>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(ModifiedContent<ModifiedContent<GroupBoxStyleConfiguration.Label, _AlignmentLayout>, _EnvironmentKeyWritingModifier<Font?>>, GroupBoxStyleConfiguration.Content)>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _InsettableBackgroundShapeModifier<BackgroundStyle, RoundedRectangle> and conformance _InsettableBackgroundShapeModifier<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.font : EnvironmentValues, serialized@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A68E3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A68E68()
{
  return EnvironmentValues.font.setter();
}

uint64_t sub_187A68E94()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for AccessibilityLabelModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for AccessibilityStepperModifier(uint64_t a1)
{
  if (*(void *)a1)
  {
  }
  if (*(void *)(a1 + 40)) {
    swift_release();
  }
  if (*(void *)(a1 + 56)) {
    swift_release();
  }
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for AccessibilityStepperModifier(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a2;
  if (*(void *)a2)
  {
    char v5 = *(void **)(a2 + 8);
    unint64_t v6 = *(void **)(a2 + 16);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v5;
    uint64_t v7 = *(void **)(a2 + 24);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    id v8 = v4;
    id v9 = v5;
    id v10 = v6;
    id v11 = v7;
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
  }
  uint64_t v13 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  uint64_t v15 = *(void *)(a2 + 56);
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 64);
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v17 = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = v17;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityStepperModifier(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  char v5 = *(void **)a2;
  if (*(void *)a1)
  {
    if (v5)
    {
      *(void *)a1 = v5;
      id v6 = v5;

      uint64_t v7 = *(void **)(a1 + 8);
      id v8 = *(void **)(a2 + 8);
      *(void *)(a1 + 8) = v8;
      id v9 = v8;

      id v10 = *(void **)(a1 + 16);
      id v11 = *(void **)(a2 + 16);
      *(void *)(a1 + 16) = v11;
      id v12 = v11;

      uint64_t v13 = *(void **)(a1 + 24);
      uint64_t v14 = *(void **)(a2 + 24);
      *(void *)(a1 + 24) = v14;
      id v15 = v14;
    }
    else
    {
      outlined destroy of AccessibilityStepperValue(a1);
      long long v23 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v23;
    }
  }
  else if (v5)
  {
    *(void *)a1 = v5;
    uint64_t v16 = *(void **)(a2 + 8);
    *(void *)(a1 + 8) = v16;
    uint64_t v17 = *(void **)(a2 + 16);
    *(void *)(a1 + 16) = v17;
    uint64_t v18 = *(void **)(a2 + 24);
    *(void *)(a1 + 24) = v18;
    id v19 = v5;
    id v20 = v16;
    id v21 = v17;
    id v22 = v18;
  }
  else
  {
    long long v24 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v24;
  }
  uint64_t v25 = *(void *)(a1 + 40);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v26 = *(void *)(a2 + 40);
  if (v25)
  {
    if (v26)
    {
      uint64_t v27 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v26;
      *(void *)(a1 + 48) = v27;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v26)
  {
    uint64_t v28 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v26;
    *(void *)(a1 + 48) = v28;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_15:
  uint64_t v29 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v29)
    {
      uint64_t v31 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v29;
      *(void *)(a1 + 64) = v31;
      swift_retain();
      goto LABEL_22;
    }
LABEL_21:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_22;
  }
  if (!v29)
  {
    swift_release();
    goto LABEL_21;
  }
  uint64_t v30 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v29;
  *(void *)(a1 + 64) = v30;
  swift_retain();
  swift_release();
LABEL_22:
  uint64_t v32 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v32;
  swift_retain();
  swift_release();
  uint64_t v33 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v33;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of AccessibilityStepperValue(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for AccessibilityStepperModifier(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)a1;
  if (*(void *)a1)
  {
    if (*(void *)a2)
    {
      *(void *)a1 = *(void *)a2;

      char v5 = *(void **)(a1 + 8);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);

      id v6 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);

      uint64_t v7 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);

      goto LABEL_6;
    }
    outlined destroy of AccessibilityStepperValue(a1);
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
LABEL_6:
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a1 + 40);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  if (v10)
  {
    if (v9)
    {
      uint64_t v11 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v11;
      swift_release();
      goto LABEL_13;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v12 = *(void *)(a2 + 48);
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v12;
    goto LABEL_13;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
LABEL_13:
  uint64_t v13 = *(void *)(a2 + 56);
  if (!*(void *)(a1 + 56))
  {
    if (v13)
    {
      uint64_t v15 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = v13;
      *(void *)(a1 + 64) = v15;
      goto LABEL_20;
    }
LABEL_19:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    goto LABEL_20;
  }
  if (!v13)
  {
    swift_release();
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v14;
  swift_release();
LABEL_20:
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityStepperModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityStepperModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityStepperModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityNavigationLinkButtonModifier.Representable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AccessibilityLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AccessibilityLinkModifier(a1, a2, a3, (uint64_t (*)(uint64_t, void, void))type metadata accessor for AccessibilityLinkModifier.Configuration);
}

unint64_t initializeBufferWithCopyOfBuffer for AccessibilityLinkModifier(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessibilityLinkModifier.Configuration();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    char v11 = *(unsigned char *)(a2 + 34);
    __int16 v12 = *(_WORD *)(a2 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v8, v9, v10, v12, v11);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(_WORD *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 34) = v11;
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    uint64_t v15 = *(void *)(a2 + 56);
    uint64_t v16 = *(void *)(a2 + 64);
    char v17 = *(unsigned char *)(a2 + 74);
    __int16 v18 = *(_WORD *)(a2 + 72);
    outlined copy of Environment<OpenURLAction>.Content(v13, v14, v15, v16, v18, v17);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v16;
    *(_WORD *)(a1 + 72) = v18;
    *(unsigned char *)(a1 + 74) = v17;
    uint64_t v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
    uint64_t v20 = a1 + v19;
    uint64_t v21 = a2 + v19;
    uint64_t v22 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    uint64_t v23 = type metadata accessor for LinkDestination.Configuration();
    *(unsigned char *)(v20 + *(int *)(v23 + 20)) = *(unsigned char *)(v21 + *(int *)(v23 + 20));
    *(unsigned char *)(a1 + *(int *)(v6 + 36)) = *(unsigned char *)(a2 + *(int *)(v6 + 36));
  }
  return a1;
}

uint64_t type metadata accessor for AccessibilityLinkModifier.Configuration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for AccessibilityLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 34);
  __int16 v9 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v5, v6, v7, v9, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 34) = v8;
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  char v14 = *(unsigned char *)(a2 + 74);
  __int16 v15 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v10, v11, v12, v13, v15, v14);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(_WORD *)(a1 + 72) = v15;
  *(unsigned char *)(a1 + 74) = v14;
  uint64_t v16 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  uint64_t v20 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v17 + *(int *)(v20 + 20)) = *(unsigned char *)(v18 + *(int *)(v20 + 20));
  uint64_t v21 = type metadata accessor for AccessibilityLinkModifier.Configuration();
  *(unsigned char *)(a1 + *(int *)(v21 + 36)) = *(unsigned char *)(a2 + *(int *)(v21 + 36));
  return a1;
}

uint64_t assignWithCopy for AccessibilityLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 34);
  __int16 v9 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v5, v6, v7, v9, v8);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  char v14 = *(unsigned char *)(a1 + 34);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  __int16 v15 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 34) = v8;
  outlined consume of Environment<OpenURLAction>.Content(v10, v11, v12, v13, v15, v14);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  uint64_t v18 = *(void *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  char v20 = *(unsigned char *)(a2 + 74);
  __int16 v21 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v21, v20);
  uint64_t v22 = *(void *)(a1 + 40);
  uint64_t v23 = *(void *)(a1 + 48);
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v25 = *(void *)(a1 + 64);
  char v26 = *(unsigned char *)(a1 + 74);
  *(void *)(a1 + 40) = v16;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v19;
  __int16 v27 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v21;
  *(unsigned char *)(a1 + 74) = v20;
  outlined consume of Environment<OpenURLAction>.Content(v22, v23, v24, v25, v27, v26);
  uint64_t v28 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 24))(v29, v30, v31);
  uint64_t v32 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v29 + *(int *)(v32 + 20)) = *(unsigned char *)(v30 + *(int *)(v32 + 20));
  uint64_t v33 = type metadata accessor for AccessibilityLinkModifier.Configuration();
  *(unsigned char *)(a1 + *(int *)(v33 + 36)) = *(unsigned char *)(a2 + *(int *)(v33 + 36));
  return a1;
}

uint64_t initializeWithTake for AccessibilityLinkModifier(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
  uint64_t v5 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  uint64_t v9 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v6 + *(int *)(v9 + 20)) = *(unsigned char *)(v7 + *(int *)(v9 + 20));
  uint64_t v10 = type metadata accessor for AccessibilityLinkModifier.Configuration();
  *(unsigned char *)(a1 + *(int *)(v10 + 36)) = *(unsigned char *)(a2 + *(int *)(v10 + 36));
  return a1;
}

uint64_t assignWithTake for AccessibilityLinkModifier(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 34);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  char v10 = *(unsigned char *)(a1 + 34);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  __int16 v12 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 34) = v5;
  outlined consume of Environment<OpenURLAction>.Content(v6, v7, v8, v9, v12, v10);
  __int16 v13 = *(_WORD *)(a2 + 72);
  char v14 = *(unsigned char *)(a2 + 74);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  char v19 = *(unsigned char *)(a1 + 74);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  __int16 v20 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 74) = v14;
  outlined consume of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v20, v19);
  uint64_t v21 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 40))(v22, v23, v24);
  uint64_t v25 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v22 + *(int *)(v25 + 20)) = *(unsigned char *)(v23 + *(int *)(v25 + 20));
  uint64_t v26 = type metadata accessor for AccessibilityLinkModifier.Configuration();
  *(unsigned char *)(a1 + *(int *)(v26 + 36)) = *(unsigned char *)(a2 + *(int *)(v26 + 36));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187A69B28);
}

uint64_t sub_187A69B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for AccessibilityLinkModifier.Configuration);
}

uint64_t storeEnumTagSinglePayload for AccessibilityLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187A69B54);
}

uint64_t sub_187A69B54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, (uint64_t (*)(void, void, void))type metadata accessor for AccessibilityLinkModifier.Configuration);
}

uint64_t type metadata accessor for AccessibilityLinkModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AccessibilityLinkModifier.Configuration()
{
  uint64_t result = type metadata accessor for LinkDestination();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for AccessibilityLinkModifier.Configuration(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    char v11 = *(unsigned char *)(a2 + 34);
    __int16 v12 = *(_WORD *)(a2 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v8, v9, v10, v12, v11);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(_WORD *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 34) = v11;
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    uint64_t v15 = *(void *)(a2 + 56);
    uint64_t v16 = *(void *)(a2 + 64);
    char v17 = *(unsigned char *)(a2 + 74);
    __int16 v18 = *(_WORD *)(a2 + 72);
    outlined copy of Environment<OpenURLAction>.Content(v13, v14, v15, v16, v18, v17);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v16;
    *(_WORD *)(a1 + 72) = v18;
    *(unsigned char *)(a1 + 74) = v17;
    uint64_t v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
    uint64_t v20 = a1 + v19;
    uint64_t v21 = a2 + v19;
    uint64_t v22 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    uint64_t v23 = type metadata accessor for LinkDestination.Configuration();
    *(unsigned char *)(v20 + *(int *)(v23 + 20)) = *(unsigned char *)(v21 + *(int *)(v23 + 20));
    *(unsigned char *)(a1 + *(int *)(a3 + 36)) = *(unsigned char *)(a2 + *(int *)(a3 + 36));
  }
  return a1;
}

uint64_t destroy for AccessibilityLinkModifier(uint64_t a1)
{
  outlined consume of Environment<OpenURLAction>.Content(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(_WORD *)(a1 + 32), *(unsigned char *)(a1 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(_WORD *)(a1 + 72), *(unsigned char *)(a1 + 74));
  uint64_t v2 = a1 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v3 = type metadata accessor for URL();
  __int16 v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t initializeWithCopy for AccessibilityLinkModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 34);
  __int16 v11 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v7, v8, v9, v11, v10);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(_WORD *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 34) = v10;
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 64);
  char v16 = *(unsigned char *)(a2 + 74);
  __int16 v17 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v12, v13, v14, v15, v17, v16);
  *(void *)(a1 + 40) = v12;
  *(void *)(a1 + 48) = v13;
  *(void *)(a1 + 56) = v14;
  *(void *)(a1 + 64) = v15;
  *(_WORD *)(a1 + 72) = v17;
  *(unsigned char *)(a1 + 74) = v16;
  uint64_t v18 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  uint64_t v22 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v19 + *(int *)(v22 + 20)) = *(unsigned char *)(v20 + *(int *)(v22 + 20));
  *(unsigned char *)(a1 + *(int *)(a3 + 36)) = *(unsigned char *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t assignWithCopy for AccessibilityLinkModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 34);
  __int16 v11 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v7, v8, v9, v11, v10);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  char v16 = *(unsigned char *)(a1 + 34);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  __int16 v17 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v11;
  *(unsigned char *)(a1 + 34) = v10;
  outlined consume of Environment<OpenURLAction>.Content(v12, v13, v14, v15, v17, v16);
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v19 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v21 = *(void *)(a2 + 64);
  char v22 = *(unsigned char *)(a2 + 74);
  __int16 v23 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v18, v19, v20, v21, v23, v22);
  uint64_t v24 = *(void *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 48);
  uint64_t v26 = *(void *)(a1 + 56);
  uint64_t v27 = *(void *)(a1 + 64);
  char v28 = *(unsigned char *)(a1 + 74);
  *(void *)(a1 + 40) = v18;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v20;
  *(void *)(a1 + 64) = v21;
  __int16 v29 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v23;
  *(unsigned char *)(a1 + 74) = v22;
  outlined consume of Environment<OpenURLAction>.Content(v24, v25, v26, v27, v29, v28);
  uint64_t v30 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  uint64_t v33 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 24))(v31, v32, v33);
  uint64_t v34 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v31 + *(int *)(v34 + 20)) = *(unsigned char *)(v32 + *(int *)(v34 + 20));
  *(unsigned char *)(a1 + *(int *)(a3 + 36)) = *(unsigned char *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t initializeWithTake for AccessibilityLinkModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
  uint64_t v7 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  uint64_t v11 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v8 + *(int *)(v11 + 20)) = *(unsigned char *)(v9 + *(int *)(v11 + 20));
  *(unsigned char *)(a1 + *(int *)(a3 + 36)) = *(unsigned char *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t assignWithTake for AccessibilityLinkModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v6 = *(_WORD *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 34);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 34);
  long long v13 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v13;
  __int16 v14 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 34) = v7;
  outlined consume of Environment<OpenURLAction>.Content(v8, v9, v10, v11, v14, v12);
  __int16 v15 = *(_WORD *)(a2 + 72);
  char v16 = *(unsigned char *)(a2 + 74);
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  char v21 = *(unsigned char *)(a1 + 74);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  __int16 v22 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v15;
  *(unsigned char *)(a1 + 74) = v16;
  outlined consume of Environment<OpenURLAction>.Content(v17, v18, v19, v20, v22, v21);
  uint64_t v23 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v24 = a1 + v23;
  uint64_t v25 = a2 + v23;
  uint64_t v26 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 40))(v24, v25, v26);
  uint64_t v27 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v24 + *(int *)(v27 + 20)) = *(unsigned char *)(v25 + *(int *)(v27 + 20));
  *(unsigned char *)(a1 + *(int *)(a3 + 36)) = *(unsigned char *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityLinkModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187A6A2C4);
}

uint64_t sub_187A6A2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for LinkDestination();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityLinkModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187A6A3A8);
}

uint64_t sub_187A6A3A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for LinkDestination();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 36)) = a2 + 1;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityLabelModifier.ChildModifier()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityLabelModifier<A>.ChildModifier()
{
  return &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
}

uint64_t closure #1 in AccessibilityDefaultActionRepresentableConfiguration.body(content:)(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1;
  uint64_t v8 = *(void *)a1;
  uint64_t v7 = *(void **)(a1 + 8);
  if (!*(unsigned char *)(a1 + 16))
  {
LABEL_4:

    uint64_t v15 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v15, (uint64_t)&v55);
    swift_bridgeObjectRelease();
    if (v55)
    {
      if (*(void *)(v55 + 16))
      {
        uint64_t v10 = *(void *)(v55 + 32);
        uint64_t v11 = *(void *)(v55 + 40);
        uint64_t v12 = *(unsigned __int8 *)(v55 + 48);
        uint64_t v13 = *(void *)(v55 + 56);
        outlined copy of Text.Storage(v10, v11, *(unsigned char *)(v55 + 48));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
LABEL_9:
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = specialized AccessibilityProperties.subscript.getter(v16);
    swift_bridgeObjectRelease_n();
    if (*(void *)(v17 + 16))
    {
      uint64_t v9 = *(void *)(v17 + 32);
      swift_retain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v9 = 0;
    }
    goto LABEL_12;
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (*(unsigned char *)(a1 + 16) == 1)
  {
    __int16 v14 = specialized Sequence.compactMap<A>(_:)(*(void *)a1);
    static AccessibilityAttachment.combine(_:)(v14, &v55);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityAttachment.Tree(v8, v7, 1);
    uint64_t v7 = v56;
    goto LABEL_4;
  }
LABEL_12:
  outlined init with take of AppIntentAction?((uint64_t)(a2 + 1), (uint64_t)v54);
  outlined init with take of AppIntentAction?((uint64_t)v54, (uint64_t)&v55);
  uint64_t v18 = v58;
  if (v58)
  {
    uint64_t v49 = v9;
    uint64_t v19 = v6;
    uint64_t v20 = v13;
    uint64_t v21 = v12;
    uint64_t v22 = v11;
    uint64_t v23 = v10;
    uint64_t v24 = v55;
    uint64_t v25 = v56;
    LOBYTE(v52[0]) = v57;
    type metadata accessor for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
    uint64_t v27 = v26;
    uint64_t v28 = swift_allocObject();
    char v29 = v52[0];
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(void *)(v28 + 48) = v24;
    *(void *)(v28 + 56) = v25;
    uint64_t v30 = v23;
    uint64_t v31 = v22;
    uint64_t v32 = v21;
    uint64_t v33 = v20;
    uint64_t v6 = v19;
    *(unsigned char *)(v28 + 64) = v29;
    *(void *)(v28 + 72) = v18;
    *(_OWORD *)(v28 + 80) = v59;
    *(void *)(v28 + 96) = 0;
    *(void *)(v28 + 104) = 0;
    *(void *)(v28 + 112) = 0;
    *(void *)(v28 + 120) = 2;
    *(void *)(v28 + 128) = v30;
    *(void *)(v28 + 136) = v31;
    *(void *)(v28 + 144) = v32;
    *(void *)(v28 + 152) = v33;
    *(void *)(v28 + 160) = v49;
    char v34 = 1;
    *(unsigned char *)(v28 + 168) = 1;
  }
  else
  {
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = a3;
    *(void *)(v35 + 24) = a4;
    long long v36 = a2[1];
    *(_OWORD *)(v35 + 32) = *a2;
    *(_OWORD *)(v35 + 48) = v36;
    long long v37 = a2[3];
    *(_OWORD *)(v35 + 64) = a2[2];
    *(_OWORD *)(v35 + 80) = v37;
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = partial apply for closure #1 in closure #1 in AccessibilityDefaultActionRepresentableConfiguration.body(content:);
    *(void *)(v38 + 24) = v35;
    uint64_t v50 = a2;
    uint64_t v39 = v13;
    uint64_t v40 = v12;
    uint64_t v32 = v11;
    uint64_t v41 = v10;
    Swift::UInt32 v42 = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
    uint64_t v27 = v43;
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(void *)(v28 + 64) = 0;
    *(void *)(v28 + 72) = 2;
    *(void *)(v28 + 80) = v41;
    *(void *)(v28 + 88) = v32;
    *(void *)(v28 + 96) = v40;
    *(void *)(v28 + 104) = v39;
    *(void *)(v28 + 112) = v9;
    *(void *)(v28 + 120) = thunk for @escaping @callee_guaranteed () -> (@out AccessibilityActionResult)partial apply;
    *(void *)(v28 + 128) = v38;
    *(_DWORD *)(v28 + 136) = v42;
    uint64_t v30 = v41;
    uint64_t v31 = v32;
    LOBYTE(v32) = v40;
    uint64_t v33 = v39;
    outlined retain of AccessibilityButtonModifier<A>(v50);
    char v34 = 0;
  }
  v52[0] = v28;
  v52[3] = v27;
  v52[4] = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  char v53 = v34;
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_18834BB80;
  outlined init with copy of AnyAccessibilityAction((uint64_t)v52, v44 + 32);
  outlined copy of Text?(v30, v31, v32, v33);
  swift_retain();
  outlined retain of ToggleStyleConfiguration.Effect((uint64_t)v54);
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  v51[5] = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>();
  v51[3] = v45;
  v51[4] = _s10Foundation4DateVACSLAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>);
  v51[0] = v44;
  specialized Dictionary.subscript.setter((uint64_t)v51, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
  AccessibilityAttachment.init(properties:)();
  swift_release();
  outlined consume of Text?(v30, v31, v32, v33);
  uint64_t result = outlined destroy of AnyAccessibilityAction((uint64_t)v52);
  uint64_t v47 = v51[1];
  *(void *)uint64_t v6 = v51[0];
  *(void *)(v6 + 8) = v47;
  *(unsigned char *)(v6 + 16) = 0;
  return result;
}

uint64_t closure #1 in AccessibilityNavigationLinkButtonModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v20[1] = a5;
  uint64_t v9 = type metadata accessor for AccessibilityNavigationLinkButtonModifier.Representable();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v20 - v15;
  v21[0] = a1;
  v21[1] = a2;
  swift_retain();
  MEMORY[0x18C113660](v21, a3, v9, a4);
  swift_release();
  uint64_t WitnessTable = swift_getWitnessTable();
  void v20[2] = a4;
  v20[3] = WitnessTable;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v18)(v16, v10);
}

uint64_t closure #2 in AccessibilityNavigationLinkButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v22[0] = a6;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v22 - v16;
  v22[7] = a2;
  v22[8] = a3;
  char v23 = 1;
  swift_retain();
  v22[3] = a4;
  v22[4] = a4;
  void v22[5] = a5;
  v22[6] = a5;
  uint64_t v18 = type metadata accessor for AccessibilityNavigationLinkButtonModifier.Attachment();
  uint64_t WitnessTable = swift_getWitnessTable();
  v22[1] = a5;
  v22[2] = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(WitnessTable + 40))(a1, v18, WitnessTable);
  swift_release();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v20)(v17, v11);
}

uint64_t AccessibilityNavigationLinkButtonModifier.Representable.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v6 = *(void *)(a2 + 16);
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for _ViewModifier_Content();
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = v5;
  uint64_t v30 = v4;
  LOBYTE(v31) = 0;
  swift_retain();
  uint64_t v36 = v6;
  uint64_t v37 = v7;
  uint64_t v38 = v8;
  uint64_t v39 = WitnessTable;
  uint64_t v10 = type metadata accessor for AccessibilityNavigationLinkButtonModifier.Attachment();
  uint64_t v11 = swift_getWitnessTable();
  type metadata accessor for ModifiedContent();
  v27[2] = WitnessTable;
  v27[3] = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v12 = swift_getWitnessTable();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(v11 + 40))(v28, v12, v10, v11);
  swift_release();
  v27[0] = v28[0];
  v27[1] = v28[1];
  memset(v43, 0, 48);
  swift_checkMetadataState();
  uint64_t v36 = v5;
  uint64_t v37 = v4;
  outlined init with take of AppIntentAction?((uint64_t)v43, (uint64_t)&v38);
  uint64_t v18 = v39;
  uint64_t v19 = v38;
  uint64_t v16 = (void *)*((void *)&v40 + 1);
  char v17 = v40;
  uint64_t v20 = v36;
  uint64_t v21 = v37;
  uint64_t v22 = v38;
  uint64_t v23 = v39;
  long long v24 = v40;
  uint64_t v25 = v41;
  uint64_t v26 = v42;
  uint64_t v13 = type metadata accessor for AccessibilityDefaultActionRepresentableConfiguration();
  swift_retain();
  uint64_t v14 = swift_getWitnessTable();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>(255, &lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))(v14 + 40))(&v29, v27, v13, v14);
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v19, v18, v17, v16);
  swift_release();
  swift_release();
  uint64_t v20 = v29;
  uint64_t v21 = v30;
  uint64_t v22 = v31;
  uint64_t v23 = v32;
  long long v24 = v33;
  uint64_t v25 = v34;
  uint64_t v26 = v35;
  swift_checkMetadataState();
  static ViewBuilder.buildExpression<A>(_:)(&v20);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v29 = v36;
  uint64_t v30 = v37;
  uint64_t v31 = v38;
  uint64_t v32 = v39;
  long long v33 = v40;
  uint64_t v34 = v41;
  uint64_t v35 = v42;
  static ViewBuilder.buildExpression<A>(_:)(&v29);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t AccessibilityNavigationLinkButtonModifier.Attachment.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v23[0] = a1;
  v23[1] = a3;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v23 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v23 - v14;
  char v16 = *((unsigned char *)v3 + 16);
  uint64_t v17 = v5;
  uint64_t v18 = *(void *)(a2 + 40);
  View.accessibilityCombinedElement(options:ignoredTraits:)(12, v17, v18, (uint64_t)v9);
  long long v24 = *v3;
  char v25 = v16;
  *(void *)&long long v24 = AccessibilityNavigationLinkButtonModifier.Attachment.accessibilityActions.getter(a2);
  unint64_t v19 = lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  unint64_t v20 = lazy protocol witness table accessor for type [AnyAccessibilityAction] and conformance [A]();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v24, v16, v6, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, v19, v20, (uint64_t)v12);
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v9, v6);
  v23[2] = v18;
  v23[3] = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  v21(v12, v6);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v21)(v15, v6);
}

void implicit closure #2 in implicit closure #1 in AccessibilityButtonModifier.init(_:)()
{
}

uint64_t AccessibilityButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v35 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F410E8]);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v29 = type metadata accessor for AccessibilityButtonModifier.Representable();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  uint64_t v8 = type metadata accessor for StaticIf();
  unint64_t v30 = lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput();
  *(void *)&long long v37 = &type metadata for NavigationButtonInput;
  *((void *)&v37 + 1) = v6;
  *(void *)&long long v38 = v8;
  *((void *)&v38 + 1) = v30;
  uint64_t v27 = type metadata accessor for StaticIf();
  uint64_t v33 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v28 = (char *)&v26 - v9;
  type metadata accessor for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>(255, &lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityLargeContentViewModifier);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v32 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v26 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v31 = (char *)&v26 - v13;
  long long v14 = v3[1];
  long long v37 = *v3;
  long long v38 = v14;
  long long v15 = v3[3];
  long long v39 = v3[2];
  long long v40 = v15;
  v36[14] = v5;
  v36[15] = v7;
  v36[16] = &v37;
  v36[8] = v5;
  v36[9] = v7;
  v36[10] = &v37;
  v36[26] = v7;
  v36[27] = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = swift_getWitnessTable();
  v36[24] = v7;
  v36[25] = v17;
  v36[22] = swift_getWitnessTable();
  v36[23] = WitnessTable;
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v18 = v28;
  View.staticIf<A, B, C>(_:trueModifier:falseModifier:)();
  v36[2] = v5;
  v36[3] = v7;
  v36[4] = &v37;
  v36[20] = WitnessTable;
  v36[21] = v25;
  uint64_t v19 = v27;
  uint64_t v20 = swift_getWitnessTable();
  uint64_t v21 = v26;
  View.accessibilityShowsLargeContentViewer<A>(_:largeContentView:)(1, (void (*)(double))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, (uint64_t)v36, v19, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, v20);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v19);
  v36[18] = v20;
  v36[19] = &protocol witness table for AccessibilityLargeContentViewModifier<A>;
  swift_getWitnessTable();
  uint64_t v22 = v31;
  static ViewBuilder.buildExpression<A>(_:)(v21);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v32 + 8);
  v23(v21, v10);
  static ViewBuilder.buildExpression<A>(_:)(v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v22, v10);
}

uint64_t closure #2 in AccessibilityButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v22[0] = a1;
  v22[1] = a5;
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F410E8]);
  uint64_t v9 = v8;
  type metadata accessor for AccessibilityButtonModifier.Representable();
  v22[19] = v9;
  v22[20] = type metadata accessor for ModifiedContent();
  v22[21] = type metadata accessor for ModifiedContent();
  v22[22] = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  uint64_t v10 = type metadata accessor for StaticIf();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  char v16 = (char *)v22 - v15;
  v22[10] = a3;
  v22[11] = a4;
  v22[12] = a2;
  v22[4] = a3;
  void v22[5] = a4;
  v22[6] = a2;
  uint64_t WitnessTable = swift_getWitnessTable();
  v22[17] = a4;
  v22[18] = WitnessTable;
  uint64_t v18 = swift_getWitnessTable();
  v22[15] = a4;
  v22[16] = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v21 = swift_getWitnessTable();
  View.staticIf<A, B, C>(context:trueModifier:falseModifier:)();
  v22[13] = v18;
  v22[14] = v21;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v19)(v16, v10);
}

uint64_t closure #1 in closure #2 in AccessibilityButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v29 = a1;
  uint64_t v31 = a5;
  uint64_t v26 = type metadata accessor for AccessibilityButtonModifier.Representable();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v30 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v25 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v28 = (char *)&v24 - v10;
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v13 = a2[3];
  uint64_t v24 = a2[2];
  uint64_t v14 = a2[4];
  uint64_t v15 = (void *)a2[5];
  uint64_t v16 = a2[6];
  uint64_t v17 = a2[7];
  v34[0] = v11;
  v34[1] = v12;
  v34[2] = v24;
  v34[3] = v13;
  v34[4] = v14;
  v34[5] = v15;
  v34[6] = v16;
  v34[7] = v17;
  outlined retain of AccessibilityButtonModifier<A>(a2);
  uint64_t v18 = v27;
  MEMORY[0x18C113660](v34, a3, v26, v27);
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v24, v13, v14, v15);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = v18;
  uint64_t v33 = WitnessTable;
  swift_getWitnessTable();
  uint64_t v20 = v28;
  uint64_t v21 = v25;
  static ViewBuilder.buildExpression<A>(_:)(v25);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v30 + 8);
  v22(v21, v7);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v7);
}

uint64_t closure #1 in AccessibilityButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v33 = a6;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v27 - v15;
  uint64_t v17 = *a2;
  uint64_t v18 = a2[1];
  uint64_t v19 = a2[2];
  uint64_t v30 = a2[3];
  uint64_t v31 = v19;
  uint64_t v20 = a2[4];
  uint64_t v21 = (void *)a2[5];
  uint64_t v22 = a2[7];
  uint64_t v28 = a2[6];
  uint64_t v29 = v20;
  v27[1] = v22;
  uint64_t v40 = v17;
  uint64_t v41 = v18;
  uint64_t v42 = v19;
  uint64_t v43 = v30;
  uint64_t v44 = v20;
  uint64_t v45 = v21;
  uint64_t v46 = v28;
  uint64_t v47 = v22;
  char v48 = a5;
  outlined retain of AccessibilityButtonModifier<A>(a2);
  uint64_t v36 = a3;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a4;
  uint64_t v23 = type metadata accessor for AccessibilityButtonModifier.Attachment();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v34 = a4;
  uint64_t v35 = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(WitnessTable + 40))(v32, v23, WitnessTable);
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v31, v30, v29, v21);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v11 + 8);
  v25(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v25)(v16, v10);
}

uint64_t AccessibilityButtonModifier.Representable.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v31 = *v2;
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = v2[7];
  uint64_t v34 = *(void *)(a2 + 16);
  swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for _ViewModifier_Content();
  uint64_t v33 = *(void *)(a2 + 24);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v43 = v5;
  uint64_t v44 = v4;
  uint64_t v14 = v4;
  uint64_t v15 = v6;
  uint64_t v25 = v8;
  uint64_t v26 = v6;
  uint64_t v45 = v6;
  uint64_t v46 = v7;
  LOBYTE(v6) = v8;
  *(void *)&long long v47 = v8;
  *((void *)&v47 + 1) = v9;
  uint64_t v16 = v9;
  uint64_t v17 = v10;
  uint64_t v48 = v10;
  uint64_t v49 = v11;
  uint64_t v18 = v11;
  char v50 = 0;
  uint64_t v19 = v14;
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v15, v7, v6, v16);
  uint64_t v52 = v34;
  uint64_t v53 = v12;
  uint64_t v54 = v33;
  uint64_t v55 = WitnessTable;
  uint64_t v20 = type metadata accessor for AccessibilityButtonModifier.Attachment();
  uint64_t v21 = swift_getWitnessTable();
  type metadata accessor for ModifiedContent();
  v42[2] = WitnessTable;
  v42[3] = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v27 = swift_getWitnessTable();
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(v21 + 40))(v51, v27, v20, v21);
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v26, v7, v25, v16);
  v42[0] = v51[0];
  v42[1] = v51[1];
  v59[0] = v26;
  v59[1] = v7;
  v59[2] = v25;
  v59[3] = v16;
  v59[4] = v17;
  v59[5] = v18;
  swift_checkMetadataState();
  uint64_t v43 = v31;
  uint64_t v44 = v19;
  outlined init with take of AppIntentAction?((uint64_t)v59, (uint64_t)&v45);
  uint64_t v30 = v46;
  uint64_t v32 = v45;
  uint64_t v28 = (void *)*((void *)&v47 + 1);
  char v29 = v47;
  uint64_t v35 = v43;
  uint64_t v36 = v19;
  uint64_t v37 = v45;
  uint64_t v38 = v46;
  long long v39 = v47;
  uint64_t v40 = v48;
  uint64_t v41 = v49;
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v26, v7, v25, v16);
  uint64_t v22 = type metadata accessor for AccessibilityDefaultActionRepresentableConfiguration();
  uint64_t v23 = swift_getWitnessTable();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>(255, &lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>> and conformance <> ModifiedContent<A, B>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>, _PreferenceTransformModifier<AccessibilityAttachment.Key>>> and conformance _BackgroundModifier<A>();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  (*(void (**)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))(v23 + 40))(&v52, v42, v22, v23);
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v32, v30, v29, v28);
  swift_release();
  swift_release();
  uint64_t v35 = v52;
  uint64_t v36 = v53;
  uint64_t v37 = v54;
  uint64_t v38 = v55;
  long long v39 = v56;
  uint64_t v40 = v57;
  uint64_t v41 = v58;
  swift_checkMetadataState();
  static ViewBuilder.buildExpression<A>(_:)(&v35);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v52 = v43;
  uint64_t v53 = v44;
  uint64_t v54 = v45;
  uint64_t v55 = v46;
  long long v56 = v47;
  uint64_t v57 = v48;
  uint64_t v58 = v49;
  static ViewBuilder.buildExpression<A>(_:)(&v52);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t AccessibilityButtonModifier.Attachment.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v30 = a2;
  *(void *)&long long v31 = a1;
  uint64_t v33 = a3;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v26 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v26 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v26 - v18;
  long long v20 = v4[1];
  long long v28 = v4[2];
  long long v29 = v20;
  uint64_t v27 = *((void *)v4 + 6);
  uint64_t v26 = *((void *)v4 + 7);
  char v21 = *((unsigned char *)v4 + 64);
  uint64_t v32 = *(void *)(a2 + 40);
  View.accessibilityCombinedElement(options:ignoredTraits:)(12, v6, v32, (uint64_t)v10);
  *(void *)&v36[0] = 1;
  long long v31 = *v4;
  ModifiedContent<>.accessibilityAddTraits(_:)(v36, v7, (uint64_t)v13);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v8 + 8);
  v22(v10, v7);
  v36[0] = v31;
  v36[1] = v29;
  v36[2] = v28;
  uint64_t v37 = v27;
  uint64_t v38 = v26;
  char v39 = v21;
  *(void *)&v36[0] = AccessibilityButtonModifier.Attachment.accessibilityActions.getter(v30);
  unint64_t v23 = lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  unint64_t v24 = lazy protocol witness table accessor for type [AnyAccessibilityAction] and conformance [A]();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)v36, v21, v7, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, v23, v24, (uint64_t)v16);
  swift_bridgeObjectRelease();
  v22(v13, v7);
  uint64_t v34 = v32;
  uint64_t v35 = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v16);
  v22(v16, v7);
  static ViewBuilder.buildExpression<A>(_:)(v19);
  return ((uint64_t (*)(char *, uint64_t))v22)(v19, v7);
}

uint64_t AccessibilityButtonModifier.Attachment.accessibilityActions.getter(uint64_t a1)
{
  long long v2 = v1[3];
  long long v23 = v1[2];
  long long v24 = v2;
  char v25 = *((unsigned char *)v1 + 64);
  long long v3 = v1[1];
  long long v21 = *v1;
  long long v22 = v3;
  if ((v25 & 1) == 0) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = (void *)*((void *)&v23 + 1);
  if (*((void *)&v23 + 1))
  {
    long long v6 = v24;
    long long v7 = v22;
    char v8 = v23 & 1;
    type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_18834BB80;
    type metadata accessor for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
    *(void *)(v4 + 56) = v9;
    *(void *)(v4 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    uint64_t v10 = swift_allocObject();
    *(void *)(v4 + 32) = v10;
    *(_OWORD *)(v10 + 16) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = v7;
    *(unsigned char *)(v10 + 64) = v8;
    *(void *)(v10 + 72) = v5;
    *(_OWORD *)(v10 + 80) = v6;
    *(void *)(v10 + 96) = 0;
    *(void *)(v10 + 104) = 0;
    *(void *)(v10 + 112) = 0;
    *(void *)(v10 + 120) = 2;
    *(_OWORD *)(v10 + 128) = 0u;
    *(_OWORD *)(v10 + 144) = 0u;
    *(_OWORD *)(v10 + 153) = 0u;
    *(unsigned char *)(v4 + 72) = 1;
    outlined copy of Environment<AppIntentExecutor?>.Content(v7, *((uint64_t *)&v7 + 1), v8);
    id v11 = v5;
    swift_retain();
  }
  else
  {
    type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_18834BB80;
    uint64_t v13 = swift_allocObject();
    long long v14 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v13 + 16) = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v13 + 32) = v14;
    long long v15 = v1[3];
    *(_OWORD *)(v13 + 80) = v1[2];
    *(_OWORD *)(v13 + 96) = v15;
    *(unsigned char *)(v13 + 112) = *((unsigned char *)v1 + 64);
    long long v16 = v1[1];
    *(_OWORD *)(v13 + 48) = *v1;
    *(_OWORD *)(v13 + 64) = v16;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = partial apply for closure #1 in AccessibilityButtonModifier.Attachment.accessibilityActions.getter;
    *(void *)(v17 + 24) = v13;
    LODWORD(a1) = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
    *(void *)(v4 + 56) = v18;
    *(void *)(v4 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    uint64_t v19 = swift_allocObject();
    *(void *)(v4 + 32) = v19;
    *(_OWORD *)(v19 + 16) = 0u;
    *(_OWORD *)(v19 + 32) = 0u;
    *(_OWORD *)(v19 + 48) = 0u;
    *(void *)(v19 + 64) = 0;
    *(void *)(v19 + 72) = 2;
    *(_OWORD *)(v19 + 80) = 0u;
    *(_OWORD *)(v19 + 96) = 0u;
    *(void *)(v19 + 112) = 0;
    *(void *)(v19 + 120) = thunk for @escaping @callee_guaranteed () -> (@out AccessibilityActionResult)partial apply;
    *(void *)(v19 + 128) = v17;
    *(_DWORD *)(v19 + 136) = a1;
    *(unsigned char *)(v4 + 72) = 0;
    outlined retain of AccessibilityButtonModifier<A>(&v21);
  }
  return v4;
}

uint64_t AccessibilityPlaybackButtonModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v32[2] = a1;
  uint64_t v36 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  id v11 = (char *)v32 - v10;
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)v32 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v32 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v34 = (uint64_t)v32 - v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v35 = (char *)v32 - v21;
  uint64_t v33 = *(void *)(a1 + 24);
  View.accessibilityCombinedElement(options:ignoredTraits:)(0, v3, v33, (uint64_t)v8);
  *(void *)&v39[0] = 1;
  ModifiedContent<>.accessibilityAddTraits(_:)(v39, v5, (uint64_t)v11);
  long long v22 = *(void (**)(void, void))(v6 + 8);
  v22(v8, v5);
  *(void *)&v39[0] = 1024;
  ModifiedContent<>.accessibilityRemoveTraits(_:)(v39, v5, (uint64_t)v14);
  v22(v11, v5);
  uint64_t v23 = specialized static Text.Accessibility.playback(for:)(v2);
  uint64_t v25 = v24;
  char v27 = v26 & 1;
  ModifiedContent<>.accessibilityLabel(_:)(v23, v24, v26 & 1, v28, v5, (uint64_t)v17);
  outlined consume of Text.Storage(v23, v25, v27);
  swift_bridgeObjectRelease();
  v22(v14, v5);
  AccessibilityPlaybackButtonModifier.resolvedValue.getter(v39);
  uint64_t v29 = v34;
  ModifiedContent<>.accessibilityValue(_:)((uint64_t)v39, v5, v34);
  outlined destroy of AccessibilityValueStorage((uint64_t)v39);
  v22(v17, v5);
  uint64_t v37 = v33;
  uint64_t v38 = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  uint64_t v30 = v35;
  static ViewBuilder.buildExpression<A>(_:)(v29);
  v22(v29, v5);
  static ViewBuilder.buildExpression<A>(_:)(v30);
  return ((uint64_t (*)(char *, uint64_t))v22)(v30, v5);
}

double AccessibilityPlaybackButtonModifier.resolvedValue.getter@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v18[-v4 - 8];
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  uint64_t v11 = type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration();
  outlined init with copy of ClosedRange<Date>?(v1 + *(int *)(v11 + 40), (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) == 1)
  {
    _sSNy10Foundation4DateVGSgWOhTm_0((uint64_t)v5, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>);
    LOBYTE(v21[0]) = 0;
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    AccessibilityValueStorage.init<A>(_:description:)();
  }
  else
  {
    _sSNy10Foundation4DateVGWObTm_0((uint64_t)v5, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    uint64_t v13 = v1 + *(int *)(v11 + 36);
    int v14 = *(unsigned __int8 *)(v13 + 16);
    if (v14 == 4)
    {
      v18[0] = 0;
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      AccessibilityValueStorage.init<A>(_:description:)();
    }
    else if (v14 == 5)
    {
      AccessibilityPlaybackButtonModifier.percentageValue(interval:)((unint64_t)v10, (uint64_t)v21);
    }
    else
    {
      uint64_t v15 = *(void *)(v1 + *(int *)(v11 + 36) + 8);
      v18[0] = *(void *)v13;
      uint64_t v19 = v15;
      char v20 = v14;
      AccessibilityPlaybackButtonModifier.descriptionValue(_:interval:)(v18, (uint64_t)v10, (uint64_t)v21);
    }
    outlined destroy of LinkDestination((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    long long v16 = v21[1];
    *a1 = v21[0];
    a1[1] = v16;
    double result = *(double *)&v22;
    a1[2] = v22;
  }
  return result;
}

uint64_t AccessibilityPlaybackButtonModifier.percentageValue(interval:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v32 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  MEMORY[0x1F4188790](v3);
  long long v31 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Locale();
  MEMORY[0x1F4188790](v5 - 8);
  type metadata accessor for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>(0, &lazy cache variable for type metadata for FloatingPointFormatStyle<Double>.Percent, (uint64_t (*)(void))lazy protocol witness table accessor for type Double and conformance Double, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F27630]);
  uint64_t v7 = v6;
  uint64_t v30 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  long long v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v20 - 8);
  long long v22 = (char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of LinkDestination.Configuration(v2, (uint64_t)v22, type metadata accessor for PlaybackButton.State);
  int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v22, 2, v13);
  if (v23)
  {
    if (v23 == 1)
    {
      LOBYTE(v38) = 0;
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
      return AccessibilityValueStorage.init<A>(_:description:)();
    }
    else
    {
      outlined init with copy of LinkDestination.Configuration(v34, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
      Text.init(progressInterval:countsDown:)();
      return AccessibilityValueStorage.init(description:)();
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v22, v13);
    ClosedRange<>.progress(at:countdown:)();
    uint64_t v36 = v25;
    static Locale.autoupdatingCurrent.getter();
    unint64_t v34 = lazy protocol witness table accessor for type Double and conformance Double();
    FloatingPointFormatStyle.Percent.init(locale:)();
    char v26 = v31;
    uint64_t v27 = v32;
    uint64_t v28 = v33;
    (*(void (**)(char *, void, uint64_t))(v32 + 104))(v31, *MEMORY[0x1E4FBBEA0], v33);
    MEMORY[0x18C10A330](v26, 0x3FF0000000000000, 0, v7);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v26, v28);
    uint64_t v29 = *(void (**)(char *, uint64_t))(v30 + 8);
    v29(v9, v7);
    lazy protocol witness table accessor for type FloatingPointFormatStyle<Double>.Percent and conformance FloatingPointFormatStyle<A>.Percent();
    BinaryFloatingPoint.formatted<A>(_:)();
    v29(v12, v7);
    uint64_t v36 = v38;
    uint64_t v37 = v39;
    lazy protocol witness table accessor for type String and conformance String();
    Text.init<A>(_:)();
    AccessibilityValueStorage.init(description:)();
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
}

uint64_t AccessibilityPlaybackButtonModifier.descriptionValue(_:interval:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  v34[1] = a3;
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PlaybackButton.State(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v14 = *a1;
  uint64_t v15 = *((void *)a1 + 1);
  char v16 = a1[16];
  outlined init with copy of LinkDestination.Configuration(v4, (uint64_t)v13, type metadata accessor for PlaybackButton.State);
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 2, v7);
  if (v17)
  {
    if (v17 == 1)
    {
      LOBYTE(v41) = v14;
      uint64_t v42 = v15;
      char v43 = v16;
      type metadata accessor for ClosedRange<Date>();
      uint64_t v41 = Text.DateStyle.timeRemainingString(lowerBound:upperBound:)(a2, a2 + *(int *)(v18 + 36));
      uint64_t v42 = v19;
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v20 = Text.init<A>(_:)();
    }
    else
    {
      type metadata accessor for ClosedRange<Date>();
      (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a2 + *(int *)(v30 + 36), v7);
      LOBYTE(v41) = v14;
      uint64_t v42 = v15;
      char v43 = v16;
      uint64_t v20 = Text.init(_:style:)();
    }
    uint64_t v25 = v20;
    uint64_t v27 = v21;
    char v29 = v22;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
    LOBYTE(v41) = v14;
    uint64_t v42 = v15;
    char v43 = v16;
    type metadata accessor for ClosedRange<Date>();
    uint64_t v41 = Text.DateStyle.timeRemainingString(lowerBound:upperBound:)((uint64_t)v10, a2 + *(int *)(v23 + 36));
    uint64_t v42 = v24;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v25 = Text.init<A>(_:)();
    uint64_t v27 = v26;
    char v29 = v28;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  char v31 = v29 & 1;
  LOBYTE(v41) = v14;
  uint64_t v42 = v15;
  char v43 = v16;
  outlined copy of Text.Storage(v25, v27, v29 & 1);
  swift_bridgeObjectRetain();
  static Text.DateStyle.timer.getter();
  v35[0] = v38;
  uint64_t v36 = v39;
  char v37 = v40;
  if (MEMORY[0x18C113050](&v41, v35))
  {
    type metadata accessor for AccessibilityTextModifier();
    uint64_t v32 = swift_allocObject();
    *(_WORD *)(v32 + 16) = 1800;
    *(unsigned char *)(v32 + 18) = 1;
    *(_OWORD *)(v32 + 24) = 0u;
    *(_OWORD *)(v32 + 40) = 0u;
    Text.modified(with:)();
    outlined consume of Text.Storage(v25, v27, v31);
    swift_bridgeObjectRelease();
    outlined consume of Text.Storage(v25, v27, v31);
    swift_release();
  }
  else
  {
    outlined consume of Text.Storage(v25, v27, v29 & 1);
  }
  swift_bridgeObjectRelease();
  return AccessibilityValueStorage.init(description:)();
}

uint64_t AccessibilityLinkModifier.init(_:isArchive:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  _sSNy10Foundation4DateVGWObTm_0(a1, a3, MEMORY[0x1E4F3FB98]);
  uint64_t result = type metadata accessor for AccessibilityLinkModifier.Configuration();
  *(unsigned char *)(a3 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t AccessibilityLinkModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v50 = a1;
  uint64_t v54 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v55 = *(void *)(a2 + 24);
  uint64_t v6 = type metadata accessor for AccessibilityLinkModifier.Configuration();
  uint64_t v43 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v44 = (char *)v42 - v7;
  type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for LinkDestination.Configuration?, MEMORY[0x1E4F3FB80], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v45 = (uint64_t)v42 - v9;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v49 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v46 = (char *)v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v48 = (uint64_t)v42 - v13;
  MEMORY[0x1F4188790](v14);
  long long v47 = (char *)v42 - v15;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  v42[1] = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v57 = v17;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v18);
  MEMORY[0x1F4188790](v19);
  MEMORY[0x1F4188790](v20);
  MEMORY[0x1F4188790](v21);
  v42[2] = (char *)v42 - v22;
  uint64_t v56 = v10;
  uint64_t v53 = type metadata accessor for _ConditionalContent();
  uint64_t v52 = *(void *)(v53 - 8);
  double v23 = MEMORY[0x1F4188790](v53);
  uint64_t v51 = (char *)v42 - v24;
  if (*(unsigned char *)(v4 + *(int *)(v6 + 36)) == 1) {
    View.accessibilityIgnoreViewResponders()();
  }
  uint64_t v25 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v43 + 16))(v44, v4, v6, v23);
  uint64_t v26 = type metadata accessor for LinkDestination();
  uint64_t v27 = v45;
  outlined init with copy of LinkDestination.Configuration(v25 + *(int *)(v26 + 24), v45, MEMORY[0x1E4F3FB80]);
  outlined destroy of LinkDestination(v25, MEMORY[0x1E4F3FB98]);
  uint64_t v28 = type metadata accessor for LinkDestination.Configuration();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v27, 0, 1, v28);
  char v29 = v46;
  uint64_t v30 = v55;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B08], v27, 1, v5, MEMORY[0x1E4F40B08], v55);
  _sSNy10Foundation4DateVGSgWOhTm_0(v27, &lazy cache variable for type metadata for LinkDestination.Configuration?, MEMORY[0x1E4F3FB80]);
  uint64_t v72 = 8;
  uint64_t v31 = v48;
  uint64_t v32 = v56;
  ModifiedContent<>.accessibilityAddTraits(_:)(&v72, v56, v48);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v49 + 8);
  v33(v29, v32);
  uint64_t v70 = v30;
  int v71 = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  unint64_t v34 = v47;
  static ViewBuilder.buildExpression<A>(_:)(v31);
  v33((char *)v31, v32);
  static ViewBuilder.buildExpression<A>(_:)(v34);
  uint64_t v68 = v30;
  long long v69 = &protocol witness table for IgnoreViewRespondersModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  long long v67 = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  uint64_t v35 = v51;
  static ViewBuilder.buildEither<A, B>(second:)(v31, v18, v32);
  v33((char *)v31, v32);
  uint64_t v36 = v32;
  uint64_t v37 = v55;
  v33(v34, v36);
  uint64_t v64 = v37;
  long long v65 = &protocol witness table for IgnoreViewRespondersModifier;
  uint64_t v62 = swift_getWitnessTable();
  uint64_t v63 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v60 = v37;
  uint64_t v61 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v58 = v38;
  uint64_t v59 = v39;
  uint64_t v40 = v53;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v35);
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v35, v40);
}

uint64_t AccessibilityToggleModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v44[1] = a1;
  uint64_t v56 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v44 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v46 = (uint64_t)v44 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v48 = (uint64_t)v44 - v16;
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F410E8]);
  uint64_t v18 = v17;
  uint64_t v52 = v17;
  uint64_t v19 = *(void *)(a2 + 24);
  *(void *)&long long v79 = v5;
  *((void *)&v79 + 1) = &type metadata for ToggleStyleConfiguration.Label;
  uint64_t v45 = v5;
  *(void *)int v80 = v19;
  *(void *)&v80[8] = &protocol witness table for ToggleStyleConfiguration.Label;
  uint64_t v49 = type metadata accessor for AccessibilityToggleModifier.RepresentationModifier();
  uint64_t v20 = type metadata accessor for ModifiedContent();
  uint64_t v50 = v20;
  unint64_t v53 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  *(void *)&long long v79 = v18;
  *((void *)&v79 + 1) = v20;
  *(void *)int v80 = v6;
  *(void *)&v80[8] = v53;
  uint64_t v21 = type metadata accessor for StaticIf();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v54 = v21;
  uint64_t v55 = v22;
  MEMORY[0x1F4188790](v21);
  long long v47 = (char *)v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v51 = (char *)v44 - v25;
  long long v26 = v3[3];
  long long v75 = v3[2];
  long long v76 = v26;
  long long v27 = v3[5];
  long long v77 = v3[4];
  long long v78 = v27;
  long long v28 = v3[1];
  long long v73 = *v3;
  long long v74 = v28;
  View.accessibilityCombinedElement(options:ignoredTraits:)(12, v5, v19, (uint64_t)v9);
  *(_OWORD *)&v80[16] = v75;
  long long v81 = v76;
  long long v82 = v77;
  long long v83 = v78;
  long long v79 = v73;
  *(_OWORD *)int v80 = v74;
  long long v69 = v75;
  long long v70 = v76;
  long long v71 = v77;
  long long v72 = v78;
  long long v67 = v73;
  long long v68 = v74;
  *(void *)&long long v67 = ToggleStyleConfiguration.accessibilityActions.getter();
  unint64_t v29 = lazy protocol witness table accessor for type AccessibilityProperties.ActionsKey and conformance AccessibilityProperties.ActionsKey();
  unint64_t v30 = lazy protocol witness table accessor for type [AnyAccessibilityAction] and conformance [A]();
  ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)&v67, 1, v6, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey, v29, v30, (uint64_t)v12);
  swift_bridgeObjectRelease();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v7 + 8);
  v31(v9, v6);
  *(void *)&long long v67 = 1;
  uint64_t v32 = v46;
  ModifiedContent<>.accessibilityAddTraits(_:)(&v67, v6, v46);
  v31(v12, v6);
  long long v67 = *(_OWORD *)&v80[8];
  LOBYTE(v68) = v80[24];
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, &lazy cache variable for type metadata for Binding<ToggleState>, MEMORY[0x1E4F3F540], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v66);
  if (v66) {
    char v33 = 2 * (v66 != 1);
  }
  else {
    char v33 = 1;
  }
  LOBYTE(v67) = v33;
  unint64_t v34 = lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  lazy protocol witness table accessor for type AccessibilityToggleValue and conformance AccessibilityToggleValue();
  uint64_t v35 = v48;
  ModifiedContent<>.accessibilityValue<A>(_:description:)((uint64_t)&v67, 0, 0, 0, 0, v6, MEMORY[0x1E4F40D58], v34, v48);
  v31((char *)v32, v6);
  uint64_t v57 = v45;
  uint64_t v58 = v19;
  uint64_t v59 = &v73;
  uint64_t v64 = v19;
  long long v65 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v37 = swift_getWitnessTable();
  uint64_t v62 = WitnessTable;
  uint64_t v63 = v37;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v38 = v47;
  View.staticIf<A, B>(_:trueModifier:)();
  v31((char *)v35, v6);
  uint64_t v60 = v43;
  uint64_t v61 = WitnessTable;
  uint64_t v39 = v54;
  swift_getWitnessTable();
  uint64_t v40 = v51;
  static ViewBuilder.buildExpression<A>(_:)(v38);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v55 + 8);
  v41(v38, v39);
  static ViewBuilder.buildExpression<A>(_:)(v40);
  return ((uint64_t (*)(char *, uint64_t))v41)(v40, v39);
}

uint64_t closure #1 in AccessibilityToggleModifier.body(content:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v37 = a1;
  uint64_t v39 = a5;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  *(void *)&long long v51 = a3;
  *((void *)&v51 + 1) = &type metadata for ToggleStyleConfiguration.Label;
  *(void *)&long long v52 = a4;
  *((void *)&v52 + 1) = &protocol witness table for ToggleStyleConfiguration.Label;
  uint64_t v34 = type metadata accessor for AccessibilityToggleModifier.RepresentationModifier();
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v38 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  char v33 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v35 = (char *)&v30 - v11;
  long long v12 = a2[3];
  long long v53 = a2[2];
  v54[0] = v12;
  long long v13 = a2[5];
  v54[1] = a2[4];
  v54[2] = v13;
  long long v14 = a2[1];
  long long v51 = *a2;
  long long v52 = v14;
  outlined init with take of ToggleStyleConfiguration.Effect(v54, v55);
  uint64_t v15 = outlined init with take of ToggleStyleConfiguration.Effect(v55, &v60);
  v17.i64[0] = 0;
  uint64_t v18 = v61;
  if (!v62) {
    uint64_t v18 = 0;
  }
  uint64_t v57 = v18;
  uint64_t v58 = v62;
  v16.i64[0] = v62;
  int8x16_t v19 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v16, v17)).i64[0], 0);
  int8x16_t v56 = vandq_s8(v60, v19);
  int8x16_t v59 = vandq_s8(v63, v19);
  AccessibilityToggleModifier.RepresentationModifier.init(label:intent:)((uint64_t)v15, (uint64_t)&v56, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&v45);
  uint64_t v20 = v45;
  uint64_t v21 = v46;
  uint64_t v22 = v48;
  uint64_t v31 = v47;
  v44[0] = v45;
  v44[1] = v46;
  void v44[2] = v47;
  v44[3] = v48;
  v44[4] = v49;
  v44[5] = v50;
  outlined retain of ToggleStyleConfiguration.Effect((uint64_t)v55);
  uint64_t v42 = a4;
  uint64_t v43 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v32 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = v33;
  MEMORY[0x18C113660](v44, v8, v34, WitnessTable);
  outlined consume of ToggleStyleConfiguration.Effect(v20, v21, v31, v22);
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v40 = WitnessTable;
  uint64_t v41 = v25;
  uint64_t v26 = v36;
  swift_getWitnessTable();
  long long v27 = v35;
  static ViewBuilder.buildExpression<A>(_:)(v24);
  long long v28 = *(void (**)(char *, uint64_t))(v38 + 8);
  v28(v24, v26);
  static ViewBuilder.buildExpression<A>(_:)(v27);
  return ((uint64_t (*)(char *, uint64_t))v28)(v27, v26);
}

uint64_t AccessibilityToggleModifier.RepresentationModifier.init(label:intent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1, a3);
  uint64_t v6 = type metadata accessor for AccessibilityToggleModifier.RepresentationModifier();
  return outlined init with take of AppIntentAction?(a2, a4 + *(int *)(v6 + 52));
}

uint64_t AccessibilityToggleModifier.RepresentationModifier.body(content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = a3;
  uint64_t v44 = *(a2 - 1);
  uint64_t v46 = *(void *)(v44 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v48 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v41 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  uint64_t v42 = type metadata accessor for _ViewModifier_Content();
  v33[1] = type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<AccessibilityAttachment.Key>, (uint64_t)&type metadata for AccessibilityAttachment.Key, (uint64_t)&protocol witness table for AccessibilityAttachment.Key, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  uint64_t v39 = a2[5];
  uint64_t v67 = v39;
  long long v68 = &protocol witness table for DetachedGeometryModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v10 = lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
  uint64_t v65 = WitnessTable;
  unint64_t v66 = v10;
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v64 = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  uint64_t v61 = swift_getWitnessTable();
  uint64_t v62 = &protocol witness table for _HiddenModifier;
  uint64_t v11 = swift_getWitnessTable();
  unint64_t v12 = lazy protocol witness table accessor for type _PreferenceTransformModifier<AccessibilityAttachment.Key> and conformance _PreferenceTransformModifier<A>();
  uint64_t v59 = v11;
  unint64_t v60 = v12;
  swift_getWitnessTable();
  uint64_t v35 = type metadata accessor for _BackgroundModifier();
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v37 = type metadata accessor for ModifiedContent();
  uint64_t v38 = type metadata accessor for ModifiedContent();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v40 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  v33[0] = (uint64_t)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v34 = (char *)v33 - v17;
  uint64_t v18 = (uint64_t)v41;
  uint64_t v19 = v45;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v48 + 16))(v41, v45, v6, v16);
  uint64_t v20 = v44;
  uint64_t v21 = v43;
  (*(void (**)(char *, uint64_t, void *))(v44 + 16))(v43, v19, a2);
  unint64_t v22 = (*(unsigned __int8 *)(v20 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (char *)swift_allocObject();
  *((void *)v23 + 2) = a2[2];
  *((void *)v23 + 3) = v6;
  uint64_t v24 = v39;
  *((void *)v23 + 4) = a2[4];
  *((void *)v23 + 5) = v24;
  (*(void (**)(char *, char *, void *))(v20 + 32))(&v23[v22], v21, a2);
  uint64_t v25 = v42;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = v33[0];
  View.accessibilityAttachment<A>(content:_:)(v18, (uint64_t)partial apply for closure #1 in AccessibilityToggleModifier.RepresentationModifier.body(content:), (uint64_t)v23, v25, v6, v26, v24, v33[0]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v18, v6);
  uint64_t v57 = v26;
  uint64_t v58 = &protocol witness table for DisableDeferredAccessibilityAttachmentModifier;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v55 = v28;
  uint64_t v56 = v29;
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v54 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v51 = swift_getWitnessTable();
  long long v52 = &protocol witness table for DetachDeferredAccessibilityAttachmentModifier;
  uint64_t v49 = swift_getWitnessTable();
  uint64_t v50 = &protocol witness table for EnableDeferredAccessibilityAttachmentModifier;
  swift_getWitnessTable();
  uint64_t v30 = v34;
  static ViewBuilder.buildExpression<A>(_:)(v27);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v31(v27, v13);
  static ViewBuilder.buildExpression<A>(_:)(v30);
  return ((uint64_t (*)(char *, uint64_t))v31)(v30, v13);
}

uint64_t closure #1 in AccessibilityToggleModifier.RepresentationModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v52 = a5;
  uint64_t v53 = a6;
  uint64_t result = type metadata accessor for AccessibilityToggleModifier.RepresentationModifier();
  uint64_t v9 = (uint64_t *)(a2 + *(int *)(result + 52));
  unint64_t v10 = (void *)v9[3];
  if (v10)
  {
    uint64_t v11 = *v9;
    uint64_t v12 = v9[1];
    uint64_t v13 = v9[5];
    uint64_t v44 = v9[4];
    uint64_t v46 = a1;
    uint64_t v14 = v9[2];
    uint64_t v15 = *(void *)a1;
    double v16 = *(void **)(a1 + 8);
    uint64_t v47 = v12;
    uint64_t v48 = *v9;
    if (*(unsigned char *)(a1 + 16))
    {
      if (*(unsigned char *)(a1 + 16) != 1)
      {
        char v25 = v9[2];
        outlined copy of Environment<AppIntentExecutor?>.Content(v11, v12, v14 & 1);
        id v26 = v10;
        swift_retain();
        char v27 = v25;
        uint64_t v42 = 0;
        uint64_t v28 = v10;
        uint64_t v29 = 0;
        uint64_t v22 = 0;
        uint64_t v30 = v12;
        uint64_t v24 = 0;
        uint64_t v23 = 0;
        uint64_t v31 = v44;
LABEL_16:
        char v34 = v27 & 1;
        char v56 = v27 & 1;
        char v45 = v27 & 1;
        type metadata accessor for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
        uint64_t v53 = v35;
        uint64_t v54 = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
        uint64_t v36 = swift_allocObject();
        uint64_t v50 = v36;
        char v37 = v56;
        *(_OWORD *)(v36 + 16) = 0u;
        *(_OWORD *)(v36 + 32) = 0u;
        *(void *)(v36 + 48) = v11;
        *(void *)(v36 + 56) = v30;
        *(unsigned char *)(v36 + 64) = v37;
        *(void *)(v36 + 72) = v28;
        *(void *)(v36 + 80) = v31;
        *(void *)(v36 + 88) = v13;
        *(void *)(v36 + 96) = 0;
        *(void *)(v36 + 104) = 0;
        *(void *)(v36 + 112) = 0;
        *(void *)(v36 + 120) = 2;
        *(void *)(v36 + 128) = v29;
        *(void *)(v36 + 136) = v22;
        *(void *)(v36 + 144) = v24;
        *(void *)(v36 + 152) = v23;
        *(void *)(v36 + 160) = v42;
        *(unsigned char *)(v36 + 168) = 1;
        char v55 = 1;
        type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
        uint64_t v38 = swift_allocObject();
        *(_OWORD *)(v38 + 16) = xmmword_18834BB80;
        outlined init with copy of AnyAccessibilityAction((uint64_t)&v50, v38 + 32);
        outlined copy of Environment<AppIntentExecutor?>.Content(v11, v30, v34);
        id v39 = v28;
        swift_retain();
        outlined copy of Text?(v29, v22, v24, v23);
        type metadata accessor for AnyAccessibilityPropertiesEntry();
        swift_retain();
        v49[5] = Dictionary.init(minimumCapacity:)();
        type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>();
        v49[3] = v40;
        v49[4] = _s10Foundation4DateVACSLAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>);
        v49[0] = v38;
        specialized Dictionary.subscript.setter((uint64_t)v49, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
        AccessibilityAttachment.init(properties:)();
        swift_release();
        outlined consume of Text?(v29, v22, v24, v23);
        outlined consume of Environment<AppIntentExecutor?>.Content(v48, v47, v45);
        swift_release();

        uint64_t result = outlined destroy of AnyAccessibilityAction((uint64_t)&v50);
        uint64_t v41 = v49[1];
        *(void *)uint64_t v46 = v49[0];
        *(void *)(v46 + 8) = v41;
        *(unsigned char *)(v46 + 16) = 0;
        return result;
      }
      uint64_t v43 = v9[2];
      outlined copy of Environment<AppIntentExecutor?>.Content(v11, v12, v14 & 1);
      id v17 = v10;
      swift_retain();
      uint64_t v18 = specialized Sequence.compactMap<A>(_:)(v15);
      static AccessibilityAttachment.combine(_:)(v18, &v50);
      swift_bridgeObjectRelease();
      outlined consume of AccessibilityAttachment.Tree(v15, v16, 1);
      double v16 = v51;
    }
    else
    {
      uint64_t v43 = v9[2];
      outlined copy of Environment<AppIntentExecutor?>.Content(v11, v12, v14 & 1);
      id v19 = v10;
      swift_retain();
    }

    uint64_t v20 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v20, (uint64_t)&v50);
    swift_bridgeObjectRelease();
    if (v50)
    {
      if (*(void *)(v50 + 16))
      {
        uint64_t v21 = *(void *)(v50 + 32);
        uint64_t v22 = *(void *)(v50 + 40);
        uint64_t v23 = *(void *)(v50 + 56);
        uint64_t v24 = *(unsigned __int8 *)(v50 + 48);
        outlined copy of Text.Storage(v21, v22, *(unsigned char *)(v50 + 48));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
LABEL_12:
        uint64_t v32 = swift_bridgeObjectRetain();
        uint64_t v33 = specialized AccessibilityProperties.subscript.getter(v32);
        swift_bridgeObjectRelease_n();
        if (*(void *)(v33 + 16))
        {
          uint64_t v42 = *(void *)(v33 + 32);
          swift_retain();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v42 = 0;
        }
        uint64_t v28 = v10;
        uint64_t v29 = v21;
        uint64_t v30 = v47;
        char v27 = v43;
        uint64_t v31 = v44;
        goto LABEL_16;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v24 = 0;
    uint64_t v23 = 0;
    goto LABEL_12;
  }
  return result;
}

void *closure #1 in ToggleStyleConfiguration.accessibilityActions.getter@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  outlined retain of ToggleStyleConfiguration(a1);
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v5 = v4;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v7, v5);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  uint64_t result = outlined release of ToggleStyleConfiguration(a1);
  *a2 = 2;
  return result;
}

int *AccessibilityAdjustableModifier.Configuration.init(value:continuous:onIncrement:onDecrement:onSet:onEditingChanged:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v17 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(a9, a1, v17);
  uint64_t result = (int *)type metadata accessor for AccessibilityAdjustableModifier.Configuration();
  *(unsigned char *)(a9 + result[17]) = a2;
  id v19 = (void *)(a9 + result[18]);
  *id v19 = a3;
  v19[1] = a4;
  uint64_t v20 = (void *)(a9 + result[19]);
  *uint64_t v20 = a5;
  v20[1] = a6;
  uint64_t v21 = (void *)(a9 + result[20]);
  *uint64_t v21 = a7;
  v21[1] = a8;
  uint64_t v22 = (void *)(a9 + result[21]);
  *uint64_t v22 = a10;
  v22[1] = a11;
  return result;
}

uint64_t AccessibilityAdjustableModifier.body(content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v30 = a3;
  uint64_t v4 = a2[3];
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v31 = *(void *)(v5 - 8);
  uint64_t v32 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v29 = (char *)&v27 - v6;
  uint64_t v7 = *(a2 - 1);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v9);
  unint64_t v10 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[5];
  uint64_t v27 = a2[4];
  uint64_t v13 = a2[6];
  uint64_t v14 = a2[7];
  v44[0] = v11;
  v44[1] = v4;
  uint64_t v28 = v4;
  void v44[2] = v27;
  v44[3] = v12;
  v44[4] = v13;
  v44[5] = v14;
  LOBYTE(v44[0]) = *(unsigned char *)(v34
                            + *(int *)(type metadata accessor for AccessibilityAdjustableModifier.Configuration() + 68));
  (*(void (**)(char *))(v7 + 16))(v10);
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  double v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = v11;
  *((void *)v16 + 3) = v4;
  uint64_t v17 = v27;
  *((void *)v16 + 4) = v27;
  *((void *)v16 + 5) = v12;
  *((void *)v16 + 6) = v13;
  *((void *)v16 + 7) = v14;
  (*(void (**)(char *, char *, void *))(v7 + 32))(&v16[v15], v10, a2);
  unint64_t v18 = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
  uint64_t v19 = v17;
  uint64_t v20 = v30;
  View.accessibilityAction<A>(_:label:image:_:)((uint64_t)v44, 0, 0, 0, 0, 0, (uint64_t)partial apply for closure #1 in AccessibilityAdjustableModifier.body(content:), (uint64_t)v16, v30, v11, (uint64_t)&type metadata for AccessibilityAdjustableAction, v17, v18);
  swift_release();
  uint64_t v22 = v31;
  uint64_t v21 = v32;
  uint64_t v23 = v29;
  uint64_t v24 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v29, v34, v32);
  uint64_t v36 = v11;
  uint64_t v37 = v28;
  uint64_t v38 = v19;
  uint64_t v39 = v12;
  uint64_t v40 = v13;
  uint64_t v41 = v14;
  uint64_t v42 = v20;
  uint64_t v43 = v24;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in AccessibilityAdjustableModifier.body(content:), (uint64_t)v35, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, v25, (uint64_t)v44);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v23, v21);
}

uint64_t closure #1 in AccessibilityAdjustableModifier.body(content:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  char v5 = *a1;
  uint64_t v6 = (int *)type metadata accessor for AccessibilityAdjustableModifier.Configuration();
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(a2 + v6[21]))(1);
  if (v5) {
    uint64_t v8 = v6[19];
  }
  else {
    uint64_t v8 = v6[18];
  }
  uint64_t v9 = *(void (**)(uint64_t))(a2 + v8);
  if (v9) {
    v9(v7);
  }
  *a3 = 2;
  uint64_t v10 = type metadata accessor for AccessibilityAdjustableModifier.Configuration();
  return (*(uint64_t (**)(void))(a2 + *(int *)(v10 + 84)))(0);
}

uint64_t closure #2 in AccessibilityAdjustableModifier.body(content:)(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v50 = a6;
  uint64_t v52 = a8;
  uint64_t v45 = a4;
  uint64_t v46 = a7;
  uint64_t v49 = a3;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  v51[0] = a4;
  v51[1] = a5;
  void v51[2] = a6;
  v51[3] = a7;
  v51[4] = a8;
  v51[5] = a9;
  uint64_t v38 = a9;
  uint64_t v11 = type metadata accessor for AccessibilityAdjustableModifier();
  uint64_t v47 = *(void *)(v11 - 8);
  uint64_t v48 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v44 = (char *)&v37 - v12;
  uint64_t v13 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v13 - 8);
  unint64_t v15 = (char *)&v37 - v14;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v37 - v21;
  uint64_t v39 = (char *)&v37 - v21;
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v40 = v17;
  uint64_t v41 = (uint64_t)&v37 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a2, v16, v24);
  uint64_t v26 = *(void *)(a5 - 8);
  (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v26 + 16))(v15, v42, a5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v15, 0, 1, a5);
  uint64_t v27 = v46;
  AccessibilityValueStorage.init<A>(_:description:)();
  ModifiedContent<>.accessibilityValue(_:)((uint64_t)v51, v16, (uint64_t)v22);
  outlined destroy of AccessibilityValueStorage((uint64_t)v51);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v17 + 8);
  v42(v19, v16);
  uint64_t v28 = v47;
  uint64_t v29 = v48;
  uint64_t v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v44, v49, v48);
  unint64_t v31 = (*(unsigned __int8 *)(v28 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v32 = (char *)swift_allocObject();
  *((void *)v32 + 2) = v45;
  *((void *)v32 + 3) = a5;
  *((void *)v32 + 4) = v50;
  *((void *)v32 + 5) = v27;
  uint64_t v33 = v38;
  *((void *)v32 + 6) = v52;
  *((void *)v32 + 7) = v33;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(&v32[v31], v30, v29);
  uint64_t v34 = v41;
  uint64_t v35 = v39;
  ModifiedContent<>.accessibilitySetValueAction(_:)((uint64_t)partial apply for closure #1 in closure #2 in AccessibilityAdjustableModifier.body(content:), (uint64_t)v32, v16, v41);
  swift_release();
  v42(v35, v16);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 40))(v43, v34, v16);
}

uint64_t closure #1 in closure #2 in AccessibilityAdjustableModifier.body(content:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = *a1;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v16 = type metadata accessor for AccessibilityAdjustableModifier.Configuration();
  (*(void (**)(uint64_t))(a2 + *(int *)(v16 + 84)))(1);
  uint64_t v17 = *(void (**)(uint64_t *))(a2 + *(int *)(v16 + 80));
  uint64_t v20 = v15;
  v17(&v20);
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v18 = type metadata accessor for AccessibilityAdjustableModifier.Configuration();
  return (*(uint64_t (**)(void))(a2 + *(int *)(v18 + 84)))(0);
}

void *closure #2 in AccessibilitySliderModifier.init(_:value:)(void *a1)
{
  outlined retain of SliderStyleConfiguration(a1);
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v3);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of SliderStyleConfiguration(a1);
}

void *closure #3 in AccessibilitySliderModifier.init(_:value:)(void *a1)
{
  outlined retain of SliderStyleConfiguration(a1);
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v3);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  return outlined release of SliderStyleConfiguration(a1);
}

void closure #4 in AccessibilitySliderModifier.init(_:value:)(double *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v12 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(double *)&a2 != 0.0)
  {
    uint64_t v41 = a6;
    double v42 = *(double *)&a2;
    double v16 = *a1;
    uint64_t v43 = a3;
    uint64_t v44 = a4;
    uint64_t v45 = a5;
    id v17 = a5;
    double v18 = COERCE_DOUBLE(a2);
    id v19 = a3;
    id v20 = a4;
    uint64_t v21 = (void *)AccessibilityBoundedNumber.minValue.getter();
    if (!v21) {
      goto LABEL_6;
    }
    uint64_t v22 = v21;
    objc_msgSend(v21, sel_doubleValue);
    double v24 = v23;

    double v42 = v18;
    uint64_t v43 = a3;
    uint64_t v44 = a4;
    uint64_t v45 = a5;
    uint64_t v25 = (void *)AccessibilityBoundedNumber.maxValue.getter();
    if (v25)
    {
      uint64_t v26 = v25;
      objc_msgSend(v25, sel_doubleValue);
      double v28 = v27;

      double v42 = v18;
      uint64_t v43 = a3;
      uint64_t v44 = a4;
      uint64_t v45 = a5;
      uint64_t v29 = (void *)AccessibilityBoundedNumber.step.getter();
      double v42 = v16;
      if (v29)
      {
        id v30 = v29;
        unint64_t v31 = (void *)AccessibilityNumber.value.getter();
        objc_msgSend(v31, sel_doubleValue);
        double v33 = v32;

        objc_msgSend(v30, sel_doubleValue);
        double v35 = v34;
        (*(void (**)(char *, void, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E4FBBEA0], v12);
        double v42 = v33;
        specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v15, v35);
        double v36 = v42;
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      }
      else
      {
        uint64_t v37 = (void *)AccessibilityNumber.value.getter();
        objc_msgSend(v37, sel_doubleValue);
        double v36 = v38;
      }
      uint64_t v39 = v41;
      double v42 = (v36 - v24) / (v28 - v24);
      outlined retain of SliderStyleConfiguration(v41);
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
      outlined consume of AccessibilitySliderValue?(a2, a3, a4, a5);
      outlined release of SliderStyleConfiguration(v39);
    }
    else
    {
LABEL_6:
      outlined consume of AccessibilitySliderValue?(a2, a3, a4, a5);
    }
  }
}

uint64_t AccessibilityStepperModifier.init(_:value:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a1[1];
  uint64_t v31 = *a1;
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v28 = a1[5];
  uint64_t v29 = a1[2];
  uint64_t v9 = a1[6];
  uint64_t v10 = *(void **)a2;
  uint64_t v11 = *(void *)(a2 + 8);
  uint64_t v13 = *(void **)(a2 + 16);
  uint64_t v12 = *(void **)(a2 + 24);
  if (*(void *)a2) {
    uint64_t v14 = *(void *)(a2 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  double v34 = *(void **)(a2 + 8);
  if (*(void *)a2) {
    uint64_t v15 = *(void *)(a2 + 16);
  }
  else {
    uint64_t v15 = 0;
  }
  if (*(void *)a2) {
    uint64_t v16 = *(void *)(a2 + 24);
  }
  else {
    uint64_t v16 = 0;
  }
  *(void *)&long long v47 = *(void *)a2;
  *((void *)&v47 + 1) = v14;
  *(void *)&long long v48 = v15;
  *((void *)&v48 + 1) = v16;
  id v17 = (void *)swift_allocObject();
  v17[2] = v10;
  void v17[3] = v11;
  void v17[4] = v13;
  v17[5] = v12;
  v17[6] = v31;
  v17[7] = v6;
  v17[8] = v29;
  v17[9] = v7;
  v17[10] = v8;
  v17[11] = v28;
  v17[12] = v9;
  unint64_t v30 = lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  unint64_t v26 = lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  unint64_t v27 = lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  AccessibilityAdjustableModifier.Configuration.init(value:continuous:onIncrement:onDecrement:onSet:onEditingChanged:)((uint64_t)&v47, 0, v6, v29, v7, v8, (uint64_t)partial apply for closure #2 in AccessibilityStepperModifier.init(_:value:), (uint64_t)v17, (uint64_t)v41, v28, v9);
  v35[0] = v41[0];
  v35[1] = v41[1];
  char v36 = v42;
  long long v37 = v43;
  long long v38 = v44;
  long long v39 = v45;
  long long v40 = v46;
  *(void *)&long long v47 = a3;
  *((void *)&v47 + 1) = MEMORY[0x1E4F40E50];
  *(void *)&long long v48 = a4;
  *((void *)&v48 + 1) = v30;
  unint64_t v49 = v26;
  *(void *)&long long v50 = v27;
  uint64_t v18 = type metadata accessor for AccessibilityAdjustableModifier.Configuration();
  (*(void (**)(long long *, _OWORD *, uint64_t))(*(void *)(v18 - 8) + 32))(&v47, v35, v18);
  char v19 = v49;
  long long v20 = v52;
  long long v21 = v53;
  long long v22 = v48;
  long long v23 = v50;
  long long v24 = v51;
  *(_OWORD *)a5 = v47;
  *(_OWORD *)(a5 + 16) = v22;
  *(unsigned char *)(a5 + 32) = v19;
  *(_OWORD *)(a5 + 40) = v23;
  *(_OWORD *)(a5 + 56) = v24;
  *(_OWORD *)(a5 + 72) = v20;
  *(_OWORD *)(a5 + 88) = v21;
  outlined copy of AccessibilitySliderValue?(v10, v34, v13, v12);
  outlined copy of AppIntentExecutor?(v6);
  outlined copy of AppIntentExecutor?(v7);
  return swift_retain();
}

void closure #2 in AccessibilityStepperModifier.init(_:value:)(uint64_t *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  if (!a2) {
    return;
  }
  uint64_t v29 = *a1;
  id v11 = a5;
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  uint64_t v15 = (void *)AccessibilityNumber.value.getter();
  objc_msgSend(v15, sel_doubleValue, v29);
  double v17 = v16;

  uint64_t v18 = (void *)AccessibilityBoundedNumber.value.getter();
  objc_msgSend(v18, sel_doubleValue, v12, a3, a4, a5);
  double v20 = v19;

  double v21 = v17 - v20;
  long long v22 = (void *)AccessibilityBoundedNumber.step.getter();
  if (v22)
  {
    long long v23 = v22;
    objc_msgSend(v22, sel_doubleValue, v12, a3, a4, a5);
    double v25 = v24;
  }
  else
  {
    double v25 = 1.0;
  }
  double v26 = fabs(round(v21 / v25));
  if ((~*(void *)&v26 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v26 >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    return;
  }
  if ((uint64_t)v26 >= 1)
  {
    uint64_t v27 = (uint64_t)v26 + 1;
    while (v21 <= 0.0)
    {
      uint64_t v28 = *(void (**)(void))(a6 + 24);
      if (v28) {
        goto LABEL_12;
      }
LABEL_13:
      if (--v27 <= 1) {
        goto LABEL_17;
      }
    }
    uint64_t v28 = *(void (**)(void))(a6 + 8);
    if (!v28) {
      goto LABEL_13;
    }
LABEL_12:
    v28();
    goto LABEL_13;
  }
LABEL_17:

  outlined consume of AccessibilitySliderValue?(a2, a3, a4, a5);
}

uint64_t AccessibilityStepperModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  id v12 = (char *)v23 - v11;
  char v13 = *((unsigned char *)v2 + 32);
  long long v14 = v2[1];
  long long v24 = *v2;
  long long v25 = v14;
  char v26 = v13;
  long long v27 = *(long long *)((char *)v2 + 40);
  long long v28 = *(long long *)((char *)v2 + 56);
  long long v29 = *(long long *)((char *)v2 + 72);
  long long v30 = *(long long *)((char *)v2 + 88);
  uint64_t v15 = *(void *)(a2 + 24);
  unint64_t v16 = lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  unint64_t v17 = lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  unint64_t v18 = lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue();
  v23[2] = v5;
  v23[3] = MEMORY[0x1E4F40E50];
  void v23[4] = v15;
  v23[5] = v16;
  v23[6] = v17;
  v23[7] = v18;
  uint64_t v19 = type metadata accessor for AccessibilityAdjustableModifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  v23[0] = v15;
  v23[1] = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(WitnessTable + 40))(a1, v19, WitnessTable);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  double v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v21)(v12, v6);
}

uint64_t AccessibilityDisclosureModifier.init(_:)()
{
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v1);
  swift_release();
  swift_release();
  return v1;
}

uint64_t AccessibilityDisclosureModifier.body(content:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v13 = (char *)v17 - v12;
  char v18 = a2;
  unint64_t v14 = lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  View.accessibilityValue<A>(_:description:)((uint64_t)&v18, 0, 0, 0, 0, a3, MEMORY[0x1E4F41078], a4, (uint64_t)v10, v14);
  v17[1] = a4;
  v17[2] = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v7);
}

uint64_t AccessibilityDisclosureModifier.List.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  int v28 = a3;
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v29 = a6;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)&v26 - v13;
  MEMORY[0x1F4188790](v15);
  unint64_t v17 = (char *)&v26 - v16;
  MEMORY[0x1F4188790](v18);
  double v20 = (char *)&v26 - v19;
  View.accessibilityCombinedElement(options:ignoredTraits:)(0, a4, a5, (uint64_t)v11);
  uint64_t v21 = unk_1ED45AA28;
  if ((unk_1ED45AA28 & ~qword_1ED45AA20) == 0) {
    uint64_t v21 = 0;
  }
  *(void *)&long long v32 = v21 | qword_1ED45AA20;
  ModifiedContent<>.accessibilityAddTraits(_:)(&v32, v8, (uint64_t)v14);
  long long v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v11, v8);
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a4;
  *(void *)(v23 + 24) = a5;
  uint64_t v24 = v27;
  *(void *)(v23 + 32) = v26;
  *(void *)(v23 + 40) = v24;
  *(unsigned char *)(v23 + 48) = v28;
  swift_retain();
  swift_retain();
  ModifiedContent<>.accessibilityAction(kind:_:)((uint64_t *)&v32, (uint64_t)partial apply for closure #1 in AccessibilityDisclosureModifier.List.body(content:), v23, v8);
  swift_release();
  outlined consume of AccessibilityActionKind.ActionKind(v32, *((uint64_t *)&v32 + 1), v33, *((unint64_t *)&v33 + 1));
  v22(v14, v8);
  uint64_t v30 = a5;
  uint64_t v31 = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v17);
  v22(v17, v8);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v22)(v20, v8);
}

uint64_t closure #1 in AccessibilityDisclosureModifier.List.body(content:)@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v3 = v2;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v5, v3);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  uint64_t result = swift_release();
  *a1 = 3;
  return result;
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityDisclosureModifier<A>.List@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return AccessibilityDisclosureModifier.List.body(content:)(*(void *)v2, *(void *)(v2 + 8), *(unsigned __int8 *)(v2 + 16), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityDisclosureModifier<A>(uint64_t a1, uint64_t a2)
{
  return AccessibilityDisclosureModifier.body(content:)(a1, *v2, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

void AccessibilityGaugeModifier.body(content:)()
{
  uint64_t v0 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v0);
  uint64_t v1 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v1);
  MEMORY[0x1F4188790](v2);
  MEMORY[0x1F4188790](v3);
  View.accessibilityIgnoreViewResponders()();
}

uint64_t sub_187A714B4()
{
  *(void *)(v9 - 112) = v8;
  *(void *)(v9 - 104) = &protocol witness table for IgnoreViewRespondersModifier;
  *(void *)(v9 - 184) = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  View.accessibilityCombinedElement(options:ignoredTraits:)(0, v4, WitnessTable, v5);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v4);
  *(void *)(v9 - 120) = v10;
  *(void *)(v9 - 136) = 0;
  *(unsigned char *)(v9 - 128) = 0;
  *(void *)(v9 - 152) = 0x3FF0000000000000;
  *(unsigned char *)(v9 - 144) = 0;
  ModifiedContent<>.accessibilityValue<A>(_:from:to:description:)(v9 - 120, v9 - 136, v9 - 152, 0, 0, 0, 0, v1, v3, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBB410]);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 8);
  v12(v5, v1);
  *(void *)(v9 - 168) = WitnessTable;
  *(void *)(v9 - 160) = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v3);
  v12(v3, v1);
  static ViewBuilder.buildExpression<A>(_:)(v2);
  return ((uint64_t (*)(uint64_t, uint64_t))v12)(v2, v1);
}

void protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityGaugeModifier<A>()
{
}

uint64_t AccessibilityGroupBoxLabelModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v26 = a4;
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v23 - v11;
  type metadata accessor for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1B0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RelationshipModifier);
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v24 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v23 - v17;
  View.accessibilityCombinedElement(options:ignoredTraits:)(0, a2, a3, (uint64_t)v9);
  v31[0] = 2;
  ModifiedContent<>.accessibilityAddTraits(_:)(v31, v6, (uint64_t)v12);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v9, v6);
  v31[0] = 0x786F4270756F7267;
  v31[1] = 0xE800000000000000;
  uint64_t v29 = a3;
  uint64_t v30 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.accessibilityLabeledPair<A>(role:id:in:)(0, (uint64_t)v31, v25, v6, MEMORY[0x1E4FBB1A0], WitnessTable);
  v19(v12, v6);
  uint64_t v27 = WitnessTable;
  int v28 = &protocol witness table for RelationshipModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v15);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v24 + 8);
  v21(v15, v13);
  static ViewBuilder.buildExpression<A>(_:)(v18);
  return ((uint64_t (*)(char *, uint64_t))v21)(v18, v13);
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityGroupBoxLabelModifier<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return AccessibilityGroupBoxLabelModifier.body(content:)(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t AccessibilityGroupBoxContentModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  v17[1] = a4;
  uint64_t v7 = MEMORY[0x1E4FBB1A0];
  type metadata accessor for AccessibilityLargeContentViewModifier<MenuStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1B0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RelationshipModifier);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v17 - v13;
  v18[0] = 0x786F4270756F7267;
  v18[1] = 0xE800000000000000;
  View.accessibilityLabeledPair<A>(role:id:in:)(1, (uint64_t)v18, a1, a2, v7, a3);
  v17[2] = a3;
  void v17[3] = &protocol witness table for RelationshipModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v9 + 8);
  v15(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v15)(v14, v8);
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityGroupBoxContentModifier<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return AccessibilityGroupBoxContentModifier.body(content:)(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t AccessibilityTraitsModifier.ChildModifier.updatedAttachment(for:nodes:atIndex:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v7[0] = Dictionary.init(minimumCapacity:)();
  }
  else
  {
    uint64_t v4 = *v3;
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v8 = Dictionary.init(minimumCapacity:)();
    type metadata accessor for LinkDestination.Configuration?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, MEMORY[0x1E4F41090]);
    v7[3] = v5;
    v7[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>();
    v7[0] = v4;
    v7[1] = 0;
    specialized Dictionary.subscript.setter((uint64_t)v7, MEMORY[0x1E4F40BA8]);
    v7[0] = v8;
  }
  static AccessibilityAttachment.properties(_:)();
  return swift_bridgeObjectRelease();
}

void AccessibilityLabelModifier.body(content:)(uint64_t a1@<X8>)
{
  v6[5] = a1;
  uint64_t v1 = type metadata accessor for ModifiedContent();
  v6[4] = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  v6[0] = type metadata accessor for AccessibilityLabelModifier.ChildModifier();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  _OWORD v6[2] = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  void v6[3] = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  MEMORY[0x1F4188790](v4);
  v6[1] = (char *)v6 - v5;
  View.accessibilityCaptureViewResponders()();
}

void sub_187A71E74()
{
  AccessibilityLabelModifier.ChildModifier.init()((uint64_t *)(v3 - 88));
  uint64_t v4 = *(void *)(v3 - 88);
  *(void *)(v3 - 112) = v2;
  *(void *)(v3 - 104) = &protocol witness table for CaptureViewRespondersModifier;
  *(void *)(v3 - 96) = v4;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v3 - 96, v0, *(void *)(v3 - 192), WitnessTable);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 160) + 8))(v1, v0);
  *(void *)(v3 - 128) = WitnessTable;
  *(void *)(v3 - 120) = &protocol witness table for AccessibilityLabelModifier<A>.ChildModifier;
  swift_getWitnessTable();
  View.accessibilityIgnoreViewResponders()();
}

uint64_t sub_187A71F34()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 176) + 8))(v4, v2);
  *(void *)(v5 - 144) = v1;
  *(void *)(v5 - 136) = &protocol witness table for IgnoreViewRespondersModifier;
  swift_getWitnessTable();
  uint64_t v6 = *(void *)(v5 - 184);
  static ViewBuilder.buildExpression<A>(_:)(v3);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 168) + 8);
  v7(v3, v0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(v6, v0);
}

uint64_t AccessibilityLabelModifier.ChildModifier.init()@<X0>(uint64_t *a1@<X8>)
{
  AccessibilityNullableOptionSet<>.init(adding:)();
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  uint64_t v5 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for LinkDestination.Configuration?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, MEMORY[0x1E4F41090]);
  v4[3] = v2;
  v4[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>();
  v4[0] = v6;
  v4[1] = v7;
  uint64_t result = specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E4F40BA8]);
  *a1 = v5;
  return result;
}

uint64_t AccessibilityLabelModifier.ChildModifier.updatedAttachment(for:nodes:atIndex:)()
{
  return static AccessibilityAttachment.properties(_:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityLabelModifier<A>.ChildModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

void protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityLabelModifier<A>(uint64_t a1@<X8>)
{
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityNavigationLinkButtonModifier<A>.Representable()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AccessibilityBadgedViewModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t result = View.accessibility()(a5, a6);
  if (a3 >> 1 != 0xFFFFFFFF)
  {
    v13[0] = a1;
    v13[1] = a2;
    v13[2] = a3;
    _OWORD v13[3] = a4;
    return closure #1 in AccessibilityBadgedViewModifier.body(content:)(v13, a7);
  }
  return result;
}

uint64_t closure #1 in AccessibilityBadgedViewModifier.body(content:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v19 = a2;
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v18 - v8;
  uint64_t v10 = *a1;
  uint64_t v11 = a1[2];
  if (v11 < 0)
  {
    uint64_t v13 = a1[1];
    a1 = (uint64_t *)(a1[2] & 1);
    outlined copy of Text.Storage(v10, v13, v11 & 1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v20 = *a1;
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v13 = v12;
    LOBYTE(a1) = 0;
  }
  uint64_t v14 = v6;
  uint64_t v15 = v6;
  uint64_t v16 = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v15, v19, v3);
  ModifiedContent<>.accessibilityValue(_:)(v10, v13, (char)a1, v3, (uint64_t)v9);
  outlined consume of Text.Storage(v10, v13, (char)a1);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v14, v3);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 40))(v16, v9, v3);
}

uint64_t AccessibilityBadgedViewModifier.Badge.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v20 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v20 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v20 - v16;
  View.accessibilityHidden(_:)(1, a2, a3);
  unsigned __int8 v21 = 19;
  ModifiedContent<>.accessibilityAddTraits(_:)(&v21, v5, (uint64_t)v11);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v18(v8, v5);
  unsigned __int8 v21 = 2;
  ModifiedContent<>.accessibilityIdentifier(_:placement:)(0x6567646162, 0xE500000000000000, (char *)&v21, v5, (uint64_t)v14);
  v18(v11, v5);
  v20[1] = a3;
  void v20[2] = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  v18(v14, v5);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v18)(v17, v5);
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityBadgedViewModifier<A>.Badge(uint64_t a1, uint64_t a2)
{
  return AccessibilityBadgedViewModifier.Badge.body(content:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilityBadgedViewModifier<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return AccessibilityBadgedViewModifier.body(content:)(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t AccessibilityListCoreCellModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v21 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v20 - v6;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v20 - v13;
  outlined init with copy of AccessibilityScrollableContext((uint64_t)(v2 + 8), (uint64_t)v27);
  uint64_t v15 = *(void *)(a1 + 24);
  MEMORY[0x18C113660](v27, v4, &type metadata for AccessibilityScrollableContextModifier, v15);
  outlined destroy of AccessibilityScrollableContextModifier((uint64_t)v27);
  uint64_t v16 = 4;
  if (!*v2) {
    uint64_t v16 = 0;
  }
  v27[0] = v16;
  uint64_t v25 = v15;
  uint64_t v26 = &protocol witness table for AccessibilityScrollableContextModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.accessibilityAddTraits(_:)(v27, v5, WitnessTable);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  uint64_t v23 = WitnessTable;
  uint64_t v24 = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v18)(v14, v8);
}

uint64_t AccessibilityTableCellModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  v19[1] = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v19 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v19 - v14;
  uint64_t v16 = *(void *)(a1 + 24);
  View.accessibilityCombinedElement(options:ignoredTraits:)(0, v5, v16, (uint64_t)v9);
  ModifiedContent<>.accessibilityTableContext(_:)(v3, v6, (uint64_t)v12);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, v6);
  v19[2] = v16;
  void v19[3] = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  v17(v12, v6);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v6);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance AccessibilityBadgedViewProvidesOwnValue()
{
  lazy protocol witness table accessor for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance AccessibilityBadgedViewProvidesOwnValue()
{
  return PropertyList.subscript.setter();
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance AccessibilityBadgedViewNeedsValue()
{
  lazy protocol witness table accessor for type AccessibilityBadgedViewProvidesOwnValue and conformance AccessibilityBadgedViewProvidesOwnValue();
  PropertyList.subscript.getter();
  return (v1 & 1) == 0;
}

uint64_t partial apply for closure #1 in AccessibilityToggleModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in AccessibilityToggleModifier.body(content:)(a1, *(long long **)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_187A72FC4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));

    swift_release();
  }

  return swift_deallocObject();
}

void *partial apply for closure #1 in ToggleStyleConfiguration.accessibilityActions.getter@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in ToggleStyleConfiguration.accessibilityActions.getter((void *)(v1 + 16), a1);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out AccessibilityActionResult)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed () -> (@out AccessibilityActionResult)(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_187A73048()
{
  if (*(void *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler;
  if (!lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler;
  if (!lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler;
  if (!lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler);
  }
  return result;
}

uint64_t sub_187A73138()
{
  if (*(void *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

  swift_release();
  if (*(void *)(v0 + 120) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 96), *(void *)(v0 + 104), *(unsigned char *)(v0 + 112));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 152))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 128), *(void *)(v0 + 136), *(unsigned char *)(v0 + 144));
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t _sSNy10Foundation4DateVGSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for LinkDestination.Configuration?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t partial apply for closure #1 in AccessibilityNavigationLinkButtonModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in AccessibilityNavigationLinkButtonModifier.body(content:)(v1[4], v1[5], v1[2], v1[3], a1);
}

uint64_t partial apply for closure #2 in AccessibilityNavigationLinkButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in AccessibilityNavigationLinkButtonModifier.body(content:)(a1, v2[4], v2[5], v2[2], v2[3], a2);
}

unint64_t lazy protocol witness table accessor for type AccessibilityStepperValue and conformance AccessibilityStepperValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue;
  if (!lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityStepperValue and conformance AccessibilityStepperValue);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityAdjustableModifier()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityButtonModifier.Representable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in AccessibilityButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in AccessibilityButtonModifier.body(content:)(a1, *(uint64_t **)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), 0, a2);
}

uint64_t partial apply for closure #2 in AccessibilityButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in AccessibilityButtonModifier.body(content:)(a1, v2[4], v2[2], v2[3], a2);
}

uint64_t partial apply for closure #1 in closure #2 in AccessibilityButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #2 in AccessibilityButtonModifier.body(content:)(a1, *(uint64_t **)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t partial apply for closure #2 in closure #2 in AccessibilityButtonModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in AccessibilityButtonModifier.body(content:)(a1, *(uint64_t **)(v2 + 32), *(void *)(v2 + 16), *(void *)(v2 + 24), 1, a2);
}

uint64_t type metadata accessor for AccessibilityButtonModifier.Attachment()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187A73414()
{
  swift_release();
  if (*(void *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));

    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityButtonModifier.Attachment.accessibilityActions.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 48))();
  *a1 = 2;
  return result;
}

void *outlined retain of AccessibilityButtonModifier<A>(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)a1[5];
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for LinkDestination.Configuration?(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, MEMORY[0x1E4F41090]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t sub_187A73598()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
  }
  swift_release();
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
  if (*(void *)(v0 + 72)) {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in AccessibilityStepperModifier.init(_:value:)(uint64_t *a1)
{
  closure #2 in AccessibilityStepperModifier.init(_:value:)(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)(v1 + 6));
}

uint64_t type metadata accessor for AccessibilityAdjustableModifier.Configuration()
{
  return swift_getGenericMetadata();
}

uint64_t _sSNy10Foundation4DateVGWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title);
    lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, (uint64_t)&type metadata for LabelStyleConfiguration.Title);
    lazy protocol witness table accessor for type AccessibilityRepresentableStyleModifier and conformance AccessibilityRepresentableStyleModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in AccessibilityAdjustableModifier.body(content:)@<X0>(char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessibilityAdjustableModifier() - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in AccessibilityAdjustableModifier.body(content:)(a1, v6, a2);
}

uint64_t partial apply for closure #2 in AccessibilityAdjustableModifier.body(content:)(void (*a1)(char *, uint64_t))
{
  return closure #2 in AccessibilityAdjustableModifier.body(content:)(a1, v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t objectdestroy_46Tm()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(type metadata accessor for AccessibilityAdjustableModifier() - 8);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v4 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v1);
  }
  uint64_t v5 = type metadata accessor for AccessibilityAdjustableModifier.Configuration();
  if (*(void *)(v3 + *(int *)(v5 + 72))) {
    swift_release();
  }
  if (*(void *)(v3 + *(int *)(v5 + 76))) {
    swift_release();
  }
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in AccessibilityAdjustableModifier.body(content:)(uint64_t *a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = *(void *)(type metadata accessor for AccessibilityAdjustableModifier() - 8);
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v9 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return closure #1 in closure #2 in AccessibilityAdjustableModifier.body(content:)(a1, v10, v3, v4, v5, v6, v7, v8);
}

void *outlined retain of SliderStyleConfiguration(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  uint64_t v3 = (void *)a1[10];
  uint64_t v4 = (void *)a1[11];
  uint64_t v5 = (void *)a1[12];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v2, v3, v4, v5);
  return a1;
}

void *outlined release of SliderStyleConfiguration(void *a1)
{
  uint64_t v2 = (void *)a1[9];
  uint64_t v3 = (void *)a1[10];
  uint64_t v4 = (void *)a1[11];
  uint64_t v5 = (void *)a1[12];
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of AccessibilitySliderValue?(v2, v3, v4, v5);
  return a1;
}

uint64_t type metadata accessor for AccessibilityGroupBoxLabelModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityGroupBoxContentModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityDisclosureModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AccessibilityAdjustableModifier.Configuration()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeWithCopy for AccessibilityAdjustableModifier.Configuration(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
    uint64_t v11 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  unint64_t v13 = (unint64_t)&a2[v12];
  *((unsigned char *)a1 + v12) = a2[v12];
  unint64_t v14 = ((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = (_OWORD *)(v14 + 8);
  unint64_t v16 = v13 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  if (*(void *)v17 < 0xFFFFFFFFuLL)
  {
    *uint64_t v15 = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v18 = *(void *)(v17 + 8);
    *(void *)uint64_t v15 = *(void *)v17;
    *(void *)(v14 + 16) = v18;
    swift_retain();
  }
  unint64_t v19 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v20 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
  }
  else
  {
    uint64_t v21 = *(void *)(v20 + 8);
    *(void *)unint64_t v19 = *(void *)v20;
    *(void *)(v19 + 8) = v21;
    swift_retain();
  }
  uint64_t v22 = (void *)((v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (void *)((v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = (void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for AccessibilityAdjustableModifier.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 24))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  unint64_t v14 = (unint64_t)&a1[v13];
  unint64_t v15 = (unint64_t)&a2[v13];
  *(unsigned char *)unint64_t v14 = *(unsigned char *)v15;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (unint64_t *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (unint64_t *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v19 = *v20;
  if (*v17 < 0xFFFFFFFF)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v22 = v20[1];
      *unint64_t v17 = v19;
      *(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 16) = v22;
      swift_retain();
      goto LABEL_22;
    }
  }
  else
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v21 = v20[1];
      *unint64_t v17 = v19;
      *(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 16) = v21;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v17 = *(_OWORD *)v20;
LABEL_22:
  uint64_t v23 = (void *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (unint64_t *)((v18 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = *v24;
  if (*v23 < 0xFFFFFFFFuLL)
  {
    if (v25 >= 0xFFFFFFFF)
    {
      unint64_t v27 = v24[1];
      *uint64_t v23 = v25;
      v23[1] = v27;
      swift_retain();
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    goto LABEL_29;
  }
  if (v25 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_28;
  }
  unint64_t v26 = v24[1];
  *uint64_t v23 = v25;
  v23[1] = v26;
  swift_retain();
  swift_release();
LABEL_29:
  int v28 = (void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v30 = v29[1];
  *int v28 = *v29;
  v28[1] = v30;
  swift_retain();
  swift_release();
  uint64_t v31 = (void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v32 = (void *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = v32[1];
  *uint64_t v31 = *v32;
  v31[1] = v33;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for AccessibilityAdjustableModifier.Configuration(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7) {
      size_t v9 = v8;
    }
    else {
      size_t v9 = v8 + 1;
    }
    memcpy(a1, a2, v9);
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
    size_t v11 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v10 = v6 + 56;
    v11(a1, 0, 1, v5);
    int v7 = *(_DWORD *)(v10 + 28);
    size_t v8 = *(void *)(v10 + 8);
  }
  if (v7) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v8 + 1;
  }
  unint64_t v13 = (unint64_t)&a2[v12];
  *((unsigned char *)a1 + v12) = a2[v12];
  unint64_t v14 = ((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (_OWORD *)(v14 + 8);
  unint64_t v16 = v13 & 0xFFFFFFFFFFFFFFF8;
  v13 &= 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = *(void *)(v13 + 8);
  unint64_t v17 = (char *)(v13 + 8);
  unint64_t v18 = v19;
  if (v19 < 0xFFFFFFFF)
  {
    *unint64_t v15 = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v20 = *((void *)v17 + 1);
    *(void *)unint64_t v15 = v18;
    *(void *)(v14 + 16) = v20;
  }
  unint64_t v21 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v22 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
  }
  else
  {
    uint64_t v23 = *(void *)(v22 + 8);
    *(void *)unint64_t v21 = *(void *)v22;
    *(void *)(v21 + 8) = v23;
  }
  uint64_t v24 = (_OWORD *)((v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = (_OWORD *)((v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v24 = *v25;
  *(_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

char *assignWithTake for AccessibilityAdjustableModifier.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 40))(a1, a2, v5);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(a1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v12 = v11;
  }
  else {
    size_t v12 = v11 + 1;
  }
  memcpy(a1, a2, v12);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = *(void *)(v6 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v6 + 64) + 1;
  }
  unint64_t v14 = (unint64_t)&a1[v13];
  unint64_t v15 = (unint64_t)&a2[v13];
  *(unsigned char *)unint64_t v14 = *(unsigned char *)v15;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (unint64_t *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = (unint64_t *)((v15 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v19 = *v20;
  if (*v17 < 0xFFFFFFFF)
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v22 = v20[1];
      *unint64_t v17 = v19;
      v17[1] = v22;
      goto LABEL_22;
    }
  }
  else
  {
    if (v19 >= 0xFFFFFFFF)
    {
      unint64_t v21 = v20[1];
      *unint64_t v17 = v19;
      v17[1] = v21;
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v17 = *(_OWORD *)v20;
LABEL_22:
  uint64_t v23 = (void *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (unint64_t *)((v18 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v25 = *v24;
  if (*v23 < 0xFFFFFFFFuLL)
  {
    if (v25 >= 0xFFFFFFFF)
    {
      unint64_t v27 = v24[1];
      *uint64_t v23 = v25;
      v23[1] = v27;
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
    goto LABEL_29;
  }
  if (v25 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_28;
  }
  unint64_t v26 = v24[1];
  *uint64_t v23 = v25;
  v23[1] = v26;
  swift_release();
LABEL_29:
  int v28 = (_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  *int v28 = *v29;
  swift_release();
  *(_OWORD *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityAdjustableModifier.Configuration(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = (((((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187A74874);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_27:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v19 = *(void *)(((((((unint64_t)a1 + v8) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
    if (v19 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    return (v19 + 1);
  }
  else
  {
    unsigned int v18 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for AccessibilityAdjustableModifier.Configuration(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  size_t v11 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = (((((((v11 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v10 < a3)
  {
    unsigned int v13 = a3 - v10;
    if ((((((((v11 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v6 = v15;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if ((((((((v11 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v16 = a2 - v10;
    }
    else {
      int v16 = 1;
    }
    if ((((((((v11 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v17 = ~v10 + a2;
      bzero(a1, v12);
      *(_DWORD *)a1 = v17;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v16;
        return;
      case 3:
        goto LABEL_58;
      case 4:
        *(_DWORD *)&a1[v12] = v16;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x187A74B30);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v9 < 0x7FFFFFFF)
        {
          unint64_t v21 = (void *)((((((unint64_t)&a1[v11] & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            *unint64_t v21 = a2 ^ 0x80000000;
            v21[1] = 0;
          }
          else
          {
            *unint64_t v21 = a2 - 1;
          }
        }
        else if (v9 >= a2)
        {
          unint64_t v22 = *(void (**)(void))(v7 + 56);
          v22();
        }
        else
        {
          if (v11 <= 3) {
            int v18 = ~(-1 << (8 * v11));
          }
          else {
            int v18 = -1;
          }
          if (v11)
          {
            int v19 = v18 & (~v9 + a2);
            if (v11 <= 3) {
              int v20 = v11;
            }
            else {
              int v20 = 4;
            }
            bzero(a1, v11);
            switch(v20)
            {
              case 2:
                *(_WORD *)a1 = v19;
                break;
              case 3:
                *(_WORD *)a1 = v19;
                a1[2] = BYTE2(v19);
                break;
              case 4:
                *(_DWORD *)a1 = v19;
                break;
              default:
                *a1 = v19;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t destroy for AccessibilityTableCellModifier(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 40)) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for AccessibilityTableCellModifier(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v3;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityTableCellModifier(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    if (!*((unsigned char *)a2 + 40)) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  if (*((unsigned __int8 *)a2 + 40) != 255)
  {
    if ((long long *)a1 == a2) {
      return a1;
    }
    outlined destroy of AccessibilityTableContext(a1);
    if (!*((unsigned char *)a2 + 40))
    {
LABEL_8:
      uint64_t v8 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v8 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
      return a1;
    }
LABEL_5:
    long long v6 = *a2;
    long long v7 = a2[1];
    *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
    *(_OWORD *)a1 = v6;
    *(_OWORD *)(a1 + 16) = v7;
    return a1;
  }
  outlined destroy of AccessibilityTableContext(a1);
  long long v4 = *(long long *)((char *)a2 + 25);
  long long v5 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 25) = v4;
  return a1;
}

uint64_t assignWithTake for AccessibilityTableCellModifier(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 40) == 255) {
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a2 + 40) == 255 || a1 != a2)
  {
    outlined destroy of AccessibilityTableContext(a1);
LABEL_7:
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityTableCellModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 <= 4) {
    int v4 = -1;
  }
  else {
    int v4 = (v3 ^ 0xFF) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityTableCellModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)uint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = ~(_BYTE)a2;
    }
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityTableCellModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for AccessibilityListCoreCellModifier(uint64_t a1, char *a2)
{
  char v5 = *a2;
  int v4 = a2 + 8;
  *(unsigned char *)a1 = v5;
  uint64_t v6 = a1 + 8;
  int v7 = a2[78];
  if (v7 == 2)
  {
    long long v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v6, (uint64_t)v4);
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
  }
  else if (v7 == 1)
  {
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(void *)(a1 + 16) = *((void *)a2 + 2);
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v9;
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(v6, (uint64_t)v4);
    *(unsigned char *)(a1 + 48) = a2[48];
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    *(_WORD *)(a1 + 76) = *((_WORD *)a2 + 38);
  }
  *(unsigned char *)(a1 + 78) = v7;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityListCoreCellModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = a1 + 8;
  if (a1 != a2)
  {
    uint64_t v5 = a2 + 8;
    outlined destroy of AccessibilityScrollableContext(a1 + 8);
    int v6 = *(unsigned __int8 *)(a2 + 78);
    if (v6 == 2)
    {
      uint64_t v7 = *(void *)(a2 + 32);
      *(void *)(a1 + 32) = v7;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(v3, v5);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
    }
    else if (v6 == 1)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 32);
      *(void *)(a1 + 32) = v8;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(v3, v5);
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      int v9 = *(_DWORD *)(a2 + 72);
      *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
      *(_DWORD *)(a1 + 72) = v9;
    }
    *(unsigned char *)(a1 + 78) = v6;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithTake for AccessibilityListCoreCellModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 71) = *(void *)(a2 + 71);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityListCoreCellModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[79]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityListCoreCellModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 78) = 0;
    *(_WORD *)(result + 76) = 0;
    *(_DWORD *)(result + 72) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 79) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 79) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityButtonModifier.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  int v5 = *(void **)(a2 + 40);
  swift_retain();
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    char v8 = *(unsigned char *)(a2 + 32);
    outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = v8;
    uint64_t v9 = *(void *)(a2 + 48);
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    id v11 = v5;
    swift_retain();
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t assignWithCopy for AccessibilityButtonModifier.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  int v5 = (_OWORD *)(a1 + 16);
  uint64_t v6 = (_OWORD *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      char v10 = *(unsigned char *)(a2 + 32);
      outlined copy of Environment<AppIntentExecutor?>.Content(v8, v9, v10);
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      char v13 = *(unsigned char *)(a1 + 32);
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v9;
      *(unsigned char *)(a1 + 32) = v10;
      outlined consume of Environment<AppIntentExecutor?>.Content(v11, v12, v13);
      unsigned int v14 = *(void **)(a2 + 40);
      int v15 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = v14;
      id v16 = v14;

      uint64_t v17 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v17;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of AppIntentAction(a1 + 16);
      long long v25 = *(_OWORD *)(a2 + 32);
      long long v24 = *(_OWORD *)(a2 + 48);
      *int v5 = *v6;
      *(_OWORD *)(a1 + 32) = v25;
      *(_OWORD *)(a1 + 48) = v24;
    }
  }
  else if (v7)
  {
    uint64_t v18 = *(void *)(a2 + 16);
    uint64_t v19 = *(void *)(a2 + 24);
    char v20 = *(unsigned char *)(a2 + 32);
    outlined copy of Environment<AppIntentExecutor?>.Content(v18, v19, v20);
    *(void *)(a1 + 16) = v18;
    *(void *)(a1 + 24) = v19;
    *(unsigned char *)(a1 + 32) = v20;
    unint64_t v21 = *(void **)(a2 + 40);
    *(void *)(a1 + 40) = v21;
    uint64_t v22 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v22;
    id v23 = v21;
    swift_retain();
  }
  else
  {
    long long v26 = *v6;
    long long v27 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v27;
    *int v5 = v26;
  }
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for AccessibilityButtonModifier.Attachment(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void **)(a1 + 40);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 40);
  if (!v5)
  {
    outlined destroy of AppIntentAction(a1 + 16);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    goto LABEL_6;
  }
  char v6 = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(void *)(a1 + 40) = v5;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
LABEL_6:
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessibilityNavigationLinkButtonModifier.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AccessibilityNavigationLinkButtonModifier.Attachment(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for AccessibilityNavigationLinkButtonModifier.Attachment(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityNavigationLinkButtonModifier.Attachment(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityNavigationLinkButtonModifier.Attachment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityToggleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityToggleModifier.RepresentationModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 48 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v11 + 24) < 0xFFFFFFFFuLL)
    {
      long long v18 = *(_OWORD *)v11;
      long long v19 = *(_OWORD *)(v11 + 32);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 16);
      *(_OWORD *)(v10 + 32) = v19;
      *(_OWORD *)unint64_t v10 = v18;
      return v4;
    }
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    char v14 = *(unsigned char *)(v11 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v11, v13, v14);
    *(void *)unint64_t v10 = v12;
    *(void *)(v10 + 8) = v13;
    *(unsigned char *)(v10 + 16) = v14;
    int v15 = *(void **)(v11 + 24);
    *(void *)(v10 + 24) = v15;
    uint64_t v16 = *(void *)(v11 + 40);
    *(void *)(v10 + 32) = *(void *)(v11 + 32);
    *(void *)(v10 + 40) = v16;
    id v17 = v15;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for AccessibilityToggleModifier.RepresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v8 + 24);
  if (*(void *)(v7 + 24) < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      uint64_t v20 = *(void *)v8;
      uint64_t v21 = *(void *)(v8 + 8);
      char v22 = *(unsigned char *)(v8 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v8, v21, v22);
      *(void *)unint64_t v7 = v20;
      *(void *)(v7 + 8) = v21;
      *(unsigned char *)(v7 + 16) = v22;
      id v23 = *(void **)(v8 + 24);
      *(void *)(v7 + 24) = v23;
      uint64_t v24 = *(void *)(v8 + 40);
      *(void *)(v7 + 32) = *(void *)(v8 + 32);
      *(void *)(v7 + 40) = v24;
      id v25 = v23;
      swift_retain();
      return a1;
    }
LABEL_7:
    long long v26 = *(_OWORD *)v8;
    long long v27 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 32) = v27;
    *(_OWORD *)unint64_t v7 = v26;
    return a1;
  }
  if (v9 < 0xFFFFFFFF)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));

    swift_release();
    goto LABEL_7;
  }
  uint64_t v10 = *(void *)v8;
  uint64_t v11 = *(void *)(v8 + 8);
  char v12 = *(unsigned char *)(v8 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v8, v11, v12);
  uint64_t v13 = *(void *)v7;
  uint64_t v14 = *(void *)(v7 + 8);
  char v15 = *(unsigned char *)(v7 + 16);
  *(void *)unint64_t v7 = v10;
  *(void *)(v7 + 8) = v11;
  *(unsigned char *)(v7 + 16) = v12;
  outlined consume of Environment<AppIntentExecutor?>.Content(v13, v14, v15);
  uint64_t v16 = *(void **)(v8 + 24);
  id v17 = *(void **)(v7 + 24);
  *(void *)(v7 + 24) = v16;
  id v18 = v16;

  uint64_t v19 = *(void *)(v8 + 40);
  *(void *)(v7 + 32) = *(void *)(v8 + 32);
  *(void *)(v7 + 40) = v19;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AccessibilityToggleModifier.RepresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = v8[1];
  long long v9 = v8[2];
  *unint64_t v7 = *v8;
  v7[1] = v10;
  v7[2] = v9;
  return a1;
}

uint64_t assignWithTake for AccessibilityToggleModifier.RepresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v7 + 24) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)(v8 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));

    swift_release();
LABEL_5:
    long long v14 = *(_OWORD *)v8;
    long long v15 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
    *(_OWORD *)(v7 + 32) = v15;
    *(_OWORD *)unint64_t v7 = v14;
    return a1;
  }
  char v9 = *(unsigned char *)(v8 + 16);
  uint64_t v10 = *(void *)v7;
  uint64_t v11 = *(void *)(v7 + 8);
  char v12 = *(unsigned char *)(v7 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = v9;
  outlined consume of Environment<AppIntentExecutor?>.Content(v10, v11, v12);
  uint64_t v13 = *(void **)(v7 + 24);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);

  *(_OWORD *)(v7 + 32) = *(_OWORD *)(v8 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityToggleModifier.RepresentationModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187A75B24);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for AccessibilityToggleModifier.RepresentationModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 48;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFD0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFD0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFD0)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 48);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return result;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return result;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return result;
      default:
        return result;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187A75D2CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if (a2 > 0x7FFFFFFE)
          {
            double result = 0.0;
            *(_OWORD *)(v19 + 16) = 0u;
            *(_OWORD *)(v19 + 32) = 0u;
            *(_OWORD *)unint64_t v19 = 0u;
            *(_DWORD *)unint64_t v19 = a2 - 0x7FFFFFFF;
          }
          else
          {
            *(void *)(v19 + 24) = a2;
          }
        }
        else
        {
          id v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return result;
  }
}

uint64_t type metadata accessor for AccessibilityButtonModifier()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for AccessibilityBadgedViewNeedsValue()
{
  return &type metadata for AccessibilityBadgedViewNeedsValue;
}

uint64_t type metadata accessor for AccessibilityNavigationLinkButtonModifier.Configuration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AccessibilityAdjustableModifier()
{
  uint64_t result = type metadata accessor for AccessibilityAdjustableModifier.Configuration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityAdjustableModifier.Configuration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  int v8 = *(_DWORD *)(v6 + 80);
  if ((v8 & 0x1000F8) != 0
    || (((((((v7 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v10 + ((unsigned __int16)((v8 & 0xF8) + 23) & (unsigned __int16)~(v8 & 0xF8) & 0x1F8));
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(v4, a2, v7);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(v4, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    }
    unint64_t v11 = (unint64_t)a2 + v7;
    *((unsigned char *)v4 + v7) = *((unsigned char *)a2 + v7);
    unint64_t v12 = ((unint64_t)v4 + v7) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v13 = (_OWORD *)(v12 + 8);
    unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFF8;
    v11 &= 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = *(void *)(v11 + 8);
    int v15 = (char *)(v11 + 8);
    unint64_t v16 = v17;
    if (v17 < 0xFFFFFFFF)
    {
      *unsigned int v13 = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v18 = *((void *)v15 + 1);
      *(void *)unsigned int v13 = v16;
      *(void *)(v12 + 16) = v18;
      swift_retain();
    }
    unint64_t v19 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v14 + 31) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v20 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
    }
    else
    {
      uint64_t v21 = *(void *)(v20 + 8);
      *(void *)unint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = v21;
      swift_retain();
    }
    char v22 = (void *)((v19 + 23) & 0xFFFFFFFFFFFFFFF8);
    id v23 = (void *)((v20 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = v23[1];
    *char v22 = *v23;
    v22[1] = v24;
    id v25 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
    long long v26 = (void *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = v26[1];
    *id v25 = *v26;
    v25[1] = v27;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AccessibilityAdjustableModifier.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3)) {
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  }
  uint64_t v5 = *(void *)(v4 + 64) + a1;
  if (!*(_DWORD *)(v4 + 84)) {
    ++v5;
  }
  unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  if (*(void *)((v6 + 31) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  swift_release();

  return swift_release();
}

uint64_t getEnumTagSinglePayload for AccessibilityAdjustableModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v5) {
    ++v8;
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = (((((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v10 = a2 - v7;
    uint64_t v11 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v12 = 2;
    }
    else {
      unsigned int v12 = v10 + 1;
    }
    if (v12 >= 0x10000) {
      unsigned int v13 = 4;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v12 < 0x100) {
      unsigned int v13 = 1;
    }
    if (v12 >= 2) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    switch(v14)
    {
      case 1:
        int v15 = *((unsigned __int8 *)a1 + v9);
        if (!v15) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v15 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v15) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187A76318);
      case 4:
        int v15 = *(_DWORD *)((char *)a1 + v9);
        if (!v15) {
          break;
        }
LABEL_27:
        int v17 = v15 - 1;
        if (v11)
        {
          int v17 = 0;
          LODWORD(v11) = *a1;
        }
        return v7 + (v11 | v17) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v19 = *(void *)(((((((unint64_t)a1 + v8) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
    if (v19 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    return (v19 + 1);
  }
  else
  {
    unsigned int v18 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v18 >= 2) {
      return v18 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for AccessibilityAdjustableModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  size_t v11 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  if (!v8) {
    ++v11;
  }
  size_t v12 = (((((((v11 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v10 < a3)
  {
    unsigned int v13 = a3 - v10;
    if ((((((((v11 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v6 = v15;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if ((((((((v11 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v16 = a2 - v10;
    }
    else {
      int v16 = 1;
    }
    if ((((((((v11 & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v17 = ~v10 + a2;
      bzero(a1, v12);
      *(_DWORD *)a1 = v17;
    }
    switch(v6)
    {
      case 1:
        a1[v12] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v16;
        return;
      case 3:
        goto LABEL_58;
      case 4:
        *(_DWORD *)&a1[v12] = v16;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_58:
      __break(1u);
      JUMPOUT(0x187A765D4);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v9 < 0x7FFFFFFF)
        {
          uint64_t v21 = (void *)((((((unint64_t)&a1[v11] & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            *uint64_t v21 = a2 ^ 0x80000000;
            v21[1] = 0;
          }
          else
          {
            *uint64_t v21 = a2 - 1;
          }
        }
        else if (v9 >= a2)
        {
          char v22 = *(void (**)(void))(v7 + 56);
          v22();
        }
        else
        {
          if (v11 <= 3) {
            int v18 = ~(-1 << (8 * v11));
          }
          else {
            int v18 = -1;
          }
          if (v11)
          {
            int v19 = v18 & (~v9 + a2);
            if (v11 <= 3) {
              int v20 = v11;
            }
            else {
              int v20 = 4;
            }
            bzero(a1, v11);
            switch(v20)
            {
              case 2:
                *(_WORD *)a1 = v19;
                break;
              case 3:
                *(_WORD *)a1 = v19;
                a1[2] = BYTE2(v19);
                break;
              case 4:
                *(_DWORD *)a1 = v19;
                break;
              default:
                *a1 = v19;
                break;
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_187A7660C(void *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyADyADyADyADyAA01_c9Modifier_E0VyAA033AccessibilityNavigationLinkButtonF0V13Representable33_0D3243EDC3DD4D641848661DCC354D4BLLVyx_GGAA0g10AttachmentF0VGAA015DisableDeferredgrF033_0820208E6CE9DACCA3E182CEE5DB708ALLVGAA011_BackgroundF0VyADyADyADyADyADyAA09PrimitiveJ18StyleConfigurationV5LabelVAA016DetachedGeometryF0ARLLVGAA0gk5StyleF033_AAF5C5EDB558810623EAFD84FD4E7390LLVGAA06EnabletgrF0ARLLVGAA07_HiddenF0VGAA020_PreferenceTransformF0VyAA0gR0VAAE3KeyVGGGGAOGAA06DetachtgrF0ARLLVGA7_GAaBHPA25_AaBHPA22_AaBHPA21_AaBHPAtaBHPApaBHPAmaBHPyHC_AoA0cF0HPyHCHC_AsAA27_HPyHCHC_A20_AAA27_HPyHCHC_AoAA27_HPyHCHC_A24_AAA27_HPyHCHC_A7_AAA27_HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for AccessibilityNavigationLinkButtonModifier.Representable);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityButtonModifier<A>.Representable()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in AccessibilityToggleModifier<A>.RepresentationModifier<A1>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187A766C0()
{
  long long v5 = *(_OWORD *)(v0 + 24);
  unint64_t v1 = (int *)(type metadata accessor for AccessibilityToggleModifier.RepresentationModifier() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  (*(void (**)(unint64_t))(*(void *)(v5 - 8) + 8))(v0 + v2);
  unint64_t v3 = v0 + v2 + v1[15];
  if (*(void *)(v3 + 24))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v3, *(void *)(v3 + 8), *(unsigned char *)(v3 + 16));

    swift_release();
  }
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityToggleModifier.RepresentationModifier.body(content:)(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = (void *)v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for AccessibilityToggleModifier.RepresentationModifier() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #1 in AccessibilityToggleModifier.RepresentationModifier.body(content:)(a1, v8, v3, v4, v5, v6);
}

uint64_t sub_187A7688C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187A768C4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityDefaultActionRepresentableConfiguration.body(content:)(uint64_t a1)
{
  return closure #1 in AccessibilityDefaultActionRepresentableConfiguration.body(content:)(a1, (_OWORD *)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t objectdestroy_111Tm()
{
  swift_release();
  if (*(void *)(v0 + 72))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));

    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AccessibilityDefaultActionRepresentableConfiguration.body(content:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  *a1 = 2;
  return result;
}

uint64_t sub_187A769F4()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityDisclosureModifier.List.body(content:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in AccessibilityDisclosureModifier.List.body(content:)(a1);
}

ValueMetadata *type metadata accessor for AccessibilityBadgedViewProvidesOwnValue()
{
  return &type metadata for AccessibilityBadgedViewProvidesOwnValue;
}

uint64_t type metadata accessor for AccessibilityGaugeModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for AccessibilityButtonModifier.Attachment(uint64_t a1)
{
  uint64_t result = swift_release();
  uint64_t v3 = *(void **)(a1 + 40);
  if (v3)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));

    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityDefaultActionRepresentableConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void **)(a2 + 40);
  swift_retain();
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a2 + 24);
    char v8 = *(unsigned char *)(a2 + 32);
    outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
    *(void *)(a1 + 16) = v6;
    *(void *)(a1 + 24) = v7;
    *(unsigned char *)(a1 + 32) = v8;
    uint64_t v9 = *(void *)(a2 + 48);
    uint64_t v10 = *(void *)(a2 + 56);
    *(void *)(a1 + 40) = v5;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    id v11 = v5;
    swift_retain();
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityDefaultActionRepresentableConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = (_OWORD *)(a1 + 16);
  uint64_t v6 = (_OWORD *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      char v10 = *(unsigned char *)(a2 + 32);
      outlined copy of Environment<AppIntentExecutor?>.Content(v8, v9, v10);
      uint64_t v11 = *(void *)(a1 + 16);
      uint64_t v12 = *(void *)(a1 + 24);
      char v13 = *(unsigned char *)(a1 + 32);
      *(void *)(a1 + 16) = v8;
      *(void *)(a1 + 24) = v9;
      *(unsigned char *)(a1 + 32) = v10;
      outlined consume of Environment<AppIntentExecutor?>.Content(v11, v12, v13);
      unsigned int v14 = *(void **)(a2 + 40);
      int v15 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = v14;
      id v16 = v14;

      uint64_t v17 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v17;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of AppIntentAction(a1 + 16);
      long long v26 = *(_OWORD *)(a2 + 32);
      long long v25 = *(_OWORD *)(a2 + 48);
      *uint64_t v5 = *v6;
      *(_OWORD *)(a1 + 32) = v26;
      *(_OWORD *)(a1 + 48) = v25;
    }
  }
  else if (v7)
  {
    uint64_t v18 = *(void *)(a2 + 16);
    uint64_t v19 = *(void *)(a2 + 24);
    char v20 = *(unsigned char *)(a2 + 32);
    outlined copy of Environment<AppIntentExecutor?>.Content(v18, v19, v20);
    *(void *)(a1 + 16) = v18;
    *(void *)(a1 + 24) = v19;
    *(unsigned char *)(a1 + 32) = v20;
    uint64_t v21 = *(void **)(a2 + 40);
    *(void *)(a1 + 40) = v21;
    uint64_t v22 = *(void *)(a2 + 48);
    uint64_t v23 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v22;
    *(void *)(a1 + 56) = v23;
    id v24 = v21;
    swift_retain();
  }
  else
  {
    long long v27 = *v6;
    long long v28 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v28;
    *uint64_t v5 = v27;
  }
  return a1;
}

uint64_t assignWithTake for AccessibilityDefaultActionRepresentableConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void **)(a1 + 40);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 40);
  if (!v5)
  {
    outlined destroy of AppIntentAction(a1 + 16);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v10;
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    return a1;
  }
  char v6 = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  *(void *)(a1 + 40) = v5;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for AccessibilityButtonModifier.Configuration()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for AccessibilityDisclosureModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187A76E34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityDisclosureModifier.Configuration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187A76E74()
{
  return swift_getWitnessTable();
}

uint64_t sub_187A771A0(void *a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyADyADyADyADyAA01_c9Modifier_E0VyAA033AccessibilityNavigationLinkButtonF0V13Representable33_0D3243EDC3DD4D641848661DCC354D4BLLVyx_GGAA0g10AttachmentF0VGAA015DisableDeferredgrF033_0820208E6CE9DACCA3E182CEE5DB708ALLVGAA011_BackgroundF0VyADyADyADyADyADyAA09PrimitiveJ18StyleConfigurationV5LabelVAA016DetachedGeometryF0ARLLVGAA0gk5StyleF033_AAF5C5EDB558810623EAFD84FD4E7390LLVGAA06EnabletgrF0ARLLVGAA07_HiddenF0VGAA020_PreferenceTransformF0VyAA0gR0VAAE3KeyVGGGGAOGAA06DetachtgrF0ARLLVGA7_GAaBHPA25_AaBHPA22_AaBHPA21_AaBHPAtaBHPApaBHPAmaBHPyHC_AoA0cF0HPyHCHC_AsAA27_HPyHCHC_A20_AAA27_HPyHCHC_AoAA27_HPyHCHC_A24_AAA27_HPyHCHC_A7_AAA27_HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for AccessibilityButtonModifier.Representable);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyADyADyADyADyADyAA01_c9Modifier_E0VyAA033AccessibilityNavigationLinkButtonF0V13Representable33_0D3243EDC3DD4D641848661DCC354D4BLLVyx_GGAA0g10AttachmentF0VGAA015DisableDeferredgrF033_0820208E6CE9DACCA3E182CEE5DB708ALLVGAA011_BackgroundF0VyADyADyADyADyADyAA09PrimitiveJ18StyleConfigurationV5LabelVAA016DetachedGeometryF0ARLLVGAA0gk5StyleF033_AAF5C5EDB558810623EAFD84FD4E7390LLVGAA06EnabletgrF0ARLLVGAA07_HiddenF0VGAA020_PreferenceTransformF0VyAA0gR0VAAE3KeyVGGGGAOGAA06DetachtgrF0ARLLVGA7_GAaBHPA25_AaBHPA22_AaBHPA21_AaBHPAtaBHPApaBHPAmaBHPyHC_AoA0cF0HPyHCHC_AsAA27_HPyHCHC_A20_AAA27_HPyHCHC_AoAA27_HPyHCHC_A24_AAA27_HPyHCHC_A7_AAA27_HPyHCHCTm(void *a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in AccessibilityBadgedViewProvidesOwnValue()
{
  return &protocol witness table for AccessibilityBadgedViewProvidesOwnValue;
}

void type metadata completion function for AccessibilityPlaybackButtonModifier.Configuration()
{
  type metadata accessor for PlaybackButton.State(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for LinkDestination.Configuration?(319, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityPlaybackButtonModifier.Configuration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      uint64_t v9 = type metadata accessor for PlaybackButton.State(0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
    uint64_t v11 = *(int *)(a3 + 36);
    uint64_t v12 = *(int *)(a3 + 40);
    char v13 = (char *)a1 + v11;
    unsigned int v14 = (char *)a2 + v11;
    *(_OWORD *)char v13 = *(_OWORD *)v14;
    v13[16] = v14[16];
    int v15 = (char *)a1 + v12;
    id v16 = (char *)a2 + v12;
    type metadata accessor for ClosedRange<Date>();
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v17))
    {
      type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
      memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
      v21(v15, v16, v7);
      v21(&v15[*(int *)(v18 + 36)], &v16[*(int *)(v18 + 36)], v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
    }
  }
  return a1;
}

void type metadata accessor for LinkDestination.Configuration?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t destroy for AccessibilityPlaybackButtonModifier.Configuration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 2, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v4);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 40);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v7 = v6;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v10(v5, v4);
    uint64_t v9 = v5 + *(int *)(v7 + 36);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v4);
  }
  return result;
}

char *initializeWithCopy for AccessibilityPlaybackButtonModifier.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    uint64_t v8 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  v11[16] = v12[16];
  char v13 = &a1[v10];
  unsigned int v14 = &a2[v10];
  type metadata accessor for ClosedRange<Date>();
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
  {
    type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v19(v13, v14, v6);
    v19(&v13[*(int *)(v16 + 36)], &v14[*(int *)(v16 + 36)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  }
  return a1;
}

char *assignWithCopy for AccessibilityPlaybackButtonModifier.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 36);
  char v13 = &a1[v12];
  unsigned int v14 = &a2[v12];
  long long v15 = *(_OWORD *)v14;
  v13[16] = v14[16];
  *(_OWORD *)char v13 = v15;
  uint64_t v16 = *(int *)(a3 + 40);
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  type metadata accessor for ClosedRange<Date>();
  uint64_t v20 = v19;
  uint64_t v21 = *(void *)(v19 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  int v23 = v22(v17, 1, v19);
  int v24 = v22(v18, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      long long v28 = *(void (**)(char *, char *, uint64_t))(v7 + 24);
      v28(v17, v18, v6);
      v28(&v17[*(int *)(v20 + 36)], &v18[*(int *)(v20 + 36)], v6);
      return a1;
    }
    outlined destroy of LinkDestination((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
    memcpy(v17, v18, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  long long v25 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
  v25(v17, v18, v6);
  v25(&v17[*(int *)(v20 + 36)], &v18[*(int *)(v20 + 36)], v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v17, 0, 1, v20);
  return a1;
}

uint64_t outlined destroy of LinkDestination(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

char *initializeWithTake for AccessibilityPlaybackButtonModifier.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    uint64_t v8 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = &a1[v9];
  uint64_t v12 = &a2[v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  v11[16] = v12[16];
  char v13 = &a1[v10];
  unsigned int v14 = &a2[v10];
  type metadata accessor for ClosedRange<Date>();
  uint64_t v16 = v15;
  uint64_t v17 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
  {
    type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v19(v13, v14, v6);
    v19(&v13[*(int *)(v16 + 36)], &v14[*(int *)(v16 + 36)], v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v13, 0, 1, v16);
  }
  return a1;
}

char *assignWithTake for AccessibilityPlaybackButtonModifier.Configuration(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = *(int *)(a3 + 40);
  unsigned int v14 = &a1[v12];
  uint64_t v15 = &a2[v12];
  *(_OWORD *)unsigned int v14 = *(_OWORD *)v15;
  v14[16] = v15[16];
  uint64_t v16 = &a1[v13];
  uint64_t v17 = &a2[v13];
  type metadata accessor for ClosedRange<Date>();
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)(v18 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v16, 1, v18);
  int v23 = v21(v17, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      long long v27 = *(void (**)(char *, char *, uint64_t))(v7 + 40);
      v27(v16, v17, v6);
      v27(&v16[*(int *)(v19 + 36)], &v17[*(int *)(v19 + 36)], v6);
      return a1;
    }
    outlined destroy of LinkDestination((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
    memcpy(v16, v17, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  int v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v24(v16, v17, v6);
  v24(&v16[*(int *)(v19 + 36)], &v17[*(int *)(v19 + 36)], v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityPlaybackButtonModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187A78614);
}

uint64_t sub_187A78614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PlaybackButton.State(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 250)
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36) + 16) <= 5u) {
      int v10 = 5;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36) + 16);
    }
    unsigned int v11 = v10 - 5;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 36) + 16) >= 3u) {
      return v11;
    }
    else {
      return 0;
    }
  }
  else
  {
    type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 40);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityPlaybackButtonModifier.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187A7878C);
}

uint64_t sub_187A7878C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PlaybackButton.State(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 250)
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 36) + 16) = a2 + 5;
  }
  else
  {
    type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 40);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for AccessibilityPlaybackButtonModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for AccessibilityLinkModifier(a1, a2, a3, (uint64_t (*)(uint64_t, void, void))type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration);
}

uint64_t type metadata completion function for AccessibilityLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void))
{
  uint64_t result = a4(319, *(void *)(a1 + 16), *(void *)(a1 + 24));
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityPlaybackButtonModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      uint64_t v9 = type metadata accessor for PlaybackButton.State(0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
    uint64_t v11 = *(int *)(v6 + 36);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    unsigned char v12[16] = v13[16];
    uint64_t v14 = *(int *)(v6 + 40);
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    type metadata accessor for ClosedRange<Date>();
    uint64_t v18 = v17;
    uint64_t v19 = *(void *)(v17 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v17))
    {
      type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
      memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
      v21(v15, v16, v7);
      v21(&v15[*(int *)(v18 + 36)], &v16[*(int *)(v18 + 36)], v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
    }
  }
  return a1;
}

uint64_t destroy for AccessibilityPlaybackButtonModifier(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 2, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v2);
  }
  uint64_t v3 = a1 + *(int *)(type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration() + 40);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4);
  if (!result)
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v8(v3, v2);
    uint64_t v7 = v3 + *(int *)(v5 + 36);
    return ((uint64_t (*)(uint64_t, uint64_t))v8)(v7, v2);
  }
  return result;
}

char *initializeWithCopy for AccessibilityPlaybackButtonModifier(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 2, v4))
  {
    uint64_t v6 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
  }
  uint64_t v7 = type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration();
  uint64_t v8 = *(int *)(v7 + 36);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  v9[16] = v10[16];
  uint64_t v11 = *(int *)(v7 + 40);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  type metadata accessor for ClosedRange<Date>();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14))
  {
    type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v18(v12, v13, v4);
    v18(&v12[*(int *)(v15 + 36)], &v13[*(int *)(v15 + 36)], v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  }
  return a1;
}

char *assignWithCopy for AccessibilityPlaybackButtonModifier(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 2, v4);
  int v8 = v6(a2, 2, v4);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 16))(a1, a2, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, v4);
LABEL_6:
    uint64_t v9 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 24))(a1, a2, v4);
LABEL_7:
  uint64_t v10 = type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration();
  uint64_t v11 = *(int *)(v10 + 36);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  char v14 = v13[16];
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  unsigned char v12[16] = v14;
  uint64_t v15 = *(int *)(v10 + 40);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  type metadata accessor for ClosedRange<Date>();
  uint64_t v19 = v18;
  uint64_t v20 = *(void *)(v18 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v16, 1, v18);
  int v23 = v21(v17, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      long long v27 = *(void (**)(char *, char *, uint64_t))(v5 + 24);
      v27(v16, v17, v4);
      v27(&v16[*(int *)(v19 + 36)], &v17[*(int *)(v19 + 36)], v4);
      return a1;
    }
    outlined destroy of LinkDestination((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
    memcpy(v16, v17, *(void *)(*(void *)(v25 - 8) + 64));
    return a1;
  }
  int v24 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v24(v16, v17, v4);
  v24(&v16[*(int *)(v19 + 36)], &v17[*(int *)(v19 + 36)], v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v16, 0, 1, v19);
  return a1;
}

char *initializeWithTake for AccessibilityPlaybackButtonModifier(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(a2, 2, v4))
  {
    uint64_t v6 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
  }
  uint64_t v7 = type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration();
  uint64_t v8 = *(int *)(v7 + 36);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  v9[16] = v10[16];
  uint64_t v11 = *(int *)(v7 + 40);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  type metadata accessor for ClosedRange<Date>();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v14))
  {
    type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
    v18(v12, v13, v4);
    v18(&v12[*(int *)(v15 + 36)], &v13[*(int *)(v15 + 36)], v4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
  }
  return a1;
}

char *assignWithTake for AccessibilityPlaybackButtonModifier(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 2, v4);
  int v8 = v6(a2, 2, v4);
  if (v7)
  {
    if (!v8)
    {
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(a1, a2, v4);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 2, v4);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(a1, v4);
LABEL_6:
    uint64_t v9 = type metadata accessor for PlaybackButton.State(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 40))(a1, a2, v4);
LABEL_7:
  uint64_t v10 = type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration();
  uint64_t v11 = *(int *)(v10 + 36);
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  unsigned char v12[16] = v13[16];
  uint64_t v14 = *(int *)(v10 + 40);
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  type metadata accessor for ClosedRange<Date>();
  uint64_t v18 = v17;
  uint64_t v19 = *(void *)(v17 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v15, 1, v17);
  int v22 = v20(v16, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v5 + 40);
      v26(v15, v16, v4);
      v26(&v15[*(int *)(v18 + 36)], &v16[*(int *)(v18 + 36)], v4);
      return a1;
    }
    outlined destroy of LinkDestination((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v24 - 8) + 64));
    return a1;
  }
  int v23 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
  v23(v15, v16, v4);
  v23(&v15[*(int *)(v18 + 36)], &v16[*(int *)(v18 + 36)], v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityPlaybackButtonModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187A79958);
}

uint64_t sub_187A79958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_1(a1, a2, a3, (uint64_t (*)(void, void, void))type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration);
}

uint64_t __swift_get_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void))
{
  uint64_t v6 = a4(0, *(void *)(a3 + 16), *(void *)(a3 + 24));
  int v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for AccessibilityPlaybackButtonModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187A799F8);
}

uint64_t sub_187A799F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_1(a1, a2, a3, a4, (uint64_t (*)(void, void, void))type metadata accessor for AccessibilityPlaybackButtonModifier.Configuration);
}

uint64_t __swift_store_extra_inhabitant_indexTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, void, void))
{
  uint64_t v7 = a5(0, *(void *)(a4 + 16), *(void *)(a4 + 24));
  int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t type metadata accessor for AccessibilityPlaybackButtonModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityDisclosureModifier.List()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityDisclosureModifier.List.Configuration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityGaugeModifier.Configuration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of ClosedRange<Date>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LinkDestination.Configuration?(0, &lazy cache variable for type metadata for ClosedRange<Date>?, (uint64_t (*)(uint64_t))type metadata accessor for ClosedRange<Date>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of LinkDestination.Configuration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for AccessibilityBadgedViewModifier.Badge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for AccessibilityPlaybackButtonModifier.ValueStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 251);
  }
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 16);
  }
  unsigned int v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 16) >= 3u) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityPlaybackButtonModifier.ValueStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)uint64_t result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 5;
    }
  }
  return result;
}

uint64_t getEnumTag for AccessibilityPlaybackButtonModifier.ValueStyle(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    int v1 = 3;
  }
  else {
    int v1 = *(unsigned __int8 *)(a1 + 16);
  }
  unsigned int v2 = v1 - 3;
  if (*(unsigned __int8 *)(a1 + 16) >= 3u) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for AccessibilityPlaybackButtonModifier.ValueStyle(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
  }
  else if (a2)
  {
    *(unsigned char *)(result + 16) = a2 + 3;
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityPlaybackButtonModifier.ValueStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityBadgedViewModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t *destroy for AccessibilityBadgedViewModifier(uint64_t *result)
{
  unint64_t v1 = result[2];
  if (v1 >> 1 != 0xFFFFFFFF) {
    return (uint64_t *)outlined consume of BadgeLabel(*result, result[1], v1);
  }
  return result;
}

uint64_t initializeWithCopy for AccessibilityBadgedViewModifier(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = a2[2];
  if (v3 >> 1 == 0xFFFFFFFF)
  {
    long long v4 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
  }
  else
  {
    uint64_t v5 = *a2;
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[3];
    outlined copy of BadgeLabel(*a2, v6, v3);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v3;
    *(void *)(a1 + 24) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityBadgedViewModifier(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a2[2];
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 16) >> 1 == 0xFFFFFFFFLL)
  {
    if (v5 == 0x1FFFFFFFELL)
    {
      long long v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
    }
    else
    {
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      uint64_t v10 = a2[3];
      outlined copy of BadgeLabel(*a2, v9, v4);
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v9;
      *(void *)(a1 + 16) = v4;
      *(void *)(a1 + 24) = v10;
    }
  }
  else if (v5 == 0x1FFFFFFFELL)
  {
    outlined destroy of BadgeLabel(a1);
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  else
  {
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    uint64_t v13 = a2[3];
    outlined copy of BadgeLabel(*a2, v12, v4);
    uint64_t v14 = *(void *)a1;
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = *(void *)(a1 + 16);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v13;
    outlined consume of BadgeLabel(v14, v15, v16);
  }
  return a1;
}

uint64_t *assignWithTake for AccessibilityBadgedViewModifier(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[2];
  if (v4 >> 1 != 0xFFFFFFFF)
  {
    unint64_t v5 = *(void *)(a2 + 16);
    if (v5 >> 1 != 0xFFFFFFFF)
    {
      uint64_t v7 = *(void *)(a2 + 24);
      uint64_t v8 = *a1;
      uint64_t v9 = a1[1];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v5;
      a1[3] = v7;
      outlined consume of BadgeLabel(v8, v9, v4);
      return a1;
    }
    outlined destroy of BadgeLabel((uint64_t)a1);
  }
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityBadgedViewModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *(void *)(a1 + 16) >> 1;
  int v4 = -2 - v3;
  if (-2 - (int)v3 < 0) {
    int v4 = -1;
  }
  if (v3 <= 0x80000000) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityBadgedViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 2 * ~a2;
      *(void *)(result + 24) = 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for AccessibilityBadgedViewModifier.Configuration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t HoverResponder.updatePhase(_:)(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v5 = result;
  uint64_t v7 = *(void *)(v3 + 216);
  uint64_t v6 = *(void *)(v3 + 224);
  char v8 = *(unsigned char *)(v3 + 232);
  if (v8)
  {
    if (((a3 ^ *(unsigned __int8 *)(v3 + 464)) & 1) == 0) {
      return result;
    }
    goto LABEL_12;
  }
  if (a3)
  {
    if (*(unsigned char *)(v3 + 464)) {
      return result;
    }
    goto LABEL_12;
  }
  if ((*(unsigned char *)(v3 + 464) & 1) != 0
    || (*(double *)(v3 + 448) == *(double *)&result ? (BOOL v9 = *(double *)(v3 + 456) == *(double *)&a2) : (BOOL v9 = 0), !v9))
  {
LABEL_12:
    *(double *)(v3 + 448) = *(double *)&result;
    *(double *)(v3 + 456) = *(double *)&a2;
    char v10 = a3 & 1;
    *(unsigned char *)(v3 + 464) = a3 & 1;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v7;
    *(void *)(v11 + 24) = v6;
    *(unsigned char *)(v11 + 32) = v8;
    *(void *)(v11 + 40) = v5;
    *(double *)(v11 + 48) = *(double *)&a2;
    *(unsigned char *)(v11 + 56) = v10;
    outlined copy of HoverCallback();
    outlined copy of HoverCallback();
    static Update.enqueueAction(_:)();
    swift_release();
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined consume of HoverCallback());
  }
  return result;
}

uint64_t HoverResponder.__allocating_init(inputs:)()
{
  return HoverResponder.init(inputs:)();
}

uint64_t _HoverRegionModifier.callback.getter(uint64_t a1)
{
  return a1;
}

uint64_t implicit closure #1 in static _HoverRegionModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

void protocol witness for static Rule.initialValue.getter in conformance _HoverRegionModifier.Callback(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = -1;
}

uint64_t protocol witness for Rule.value.getter in conformance _HoverRegionModifier.Callback@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = 1;

  return swift_retain();
}

uint64_t closure #1 in _HoverRegionModifier.HoverBehavior.value.getter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PlatformItemList.Item();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v18 - v11;
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)&v18 - v11);
  swift_bridgeObjectRelease();
  uint64_t v13 = *((void *)v12 + 63);
  uint64_t v14 = *((void *)v12 + 64);
  swift_retain();
  outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?(v13, v14);
  *((void *)v12 + 63) = a2;
  *((void *)v12 + 64) = a3;
  outlined init with copy of PlatformItemList.Item((uint64_t)v12, (uint64_t)v9);
  _sSay7SwiftUI13ViewResponderCGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18834BB80;
  outlined init with take of PlatformItemList.Item((uint64_t)v9, v16 + v15);
  *a1 = v16;
  return outlined destroy of PlatformItemList.Item((uint64_t)v12);
}

uint64_t protocol witness for Rule.value.getter in conformance _HoverRegionModifier.HoverBehavior@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for closure #1 in _HoverRegionModifier.HoverBehavior.value.getter;
  *(void *)(v6 + 24) = v5;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))v6;

  return swift_retain();
}

void protocol witness for ViewModifier.body(content:) in conformance _HoverRegionModifier()
{
}

Swift::Void __swiftcall HoverResponderChild.updateValue()()
{
  unint64_t v1 = v0;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v4 = v3;
  uint64_t v41 = Value[1];
  uint64_t v42 = *Value;
  uint64_t v5 = (uint64_t *)AGGraphGetValue();
  char v7 = v6;
  uint64_t v8 = *v5;
  uint64_t v9 = v5[1];
  uint64_t v10 = v5[2];
  uint64_t v11 = v5[3];
  uint64_t v12 = v5[4];
  uint64_t v13 = (uint64_t *)AGGraphGetValue();
  uint64_t v15 = *v13;
  uint64_t v16 = v13[1];
  uint64_t v17 = v13[2];
  uint64_t v18 = v13[3];
  if ((v4 & 1) != 0
    || (v7 & 1) != 0
    || (v14 & 1) != 0
    || (_sSay7SwiftUI13ViewResponderCGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]), !AGGraphGetOutputValue()))
  {
    uint64_t v43 = v8;
    *(void *)&long long v44 = v9;
    *((void *)&v44 + 1) = v10;
    *(void *)&long long v45 = v11;
    *((void *)&v45 + 1) = v12;
    *(void *)&long long v47 = v42;
    *((void *)&v47 + 1) = v41;
    uint64_t v19 = swift_retain_n();
    *(double *)&unint64_t v20 = MEMORY[0x18C10C240](v19);
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v21, v20));
    uint64_t v22 = *v1;
    *(void *)&long long v47 = v15;
    *((void *)&v47 + 1) = v16;
    *(void *)&long long v48 = v17;
    *((void *)&v48 + 1) = v18;
    v22 += 240;
    *(double *)(v22 + 40) = MEMORY[0x18C114450]();
    *(void *)(v22 + 48) = v23;
    *(void *)uint64_t v22 = v43;
    *(_OWORD *)(v22 + 8) = v44;
    *(_OWORD *)(v22 + 24) = v45;
    swift_release();
  }
  else
  {
    swift_retain();
  }
  uint64_t v24 = AGGraphGetValue();
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *(void *)(v24 + 8);
  char v27 = *(unsigned char *)(v24 + 16);
  if ((v28 & 1) != 0
    || (_sSay7SwiftUI13ViewResponderCGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]), !AGGraphGetOutputValue()))
  {
    uint64_t v29 = *v1;
    *(void *)(v29 + 216) = v26;
    *(void *)(v29 + 224) = v25;
    *(unsigned char *)(v29 + 232) = v27;
    outlined copy of HoverCallback();
    outlined copy of HoverCallback();
    outlined consume of HoverCallback();
  }
  else
  {
    outlined copy of HoverCallback();
  }
  uint64_t v30 = *v1;
  outlined init with copy of HoverResponderChild.CoordinateSpaceStorage((uint64_t)(v1 + 1), (uint64_t)&v43);
  if (v46)
  {
    uint64_t v31 = AGGraphGetValue();
    outlined init with copy of CoordinateSpace(v31, (uint64_t)&v47);
  }
  else
  {
    outlined init with take of CoordinateSpace((uint64_t)&v43, (uint64_t)&v47);
  }
  swift_beginAccess();
  outlined assign with take of CoordinateSpace((uint64_t)&v47, v30 + 296);
  swift_endAccess();
  static Semantics.v5.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    uint64_t v32 = *v1;
    outlined init with copy of HoverResponderChild((uint64_t)v1, (uint64_t)&v43);
    char v33 = *(unsigned char *)AGGraphGetValue();
    outlined destroy of HoverResponderChild((uint64_t)&v43);
    *(unsigned char *)(v32 + 465) = v33;
  }
  uint64_t v34 = *v1;
  double v35 = (long long *)AGGraphGetValue();
  long long v36 = v35[1];
  long long v47 = *v35;
  long long v48 = v36;
  AGGraphGetValue();
  uint64_t v37 = AGGraphGetValue();
  uint64_t v43 = *(void *)v37;
  long long v38 = *(_OWORD *)(v37 + 24);
  long long v44 = *(_OWORD *)(v37 + 8);
  long long v45 = v38;
  swift_beginAccess();
  type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
  swift_retain();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  _sSay7SwiftUI13ViewResponderCGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  AGGraphGetValue();
  if (v39)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  if (AGGraphGetOutputValue())
  {
    swift_release();
    outlined consume of HoverCallback();
  }
  else
  {
    type metadata accessor for _GraphValue<PointerHoverEffectModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v40 = swift_allocObject();
    *(_OWORD *)(v40 + 16) = xmmword_188351940;
    *(void *)(v40 + 32) = v34;
    uint64_t v43 = v40;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    outlined consume of HoverCallback();
    swift_bridgeObjectRelease();
    swift_release();
  }
}

uint64_t closure #1 in static HoverResponderChild.willRemove(attribute:)(uint64_t result)
{
  if ((*(unsigned char *)(result + 464) & 1) == 0)
  {
    char v1 = *(unsigned char *)(result + 232);
    uint64_t v3 = *(void *)(result + 216);
    uint64_t v2 = *(void *)(result + 224);
    *(void *)(result + 448) = 0;
    *(void *)(result + 456) = 0;
    *(unsigned char *)(result + 464) = 1;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = v3;
    *(void *)(v4 + 24) = v2;
    *(unsigned char *)(v4 + 32) = v1;
    *(void *)(v4 + 40) = 0;
    *(void *)(v4 + 48) = 0;
    *(unsigned char *)(v4 + 56) = 1;
    outlined copy of HoverCallback();
    outlined copy of HoverCallback();
    static Update.enqueueAction(_:)();
    swift_release();
    return outlined consume of HoverCallback();
  }
  return result;
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance HoverResponderChild()
{
  return swift_release_n();
}

uint64_t closure #1 in HoverResponder.updatePhase(_:)(void (*a1)(BOOL), uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v7 = a6 & 1;
  if (a3)
  {
    swift_retain();
    a1(v7 == 0);
  }
  else
  {
    swift_retain();
    ((void (*)(uint64_t, uint64_t, uint64_t))a1)(a4, a5, v7);
  }

  return outlined consume of HoverCallback();
}

uint64_t HoverResponder.containsGlobalPoints(_:cacheKey:options:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  void (*v10)(void *__return_ptr, uint64_t, unint64_t, uint64_t *);
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t result;
  void v16[2];
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;

  if (*(unsigned char *)(v4 + 465) == 1)
  {
    unsigned int v6 = a2;
    uint64_t v8 = HIDWORD(a2) & 1;
    uint64_t v9 = *a3;
    MultiViewResponder.children.getter();
    swift_beginAccess();
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
    LOBYTE(v18) = v8;
    ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t v17 = v9;
    type metadata accessor for DefaultLayoutViewResponder();
    uint64_t v10 = (void (*)(void *__return_ptr, uint64_t, unint64_t, uint64_t *))method lookup function for ViewResponder();
    LOBYTE(v16[0]) = v8;
    v10(v16, a1, v6 | ((unint64_t)v8 << 32), &v17);
    uint64_t v11 = v16[0];
    uint64_t v12 = *(double *)&v16[1];
    swift_bridgeObjectRelease();
    uint64_t v13 = v19;
    if (v19 <= v12) {
      uint64_t v13 = v12;
    }
    char v14 = v18 | v11;
    uint64_t result = v20;
  }
  else
  {
    uint64_t result = MultiViewResponder.children.getter();
    char v14 = 0;
    uint64_t v13 = 0.0;
  }
  *(void *)a4 = v14;
  *(double *)(a4 + 8) = v13;
  *(void *)(a4 + 16) = result;
  return result;
}

uint64_t HoverResponder.__ivar_destroyer()
{
  outlined consume of HoverCallback();
  swift_release();
  outlined destroy of CoordinateSpace(v0 + 296);
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t HoverResponder.__deallocating_deinit()
{
  uint64_t v0 = DefaultLayoutViewResponder.deinit();
  outlined consume of HoverCallback();
  swift_release();
  outlined destroy of CoordinateSpace(v0 + 296);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void vtable thunk for DefaultLayoutViewResponder.__allocating_init(inputs:viewSubgraph:) dispatching to HoverResponder.__allocating_init(inputs:viewSubgraph:)()
{
}

uint64_t sub_187A7AE94()
{
  return swift_retain();
}

uint64_t partial apply for implicit closure #1 in static _HoverRegionModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static _HoverRegionModifier._makeView(modifier:inputs:body:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in _HoverRegionModifier()
{
  return &protocol witness table for _HoverRegionModifier;
}

uint64_t ObjC metadata update function for HoverResponder()
{
  return type metadata accessor for HoverResponder();
}

uint64_t sub_187A7AED0()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for HoverResponderChild(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = (_OWORD *)(a1 + 8);
  swift_retain();
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of HoverResponderChild.CoordinateSpaceStorage(a1 + 8);
    if (*(unsigned char *)(a2 + 49))
    {
      long long v6 = *v4;
      long long v7 = v4[1];
      *(_OWORD *)(a1 + 34) = *(long long *)((char *)v4 + 26);
      *uint64_t v5 = v6;
      *(_OWORD *)(a1 + 24) = v7;
    }
    else if (*(unsigned char *)(a2 + 48))
    {
      long long v8 = *v4;
      long long v9 = v4[1];
      *(_OWORD *)(a1 + 33) = *(long long *)((char *)v4 + 25);
      *uint64_t v5 = v8;
      *(_OWORD *)(a1 + 24) = v9;
      *(unsigned char *)(a1 + 49) = 0;
    }
    else
    {
      uint64_t v10 = *(void *)(a2 + 32);
      *(void *)(a1 + 32) = v10;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(uint64_t, long long *))(v10 - 8))(a1 + 8, v4);
      *(_WORD *)(a1 + 48) = 0;
    }
  }
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

uint64_t outlined destroy of HoverResponderChild.CoordinateSpaceStorage(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy76_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for HoverResponderChild(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  if (a1 != a2)
  {
    outlined destroy of HoverResponderChild.CoordinateSpaceStorage(a1 + 8);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 34) = *(_OWORD *)(a2 + 34);
  }
  *(_OWORD *)(a1 + 52) = *(_OWORD *)(a2 + 52);
  *(void *)(a1 + 68) = *(void *)(a2 + 68);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverResponderChild(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 76)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverResponderChild(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 76) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 76) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HoverResponderChild()
{
  return &type metadata for HoverResponderChild;
}

uint64_t destroy for HoverResponderChild.CoordinateSpaceStorage(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 41);
  if (v1 >= 2)
  {
    if (*(_DWORD *)a1 == -1) {
      return a1;
    }
  }
  else if (v1 == 1)
  {
    return a1;
  }
  unsigned int v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)a1 + 2;
  }
  if (!v2) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for HoverResponderChild.CoordinateSpaceStorage(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 41);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    char v4 = 1;
  }
  else
  {
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      char v4 = 0;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 40) = 1;
    }
    else if (v5)
    {
      char v4 = 0;
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v6;
      (**(void (***)(uint64_t))(v6 - 8))(a1);
      char v4 = 0;
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  *(unsigned char *)(a1 + 41) = v4;
  return a1;
}

uint64_t assignWithCopy for HoverResponderChild.CoordinateSpaceStorage(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 != 1)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 2) {
        unsigned int v5 = *(_DWORD *)a1 + 2;
      }
      if (!v5) {
        __swift_destroy_boxed_opaque_existential_1(a1);
      }
    }
    unsigned int v6 = *((unsigned __int8 *)a2 + 41);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a2 + 2;
    }
    if (v6 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      char v7 = 1;
    }
    else
    {
      unsigned int v8 = *((unsigned __int8 *)a2 + 40);
      if (v8 >= 2) {
        unsigned int v8 = *(_DWORD *)a2 + 2;
      }
      if (v8 == 1)
      {
        char v7 = 0;
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 40) = 1;
      }
      else if (v8)
      {
        char v7 = 0;
        long long v10 = *a2;
        long long v11 = a2[1];
        *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
        *(_OWORD *)a1 = v10;
        *(_OWORD *)(a1 + 16) = v11;
      }
      else
      {
        uint64_t v9 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v9;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v9 - 8))(a1, a2);
        char v7 = 0;
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
    *(unsigned char *)(a1 + 41) = v7;
  }
  return a1;
}

uint64_t assignWithTake for HoverResponderChild.CoordinateSpaceStorage(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 41);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 != 1)
    {
      unsigned int v5 = *(unsigned __int8 *)(a1 + 40);
      if (v5 >= 2) {
        unsigned int v5 = *(_DWORD *)a1 + 2;
      }
      if (!v5) {
        __swift_destroy_boxed_opaque_existential_1(a1);
      }
    }
    unsigned int v6 = *(unsigned __int8 *)(a2 + 41);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a2 + 2;
    }
    if (v6 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      LOBYTE(v7) = 1;
    }
    else
    {
      unsigned int v7 = *(unsigned __int8 *)(a2 + 40);
      if (v7 >= 2) {
        unsigned int v7 = *(_DWORD *)a2 + 2;
      }
      if (v7 == 1)
      {
        LOBYTE(v7) = 0;
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 40) = 1;
      }
      else if (v7)
      {
        LOBYTE(v7) = 0;
        long long v9 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v9;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      }
      else
      {
        long long v8 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v8;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
      }
    }
    *(unsigned char *)(a1 + 41) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverResponderChild.CoordinateSpaceStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 42)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 41);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HoverResponderChild.CoordinateSpaceStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 42) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 41) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for HoverResponderChild.CoordinateSpaceStorage(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 41);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for HoverResponderChild.CoordinateSpaceStorage(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 41) = a2;
  return result;
}

void *type metadata accessor for HoverResponderChild.CoordinateSpaceStorage()
{
  return &unk_1ED42C220;
}

ValueMetadata *type metadata accessor for _HoverRegionModifier.Callback()
{
  return &type metadata for _HoverRegionModifier.Callback;
}

uint64_t outlined init with copy of HoverResponderChild.CoordinateSpaceStorage(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for ContentResponderHelper<TrivialContentResponder>()
{
  if (!lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>)
  {
    unint64_t v0 = type metadata accessor for ContentResponderHelper();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>);
    }
  }
}

uint64_t outlined init with copy of HoverResponderChild(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in static HoverResponderChild.willRemove(attribute:)()
{
  return closure #1 in static HoverResponderChild.willRemove(attribute:)(v0);
}

unint64_t lazy protocol witness table accessor for type _HoverRegionModifier.HoverBehavior and conformance _HoverRegionModifier.HoverBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type _HoverRegionModifier.HoverBehavior and conformance _HoverRegionModifier.HoverBehavior;
  if (!lazy protocol witness table cache variable for type _HoverRegionModifier.HoverBehavior and conformance _HoverRegionModifier.HoverBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _HoverRegionModifier.HoverBehavior and conformance _HoverRegionModifier.HoverBehavior);
  }
  return result;
}

uint64_t partial apply for closure #1 in _HoverRegionModifier.HoverBehavior.value.getter(uint64_t *a1)
{
  return closure #1 in _HoverRegionModifier.HoverBehavior.value.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_187A7B750()
{
  swift_release();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for _HoverRegionModifier.HoverBehavior()
{
  return &type metadata for _HoverRegionModifier.HoverBehavior;
}

uint64_t View.accessibilityRoleDescription(_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3 & 1;
  v7[3] = a4;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B18], (uint64_t)v7, 1, a5, MEMORY[0x1E4F40B18], a6);
}

uint64_t View.accessibilityRoleDescription(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  v15[0] = v8;
  v15[1] = v9;
  v15[2] = v11 & 1;
  _OWORD v15[3] = v13;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B18], (uint64_t)v15, 1, a5, MEMORY[0x1E4F40B18], a6);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

{
  void v7[4];

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B18], (uint64_t)v7, 1, a5, MEMORY[0x1E4F40B18], a6);
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void v16[4];

  uint64_t v8 = a2;
  if (a2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
    uint64_t v8 = v10;
    char v12 = v11;
    char v14 = v13 & 1;
  }
  else
  {
    uint64_t v9 = 0;
    char v14 = 0;
    char v12 = 0;
  }
  v16[0] = v9;
  v16[1] = v8;
  v16[2] = v14;
  v16[3] = v12;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B18], (uint64_t)v16, 1, a5, MEMORY[0x1E4F40B18], a6);
  return outlined consume of Text?(v9, v8, v14, v12);
}

uint64_t View.accessibilityRoleDescription<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v6 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v8 + 16))((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v9 = Text.init<A>(_:)();
  uint64_t v11 = v10;
  char v13 = v12 & 1;
  v16[0] = v9;
  v16[1] = v10;
  v16[2] = v12 & 1;
  v16[3] = v14;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B18], (uint64_t)v16, 1, a2, MEMORY[0x1E4F40B18], a4);
  outlined consume of Text.Storage(v9, v11, v13);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityRoleDescription(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3 & 1;
  v7[3] = a4;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40B18], (uint64_t)v7, 1, a5, a6);
}

uint64_t View.accessibilityRoleDescription<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[2] = a2;
  _OWORD v13[3] = a3;
  uint64_t v13[4] = a4;
  v13[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.accessibilityRoleDescription<A>(_:), (uint64_t)v13, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41420], v7, (uint64_t)&v14);
  uint64_t v8 = v14;
  uint64_t v9 = v15;
  char v10 = v16;
  uint64_t v11 = v17;
  v18[0] = v14;
  v18[1] = v15;
  void v18[2] = v16;
  void v18[3] = v17;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B18], (uint64_t)v18, 1, a2, MEMORY[0x1E4F40B18], a4);
  return outlined consume of Text?(v8, v9, v10, v11);
}

uint64_t closure #1 in View.accessibilityRoleDescription<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in View.accessibilityRoleDescription<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in View.accessibilityRoleDescription<A>(_:)(a1, a2);
}

uint64_t ModifiedContent<>.accessibilityRoleDescription(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40B18], (uint64_t)v7, 1, a5, a6);
}

uint64_t static AccessibilityScenePropertiesModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  int v10 = *(_DWORD *)(a2 + 56);
  unint64_t v23 = *(void *)a2;
  int v24 = v6;
  uint64_t v25 = v7;
  long long v26 = *(_OWORD *)(a2 + 24);
  uint64_t v27 = v8;
  unint64_t v28 = v9;
  int v29 = v10;
  a3(&v21);
  unint64_t v23 = v9;
  int v24 = v10;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    LODWORD(v23) = v5;
    type metadata accessor for AccessibilityScenePropertiesModifier();
    type metadata accessor for _GraphValue();
    unsigned int v12 = _GraphValue.value.getter();
    unint64_t v23 = v21;
    int v24 = v22;
    uint64_t v13 = PreferencesOutputs.subscript.getter();
    unsigned int v14 = *MEMORY[0x1E4F4E7A0];
    if ((v13 & 0x100000000) == 0) {
      unsigned int v14 = v13;
    }
    unint64_t v23 = __PAIR64__(v14, v12);
    MEMORY[0x1F4188790](v13);
    uint64_t v19 = type metadata accessor for AccessibilityScenePropertiesModifier.TransformProperties();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<SceneList>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<SceneList>, (uint64_t)&type metadata for SceneList, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v23, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v18, v19, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v16);
    LOBYTE(v23) = 0;
    uint64_t result = PreferencesOutputs.subscript.setter();
  }
  int v17 = v22;
  *(void *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v17;
  return result;
}

uint64_t AccessibilityScenePropertiesModifier.TransformProperties.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AccessibilityScenePropertiesModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t AccessibilityScenePropertiesModifier.TransformProperties.sceneList.getter(uint64_t a1)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1)) {
    return 0;
  }
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

char *AccessibilityScenePropertiesModifier.TransformProperties.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for AccessibilityScenePropertiesModifier();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = AccessibilityScenePropertiesModifier.TransformProperties.sceneList.getter(a1);
  if (!v12) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = (char *)v12;
  AccessibilityScenePropertiesModifier.TransformProperties.modifier.getter((uint64_t)v11);
  int v14 = v11[*(int *)(v8 + 44)];
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v14 == 1)
  {
    uint64_t v15 = *((void *)v13 + 2);
    if (v15)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        goto LABEL_12;
      }
      while (1)
      {
        unint64_t v16 = 0;
        uint64_t v17 = (uint64_t)(v13 + 32);
        while (v16 < *((void *)v13 + 2))
        {
          ++v16;
          closure #1 in AccessibilityScenePropertiesModifier.TransformProperties.value.getter(v17, a1, a2, a3, a4);
          v17 += 280;
          if (v15 == v16) {
            return v13;
          }
        }
        __break(1u);
LABEL_12:
        uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v13);
      }
    }
  }
  return v13;
}

uint64_t closure #1 in AccessibilityScenePropertiesModifier.TransformProperties.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = a2;
  uint64_t v7 = type metadata accessor for AccessibilityScenePropertiesModifier();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v22 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)&v22 - v15;
  uint64_t v23 = a1;
  if (*(void *)(a1 + 192))
  {
    uint64_t v17 = *(void *)(a1 + 192);
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v17 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v25 = v17;
  AccessibilityScenePropertiesModifier.TransformProperties.modifier.getter((uint64_t)v9);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, AssociatedTypeWitness);
  uint64_t v24 = v17;
  swift_bridgeObjectRetain();
  AccessibilityProperties.subscript.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(a5 + 8))(v13, AssociatedTypeWitness, a5);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v11 + 8);
  v18(v13, AssociatedTypeWitness);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, v16, AssociatedTypeWitness);
  AccessibilityProperties.subscript.setter();
  v18(v16, AssociatedTypeWitness);
  uint64_t v19 = v25;
  uint64_t v20 = v23;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v20 + 192) = v19;
  return result;
}

char *protocol witness for Rule.value.getter in conformance AccessibilityScenePropertiesModifier<A>.TransformProperties@<X0>(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t result = AccessibilityScenePropertiesModifier.TransformProperties.value.getter(*v2, a1[2], a1[3], a1[4]);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance AccessibilityScenePropertiesModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  return static AccessibilityScenePropertiesModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4);
}

uint64_t implicit closure #2 in static AccessibilityCustomPropertyModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v14 = _ViewOutputs.subscript.getter();
  int v15 = *MEMORY[0x1E4F4E7A0];
  if ((v14 & 0x100000000) == 0) {
    int v15 = v14;
  }
  int v19 = v15;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  uint64_t v21 = type metadata accessor for AccessibilityCustomPropertyModifier.Transform();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<(_:)>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v19, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)v20, v21, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v17);
  return v23;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AccessibilityCustomPropertyModifier<A, B, C>.PropertyChild@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ZStack();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  double v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

void (*AccessibilityCustomPropertyModifier.Transform.value.getter(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(uint64_t a1)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  *(void *)(v14 + 32) = a4;
  *(void *)(v14 + 40) = a5;
  *(void *)(v14 + 48) = a6;
  *(void *)(v14 + 56) = a7;
  *(_DWORD *)(v14 + 64) = a1;
  return partial apply for closure #1 in AccessibilityCustomPropertyModifier.Transform.value.getter;
}

void closure #1 in AccessibilityCustomPropertyModifier.Transform.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  AccessibilityCustomPropertyModifier.Transform.attachment.getter(a2, (uint64_t)&v10);
  char v4 = v12;
  if (v12 != 255)
  {
    uint64_t v5 = v10;
    int v6 = v11;
    if (v12)
    {
      if (v12 == 1)
      {
        uint64_t v7 = specialized Sequence.compactMap<A>(_:)(v10);
        static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v7, 0, v9);
        swift_bridgeObjectRelease();
        uint64_t v10 = v9[0];
        AccessibilityProperties.subscript.getter();
        swift_bridgeObjectRelease();
        AccessibilityProperties.init<A>(_:_:)();
      }
      else
      {
        type metadata accessor for AnyAccessibilityPropertiesEntry();
        uint64_t v10 = Dictionary.init(minimumCapacity:)();
      }
    }
    else
    {
      outlined copy of AccessibilityAttachment.Tree(v10, v11, 0);
      AccessibilityAttachment.mergedProperties.getter(v9);
      uint64_t v10 = v9[0];
      AccessibilityProperties.subscript.getter();
      swift_bridgeObjectRelease();
      AccessibilityProperties.init<A>(_:_:)();
      outlined consume of AccessibilityAttachment.Tree?(v5, v6, 0);
    }
    v9[0] = v10;
    AccessibilityAttachment.init(properties:)();
    uint64_t v8 = v11;
    v9[0] = v10;
    v9[1] = (uint64_t)v11;
    AccessibilityAttachment.Tree.combine(with:)(v9);
    outlined consume of AccessibilityAttachment.Tree?(v5, v6, v4);
    swift_bridgeObjectRelease();
  }
}

uint64_t AccessibilityCustomPropertyModifier.Transform.attachment.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == result)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = -1;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v5 = *(void *)Value;
    char v4 = *(void **)(Value + 8);
    *(void *)a2 = *(void *)Value;
    *(void *)(a2 + 8) = v4;
    char v6 = *(unsigned char *)(Value + 16);
    *(unsigned char *)(a2 + 16) = v6;
    return outlined copy of AccessibilityAttachment.Tree(v5, v4, v6);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityCustomPropertyModifier<A, B, C>.Transform@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  char v4 = AccessibilityCustomPropertyModifier.Transform.value.getter(*v2, a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  uint64_t v6 = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t AccessibilityCustomPropertyModifier.Attachment.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  AccessibilityCustomPropertyModifier.Transform.attachment.getter(a1, (uint64_t)&v16);
  if (v18 == 255)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v5 = Dictionary.init(minimumCapacity:)();
  }
  else
  {
    uint64_t v7 = v16;
    uint64_t v6 = v17;
    if (v18)
    {
      if (v18 != 1)
      {
        type metadata accessor for AnyAccessibilityPropertiesEntry();
        uint64_t v5 = Dictionary.init(minimumCapacity:)();
        uint64_t v16 = v5;
        goto LABEL_9;
      }
      uint64_t v8 = specialized Sequence.compactMap<A>(_:)(v16);
      static AccessibilityChildBehavior.defaultCombine(childProperties:createsCustomActions:)((uint64_t)v8, 0, &v15);
      swift_bridgeObjectRelease();
      uint64_t v16 = v15;
      AccessibilityProperties.subscript.getter();
      swift_bridgeObjectRelease();
      AccessibilityProperties.init<A>(_:_:)();
      uint64_t v9 = v7;
      uint64_t v10 = v6;
      char v11 = 1;
    }
    else
    {
      outlined copy of AccessibilityAttachment.Tree(v16, v17, 0);
      AccessibilityAttachment.mergedProperties.getter(&v15);
      uint64_t v16 = v15;
      AccessibilityProperties.subscript.getter();
      swift_bridgeObjectRelease();
      AccessibilityProperties.init<A>(_:_:)();
      outlined consume of AccessibilityAttachment.Tree?(v7, v6, 0);
      uint64_t v9 = v7;
      uint64_t v10 = v6;
      char v11 = 0;
    }
    outlined consume of AccessibilityAttachment.Tree?(v9, v10, v11);
    uint64_t v5 = v16;
  }
LABEL_9:
  uint64_t v15 = v5;
  AccessibilityAttachment.init(properties:)();
  uint64_t v12 = v16;
  uint64_t v13 = v17;
  type metadata accessor for Attribute<SceneList>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v12;
  *(void *)(result + 24) = v13;
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityCustomPropertyModifier<A, B, C>.Attachment@<X0>(uint64_t *a1@<X8>)
{
  return AccessibilityCustomPropertyModifier.Attachment.value.getter(*v1, a1);
}

uint64_t View.accessibility(label:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibility(label:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void))View.accessibilityLabel(_:));
}

uint64_t View.accessibility(hint:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.accessibility(label:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void))View.accessibilityHint(_:));
}

uint64_t View.accessibility(label:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void))
{
  return a7(a1, a2, a3 & 1);
}

uint64_t View.accessibility(selectionIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.accessibility()(a2, a3);
}

uint64_t ModifiedContent<>.accessibility(label:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return ModifiedContent<>.accessibility(label:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, void))ModifiedContent<>.accessibilityLabel(_:));
}

uint64_t ModifiedContent<>.accessibility(hint:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  return ModifiedContent<>.accessibility(label:)(a1, a2, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, void))ModifiedContent<>.accessibilityHint(_:));
}

uint64_t ModifiedContent<>.accessibility(label:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, void))
{
  return a6(a1, a2, a3 & 1);
}

uint64_t ModifiedContent<>.accessibility(selectionIdentifier:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return ModifiedContent<>.accessibility()(a1, a2);
}

uint64_t View.accessibility(roleDescription:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3 & 1;
  v7[3] = a4;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40B18], (uint64_t)v7, 1, a5, MEMORY[0x1E4F40B18], a6);
}

uint64_t ModifiedContent<>.accessibility(roleDescription:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3 & 1;
  v7[3] = a4;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40B18], (uint64_t)v7, 1, a5, a6);
}

uint64_t type metadata completion function for AccessibilityScenePropertiesModifier()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AccessibilityScenePropertiesModifier(void *a1, void *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 1) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((unsigned char *)a1 + v6) = *((unsigned char *)a2 + v6);
  }
  else
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for AccessibilityScenePropertiesModifier(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for AccessibilityScenePropertiesModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 48) + a1) = *(unsigned char *)(*(void *)(v5 + 48) + a2);
  return a1;
}

uint64_t assignWithCopy for AccessibilityScenePropertiesModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 40) + a1) = *(unsigned char *)(*(void *)(v5 + 40) + a2);
  return a1;
}

uint64_t initializeWithTake for AccessibilityScenePropertiesModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 32) + a1) = *(unsigned char *)(*(void *)(v5 + 32) + a2);
  return a1;
}

uint64_t assignWithTake for AccessibilityScenePropertiesModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(unsigned char *)(*(void *)(v5 + 24) + a1) = *(unsigned char *)(*(void *)(v5 + 24) + a2);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityScenePropertiesModifier(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 > v7)
  {
    uint64_t v9 = v8 + 1;
    char v10 = 8 * (v8 + 1);
    if ((v8 + 1) > 3) {
      goto LABEL_7;
    }
    unsigned int v12 = ((a2 - v7 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 >= 2)
    {
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      int v17 = v7 + (v9 | v13);
      return (v17 + 1);
    }
  }
LABEL_22:
  if (v6 < 0xFE)
  {
    unsigned int v16 = *((unsigned __int8 *)a1 + v8);
    if (v16 < 2) {
      return 0;
    }
    int v17 = (v16 + 2147483646) & 0x7FFFFFFF;
    return (v17 + 1);
  }
  uint64_t v14 = *(uint64_t (**)(unsigned __int16 *))(v5 + 48);

  return v14(a1);
}

void storeEnumTagSinglePayload for AccessibilityScenePropertiesModifier(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0xFE) {
    unsigned int v9 = 254;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(v6 + 64);
  size_t v11 = v10 + 1;
  if (a3 <= v9)
  {
    int v12 = 0;
  }
  else if (v11 <= 3)
  {
    unsigned int v15 = ((a3 - v9 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v15))
    {
      int v12 = 4;
    }
    else if (v15 >= 0x100)
    {
      int v12 = 2;
    }
    else
    {
      int v12 = v15 > 1;
    }
  }
  else
  {
    int v12 = 1;
  }
  if (v9 < a2)
  {
    unsigned int v13 = ~v9 + a2;
    if (v11 < 4)
    {
      int v14 = (v13 >> (8 * v11)) + 1;
      if (v10 != -1)
      {
        int v16 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v11] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v14;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v11] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x187A7D81CLL);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v8 < 0xFE)
        {
          a1[v10] = a2 + 1;
        }
        else
        {
          int v17 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
          v17(a1, a2);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for AccessibilityScenePropertiesModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for AccessibilityCustomPropertyModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for AccessibilityCustomPropertyModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187A7DBD0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t partial apply for implicit closure #2 in static AccessibilityCustomPropertyModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static AccessibilityCustomPropertyModifier._makeView(modifier:inputs:body:)(v0[8], v0[9], v0[2], v0[3], v0[4], v0[5], v0[6], v0[7]);
}

uint64_t type metadata accessor for AccessibilityCustomPropertyModifier.Transform()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityScenePropertiesModifier.TransformProperties()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityScenePropertiesModifier<A>.TransformProperties()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityCustomPropertyModifier<A, B, C>.Transform()
{
  return swift_getWitnessTable();
}

void outlined consume of AccessibilityAttachment.Tree?(uint64_t a1, void *a2, char a3)
{
  if (a3 != -1) {
    outlined consume of AccessibilityAttachment.Tree(a1, a2, a3);
  }
}

uint64_t sub_187A7DCE0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187A7DD18()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in AccessibilityCustomPropertyModifier.Transform.value.getter(uint64_t a1)
{
  closure #1 in AccessibilityCustomPropertyModifier.Transform.value.getter(a1, *(unsigned int *)(v1 + 64));
}

void type metadata accessor for Attribute<SceneList>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t List<>.init(content:)@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for List();
  *(void *)(a2 + *(int *)(v4 + 56)) = 0;
  uint64_t v5 = a2 + *(int *)(v4 + 60);
  *(void *)uint64_t v5 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(v5 + 8) = 0;
  *(unsigned char *)(v5 + 16) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
  return a1(v4, v6, v7, v8);
}

uint64_t List.init(selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v29 = a5;
  uint64_t v30 = a4;
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  uint64_t v31 = a2;
  type metadata accessor for SelectionManagerBox();
  uint64_t v15 = type metadata accessor for Binding();
  uint64_t v28 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v28 - 8);
  double v17 = MEMORY[0x1F4188790](v28);
  int v19 = (char *)&v26 - v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(void *)(v15 - 8) + 56))(a9, 1, 1, v15, v17);
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  uint64_t v40 = a10;
  uint64_t v20 = type metadata accessor for List();
  *(void *)(a9 + *(int *)(v20 + 56)) = 0;
  uint64_t v21 = a9 + *(int *)(v20 + 60);
  *(void *)uint64_t v21 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(v21 + 8) = 0;
  *(unsigned char *)(v21 + 16) = 0;
  uint64_t v37 = a1;
  uint64_t v38 = v31;
  uint64_t v22 = v27;
  uint64_t v39 = v27;
  uint64_t v33 = a6;
  uint64_t v34 = a7;
  uint64_t v35 = a8;
  uint64_t v36 = a10;
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in List.init(selection:content:), (uint64_t)v32, MEMORY[0x1E4FBC248], v15, v23, (uint64_t)v19);
  uint64_t v24 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v16 + 40))(a9, v19, v28);
  v30(v24);
  return outlined consume of Binding<Set<A>>?<A, B>(v26, v31, v22, MEMORY[0x1E4FBC898]);
}

void List.init(selection:content:)()
{
}

void protocol witness for ViewModifier.body(content:) in conformance Fix_53164375()
{
}

void List.init<A, B>(_:selection:rowContent:)()
{
}

uint64_t List.init<A, B>(_:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14 = *a2;
  uint64_t v26 = a8;
  uint64_t v27 = a10;
  uint64_t v28 = a11;
  uint64_t v29 = a12;
  uint64_t v30 = a13;
  uint64_t v31 = a14;
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  uint64_t v39 = *(void *)(*(void *)(v14 + *MEMORY[0x1E4FBC5F0] + 8) + 16);
  uint64_t v15 = v39;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v41 = a10;
  uint64_t v42 = a10;
  uint64_t v43 = type metadata accessor for DisclosureGroup();
  uint64_t v44 = a12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = type metadata accessor for OutlineGroup();
  uint64_t v36 = a13;
  uint64_t v37 = a13;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = swift_getWitnessTable();
  List.init(selection:content:)(a3, a4, a5, (void (*)(uint64_t))partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:), (uint64_t)v25, a8, v16, a11, a9, v17);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
}

uint64_t partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:)((uint64_t)&unk_1ED480178, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:), a1);
}

{
  return partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:)((uint64_t)&unk_1ED480100, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:), a1);
}

void List.init<A, B>(_:children:selection:rowContent:)()
{
}

{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void List.init<A, B, C>(_:id:selection:rowContent:)()
{
}

uint64_t List.init<A, B, C>(_:id:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15 = *a2;
  uint64_t v16 = *a3;
  uint64_t v29 = a10;
  uint64_t v30 = a11;
  uint64_t v31 = a12;
  uint64_t v32 = a13;
  uint64_t v33 = a14;
  uint64_t v34 = a15;
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  uint64_t v17 = *MEMORY[0x1E4FBC5F0] + 8;
  uint64_t v19 = *(void *)(v15 + v17);
  uint64_t v43 = *(void *)(*(void *)(v16 + v17) + 16);
  uint64_t v18 = v43;
  uint64_t v44 = v19;
  uint64_t v45 = a11;
  uint64_t v46 = a11;
  uint64_t v47 = type metadata accessor for DisclosureGroup();
  uint64_t v48 = a13;
  uint64_t v49 = a14;
  uint64_t v20 = type metadata accessor for OutlineGroup();
  uint64_t v40 = a15;
  uint64_t v41 = a15;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v21 = swift_getWitnessTable();
  List.init(selection:content:)(a4, a5, a6, (void (*)(uint64_t))partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), (uint64_t)v28, a10, v20, a12, a9, v21);
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
}

uint64_t partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)((uint64_t)&unk_1ED480150, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), a1);
}

{
  return partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)((uint64_t)&unk_1ED4800D8, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), a1);
}

{
  return partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)((uint64_t)&unk_1ED47FF70, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), a1);
}

{
  return partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)((uint64_t)&unk_1ED47FF20, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), a1);
}

void List.init<A, B, C>(_:id:children:selection:rowContent:)()
{
}

{
  swift_release();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

uint64_t List.init<A>(_:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v23 = a8;
  uint64_t v24 = a10;
  uint64_t v25 = a11;
  uint64_t v26 = a12;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v16 = MEMORY[0x1E4FBB550];
  type metadata accessor for TextFieldLabelDisplayModeModifier<AutomaticTextFieldLabelDisplayMode>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
  uint64_t v32 = v17;
  uint64_t v33 = v16;
  uint64_t v34 = type metadata accessor for HStack();
  unint64_t v35 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  uint64_t v36 = MEMORY[0x1E4FBB560];
  uint64_t v18 = type metadata accessor for ForEach();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = swift_getWitnessTable();
  List.init(selection:content:)(a3, a4, a5, (void (*)(uint64_t))partial apply for closure #1 in List.init<A>(_:selection:rowContent:), (uint64_t)v22, a8, v18, a11, a9, v19);
  return swift_release();
}

uint64_t partial apply for closure #1 in List.init<A>(_:selection:rowContent:)()
{
  return partial apply for closure #1 in List.init<A>(_:selection:rowContent:)();
}

{
  return partial apply for closure #1 in List.init<A>(_:selection:rowContent:)();
}

{
  uint64_t *v0;

  return closure #1 in List.init<A>(_:selection:rowContent:)(v0[6], v0[7], v0[8], v0[9], v0[2], v0[3], v0[4], v0[5]);
}

void List.init<A>(_:selection:rowContent:)()
{
}

uint64_t List.init<A, B>(_:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _UNKNOWN **a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, _UNKNOWN **a11, uint64_t a12)
{
  uint64_t v34 = a8;
  uint64_t v38 = a5;
  uint64_t v33 = a4;
  uint64_t v41 = a3;
  uint64_t v39 = a1;
  uint64_t v42 = a9;
  uint64_t v31 = a10;
  uint64_t v18 = *a2;
  uint64_t v37 = a2;
  uint64_t v32 = v18;
  uint64_t v35 = a6;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  uint64_t v40 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v40 - 8);
  double v20 = MEMORY[0x1F4188790](v40);
  uint64_t v36 = (uint64_t)&v31 - v21;
  (*(void (**)(double))(v19 + 16))(v20);
  uint64_t v44 = a6;
  uint64_t v45 = a7;
  uint64_t v22 = v31;
  uint64_t v46 = a8;
  uint64_t v47 = v31;
  uint64_t v48 = a11;
  uint64_t v49 = a12;
  uint64_t v50 = a1;
  long long v51 = a2;
  uint64_t v52 = v33;
  uint64_t v53 = a5;
  uint64_t v23 = *(_UNKNOWN ***)(*(void *)(v32 + *MEMORY[0x1E4FBC5F0] + 8) + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v57 = a7;
  uint64_t v58 = &type metadata for OutlineSubgroupChildren;
  uint64_t v59 = a11;
  unint64_t v60 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v25 = type metadata accessor for DisclosureGroup();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v57 = v23;
  uint64_t v58 = (ValueMetadata *)AssociatedTypeWitness;
  uint64_t v59 = a7;
  unint64_t v60 = a7;
  uint64_t v61 = v25;
  uint64_t v62 = v22;
  uint64_t v63 = AssociatedConformanceWitness;
  uint64_t v27 = type metadata accessor for OutlineGroup();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v54 = a11;
  char v55 = a11;
  uint64_t v56 = WitnessTable;
  uint64_t v29 = swift_getWitnessTable();
  List.init(selection:content:)(v36, (void (*)(uint64_t))partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:), (uint64_t)v43, v35, v27, v34, v29, v42);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v41, v40);
  swift_release();
  swift_release();
  return (*((uint64_t (**)(uint64_t, _UNKNOWN **))*(v23 - 1) + 1))(v39, v23);
}

uint64_t closure #1 in List.init<A, B>(_:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, void *a11, uint64_t a12, uint64_t a13)
{
  uint64_t v47 = a5;
  uint64_t v48 = a7;
  uint64_t v43 = a1;
  uint64_t v51 = a9;
  uint64_t v49 = a3;
  uint64_t v50 = a13;
  uint64_t v44 = a12;
  uint64_t v45 = a4;
  uint64_t v46 = a2;
  uint64_t v15 = *(void *)(*(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8) + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - v17;
  uint64_t v38 = a11;
  uint64_t AssociatedTypeWitness = (ValueMetadata *)swift_getAssociatedTypeWitness();
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v55 = a6;
  uint64_t v56 = &type metadata for OutlineSubgroupChildren;
  uint64_t v57 = a10;
  uint64_t v58 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v19 = type metadata accessor for DisclosureGroup();
  uint64_t v42 = v19;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v55 = v15;
  uint64_t v56 = AssociatedTypeWitness;
  uint64_t v57 = a6;
  uint64_t v58 = (_UNKNOWN **)a6;
  uint64_t v37 = a6;
  uint64_t v59 = v19;
  uint64_t v60 = a8;
  uint64_t v61 = AssociatedConformanceWitness;
  uint64_t v21 = type metadata accessor for OutlineGroup();
  uint64_t v40 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v25 = MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v37 - v26;
  uint64_t v28 = (uint64_t)v39;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v39, v43, v15, v25);
  uint64_t v29 = (void *)swift_allocObject();
  uint64_t v30 = v46;
  v29[2] = v47;
  v29[3] = v15;
  uint64_t v31 = v48;
  v29[4] = a6;
  v29[5] = v31;
  v29[6] = a8;
  v29[7] = a10;
  uint64_t v32 = v38;
  uint64_t v33 = v49;
  v29[8] = v38;
  v29[9] = v33;
  v29[10] = v45;
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A>(_:children:content:)(v28, v30, v50, (uint64_t)v29, v41, v37, a8, a10, (uint64_t)v23, v32);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v52 = a10;
  uint64_t v53 = a10;
  uint64_t v54 = WitnessTable;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v23);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v40 + 8);
  v35(v23, v21);
  static ViewBuilder.buildExpression<A>(_:)(v27);
  return ((uint64_t (*)(char *, uint64_t))v35)(v27, v21);
}

uint64_t partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in List.init<A, B>(_:children:selection:rowContent:)(*(void *)(v3 + 64), *(void **)(v3 + 72), *(void *)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), a3, *(void *)(v3 + 48), *(void **)(v3 + 56), a1, a2);
}

uint64_t closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  BOOL v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  int v13 = (char *)&v17 - v12;
  v14(v11);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, a6);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, a6);
}

{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void (*v14)(double);
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  uint64_t v7 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  BOOL v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  int v13 = (char *)&v17 - v12;
  v14(v11);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, a6);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, a6);
}

uint64_t List.init<A, B, C>(_:id:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _UNKNOWN **a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, _UNKNOWN **a13)
{
  uint64_t v41 = a6;
  uint64_t v38 = a5;
  uint64_t v42 = a4;
  uint64_t v43 = a1;
  uint64_t v44 = a9;
  uint64_t v35 = a12;
  uint64_t v34 = a11;
  uint64_t v39 = a10;
  uint64_t v45 = a2;
  uint64_t v37 = *a2;
  uint64_t v46 = a3;
  uint64_t v36 = *a3;
  uint64_t v40 = a7;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v33 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v33 - v21, a4, v18, v20);
  uint64_t v48 = a7;
  uint64_t v49 = a8;
  uint64_t v23 = v34;
  uint64_t v50 = a10;
  uint64_t v51 = v34;
  uint64_t v24 = v35;
  uint64_t v52 = v35;
  uint64_t v53 = a13;
  uint64_t v54 = a1;
  uint64_t v55 = v45;
  uint64_t v56 = v46;
  uint64_t v57 = v38;
  uint64_t v58 = a6;
  uint64_t v25 = *MEMORY[0x1E4FBC5F0] + 8;
  uint64_t v26 = *(_UNKNOWN ***)(*(void *)(v36 + v25) + 16);
  uint64_t v27 = *(ValueMetadata **)(v37 + v25);
  uint64_t v62 = a8;
  uint64_t v63 = &type metadata for OutlineSubgroupChildren;
  uint64_t v64 = a13;
  uint64_t v65 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v28 = type metadata accessor for DisclosureGroup();
  uint64_t v62 = v26;
  uint64_t v63 = v27;
  uint64_t v64 = a8;
  uint64_t v65 = a8;
  uint64_t v66 = v28;
  uint64_t v67 = v23;
  uint64_t v68 = v24;
  uint64_t v29 = type metadata accessor for OutlineGroup();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v59 = a13;
  uint64_t v60 = a13;
  uint64_t v61 = WitnessTable;
  uint64_t v31 = swift_getWitnessTable();
  List.init(selection:content:)((uint64_t)v22, (void (*)(uint64_t))partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), (uint64_t)v47, v40, v29, v39, v31, v44);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v42, v18);
  swift_release();
  swift_release();
  swift_release();
  return (*((uint64_t (**)(uint64_t, _UNKNOWN **))*(v26 - 1) + 1))(v43, v26);
}

uint64_t closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v51 = a6;
  uint64_t v52 = a8;
  uint64_t v47 = a5;
  uint64_t v43 = a4;
  uint64_t v46 = a1;
  uint64_t v54 = a9;
  uint64_t v53 = a14;
  uint64_t v49 = a3;
  uint64_t v50 = a2;
  uint64_t v15 = *(void *)(*a3 + *MEMORY[0x1E4FBC5F0] + 8);
  uint64_t v44 = a13;
  uint64_t v42 = a12;
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v40 - v18;
  uint64_t v41 = (uint64_t)&v40 - v18;
  uint64_t v22 = *(ValueMetadata **)(v20 + v21);
  uint64_t v58 = v23;
  uint64_t v59 = &type metadata for OutlineSubgroupChildren;
  uint64_t v60 = v24;
  uint64_t v61 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v45 = type metadata accessor for DisclosureGroup();
  uint64_t v58 = v16;
  uint64_t v59 = v22;
  uint64_t v60 = a7;
  uint64_t v61 = (_UNKNOWN **)a7;
  uint64_t v40 = a7;
  uint64_t v62 = v45;
  uint64_t v63 = a10;
  uint64_t v64 = a11;
  uint64_t v25 = type metadata accessor for OutlineGroup();
  uint64_t v48 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v40 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v29 = MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)&v40 - v30;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, v46, v16, v29);
  uint64_t v32 = (void *)swift_allocObject();
  v32[2] = v51;
  void v32[3] = v16;
  v32[4] = v22;
  v32[5] = a7;
  v32[6] = v52;
  v32[7] = a10;
  uint64_t v33 = v42;
  v32[8] = a11;
  v32[9] = v33;
  uint64_t v34 = v47;
  v32[10] = v43;
  v32[11] = v34;
  uint64_t v35 = v50;
  swift_retain();
  uint64_t v36 = v49;
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A>(_:id:children:content:)(v41, v35, v36, v53, (uint64_t)v32, v40, a10, a11, (uint64_t)v27, v33);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v55 = v33;
  uint64_t v56 = v33;
  uint64_t v57 = WitnessTable;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v27);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v48 + 8);
  v38(v27, v25);
  static ViewBuilder.buildExpression<A>(_:)(v31);
  return ((uint64_t (*)(char *, uint64_t))v38)(v31, v25);
}

uint64_t partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(*(void *)(v3 + 64), *(void **)(v3 + 72), *(void **)(v3 + 80), *(void *)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), a3, *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), a1, a2);
}

{
  uint64_t v3;

  return closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(*(void *)(v3 + 72), *(void **)(v3 + 80), *(void **)(v3 + 88), *(void *)(v3 + 96), *(void *)(v3 + 104), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), a3, *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), a1, a2);
}

uint64_t closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v18 - v13;
  v15(v12);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, a7);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a7);
}

{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  void (*v15)(double);
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  uint64_t v8 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v18 - v13;
  v15(v12);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v10, a7);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a7);
}

uint64_t List.init<A, B>(_:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v24 = a7;
  uint64_t v25 = a1;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v26 = a9;
  uint64_t v27 = a2;
  uint64_t v16 = *(void *)(a8 - 8);
  double v17 = MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v16 + 16))(v19, v17);
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  uint64_t v34 = a10;
  uint64_t v35 = a11;
  uint64_t v36 = a12;
  uint64_t v37 = a13;
  uint64_t v38 = a14;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  List.init<A, B, C>(_:id:selection:rowContent:)((uint64_t)v19, KeyPath, v27, v28, v29, v30, v31, v24, v26, a8, a10, a11, a12, AssociatedConformanceWitness, a13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v25, a8);
}

uint64_t sub_187A7FB8C()
{
  return 56;
}

__n128 sub_187A7FB98(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v17 = *a2;
  uint64_t v27 = a8;
  uint64_t v28 = a10;
  uint64_t v29 = a11;
  uint64_t v30 = a12;
  uint64_t v31 = a13;
  uint64_t v32 = a14;
  uint64_t v33 = a15;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v18 = *(void *)(*MEMORY[0x1E4FBC5F0] + v17 + 8);
  uint64_t v39 = a10;
  uint64_t v40 = v18;
  uint64_t v41 = type metadata accessor for HStack();
  uint64_t v42 = a13;
  uint64_t v43 = a14;
  uint64_t v19 = type metadata accessor for ForEach();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = swift_getWitnessTable();
  List.init(selection:content:)(a3, a4, a5, (void (*)(uint64_t))partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:), (uint64_t)v26, a8, v19, a12, a9, v20);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a10 - 8) + 8))(a1, a10);
}

uint64_t partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)()
{
  return partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)((uint64_t)&unk_1ED4800B0, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:), (uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t))closure #1 in List.init<A, B, C>(_:id:selection:rowContent:));
}

{
  return partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)((uint64_t)&unk_1ED480088, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:), (uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t))closure #1 in List.init<A, B, C>(_:id:selection:rowContent:));
}

uint64_t List.init<A, B>(_:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v37 = a8;
  uint64_t v38 = a1;
  uint64_t v40 = a3;
  uint64_t v41 = a4;
  uint64_t v42 = a2;
  uint64_t v39 = a9;
  uint64_t v35 = a7;
  uint64_t v36 = a12;
  uint64_t v31 = a11;
  uint64_t v33 = a10;
  uint64_t v34 = a5;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v32 = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v20 = *(void *)(a6 - 8);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v24, a1, a6, v22);
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t v45 = a7;
  uint64_t v25 = v37;
  uint64_t v26 = v33;
  uint64_t v46 = v37;
  uint64_t v47 = v33;
  uint64_t v48 = a11;
  uint64_t v49 = v36;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v42, v16);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  List.init<A, B, C>(_:id:selection:rowContent:)((uint64_t)v24, KeyPath, (uint64_t)v19, v40, v41, v34, a6, v35, v39, v25, v26, AssociatedConformanceWitness, v31);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v42, v32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v38, a6);
}

uint64_t List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v38 = a8;
  uint64_t v36 = a7;
  uint64_t v39 = a4;
  uint64_t v40 = a3;
  uint64_t v41 = a1;
  uint64_t v42 = a9;
  uint64_t v33 = a12;
  uint64_t v32 = a11;
  uint64_t v34 = a10;
  uint64_t v35 = *a2;
  uint64_t v37 = a6;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  double v22 = (char *)&v31 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v31 - v21, a3, v18, v20);
  uint64_t v23 = v36;
  uint64_t v44 = a6;
  uint64_t v45 = v36;
  uint64_t v46 = v38;
  uint64_t v47 = a10;
  uint64_t v24 = v32;
  uint64_t v25 = v33;
  uint64_t v48 = v32;
  uint64_t v49 = v33;
  uint64_t v50 = a13;
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v53 = v39;
  uint64_t v54 = a5;
  uint64_t v26 = *(void *)(*MEMORY[0x1E4FBC5F0] + v35 + 8);
  uint64_t v27 = type metadata accessor for HStack();
  uint64_t v56 = v23;
  uint64_t v57 = v26;
  uint64_t v58 = v27;
  uint64_t v59 = v24;
  uint64_t v60 = v25;
  uint64_t v28 = type metadata accessor for ForEach();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = swift_getWitnessTable();
  List.init(selection:content:)((uint64_t)v22, (void (*)(uint64_t))partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:), (uint64_t)v43, v37, v28, v34, v29, v42);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v40, v18);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v41, v23);
}

uint64_t closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v42 = a8;
  uint64_t v43 = a4;
  uint64_t v34 = a7;
  uint64_t v40 = a5;
  uint64_t v41 = a3;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  uint64_t v45 = a9;
  uint64_t v44 = a14;
  uint64_t v15 = *(void *)(a6 - 8);
  uint64_t v35 = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = v17;
  uint64_t v19 = *(void *)(*MEMORY[0x1E4FBC5F0] + v18 + 8);
  uint64_t v36 = type metadata accessor for HStack();
  uint64_t v47 = a6;
  uint64_t v48 = v19;
  uint64_t v49 = v36;
  uint64_t v50 = a10;
  uint64_t v51 = a11;
  uint64_t v20 = type metadata accessor for ForEach();
  uint64_t v39 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  double v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v33 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, v37, a6, v24);
  uint64_t v27 = (void *)swift_allocObject();
  void v27[2] = v40;
  v27[3] = a6;
  uint64_t v28 = v34;
  void v27[4] = v19;
  v27[5] = v28;
  uint64_t v29 = v43;
  v27[6] = v42;
  v27[7] = a10;
  v27[8] = a11;
  void v27[9] = a12;
  v27[10] = v41;
  v27[11] = v29;
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  ForEach<>.init(_:id:content:)();
  uint64_t v46 = WitnessTable;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v22);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v39 + 8);
  v30(v22, v20);
  static ViewBuilder.buildExpression<A>(_:)(v26);
  return ((uint64_t (*)(char *, uint64_t))v30)(v26, v20);
}

uint64_t partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t))
{
  return a3(v3[9], v3[10], v3[11], v3[12], v3[2], v3[3], v3[4], v3[5], v3[6], v3[7], v3[8], a1, a2);
}

uint64_t closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v29 = a8;
  uint64_t v30 = a3;
  uint64_t v26 = a6;
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v32 = a9;
  uint64_t v31 = a13;
  uint64_t v16 = type metadata accessor for HStack();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v25 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  double v22 = (char *)&v25 - v21;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v35 = v26;
  uint64_t v36 = a7;
  uint64_t v37 = v29;
  uint64_t v38 = a10;
  uint64_t v39 = a11;
  uint64_t v40 = a12;
  uint64_t v41 = v27;
  uint64_t v42 = v30;
  uint64_t v43 = v28;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v19);
  uint64_t v23 = *(void (**)(char *, uint64_t))(v17 + 8);
  v23(v19, v16);
  static ViewBuilder.buildExpression<A>(_:)(v22);
  return ((uint64_t (*)(char *, uint64_t))v23)(v22, v16);
}

uint64_t closure #1 in closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - v13;
  v16(v15, v12);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, a7);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, a7);
}

uint64_t List.init<A>(_:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v30 = a8;
  uint64_t v31 = a4;
  uint64_t v32 = a3;
  uint64_t v33 = a9;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v30 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v30 - v19, a3, v16, v18);
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v21 = v30;
  uint64_t v37 = v30;
  uint64_t v38 = a10;
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v41 = v31;
  uint64_t v42 = a5;
  uint64_t v22 = MEMORY[0x1E4FBB550];
  type metadata accessor for TextFieldLabelDisplayModeModifier<AutomaticTextFieldLabelDisplayMode>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
  uint64_t v24 = v23;
  uint64_t v25 = type metadata accessor for HStack();
  unint64_t v26 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  uint64_t v44 = v24;
  uint64_t v45 = v22;
  uint64_t v46 = v25;
  unint64_t v47 = v26;
  uint64_t v48 = MEMORY[0x1E4FBB560];
  uint64_t v27 = type metadata accessor for ForEach();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v28 = swift_getWitnessTable();
  List.init(selection:content:)((uint64_t)v20, (void (*)(uint64_t))partial apply for closure #1 in List.init<A>(_:selection:rowContent:), (uint64_t)v34, a6, v27, v21, v28, v33);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v32, v16);
  return swift_release();
}

uint64_t closure #1 in List.init<A>(_:selection:rowContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a5;
  v14[3] = a6;
  void v14[4] = a7;
  v14[5] = a8;
  v14[6] = a3;
  v14[7] = a4;
  uint64_t v15 = type metadata accessor for HStack();
  swift_retain();
  swift_getWitnessTable();
  ForEach<>.init(_:content:)();
  long long v19 = v24;
  uint64_t v20 = v25;
  unint64_t v21 = v26;
  uint64_t v22 = v27;
  long long v23 = v28;
  uint64_t v16 = MEMORY[0x1E4FBB550];
  type metadata accessor for TextFieldLabelDisplayModeModifier<AutomaticTextFieldLabelDisplayMode>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
  *(void *)&long long v29 = v17;
  *((void *)&v29 + 1) = v16;
  uint64_t v30 = v15;
  unint64_t v31 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  uint64_t v32 = MEMORY[0x1E4FBB560];
  type metadata accessor for ForEach();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v19);
  swift_release();
  swift_release();
  swift_release();
  long long v24 = v29;
  uint64_t v25 = v30;
  unint64_t v26 = v31;
  uint64_t v27 = v32;
  long long v28 = v33;
  static ViewBuilder.buildExpression<A>(_:)(&v24);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v25 = a6;
  uint64_t v26 = a8;
  uint64_t v27 = a9;
  uint64_t v15 = type metadata accessor for HStack();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  double v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  unint64_t v21 = (char *)&v24 - v20;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v30 = v25;
  uint64_t v31 = a7;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v34 = a1;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v18);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  v22(v18, v15);
  static ViewBuilder.buildExpression<A>(_:)(v21);
  return ((uint64_t (*)(char *, uint64_t))v22)(v21, v15);
}

uint64_t closure #1 in closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  double v12 = (char *)&v17 - v11;
  v14(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, a5);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v15)(v12, a5);
}

uint64_t List<>.init<A, B>(_:children:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _UNKNOWN **a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v14 = *(void *)(*(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8) + 16);
  swift_getAssociatedTypeWitness();
  type metadata accessor for DisclosureGroup();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlineGroup();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v15 = (int *)type metadata accessor for List();
  *(void *)(a9 + v15[14]) = 0;
  uint64_t v16 = a9 + v15[15];
  *(void *)uint64_t v16 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(v16 + 8) = 0;
  *(unsigned char *)(v16 + 16) = 0;
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(unsigned char *)(a9 + 24) = 0;
  *(void *)(a9 + 16) = 0;
  closure #1 in List<>.init<A, B>(_:children:rowContent:)(a1, a2, a3, a4, a5, a6, a7, a8, a9 + v15[13]);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
}

uint64_t closure #1 in List<>.init<A, B>(_:children:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _UNKNOWN **a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v38 = a8;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v43 = a2;
  uint64_t v44 = a1;
  uint64_t v47 = a9;
  double v12 = *(_UNKNOWN ***)(*(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8) + 16);
  uint64_t v13 = (uint64_t)*(v12 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v39 = (char *)&v37 - v14;
  uint64_t AssociatedTypeWitness = (ValueMetadata *)swift_getAssociatedTypeWitness();
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v51 = a5;
  uint64_t v52 = &type metadata for OutlineSubgroupChildren;
  uint64_t v53 = (_UNKNOWN **)a7;
  uint64_t v54 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v16 = type metadata accessor for DisclosureGroup();
  uint64_t v42 = v16;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v51 = v12;
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v53 = a5;
  uint64_t v54 = a5;
  uint64_t v55 = v16;
  uint64_t v56 = a6;
  uint64_t v18 = a6;
  uint64_t v37 = a6;
  uint64_t v57 = AssociatedConformanceWitness;
  uint64_t v19 = type metadata accessor for OutlineGroup();
  uint64_t v40 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  unint64_t v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v37 - v24;
  uint64_t v26 = (uint64_t)v39;
  (*(void (**)(char *, uint64_t, _UNKNOWN **, double))(v13 + 16))(v39, v44, v12, v23);
  uint64_t v27 = (void *)swift_allocObject();
  void v27[2] = v12;
  v27[3] = a5;
  uint64_t v28 = (uint64_t)a5;
  void v27[4] = v18;
  v27[5] = a7;
  uint64_t v29 = a7;
  uint64_t v30 = v38;
  uint64_t v31 = v45;
  uint64_t v32 = v46;
  v27[6] = v38;
  v27[7] = v31;
  v27[8] = v32;
  uint64_t v33 = v43;
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A>(_:children:content:)(v26, v33, (uint64_t)partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:), (uint64_t)v27, v41, v28, v37, v29, (uint64_t)v21, v30);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v48 = v29;
  uint64_t v49 = v29;
  uint64_t v50 = WitnessTable;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v21);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v40 + 8);
  v35(v21, v19);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v35)(v25, v19);
}

uint64_t closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  double v12 = (char *)&v16 - v11;
  v13(v10);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, a5);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, a5);
}

{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  void (*v13)(double);
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  double v12 = (char *)&v16 - v11;
  v13(v10);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, a5);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, a5);
}

uint64_t List<>.init<A, B, C>(_:id:children:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v16 = *(void *)(*(void *)(*a3 + *MEMORY[0x1E4FBC5F0] + 8) + 16);
  type metadata accessor for DisclosureGroup();
  type metadata accessor for OutlineGroup();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v17 = (int *)type metadata accessor for List();
  *(void *)(a9 + v17[14]) = 0;
  uint64_t v18 = a9 + v17[15];
  *(void *)uint64_t v18 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(v18 + 8) = 0;
  *(unsigned char *)(v18 + 16) = 0;
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(unsigned char *)(a9 + 24) = 0;
  *(void *)(a9 + 16) = 0;
  closure #1 in List<>.init<A, B, C>(_:id:children:rowContent:)(a1, a2, a3, a4, a5, a6, a7, a8, a9 + v17[13], a10);
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
}

uint64_t closure #1 in List<>.init<A, B, C>(_:id:children:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v45 = a5;
  uint64_t v48 = a4;
  uint64_t v49 = a9;
  uint64_t v42 = a2;
  uint64_t v43 = a1;
  uint64_t v47 = a3;
  uint64_t v13 = *(void *)(*a3 + *MEMORY[0x1E4FBC5F0] + 8);
  uint64_t v41 = a10;
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v40 = (uint64_t)&v39 - v16;
  uint64_t v20 = *(ValueMetadata **)(v18 + v19);
  uint64_t v53 = v21;
  uint64_t v54 = &type metadata for OutlineSubgroupChildren;
  uint64_t v55 = v22;
  uint64_t v56 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v44 = type metadata accessor for DisclosureGroup();
  uint64_t v53 = v14;
  uint64_t v54 = v20;
  uint64_t v55 = a6;
  uint64_t v56 = (_UNKNOWN **)a6;
  uint64_t v57 = v44;
  uint64_t v58 = a7;
  uint64_t v39 = a7;
  uint64_t v59 = a8;
  uint64_t v23 = type metadata accessor for OutlineGroup();
  uint64_t v46 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v39 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v39 - v28;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, v43, v14, v27);
  uint64_t v30 = (void *)swift_allocObject();
  v30[2] = v14;
  v30[3] = v20;
  v30[4] = a6;
  v30[5] = a7;
  uint64_t v31 = a8;
  uint64_t v32 = v41;
  v30[6] = a8;
  v30[7] = v32;
  uint64_t v33 = v45;
  v30[8] = v48;
  v30[9] = v33;
  uint64_t v34 = v42;
  swift_retain();
  uint64_t v35 = v47;
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A>(_:id:children:content:)(v40, v34, v35, (uint64_t)partial apply for closure #1 in closure #1 in List<>.init<A, B, C>(_:id:children:rowContent:), (uint64_t)v30, a6, v39, v31, (uint64_t)v25, v32);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v50 = v32;
  uint64_t v51 = v32;
  uint64_t v52 = WitnessTable;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v25);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v46 + 8);
  v37(v25, v23);
  static ViewBuilder.buildExpression<A>(_:)(v29);
  return ((uint64_t (*)(char *, uint64_t))v37)(v29, v23);
}

uint64_t List<>.init<A, B>(_:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v21 = a1;
  uint64_t v22 = a9;
  uint64_t v14 = *(void *)(a4 - 8);
  double v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v14 + 16))(v17, v15);
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t KeyPath = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  List<>.init<A, B, C>(_:id:rowContent:)((uint64_t)v17, KeyPath, v23, v24, a4, a5, a6, AssociatedConformanceWitness, v22, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v21, a4);
}

uint64_t key path getter for Identifiable.id : <A, B><A1, B1>A1.Element()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t sub_187A82018()
{
  return 40;
}

__n128 sub_187A82024(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t List<>.init<A, B, C>(_:id:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  type metadata accessor for HStack();
  type metadata accessor for ForEach();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v17 = (int *)type metadata accessor for List();
  *(void *)(a9 + v17[14]) = 0;
  uint64_t v18 = a9 + v17[15];
  *(void *)uint64_t v18 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(v18 + 8) = 0;
  *(unsigned char *)(v18 + 16) = 0;
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(unsigned char *)(a9 + 24) = 0;
  *(void *)(a9 + 16) = 0;
  closure #1 in List<>.init<A, B, C>(_:id:rowContent:)(a1, a2, a3, a4, a5, a6, a7, a8, a9 + v17[13], a10);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
}

uint64_t closure #1 in List<>.init<A, B, C>(_:id:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v32 = a6;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  uint64_t v39 = a9;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  double v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31[1] = v15;
  uint64_t v17 = *(void *)(*MEMORY[0x1E4FBC5F0] + v16 + 8);
  uint64_t v33 = type metadata accessor for HStack();
  uint64_t v41 = a5;
  uint64_t v42 = v17;
  uint64_t v43 = v33;
  uint64_t v44 = a7;
  uint64_t v45 = a8;
  uint64_t v18 = a8;
  uint64_t v19 = type metadata accessor for ForEach();
  uint64_t v36 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v31 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v31 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, v34, a5, v23);
  uint64_t v26 = (void *)swift_allocObject();
  v26[2] = a5;
  v26[3] = v17;
  v26[4] = v32;
  v26[5] = a7;
  v26[6] = v18;
  v26[7] = a10;
  uint64_t v27 = v38;
  _OWORD v26[8] = v37;
  v26[9] = v27;
  swift_retain();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  ForEach<>.init(_:id:content:)();
  uint64_t v40 = WitnessTable;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v21);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v36 + 8);
  v28(v21, v19);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v28)(v25, v19);
}

uint64_t closure #1 in closure #1 in List<>.init<A, B, C>(_:id:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v25 = a3;
  uint64_t v26 = a8;
  uint64_t v24 = a7;
  uint64_t v27 = a9;
  uint64_t v15 = type metadata accessor for HStack();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v24 - v20;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = v24;
  uint64_t v32 = v26;
  uint64_t v33 = a10;
  uint64_t v34 = a2;
  uint64_t v35 = v25;
  uint64_t v36 = a1;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v18);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  v22(v18, v15);
  static ViewBuilder.buildExpression<A>(_:)(v21);
  return ((uint64_t (*)(char *, uint64_t))v22)(v21, v15);
}

uint64_t closure #1 in closure #1 in closure #1 in List<>.init<A, B, C>(_:id:rowContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - v12;
  v15(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v7 + 8);
  v16(v9, a6);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v16)(v13, a6);
}

double List<>.init<A>(_:rowContent:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  type metadata accessor for TextFieldLabelDisplayModeModifier<AutomaticTextFieldLabelDisplayMode>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
  type metadata accessor for HStack();
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  *(void *)&long long v30 = MEMORY[0x1E4FBB560];
  uint64_t v14 = type metadata accessor for ForEach();
  swift_getWitnessTable();
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v27 = MEMORY[0x1E4FBC248];
  *((void *)&v27 + 1) = v14;
  uint64_t v28 = MEMORY[0x1E4FBC258];
  uint64_t v29 = WitnessTable;
  uint64_t v16 = type metadata accessor for List();
  *(void *)((char *)&v27 + *(int *)(v16 + 56)) = 0;
  uint64_t v17 = (char *)&v27 + *(int *)(v16 + 60);
  *(void *)uint64_t v17 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *((void *)v17 + 1) = 0;
  v17[16] = 0;
  long long v27 = 0uLL;
  LOBYTE(v29) = 0;
  uint64_t v28 = 0;
  closure #1 in List<>.init<A>(_:rowContent:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  uint64_t v18 = v28;
  char v19 = v29;
  char v20 = v35;
  double result = *(double *)&v27;
  long long v23 = v30;
  long long v22 = v31;
  long long v24 = v32;
  long long v25 = v33;
  long long v26 = v34;
  *(_OWORD *)a7 = v27;
  *(void *)(a7 + 16) = v18;
  *(unsigned char *)(a7 + 24) = v19;
  *(_OWORD *)(a7 + 32) = v23;
  *(_OWORD *)(a7 + 48) = v22;
  *(_OWORD *)(a7 + 64) = v24;
  *(_OWORD *)(a7 + 80) = v25;
  *(_OWORD *)(a7 + 96) = v26;
  *(unsigned char *)(a7 + 112) = v20;
  return result;
}

uint64_t closure #1 in List<>.init<A>(_:rowContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a5;
  _OWORD v10[3] = a6;
  v10[4] = a3;
  v10[5] = a4;
  uint64_t v11 = type metadata accessor for HStack();
  swift_retain();
  swift_getWitnessTable();
  ForEach<>.init(_:content:)();
  long long v15 = v20;
  uint64_t v16 = v21;
  unint64_t v17 = v22;
  uint64_t v18 = v23;
  long long v19 = v24;
  uint64_t v12 = MEMORY[0x1E4FBB550];
  type metadata accessor for TextFieldLabelDisplayModeModifier<AutomaticTextFieldLabelDisplayMode>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
  *(void *)&long long v25 = v13;
  *((void *)&v25 + 1) = v12;
  uint64_t v26 = v11;
  unint64_t v27 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  uint64_t v28 = MEMORY[0x1E4FBB560];
  type metadata accessor for ForEach();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v15);
  swift_release();
  swift_release();
  swift_release();
  long long v20 = v25;
  uint64_t v21 = v26;
  unint64_t v22 = v27;
  uint64_t v23 = v28;
  long long v24 = v29;
  static ViewBuilder.buildExpression<A>(_:)(&v20);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in List<>.init<A>(_:rowContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for HStack();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = &v19[-v15];
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v24 = a1;
  static VerticalAlignment.center.getter();
  HStack.init(alignment:spacing:content:)();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  unint64_t v17 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
  v17(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(unsigned char *, uint64_t))v17)(v16, v10);
}

uint64_t closure #1 in closure #1 in closure #1 in List<>.init<A>(_:rowContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - v10;
  v13(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v7);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, a4);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v14)(v11, a4);
}

uint64_t List.init<A, B>(_:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v26 = a8;
  uint64_t v27 = a10;
  uint64_t v28 = a11;
  uint64_t v29 = a12;
  uint64_t v30 = a13;
  uint64_t v31 = a14;
  uint64_t v32 = a15;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  uint64_t v35 = a6;
  uint64_t v36 = a7;
  uint64_t v15 = type metadata accessor for Binding();
  uint64_t v47 = a12;
  uint64_t v48 = a13;
  uint64_t v40 = v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = a10;
  uint64_t v43 = a10;
  uint64_t v44 = type metadata accessor for DisclosureGroup();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v16 = type metadata accessor for OutlineGroup();
  uint64_t v37 = a14;
  uint64_t v38 = a14;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v17 = swift_getWitnessTable();
  List.init(selection:content:)(a3, a4, a5, (void (*)(uint64_t))partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:), (uint64_t)v25, a8, v16, a11, a9, v17);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
}

uint64_t partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:)()
{
  return partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)((uint64_t)&unk_1ED47FF98, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:), (uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t))closure #1 in List.init<A, B>(_:children:selection:rowContent:));
}

{
  return partial apply for closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)((uint64_t)&unk_1ED47FF48, (uint64_t)partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:), (uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, uint64_t, uint64_t))closure #1 in List.init<A, B>(_:children:selection:rowContent:));
}

uint64_t List.init<A, B, C>(_:id:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16 = *a2;
  uint64_t v28 = a10;
  uint64_t v29 = a11;
  uint64_t v30 = a12;
  uint64_t v31 = a13;
  uint64_t v32 = a14;
  uint64_t v33 = a15;
  uint64_t v34 = a16;
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  uint64_t v17 = type metadata accessor for Binding();
  uint64_t v18 = *(void *)(*MEMORY[0x1E4FBC5F0] + v16 + 8);
  uint64_t v50 = a13;
  uint64_t v51 = a14;
  uint64_t v43 = v17;
  uint64_t v44 = v18;
  uint64_t v45 = a11;
  uint64_t v46 = a11;
  uint64_t v47 = type metadata accessor for DisclosureGroup();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v49 = a15;
  uint64_t v19 = type metadata accessor for OutlineGroup();
  uint64_t v40 = a16;
  uint64_t v41 = a16;
  uint64_t v42 = swift_getWitnessTable();
  uint64_t v20 = swift_getWitnessTable();
  List.init(selection:content:)(a4, a5, a6, (void (*)(uint64_t))partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), (uint64_t)v27, a10, v19, a12, a9, v20);
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
}

uint64_t List.init<A, B>(_:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _UNKNOWN **a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, _UNKNOWN **a12, uint64_t a13)
{
  uint64_t v39 = a8;
  uint64_t v43 = a5;
  uint64_t v36 = a4;
  uint64_t v45 = a3;
  uint64_t v38 = a1;
  uint64_t v46 = a9;
  uint64_t v34 = a11;
  uint64_t v19 = *a2;
  uint64_t v42 = a2;
  uint64_t v35 = v19;
  uint64_t v40 = a6;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  uint64_t v44 = type metadata accessor for Optional();
  uint64_t v37 = *(void *)(v44 - 8);
  double v20 = MEMORY[0x1F4188790](v44);
  uint64_t v41 = (uint64_t)&v33 - v21;
  (*(void (**)(double))(v22 + 16))(v20);
  uint64_t v48 = a6;
  uint64_t v49 = a7;
  uint64_t v50 = a8;
  uint64_t v51 = a10;
  uint64_t v23 = v34;
  uint64_t v52 = v34;
  uint64_t v53 = a12;
  uint64_t v54 = a13;
  uint64_t v55 = a1;
  uint64_t v56 = a2;
  uint64_t v57 = v36;
  uint64_t v58 = a5;
  uint64_t v24 = type metadata accessor for Binding();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v62 = (uint64_t)a7;
  uint64_t v63 = &type metadata for OutlineSubgroupChildren;
  uint64_t v64 = a12;
  uint64_t v65 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v26 = type metadata accessor for DisclosureGroup();
  uint64_t v69 = a10;
  uint64_t v70 = v23;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v62 = v24;
  uint64_t v63 = (ValueMetadata *)AssociatedTypeWitness;
  uint64_t v64 = a7;
  uint64_t v65 = a7;
  uint64_t v66 = v26;
  uint64_t v67 = WitnessTable;
  uint64_t v68 = AssociatedConformanceWitness;
  uint64_t v29 = type metadata accessor for OutlineGroup();
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v59 = a12;
  uint64_t v60 = a12;
  uint64_t v61 = v30;
  uint64_t v31 = swift_getWitnessTable();
  List.init(selection:content:)(v41, (void (*)(uint64_t))partial apply for closure #1 in List.init<A, B>(_:children:selection:rowContent:), (uint64_t)v47, v40, v29, v39, v31, v46);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v45, v44);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v38, v24);
}

uint64_t closure #1 in List.init<A, B>(_:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v57 = a5;
  uint64_t v58 = a7;
  uint64_t v59 = a3;
  uint64_t v60 = a4;
  uint64_t v54 = a1;
  uint64_t v62 = a9;
  uint64_t v61 = a14;
  uint64_t v47 = a10;
  uint64_t v51 = a11;
  uint64_t v55 = a13;
  uint64_t v56 = a2;
  uint64_t v53 = *(void *)(*(void *)(*a2 + *MEMORY[0x1E4FBBC10] + 8) + 16);
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v50 = (char *)&v44 - v18;
  uint64_t v45 = a12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v66 = a6;
  uint64_t v67 = &type metadata for OutlineSubgroupChildren;
  uint64_t v68 = a11;
  uint64_t v69 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v20 = type metadata accessor for DisclosureGroup();
  uint64_t v49 = v20;
  long long v73 = a8;
  uint64_t v74 = a10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v48 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v66 = v16;
  uint64_t v67 = (ValueMetadata *)AssociatedTypeWitness;
  uint64_t v68 = a6;
  uint64_t v69 = (_UNKNOWN **)a6;
  uint64_t v23 = a6;
  uint64_t v44 = a6;
  uint64_t v70 = v20;
  uint64_t v71 = WitnessTable;
  uint64_t v72 = AssociatedConformanceWitness;
  uint64_t v24 = type metadata accessor for OutlineGroup();
  uint64_t v52 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v44 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v28 = MEMORY[0x1F4188790](v27);
  uint64_t v46 = (char *)&v44 - v29;
  uint64_t v30 = (uint64_t)v50;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v50, v54, v16, v28);
  uint64_t v31 = (void *)swift_allocObject();
  uint64_t v32 = v53;
  void v31[2] = v57;
  v31[3] = v32;
  uint64_t v33 = v58;
  v31[4] = v23;
  v31[5] = v33;
  uint64_t v34 = a8;
  uint64_t v35 = v47;
  v31[6] = a8;
  v31[7] = v35;
  uint64_t v36 = v51;
  uint64_t v37 = v45;
  unsigned char v31[8] = v51;
  v31[9] = v37;
  uint64_t v38 = v60;
  v31[10] = v59;
  v31[11] = v38;
  uint64_t v39 = v56;
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A, B>(_:children:content:)(v30, v39, v61, (uint64_t)v31, v48, v44, v36, v34, (uint64_t)v26, v35, v37);
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v63 = v36;
  uint64_t v64 = v36;
  uint64_t v65 = v40;
  swift_getWitnessTable();
  uint64_t v41 = v46;
  static ViewBuilder.buildExpression<A>(_:)(v26);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v52 + 8);
  v42(v26, v24);
  static ViewBuilder.buildExpression<A>(_:)(v41);
  return ((uint64_t (*)(char *, uint64_t))v42)(v41, v24);
}

uint64_t List.init<A, B, C>(_:id:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _UNKNOWN **a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _UNKNOWN **a14)
{
  uint64_t v40 = a6;
  uint64_t v35 = a5;
  uint64_t v41 = a4;
  uint64_t v42 = a1;
  uint64_t v43 = a9;
  uint64_t v34 = a13;
  v33[0] = a12;
  uint64_t v37 = a10;
  uint64_t v44 = a2;
  uint64_t v36 = *a2;
  uint64_t v45 = a3;
  v33[1] = *a3;
  uint64_t v39 = a7;
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  uint64_t v38 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v38 - 8);
  double v20 = MEMORY[0x1F4188790](v38);
  uint64_t v22 = (char *)v33 - v21;
  (*(void (**)(char *, uint64_t, double))(v19 + 16))((char *)v33 - v21, a4, v20);
  uint64_t v47 = a7;
  uint64_t v48 = a8;
  uint64_t v49 = a10;
  uint64_t v50 = a11;
  uint64_t v23 = v33[0];
  uint64_t v24 = v34;
  uint64_t v51 = v33[0];
  uint64_t v52 = v34;
  uint64_t v53 = a14;
  uint64_t v54 = a1;
  uint64_t v55 = v44;
  uint64_t v56 = v45;
  uint64_t v57 = v35;
  uint64_t v58 = a6;
  uint64_t v25 = type metadata accessor for Binding();
  uint64_t v26 = *(ValueMetadata **)(*MEMORY[0x1E4FBC5F0] + v36 + 8);
  uint64_t v62 = (uint64_t)a8;
  uint64_t v63 = &type metadata for OutlineSubgroupChildren;
  uint64_t v64 = a14;
  uint64_t v65 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v27 = type metadata accessor for DisclosureGroup();
  uint64_t v69 = a11;
  uint64_t v70 = v23;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v62 = v25;
  uint64_t v63 = v26;
  uint64_t v64 = a8;
  uint64_t v65 = a8;
  uint64_t v66 = v27;
  uint64_t v67 = WitnessTable;
  uint64_t v68 = v24;
  uint64_t v29 = type metadata accessor for OutlineGroup();
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v59 = a14;
  uint64_t v60 = a14;
  uint64_t v61 = v30;
  uint64_t v31 = swift_getWitnessTable();
  List.init(selection:content:)((uint64_t)v22, (void (*)(uint64_t))partial apply for closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:), (uint64_t)v46, v39, v29, v37, v31, v43);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v41, v38);
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(v42, v25);
}

uint64_t closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v55 = a6;
  uint64_t v56 = a8;
  uint64_t v51 = a5;
  uint64_t v57 = a4;
  uint64_t v50 = a1;
  uint64_t v59 = a9;
  uint64_t v58 = a15;
  uint64_t v52 = a14;
  uint64_t v44 = a11;
  uint64_t v46 = a13;
  uint64_t v53 = a3;
  uint64_t v54 = a2;
  uint64_t v16 = *a2;
  uint64_t v49 = *(void *)(*(void *)(*MEMORY[0x1E4FBBC10] + *a3 + 8) + 16);
  uint64_t v17 = type metadata accessor for Binding();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  double v20 = (char *)&v41 - v19;
  uint64_t v43 = (uint64_t)&v41 - v19;
  uint64_t v21 = *(ValueMetadata **)(*MEMORY[0x1E4FBC5F0] + v16 + 8);
  uint64_t v63 = a7;
  uint64_t v64 = &type metadata for OutlineSubgroupChildren;
  uint64_t v65 = a13;
  uint64_t v66 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v22 = type metadata accessor for DisclosureGroup();
  uint64_t v47 = v22;
  uint64_t v70 = a10;
  uint64_t v71 = a11;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v63 = v17;
  uint64_t v64 = v21;
  uint64_t v65 = a7;
  uint64_t v66 = (_UNKNOWN **)a7;
  uint64_t v42 = a7;
  uint64_t v67 = v22;
  uint64_t v68 = WitnessTable;
  uint64_t v69 = a12;
  uint64_t v24 = type metadata accessor for OutlineGroup();
  uint64_t v48 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v41 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v28 = MEMORY[0x1F4188790](v27);
  uint64_t v45 = (char *)&v41 - v29;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v20, v50, v17, v28);
  uint64_t v30 = (void *)swift_allocObject();
  uint64_t v31 = v49;
  v30[2] = v55;
  v30[3] = v31;
  v30[4] = v21;
  v30[5] = a7;
  v30[6] = v56;
  v30[7] = a10;
  uint64_t v32 = v44;
  v30[8] = v44;
  v30[9] = a12;
  uint64_t v33 = v46;
  uint64_t v34 = v57;
  v30[10] = v46;
  v30[11] = v34;
  v30[12] = v51;
  uint64_t v35 = v54;
  swift_retain();
  uint64_t v36 = v53;
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A, B>(_:id:children:content:)(v43, v35, v36, v58, (uint64_t)v30, v42, a12, v33, (uint64_t)v26, a10, v32);
  uint64_t v37 = swift_getWitnessTable();
  uint64_t v60 = v33;
  uint64_t v61 = v33;
  uint64_t v62 = v37;
  swift_getWitnessTable();
  uint64_t v38 = v45;
  static ViewBuilder.buildExpression<A>(_:)(v26);
  uint64_t v39 = *(void (**)(char *, uint64_t))(v48 + 8);
  v39(v26, v24);
  static ViewBuilder.buildExpression<A>(_:)(v38);
  return ((uint64_t (*)(char *, uint64_t))v39)(v38, v24);
}

uint64_t List<>.init<A, B>(_:children:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v14 = type metadata accessor for Binding();
  swift_getAssociatedTypeWitness();
  type metadata accessor for DisclosureGroup();
  swift_getWitnessTable();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for OutlineGroup();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v15 = (int *)type metadata accessor for List();
  *(void *)(a9 + v15[14]) = 0;
  uint64_t v16 = a9 + v15[15];
  *(void *)uint64_t v16 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(v16 + 8) = 0;
  *(unsigned char *)(v16 + 16) = 0;
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(unsigned char *)(a9 + 24) = 0;
  *(void *)(a9 + 16) = 0;
  closure #1 in List<>.init<A, B>(_:children:rowContent:)(a1, a2, a3, a4, a5, a6, a7, a8, a9 + v15[13], a10);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
}

uint64_t closure #1 in List<>.init<A, B>(_:children:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v47 = a8;
  uint64_t v43 = a6;
  uint64_t v52 = a3;
  uint64_t v53 = a4;
  uint64_t v49 = a1;
  uint64_t v54 = a9;
  uint64_t v51 = a2;
  uint64_t v50 = *(void *)(*(void *)(*a2 + *MEMORY[0x1E4FBBC10] + 8) + 16);
  uint64_t v14 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v46 = (char *)&v40 - v16;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v44 = AssociatedTypeWitness;
  uint64_t v58 = a5;
  uint64_t v59 = &type metadata for OutlineSubgroupChildren;
  uint64_t v60 = a8;
  uint64_t v61 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v18 = type metadata accessor for DisclosureGroup();
  uint64_t v45 = v18;
  uint64_t v65 = a6;
  uint64_t v66 = a7;
  uint64_t v19 = a7;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v58 = v14;
  uint64_t v59 = (ValueMetadata *)AssociatedTypeWitness;
  uint64_t v60 = a5;
  uint64_t v61 = (_UNKNOWN **)a5;
  uint64_t v22 = a5;
  uint64_t v41 = a5;
  uint64_t v62 = v18;
  uint64_t v63 = WitnessTable;
  uint64_t v64 = AssociatedConformanceWitness;
  uint64_t v23 = type metadata accessor for OutlineGroup();
  uint64_t v48 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v40 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v27 = MEMORY[0x1F4188790](v26);
  uint64_t v42 = (char *)&v40 - v28;
  uint64_t v29 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v46, v49, v14, v27);
  uint64_t v30 = (void *)swift_allocObject();
  uint64_t v31 = v51;
  v30[2] = v50;
  v30[3] = v22;
  uint64_t v32 = v43;
  v30[4] = v43;
  v30[5] = v19;
  uint64_t v33 = v19;
  uint64_t v34 = v47;
  v30[6] = v47;
  v30[7] = a10;
  uint64_t v35 = v53;
  v30[8] = v52;
  v30[9] = v35;
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A, B>(_:children:content:)(v29, v31, (uint64_t)partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:), (uint64_t)v30, v44, v41, v34, v32, (uint64_t)v25, v33, a10);
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v55 = v34;
  uint64_t v56 = v34;
  uint64_t v57 = v36;
  swift_getWitnessTable();
  uint64_t v37 = v42;
  static ViewBuilder.buildExpression<A>(_:)(v25);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v48 + 8);
  v38(v25, v23);
  static ViewBuilder.buildExpression<A>(_:)(v37);
  return ((uint64_t (*)(char *, uint64_t))v38)(v37, v23);
}

uint64_t List<>.init<A, B, C>(_:id:children:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v16 = type metadata accessor for Binding();
  type metadata accessor for DisclosureGroup();
  swift_getWitnessTable();
  type metadata accessor for OutlineGroup();
  swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v17 = (int *)type metadata accessor for List();
  *(void *)(a9 + v17[14]) = 0;
  uint64_t v18 = a9 + v17[15];
  *(void *)uint64_t v18 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(v18 + 8) = 0;
  *(unsigned char *)(v18 + 16) = 0;
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(unsigned char *)(a9 + 24) = 0;
  *(void *)(a9 + 16) = 0;
  closure #1 in List<>.init<A, B, C>(_:id:children:rowContent:)(a1, a2, a3, a4, a5, a6, a7, a8, a9 + v17[13], a10, a11);
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
}

uint64_t closure #1 in List<>.init<A, B, C>(_:id:children:rowContent:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v51 = a1;
  uint64_t v56 = a9;
  uint64_t v45 = a10;
  uint64_t v47 = a11;
  uint64_t v54 = a3;
  uint64_t v55 = a2;
  uint64_t v14 = *a2;
  uint64_t v50 = *(void *)(*(void *)(*MEMORY[0x1E4FBBC10] + *a3 + 8) + 16);
  uint64_t v15 = type metadata accessor for Binding();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v42 - v17;
  uint64_t v44 = (uint64_t)&v42 - v17;
  uint64_t v19 = *(ValueMetadata **)(*MEMORY[0x1E4FBC5F0] + v14 + 8);
  uint64_t v60 = a6;
  uint64_t v61 = &type metadata for OutlineSubgroupChildren;
  uint64_t v62 = a11;
  uint64_t v63 = &protocol witness table for OutlineSubgroupChildren;
  uint64_t v20 = type metadata accessor for DisclosureGroup();
  uint64_t v49 = v20;
  uint64_t v67 = a7;
  uint64_t v68 = a8;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v60 = v15;
  uint64_t v61 = v19;
  uint64_t v22 = v19;
  uint64_t v62 = a6;
  uint64_t v63 = (_UNKNOWN **)a6;
  uint64_t v43 = a6;
  uint64_t v64 = v20;
  uint64_t v65 = WitnessTable;
  uint64_t v23 = v45;
  uint64_t v66 = v45;
  uint64_t v24 = type metadata accessor for OutlineGroup();
  uint64_t v48 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v28 = MEMORY[0x1F4188790](v27);
  uint64_t v46 = (char *)&v42 - v29;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v18, v51, v15, v28);
  uint64_t v30 = (void *)swift_allocObject();
  v30[2] = v50;
  v30[3] = v22;
  v30[4] = a6;
  v30[5] = a7;
  uint64_t v31 = a7;
  v30[6] = a8;
  v30[7] = v23;
  uint64_t v32 = v23;
  uint64_t v33 = v47;
  uint64_t v34 = v52;
  uint64_t v35 = v53;
  v30[8] = v47;
  v30[9] = v34;
  v30[10] = v35;
  uint64_t v36 = v55;
  swift_retain();
  uint64_t v37 = v54;
  swift_retain();
  swift_retain();
  OutlineGroup<>.init<A, B>(_:id:children:content:)(v44, v36, v37, (uint64_t)partial apply for closure #1 in closure #1 in List<>.init<A, B, C>(_:id:children:rowContent:), (uint64_t)v30, v43, v32, v33, (uint64_t)v26, v31, a8);
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v57 = v33;
  uint64_t v58 = v33;
  uint64_t v59 = v38;
  swift_getWitnessTable();
  uint64_t v39 = v46;
  static ViewBuilder.buildExpression<A>(_:)(v26);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v48 + 8);
  v40(v26, v24);
  static ViewBuilder.buildExpression<A>(_:)(v39);
  return ((uint64_t (*)(char *, uint64_t))v40)(v39, v24);
}

uint64_t *initializeBufferWithCopyOfBuffer for List(uint64_t *__dst, uint64_t *__src, uint64_t a3)
{
  uint64_t v5 = __dst;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  int v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v9 & 0xF8 | 7;
  uint64_t v11 = ((v9 & 0xF8) + 23) & ~v10;
  if (*(_DWORD *)(v7 + 84)) {
    size_t v12 = *(void *)(v7 + 64);
  }
  else {
    size_t v12 = v8 + 1;
  }
  if (v12 <= v8) {
    unint64_t v13 = *(void *)(v7 + 64);
  }
  else {
    unint64_t v13 = v12;
  }
  if (v13 <= 8) {
    uint64_t v14 = 8;
  }
  else {
    uint64_t v14 = v13;
  }
  size_t v15 = (v11 | 1) + v14;
  uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80);
  uint64_t v18 = *(void *)(v16 + 64) + 7;
  int v19 = (*(_DWORD *)(v16 + 80) | v9) & 0x100000;
  if ((v17 | v10) != 7
    || v19 != 0
    || ((((v18 + ((v15 + v17) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v22 = *__src;
    *uint64_t v5 = *__src;
    uint64_t v5 = (uint64_t *)(v22 + (((v17 | v10) + 16) & ~(v17 | v10)));
    swift_retain();
  }
  else
  {
    uint64_t v52 = v11 | 1;
    uint64_t v53 = *(void *)(a3 + 24);
    uint64_t v23 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = *v23;
    if ((unint64_t)*v23 < 0xFFFFFFFF)
    {
      memcpy(__dst, __src, v15);
      uint64_t v31 = v52;
      uint64_t v30 = v53;
      uint64_t v32 = ~v17;
    }
    else
    {
      int v49 = *(_DWORD *)(v7 + 84);
      *__dst = *__src;
      uint64_t v25 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v25 = v24;
      uint64_t v47 = v6;
      __dsta = (void *)(((unint64_t)v25 + v10 + 8) & ~v10);
      uint64_t v50 = __src;
      __srca = (unsigned __int8 *)(((unint64_t)v23 + v10 + 8) & ~v10);
      unsigned int v26 = __srca[v14];
      swift_retain();
      swift_retain();
      if (v26 < 3)
      {
        double v28 = __srca;
      }
      else
      {
        if (v14 <= 3) {
          uint64_t v27 = v14;
        }
        else {
          uint64_t v27 = 4;
        }
        double v28 = __srca;
        switch(v27)
        {
          case 1:
            int v29 = *__srca;
            goto LABEL_31;
          case 2:
            int v29 = *(unsigned __int16 *)__srca;
            goto LABEL_31;
          case 3:
            int v29 = *(unsigned __int16 *)__srca | (__srca[2] << 16);
            goto LABEL_31;
          case 4:
            int v29 = *(_DWORD *)__srca;
LABEL_31:
            int v33 = (v29 | ((v26 - 3) << (8 * v14))) + 3;
            unsigned int v34 = v29 + 3;
            if (v14 >= 4) {
              unsigned int v26 = v34;
            }
            else {
              unsigned int v26 = v33;
            }
            break;
          default:
            break;
        }
      }
      if (v26 == 2)
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(__dsta, v28, v47);
        *((unsigned char *)__dsta + v14) = 2;
        __src = v50;
      }
      else if (v26 == 1)
      {
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(v28, 1, v47))
        {
          uint64_t v35 = __dsta;
          memcpy(__dsta, __srca, v12);
        }
        else
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(__dsta, __srca, v47);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(__dsta, 0, 1, v47);
          uint64_t v35 = __dsta;
        }
        __src = v50;
        *((unsigned char *)v35 + v14) = 1;
      }
      else
      {
        __src = v50;
        void *__dsta = *(void *)v28;
        *((unsigned char *)__dsta + v14) = 0;
        swift_bridgeObjectRetain();
      }
      uint64_t v31 = v52;
      uint64_t v30 = v53;
      uint64_t v32 = ~v17;
      uint64_t v36 = 8;
      if (v8 > 8) {
        uint64_t v36 = v8;
      }
      if (v8 + 1 <= v8) {
        unint64_t v37 = v8;
      }
      else {
        unint64_t v37 = v8 + 1;
      }
      if (v37 <= 8) {
        unint64_t v37 = 8;
      }
      if (v49) {
        uint64_t v14 = v36;
      }
      else {
        uint64_t v14 = v37;
      }
    }
    unint64_t v38 = ((unint64_t)v5 + v17 + v31 + v14) & v32;
    unint64_t v39 = ((unint64_t)__src + v17 + v31 + v14) & v32;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))(v38, v39, v30);
    uint64_t v40 = (void *)((v18 + v38) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v41 = (v18 + v39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v42 = *(void *)v41;
    v41 += 15;
    *uint64_t v40 = v42;
    unint64_t v43 = ((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v44 = *(void *)(v41 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v45 = *(void *)((v41 & 0xFFFFFFFFFFFFFFF8) + 8);
    LOBYTE(v38) = *(unsigned char *)((v41 & 0xFFFFFFFFFFFFFFF8) + 16);
    outlined copy of HoverCallback();
    *(void *)unint64_t v43 = v44;
    *(void *)(v43 + 8) = v45;
    *(unsigned char *)(v43 + 16) = v38;
  }
  return v5;
}

void *initializeWithTake for List(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void *)(v7 + 64);
  int v9 = *(_DWORD *)(v7 + 84);
  uint64_t v10 = *(_DWORD *)(v7 + 80) & 0xF8;
  uint64_t v11 = v10 | 7;
  uint64_t v12 = (v10 + 23) & ~(v10 | 7);
  unint64_t v13 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = *v13;
  if ((unint64_t)*v13 < 0xFFFFFFFF)
  {
    if (v9) {
      unint64_t v25 = *(void *)(v7 + 64);
    }
    else {
      unint64_t v25 = v8 + 1;
    }
    if (v25 > v8) {
      unint64_t v8 = v25;
    }
    if (v8 <= 8) {
      uint64_t v20 = 8;
    }
    else {
      uint64_t v20 = v8;
    }
    memcpy(__dst, __src, v20 + v12 + 1);
  }
  else
  {
    *__dst = *__src;
    BOOL v15 = v9 == 0;
    uint64_t v16 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v16 = v14;
    uint64_t v17 = (void *)(((unint64_t)v16 + v11 + 8) & ~v11);
    uint64_t v18 = (unsigned __int8 *)(((unint64_t)v13 + v11 + 8) & ~v11);
    if (v15) {
      size_t v19 = v8 + 1;
    }
    else {
      size_t v19 = v8;
    }
    if (v19 > v8) {
      unint64_t v8 = v19;
    }
    if (v8 <= 8) {
      uint64_t v20 = 8;
    }
    else {
      uint64_t v20 = v8;
    }
    unsigned int v21 = v18[v20];
    unsigned int v22 = v21 - 3;
    if (v21 >= 3)
    {
      if (v20 <= 3) {
        uint64_t v23 = v20;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *v18;
          goto LABEL_28;
        case 2:
          int v24 = *(unsigned __int16 *)v18;
          goto LABEL_28;
        case 3:
          int v24 = *(unsigned __int16 *)(((unint64_t)v13 + v11 + 8) & ~v11) | (*(unsigned __int8 *)((((unint64_t)v13 + v11 + 8) & ~v11) + 2) << 16);
          goto LABEL_28;
        case 4:
          int v24 = *(_DWORD *)v18;
LABEL_28:
          int v26 = (v24 | (v22 << (8 * v20))) + 3;
          unsigned int v21 = v24 + 3;
          if (v20 < 4) {
            unsigned int v21 = v26;
          }
          break;
        default:
          break;
      }
    }
    if (v21 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 32))(v17, v18, v6);
      char v27 = 2;
LABEL_38:
      *((unsigned char *)v17 + v20) = v27;
      goto LABEL_39;
    }
    if (v21 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6))
      {
        memcpy(v17, v18, v19);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 32))(v17, v18, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
      }
      char v27 = 1;
      goto LABEL_38;
    }
    *uint64_t v17 = *(void *)v18;
    *((unsigned char *)v17 + v20) = 0;
  }
LABEL_39:
  uint64_t v28 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v29 = v28 + 32;
  uint64_t v30 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v31 = v20 + v12 + v30 + 1;
  unint64_t v32 = ((unint64_t)__dst + v31) & ~v30;
  unint64_t v33 = ((unint64_t)__src + v31) & ~v30;
  (*(void (**)(unint64_t, unint64_t))(v28 + 32))(v32, v33);
  uint64_t v34 = *(void *)(v29 + 32) + 7;
  uint64_t v35 = (void *)((v34 + v32) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v36 = (void *)((v34 + v33) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v35 = *v36;
  unint64_t v37 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = ((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v39 = *(unsigned char *)(v38 + 16);
  *(_OWORD *)unint64_t v37 = *(_OWORD *)v38;
  *(unsigned char *)(v37 + 16) = v39;
  return __dst;
}

void *assignWithTake for List(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(_DWORD *)(v6 + 80) & 0xF8;
  uint64_t v10 = v9 | 7;
  uint64_t v11 = ~(v9 | 7);
  uint64_t v57 = (v9 + 23) & v11;
  uint64_t v12 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (unint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      BOOL v15 = v7 == 0;
      *__dst = *__src;
      *uint64_t v12 = *v13;
      uint64_t v16 = (unsigned __int8 *)(((unint64_t)v12 + v10 + 8) & v11);
      uint64_t v17 = (unsigned __int8 *)(((unint64_t)v13 + v10 + 8) & v11);
      if (v15) {
        size_t v18 = v8 + 1;
      }
      else {
        size_t v18 = v8;
      }
      if (v18 <= v8) {
        unint64_t v25 = v8;
      }
      else {
        unint64_t v25 = v18;
      }
      if (v25 <= 8) {
        uint64_t v20 = 8;
      }
      else {
        uint64_t v20 = v25;
      }
      unsigned int v26 = v17[v20];
      unsigned int v27 = v26 - 3;
      if (v26 >= 3)
      {
        if (v20 <= 3) {
          uint64_t v28 = v20;
        }
        else {
          uint64_t v28 = 4;
        }
        switch(v28)
        {
          case 1:
LABEL_82:
            int v41 = *v17;
            goto LABEL_86;
          case 2:
LABEL_83:
            int v41 = *(unsigned __int16 *)v17;
            goto LABEL_86;
          case 3:
LABEL_84:
            int v41 = *(unsigned __int16 *)v17 | (v17[2] << 16);
            goto LABEL_86;
          case 4:
LABEL_85:
            int v41 = *(_DWORD *)v17;
LABEL_86:
            int v42 = (v41 | (v27 << (8 * v20))) + 3;
            unsigned int v26 = v41 + 3;
            if (v20 < 4) {
              unsigned int v26 = v42;
            }
            break;
          default:
            break;
        }
      }
LABEL_88:
      if (v26 == 2)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(v16, v17, v5);
        char v43 = 2;
      }
      else
      {
        if (v26 != 1)
        {
          *(void *)uint64_t v16 = *(void *)v17;
          v16[v20] = 0;
LABEL_97:
          uint64_t v37 = v57;
          uint64_t v38 = a3;
          goto LABEL_98;
        }
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5))
        {
          memcpy(v16, v17, v18);
        }
        else
        {
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(v16, v17, v5);
          (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v5);
        }
        char v43 = 1;
      }
      v16[v20] = v43;
      goto LABEL_97;
    }
    if (v7) {
      unint64_t v35 = *(void *)(v6 + 64);
    }
    else {
      unint64_t v35 = v8 + 1;
    }
    if (v35 <= v8) {
      unint64_t v35 = *(void *)(v6 + 64);
    }
    if (v35 <= 8) {
      uint64_t v20 = 8;
    }
    else {
      uint64_t v20 = v35;
    }
  }
  else
  {
    if (v14 >= 0xFFFFFFFF)
    {
      *__dst = *__src;
      swift_release();
      *uint64_t v12 = *v13;
      swift_release();
      BOOL v15 = v7 == 0;
      uint64_t v16 = (unsigned __int8 *)(((unint64_t)v12 + v10 + 8) & v11);
      uint64_t v17 = (unsigned __int8 *)(((unint64_t)v13 + v10 + 8) & v11);
      if (v15) {
        size_t v18 = v8 + 1;
      }
      else {
        size_t v18 = v8;
      }
      if (v18 <= v8) {
        unint64_t v19 = v8;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19 <= 8) {
        uint64_t v20 = 8;
      }
      else {
        uint64_t v20 = v19;
      }
      if (v16 == v17) {
        goto LABEL_97;
      }
      unsigned int v21 = v16[v20];
      unsigned int v22 = v21 - 3;
      if (v21 >= 3)
      {
        if (v20 <= 3) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = 4;
        }
        switch(v23)
        {
          case 1:
            int v24 = *v16;
            goto LABEL_70;
          case 2:
            int v24 = *(unsigned __int16 *)v16;
            goto LABEL_70;
          case 3:
            int v24 = *(unsigned __int16 *)v16 | (v16[2] << 16);
            goto LABEL_70;
          case 4:
            int v24 = *(_DWORD *)v16;
LABEL_70:
            int v39 = (v24 | (v22 << (8 * v20))) + 3;
            unsigned int v21 = v24 + 3;
            if (v20 < 4) {
              unsigned int v21 = v39;
            }
            break;
          default:
            break;
        }
      }
      if (v21 != 2)
      {
        if (v21 != 1)
        {
          swift_bridgeObjectRelease();
LABEL_77:
          unsigned int v26 = v17[v20];
          unsigned int v27 = v26 - 3;
          if (v26 >= 3)
          {
            if (v20 <= 3) {
              uint64_t v40 = v20;
            }
            else {
              uint64_t v40 = 4;
            }
            switch(v40)
            {
              case 1:
                goto LABEL_82;
              case 2:
                goto LABEL_83;
              case 3:
                goto LABEL_84;
              case 4:
                goto LABEL_85;
              default:
                goto LABEL_88;
            }
          }
          goto LABEL_88;
        }
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5)) {
          goto LABEL_77;
        }
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v16, v5);
      goto LABEL_77;
    }
    swift_release();
    swift_release();
    BOOL v15 = v7 == 0;
    uint64_t v29 = (unsigned __int8 *)(((unint64_t)v12 + v10 + 8) & v11);
    if (v15) {
      unint64_t v30 = v8 + 1;
    }
    else {
      unint64_t v30 = v8;
    }
    if (v30 <= v8) {
      unint64_t v30 = v8;
    }
    if (v30 <= 8) {
      uint64_t v20 = 8;
    }
    else {
      uint64_t v20 = v30;
    }
    unsigned int v31 = v29[v20];
    unsigned int v32 = v31 - 3;
    if (v31 >= 3)
    {
      if (v20 <= 3) {
        uint64_t v33 = v20;
      }
      else {
        uint64_t v33 = 4;
      }
      switch(v33)
      {
        case 1:
          int v34 = *v29;
          goto LABEL_59;
        case 2:
          int v34 = *(unsigned __int16 *)v29;
          goto LABEL_59;
        case 3:
          int v34 = *(unsigned __int16 *)(((unint64_t)v12 + v10 + 8) & v11) | (*(unsigned __int8 *)((((unint64_t)v12 + v10 + 8) & v11) + 2) << 16);
          goto LABEL_59;
        case 4:
          int v34 = *(_DWORD *)v29;
LABEL_59:
          int v36 = (v34 | (v32 << (8 * v20))) + 3;
          unsigned int v31 = v34 + 3;
          if (v20 < 4) {
            unsigned int v31 = v36;
          }
          break;
        default:
          break;
      }
    }
    if (v31 == 2) {
      goto LABEL_64;
    }
    if (v31 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_66;
    }
    if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v29, 1, v5)) {
LABEL_64:
    }
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v29, v5);
  }
LABEL_66:
  uint64_t v37 = v57;
  memcpy(__dst, __src, v20 + v57 + 1);
  uint64_t v38 = a3;
LABEL_98:
  uint64_t v44 = *(void *)(*(void *)(v38 + 24) - 8);
  uint64_t v45 = v44 + 40;
  uint64_t v46 = *(unsigned __int8 *)(v44 + 80);
  uint64_t v47 = v20 + v37 + v46 + 1;
  unint64_t v48 = ((unint64_t)__dst + v47) & ~v46;
  unint64_t v49 = ((unint64_t)__src + v47) & ~v46;
  (*(void (**)(unint64_t, unint64_t))(v44 + 40))(v48, v49);
  uint64_t v50 = *(void *)(v45 + 24) + 7;
  unint64_t v51 = v50 + v48;
  uint64_t v52 = (void *)((v50 + v49) & 0xFFFFFFFFFFFFFFF8);
  v51 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v51 = *v52;
  unint64_t v53 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v54 = ((unint64_t)v52 + 15) & 0xFFFFFFFFFFFFFFF8;
  char v55 = *(unsigned char *)(v54 + 16);
  *(_OWORD *)unint64_t v53 = *(_OWORD *)v54;
  *(unsigned char *)(v53 + 16) = v55;
  outlined consume of HoverCallback();
  return __dst;
}

uint64_t sub_187A86370()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in Fix_53164375()
{
  return &protocol witness table for Fix_53164375;
}

uint64_t sub_187A867D8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in List<>.init<A, B, C>(_:id:children:rowContent:)(uint64_t a1)
{
  return closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:)(a1, v1[9], v1[10], v1[2], v1[3], v1[4]);
}

{
  return partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void))closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:));
}

uint64_t partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void))closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:));
}

{
  uint64_t *v1;

  return closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)(a1, v1[7], v1[8], v1[2], v1[3]);
}

uint64_t sub_187A86860()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187A8689C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void, void))closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:));
}

{
  uint64_t *v1;

  return closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:)(a1, v1[9], v1[10], v1[2], v1[3], v1[4]);
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(uint64_t a1)
{
  return closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:)(a1, v1[11], v1[12], v1[2], v1[3], v1[4], v1[5]);
}

{
  return partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void, void, void))closure #1 in closure #1 in List.init<A, B, C>(_:id:children:selection:rowContent:));
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A, B>(_:children:selection:rowContent:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void, void, void))
{
  return a2(a1, v2[10], v2[11], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], v2[8], v2[9]);
}

uint64_t sub_187A86974()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in List<>.init<A>(_:rowContent:)(uint64_t a1)
{
  return closure #1 in closure #1 in List<>.init<A>(_:rowContent:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in List<>.init<A>(_:rowContent:)()
{
  return closure #1 in closure #1 in closure #1 in List<>.init<A>(_:rowContent:)(v0[4], v0[5], v0[6], v0[2]);
}

uint64_t sub_187A869C8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in List<>.init<A, B, C>(_:id:rowContent:)(uint64_t a1)
{
  return partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void, void, void))closure #1 in closure #1 in List<>.init<A, B, C>(_:id:rowContent:));
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in List<>.init<A, B, C>(_:id:rowContent:)()
{
  return closure #1 in closure #1 in closure #1 in List<>.init<A, B, C>(_:id:rowContent:)(v0[8], v0[9], v0[10], v0[2], v0[3], v0[4]);
}

uint64_t partial apply for closure #1 in closure #1 in List<>.init<A, B>(_:children:rowContent:)(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void, void, void))
{
  return a2(a1, v2[8], v2[9], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_187A86AA4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187A86AF0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)(a1, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in List.init<A>(_:selection:rowContent:), a2);
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)(a1, (uint64_t)partial apply for closure #1 in closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:), a2);
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)(a1, v3[10], v3[11], v3[2], v3[3], v3[4], v3[5], v3[6], a3, v3[7], v3[8], v3[9], a2);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)()
{
  return closure #1 in closure #1 in closure #1 in List.init<A, B, C>(_:id:selection:rowContent:)(v0[10], v0[11], v0[12], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t partial apply for closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)(a1, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5], a2, a3);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)()
{
  return closure #1 in closure #1 in closure #1 in List.init<A>(_:selection:rowContent:)(v0[6], v0[7], v0[8], v0[2], v0[3]);
}

uint64_t View.listRowSeparator(_:edges:)(char a1, char a2)
{
  return View.listRowSeparator(_:edges:)(a1, a2);
}

{
  uint64_t v4;
  uint64_t vars8;

  long long v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = a1;
  *(unsigned char *)(v4 + 17) = a2;
  View.transformTrait<A>(_:transform:)();

  return swift_release();
}

uint64_t sub_187A86CE4()
{
  return swift_deallocObject();
}

uint64_t View.listRowSeparatorTint(_:edges:)(uint64_t a1, char a2)
{
  return View.listRowSeparatorTint(_:edges:)(a1, a2);
}

{
  uint64_t v4;
  uint64_t vars8;

  long long v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(unsigned char *)(v4 + 24) = a2;
  swift_retain();
  View.transformTrait<A>(_:transform:)();

  return swift_release();
}

uint64_t sub_187A86D28()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.listRowSeparatorTint(_:edges:)(uint64_t a1)
{
  return closure #1 in View.listRowSeparatorTint(_:edges:)(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t View.listSectionSeparator(_:edges:)(char a1, char a2)
{
  return View.listRowSeparator(_:edges:)(a1, a2);
}

uint64_t sub_187A86E60()
{
  return swift_deallocObject();
}

unsigned char *partial apply for closure #1 in View.listRowSeparator(_:edges:)(unsigned char *result)
{
  char v2 = *(unsigned char *)(v1 + 16);
  char v3 = *(unsigned char *)(v1 + 17);
  if ((v3 & 1) == 0)
  {
    if ((*(unsigned char *)(v1 + 17) & 2) == 0) {
      return result;
    }
LABEL_5:
    result[16] = v2;
    return result;
  }
  *double result = v2;
  if ((v3 & 2) != 0) {
    goto LABEL_5;
  }
  return result;
}

uint64_t View.listSectionSeparatorTint(_:edges:)(uint64_t a1, char a2)
{
  return View.listRowSeparatorTint(_:edges:)(a1, a2);
}

uint64_t closure #1 in View.listRowSeparatorTint(_:edges:)(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4 = result;
  if (a3)
  {
    swift_retain();
    double result = swift_release();
    *(void *)(v4 + 8) = a2;
  }
  if ((a3 & 2) != 0)
  {
    swift_retain();
    double result = swift_release();
    *(void *)(v4 + 24) = a2;
  }
  return result;
}

uint64_t sub_187A86FE4()
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyx_AA26ListSeparatorConfigurationV03RowG0VQo_HOTm();
}

uint64_t sub_187A86FF8()
{
  return get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyx_AA26ListSeparatorConfigurationV03RowG0VQo_HOTm();
}

uint64_t get_witness_table_7SwiftUI4ViewRzlqd0__AaBHD3_AaBPAAE14transformTrait_0D0Qrqd__m_y5ValueQyd__zctAA01_cE3KeyRd__lFQOyx_AA26ListSeparatorConfigurationV03RowG0VQo_HOTm()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t assignWithCopy for ListSeparatorConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ListSeparatorConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListSeparatorConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListSeparatorConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)double result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ListSeparatorConfiguration.SectionKey()
{
  return &type metadata for ListSeparatorConfiguration.SectionKey;
}

ValueMetadata *type metadata accessor for ListSeparatorConfiguration.RowKey()
{
  return &type metadata for ListSeparatorConfiguration.RowKey;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListSeparatorConfiguration.Appearance(uint64_t a1, uint64_t a2)
{
  return specialized static ListSeparatorConfiguration.Appearance.== infix(_:_:)(*(unsigned char *)a1, *(void *)(a1 + 8), *(unsigned char *)a2, *(void *)(a2 + 8));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ListSeparatorConfiguration(uint64_t a1, uint64_t a2)
{
  return specialized static ListSeparatorConfiguration.== infix(_:_:)(*(unsigned char *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16), *(void *)(a2 + 24));
}

void protocol witness for static _ViewTraitKey.defaultValue.getter in conformance ListSeparatorConfiguration.SectionKey(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
}

uint64_t specialized static ListSeparatorConfiguration.Appearance.== infix(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  if (a1 != a3) {
    return 0;
  }
  if (a2)
  {
    if (a4)
    {
      if (a2 == a4) {
        return 1;
      }
      swift_retain();
      swift_retain();
      char v4 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      swift_release();
      if (v4) {
        return 1;
      }
    }
  }
  else if (!a4)
  {
    return 1;
  }
  return 0;
}

uint64_t specialized static ListSeparatorConfiguration.== infix(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8)
{
  if (a1 != a5) {
    return 0;
  }
  if (a2)
  {
    if (!a6) {
      return 0;
    }
    if (a2 != a6)
    {
      swift_retain();
      swift_retain();
      char v12 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      swift_release();
      if ((v12 & 1) == 0) {
        return 0;
      }
    }
  }
  else if (a6)
  {
    return 0;
  }
  if (a3 == a7)
  {
    if (a4)
    {
      if (a8)
      {
        if (a4 == a8) {
          return 1;
        }
        swift_retain();
        swift_retain();
        char v14 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        swift_release();
        if (v14) {
          return 1;
        }
      }
    }
    else if (!a8)
    {
      return 1;
    }
  }
  return 0;
}

ValueMetadata *type metadata accessor for ListSeparatorConfiguration.Appearance()
{
  return &type metadata for ListSeparatorConfiguration.Appearance;
}

void EditMenuBridge.presentedMenu.didset(void *a1)
{
  outlined init with take of ActiveEditMenu?((uint64_t)a1, (uint64_t)v17, &lazy cache variable for type metadata for ActiveEditMenu?, (uint64_t)&type metadata for ActiveEditMenu);
  uint64_t v16 = v17[0];
  uint64_t v14 = v17[2];
  uint64_t v15 = v17[1];
  uint64_t v12 = v17[4];
  uint64_t v13 = v17[3];
  uint64_t v11 = (void *)v17[5];
  uint64_t v3 = *(void *)(v1 + direct field offset for EditMenuBridge.presentedMenu);
  uint64_t v10 = *(void *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 8);
  uint64_t v4 = *(void *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 16);
  uint64_t v5 = *(void *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 24);
  uint64_t v6 = *(void *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 32);
  int v7 = *(void **)(v1 + direct field offset for EditMenuBridge.presentedMenu + 40);
  outlined init with take of ActiveEditMenu?((uint64_t)a1, (uint64_t)v18, &lazy cache variable for type metadata for ActiveEditMenu?, (uint64_t)&type metadata for ActiveEditMenu);
  if (v19 == 1)
  {
    if (v7 == (void *)1) {
      return;
    }
  }
  else if (v7 != (void *)1)
  {
    if (v16 == v3) {
      return;
    }
    goto LABEL_6;
  }
  outlined retain of ActiveEditMenu?(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of ActiveEditMenu?);
  outlined copy of ActiveEditMenu?(v3, v10, v4, v5, v6, v7);
  outlined consume of ActiveEditMenu?(v16, v15, v14, v13, v12, v11);
  outlined consume of ActiveEditMenu?(v3, v10, v4, v5, v6, v7);
LABEL_6:
  uint64_t v8 = MEMORY[0x18C119DF0](v1 + direct field offset for EditMenuBridge.host);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  else
  {
    __break(1u);
  }
}

void *EditMenuBridge.presentedMenu.setter(void *a1)
{
  uint64_t v3 = (uint64_t *)(v1 + direct field offset for EditMenuBridge.presentedMenu);
  outlined init with take of ActiveEditMenu?(v1 + direct field offset for EditMenuBridge.presentedMenu, (uint64_t)v11, &lazy cache variable for type metadata for ActiveEditMenu?, (uint64_t)&type metadata for ActiveEditMenu);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v6 = v3[2];
  uint64_t v7 = v3[3];
  uint64_t v9 = v3[4];
  uint64_t v8 = (void *)v3[5];
  outlined init with take of ActiveEditMenu?((uint64_t)a1, (uint64_t)v3, &lazy cache variable for type metadata for ActiveEditMenu?, (uint64_t)&type metadata for ActiveEditMenu);
  outlined retain of ActiveEditMenu?(v11, (void (*)(void, void, void, void, void, void, void))outlined copy of ActiveEditMenu?);
  outlined retain of ActiveEditMenu?(a1, (void (*)(void, void, void, void, void, void, void))outlined copy of ActiveEditMenu?);
  outlined consume of ActiveEditMenu?(v4, v5, v6, v7, v9, v8);
  EditMenuBridge.presentedMenu.didset(v11);
  outlined retain of ActiveEditMenu?(a1, (void (*)(void, void, void, void, void, void, void))outlined consume of ActiveEditMenu?);
  return outlined retain of ActiveEditMenu?(v11, (void (*)(void, void, void, void, void, void, void))outlined consume of ActiveEditMenu?);
}

void EditMenuBridge.presentMenu(_:)(unsigned int *a1)
{
  uint64_t v3 = *a1;
  long long v40 = *(_OWORD *)(a1 + 2);
  uint64_t v4 = *((void *)a1 + 3);
  char v5 = *((unsigned char *)a1 + 32);
  uint64_t v6 = *((void *)a1 + 5);
  uint64_t v7 = direct field offset for EditMenuBridge.interaction;
  uint64_t v8 = *(void **)(v1 + direct field offset for EditMenuBridge.interaction);
  if (v8)
  {
    id v9 = *(id *)(v1 + direct field offset for EditMenuBridge.interaction);
  }
  else
  {
    id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1758]), sel_initWithDelegate_, v1);
    uint64_t v11 = MEMORY[0x18C119DF0](v1 + direct field offset for EditMenuBridge.host);
    if (!v11)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      return;
    }
    uint64_t v12 = (void *)v11;
    id v9 = v10;
    objc_msgSend(v12, sel_addInteraction_, v9);

    uint64_t v13 = *(void **)(v1 + v7);
    *(void *)(v1 + v7) = v9;

    uint64_t v8 = 0;
  }
  id v14 = v8;
  AGGraphClearUpdate();
  closure #1 in EditMenuBridge.presentMenu(_:)(v1);
  AGGraphSetUpdate();
  type metadata accessor for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBB718]);
  Anchor.convert(to:)();
  swift_release();
  if (v42)
  {
LABEL_6:

    return;
  }
  uint64_t v38 = v4;
  uint64_t v39 = v3;
  CGPoint origin = v41.origin;
  CGSize size = v41.size;
  uint64_t v17 = *((void *)a1 + 1);
  uint64_t v18 = specialized EditMenuBridge.attributedString(from:in:)(v17);
  uint64_t v19 = (void *)v18;
  uint64_t v20 = (uint64_t *)(v1 + direct field offset for EditMenuBridge.presentedMenu);
  unsigned int v21 = *(void **)(v1 + direct field offset for EditMenuBridge.presentedMenu + 40);
  if (v21 != (void *)1)
  {
    uint64_t v29 = v20[6];
    uint64_t v30 = *v20;
    outlined copy of ActiveEditMenu?(*v20, v20[1], v20[2], v20[3], v20[4], *(void **)(v1 + direct field offset for EditMenuBridge.presentedMenu + 40));
    swift_retain();
    id v31 = v19;

    id v32 = v31;
    uint64_t v43 = v30;
    CGRect v44 = v41;
    uint64_t v45 = (uint64_t)v19;
    uint64_t v46 = v29;
    EditMenuBridge.presentedMenu.setter(&v43);
    objc_msgSend(v9, sel_reloadVisibleMenu);
    swift_release();

    return;
  }
  uint64_t v43 = *a1;
  CGRect v44 = v41;
  uint64_t v45 = v18;
  uint64_t v46 = v17;
  swift_retain();
  id v22 = v19;
  EditMenuBridge.presentedMenu.setter(&v43);
  if (v17)
  {
    uint64_t v23 = v1 + direct field offset for EditMenuBridge.lastEditMenuPresentation;
    uint64_t v24 = *(void *)(v1 + direct field offset for EditMenuBridge.lastEditMenuPresentation);
    uint64_t v25 = *(void *)(v1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 8);
    uint64_t v26 = *(void *)(v1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 16);
    uint64_t v27 = *(void *)(v1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 24);
    *(void *)uint64_t v23 = v39;
    *(_OWORD *)(v23 + 8) = v40;
    *(void *)(v23 + 24) = v38;
    *(void *)(v23 + 32) = v5 & 1;
    *(void *)(v23 + 40) = v6;
    outlined consume of EditMenuPresentation?(v24, v25, v26, v27);
    if (v20[5] != 1)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIEditMenuConfiguration);
      v41.origin.x = *((CGFloat *)a1 + 2);
      swift_retain();
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v41);
      lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
      swift_retain();
      swift_retain();
      AnyHashable.init<A>(_:)();
      v47.CGPoint origin = origin;
      v47.CGSize size = size;
      CGRectGetWidth(v47);
      v48.CGPoint origin = origin;
      v48.CGSize size = size;
      CGRectGetHeight(v48);
      uint64_t v28 = (void *)UIEditMenuConfiguration.init(identifier:sourcePoint:)();
      objc_msgSend(v9, sel_presentEditMenuWithConfiguration_, v28);

      return;
    }
    goto LABEL_18;
  }
  double v33 = CGRectGetWidth(v41) * 0.5 + v41.origin.x;
  CGFloat Height = CGRectGetHeight(v41);
  unint64_t v35 = EditMenuBridge.editMenuResponder(at:)(v33, Height * 0.5 + v41.origin.y);
  if (v35)
  {
    uint64_t v36 = EditMenuBridge.configurationFromResponder(_:)((uint64_t)v35);
    if (!v36)
    {
      swift_release();

      goto LABEL_6;
    }
    uint64_t v37 = (void *)v36;
    objc_msgSend(v9, sel_presentEditMenuWithConfiguration_, v36);

    swift_release();
  }
  else
  {
  }
}

uint64_t EditMenuBridge.outermostResponder()()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for EditMenuBridge.host);
  if (result)
  {
    char v2 = (void *)result;
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    uint64_t v3 = ViewRendererHost.responderNode.getter();

    if (v3)
    {
      MEMORY[0x1F4188790](v4);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
      return 0;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in EditMenuBridge.outermostResponder()@<X0>(uint64_t *a1@<X1>, char *a2@<X8>)
{
  type metadata accessor for EditMenuResponder();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    *a1 = result;
    swift_retain();
    uint64_t result = swift_release();
    char v5 = 2;
  }
  else
  {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

uint64_t EditMenuBridge.configurationFromResponder(_:)(uint64_t result)
{
  if (*(void *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 40) == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v2 = result;
    type metadata accessor for UIKitEditMenuConfiguration();
    lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
    AnyHashable.init<A>(_:)();
    uint64_t v3 = UIEditMenuConfiguration.init(identifier:sourcePoint:)();
    *(void *)(v3 + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder) = v2;
    swift_release();
    swift_retain();
    return v3;
  }
  return result;
}

void *EditMenuBridge.editMenuResponder(at:)(double a1, double a2)
{
  uint64_t v5 = v2 + direct field offset for EditMenuBridge.host;
  uint64_t result = (void *)MEMORY[0x18C119DF0](v5);
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v7 = result;
  objc_msgSend(result, sel_convertPoint_toView_, 0, a1, a2);

  uint64_t result = (void *)MEMORY[0x18C119DF0](v5);
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v8 = result;
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  uint64_t v9 = ViewRendererHost.responderNode.getter();

  uint64_t result = 0;
  if (v9)
  {
    type metadata accessor for ViewResponder();
    if (swift_dynamicCastClass())
    {
      uint64_t v10 = ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)();
      swift_release();
      uint64_t result = 0;
      if (v10)
      {
        type metadata accessor for EditMenuResponder();
        ResponderNode.firstAncestor<A>(ofType:)();
        swift_release();
        return 0;
      }
    }
    else
    {
      swift_release();
      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in EditMenuBridge.presentMenu(_:)(uint64_t a1)
{
  uint64_t result = MEMORY[0x18C119DF0](a1 + direct field offset for EditMenuBridge.host);
  if (result)
  {
    uint64_t v2 = (void *)result;
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();

    ViewGraph.transform.getter();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t @objc EditMenuBridge.editMenuInteraction(_:targetRectFor:)()
{
  return specialized EditMenuBridge.editMenuInteraction(_:targetRectFor:)();
}

void closure #1 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, void *a2)
{
  id v3 = objc_msgSend(self, sel_generalPasteboard);
  type metadata accessor for ActiveEditMenu?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_188351940;
  *(void *)(v4 + 32) = a2;
  specialized Array._endMutation()();
  type metadata accessor for NSItemProviderWriting();
  id v5 = a2;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setObjects_, isa);
}

void EditMenuBridge.share()()
{
  uint64_t v1 = (uint64_t *)(v0 + direct field offset for EditMenuBridge.presentedMenu);
  uint64_t v2 = *(void **)(v0 + direct field offset for EditMenuBridge.presentedMenu + 40);
  if (v2 != (void *)1 && v2 != 0)
  {
    uint64_t v4 = *v1;
    uint64_t v22 = v1[1];
    uint64_t v5 = v1[2];
    uint64_t v6 = v1[3];
    uint64_t v7 = v1[4];
    uint64_t v8 = v1[6];
    type metadata accessor for ActiveEditMenu?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_18834BB80;
    *(void *)(v9 + 56) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    *(void *)(v9 + 32) = v2;
    id v10 = objc_allocWithZone(MEMORY[0x1E4F42718]);
    id v20 = v2;
    uint64_t v21 = v8;
    outlined copy of ActiveEditMenu?(v4, v22, v5, v6, v7, v2);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v12 = objc_msgSend(v10, sel_initWithActivityItems_applicationActivities_, isa, 0, v20, v4, v21);

    type metadata accessor for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<UIActivityType>, (uint64_t (*)(uint64_t))type metadata accessor for UIActivityType, MEMORY[0x1E4FBBE00]);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_18834BB80;
    id v14 = (void *)*MEMORY[0x1E4F43620];
    *(void *)(v13 + 32) = *MEMORY[0x1E4F43620];
    type metadata accessor for UIActivityType(0);
    id v15 = v14;
    Class v16 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_setExcludedActivityTypes_, v16);

    id v17 = objc_msgSend(v12, sel_popoverPresentationController);
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v19 = (void *)MEMORY[0x18C119DF0](v0 + direct field offset for EditMenuBridge.host);
      objc_msgSend(v18, sel_setSourceView_, v19);

      objc_msgSend(v18, sel_setSourceRect_, *(double *)&v22, *(double *)&v5, *(double *)&v6, *(double *)&v7);
    }
    if (MEMORY[0x18C119DF0](v0 + direct field offset for EditMenuBridge.host)) {
      _UIHostingView.viewController.getter();
    }
    __break(1u);
  }
}

void closure #2 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v6 = a2 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x18C119DF0](v6);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    a5();
  }
}

void EditMenuBridge.lookup()()
{
  uint64_t v1 = (uint64_t *)(v0 + direct field offset for EditMenuBridge.presentedMenu);
  uint64_t v2 = *(void **)(v0 + direct field offset for EditMenuBridge.presentedMenu + 40);
  if (v2 != (void *)1 && v2 != 0)
  {
    uint64_t v4 = *v1;
    uint64_t v5 = v1[1];
    uint64_t v6 = v1[2];
    uint64_t v7 = v1[3];
    uint64_t v8 = v1[4];
    uint64_t v9 = v1[6];
    id v10 = v2;
    outlined copy of ActiveEditMenu?(v4, v5, v6, v7, v8, v2);
    id v11 = objc_msgSend(v10, sel_string, v10, v4, v9);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    id v15 = objc_allocWithZone(MEMORY[0x1E4FB1B50]);
    Class v16 = (void *)MEMORY[0x18C115780](v12, v14);
    swift_bridgeObjectRelease();
    id v17 = objc_msgSend(v15, sel_initWithTerm_, v16);

    id v18 = objc_msgSend(v17, sel_popoverPresentationController);
    if (v18)
    {
      uint64_t v19 = v18;
      id v20 = (void *)MEMORY[0x18C119DF0](v0 + direct field offset for EditMenuBridge.host);
      objc_msgSend(v19, sel_setSourceView_, v20);

      objc_msgSend(v19, sel_setSourceRect_, *(double *)&v5, *(double *)&v6, *(double *)&v7, *(double *)&v8);
    }
    if (MEMORY[0x18C119DF0](v0 + direct field offset for EditMenuBridge.host)) {
      _UIHostingView.viewController.getter();
    }
    __break(1u);
  }
}

id @objc EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  uint64_t v9 = (void *)specialized EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(v7);

  return v9;
}

uint64_t closure #1 in EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)(uint64_t result)
{
  if (*(void *)(result + direct field offset for EditMenuBridge.lastEditMenuPresentation + 24))
  {
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void @objc EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
}

uint64_t closure #1 in EditMenuBridge.editMenuInteraction(_:willDismissMenuFor:animator:)(uint64_t a1)
{
  uint64_t v1 = a1 + direct field offset for EditMenuBridge.lastEditMenuPresentation;
  if (*(void *)(a1 + direct field offset for EditMenuBridge.lastEditMenuPresentation + 24))
  {
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    uint64_t v2 = *(void *)(v1 + 24);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  *(_OWORD *)uint64_t v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  return outlined consume of EditMenuPresentation?(v3, v4, v5, v2);
}

void @objc EditMenuBridge.editMenuInteraction(_:willDismissMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
}

void @objc EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id))
{
  id v9 = a3;
  id v10 = a4;
  swift_unknownObjectRetain();
  id v11 = a1;
  a6(v10);

  swift_unknownObjectRelease();
}

uint64_t type metadata accessor for UIKitEditMenuConfiguration()
{
  return self;
}

uint64_t partial apply for closure #1 in EditMenuBridge.outermostResponder()@<X0>(char *a1@<X8>)
{
  return closure #1 in EditMenuBridge.outermostResponder()(*(uint64_t **)(v1 + 16), a1);
}

uint64_t specialized EditMenuBridge.attributedString(from:in:)(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for ResolvableStringResolutionContext();
  double v4 = MEMORY[0x1F4188790](v3 - 8);
  id v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1) {
    return 0;
  }
  uint64_t result = MEMORY[0x18C119DF0](v1 + direct field offset for EditMenuBridge.host, v4);
  if (result)
  {
    id v8 = (void *)result;
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    swift_retain();

    GraphHost.environment.getter();
    swift_release();
    v11[0] = v11[1];
    ResolvableStringResolutionContext.init(environment:maximumWidth:)();
    id v9 = (void *)ResolvedStyledText.resolvedContent(in:)();
    outlined destroy of ResolvableStringResolutionContext((uint64_t)v6);
    if (v9)
    {
      dispatch thunk of ResolvedStyledText.drawingScale(size:)();
      uint64_t v10 = NSAttributedString.scaled(by:)();

      swift_release();
      return v10;
    }
    swift_release();
    return 0;
  }
  __break(1u);
  return result;
}

uint64_t specialized EditMenuBridge.editMenuInteraction(_:targetRectFor:)()
{
  if (*(void *)(v0 + direct field offset for EditMenuBridge.presentedMenu + 40) == 1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = 0;
  double v4 = (uint64_t *)(v2 + direct field offset for EditMenuBridge.presentedMenu);
  uint64_t v5 = *(void **)(v2 + direct field offset for EditMenuBridge.presentedMenu + 40);
  if (v5 != (void *)1)
  {
    uint64_t v8 = *v4;
    uint64_t v7 = v4[1];
    uint64_t v9 = v4[2];
    uint64_t v10 = v4[3];
    uint64_t v11 = v4[4];
    uint64_t v12 = v4[6];
    uint64_t v13 = (UIMenu *)MEMORY[0x1E4FBC860];
    UIMenuElementSize preferredElementSize = MEMORY[0x1E4FBC860];
    type metadata accessor for UIKitEditMenuConfiguration();
    uint64_t v14 = swift_dynamicCastClass();
    if (v14)
    {
      if (*(void *)(v14 + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder))
      {
        id v15 = a1;
        swift_retain();
        outlined copy of ActiveEditMenu?(v8, v7, v9, v10, v11, v5);
        type metadata accessor for ActiveEditMenu?(0, &lazy cache variable for type metadata for PlatformItemList?, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4FBB718]);
        static Update.ensure<A>(_:)();
        if (v48) {
          uint64_t v16 = v48;
        }
        else {
          uint64_t v16 = (uint64_t)v13;
        }
        if (*(void *)(v16 + 16))
        {
          uint64_t v45 = v11;
          uint64_t v46 = v10;
          uint64_t v47 = v9;
          v50[0] = (uint64_t)v13;
          specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v13);
          type metadata accessor for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
          uint64_t v17 = type metadata accessor for MenuVisitor.MenuStackGroup();
          unint64_t v18 = (*(unsigned __int8 *)(*(void *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80);
          uint64_t v19 = swift_allocObject();
          *(_OWORD *)(v19 + 16) = xmmword_18834BB80;
          uint64_t v20 = v19 + v18;
          if (one-time initialization token for empty != -1) {
            swift_once();
          }
          uint64_t v21 = __swift_project_value_buffer(v17, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
          outlined init with copy of MenuVisitor.MenuStackGroup(v21, v20);
          MenuVisitor.visit(_:uniqueNames:)(v16, v50);
          swift_bridgeObjectRelease();

          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          UIMenuElementSize preferredElementSize = (UIMenuElementSize)v13;
          uint64_t v10 = v46;
          uint64_t v9 = v47;
          uint64_t v11 = v45;
        }
        else
        {

          swift_release();
          swift_bridgeObjectRelease();
          UIMenuElementSize preferredElementSize = MEMORY[0x1E4FBC860];
        }
      }
      else
      {
        swift_retain();
        id v23 = v5;
        UIMenuElementSize preferredElementSize = MEMORY[0x1E4FBC860];
      }
    }
    else
    {
      if (v12)
      {
        if (v5)
        {
          swift_retain();
          id v22 = v5;
          id v43 = v22;
        }
        else
        {
          id v25 = objc_allocWithZone(MEMORY[0x1E4F28B18]);
          swift_retain();
          id v43 = objc_msgSend(v25, sel_init);
          id v22 = 0;
        }
        id v26 = v22;
        uint64_t v27 = static Text.System.uiCopy.getter();
        uint64_t v29 = v28;
        char v31 = v30;
        uint64_t v44 = v2 + direct field offset for EditMenuBridge.host;
        uint64_t v32 = MEMORY[0x18C119DF0]();
        if (v32)
        {
          double v33 = (void *)v32;
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
          specialized _UIHostingView.viewGraph.getter();
          swift_retain();

          GraphHost.environment.getter();
          swift_release();
          v50[0] = v48;
          v50[1] = v49;
          Text.resolveString(in:with:idiom:)();
          outlined consume of Text.Storage(v27, v29, v31 & 1);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          *(void *)(swift_allocObject() + 16) = v43;
          v43;
          uint64_t v34 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
          MEMORY[0x18C115B40](v34, v35, v36, v37, v38);
          if (*(void *)((preferredElementSize & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((preferredElementSize & 0xFFFFFFFFFFFFFF8)
                                                                                             + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          if (MEMORY[0x18C119DF0](v44)) {
            _UIHostingView.viewController.getter();
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        JUMPOUT(0x187A895D0);
      }
      id v24 = v5;
    }
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
    v39._countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    v52.value.super.Class isa = 0;
    v52.is_nil = 0;
    UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)((UIMenu *)preferredElementSize, v39, (Swift::String_optional)0, v52, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v42);
    uint64_t v3 = v40;
    outlined consume of ActiveEditMenu?(v8, v7, v9, v10, v11, v5);
  }
  return v3;
}

uint64_t specialized EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)(void *a1)
{
  type metadata accessor for UIKitEditMenuConfiguration();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    if (!*(void *)(result + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder)) {
      return result;
    }
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    *(unsigned char *)(v5 + 24) = 1;
    id v6 = a1;
    swift_retain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();

    swift_release();
  }
  else
  {
    *(void *)(swift_allocObject() + 16) = v1;
    id v7 = v1;
    static Update.enqueueAction(_:)();
  }

  return swift_release();
}

void *specialized EditMenuBridge.editMenuInteraction(_:willDismissMenuFor:animator:)(void *a1)
{
  type metadata accessor for UIKitEditMenuConfiguration();
  uint64_t v3 = swift_dynamicCastClass();
  if (!v3)
  {
    *(void *)(swift_allocObject() + 16) = v1;
    id v7 = v1;
    static Update.enqueueAction(_:)();
    goto LABEL_5;
  }
  if (*(void *)(v3 + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder))
  {
    uint64_t v4 = swift_allocObject();
    swift_weakInit();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    *(unsigned char *)(v5 + 24) = 0;
    id v6 = a1;
    swift_retain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();

    swift_release();
LABEL_5:
    swift_release();
  }
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  long long v11 = xmmword_18834FC50;
  return EditMenuBridge.presentedMenu.setter(v9);
}

uint64_t sub_187A89868()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EditMenuBridge.editMenuInteraction(_:willDismissMenuFor:animator:)()
{
  return closure #1 in EditMenuBridge.editMenuInteraction(_:willDismissMenuFor:animator:)(*(void *)(v0 + 16));
}

uint64_t sub_187A898A8()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EditMenuResponder.setPresentationState(to:)()
{
  return closure #1 in EditMenuResponder.setPresentationState(to:)();
}

void *outlined retain of ActiveEditMenu?(void *a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t partial apply for closure #1 in EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)()
{
  return closure #1 in EditMenuBridge.editMenuInteraction(_:willPresentMenuFor:animator:)(*(void *)(v0 + 16));
}

uint64_t sub_187A89934()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  closure #1 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(a1, *(void **)(v1 + 16));
}

uint64_t sub_187A89974()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187A899AC()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  closure #2 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(a1, v1[4], v1[2], v1[3], EditMenuBridge.share());
}

void partial apply for closure #3 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(uint64_t a1)
{
  closure #2 in EditMenuBridge.editMenuInteraction(_:menuFor:suggestedActions:)(a1, v1[4], v1[2], v1[3], EditMenuBridge.lookup());
}

uint64_t outlined init with copy of MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MenuVisitor.MenuStackGroup();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSItemProviderWriting()
{
  unint64_t result = lazy cache variable for type metadata for NSItemProviderWriting;
  if (!lazy cache variable for type metadata for NSItemProviderWriting)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSItemProviderWriting);
  }
  return result;
}

uint64_t sub_187A89B08()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of ActiveEditMenu?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for ActiveEditMenu?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t outlined copy of EditMenuPresentation?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

void type metadata accessor for ActiveEditMenu?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined init with take of EditMenuPresentation.Kind(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined destroy of ResolvableStringResolutionContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ResolvableStringResolutionContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in ToolbarMakeEntries.init<A, B>(placement:toolbarItem:viewList:inputs:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for ToolbarItem();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t protocol witness for Rule.value.getter in conformance PreferenceTransform@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  type metadata accessor for [ToolbarStorage.Entry](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB320]);
  uint64_t v2 = *(void *)AGGraphGetValue();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #1 in PreferenceTransform.value.getter;
  *(void *)(v4 + 24) = v3;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))v4;

  return swift_bridgeObjectRetain();
}

uint64_t ToolbarItem<>.init(id:placement:showsByDefault:isEmpty:defaultItemKind:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, void (*a6)(uint64_t)@<X6>, uint64_t a7@<X7>, void *a8@<X8>, uint64_t a9)
{
  uint64_t v25 = a7;
  id v26 = a6;
  int v23 = a4;
  int v24 = a5;
  uint64_t v13 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](a1);
  id v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = *v16;
  unint64_t v18 = (int *)type metadata accessor for ToolbarItem();
  uint64_t v19 = v18[15];
  *a8 = a1;
  a8[1] = a2;
  uint64_t v20 = outlined init with copy of ToolbarItemPlacement(a3, (uint64_t)(a8 + 2));
  *((unsigned char *)a8 + v18[13]) = v23;
  *((unsigned char *)a8 + v18[14]) = v24;
  *((unsigned char *)a8 + v19) = v17;
  v26(v20);
  outlined destroy of ToolbarItemPlacement(a3);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))((char *)a8 + v18[12], v15, a9);
}

uint64_t ToolbarItem<>.init(id:placement:showsByDefault:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  outlined init with copy of ToolbarItemPlacement(a3, (uint64_t)v17);
  ToolbarItem<>.init(id:placement:showsByDefault:isEmpty:defaultItemKind:content:)(a1, a2, (uint64_t)v17, a4, 0, a5, a6, a8, a7);
  return outlined destroy of ToolbarItemPlacement(a3);
}

uint64_t ToolbarItem<>.id.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in <> ToolbarItem<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return *(void *)(a3 - 8);
}

uint64_t *initializeBufferWithCopyOfBuffer for ToolbarItem(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  unsigned int v11 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (v10 + ((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 41) & ~v9) + 3 <= 0x18 ? (BOOL v12 = v11 > 7) : (BOOL v12 = 1), v12))
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v14 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(unsigned char *)(v15 + 40) == 1)
    {
      uint64_t v16 = *(void *)(v15 + 24);
      *(void *)(v14 + 24) = v16;
      *(void *)(v14 + 32) = *(void *)(v15 + 32);
      (**(void (***)(unint64_t, unint64_t))(v16 - 8))(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8, v15);
      *(unsigned char *)(v14 + 40) = 1;
    }
    else
    {
      long long v18 = *(_OWORD *)v15;
      long long v19 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)(v14 + 25) = *(_OWORD *)(v15 + 25);
      *(_OWORD *)unint64_t v14 = v18;
      *(_OWORD *)(v14 + 16) = v19;
    }
    uint64_t v20 = v15 + v9;
    uint64_t v21 = (v14 + v9 + 41) & v13;
    uint64_t v22 = (v20 + 41) & v13;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v21, v22, v7);
    int v23 = (unsigned char *)(v21 + v10);
    *int v23 = *(unsigned char *)(v22 + v10);
    v23[1] = *(unsigned char *)(v22 + v10 + 1);
    v23[2] = *(unsigned char *)(v22 + v10 + 2);
  }
  return v4;
}

uint64_t initializeWithTake for ToolbarItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32) + 7;
  uint64_t v8 = (_OWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (_OWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = *(_OWORD *)((char *)v9 + 25);
  long long v11 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v11;
  *(_OWORD *)((char *)v8 + 25) = v10;
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v13 = v12 + 32;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = ((unint64_t)v8 + v14 + 41) & ~v14;
  uint64_t v16 = ((unint64_t)v9 + v14 + 41) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 32);
  long long v18 = (unsigned char *)(v17 + v15);
  long long v19 = (unsigned char *)(v17 + v16);
  *long long v18 = *v19;
  v18[1] = v19[1];
  void v18[2] = v19[2];
  return a1;
}

uint64_t assignWithTake for ToolbarItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24) + 7;
  uint64_t v8 = (_OWORD *)((v7 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (_OWORD *)((v7 + a2) & 0xFFFFFFFFFFFFFFF8);
  if (v8 != v9)
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v8);
    long long v10 = *(_OWORD *)((char *)v9 + 25);
    long long v11 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v11;
    *(_OWORD *)((char *)v8 + 25) = v10;
  }
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v13 = v12 + 40;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = ((unint64_t)v8 + v14 + 41) & ~v14;
  uint64_t v16 = ((unint64_t)v9 + v14 + 41) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 24);
  long long v18 = (unsigned char *)(v15 + v17);
  long long v19 = (unsigned char *)(v16 + v17);
  *long long v18 = *v19;
  v18[1] = v19[1];
  void v18[2] = v19[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarItem(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v4 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(v6 + 64);
  if (v5 <= v7) {
    unsigned int v11 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v11 = *(_DWORD *)(v4 + 84);
  }
  if (v11 <= 0xFE) {
    unsigned int v11 = 254;
  }
  if (!a2) {
    return 0;
  }
  int v12 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_27;
  }
  unint64_t v13 = v10 + ((v9 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 41) & ~v9) + 3;
  char v14 = 8 * v13;
  if (v13 != 3
    && v10 + ((v9 + ((v8 + 7) & 0xFFFFFFF8) + 41) & ~v9) < 0xFFFFFFFD)
  {
    goto LABEL_10;
  }
  unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
  if (HIWORD(v16))
  {
    int v15 = *(_DWORD *)((char *)a1 + v13);
    if (v15) {
      goto LABEL_17;
    }
  }
  else
  {
    if (v16 <= 0xFF)
    {
      if (v16 < 2) {
        goto LABEL_27;
      }
LABEL_10:
      int v15 = *((unsigned __int8 *)a1 + v13);
      if (!*((unsigned char *)a1 + v13)) {
        goto LABEL_27;
      }
LABEL_17:
      int v17 = (v15 - 1) << v14;
      if (v13 > 3) {
        int v17 = 0;
      }
      if (v10 + ((v9 + ((v8 + 7) & 0xFFFFFFF8) + 41) & ~v9) == -3)
      {
        int v19 = 0;
      }
      else
      {
        if (v13 <= 3) {
          int v18 = v10 + ((v9 + ((v8 + 7) & 0xFFFFFFF8) + 41) & ~v9) + 3;
        }
        else {
          int v18 = 4;
        }
        switch(v18)
        {
          case 2:
            int v19 = *a1;
            break;
          case 3:
            int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v19 = *(_DWORD *)a1;
            break;
          default:
            int v19 = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v11 + (v19 | v17) + 1;
    }
    int v15 = *(unsigned __int16 *)((char *)a1 + v13);
    if (*(unsigned __int16 *)((char *)a1 + v13)) {
      goto LABEL_17;
    }
  }
LABEL_27:
  if (v5 == v11) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v21 = ((((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + v9 + 41) & ~v9;
  if (v7 == v11) {
    return (*(uint64_t (**)(unint64_t))(v6 + 48))(v21);
  }
  unsigned int v22 = *(unsigned __int8 *)(v21 + v10);
  if (v22 < 2) {
    return 0;
  }
  return ((v22 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for ToolbarItem(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v7 <= v9) {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0xFE) {
    unsigned int v13 = 254;
  }
  size_t v14 = v12 + ((v11 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 41) & ~v11) + 3;
  BOOL v15 = a3 >= v13;
  unsigned int v16 = a3 - v13;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v13 < a2)
  {
    unsigned int v18 = ~v13 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v12 + ((v11 + ((v10 + 7) & 0xFFFFFFF8) + 41) & ~v11) != -3)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_45;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_45:
      __break(1u);
      JUMPOUT(0x187A8AAC0);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v7 == v13)
        {
          unsigned int v22 = *(void (**)(void))(v6 + 56);
          v22();
        }
        else
        {
          unint64_t v23 = (((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8) + v11 + 41) & ~v11;
          if (v9 == v13)
          {
            int v24 = *(void (**)(unint64_t))(v8 + 56);
            v24(v23);
          }
          else
          {
            *(unsigned char *)(v23 + v12) = a2 + 1;
          }
        }
      }
      return;
  }
}

void destroy for ToolbarMakeEntries(uint64_t a1)
{
}

uint64_t assignWithCopy for ToolbarMakeEntries(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v4 = *(void **)(a2 + 56);
  unsigned int v5 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v4;
  id v6 = v4;

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  return a1;
}

uint64_t assignWithTake for ToolbarMakeEntries(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  uint64_t v4 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarMakeEntries(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarMakeEntries(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarMakeEntries()
{
  return &type metadata for ToolbarMakeEntries;
}

uint64_t sub_187A8ACE0()
{
  return EnvironmentValues.toolbarCustomizationBehavior.setter();
}

uint64_t sub_187A8AD18@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.toolbarCustomizationVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187A8AD54()
{
  return EnvironmentValues.toolbarCustomizationVisibility.setter();
}

uint64_t sub_187A8AD7C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.toolbarItemIsHidden.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187A8ADBC()
{
  return EnvironmentValues.toolbarItemIsHidden.setter();
}

uint64_t sub_187A8ADE8()
{
  return EnvironmentValues.toolbarCustomizationOptions.setter();
}

uint64_t sub_187A8AE20()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187A8AE58()
{
  swift_release();

  return swift_deallocObject();
}

void *type metadata accessor for PreferenceTransform()
{
  return &unk_1ED42D580;
}

double GroupedListStyle.init()@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

void static GroupedListStyle._sectionInset(_:)(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(double *)(a1 + 16) = a4;
  *(double *)(a1 + 24) = a5;
  *(unsigned char *)(a1 + 32) = 0;
}

uint64_t static GroupedListStyle._makeView<A>(value:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

void type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>)
  {
    type metadata accessor for StyleContextWriter<GroupedListStyleContext>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>);
    }
  }
}

void type metadata accessor for StyleContextWriter<GroupedListStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextWriter<GroupedListStyleContext>)
  {
    lazy protocol witness table accessor for type GroupedListStyleContext and conformance GroupedListStyleContext();
    unint64_t v0 = type metadata accessor for StyleContextWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<GroupedListStyleContext>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GroupedListStyleContext and conformance GroupedListStyleContext()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupedListStyleContext and conformance GroupedListStyleContext;
  if (!lazy protocol witness table cache variable for type GroupedListStyleContext and conformance GroupedListStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupedListStyleContext and conformance GroupedListStyleContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupedListStyleContext and conformance GroupedListStyleContext;
  if (!lazy protocol witness table cache variable for type GroupedListStyleContext and conformance GroupedListStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupedListStyleContext and conformance GroupedListStyleContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>();
    lazy protocol witness table accessor for type StyleContextWriter<GroupedListStyleContext> and conformance StyleContextWriter<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<GroupedListStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<GroupedListStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<GroupedListStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<GroupedListStyleContext>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<GroupedListStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t type metadata accessor for GroupedListStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static GroupedListStyle._makeViewList<A>(value:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t GroupedListStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ListValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t GroupedListStyle.Body.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v17[-v10];
  v21[0] = &type metadata for GroupedListStyle;
  v21[1] = a2;
  _OWORD v21[2] = &protocol witness table for GroupedListStyle;
  v21[3] = a3;
  uint64_t v12 = type metadata accessor for _ListValue();
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  BOOL v15 = &v17[-v14];
  GroupedListStyle.Body.base.getter((uint64_t)&v17[-v14]);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v11, &v15[*(int *)(v13 + 60)], v8);
  GroupedListStyle.Body.insetMode.getter(a2, a3, (uint64_t)v21);
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  int v20 = a1;
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>();
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  swift_getWitnessTable();
  return InsettableGroupedListBody.init(selection:insetMode:content:)((uint64_t)v11, (uint64_t)v21, (uint64_t (*)(uint64_t))partial apply for closure #1 in GroupedListStyle.Body.value.getter, a4);
}

uint64_t GroupedListStyle.Body.insetMode.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v14[0] = &type metadata for GroupedListStyle;
  v14[1] = a1;
  v14[2] = &protocol witness table for GroupedListStyle;
  v14[3] = a2;
  uint64_t v4 = type metadata accessor for _ListValue();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned int v7 = (char *)v14 - v6;
  GroupedListStyle.Body.base.getter((uint64_t)v14 - v6);
  uint64_t v9 = *(void *)v7;
  uint64_t v8 = *((void *)v7 + 1);
  uint64_t v10 = *((void *)v7 + 2);
  uint64_t v11 = *((void *)v7 + 3);
  int v12 = v7[32];
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v12 == 1)
  {
    uint64_t result = static SemanticFeature.isEnabled.getter();
    uint64_t v8 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v9 = ~result & 1;
  }
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v10;
  *(void *)(a3 + 24) = v11;
  *(unsigned char *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 33) = v12;
  return result;
}

uint64_t closure #1 in GroupedListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = &type metadata for GroupedListStyle;
  v8[1] = a2;
  v8[2] = &protocol witness table for GroupedListStyle;
  v8[3] = a3;
  uint64_t v3 = type metadata accessor for _ListValue();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - v5;
  GroupedListStyle.Body.base.getter((uint64_t)v8 - v5);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance GroupedListStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>>();
  type metadata accessor for SelectionManagerBox();
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<GroupedListStyleContext>> and conformance <> ModifiedContent<A, B>();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for InsettableGroupedListBody();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance GroupedListStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return GroupedListStyle.Body.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t storeEnumTagSinglePayload for GroupedListStyle(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 33) = v3;
  return result;
}

ValueMetadata *type metadata accessor for GroupedListStyle()
{
  return &type metadata for GroupedListStyle;
}

unint64_t instantiation function for generic protocol witness table for GroupedListStyleContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GroupedListStyleContext and conformance GroupedListStyleContext();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in GroupedListStyle.Body<A>()
{
  return swift_getWitnessTable();
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance GroupedListStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type GroupedListStyleContext and conformance GroupedListStyleContext();

  return specialized static ListStyleContext.accepts<A>(_:at:)(a4, a3);
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance GroupedListStyleContext(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  if (a2) {
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  }
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

uint64_t partial apply for closure #1 in GroupedListStyle.Body.value.getter()
{
  return closure #1 in GroupedListStyle.Body.value.getter(*(unsigned int *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t closure #1 in Sequence<>.sorted(with:explicitPriorityOnly:parentVisibility:)(uint64_t *a1, uint64_t *a2, char a3, char a4, unsigned __int8 a5)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *a2;
  double v10 = COERCE_DOUBLE(AccessibilityNode.sortPriority.getter());
  double v12 = 0.0;
  if (v11) {
    double v13 = 0.0;
  }
  else {
    double v13 = v10;
  }
  double v14 = COERCE_DOUBLE(AccessibilityNode.sortPriority.getter());
  if (v15)
  {
    if (v13 != 0.0) {
      goto LABEL_6;
    }
  }
  else
  {
    double v12 = v14;
    if (v13 != v14)
    {
LABEL_6:
      char v16 = v12 < v13;
      return v16 & 1;
    }
  }
  if (a3)
  {
LABEL_9:
    char v16 = 0;
    return v16 & 1;
  }
  AccessibilityNode.globalFrame.getter((uint64_t)v34);
  CGFloat v18 = *(double *)v34;
  CGFloat v19 = *(double *)&v34[1];
  CGFloat v20 = *(double *)&v34[2];
  CGFloat v21 = *(double *)&v34[3];
  AccessibilityNode.globalFrame.getter((uint64_t)v35);
  CGFloat v22 = *(double *)v35;
  CGFloat v23 = *(double *)&v35[1];
  CGFloat v24 = *(double *)&v35[2];
  CGFloat v25 = *(double *)&v35[3];
  outlined init with take of CGRect?((uint64_t)v34, (uint64_t)v51);
  if (v51[32])
  {
    LOBYTE(v49[0]) = a4;
    AccessibilityNode.contentFrame(with:)(v49, (uint64_t)v36);
    outlined init with take of CGRect?((uint64_t)v36, (uint64_t)v49);
    if (v50) {
      goto LABEL_9;
    }
    char v26 = 0;
    CGFloat v18 = v49[0];
    CGFloat v19 = v49[1];
    CGFloat v20 = v49[2];
    CGFloat v21 = v49[3];
  }
  else
  {
    outlined init with take of CGRect?((uint64_t)v35, (uint64_t)v49);
    char v26 = v50 ^ 1;
  }
  outlined init with take of CGRect?((uint64_t)v35, (uint64_t)v48);
  if (v48[32] == 1)
  {
    LOBYTE(v46[0]) = a4;
    AccessibilityNode.contentFrame(with:)(v46, (uint64_t)v37);
    outlined init with take of CGRect?((uint64_t)v37, (uint64_t)v46);
    if (v47) {
      goto LABEL_9;
    }
    CGFloat v22 = v46[0];
    CGFloat v23 = v46[1];
    CGFloat v24 = v46[2];
    CGFloat v25 = v46[3];
  }
  if (a5 == 2)
  {
    long long v42 = *(_OWORD *)(v8 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    EnvironmentValues.layoutDirection.getter();
    unsigned __int8 v27 = LOBYTE(v40[0]);
    long long v42 = *(_OWORD *)(v9 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    EnvironmentValues.layoutDirection.getter();
    if ((v27 ^ LOBYTE(v40[0]))) {
      a5 = 2;
    }
    else {
      a5 = v27;
    }
  }
  LOBYTE(v42) = a5;
  char v28 = CGRect.compare(to:layoutDirection:)((unsigned __int8 *)&v42, v22, v23, v24, v25, v18, v19, v20, v21);
  if (v28 == 2)
  {
    if ((v26 & 1) == 0) {
      goto LABEL_26;
    }
    LOBYTE(v42) = a4;
    AccessibilityNode.contentFrame(with:)(&v42, (uint64_t)v38);
    outlined init with take of CGRect?((uint64_t)v38, (uint64_t)&v42);
    if ((v45 & 1) != 0
      || (long long v29 = v42,
          CGFloat v30 = v43,
          CGFloat v31 = v44,
          LOBYTE(v40[0]) = a4,
          AccessibilityNode.contentFrame(with:)(v40, (uint64_t)v39),
          outlined init with take of CGRect?((uint64_t)v39, (uint64_t)v40),
          (v41 & 1) != 0))
    {
LABEL_26:
      char v16 = 1;
    }
    else
    {
      unsigned __int8 v33 = a5;
      char v32 = CGRect.compare(to:layoutDirection:)(&v33, v40[0], v40[1], v40[2], v40[3], *(CGFloat *)&v29, *((CGFloat *)&v29 + 1), v30, v31);
      char v16 = (v32 == 2) | v32;
    }
  }
  else
  {
    char v16 = v28 & 1;
  }
  return v16 & 1;
}

uint64_t CGRect.compare(to:layoutDirection:)(unsigned __int8 *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9)
{
  int v16 = *a1;
  double MinY = CGRectGetMinY(*(CGRect *)&a2);
  v35.origin.x = a6;
  v35.origin.y = a7;
  v35.size.width = a8;
  v35.size.height = a9;
  if (MinY >= CGRectGetMidY(v35)) {
    goto LABEL_22;
  }
  v36.origin.x = a6;
  v36.origin.y = a7;
  v36.size.width = a8;
  v36.size.height = a9;
  double MidY = CGRectGetMidY(v36);
  v37.origin.x = a2;
  v37.origin.y = a3;
  v37.size.width = a4;
  v37.size.height = a5;
  if (MidY >= CGRectGetMaxY(v37))
  {
LABEL_22:
    v38.origin.x = a6;
    v38.origin.y = a7;
    v38.size.width = a8;
    v38.size.height = a9;
    double v19 = CGRectGetMinY(v38);
    v39.origin.x = a2;
    v39.origin.y = a3;
    v39.size.width = a4;
    v39.size.height = a5;
    if (v19 >= CGRectGetMidY(v39)) {
      goto LABEL_15;
    }
    v40.origin.x = a2;
    v40.origin.y = a3;
    v40.size.width = a4;
    v40.size.height = a5;
    double v20 = CGRectGetMidY(v40);
    v41.origin.x = a6;
    v41.origin.y = a7;
    v41.size.width = a8;
    v41.size.height = a9;
    if (v20 >= CGRectGetMaxY(v41)) {
      goto LABEL_15;
    }
  }
  if (v16 == 2)
  {
LABEL_15:
    v54.origin.x = a6;
    v54.origin.y = a7;
    v54.size.width = a8;
    v54.size.height = a9;
    double v28 = CGRectGetMinY(v54);
    v55.origin.x = a2;
    v55.origin.y = a3;
    v55.size.width = a4;
    v55.size.height = a5;
    if (v28 < CGRectGetMinY(v55)) {
      return 1;
    }
    v56.origin.x = a6;
    v56.origin.y = a7;
    v56.size.width = a8;
    v56.size.height = a9;
    double MaxY = CGRectGetMaxY(v56);
    v57.origin.x = a2;
    v57.origin.y = a3;
    v57.size.width = a4;
    v57.size.height = a5;
    return MaxY < CGRectGetMaxY(v57);
  }
  uint64_t v21 = v16 & 1;
  v42.origin.x = a6;
  v42.origin.y = a7;
  v42.size.width = a8;
  v42.size.height = a9;
  double MinX = CGRectGetMinX(v42);
  v43.origin.x = a2;
  v43.origin.y = a3;
  v43.size.width = a4;
  v43.size.height = a5;
  if (CGRectGetMinX(v43) >= MinX) {
    goto LABEL_8;
  }
  v44.origin.x = a6;
  v44.origin.y = a7;
  v44.size.width = a8;
  v44.size.height = a9;
  double MaxX = CGRectGetMaxX(v44);
  v45.origin.x = a2;
  v45.origin.y = a3;
  v45.size.width = a4;
  v45.size.height = a5;
  if (CGRectGetMaxX(v45) >= MaxX)
  {
LABEL_8:
    v46.origin.x = a6;
    v46.origin.y = a7;
    v46.size.width = a8;
    v46.size.height = a9;
    double v24 = CGRectGetMinX(v46);
    v47.origin.x = a2;
    v47.origin.y = a3;
    v47.size.width = a4;
    v47.size.height = a5;
    if (v24 < CGRectGetMinX(v47))
    {
      v48.origin.x = a6;
      v48.origin.y = a7;
      v48.size.width = a8;
      v48.size.height = a9;
      double v25 = CGRectGetMaxX(v48);
      v49.origin.x = a2;
      v49.origin.y = a3;
      v49.size.width = a4;
      v49.size.height = a5;
      if (v25 < CGRectGetMaxX(v49)) {
        return v21 ^ 1;
      }
    }
    v50.origin.x = a6;
    v50.origin.y = a7;
    v50.size.width = a8;
    v50.size.height = a9;
    CGFloat v33 = CGRectGetWidth(v50) * 0.5 + a6;
    v51.origin.x = a6;
    v51.origin.y = a7;
    v51.size.width = a8;
    v51.size.height = a9;
    double Height = CGRectGetHeight(v51);
    v52.origin.x = a2;
    v52.origin.y = a3;
    v52.size.width = a4;
    v52.size.height = a5;
    CGFloat v31 = CGRectGetWidth(v52) * 0.5 + a2;
    v53.origin.x = a2;
    v53.origin.y = a3;
    v53.size.width = a4;
    v53.size.height = a5;
    double v26 = CGRectGetHeight(v53) * 0.5 + a3;
    if (v33 == v31 && Height * 0.5 + a7 == v26) {
      return 2;
    }
    goto LABEL_15;
  }
  return v21;
}

uint64_t closure #1 in Sequence<>.sortedSupplementaryItems()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  AccessibilityNode.attachment.getter(&v9);

  uint64_t v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, (uint64_t)v14);
  swift_bridgeObjectRelease_n();
  if (v15 == 255)
  {
LABEL_2:
    outlined destroy of AccessibilityScrollableContext?((uint64_t)v14);
    return v2 < v3;
  }
  outlined init with copy of AccessibilityScrollableContext((uint64_t)v14, (uint64_t)&v9);
  if (v13) {
    goto LABEL_4;
  }
  swift_release();
  unint64_t v5 = v11 | ((unint64_t)v12 << 32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  outlined destroy of AccessibilityScrollableContext((uint64_t)v14);
  if ((v5 & 0xFF00000000) == 0x200000000) {
    return v2 < v3;
  }
  AccessibilityNode.attachment.getter(&v9);

  uint64_t v7 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v7, (uint64_t)v14);
  swift_bridgeObjectRelease_n();
  if (v15 == 255) {
    goto LABEL_2;
  }
  outlined init with copy of AccessibilityScrollableContext((uint64_t)v14, (uint64_t)&v9);
  if (v13)
  {
LABEL_4:
    outlined destroy of AccessibilityScrollableContext((uint64_t)&v9);
    outlined destroy of AccessibilityScrollableContext((uint64_t)v14);
    return v2 < v3;
  }
  swift_release();
  unint64_t v8 = v11 | ((unint64_t)v12 << 32);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  outlined destroy of AccessibilityScrollableContext((uint64_t)v14);
  if ((v8 & 0xFF00000000) == 0x200000000 || v5 != v8) {
    return v2 < v3;
  }
  if ((v5 & 0x100000000) != 0)
  {
    if ((v8 & 0x100000000) == 0) {
      return 1;
    }
    goto LABEL_15;
  }
  if ((v8 & 0x100000000) == 0)
  {
LABEL_15:
    if ((v5 & 0x10000000000) != 0)
    {
      if ((v8 & 0x10000000000) != 0) {
        return v2 < v3;
      }
      return 0;
    }
    if ((v8 & 0x10000000000) == 0) {
      return v2 < v3;
    }
    return 1;
  }
  return 0;
}

uint64_t outlined destroy of AccessibilityScrollableContext?(uint64_t a1)
{
  type metadata accessor for AccessibilityScrollableContext?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for AccessibilityScrollableContext?()
{
  if (!lazy cache variable for type metadata for AccessibilityScrollableContext?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?);
    }
  }
}

uint64_t specialized Array.remove(at:)(unint64_t a1)
{
  return specialized Array.remove(at:)(a1, specialized _ArrayBuffer._consumeAndCreateNew());
}

{
  void **v1;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;

  uint64_t v3 = *v1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = specialized _ArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v5 = v4 - 1;
    uint64_t v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      uint64_t v7 = &v3[2 * a1];
      unint64_t v8 = v7[4];
      memmove(v7 + 4, v7 + 6, 16 * v6);
      v3[2] = v5;
      *uint64_t v1 = v3;
      return v8;
    }
  }
  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.remove(at:)(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v5 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v5;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    uint64_t v5 = a2(v5);
    *uint64_t v2 = v5;
  }
  uint64_t v7 = v5 & 0xFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    unint64_t v9 = v8 - 1;
    uint64_t v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      uint64_t v11 = v7 + 8 * a1;
      uint64_t v12 = *(void *)(v11 + 32);
      memmove((void *)(v11 + 32), (const void *)(v11 + 40), 8 * v10);
      *(void *)(v7 + 16) = v9;
      specialized Array._endMutation()();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSypG_SS_ypts5NeverOTg506_sSSypf31Iggnor_SS3key_yp5valuetSS_ypts5d148OIegnrzr_TR160_s7SwiftUI33_DictionaryKeyedDecodingContainer33_2462DFFC835A6F4511AFEB231EB4B8C2LLV11referencing8wrappingADyxGAA02__C7DecoderACLLC_SDyf5Gtcfcj4_yptJ19_yptXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (!v1) {
    return v2;
  }
  uint64_t v3 = a1;
  uint64_t v44 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
  uint64_t result = specialized Dictionary.startIndex.getter(v3);
  uint64_t v6 = result;
  uint64_t v7 = 0;
  uint64_t v8 = v3 + 64;
  CGRect v45 = &v41;
  uint64_t v35 = v3;
  char v9 = *(unsigned char *)(v3 + 32);
  uint64_t v31 = v3 + 88;
  int64_t v32 = v1;
  int v33 = v5;
  uint64_t v34 = v3 + 64;
  uint64_t v10 = MEMORY[0x1E4FBB1A0];
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v9)
  {
    unint64_t v13 = (unint64_t)v6 >> 6;
    if ((*(void *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0) {
      goto LABEL_27;
    }
    if (*(_DWORD *)(v3 + 36) != v5) {
      goto LABEL_28;
    }
    double v14 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    uint64_t v17 = (uint64_t)v45;
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v6, (uint64_t)v45);
    v40[0] = v16;
    v40[1] = v15;
    *(void *)&long long v38 = v16;
    *((void *)&v38 + 1) = v15;
    outlined init with copy of Any(v17, (uint64_t)v39);
    long long v36 = v38;
    v37[0] = v39[0];
    v37[1] = v39[1];
    swift_bridgeObjectRetain_n();
    outlined destroy of (key: String, value: Any)((uint64_t)v40, (uint64_t)&lazy cache variable for type metadata for (key: String, value: Any), v10, (uint64_t (*)(void))type metadata accessor for (key: Any, value: Any));
    unint64_t v18 = specialized static DictionaryDecoder.KeyDecodingStrategy._convertFromSnakeCase(_:)(v36, *((unint64_t *)&v36 + 1));
    uint64_t v20 = v19;
    outlined init with copy of Any((uint64_t)v37, (uint64_t)v43);
    *(void *)&long long v42 = v18;
    *((void *)&v42 + 1) = v20;
    outlined destroy of (key: String, value: Any)((uint64_t)&v36, (uint64_t)&lazy cache variable for type metadata for (key: String, value: Any), v10, (uint64_t (*)(void))type metadata accessor for (key: Any, value: Any));
    uint64_t v2 = v44;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1);
      uint64_t v2 = v44;
    }
    unint64_t v22 = *(void *)(v2 + 16);
    unint64_t v21 = *(void *)(v2 + 24);
    uint64_t v3 = v35;
    if (v22 >= v21 >> 1)
    {
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v21 > 1), v22 + 1, 1);
      uint64_t v2 = v44;
    }
    *(void *)(v2 + 16) = v22 + 1;
    CGFloat v23 = (_OWORD *)(v2 + 48 * v22);
    long long v24 = v42;
    long long v25 = v43[1];
    v23[3] = v43[0];
    void v23[4] = v25;
    v23[2] = v24;
    char v9 = *(unsigned char *)(v35 + 32);
    unint64_t v11 = 1 << v9;
    if (v6 >= 1 << v9) {
      goto LABEL_29;
    }
    uint64_t v8 = v34;
    uint64_t v26 = *(void *)(v34 + 8 * v13);
    if ((v26 & (1 << v6)) == 0) {
      goto LABEL_30;
    }
    int v5 = v33;
    if (*(_DWORD *)(v35 + 36) != v33) {
      goto LABEL_31;
    }
    unint64_t v27 = v26 & (-2 << (v6 & 0x3F));
    if (v27)
    {
      unint64_t v11 = __clz(__rbit64(v27)) | v6 & 0xFFFFFFFFFFFFFFC0;
      int64_t v12 = v32;
    }
    else
    {
      unint64_t v28 = v13 + 1;
      unint64_t v29 = (v11 + 63) >> 6;
      int64_t v12 = v32;
      if (v13 + 1 < v29)
      {
        unint64_t v30 = *(void *)(v34 + 8 * v28);
        if (!v30)
        {
          unint64_t v28 = v13 + 2;
          if (v13 + 2 >= v29) {
            goto LABEL_4;
          }
          unint64_t v30 = *(void *)(v34 + 8 * v28);
          if (!v30)
          {
            while (v29 - 3 != v13)
            {
              unint64_t v30 = *(void *)(v31 + 8 * v13++);
              if (v30)
              {
                unint64_t v28 = v13 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        unint64_t v11 = __clz(__rbit64(v30)) + (v28 << 6);
      }
    }
LABEL_4:
    ++v7;
    uint64_t v6 = v11;
    if (v7 == v12) {
      return v2;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

unint64_t specialized RangeReplaceableCollection<>.popLast()()
{
  if (!(*v0 >> 62))
  {
    if (*(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    return 0;
  }
LABEL_3:
  unint64_t result = specialized Array._customRemoveLast()();
  if (!result)
  {
    if (*v0 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      unint64_t result = v4 - 1;
      if (!__OFSUB__(v4, 1)) {
        return specialized Array.remove(at:)(result, specialized _ArrayBuffer._consumeAndCreateNew());
      }
    }
    else
    {
      uint64_t v2 = *(void *)((*v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
      unint64_t result = v2 - 1;
      if (!__OFSUB__(v2, 1)) {
        return specialized Array.remove(at:)(result, specialized _ArrayBuffer._consumeAndCreateNew());
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t *DictionaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 32);
  uint64_t v62 = v4;
  unint64_t v5 = *(void *)(v3 + 48);
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v60 = *(void *)(v3 + 72);
  uint64_t v8 = *(void *)(v3 + 80);
  uint64_t v7 = *(void *)(v3 + 88);
  uint64_t v58 = *(void *)(v3 + 56);
  uint64_t v59 = *(void *)(v3 + 96);
  unint64_t v9 = *(void *)(v3 + 112);
  uint64_t v57 = *(void *)(v3 + 104);
  unint64_t v64 = v9;
  uint64_t v65 = *(void **)(v3 + 24);
  uint64_t v10 = *(void *)(v3 + 120);
  uint64_t v73 = *(void *)(v3 + 128);
  char v61 = *(unsigned char *)(v3 + 40);
  type metadata accessor for __DictionaryEncoder();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 32) = v4;
  *(unsigned char *)(v11 + 40) = v61;
  *(void *)(v11 + 48) = v5;
  *(void *)(v11 + 56) = v58;
  *(void *)(v11 + 64) = v6;
  *(void *)(v11 + 72) = v60;
  *(void *)(v11 + 80) = v8;
  *(void *)(v11 + 88) = v7;
  *(void *)(v11 + 96) = v59;
  *(void *)(v11 + 104) = v57;
  *(void *)(v11 + 112) = v9;
  *(void *)(v11 + 120) = v10;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  *(void *)(v11 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v11 + 24) = v65;
  *(void *)(v11 + 128) = v73;
  *(void *)(v11 + 136) = v12;
  uint64_t v71 = a2;
  uint64_t v72 = a3;
  unint64_t v13 = __swift_allocate_boxed_opaque_existential_1(&v69);
  uint64_t v14 = *(void *)(a2 - 8);
  uint64_t v15 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v16 = v14 + 16;
  v15(v13, a1, a2);
  outlined copy of DictionaryDecoder.DateDecodingStrategy(v65, v62, v61);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v5);
  outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(v6, v60);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v64);
  swift_bridgeObjectRetain();
  uint64_t v17 = (uint64_t *)v11;
  __DictionaryEncoder.box_(_:)(&v69);
  if (!v67)
  {
    uint64_t v19 = v18;
    uint64_t v73 = v16;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
    if (!v19)
    {
      uint64_t v26 = type metadata accessor for EncodingError();
      swift_allocError();
      unint64_t v28 = v27;
      type metadata accessor for (Any, EncodingError.Context)();
      v28[3] = a2;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
      v15(boxed_opaque_existential_1, a1, a2);
      uint64_t v69 = 0;
      unint64_t v70 = 0xE000000000000000;
      uint64_t v17 = &v69;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      uint64_t v69 = 0x6576656C2D706F54;
      unint64_t v70 = 0xEA0000000000206CLL;
      v30._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 0xD00000000000001BLL;
      v31._object = (void *)0x80000001883306C0;
      String.append(_:)(v31);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, *MEMORY[0x1E4FBBAA0], v26);
      swift_willThrow();
      swift_release();
      return v17;
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), MEMORY[0x1E4FBBE00]);
      uint64_t v20 = swift_allocObject();
      uint64_t v21 = v20;
      uint64_t v22 = MEMORY[0x1E4FBB1A0];
      *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
      *(void *)(v20 + 56) = v22;
      uint64_t v23 = 0x4C4C554E5F5FLL;
LABEL_6:
      uint64_t v24 = v23 & 0xFFFFFFFFFFFFLL | 0x5F5F000000000000;
      unint64_t v25 = 0xE800000000000000;
LABEL_13:
      *(void *)(v20 + 32) = v24;
      *(void *)(v20 + 40) = v25;
      *(void *)(v21 + 88) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
      *(void *)(v21 + 64) = v19;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
      uint64_t v17 = (uint64_t *)NSDictionary.init(dictionaryLiteral:)();
LABEL_14:
      swift_release();
      return v17;
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), MEMORY[0x1E4FBBE00]);
      uint64_t v20 = swift_allocObject();
      uint64_t v21 = v20;
      uint64_t v32 = MEMORY[0x1E4FBB1A0];
      *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
      *(void *)(v20 + 56) = v32;
      uint64_t v24 = 0x5245424D554E5F5FLL;
    }
    else
    {
      self;
      if (!swift_dynamicCastObjCClass())
      {
        self;
        if (swift_dynamicCastObjCClass())
        {
          type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), MEMORY[0x1E4FBBE00]);
          uint64_t v20 = swift_allocObject();
          uint64_t v21 = v20;
          uint64_t v35 = MEMORY[0x1E4FBB1A0];
          *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
          *(void *)(v20 + 56) = v35;
          uint64_t v24 = 0x5F5F5445535F5FLL;
          unint64_t v25 = 0xE700000000000000;
          goto LABEL_13;
        }
        self;
        if (swift_dynamicCastObjCClass())
        {
          type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), MEMORY[0x1E4FBBE00]);
          uint64_t v20 = swift_allocObject();
          uint64_t v21 = v20;
          uint64_t v36 = MEMORY[0x1E4FBB1A0];
          *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
          *(void *)(v20 + 56) = v36;
          uint64_t v24 = 0x5F59415252415F5FLL;
          unint64_t v25 = 0xE90000000000005FLL;
          goto LABEL_13;
        }
        self;
        if (swift_dynamicCastObjCClass())
        {
          type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), MEMORY[0x1E4FBBE00]);
          uint64_t v20 = swift_allocObject();
          uint64_t v21 = v20;
          uint64_t v37 = MEMORY[0x1E4FBB1A0];
          *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
          *(void *)(v20 + 56) = v37;
          uint64_t v24 = 0x4F49544349445F5FLL;
          unint64_t v25 = 0xEE005F5F5952414ELL;
          goto LABEL_13;
        }
        self;
        if (swift_dynamicCastObjCClass())
        {
          type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), MEMORY[0x1E4FBBE00]);
          uint64_t v20 = swift_allocObject();
          uint64_t v21 = v20;
          uint64_t v38 = MEMORY[0x1E4FBB1A0];
          *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
          *(void *)(v20 + 56) = v38;
          uint64_t v23 = 0x455441445F5FLL;
        }
        else
        {
          self;
          if (!swift_dynamicCastObjCClass())
          {
            self;
            if (!swift_dynamicCastObjCClass())
            {
              _sypSgMaTm_3(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
              uint64_t v41 = swift_allocObject();
              *(_OWORD *)(v41 + 16) = xmmword_18834BB80;
              uint64_t v69 = 0;
              unint64_t v70 = 0xE000000000000000;
              uint64_t v17 = &v69;
              _StringGuts.grow(_:)(71);
              v42._countAndFlagsBits = 0xD00000000000002FLL;
              v42._object = (void *)0x80000001883306E0;
              String.append(_:)(v42);
              DefaultStringInterpolation.appendInterpolation<A>(_:)();
              v43._countAndFlagsBits = 0xD000000000000014;
              v43._object = (void *)0x8000000188330710;
              String.append(_:)(v43);
              id v44 = objc_msgSend(v19, sel_description);
              uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              CGRect v47 = v46;

              v48._countAndFlagsBits = v45;
              v48._object = v47;
              String.append(_:)(v48);
              swift_bridgeObjectRelease();
              uint64_t v49 = v69;
              unint64_t v50 = v70;
              *(void *)(v41 + 56) = MEMORY[0x1E4FBB1A0];
              *(void *)(v41 + 32) = v49;
              *(void *)(v41 + 40) = v50;
              print(_:separator:terminator:)();
              swift_bridgeObjectRelease();
              uint64_t v51 = type metadata accessor for EncodingError();
              swift_allocError();
              CGRect v53 = v52;
              type metadata accessor for (Any, EncodingError.Context)();
              v53[3] = a2;
              CGRect v54 = __swift_allocate_boxed_opaque_existential_1(v53);
              v15(v54, a1, a2);
              uint64_t v69 = 0;
              unint64_t v70 = 0xE000000000000000;
              _StringGuts.grow(_:)(38);
              swift_bridgeObjectRelease();
              uint64_t v69 = 0x6576656C2D706F54;
              unint64_t v70 = 0xEA0000000000206CLL;
              v55._countAndFlagsBits = _typeName(_:qualified:)();
              String.append(_:)(v55);
              swift_bridgeObjectRelease();
              v56._countAndFlagsBits = 0xD00000000000001ALL;
              v56._object = (void *)0x8000000188330730;
              String.append(_:)(v56);
              DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
              (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v51 - 8) + 104))(v53, *MEMORY[0x1E4FBBAA0], v51);
              swift_willThrow();
              swift_release();

              return v17;
            }
            type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), MEMORY[0x1E4FBBE00]);
            uint64_t v40 = swift_allocObject();
            *(_OWORD *)(v40 + 16) = xmmword_18834BB80;
            *(void *)(v40 + 56) = MEMORY[0x1E4FBB1A0];
            *(void *)(v40 + 32) = 0xD000000000000011;
            *(void *)(v40 + 40) = 0x8000000188330750;
            *(void *)(v40 + 88) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
            *(void *)(v40 + 64) = v19;
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
            uint64_t v17 = (uint64_t *)NSDictionary.init(dictionaryLiteral:)();
            goto LABEL_14;
          }
          type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), MEMORY[0x1E4FBBE00]);
          uint64_t v20 = swift_allocObject();
          uint64_t v21 = v20;
          uint64_t v39 = MEMORY[0x1E4FBB1A0];
          *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
          *(void *)(v20 + 56) = v39;
          uint64_t v23 = 0x415441445F5FLL;
        }
        goto LABEL_6;
      }
      type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Any, Any)>, (uint64_t)&lazy cache variable for type metadata for (Any, Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (String, Any), MEMORY[0x1E4FBBE00]);
      uint64_t v20 = swift_allocObject();
      uint64_t v21 = v20;
      uint64_t v33 = MEMORY[0x1E4FBB1A0];
      *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
      *(void *)(v20 + 56) = v33;
      uint64_t v24 = 0x474E495254535F5FLL;
    }
    unint64_t v25 = 0xEA00000000005F5FLL;
    goto LABEL_13;
  }
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v69);
  return v17;
}

void __DictionaryEncoder.box_(_:)(void *a1)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t DynamicType = swift_getDynamicType();
  if (DynamicType == type metadata accessor for Date()
    || DynamicType == type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSDate))
  {
    outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v30);
    type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Encodable);
    unint64_t v13 = &lazy cache variable for type metadata for NSDate;
LABEL_13:
    type metadata accessor for NSObject(0, v13);
LABEL_14:
    swift_dynamicCast();
    return;
  }
  if (DynamicType == MEMORY[0x1E4F277C0]
    || DynamicType == type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSData))
  {
    outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v30);
    type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Encodable);
    unint64_t v13 = &lazy cache variable for type metadata for NSData;
    goto LABEL_13;
  }
  if (DynamicType == v4)
  {
    outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v30);
    type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Encodable);
    swift_dynamicCast();
    uint64_t v14 = URL.absoluteString.getter();
    uint64_t v16 = v15;
    id v17 = objc_allocWithZone(MEMORY[0x1E4F1CB10]);
    unint64_t v18 = (void *)MEMORY[0x18C115780](v14, v16);
    swift_bridgeObjectRelease();
    id v19 = objc_msgSend(v17, sel_initWithString_, v18);

    if (v19)
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return;
    }
    goto LABEL_44;
  }
  if (DynamicType == type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSURL))
  {
    outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v30);
    type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Encodable);
    goto LABEL_14;
  }
  type metadata accessor for NSDecimal(0);
  if (DynamicType == v9
    || DynamicType == type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSDecimalNumber))
  {
    outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v30);
    type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Encodable);
    unint64_t v13 = &lazy cache variable for type metadata for NSDecimalNumber;
    goto LABEL_13;
  }
  outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)v30);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Encodable);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for _DictionaryStringDictionaryEncodableMarker);
  if (swift_dynamicCast())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    uint64_t v10 = a1[3];
    uint64_t v11 = __swift_project_boxed_opaque_existential_1(a1, v10);
    uint64_t v31 = v10;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v30);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v10 - 8) + 16))(boxed_opaque_existential_1, v11, v10);
    type metadata accessor for [String : Encodable]();
    swift_dynamicCast();
    __DictionaryEncoder.box(_:)(v29[0]);
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v20 = (void *)(v1 + 16);
  swift_beginAccess();
  unint64_t v21 = *(void *)(v1 + 16);
  if (v21 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v31 = type metadata accessor for __DictionaryEncoder();
  uint64_t v32 = lazy protocol witness table accessor for type __DictionaryEncoder and conformance __DictionaryEncoder(&lazy protocol witness table cache variable for type __DictionaryEncoder and conformance __DictionaryEncoder, (void (*)(uint64_t))type metadata accessor for __DictionaryEncoder);
  v30[0] = v1;
  swift_retain();
  dispatch thunk of Encodable.encode(to:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    if (*v20 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v22 >= v25) {
        goto LABEL_28;
      }
    }
    else if (v22 >= *(void *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_28:
      swift_willThrow();
      return;
    }
    swift_beginAccess();
    if (*v20 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v27)
      {
LABEL_26:
        unint64_t v23 = specialized RangeReplaceableCollection<>.popLast()();
        if (v23)
        {
          uint64_t v24 = (void *)v23;
          swift_endAccess();

          goto LABEL_28;
        }
        goto LABEL_45;
      }
    }
    else if (*(void *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_26;
    }
    goto LABEL_43;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  if (*v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v22 < v26)
    {
LABEL_31:
      swift_beginAccess();
      if (*v20 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v28)
        {
LABEL_33:
          if (specialized RangeReplaceableCollection<>.popLast()())
          {
            swift_endAccess();
            return;
          }
          goto LABEL_46;
        }
      }
      else if (*(void *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_33;
      }
LABEL_43:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
    }
  }
  else if (v22 < *(void *)((*v20 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_31;
  }
}

uint64_t DictionaryEncoder.__deallocating_deinit()
{
  outlined consume of DictionaryDecoder.DateDecodingStrategy(*(void **)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  outlined consume of DictionaryDecoder.KeyDecodingStrategy(*(void *)(v0 + 48));
  outlined consume of DictionaryDecoder.NonConformingFloatDecodingStrategy(*(void *)(v0 + 64), *(void *)(v0 + 72));
  outlined consume of DictionaryDecoder.KeyDecodingStrategy(*(void *)(v0 + 112));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DictionaryEncoder()
{
  return self;
}

BOOL __DictionaryEncoder.canEncodeNewValue.getter()
{
  swift_beginAccess();
  unint64_t v1 = *(void *)(v0 + 16);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_beginAccess();
  return v2 == *(void *)(*(void *)(v0 + 136) + 16);
}

uint64_t __DictionaryEncoder.container<A>(keyedBy:)()
{
  unint64_t v1 = v0 + 2;
  if ((*(uint64_t (**)(void))(*v0 + 168))())
  {
    swift_beginAccess();
    objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA60]), sel_init);
    MEMORY[0x18C115B40]();
    if (*(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    goto LABEL_13;
  }
  swift_beginAccess();
  uint64_t v2 = *v1;
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = (char *)_CocoaArrayWrapper.endIndex.getter();
    if (v3)
    {
LABEL_7:
      uint64_t v4 = v3 - 1;
      if (__OFSUB__(v3, 1))
      {
        __break(1u);
      }
      else if ((v2 & 0xC000000000000001) == 0)
      {
        if (((unint64_t)v4 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if ((unint64_t)v4 < *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v5 = (char *)*(id *)(v2 + 8 * (void)v4 + 32);
          goto LABEL_12;
        }
        __break(1u);
LABEL_20:

        goto LABEL_21;
      }
      uint64_t v5 = (char *)MEMORY[0x18C117680](v4, v2);
LABEL_12:
      uint64_t v3 = v5;
      swift_bridgeObjectRelease();
      self;
      if (swift_dynamicCastObjCClass())
      {
LABEL_13:
        swift_beginAccess();
        type metadata accessor for _JSONKeyedEncodingContainer();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_getWitnessTable();
        return KeyedEncodingContainer.init<A>(_:)();
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v3 = *(char **)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
LABEL_21:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __DictionaryEncoder.unkeyedContainer()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1 + 2;
  if ((*(uint64_t (**)(void))(*v1 + 168))())
  {
    swift_beginAccess();
    id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA48]), sel_init);
    MEMORY[0x18C115B40]();
    if (*(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
    goto LABEL_13;
  }
  swift_beginAccess();
  uint64_t v6 = *v4;
  if ((unint64_t)*v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (char *)_CocoaArrayWrapper.endIndex.getter();
    if (v7)
    {
LABEL_7:
      uint64_t v8 = v7 - 1;
      if (__OFSUB__(v7, 1))
      {
        __break(1u);
      }
      else if ((v6 & 0xC000000000000001) == 0)
      {
        if (((unint64_t)v8 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if ((unint64_t)v8 < *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          uint64_t v9 = (char *)*(id *)(v6 + 8 * (void)v8 + 32);
          goto LABEL_12;
        }
        __break(1u);
LABEL_20:

        goto LABEL_21;
      }
      uint64_t v9 = (char *)MEMORY[0x18C117680](v8, v6);
LABEL_12:
      uint64_t v7 = v9;
      swift_bridgeObjectRelease();
      self;
      id v5 = (id)swift_dynamicCastObjCClass();
      if (v5)
      {
LABEL_13:
        swift_beginAccess();
        uint64_t v10 = v2[17];
        a1[3] = &unk_1ED457C38;
        a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
        *a1 = v2;
        a1[1] = v5;
        a1[2] = v10;
        swift_retain();
        return swift_bridgeObjectRetain();
      }
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v7 = *(char **)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
LABEL_21:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t __DictionaryEncoder.__deallocating_deinit()
{
  return __DictionaryEncoder.__deallocating_deinit((void (*)(void, void, void))outlined consume of DictionaryEncoder.DateEncodingStrategy, (void (*)(uint64_t, uint64_t))outlined consume of DictionaryDecoder.DataDecodingStrategy, (void (*)(uint64_t, uint64_t))outlined consume of DictionaryDecoder.DataDecodingStrategy);
}

uint64_t type metadata accessor for __DictionaryEncoder()
{
  return self;
}

uint64_t protocol witness for Encoder.container<A>(keyedBy:) in conformance __DictionaryEncoder()
{
  return __DictionaryEncoder.container<A>(keyedBy:)();
}

uint64_t protocol witness for Encoder.unkeyedContainer() in conformance __DictionaryEncoder@<X0>(void *a1@<X8>)
{
  return __DictionaryEncoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Encoder.singleValueContainer() in conformance __DictionaryEncoder@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for __DictionaryEncoder();
  a1[4] = lazy protocol witness table accessor for type __DictionaryEncoder and conformance __DictionaryEncoder(&lazy protocol witness table cache variable for type __DictionaryEncoder and conformance __DictionaryEncoder, (void (*)(uint64_t))type metadata accessor for __DictionaryEncoder);
  *a1 = v3;

  return swift_retain();
}

unint64_t _JSONKeyedEncodingContainer._converted(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, unint64_t *a4@<X8>)
{
  uint64_t v6 = *(void (**)(uint64_t))(a2 + 112);
  if (!v6) {
    return outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)a4);
  }
  if (v6 == (void (*)(uint64_t))1)
  {
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v7 = dispatch thunk of CodingKey.stringValue.getter();
    uint64_t v9 = specialized static DictionaryEncoder.KeyEncodingStrategy._convertToSnakeCase(_:)(v7, v8);
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v12 = dispatch thunk of CodingKey.intValue.getter();
    char v14 = v13;
    a4[3] = (unint64_t)&unk_1ED468578;
    a4[4] = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    unint64_t result = swift_allocObject();
    *a4 = result;
    *(void *)(result + 16) = v9;
    *(void *)(result + 24) = v11;
    *(void *)(result + 32) = v12;
    *(unsigned char *)(result + 40) = v14 & 1;
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage<CodingKey>();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    outlined init with copy of TableColumnList((uint64_t)a1, inited + 32);
    outlined copy of DictionaryDecoder.KeyDecodingStrategy((unint64_t)v6);
    swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(inited);
    v6(a3);
    swift_bridgeObjectRelease();
    return outlined consume of DictionaryDecoder.KeyDecodingStrategy((unint64_t)v6);
  }
  return result;
}

uint64_t _JSONKeyedEncodingContainer.encodeNil(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v4 = (void *)v2[1];
  uint64_t v6 = v2[2];
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v16 = *(void *)(a2 + 16);
  uint64_t v7 = v16;
  uint64_t v17 = v8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v15);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(boxed_opaque_existential_1, a1, v7);
  _JSONKeyedEncodingContainer._converted(_:)(v15, v5, v6, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  uint64_t v10 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v12 = v11;
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA98]), sel_init);
  v15[0] = v10;
  v15[1] = v12;
  swift_bridgeObjectRetain();
  objc_msgSend(v4, sel___swift_setObject_forKeyedSubscript_, v13, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v6 = (void *)v3[1];
  uint64_t v8 = v3[2];
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v9 = v18;
  uint64_t v19 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, a2, v9);
  _JSONKeyedEncodingContainer._converted(_:)(v17, v7, v8, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  uint64_t v12 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v14 = v13;
  id v15 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a1 & 1);
  v17[0] = v12;
  v17[1] = v14;
  swift_bridgeObjectRetain();
  objc_msgSend(v6, sel___swift_setObject_forKeyedSubscript_, v15, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

{
  uint64_t *v3;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v17[3];
  uint64_t v18;
  uint64_t v19;
  unint64_t v20[4];

  uint64_t v7 = *v3;
  uint64_t v6 = (void *)v3[1];
  uint64_t v8 = v3[2];
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v9 = v18;
  uint64_t v19 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, a2, v9);
  _JSONKeyedEncodingContainer._converted(_:)(v17, v7, v8, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  uint64_t v12 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v14 = v13;
  id v15 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithChar_, a1);
  v17[0] = v12;
  v17[1] = v14;
  swift_bridgeObjectRetain();
  objc_msgSend(v6, sel___swift_setObject_forKeyedSubscript_, v15, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v6 = (void *)v3[1];
  uint64_t v8 = v3[2];
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v9 = v18;
  uint64_t v19 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, a2, v9);
  _JSONKeyedEncodingContainer._converted(_:)(v17, v7, v8, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  uint64_t v12 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v14 = v13;
  id v15 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithShort_, a1);
  v17[0] = v12;
  v17[1] = v14;
  swift_bridgeObjectRetain();
  objc_msgSend(v6, sel___swift_setObject_forKeyedSubscript_, v15, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  uint64_t v9 = *v4;
  uint64_t v8 = (void *)v4[1];
  uint64_t v10 = v4[2];
  uint64_t v12 = *(void *)(a3 + 24);
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v11 = v20;
  uint64_t v21 = v12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v19);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, a2, v11);
  _JSONKeyedEncodingContainer._converted(_:)(v19, v9, v10, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  __swift_project_boxed_opaque_existential_1(v22, v22[3]);
  uint64_t v14 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v16 = v15;
  id v17 = objc_msgSend(objc_allocWithZone(NSNumber), *a4, a1);
  v19[0] = v14;
  v19[1] = v16;
  swift_bridgeObjectRetain();
  objc_msgSend(v8, sel___swift_setObject_forKeyedSubscript_, v17, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v6 = (void *)v3[1];
  uint64_t v8 = v3[2];
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v9 = v18;
  uint64_t v19 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, a2, v9);
  _JSONKeyedEncodingContainer._converted(_:)(v17, v7, v8, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  uint64_t v12 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v14 = v13;
  id v15 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedChar_, a1);
  v17[0] = v12;
  v17[1] = v14;
  swift_bridgeObjectRetain();
  objc_msgSend(v6, sel___swift_setObject_forKeyedSubscript_, v15, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  uint64_t v6 = (void *)v3[1];
  uint64_t v8 = v3[2];
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v9 = v18;
  uint64_t v19 = v10;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v17);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(boxed_opaque_existential_1, a2, v9);
  _JSONKeyedEncodingContainer._converted(_:)(v17, v7, v8, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v20, v20[3]);
  uint64_t v12 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v14 = v13;
  id v15 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedShort_, a1);
  v17[0] = v12;
  v17[1] = v14;
  swift_bridgeObjectRetain();
  objc_msgSend(v6, sel___swift_setObject_forKeyedSubscript_, v15, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v8 = (void *)v4[1];
  uint64_t v10 = v4[2];
  uint64_t v12 = *(void *)(a4 + 24);
  uint64_t v22 = *(void *)(a4 + 16);
  uint64_t v11 = v22;
  uint64_t v23 = v12;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, a3, v11);
  _JSONKeyedEncodingContainer._converted(_:)(v21, v9, v10, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  __swift_project_boxed_opaque_existential_1(v24, v24[3]);
  uint64_t v14 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v16 = v15;
  id v17 = objc_allocWithZone(NSString);
  swift_bridgeObjectRetain();
  uint64_t v18 = (void *)MEMORY[0x18C115780](a1, a2);
  swift_bridgeObjectRelease();
  id v19 = objc_msgSend(v17, sel_initWithString_, v18);

  v21[0] = v14;
  v21[1] = v16;
  swift_bridgeObjectRetain();
  objc_msgSend(v8, sel___swift_setObject_forKeyedSubscript_, v19, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v38 = v3;
  uint64_t v14 = *v3;
  uint64_t v35 = *(void (**)(char *, double))(v7 + 16);
  uint64_t v36 = v15;
  v35((char *)&v34 - v12, v11);
  uint64_t v39 = (uint64_t *)(v14 + 136);
  swift_beginAccess();
  uint64_t v16 = *(void **)(v14 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v14 + 136) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    *uint64_t v39 = (uint64_t)v16;
  }
  unint64_t v19 = v16[2];
  unint64_t v18 = v16[3];
  if (v19 >= v18 >> 1)
  {
    uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
    *uint64_t v39 = (uint64_t)v33;
  }
  uint64_t v20 = v35;
  ((void (*)(char *, char *, uint64_t))v35)(v9, v13, v6);
  uint64_t v21 = *(void *)(a2 + 24);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, (uint64_t)v9, v39, v6, v21);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  swift_endAccess();
  uint64_t v22 = v38;
  uint64_t v24 = (void *)v38[1];
  uint64_t v23 = v38[2];
  v40[3] = v6;
  CGFloat v40[4] = v21;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v40);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v20)(boxed_opaque_existential_1, v36, v6);
  _JSONKeyedEncodingContainer._converted(_:)(v40, v14, v23, v41);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  __swift_project_boxed_opaque_existential_1(v41, v41[3]);
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v28 = v27;
  uint64_t v29 = v37;
  id v30 = __DictionaryEncoder.box(_:)(a3);
  if (v29)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = v30;
    v40[0] = v26;
    v40[1] = v28;
    swift_bridgeObjectRetain();
    objc_msgSend(v24, sel___swift_setObject_forKeyedSubscript_, v31, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v22);
}

id __DictionaryEncoder.box(_:)(float a1)
{
  if ((~LODWORD(a1) & 0x7F800000) != 0)
  {
    id v9 = objc_allocWithZone(NSNumber);
    *(float *)&double v10 = a1;
    return objc_msgSend(v9, sel_initWithFloat_, v10);
  }
  else
  {
    uint64_t v3 = v1[9];
    if (v3)
    {
      if (a1 == INFINITY)
      {
        uint64_t v4 = v1[8];
        swift_bridgeObjectRetain();
        id v5 = objc_allocWithZone(NSString);
        uint64_t v6 = (void *)MEMORY[0x18C115780](v4, v3);
        swift_bridgeObjectRelease();
        id v7 = objc_msgSend(v5, sel_initWithString_, v6);

        return v7;
      }
      else
      {
        uint64_t v14 = v1[12];
        uint64_t v13 = v1[13];
        uint64_t v16 = v1[10];
        uint64_t v15 = v1[11];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        id v17 = objc_allocWithZone(NSString);
        if (a1 == -INFINITY)
        {
          unint64_t v18 = (void *)MEMORY[0x18C115780](v16, v15);
          swift_bridgeObjectRelease();
          id v19 = objc_msgSend(v17, sel_initWithString_, v18);
        }
        else
        {
          uint64_t v20 = (void *)MEMORY[0x18C115780](v14, v13);
          swift_bridgeObjectRelease();
          id v19 = objc_msgSend(v17, sel_initWithString_, v20);
        }
        return v19;
      }
    }
    else
    {
      swift_beginAccess();
      type metadata accessor for EncodingError();
      swift_allocError();
      uint64_t v12 = v11;
      swift_bridgeObjectRetain();
      specialized static EncodingError._invalidFloatingPointValue<A>(_:at:)(v12, a1);
      swift_bridgeObjectRelease();
      return (id)swift_willThrow();
    }
  }
}

uint64_t _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  id v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v38 = v3;
  uint64_t v14 = *v3;
  uint64_t v35 = *(void (**)(char *, double))(v7 + 16);
  uint64_t v36 = v15;
  v35((char *)&v34 - v12, v11);
  uint64_t v39 = (uint64_t *)(v14 + 136);
  swift_beginAccess();
  uint64_t v16 = *(void **)(v14 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v14 + 136) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16[2] + 1, 1, v16);
    *uint64_t v39 = (uint64_t)v16;
  }
  unint64_t v19 = v16[2];
  unint64_t v18 = v16[3];
  if (v19 >= v18 >> 1)
  {
    uint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v18 > 1), v19 + 1, 1, v16);
    *uint64_t v39 = (uint64_t)v33;
  }
  uint64_t v20 = v35;
  ((void (*)(char *, char *, uint64_t))v35)(v9, v13, v6);
  uint64_t v21 = *(void *)(a2 + 24);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, (uint64_t)v9, v39, v6, v21);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  swift_endAccess();
  uint64_t v22 = v38;
  uint64_t v24 = (void *)v38[1];
  uint64_t v23 = v38[2];
  v40[3] = v6;
  CGFloat v40[4] = v21;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v40);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v20)(boxed_opaque_existential_1, v36, v6);
  _JSONKeyedEncodingContainer._converted(_:)(v40, v14, v23, v41);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  __swift_project_boxed_opaque_existential_1(v41, v41[3]);
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v28 = v27;
  uint64_t v29 = v37;
  id v30 = __DictionaryEncoder.box(_:)(a3);
  if (v29)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = v30;
    v40[0] = v26;
    v40[1] = v28;
    swift_bridgeObjectRetain();
    objc_msgSend(v24, sel___swift_setObject_forKeyedSubscript_, v31, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v22);
}

uint64_t $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 136);
  if (!v2[2])
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    uint64_t v2 = (void *)result;
    uint64_t v4 = *(void *)(result + 16);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  swift_retain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v4 = v2[2];
  if (v4)
  {
LABEL_4:
    uint64_t v5 = v4 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    v2[2] = v5;
    *(void *)(v1 + 136) = v2;
    swift_endAccess();
    return swift_release();
  }
LABEL_7:
  __break(1u);
  return result;
}

id __DictionaryEncoder.box(_:)(double a1)
{
  if ((~*(void *)&a1 & 0x7FF0000000000000) != 0) {
    return objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, a1);
  }
  uint64_t v3 = v1[9];
  if (v3)
  {
    if (a1 == INFINITY)
    {
      uint64_t v4 = v1[8];
      swift_bridgeObjectRetain();
      id v5 = objc_allocWithZone(NSString);
      uint64_t v6 = (void *)MEMORY[0x18C115780](v4, v3);
      swift_bridgeObjectRelease();
      id v7 = objc_msgSend(v5, sel_initWithString_, v6);

      return v7;
    }
    else
    {
      uint64_t v12 = v1[12];
      uint64_t v11 = v1[13];
      uint64_t v14 = v1[10];
      uint64_t v13 = v1[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      id v15 = objc_allocWithZone(NSString);
      if (a1 == -INFINITY)
      {
        uint64_t v16 = (void *)MEMORY[0x18C115780](v14, v13);
        swift_bridgeObjectRelease();
        id v17 = objc_msgSend(v15, sel_initWithString_, v16);
      }
      else
      {
        unint64_t v18 = (void *)MEMORY[0x18C115780](v12, v11);
        swift_bridgeObjectRelease();
        id v17 = objc_msgSend(v15, sel_initWithString_, v18);
      }
      return v17;
    }
  }
  else
  {
    swift_beginAccess();
    type metadata accessor for EncodingError();
    swift_allocError();
    uint64_t v10 = v9;
    swift_bridgeObjectRetain();
    specialized static EncodingError._invalidFloatingPointValue<A>(_:at:)(v10, a1);
    swift_bridgeObjectRelease();
    return (id)swift_willThrow();
  }
}

uint64_t _JSONKeyedEncodingContainer.encode<A>(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v42 = a1;
  uint64_t v40 = a3;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v39 - v12;
  uint64_t v14 = *v5;
  id v15 = *(void (**)(char *, double))(v7 + 16);
  uint64_t v41 = v16;
  v15((char *)&v39 - v12, v11);
  CGRect v46 = (uint64_t *)(v14 + 136);
  swift_beginAccess();
  id v17 = *(void **)(v14 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v14 + 136) = v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
    *CGRect v46 = (uint64_t)v17;
  }
  unint64_t v20 = v17[2];
  unint64_t v19 = v17[3];
  if (v20 >= v19 >> 1)
  {
    uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v19 > 1), v20 + 1, 1, v17);
    *CGRect v46 = (uint64_t)v38;
  }
  ((void (*)(char *, char *, uint64_t))v15)(v9, v13, v6);
  uint64_t v21 = (void (*)(uint64_t *, uint64_t, uint64_t))v15;
  uint64_t v22 = *(void *)(v40 + 24);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, (uint64_t)v9, v46, v6, v22);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  swift_endAccess();
  uint64_t v23 = (uint64_t *)v51;
  uint64_t v25 = *(uint64_t **)(v51 + 8);
  uint64_t v24 = *(void *)(v51 + 16);
  uint64_t v48 = v6;
  uint64_t v49 = v22;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v47);
  v21(boxed_opaque_existential_1, v41, v6);
  CGRect v46 = v25;
  _JSONKeyedEncodingContainer._converted(_:)(v47, v14, v24, v50);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  __swift_project_boxed_opaque_existential_1(v50, v50[3]);
  uint64_t v27 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v29 = v28;
  uint64_t v30 = v44;
  uint64_t v48 = v44;
  uint64_t v49 = v45;
  uint64_t v31 = __swift_allocate_boxed_opaque_existential_1(v47);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v31, v42, v30);
  uint64_t v32 = v43;
  __DictionaryEncoder.box_(_:)(v47);
  if (v32)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    uint64_t v34 = v23;
  }
  else
  {
    id v35 = v33;
    uint64_t v36 = v46;
    if (!v33) {
      id v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9E8]), sel_init);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
    v47[0] = v27;
    v47[1] = v29;
    swift_bridgeObjectRetain();
    objc_msgSend(v36, sel___swift_setObject_forKeyedSubscript_, v35, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v50);
    uint64_t v34 = (uint64_t *)v51;
  }
  return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v34);
}

void _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v47 = a6;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v44 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v42 - v13;
  uint64_t v15 = *v6;
  id v17 = (void **)(v7 + 2);
  uint64_t v16 = v7[2];
  uint64_t v19 = *(void *)(v18 + 24);
  uint64_t v52 = v9;
  uint64_t v53 = v19;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v51);
  uint64_t v45 = v10;
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  uint64_t v42 = a2;
  uint64_t v43 = v21;
  v21((char *)boxed_opaque_existential_1, a2, v9);
  uint64_t v46 = v19;
  _JSONKeyedEncodingContainer._converted(_:)(&v51, v15, v16, (unint64_t *)&v54);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v51);
  __swift_project_boxed_opaque_existential_1(&v54, v56);
  uint64_t v22 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v24 = v23;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
  uint64_t v25 = (void *)v7[1];
  *(void *)&long long v51 = v22;
  *((void *)&v51 + 1) = v24;
  swift_bridgeObjectRetain_n();
  id v26 = objc_msgSend(v25, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v26)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v51, &v54);
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)&v54, (uint64_t)&v51);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableDictionary);
    if (!swift_dynamicCast())
    {
      *(void *)&long long v51 = 0;
      *((void *)&v51 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(133);
      v37._object = (void *)0x8000000188330FA0;
      v37._countAndFlagsBits = 0xD000000000000038;
      String.append(_:)(v37);
      v38._countAndFlagsBits = _typeName(_:qualified:)();
      String.append(_:)(v38);
      swift_bridgeObjectRelease();
      v39._countAndFlagsBits = 0x656B20726F66203ELL;
      v39._object = (void *)0xEB00000000222079;
      String.append(_:)(v39);
      v40._countAndFlagsBits = v22;
      v40._object = v24;
      String.append(_:)(v40);
      v41._countAndFlagsBits = 0xD00000000000003ELL;
      v41._object = (void *)0x8000000188330FE0;
      String.append(_:)(v41);
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    swift_bridgeObjectRelease();

    outlined init with take of Any(&v54, &v51);
    swift_dynamicCast();
    id v27 = v50;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA60]), sel_init);
    *(void *)&long long v54 = v22;
    *((void *)&v54 + 1) = v24;
    swift_bridgeObjectRetain();
    id v27 = v28;
    objc_msgSend(v25, sel___swift_setObject_forKeyedSubscript_, v27, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  uint64_t v29 = v43;
  v43(v14, v42, v9);
  uint64_t v30 = *v17;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *id v17 = v30;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30[2] + 1, 1, v30);
    *id v17 = v30;
  }
  unint64_t v33 = v30[2];
  unint64_t v32 = v30[3];
  if (v33 >= v32 >> 1) {
    *id v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v32 > 1), v33 + 1, 1, v30);
  }
  uint64_t v34 = (uint64_t)v44;
  v29(v44, v14, v9);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v34, v7 + 2, v9, v46);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v14, v9);
  uint64_t v35 = v7[2];
  *(void *)&long long v54 = *v7;
  *((void *)&v54 + 1) = v27;
  uint64_t v55 = v35;
  type metadata accessor for _JSONKeyedEncodingContainer();
  swift_retain();
  swift_bridgeObjectRetain();
  id v36 = v27;
  swift_getWitnessTable();
  KeyedEncodingContainer.init<A>(_:)();
  $defer #1 <A><A1>() in _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)((uint64_t)v7);
}

uint64_t $defer #1 <A><A1>() in _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (!v2[2])
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    uint64_t v2 = (void *)result;
    uint64_t v4 = *(void *)(result + 16);
    if (v4) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t v1 = a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v4 = v2[2];
  if (v4)
  {
LABEL_4:
    uint64_t v5 = v4 - 1;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v2[5 * v4 - 1]);
    v2[2] = v5;
    *(void *)(v1 + 16) = v2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t _JSONKeyedEncodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v42 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v43 = (char *)&v39 - v11;
  uint64_t v12 = *v3;
  uint64_t v13 = (void **)(v4 + 2);
  uint64_t v14 = v4[2];
  uint64_t v16 = *(void *)(v15 + 24);
  uint64_t v48 = v7;
  uint64_t v49 = v16;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v47);
  uint64_t v44 = v8;
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  Swift::String v40 = a1;
  Swift::String v41 = v18;
  v18((char *)boxed_opaque_existential_1, a1, v7);
  uint64_t v45 = v16;
  _JSONKeyedEncodingContainer._converted(_:)(&v47, v12, v14, (unint64_t *)&v50);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v47);
  __swift_project_boxed_opaque_existential_1(&v50, v51);
  uint64_t v19 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v21 = v20;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
  uint64_t v22 = (void *)v4[1];
  *(void *)&long long v47 = v19;
  *((void *)&v47 + 1) = v21;
  swift_bridgeObjectRetain_n();
  id v23 = objc_msgSend(v22, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v23)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(&v47, &v50);
    swift_bridgeObjectRelease();
    outlined init with copy of Any((uint64_t)&v50, (uint64_t)&v47);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSMutableArray);
    if (!swift_dynamicCast())
    {
      *(void *)&long long v47 = 0;
      *((void *)&v47 + 1) = 0xE000000000000000;
      _StringGuts.grow(_:)(140);
      v36._object = (void *)0x8000000188330F00;
      v36._countAndFlagsBits = 0xD000000000000043;
      String.append(_:)(v36);
      v37._countAndFlagsBits = v19;
      v37._object = v21;
      String.append(_:)(v37);
      v38._countAndFlagsBits = 0xD000000000000047;
      v38._object = (void *)0x8000000188330F50;
      String.append(_:)(v38);
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    swift_bridgeObjectRelease();

    outlined init with take of Any(&v50, &v47);
    swift_dynamicCast();
    id v24 = v46;
  }
  else
  {
    swift_bridgeObjectRelease();
    id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA48]), sel_init);
    *(void *)&long long v50 = v19;
    *((void *)&v50 + 1) = v21;
    swift_bridgeObjectRetain();
    id v24 = v25;
    objc_msgSend(v22, sel___swift_setObject_forKeyedSubscript_, v24, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
  }
  id v26 = v43;
  id v27 = v41;
  v41(v43, v40, v7);
  id v28 = *v13;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v13 = v28;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28[2] + 1, 1, v28);
    *uint64_t v13 = v28;
  }
  unint64_t v31 = v28[2];
  unint64_t v30 = v28[3];
  if (v31 >= v30 >> 1) {
    *uint64_t v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v30 > 1), v31 + 1, 1, v28);
  }
  uint64_t v32 = (uint64_t)v42;
  v27(v42, v26, v7);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v32, v4 + 2, v7, v45);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v26, v7);
  uint64_t v33 = v4[2];
  uint64_t v34 = *v4;
  a3[3] = (uint64_t)&unk_1ED457C38;
  a3[4] = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
  *a3 = v34;
  a3[1] = (uint64_t)v24;
  a3[2] = v33;
  swift_retain();
  swift_bridgeObjectRetain();
  return $defer #1 <A><A1>() in _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)((uint64_t)v4);
}

uint64_t _JSONKeyedEncodingContainer.superEncoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[2];
  v11[3] = &unk_1ED468578;
  v11[4] = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v5 = swift_allocObject();
  v11[0] = v5;
  *(void *)(v5 + 16) = 0x7265707573;
  *(void *)(v5 + 24) = 0xE500000000000000;
  *(void *)(v5 + 32) = 0;
  *(unsigned char *)(v5 + 40) = 1;
  swift_retain();
  _JSONKeyedEncodingContainer._converted(_:)(v11, v3, v4, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  uint64_t v6 = (void *)v1[1];
  uint64_t v7 = type metadata accessor for __DictionaryReferencingEncoder();
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = specialized __DictionaryReferencingEncoder.init(referencing:key:convertedKey:wrapping:)(v3, 0x7265707573, 0xE500000000000000, 0, 1, v12, v6, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  a1[3] = v7;
  uint64_t result = lazy protocol witness table accessor for type __DictionaryEncoder and conformance __DictionaryEncoder(&lazy protocol witness table cache variable for type __DictionaryReferencingEncoder and conformance __DictionaryEncoder, (void (*)(uint64_t))type metadata accessor for __DictionaryReferencingEncoder);
  a1[4] = result;
  *a1 = v9;
  return result;
}

uint64_t _JSONKeyedEncodingContainer.superEncoder(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for __DictionaryReferencingEncoder();
  uint64_t v10 = *(void *)v3;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v11(v9, a1, v6);
  uint64_t v12 = *(void *)(v3 + 16);
  v20[1] = *(void *)(v3 + 8);
  uint64_t v13 = *(void *)(a2 + 24);
  v23[3] = v6;
  void v23[4] = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
  v11((char *)boxed_opaque_existential_1, a1, v6);
  swift_retain();
  _JSONKeyedEncodingContainer._converted(_:)(v23, v10, v12, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  id v15 = *(id *)(v3 + 8);
  uint64_t v16 = v21;
  uint64_t v17 = specialized __DictionaryReferencingEncoder.__allocating_init(referencing:key:convertedKey:wrapping:)(v10, (uint64_t)v9, v24, v15, v21, v6, v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  uint64_t v18 = v22;
  v22[3] = v16;
  uint64_t result = lazy protocol witness table accessor for type __DictionaryEncoder and conformance __DictionaryEncoder(&lazy protocol witness table cache variable for type __DictionaryReferencingEncoder and conformance __DictionaryEncoder, (void (*)(uint64_t))type metadata accessor for __DictionaryReferencingEncoder);
  unint64_t v18[4] = result;
  *uint64_t v18 = v17;
  return result;
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.codingPath.getter in conformance _JSONKeyedEncodingContainer<A>()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeNil(forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return _JSONKeyedEncodingContainer.encodeNil(forKey:)(a1, a2);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(char a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, double a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, float a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithInteger_);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithInt_);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithLongLong_);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3, (SEL *)&selRef_initWithUnsignedLongLong_);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encode(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  return _JSONKeyedEncodingContainer.encode(_:forKey:)(a1, a2, a3);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encode<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _JSONKeyedEncodingContainer.encode<A>(_:forKey:)(a1, a2, a5, a3, a4);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeConditional<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

{
  return KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:)();
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBBFF0]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC018]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC040]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC008]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC028]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC010]);
}

{
  return protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(a1, a2, a3, a4, MEMORY[0x1E4FBC038]);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t protocol witness for KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:) in conformance _JSONKeyedEncodingContainer<A>()
{
  return KeyedEncodingContainerProtocol.encodeIfPresent<A>(_:forKey:)();
}

void protocol witness for KeyedEncodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _JSONKeyedEncodingContainer<A>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
}

uint64_t _JSONUnkeyedEncodingContainer.encode(_:)(float a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  id v16 = (id)v1[1];
  id v5 = objc_msgSend(v16, sel_count);
  *(void *)&long long v18 = 0x207865646E49;
  *((void *)&v18 + 1) = 0xE600000000000000;
  id v21 = v5;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(v4 + 136);
  swift_beginAccess();
  uint64_t v8 = *(void **)(v4 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 136) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  uint64_t v19 = &unk_1ED468578;
  unint64_t v20 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v12 = swift_allocObject();
  *(void *)&long long v18 = v12;
  *(void *)(v12 + 16) = 0x207865646E49;
  *(void *)(v12 + 24) = 0xE600000000000000;
  *(void *)(v12 + 32) = v5;
  *(unsigned char *)(v12 + 40) = 0;
  v8[2] = v11 + 1;
  outlined init with take of OptionalBinaryInteger(&v18, (uint64_t)&v8[5 * v11 + 4]);
  id v13 = __DictionaryEncoder.box(_:)(a1);
  if (!v17)
  {
    uint64_t v14 = v13;
    objc_msgSend(v16, sel_addObject_, v13);
  }
  return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
}

uint64_t _JSONUnkeyedEncodingContainer.encode(_:)(double a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  id v16 = (id)v1[1];
  id v5 = objc_msgSend(v16, sel_count);
  *(void *)&long long v18 = 0x207865646E49;
  *((void *)&v18 + 1) = 0xE600000000000000;
  id v21 = v5;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(v4 + 136);
  swift_beginAccess();
  uint64_t v8 = *(void **)(v4 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 136) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  uint64_t v19 = &unk_1ED468578;
  unint64_t v20 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v12 = swift_allocObject();
  *(void *)&long long v18 = v12;
  *(void *)(v12 + 16) = 0x207865646E49;
  *(void *)(v12 + 24) = 0xE600000000000000;
  *(void *)(v12 + 32) = v5;
  *(unsigned char *)(v12 + 40) = 0;
  v8[2] = v11 + 1;
  outlined init with take of OptionalBinaryInteger(&v18, (uint64_t)&v8[5 * v11 + 4]);
  id v13 = __DictionaryEncoder.box(_:)(a1);
  if (!v17)
  {
    uint64_t v14 = v13;
    objc_msgSend(v16, sel_addObject_, v13);
  }
  return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v2);
}

uint64_t _JSONUnkeyedEncodingContainer.encode<A>(_:)(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v6 = *v3;
  id v5 = (void *)v3[1];
  id v7 = objc_msgSend(v5, sel_count);
  *(void *)&long long v23 = 0x207865646E49;
  *((void *)&v23 + 1) = 0xE600000000000000;
  id v26 = v7;
  v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = (void *)(v6 + 136);
  swift_beginAccess();
  unint64_t v10 = *(void **)(v6 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v6 + 136) = v10;
  uint64_t v19 = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1, v10);
    *uint64_t v9 = v10;
  }
  unint64_t v13 = v10[2];
  unint64_t v12 = v10[3];
  if (v13 >= v12 >> 1)
  {
    unint64_t v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v10);
    *uint64_t v9 = v10;
  }
  id v24 = &unk_1ED468578;
  unint64_t v25 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v14 = swift_allocObject();
  *(void *)&long long v23 = v14;
  *(void *)(v14 + 16) = 0x207865646E49;
  *(void *)(v14 + 24) = 0xE600000000000000;
  *(void *)(v14 + 32) = v7;
  *(unsigned char *)(v14 + 40) = 0;
  v10[2] = v13 + 1;
  outlined init with take of OptionalBinaryInteger(&v23, (uint64_t)&v10[5 * v13 + 4]);
  id v24 = a2;
  unint64_t v25 = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
  (*(void (**)(uint64_t *, uint64_t, void *))(*((void *)a2 - 1) + 16))(boxed_opaque_existential_1, a1, a2);
  __DictionaryEncoder.box_(_:)(&v23);
  if (v22)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
  }
  else
  {
    id v17 = v16;
    if (!v16) {
      id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9E8]), sel_init);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
    objc_msgSend(v19, sel_addObject_, v17);
  }
  return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v27);
}

uint64_t _JSONUnkeyedEncodingContainer.nestedContainer<A>(keyedBy:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)v0[1];
  id v3 = objc_msgSend(v2, sel_count);
  *(void *)&long long v11 = 0x207865646E49;
  *((void *)&v11 + 1) = 0xE600000000000000;
  id v15 = v3;
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  id v5 = (void *)v0[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    id v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
  }
  unint64_t v7 = v5[2];
  unint64_t v6 = v5[3];
  if (v7 >= v6 >> 1) {
    id v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v6 > 1), v7 + 1, 1, v5);
  }
  unint64_t v13 = &unk_1ED468578;
  unint64_t v14 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v8 = swift_allocObject();
  *(void *)&long long v11 = v8;
  *(void *)(v8 + 16) = 0x207865646E49;
  *(void *)(v8 + 24) = 0xE600000000000000;
  *(void *)(v8 + 32) = v3;
  *(unsigned char *)(v8 + 40) = 0;
  _OWORD v5[2] = v7 + 1;
  outlined init with take of OptionalBinaryInteger(&v11, (uint64_t)&v5[5 * v7 + 4]);
  v1[2] = v5;
  id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA60]), sel_init);
  objc_msgSend(v2, sel_addObject_, v9);
  *(void *)&long long v11 = *v1;
  *((void *)&v11 + 1) = v9;
  unint64_t v12 = v5;
  type metadata accessor for _JSONKeyedEncodingContainer();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  KeyedEncodingContainer.init<A>(_:)();
  return $defer #1 <A><A1>() in _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)((uint64_t)v1);
}

uint64_t _JSONUnkeyedEncodingContainer.nestedUnkeyedContainer()@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  Swift::String v4 = (void *)v1[1];
  id v5 = objc_msgSend(v4, sel_count);
  *(void *)&long long v14 = 0x207865646E49;
  *((void *)&v14 + 1) = 0xE600000000000000;
  id v17 = v5;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  unint64_t v7 = (void *)v1[2];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7[2] + 1, 1, v7);
  }
  unint64_t v9 = v7[2];
  unint64_t v8 = v7[3];
  if (v9 >= v8 >> 1) {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v7);
  }
  id v15 = &unk_1ED468578;
  unint64_t v16 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v14 = v10;
  *(void *)(v10 + 16) = 0x207865646E49;
  *(void *)(v10 + 24) = 0xE600000000000000;
  *(void *)(v10 + 32) = v5;
  *(unsigned char *)(v10 + 40) = 0;
  v7[2] = v9 + 1;
  outlined init with take of OptionalBinaryInteger(&v14, (uint64_t)&v7[5 * v9 + 4]);
  v2[2] = (uint64_t)v7;
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA48]), sel_init);
  objc_msgSend(v4, sel_addObject_, v11);
  uint64_t v12 = *v2;
  a1[3] = &unk_1ED457C38;
  a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer();
  *a1 = v12;
  a1[1] = v11;
  a1[2] = v7;
  swift_retain();
  swift_bridgeObjectRetain();
  return $defer #1 <A><A1>() in _JSONKeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)((uint64_t)v2);
}

id protocol witness for UnkeyedEncodingContainer.count.getter in conformance _JSONUnkeyedEncodingContainer()
{
  return objc_msgSend(*(id *)(v0 + 8), sel_count);
}

void protocol witness for UnkeyedEncodingContainer.encodeNil() in conformance _JSONUnkeyedEncodingContainer()
{
  uint64_t v1 = *(void **)(v0 + 8);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA98]), sel_init);
  objc_msgSend(v1, sel_addObject_, v2);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(char a1)
{
  id v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a1 & 1);
  objc_msgSend(v2, sel_addObject_, v3);
}

{
  uint64_t v1;
  void *v2;
  id v3;

  id v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithChar_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  id v5 = *(void **)(v2 + 8);
  id v6 = objc_allocWithZone(NSString);
  swift_bridgeObjectRetain();
  unint64_t v7 = (void *)MEMORY[0x18C115780](a1, a2);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithString_, v7);

  objc_msgSend(v5, sel_addObject_, v8);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(double a1)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(float a1)
{
  return _JSONUnkeyedEncodingContainer.encode(_:)(a1);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithInt_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithLongLong_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(a1, a2, a3, (SEL *)&selRef_initWithUnsignedLongLong_);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(__int16 a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithShort_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encode(_:)();
}

{
  return UnkeyedEncodingContainer.encode(_:)();
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(unsigned __int8 a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedChar_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(unsigned __int16 a1)
{
  uint64_t v2 = *(void **)(v1 + 8);
  id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedShort_, a1);
  objc_msgSend(v2, sel_addObject_, v3);
}

void protocol witness for UnkeyedEncodingContainer.encode(_:) in conformance _JSONUnkeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v5 = *(void **)(v4 + 8);
  id v6 = objc_msgSend(objc_allocWithZone(NSNumber), *a4, a1);
  objc_msgSend(v5, sel_addObject_, v6);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(_:) in conformance _JSONUnkeyedEncodingContainer(uint64_t a1, void *a2, unint64_t a3)
{
  return _JSONUnkeyedEncodingContainer.encode<A>(_:)(a1, a2, a3);
}

uint64_t protocol witness for UnkeyedEncodingContainer.encodeConditional<A>(_:) in conformance _JSONUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encodeConditional<A>(_:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.encode<A>(contentsOf:) in conformance _JSONUnkeyedEncodingContainer()
{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

{
  return UnkeyedEncodingContainer.encode<A>(contentsOf:)();
}

uint64_t protocol witness for UnkeyedEncodingContainer.superEncoder() in conformance _JSONUnkeyedEncodingContainer@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4 = *v1;
  id v3 = (void *)v1[1];
  swift_retain();
  id v5 = objc_msgSend(v3, sel_count);
  uint64_t v6 = type metadata accessor for __DictionaryReferencingEncoder();
  swift_allocObject();
  uint64_t v7 = __DictionaryReferencingEncoder.init(referencing:at:wrapping:)(v4, (uint64_t)v5, v3);
  a1[3] = v6;
  uint64_t result = lazy protocol witness table accessor for type __DictionaryEncoder and conformance __DictionaryEncoder(&lazy protocol witness table cache variable for type __DictionaryReferencingEncoder and conformance __DictionaryEncoder, (void (*)(uint64_t))type metadata accessor for __DictionaryReferencingEncoder);
  a1[4] = result;
  *a1 = v7;
  return result;
}

void __DictionaryEncoder.encodeNil()()
{
  if ((*(uint64_t (**)(void))(*v0 + 168))())
  {
    id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA98]), sel_init);
    swift_beginAccess();
    id v2 = v1;
    MEMORY[0x18C115B40]();
    if (*(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v0[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(char a1)
{
  if ((*(uint64_t (**)(void))(*v1 + 168))())
  {
    id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, a1 & 1);
    swift_beginAccess();
    id v4 = v3;
    MEMORY[0x18C115B40]();
    if (*(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

{
  void *v1;
  id v3;
  id v4;

  if ((*(uint64_t (**)(void))(*v1 + 168))())
  {
    id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithChar_, a1);
    swift_beginAccess();
    id v4 = v3;
    MEMORY[0x18C115B40]();
    if (*(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(__int16 a1)
{
  if ((*(uint64_t (**)(void))(*v1 + 168))())
  {
    id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithShort_, a1);
    swift_beginAccess();
    id v4 = v3;
    MEMORY[0x18C115B40]();
    if (*(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(unsigned __int8 a1)
{
  if ((*(uint64_t (**)(void))(*v1 + 168))())
  {
    id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedChar_, a1);
    swift_beginAccess();
    id v4 = v3;
    MEMORY[0x18C115B40]();
    if (*(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(unsigned __int16 a1)
{
  if ((*(uint64_t (**)(void))(*v1 + 168))())
  {
    id v3 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedShort_, a1);
    swift_beginAccess();
    id v4 = v3;
    MEMORY[0x18C115B40]();
    if (*(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(uint64_t a1, SEL *a2)
{
  if ((*(uint64_t (**)(void))(*v2 + 168))())
  {
    id v5 = objc_msgSend(objc_allocWithZone(NSNumber), *a2, a1);
    swift_beginAccess();
    id v6 = v5;
    MEMORY[0x18C115B40]();
    if (*(void *)((v2[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v2[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if ((*(uint64_t (**)(void))(*(void *)v2 + 168))())
  {
    id v6 = objc_allocWithZone(NSString);
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)MEMORY[0x18C115780](a1, a2);
    swift_bridgeObjectRelease();
    id v8 = objc_msgSend(v6, sel_initWithString_, v7);

    swift_beginAccess();
    id v9 = v8;
    MEMORY[0x18C115B40]();
    if (*(void *)((*(void *)(v3 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v3 + 16) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(float a1)
{
  if ((*(uint64_t (**)(void))(*v1 + 168))())
  {
    id v4 = __DictionaryEncoder.box(_:)(a1);
    if (!v2)
    {
      id v5 = v4;
      swift_beginAccess();
      id v6 = v5;
      MEMORY[0x18C115B40]();
      if (*(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode(_:)(double a1)
{
  if ((*(uint64_t (**)(void))(*v1 + 168))())
  {
    id v4 = __DictionaryEncoder.box(_:)(a1);
    if (!v2)
    {
      id v5 = v4;
      swift_beginAccess();
      id v6 = v5;
      MEMORY[0x18C115B40]();
      if (*(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v1[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void __DictionaryEncoder.encode<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(uint64_t (**)(void))(*v3 + 168))())
  {
    v12[3] = a2;
    v12[4] = a3;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v12);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(boxed_opaque_existential_1, a1, a2);
    __DictionaryEncoder.box_(_:)(v12);
    if (v4)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
    }
    else
    {
      id v10 = v9;
      if (!v9) {
        id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9E8]), sel_init);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
      swift_beginAccess();
      id v11 = v10;
      MEMORY[0x18C115B40]();
      if (*(void *)((v3[2] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v3[2] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      swift_endAccess();
    }
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
}

void protocol witness for SingleValueEncodingContainer.encodeNil() in conformance __DictionaryEncoder()
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(char a1)
{
}

{
  __DictionaryEncoder.encode(_:)(a1);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(uint64_t a1, uint64_t a2)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(double a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(float a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(uint64_t a1)
{
}

{
  __DictionaryEncoder.encode(_:)(a1, (SEL *)&selRef_initWithInt_);
}

{
  __DictionaryEncoder.encode(_:)(a1, (SEL *)&selRef_initWithLongLong_);
}

{
  __DictionaryEncoder.encode(_:)(a1, (SEL *)&selRef_initWithUnsignedInteger_);
}

{
  __DictionaryEncoder.encode(_:)(a1, (SEL *)&selRef_initWithUnsignedInt_);
}

{
  __DictionaryEncoder.encode(_:)(a1, (SEL *)&selRef_initWithUnsignedLongLong_);
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(__int16 a1)
{
}

uint64_t protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder()
{
  return SingleValueEncodingContainer.encode(_:)();
}

{
  return SingleValueEncodingContainer.encode(_:)();
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(unsigned __int8 a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode(_:) in conformance __DictionaryEncoder(unsigned __int16 a1)
{
}

void protocol witness for SingleValueEncodingContainer.encode<A>(_:) in conformance __DictionaryEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t specialized static EncodingError._invalidFloatingPointValue<A>(_:at:)@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  uint64_t v4 = 0x616E2E74616F6C46;
  if (a2 == -INFINITY) {
    uint64_t v4 = 0x692E74616F6C462DLL;
  }
  unint64_t v5 = 0xE90000000000006ELL;
  if (a2 == -INFINITY) {
    unint64_t v5 = 0xEF7974696E69666ELL;
  }
  if (a2 == INFINITY) {
    uint64_t v6 = 0x6E692E74616F6C46;
  }
  else {
    uint64_t v6 = v4;
  }
  if (a2 == INFINITY) {
    uint64_t v7 = (void *)0xEE007974696E6966;
  }
  else {
    uint64_t v7 = (void *)v5;
  }
  _StringGuts.grow(_:)(154);
  v8._object = (void *)0x8000000188330050;
  v8._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v6;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0xD000000000000087;
  v10._object = (void *)0x8000000188330070;
  String.append(_:)(v10);
  type metadata accessor for (Any, EncodingError.Context)();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB470];
  *(float *)a1 = a2;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBAA0];
  uint64_t v12 = type metadata accessor for EncodingError();
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104);

  return v13(a1, v11, v12);
}

uint64_t specialized static EncodingError._invalidFloatingPointValue<A>(_:at:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  unint64_t v4 = 0x6E2E656C62756F44;
  if (a2 == -INFINITY) {
    unint64_t v4 = 0xD000000000000010;
  }
  unint64_t v5 = 0x8000000188330100;
  if (a2 != -INFINITY) {
    unint64_t v5 = 0xEA00000000006E61;
  }
  if (a2 == INFINITY) {
    uint64_t v6 = 0x692E656C62756F44;
  }
  else {
    uint64_t v6 = v4;
  }
  if (a2 == INFINITY) {
    uint64_t v7 = (void *)0xEF7974696E69666ELL;
  }
  else {
    uint64_t v7 = (void *)v5;
  }
  _StringGuts.grow(_:)(154);
  v8._countAndFlagsBits = 0xD000000000000011;
  v8._object = (void *)0x8000000188330050;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v6;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0xD000000000000087;
  v10._object = (void *)0x8000000188330070;
  String.append(_:)(v10);
  type metadata accessor for (Any, EncodingError.Context)();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB3D0];
  *(double *)a1 = a2;
  swift_bridgeObjectRetain();
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  uint64_t v11 = *MEMORY[0x1E4FBBAA0];
  uint64_t v12 = type metadata accessor for EncodingError();
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 104);

  return v13(a1, v11, v12);
}

unint64_t __DictionaryEncoder.box(_:)(uint64_t a1)
{
  int64_t v3 = v2;
  uint64_t v4 = v1;
  unint64_t v5 = (uint64_t *)(v1 + 16);
  swift_beginAccess();
  uint64_t v44 = v4;
  unint64_t v6 = *(void *)(v4 + 16);
  if (!(v6 >> 62))
  {
    uint64_t v39 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_3;
  }
LABEL_66:
  swift_bridgeObjectRetain();
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_3:
  int64_t v54 = v3;
  swift_beginAccess();
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA60]), sel_init);
  MEMORY[0x18C115B40]();
  if (*(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  Swift::String v40 = v5;
  specialized Array._endMutation()();
  unint64_t v5 = &v51;
  swift_endAccess();
  uint64_t v41 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 64);
  uint64_t v11 = v44 + 136;
  swift_bridgeObjectRetain();
  unint64_t result = swift_beginAccess();
  int64_t v3 = 0;
  int64_t v42 = (unint64_t)(v8 + 63) >> 6;
  if (v10)
  {
LABEL_8:
    unint64_t v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v14 = v13 | (v3 << 6);
LABEL_9:
    uint64_t v15 = *(void *)(a1 + 56);
    unint64_t v16 = (void *)(*(void *)(a1 + 48) + 16 * v14);
    uint64_t v17 = v16[1];
    *(void *)&long long v48 = *v16;
    *((void *)&v48 + 1) = v17;
    outlined init with copy of TableColumnList(v15 + 40 * v14, (uint64_t)v49);
    swift_bridgeObjectRetain();
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v18 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_65;
    }
    if (v18 < v42)
    {
      unint64_t v19 = *(void *)(v41 + 8 * v18);
      if (v19) {
        goto LABEL_13;
      }
      v3 += 2;
      if (v18 + 1 >= v42)
      {
        int64_t v3 = v18;
      }
      else
      {
        unint64_t v19 = *(void *)(v41 + 8 * v3);
        if (v19)
        {
          ++v18;
LABEL_13:
          unint64_t v10 = (v19 - 1) & v19;
          unint64_t v14 = __clz(__rbit64(v19)) + (v18 << 6);
          int64_t v3 = v18;
          goto LABEL_9;
        }
        if (v18 + 2 < v42)
        {
          unint64_t v19 = *(void *)(v41 + 8 * (v18 + 2));
          if (v19)
          {
            v18 += 2;
            goto LABEL_13;
          }
          int64_t v33 = v18 + 3;
          if (v18 + 3 < v42)
          {
            unint64_t v19 = *(void *)(v41 + 8 * v33);
            if (!v19)
            {
              while (1)
              {
                int64_t v18 = v33 + 1;
                if (__OFADD__(v33, 1)) {
                  goto LABEL_73;
                }
                if (v18 >= v42)
                {
                  int64_t v3 = v42 - 1;
                  goto LABEL_18;
                }
                unint64_t v19 = *(void *)(v41 + 8 * v18);
                ++v33;
                if (v19) {
                  goto LABEL_13;
                }
              }
            }
            v18 += 3;
            goto LABEL_13;
          }
          int64_t v3 = v18 + 2;
        }
      }
    }
LABEL_18:
    unint64_t v10 = 0;
    uint64_t v50 = 0;
    memset(v49, 0, sizeof(v49));
    long long v48 = 0u;
LABEL_19:
    outlined init with take of (key: String, value: Encodable)?((uint64_t)&v48, (uint64_t)&v51);
    uint64_t v20 = v52;
    if (!v52) {
      break;
    }
    uint64_t v21 = v51;
    outlined init with take of OptionalBinaryInteger(&v53, (uint64_t)&v48);
    uint64_t v22 = *(uint64_t **)v11;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v11 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
      *(void *)uint64_t v11 = v22;
    }
    unint64_t v25 = v22[2];
    unint64_t v24 = v22[3];
    if (v25 >= v24 >> 1)
    {
      uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v22);
      *(void *)uint64_t v11 = v22;
    }
    id v46 = &unk_1ED468578;
    unint64_t v47 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v26 = swift_allocObject();
    *(void *)&long long v45 = v26;
    *(void *)(v26 + 16) = v21;
    *(void *)(v26 + 24) = v20;
    *(void *)(v26 + 32) = 0;
    *(unsigned char *)(v26 + 40) = 1;
    v22[2] = v25 + 1;
    outlined init with take of OptionalBinaryInteger(&v45, (uint64_t)&v22[5 * v25 + 4]);
    int64_t v27 = v54;
    uint64_t v28 = __DictionaryEncoder.box_(_:)(&v48);
    if (v27)
    {
      swift_bridgeObjectRelease();
      $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v44);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
      swift_release();
      unint64_t v35 = *(void *)(v44 + 16);
      if (v35 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v36 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v36 = *(void *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (v39 < v36)
      {
        swift_beginAccess();
        if ((unint64_t)*v40 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v38) {
            goto LABEL_72;
          }
        }
        else if (!*(void *)((*v40 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_72;
        }
        unint64_t result = specialized RangeReplaceableCollection<>.popLast()();
        if (!result) {
          goto LABEL_75;
        }
        unint64_t v35 = result;
        swift_endAccess();
      }
      swift_willThrow();
      goto LABEL_62;
    }
    id v29 = (id)v28;
    int64_t v54 = 0;
    if (!v28) {
      id v29 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9E8]), sel_init);
    }
    *(void *)&long long v45 = v21;
    *((void *)&v45 + 1) = v20;
    swift_bridgeObjectRetain();
    objc_msgSend(v7, sel___swift_setObject_forKeyedSubscript_, v29, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
    swift_bridgeObjectRelease();

    swift_unknownObjectRelease();
    swift_beginAccess();
    unint64_t v5 = *(uint64_t **)v11;
    if (!*(void *)(*(void *)v11 + 16))
    {
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    char v30 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v11 = v5;
    if (v30)
    {
      uint64_t v31 = v5[2];
      if (!v31) {
        goto LABEL_64;
      }
    }
    else
    {
      unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew()(v5);
      *(void *)uint64_t v11 = v5;
      uint64_t v31 = v5[2];
      if (!v31) {
        goto LABEL_64;
      }
    }
    uint64_t v32 = v31 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5[5 * v31 - 1]);
    _OWORD v5[2] = v32;
    *(void *)uint64_t v11 = v5;
    swift_endAccess();
    unint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v48);
    if (v10) {
      goto LABEL_8;
    }
  }
  swift_release();
  if ((unint64_t)*v40 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v34 = *(void *)((*v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v39 >= v34)
  {
    unint64_t v35 = 0;
LABEL_62:

    return v35;
  }
  swift_beginAccess();
  if ((unint64_t)*v40 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v37) {
      goto LABEL_72;
    }
LABEL_51:
    unint64_t result = specialized RangeReplaceableCollection<>.popLast()();
    if (!result) {
      goto LABEL_74;
    }
    unint64_t v35 = result;
    swift_endAccess();
    goto LABEL_62;
  }
  if (*(void *)((*v40 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_51;
  }
LABEL_72:
  unint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_73:
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

uint64_t __DictionaryReferencingEncoder.init(referencing:at:wrapping:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  *(void *)(v3 + 144) = a1;
  *(void *)(v3 + 152) = a3;
  *(void *)(v3 + 160) = a2;
  *(void *)(v3 + 168) = 0;
  *(unsigned char *)(v3 + 176) = 0;
  uint64_t v6 = *(void *)(a1 + 32);
  unint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v28 = *(void **)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v31 = *(void *)(a1 + 96);
  unint64_t v11 = *(void *)(a1 + 112);
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v25 = *(void *)(a1 + 104);
  uint64_t v12 = *(void *)(a1 + 128);
  uint64_t v26 = *(void *)(a1 + 72);
  uint64_t v27 = *(void *)(a1 + 120);
  char v13 = *(unsigned char *)(a1 + 40);
  swift_beginAccess();
  uint64_t v14 = *(void *)(a1 + 136);
  *(void *)(v4 + 32) = v6;
  *(unsigned char *)(v4 + 40) = v13;
  *(void *)(v4 + 48) = v7;
  *(void *)(v4 + 56) = v24;
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 72) = v26;
  *(void *)(v4 + 80) = v9;
  *(void *)(v4 + 88) = v10;
  *(void *)(v4 + 96) = v31;
  *(void *)(v4 + 104) = v25;
  *(void *)(v4 + 112) = v11;
  *(void *)(v4 + 120) = v27;
  *(void *)(v4 + 128) = v12;
  uint64_t v15 = MEMORY[0x1E4FBC860];
  *(void *)(v4 + 136) = v14;
  unint64_t v16 = (void *)(v4 + 136);
  *(void *)(v4 + 16) = v15;
  *(void *)(v4 + 24) = v28;
  *(void *)&long long v33 = 0x207865646E49;
  *((void *)&v33 + 1) = 0xE600000000000000;
  uint64_t v36 = a2;
  swift_retain();
  id v30 = a3;
  outlined copy of DictionaryDecoder.DateDecodingStrategy(v28, v6, v13);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v7);
  outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(v8, v26);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  int64_t v18 = *(void **)(v4 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v4 + 136) = v18;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    int64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18[2] + 1, 1, v18);
    *unint64_t v16 = v18;
  }
  unint64_t v21 = v18[2];
  unint64_t v20 = v18[3];
  if (v21 >= v20 >> 1)
  {
    int64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1, v18);
    *unint64_t v16 = v18;
  }
  uint64_t v34 = &unk_1ED468578;
  unint64_t v35 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v22 = swift_allocObject();
  *(void *)&long long v33 = v22;
  *(void *)(v22 + 16) = 0x207865646E49;
  *(void *)(v22 + 24) = 0xE600000000000000;
  *(void *)(v22 + 32) = a2;
  *(unsigned char *)(v22 + 40) = 0;
  void v18[2] = v21 + 1;
  outlined init with take of OptionalBinaryInteger(&v33, (uint64_t)&v18[5 * v21 + 4]);
  swift_release();
  swift_release();

  return v4;
}

BOOL __DictionaryReferencingEncoder.canEncodeNewValue.getter()
{
  swift_beginAccess();
  unint64_t v1 = v0[2];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_beginAccess();
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  uint64_t v5 = *(void *)(v3 + 16);
  swift_beginAccess();
  return v2 == v5 + ~*(void *)(*(void *)(v4 + 136) + 16);
}

void __DictionaryReferencingEncoder.__ivar_destroyer()
{
  swift_release();
  unint64_t v1 = *(void **)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 168);
  char v4 = *(unsigned char *)(v0 + 176);

  outlined consume of __DictionaryReferencingEncoder.Reference(v1, v2, v3, v4);
}

uint64_t __DictionaryReferencingEncoder.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)(v0 + 16);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v1 + 16);
  if (!(v3 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v4 == 1) {
      goto LABEL_3;
    }
LABEL_8:
    if (!v4)
    {
      id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C9E8]), sel_init);
      unint64_t v7 = &lazy cache variable for type metadata for NSDictionary;
      goto LABEL_10;
    }
LABEL_17:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v4 != 1) {
    goto LABEL_8;
  }
LABEL_3:
  swift_beginAccess();
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v21) {
      goto LABEL_17;
    }
  }
  else if (!*(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_17;
  }
  unint64_t v5 = specialized RangeReplaceableCollection<>.popLast()();
  if (!v5)
  {
    __break(1u);
    goto LABEL_17;
  }
  id v6 = (id)v5;
  swift_endAccess();
  unint64_t v7 = &lazy cache variable for type metadata for NSObject;
LABEL_10:
  uint64_t v8 = type metadata accessor for NSObject(0, (unint64_t *)v7);
  uint64_t v23 = v8;
  v22[0] = v6;
  uint64_t v10 = *(void **)(v1 + 152);
  uint64_t v9 = *(void *)(v1 + 160);
  uint64_t v11 = *(void *)(v1 + 168);
  if (*(unsigned char *)(v1 + 176))
  {
    id v12 = objc_allocWithZone(NSString);
    id v13 = v10;
    swift_bridgeObjectRetain();
    uint64_t v14 = (void *)MEMORY[0x18C115780](v9, v11);
    swift_bridgeObjectRelease();
    id v15 = objc_msgSend(v12, sel_initWithString_, v14);

    __swift_project_boxed_opaque_existential_1(v22, v23);
    objc_msgSend(v13, sel_setObject_forKeyedSubscript_, _bridgeAnythingToObjectiveC<A>(_:)(), v15);

    swift_unknownObjectRelease();
  }
  else
  {
    __swift_project_boxed_opaque_existential_1(v22, v8);
    objc_msgSend(v10, sel_insertObject_atIndex_, _bridgeAnythingToObjectiveC<A>(_:)(), v9);
    swift_unknownObjectRelease();
    outlined consume of __DictionaryReferencingEncoder.Reference(v10, v9, v11, 0);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  swift_bridgeObjectRelease();
  unint64_t v16 = *(void *)(v1 + 48);
  uint64_t v17 = *(void *)(v1 + 64);
  uint64_t v18 = *(void *)(v1 + 72);
  unint64_t v19 = *(void *)(v1 + 112);
  outlined consume of DictionaryDecoder.DateDecodingStrategy(*(void **)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
  outlined consume of DictionaryDecoder.KeyDecodingStrategy(v16);
  outlined consume of DictionaryDecoder.NonConformingFloatDecodingStrategy(v17, v18);
  outlined consume of DictionaryDecoder.KeyDecodingStrategy(v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of __DictionaryReferencingEncoder.Reference(*(void **)(v1 + 152), *(void *)(v1 + 160), *(void *)(v1 + 168), *(unsigned char *)(v1 + 176));
  return v1;
}

uint64_t __DictionaryReferencingEncoder.__deallocating_deinit()
{
  __DictionaryReferencingEncoder.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __DictionaryReferencingEncoder()
{
  return self;
}

uint64_t DictionaryDecoder.decode<A>(_:from:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v52 = a4;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v13 = (char *)&v40 - v12;
  strcpy(v53, "__DICTIONARY__");
  v53[15] = -18;
  id v14 = objc_msgSend(a2, sel___swift_objectForKeyedSubscript_, _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v14)
  {
    uint64_t v40 = v11;
    uint64_t v41 = v10;
    uint64_t v42 = a5;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined init with take of Any(v53, v54);
    outlined init with copy of Any((uint64_t)v54, (uint64_t)v53);
    unint64_t v16 = *(void **)(v5 + 16);
    uint64_t v15 = *(void *)(v5 + 24);
    unint64_t v17 = *(void *)(v5 + 40);
    uint64_t v18 = *(void *)(v5 + 48);
    uint64_t v49 = v13;
    uint64_t v50 = a3;
    uint64_t v20 = *(void *)(v5 + 56);
    uint64_t v19 = *(void *)(v5 + 64);
    uint64_t v51 = a1;
    uint64_t v21 = *(void *)(v5 + 72);
    uint64_t v22 = *(void *)(v5 + 80);
    uint64_t v23 = *(void *)(v5 + 96);
    uint64_t v45 = *(void *)(v5 + 88);
    uint64_t v44 = v23;
    uint64_t v24 = *(void *)(v5 + 112);
    unint64_t v47 = *(void *)(v5 + 104);
    uint64_t v46 = v24;
    uint64_t v48 = *(void *)(v5 + 120);
    *(void *)&long long v55 = v16;
    *((void *)&v55 + 1) = v15;
    char v25 = *(unsigned char *)(v5 + 32);
    char v56 = v25;
    unint64_t v57 = v17;
    uint64_t v58 = v18;
    uint64_t v59 = v20;
    uint64_t v60 = v19;
    uint64_t v61 = v21;
    uint64_t v62 = v22;
    uint64_t v63 = v45;
    uint64_t v64 = v23;
    unint64_t v65 = v47;
    uint64_t v66 = v24;
    uint64_t v67 = v48;
    type metadata accessor for __DictionaryDecoder();
    uint64_t v43 = swift_allocObject();
    outlined copy of DictionaryDecoder.DateDecodingStrategy(v16, v15, v25);
    outlined copy of DictionaryDecoder.KeyDecodingStrategy(v17);
    uint64_t v26 = v20;
    uint64_t v27 = (uint64_t)v49;
    uint64_t v28 = v19;
    uint64_t v29 = v50;
    uint64_t v30 = v51;
    outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(v26, v28);
    outlined copy of DictionaryDecoder.KeyDecodingStrategy(v47);
    swift_bridgeObjectRetain();
    __DictionaryDecoder.init(referencing:at:options:)((uint64_t)v53, MEMORY[0x1E4FBC860], &v55);
    uint64_t v31 = v68;
    __DictionaryDecoder.unbox<A>(_:as:)((uint64_t)v54, v30, v29, v52, v27);
    if (v31)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
      return swift_release();
    }
    else
    {
      uint64_t v36 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v27, 1, v29) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v27, v41);
        uint64_t v37 = type metadata accessor for DecodingError();
        swift_allocError();
        uint64_t v39 = v38;
        type metadata accessor for (@thick Any.Type, DecodingError.Context)();
        *uint64_t v39 = v30;
        DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
        (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v37 - 8) + 104))(v39, *MEMORY[0x1E4FBBA80], v37);
        swift_willThrow();
        swift_release();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
        swift_release();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v42, v27, v29);
      }
    }
  }
  else
  {
    uint64_t v33 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v35 = v34;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v33 - 8) + 104))(v35, *MEMORY[0x1E4FBBA78], v33);
    return swift_willThrow();
  }
}

uint64_t DictionaryDecoder.__deallocating_deinit()
{
  outlined consume of DictionaryDecoder.DateDecodingStrategy(*(void **)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  outlined consume of DictionaryDecoder.KeyDecodingStrategy(*(void *)(v0 + 40));
  outlined consume of DictionaryDecoder.NonConformingFloatDecodingStrategy(*(void *)(v0 + 56), *(void *)(v0 + 64));
  outlined consume of DictionaryDecoder.KeyDecodingStrategy(*(void *)(v0 + 104));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DictionaryDecoder()
{
  return self;
}

uint64_t __DictionaryDecoder.init(referencing:at:options:)(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  *(void *)(v3 + 16) = MEMORY[0x1E4FBC860];
  unint64_t v7 = (char **)(v3 + 16);
  outlined init with copy of Any(a1, (uint64_t)v17);
  swift_beginAccess();
  outlined init with copy of Any((uint64_t)v17, (uint64_t)v16);
  uint64_t v8 = *(char **)(v3 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v3 + 16) = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
    *unint64_t v7 = v8;
  }
  unint64_t v11 = *((void *)v8 + 2);
  unint64_t v10 = *((void *)v8 + 3);
  if (v11 >= v10 >> 1)
  {
    uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1, v8);
    *unint64_t v7 = v8;
  }
  *((void *)v8 + 2) = v11 + 1;
  outlined init with take of Any(v16, &v8[32 * v11 + 32]);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  swift_endAccess();
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v12 = a3[2];
  *(_OWORD *)(v3 + 72) = a3[3];
  long long v13 = a3[5];
  *(_OWORD *)(v3 + 88) = a3[4];
  *(_OWORD *)(v3 + 104) = v13;
  *(_OWORD *)(v3 + 120) = a3[6];
  long long v14 = a3[1];
  *(_OWORD *)(v3 + 24) = *a3;
  *(_OWORD *)(v3 + 40) = v14;
  *(void *)(v3 + 136) = a2;
  *(_OWORD *)(v3 + 56) = v12;
  return v3;
}

uint64_t __DictionaryDecoder.container<A>(keyedBy:)()
{
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v15);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    uint64_t v1 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v3 = v2;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v3 = type metadata accessor for KeyedDecodingContainer();
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v1 - 8) + 104))(v3, *MEMORY[0x1E4FBBA80], v1);
  }
  else
  {
    _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v15);
    type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any], MEMORY[0x1E4FBAEA0]);
    if (swift_dynamicCast())
    {
      uint64_t v4 = swift_retain();
      uint64_t v5 = specialized _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(v4, (uint64_t)v14);
      uint64_t v7 = v6;
      uint64_t v9 = v8;
      swift_release();
      v15[0] = v5;
      v15[1] = v7;
      v15[2] = v9;
      type metadata accessor for _DictionaryKeyedDecodingContainer();
      swift_getWitnessTable();
      return KeyedDecodingContainer.init<A>(_:)();
    }
    uint64_t v11 = type metadata accessor for DecodingError();
    swift_allocError();
    long long v13 = v12;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *long long v13 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v13, *MEMORY[0x1E4FBBA70], v11);
  }
  return swift_willThrow();
}

uint64_t _DictionaryDecodingStorage.topContainer.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 32 * v3;
    return outlined init with copy of Any(v4, a2);
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t __DictionaryDecoder.unkeyedContainer()@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v1 + 16), (uint64_t)v13);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t v3 = MEMORY[0x1E4FBC840] + 8;
  if (swift_dynamicCast())
  {

    uint64_t v4 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v6 = v5;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v6 = type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for UnkeyedDecodingContainer);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v7 = (unsigned int *)MEMORY[0x1E4FBBA80];
  }
  else
  {
    _DictionaryDecodingStorage.topContainer.getter(*(void *)(v1 + 16), (uint64_t)v13);
    _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for [Any], v3, MEMORY[0x1E4FBB320]);
    if (swift_dynamicCast())
    {
      swift_beginAccess();
      uint64_t v8 = *(void *)(v1 + 136);
      a1[3] = &unk_1ED457BB0;
      a1[4] = lazy protocol witness table accessor for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer();
      uint64_t v9 = (void *)swift_allocObject();
      *a1 = v9;
      _OWORD v9[2] = v1;
      uint64_t v9[3] = v12;
      void v9[4] = v8;
      void v9[5] = 0;
      swift_retain();
      return swift_bridgeObjectRetain();
    }
    uint64_t v4 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v6 = v11;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v6 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v7 = (unsigned int *)MEMORY[0x1E4FBBA70];
  }
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v6, *v7, v4);
  return swift_willThrow();
}

uint64_t __DictionaryDecoder.__deallocating_deinit()
{
  return __DictionaryEncoder.__deallocating_deinit((void (*)(void, void, void))outlined consume of DictionaryDecoder.DateDecodingStrategy, (void (*)(uint64_t, uint64_t))outlined consume of DictionaryDecoder.DataDecodingStrategy, (void (*)(uint64_t, uint64_t))outlined consume of DictionaryDecoder.KeyDecodingStrategy);
}

uint64_t __DictionaryEncoder.__deallocating_deinit(void (*a1)(void, void, void), void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v3 + 48);
  uint64_t v6 = *(void *)(v3 + 56);
  uint64_t v7 = *(void *)(v3 + 64);
  uint64_t v8 = *(void *)(v3 + 72);
  uint64_t v10 = *(void *)(v3 + 120);
  uint64_t v11 = *(void *)(v3 + 112);
  a1(*(void *)(v3 + 24), *(void *)(v3 + 32), *(unsigned __int8 *)(v3 + 40));
  a2(v5, v6);
  outlined consume of DictionaryDecoder.NonConformingFloatDecodingStrategy(v7, v8);
  a3(v11, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for __DictionaryDecoder()
{
  return self;
}

id outlined copy of DictionaryDecoder.DateDecodingStrategy(id result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return (id)swift_retain();
  }
  if (!a3) {
    return result;
  }
  return result;
}

uint64_t destroy for DictionaryDecoder._Options(uint64_t a1, uint64_t a2)
{
  return destroy for DictionaryDecoder._Options(a1, a2, (void (*)(void, void, void))outlined consume of DictionaryDecoder.DateDecodingStrategy);
}

void outlined consume of DictionaryDecoder.DateDecodingStrategy(void *a1, uint64_t a2, char a3)
{
  if (a3 == 1)
  {
    swift_release();
  }
  else if (!a3)
  {
  }
}

uint64_t initializeWithCopy for DictionaryDecoder._Options(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for DictionaryDecoder._Options(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of DictionaryDecoder.DateDecodingStrategy);
}

uint64_t *assignWithCopy for DictionaryDecoder._Options(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for DictionaryDecoder._Options(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of DictionaryDecoder.DateDecodingStrategy, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryDecoder.DateDecodingStrategy);
}

uint64_t outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)(uint64_t a1)
{
  type metadata accessor for (positiveInfinity: String, negativeInfinity: String, nan: String)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (positiveInfinity: String, negativeInfinity: String, nan: String)()
{
  if (!lazy cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String))
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (positiveInfinity: String, negativeInfinity: String, nan: String));
    }
  }
}

uint64_t *assignWithTake for DictionaryDecoder._Options(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DictionaryDecoder._Options(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryDecoder.DateDecodingStrategy);
}

void *type metadata accessor for DictionaryDecoder._Options()
{
  return &unk_1ED421470;
}

void *type metadata accessor for _DictionaryDecodingStorage()
{
  return &unk_1ED44DA50;
}

void *destroy for DictionaryDecoder.KeyDecodingStrategy(void *result)
{
  if (*result >= 0xFFFFFFFFuLL) {
    return (void *)swift_release();
  }
  return result;
}

void *destructiveInjectEnumTag for DictionaryDecoder.KeyDecodingStrategy(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DictionaryDecoder.KeyDecodingStrategy()
{
  return &type metadata for DictionaryDecoder.KeyDecodingStrategy;
}

double destructiveInjectEnumTag for DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 8) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DictionaryDecoder.NonConformingFloatDecodingStrategy()
{
  return &type metadata for DictionaryDecoder.NonConformingFloatDecodingStrategy;
}

ValueMetadata *type metadata accessor for DictionaryDecoder.DataDecodingStrategy()
{
  return &type metadata for DictionaryDecoder.DataDecodingStrategy;
}

uint64_t initializeBufferWithCopyOfBuffer for DictionaryDecoder.DateDecodingStrategy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DictionaryDecoder.DateDecodingStrategy(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of DictionaryDecoder.DateDecodingStrategy);
}

void destroy for DictionaryDecoder.DateDecodingStrategy(uint64_t a1)
{
}

uint64_t *assignWithCopy for DictionaryDecoder.DateDecodingStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for DictionaryDecoder.DateDecodingStrategy(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of DictionaryDecoder.DateDecodingStrategy, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryDecoder.DateDecodingStrategy);
}

uint64_t *assignWithTake for DictionaryDecoder.DateDecodingStrategy(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DictionaryDecoder.DateDecodingStrategy(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryDecoder.DateDecodingStrategy);
}

uint64_t getEnumTag for DictionaryDecoder.DateDecodingStrategy(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for DictionaryDecoder.DateDecodingStrategy(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)double result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DictionaryDecoder.DateDecodingStrategy()
{
  return &type metadata for DictionaryDecoder.DateDecodingStrategy;
}

id outlined copy of __DictionaryReferencingEncoder.Reference(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    id v5 = a1;
    return (id)swift_bridgeObjectRetain();
  }
  else
  {
    return a1;
  }
}

void destroy for __DictionaryReferencingEncoder.Reference(uint64_t a1)
{
}

void outlined consume of __DictionaryReferencingEncoder.Reference(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for __DictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of __DictionaryReferencingEncoder.Reference(*(void **)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for __DictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(unsigned char *)(a2 + 24);
  outlined copy of __DictionaryReferencingEncoder.Reference(*(void **)a2, v4, v5, v6);
  uint64_t v7 = *(void **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6;
  outlined consume of __DictionaryReferencingEncoder.Reference(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for __DictionaryReferencingEncoder.Reference(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  char v8 = *(unsigned char *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of __DictionaryReferencingEncoder.Reference(v5, v7, v6, v8);
  return a1;
}

void *type metadata accessor for __DictionaryReferencingEncoder.Reference()
{
  return &unk_1ED45A620;
}

uint64_t destroy for DictionaryEncoder._Options(uint64_t a1, uint64_t a2)
{
  return destroy for DictionaryDecoder._Options(a1, a2, (void (*)(void, void, void))outlined consume of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t destroy for DictionaryDecoder._Options(uint64_t a1, uint64_t a2, void (*a3)(void, void, void))
{
  a3(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  if (*(void *)(a1 + 24) >= 2uLL) {
    swift_release();
  }
  if (*(void *)(a1 + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 88) >= 2uLL) {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DictionaryEncoder._Options(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeWithCopy for DictionaryDecoder._Options(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t initializeWithCopy for DictionaryDecoder._Options(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v7, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v8;
  unint64_t v9 = a2[3];
  if (v9 >= 2)
  {
    uint64_t v13 = a2[4];
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v13;
    swift_retain();
    uint64_t v10 = a2[6];
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    uint64_t v10 = a2[6];
    if (v10)
    {
LABEL_3:
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = v10;
      uint64_t v11 = a2[8];
      *(void *)(a1 + 56) = a2[7];
      *(void *)(a1 + 64) = v11;
      uint64_t v12 = a2[10];
      *(void *)(a1 + 72) = a2[9];
      *(void *)(a1 + 80) = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  long long v14 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 56) = v14;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
LABEL_6:
  unint64_t v15 = a2[11];
  if (v15 >= 2)
  {
    uint64_t v16 = a2[12];
    *(void *)(a1 + 88) = v15;
    *(void *)(a1 + 96) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  }
  *(void *)(a1 + 104) = a2[13];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for DictionaryEncoder._Options(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for DictionaryDecoder._Options(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of DictionaryEncoder.DateEncodingStrategy, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t *assignWithCopy for DictionaryDecoder._Options(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v9, v10);
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  *a1 = v8;
  a1[1] = v9;
  uint64_t v13 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v10;
  a5(v11, v12, v13);
  unint64_t v14 = a2[3];
  if ((unint64_t)a1[3] < 2)
  {
    if (v14 >= 2)
    {
      uint64_t v15 = a2[4];
      a1[3] = v14;
      a1[4] = v15;
      swift_retain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v14 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
    goto LABEL_8;
  }
  uint64_t v16 = a2[4];
  a1[3] = v14;
  a1[4] = v16;
  swift_retain();
  swift_release();
LABEL_8:
  unint64_t v17 = a1 + 5;
  uint64_t v18 = a2 + 5;
  uint64_t v19 = a2[6];
  if (a1[6])
  {
    if (v19)
    {
      a1[5] = a2[5];
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[7] = a2[7];
      a1[8] = a2[8];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[9] = a2[9];
      a1[10] = a2[10];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)((uint64_t)(a1 + 5));
      long long v21 = *(_OWORD *)(a2 + 7);
      long long v20 = *(_OWORD *)(a2 + 9);
      *unint64_t v17 = *v18;
      *(_OWORD *)(a1 + 7) = v21;
      *(_OWORD *)(a1 + 9) = v20;
    }
  }
  else if (v19)
  {
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    a1[10] = a2[10];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v22 = *v18;
    long long v23 = *(_OWORD *)(a2 + 9);
    *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
    *(_OWORD *)(a1 + 9) = v23;
    *unint64_t v17 = v22;
  }
  unint64_t v24 = a2[11];
  if ((unint64_t)a1[11] >= 2)
  {
    if (v24 >= 2)
    {
      uint64_t v26 = a2[12];
      a1[11] = v24;
      a1[12] = v26;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
    goto LABEL_20;
  }
  if (v24 < 2)
  {
LABEL_20:
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
    goto LABEL_22;
  }
  uint64_t v25 = a2[12];
  a1[11] = v24;
  a1[12] = v25;
  swift_retain();
LABEL_22:
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *assignWithTake for DictionaryEncoder._Options(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DictionaryDecoder._Options(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t *assignWithTake for DictionaryDecoder._Options(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v6 = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v9 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v6;
  a4(v7, v8, v9);
  unint64_t v10 = *(void *)(a2 + 24);
  if ((unint64_t)a1[3] < 2)
  {
    if (v10 >= 2)
    {
      uint64_t v11 = *(void *)(a2 + 32);
      a1[3] = v10;
      a1[4] = v11;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v10 < 2)
  {
    swift_release();
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
    goto LABEL_8;
  }
  uint64_t v12 = *(void *)(a2 + 32);
  a1[3] = v10;
  a1[4] = v12;
  swift_release();
LABEL_8:
  if (a1[6])
  {
    uint64_t v13 = *(void *)(a2 + 48);
    if (v13)
    {
      a1[5] = *(void *)(a2 + 40);
      a1[6] = v13;
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(a2 + 64);
      a1[7] = *(void *)(a2 + 56);
      a1[8] = v14;
      swift_bridgeObjectRelease();
      uint64_t v15 = *(void *)(a2 + 80);
      a1[9] = *(void *)(a2 + 72);
      a1[10] = v15;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of (positiveInfinity: String, negativeInfinity: String, nan: String)((uint64_t)(a1 + 5));
  }
  long long v16 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 7) = v16;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
LABEL_13:
  unint64_t v17 = *(void *)(a2 + 88);
  if ((unint64_t)a1[11] >= 2)
  {
    if (v17 >= 2)
    {
      uint64_t v19 = *(void *)(a2 + 96);
      a1[11] = v17;
      a1[12] = v19;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
    goto LABEL_18;
  }
  if (v17 < 2)
  {
LABEL_18:
    *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 88);
    goto LABEL_20;
  }
  uint64_t v18 = *(void *)(a2 + 96);
  a1[11] = v17;
  a1[12] = v18;
LABEL_20:
  a1[13] = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DictionaryDecoder._Options(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DictionaryDecoder._Options(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 104) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for DictionaryEncoder._Options()
{
  return &unk_1ED421768;
}

void *type metadata accessor for _JSONEncodingStorage()
{
  return &unk_1ED434048;
}

ValueMetadata *type metadata accessor for DictionaryEncoder.KeyEncodingStrategy()
{
  return &type metadata for DictionaryEncoder.KeyEncodingStrategy;
}

unint64_t destroy for DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    uint64_t v4 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v4;
    uint64_t v5 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *assignWithCopy for DictionaryDecoder.NonConformingFloatDecodingStrategy(void *a1, void *a2)
{
  unint64_t v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      a1[4] = a2[4];
      a1[5] = a2[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v5 = *(_OWORD *)a2;
    long long v6 = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)a1 + 2) = v6;
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v4 = *(void *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DictionaryEncoder.NonConformingFloatEncodingStrategy()
{
  return &type metadata for DictionaryEncoder.NonConformingFloatEncodingStrategy;
}

uint64_t initializeBufferWithCopyOfBuffer for DictionaryDecoder.KeyDecodingStrategy(uint64_t a1, uint64_t a2)
{
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v3 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for DictionaryDecoder.KeyDecodingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for DictionaryDecoder.KeyDecodingStrategy(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      unint64_t v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  unint64_t v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DictionaryDecoder.KeyDecodingStrategy(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DictionaryDecoder.KeyDecodingStrategy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DictionaryEncoder.DataEncodingStrategy()
{
  return &type metadata for DictionaryEncoder.DataEncodingStrategy;
}

uint64_t initializeBufferWithCopyOfBuffer for DictionaryEncoder.DateEncodingStrategy(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return initializeBufferWithCopyOfBuffer for DictionaryDecoder.DateDecodingStrategy(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t initializeBufferWithCopyOfBuffer for DictionaryDecoder.DateDecodingStrategy(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for DictionaryEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return assignWithCopy for DictionaryDecoder.DateDecodingStrategy(a1, a2, a3, (void (*)(void, uint64_t, uint64_t))outlined copy of DictionaryEncoder.DateEncodingStrategy, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t *assignWithCopy for DictionaryDecoder.DateDecodingStrategy(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  uint64_t v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  uint64_t v12 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for DictionaryEncoder.DateEncodingStrategy(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return assignWithTake for DictionaryDecoder.DateDecodingStrategy(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of DictionaryEncoder.DateEncodingStrategy);
}

uint64_t *assignWithTake for DictionaryDecoder.DateDecodingStrategy(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v8 = *((unsigned __int8 *)a1 + 16);
  *((unsigned char *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for DictionaryEncoder.DateEncodingStrategy()
{
  return &type metadata for DictionaryEncoder.DateEncodingStrategy;
}

ValueMetadata *type metadata accessor for DictionaryEncoder.OutputFormatting()
{
  return &type metadata for DictionaryEncoder.OutputFormatting;
}

unint64_t lazy protocol witness table accessor for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting()
{
  unint64_t result = lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting;
  if (!lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DictionaryEncoder.OutputFormatting and conformance DictionaryEncoder.OutputFormatting);
  }
  return result;
}

uint64_t protocol witness for Decoder.userInfo.getter in conformance __DictionaryDecoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Decoder.container<A>(keyedBy:) in conformance __DictionaryDecoder()
{
  return __DictionaryDecoder.container<A>(keyedBy:)();
}

uint64_t protocol witness for Decoder.unkeyedContainer() in conformance __DictionaryDecoder@<X0>(void *a1@<X8>)
{
  return __DictionaryDecoder.unkeyedContainer()(a1);
}

uint64_t protocol witness for Decoder.singleValueContainer() in conformance __DictionaryDecoder@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  a1[3] = type metadata accessor for __DictionaryDecoder();
  a1[4] = lazy protocol witness table accessor for type __DictionaryEncoder and conformance __DictionaryEncoder(&lazy protocol witness table cache variable for type __DictionaryDecoder and conformance __DictionaryDecoder, (void (*)(uint64_t))type metadata accessor for __DictionaryDecoder);
  *a1 = v3;
  return swift_retain();
}

uint64_t _DictionaryDecodingStorage.popContainer()()
{
  uint64_t v1 = *v0;
  if (*((void *)*v0 + 2))
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v2 = *((void *)v1 + 2);
      if (v2)
      {
LABEL_4:
        uint64_t v3 = v2 - 1;
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v1[32 * v2]);
        *((void *)v1 + 2) = v3;
        *uint64_t v0 = v1;
        return result;
      }
    }
    else
    {
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
      uint64_t v2 = *((void *)v1 + 2);
      if (v2) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #3 in _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t a6, uint64_t a7)
{
  swift_beginAccess();
  uint64_t v13 = *(void *)(a7 + 136);
  type metadata accessor for _ContiguousArrayStorage<CodingKey>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  *(void *)(inited + 56) = &unk_1ED468578;
  *(void *)(inited + 64) = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v15 = swift_allocObject();
  *(void *)(inited + 32) = v15;
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  *(void *)(v15 + 32) = 0;
  *(unsigned char *)(v15 + 40) = 1;
  v18[0] = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(inited);
  a5(v18, v13);
  swift_bridgeObjectRelease();
  __swift_project_boxed_opaque_existential_1(v18, v18[3]);
  uint64_t v16 = dispatch thunk of CodingKey.stringValue.getter();
  outlined init with copy of Any(a4, a1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return v16;
}

uint64_t _DictionaryKeyedDecodingContainer.allKeys.getter()
{
  type metadata accessor for [String : Any](0, &lazy cache variable for type metadata for [String : Any].Keys, MEMORY[0x1E4FBAE20]);
  lazy protocol witness table accessor for type [String : Any].Keys and conformance [A : B].Keys();
  swift_bridgeObjectRetain();
  uint64_t v0 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t _DictionaryKeyedDecodingContainer.decodeNil(forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = dispatch thunk of CodingKey.stringValue.getter();
  if (!*(void *)(a3 + 16) || (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v12), (v14 & 1) == 0))
  {
    long long v34 = 0u;
    long long v35 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v13, (uint64_t)&v34);
  swift_bridgeObjectRelease();
  if (!*((void *)&v35 + 1))
  {
LABEL_7:
    outlined destroy of Any?((uint64_t)&v34);
    uint64_t v28 = type metadata accessor for DecodingError();
    uint64_t v36 = swift_allocError();
    uint64_t v18 = v17;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    void v18[3] = a5;
    void v18[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v18);
    long long v20 = *(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16);
    v20(boxed_opaque_existential_1, a1, a5);
    swift_beginAccess();
    uint64_t v16 = *(void *)(a2 + 136);
    *(void *)&long long v29 = 0;
    *((void *)&v29 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    id v32 = (id)0xD00000000000001DLL;
    unint64_t v33 = 0x8000000188330C20;
    uint64_t v30 = a5;
    uint64_t v31 = a6;
    long long v21 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v29);
    v20(v21, a1, a5);
    uint64_t v22 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v29, a2);
    unint64_t v24 = v23;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v29);
    v25._countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 46;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v28 - 8) + 104))(v18, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return v16 & 1;
  }
  outlined init with take of Any(&v34, &v29);
  outlined init with take of Any(&v29, &v34);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  int v15 = swift_dynamicCast();
  LOBYTE(v16) = v15;
  if (v15) {

  }
  return v16 & 1;
}

uint64_t _DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v51 = a4;
  uint64_t v59 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)&v47 - v13;
  uint64_t v16 = v15;
  uint64_t v17 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v50 = a3;
  if (!v19 || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    long long v57 = 0u;
    long long v58 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v57);
  swift_bridgeObjectRelease();
  if (!*((void *)&v58 + 1))
  {
LABEL_13:
    outlined destroy of Any?((uint64_t)&v57);
    uint64_t v48 = type metadata accessor for DecodingError();
    uint64_t v49 = swift_allocError();
    uint64_t v36 = v35;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    unint64_t v47 = (void (*)(char *, uint64_t, uint64_t))((char *)v36 + *(int *)(v37 + 48));
    _OWORD v36[3] = a5;
    v36[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v36);
    uint64_t v39 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16);
    v39(boxed_opaque_existential_1, v16, a5);
    uint64_t v40 = v59;
    swift_beginAccess();
    *(void *)&long long v52 = 0;
    *((void *)&v52 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    unint64_t v55 = 0xD00000000000001DLL;
    unint64_t v56 = 0x8000000188330C20;
    uint64_t v53 = a5;
    uint64_t v54 = a6;
    uint64_t v41 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v52);
    v39(v41, v16, a5);
    a6 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v52, v40);
    uint64_t v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
    v44._countAndFlagsBits = a6;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v48 - 8) + 104))(v36, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return a6 & 1;
  }
  outlined init with take of Any(&v57, &v52);
  unint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v48 = v9;
  v47(v14, v16, a5);
  uint64_t v22 = v59;
  long long v23 = (uint64_t *)(v59 + 136);
  swift_beginAccess();
  unint64_t v24 = *(void **)(v22 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v22 + 136) = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *long long v23 = (uint64_t)v24;
  }
  unint64_t v27 = v24[2];
  unint64_t v26 = v24[3];
  uint64_t v28 = v48;
  if (v27 >= v26 >> 1) {
    *long long v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v24);
  }
  v47(v11, (uint64_t)v14, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v11, v23, a5, a6);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, a5);
  swift_endAccess();
  uint64_t v29 = v59;
  uint64_t v30 = v49;
  char v31 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v52);
  if (!v30)
  {
    if (v31 != 2)
    {
      LOBYTE(a6) = v31 & 1;
      $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
      return a6 & 1;
    }
    uint64_t v32 = type metadata accessor for DecodingError();
    swift_allocError();
    long long v34 = v33;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    void *v34 = MEMORY[0x1E4FBB390];
    *(void *)&long long v57 = 0;
    *((void *)&v57 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, *MEMORY[0x1E4FBBA80], v32);
    swift_willThrow();
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
  return a6 & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.allKeys.getter in conformance _DictionaryKeyedDecodingContainer<A>()
{
  return _DictionaryKeyedDecodingContainer.allKeys.getter();
}

BOOL protocol witness for KeyedDecodingContainerProtocol.contains(_:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1)
{
  return _DictionaryKeyedDecodingContainer.contains(_:)(a1, *v1, v1[1]);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, _DictionaryKeyedDecodingContainer.decodeNil(forKey:)) & 1;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1;
}

long long *protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return _DictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *(void **)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

double protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return _DictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

float protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2)
{
  return _DictionaryKeyedDecodingContainer.decode(_:forKey:)(a1, *v2, v2[1], v2[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

{
  return KeyedDecodingContainerProtocol.decode(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))_DictionaryKeyedDecodingContainer.decode<A>(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>()
{
  return KeyedDecodingContainerProtocol.decodeIfPresent<A>(_:forKey:)();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedContainer<A>(keyedBy:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))_DictionaryKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))_DictionaryKeyedDecodingContainer.nestedUnkeyedContainer(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder() in conformance _DictionaryKeyedDecodingContainer<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return _DictionaryKeyedDecodingContainer.superDecoder()(*v2, v2[1], v2[2], *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.superDecoder(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))_DictionaryKeyedDecodingContainer.superDecoder(forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.nestedUnkeyedContainer(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t _JSONUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = v0[3];
  *(void *)&long long v33 = 0x207865646E49;
  *((void *)&v33 + 1) = 0xE600000000000000;
  v32[0] = v3;
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  char v5 = (void *)(v2 + 136);
  swift_beginAccess();
  uint64_t v6 = *(void **)(v2 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + 136) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
    *char v5 = v6;
  }
  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1, v6);
    *char v5 = v6;
  }
  long long v34 = &unk_1ED468578;
  unint64_t v35 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v10 = swift_allocObject();
  *(void *)&long long v33 = v10;
  *(void *)(v10 + 16) = 0x207865646E49;
  *(void *)(v10 + 24) = 0xE600000000000000;
  *(void *)(v10 + 32) = v3;
  *(unsigned char *)(v10 + 40) = 0;
  _OWORD v6[2] = v9 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v33, (uint64_t)&v6[5 * v9 + 4]);
  uint64_t v12 = v1[1];
  if (v3 >= *(void *)(v12 + 16))
  {
    uint64_t v16 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v18 = v17;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v18 = type metadata accessor for KeyedDecodingContainer();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v16 - 8) + 104))(v18, *MEMORY[0x1E4FBBA80], v16);
    swift_willThrow();
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v1);
  }
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of Any(v12 + 32 * v3 + 32, (uint64_t)&v33);
    outlined init with copy of Any((uint64_t)&v33, (uint64_t)v32);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
    if (swift_dynamicCast())
    {

      uint64_t v13 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v15 = v14;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *uint64_t v15 = type metadata accessor for KeyedDecodingContainer();
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, *MEMORY[0x1E4FBBA80], v13);
LABEL_14:
      swift_willThrow();
      goto LABEL_15;
    }
    outlined init with copy of Any((uint64_t)&v33, (uint64_t)v32);
    type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any], MEMORY[0x1E4FBAEA0]);
    uint64_t result = swift_dynamicCast();
    if (!result)
    {
      uint64_t v29 = type metadata accessor for DecodingError();
      swift_allocError();
      char v31 = v30;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *char v31 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v29 - 8) + 104))(v31, *MEMORY[0x1E4FBBA70], v29);
      goto LABEL_14;
    }
    uint64_t v19 = v1[3];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (!v20)
    {
      uint64_t v22 = (uint64_t)v36;
      v1[3] = v21;
      uint64_t v23 = swift_retain();
      uint64_t v24 = specialized _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(v23, v22);
      uint64_t v26 = v25;
      uint64_t v28 = v27;
      swift_release();
      v32[0] = v24;
      v32[1] = v26;
      v32[2] = v28;
      type metadata accessor for _DictionaryKeyedDecodingContainer();
      swift_getWitnessTable();
      KeyedDecodingContainer.init<A>(_:)();
LABEL_15:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
      return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v1);
    }
  }
  __break(1u);
  return result;
}

uint64_t _JSONUnkeyedDecodingContainer.superDecoder()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v1;
  uint64_t v6 = v1[3];
  *(void *)&long long v27 = 0x207865646E49;
  *((void *)&v27 + 1) = 0xE600000000000000;
  uint64_t v30 = v6;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  unint64_t v8 = (uint64_t *)(v5 + 136);
  swift_beginAccess();
  unint64_t v9 = *(void **)(v5 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v5 + 136) = v9;
  uint64_t v32 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
    *unint64_t v8 = (uint64_t)v9;
  }
  unint64_t v12 = v9[2];
  unint64_t v11 = v9[3];
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v11 > 1), v12 + 1, 1, v9);
    *unint64_t v8 = (uint64_t)v9;
  }
  uint64_t v28 = &unk_1ED468578;
  unint64_t v29 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v13 = swift_allocObject();
  *(void *)&long long v27 = v13;
  *(void *)(v13 + 16) = 0x207865646E49;
  *(void *)(v13 + 24) = 0xE600000000000000;
  *(void *)(v13 + 32) = v6;
  *(unsigned char *)(v13 + 40) = 0;
  _OWORD v9[2] = v12 + 1;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v27, (uint64_t)&v9[5 * v12 + 4]);
  uint64_t v15 = v3[1];
  if (v6 >= *(void *)(v15 + 16))
  {
    uint64_t v24 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v26 = v25;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v26 = type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for Decoder);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v26, *MEMORY[0x1E4FBBA80], v24);
    swift_willThrow();
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v3);
  }
  else if (v6 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v16 = *v8;
    v3[3] = v6 + 1;
    outlined init with copy of Any(v15 + 32 * v6 + 32, (uint64_t)&v27);
    long long v17 = *(_OWORD *)(v5 + 24);
    long long v18 = *(_OWORD *)(v5 + 40);
    long long v19 = *(_OWORD *)(v5 + 56);
    long long v20 = *(_OWORD *)(v5 + 72);
    long long v21 = *(_OWORD *)(v5 + 104);
    v31[4] = *(_OWORD *)(v5 + 88);
    v31[5] = v21;
    v31[6] = *(_OWORD *)(v5 + 120);
    void v31[2] = v19;
    v31[3] = v20;
    v31[0] = v17;
    v31[1] = v18;
    uint64_t v22 = type metadata accessor for __DictionaryDecoder();
    swift_allocObject();
    swift_bridgeObjectRetain();
    outlined retain of DictionaryDecoder._Options((uint64_t)v31);
    uint64_t v23 = __DictionaryDecoder.init(referencing:at:options:)((uint64_t)&v27, v16, v31);
    a1[3] = v22;
    a1[4] = lazy protocol witness table accessor for type __DictionaryEncoder and conformance __DictionaryEncoder(&lazy protocol witness table cache variable for type __DictionaryDecoder and conformance __DictionaryDecoder, (void (*)(uint64_t))type metadata accessor for __DictionaryDecoder);
    *a1 = v23;
    return $defer #1 <A>() in _JSONKeyedEncodingContainer.encode(_:forKey:)(v3);
  }
  return result;
}

uint64_t protocol witness for UnkeyedDecodingContainer.count.getter in conformance _JSONUnkeyedDecodingContainer()
{
  return *(void *)(*(void *)(v0 + 8) + 16);
}

BOOL protocol witness for UnkeyedDecodingContainer.isAtEnd.getter in conformance _JSONUnkeyedDecodingContainer()
{
  return *(void *)(v0 + 24) >= *(void *)(*(void *)(v0 + 8) + 16);
}

uint64_t protocol witness for UnkeyedDecodingContainer.currentIndex.getter in conformance _JSONUnkeyedDecodingContainer()
{
  return *(void *)(v0 + 24);
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeNil() in conformance _JSONUnkeyedDecodingContainer()
{
  _JSONUnkeyedDecodingContainer.decodeNil()();
  return v0 & 1;
}

uint64_t protocol witness for UnkeyedDecodingContainer.decodeIfPresent<A>(_:) in conformance _JSONUnkeyedDecodingContainer()
{
  return UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedContainer<A>(keyedBy:) in conformance _JSONUnkeyedDecodingContainer()
{
  return _JSONUnkeyedDecodingContainer.nestedContainer<A>(keyedBy:)();
}

uint64_t protocol witness for UnkeyedDecodingContainer.nestedUnkeyedContainer() in conformance _JSONUnkeyedDecodingContainer@<X0>(void *a1@<X8>)
{
  return _JSONUnkeyedDecodingContainer.nestedUnkeyedContainer()(a1);
}

uint64_t protocol witness for UnkeyedDecodingContainer.superDecoder() in conformance _JSONUnkeyedDecodingContainer@<X0>(uint64_t *a1@<X8>)
{
  return _JSONUnkeyedDecodingContainer.superDecoder()(a1);
}

uint64_t __DictionaryDecoder.expectNonNull<A>(_:)(uint64_t a1)
{
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v1 + 16), (uint64_t)v10);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v4 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v6 = v5;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v6 = a1;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x8000000188330140;
    v8._countAndFlagsBits = 0xD00000000000001ELL;
    String.append(_:)(v8);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v6, *MEMORY[0x1E4FBBA80], v4);
    return swift_willThrow();
  }
  return result;
}

uint64_t __DictionaryDecoder.decode<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v10 - 8);
  unint64_t v12 = &v16[-v11 - 8];
  uint64_t result = __DictionaryDecoder.expectNonNull<A>(_:)(a1);
  if (!v5)
  {
    swift_beginAccess();
    _DictionaryDecodingStorage.topContainer.getter(*(void *)(v4 + 16), (uint64_t)v16);
    __DictionaryDecoder.unbox<A>(_:as:)((uint64_t)v16, a1, a2, a3, (uint64_t)v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    uint64_t v14 = *(void *)(a2 - 8);
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, a2);
    if (result == 1) {
      __break(1u);
    }
    else {
      return (*(uint64_t (**)(uint64_t, unsigned char *, uint64_t))(v14 + 32))(a4, v12, a2);
    }
  }
  return result;
}

uint64_t protocol witness for Encoder.codingPath.getter in conformance __DictionaryEncoder()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for SingleValueDecodingContainer.decodeNil() in conformance __DictionaryDecoder()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v1 + 16), (uint64_t)v5);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t v2 = swift_dynamicCast();
  if (v2) {

  }
  return v2;
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder(uint64_t a1, uint64_t a2)
{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder(a1, a2, (void (*)(void))specialized __DictionaryDecoder.expectNonNull<A>(_:), (uint64_t (*)(unsigned char *))specialized __DictionaryDecoder.unbox(_:as:));
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder(a1, a2, (void (*)(void))specialized __DictionaryDecoder.expectNonNull<A>(_:), (uint64_t (*)(unsigned char *))specialized __DictionaryDecoder.unbox(_:as:));
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder(a1, a2, (void (*)(void))specialized __DictionaryDecoder.expectNonNull<A>(_:), (uint64_t (*)(unsigned char *))specialized __DictionaryDecoder.unbox(_:as:));
}

{
  return protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder(a1, a2, (void (*)(void))specialized __DictionaryDecoder.expectNonNull<A>(_:), (uint64_t (*)(unsigned char *))specialized __DictionaryDecoder.unbox(_:as:));
}

uint64_t protocol witness for SingleValueDecodingContainer.decode<A>(_:) in conformance __DictionaryDecoder@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return __DictionaryDecoder.decode<A>(_:)(a1, a2, a3, a4);
}

uint64_t lazy protocol witness table accessor for type __DictionaryEncoder and conformance __DictionaryEncoder(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with take of (key: String, value: Encodable)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (key: String, value: Encodable)?(0, &lazy cache variable for type metadata for (key: String, value: Encodable)?, (void (*)(uint64_t))type metadata accessor for (key: String, value: Encodable));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (key: String, value: Encodable)()
{
  if (!lazy cache variable for type metadata for (key: String, value: Encodable))
  {
    type metadata accessor for CVarArg(255, &lazy cache variable for type metadata for Encodable);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: String, value: Encodable));
    }
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance _JSONKey@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance _JSONKey()
{
  return *(void *)(v0 + 16);
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance _JSONKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = a1;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance _JSONKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _JSONKey(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(uint64_t a1, char a2, uint64_t (*a3)(void *), uint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v47[3] = a4;
  if (a1 < 0) {
    goto LABEL_35;
  }
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = a5;
  if (!a1 || (unint64_t v45 = a6 >> 14, a6 >> 14 == a5 >> 14))
  {
    specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(a6, v44, a2 & 1, v10);
    swift_bridgeObjectRelease();
    a6 = *(void *)(v10 + 16);
    swift_bridgeObjectRetain();
    swift_release();
LABEL_5:
    swift_release();
    return a6;
  }
  uint64_t v35 = a1;
  uint64_t v36 = v10;
  uint64_t v43 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v12 = a5;
  unint64_t v13 = a5;
  unint64_t v40 = a5;
  while (1)
  {
    v47[0] = Substring.subscript.getter();
    v47[1] = v14;
    char v15 = a3(v47);
    if (v6)
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return a6;
    }
    char v16 = v15;
    swift_bridgeObjectRelease();
    if (v16) {
      break;
    }
    unint64_t v12 = Substring.index(after:)();
LABEL_9:
    if (v45 == v12 >> 14) {
      goto LABEL_24;
    }
  }
  if (v13 >> 14 == v12 >> 14 && (a2 & 1) != 0)
  {
    unint64_t v12 = Substring.index(after:)();
    *(void *)(v44 + 16) = v12;
    unint64_t v13 = v12;
    unint64_t v40 = v12;
    goto LABEL_9;
  }
  if (v12 >> 14 < v13 >> 14) {
    goto LABEL_34;
  }
  uint64_t v17 = Substring.subscript.getter();
  uint64_t v39 = v18;
  uint64_t v41 = v17;
  uint64_t v37 = v20;
  uint64_t v38 = v19;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v43 + 2) + 1, 1, v43);
  }
  unint64_t v22 = *((void *)v43 + 2);
  unint64_t v21 = *((void *)v43 + 3);
  if (v22 >= v21 >> 1) {
    uint64_t v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v43);
  }
  *((void *)v43 + 2) = v22 + 1;
  uint64_t v23 = &v43[32 * v22];
  *((void *)v23 + 4) = v41;
  *((void *)v23 + 5) = v39;
  *((void *)v23 + 6) = v38;
  *((void *)v23 + 7) = v37;
  *(void *)(v36 + 16) = v43;
  uint64_t v24 = Substring.index(after:)();
  unint64_t v12 = v24;
  *(void *)(v44 + 16) = v24;
  if (*((void *)v43 + 2) != v35)
  {
    unint64_t v13 = v24;
    unint64_t v40 = v24;
    goto LABEL_9;
  }
  unint64_t v40 = v24;
  unint64_t v13 = v24;
LABEL_24:
  if (v45 == v13 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    a6 = (unint64_t)v43;
LABEL_33:
    swift_bridgeObjectRetain();
    swift_release();
    goto LABEL_5;
  }
  if (v45 >= v40 >> 14)
  {
    uint64_t v25 = Substring.subscript.getter();
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    uint64_t v31 = v30;
    swift_bridgeObjectRelease();
    a6 = (unint64_t)v43;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      a6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v43 + 2) + 1, 1, v43);
    }
    unint64_t v33 = *(void *)(a6 + 16);
    unint64_t v32 = *(void *)(a6 + 24);
    if (v33 >= v32 >> 1) {
      a6 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, (char *)a6);
    }
    *(void *)(a6 + 16) = v33 + 1;
    long long v34 = (void *)(a6 + 32 * v33);
    v34[4] = v25;
    void v34[5] = v27;
    v34[6] = v29;
    v34[7] = v31;
    *(void *)(v36 + 16) = a6;
    goto LABEL_33;
  }
LABEL_34:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
LABEL_35:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized appendSubsequence #1 <A>(end:) in Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a2 + 16) >> 14;
  int v5 = (v4 == a1 >> 14) & a3;
  if (v5 == 1) {
    return v5 ^ 1u;
  }
  if (a1 >> 14 >= v4)
  {
    uint64_t v7 = Substring.subscript.getter();
    uint64_t v9 = v8;
    uint64_t v11 = v10;
    uint64_t v13 = v12;
    uint64_t v14 = *(char **)(a4 + 16);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a4 + 16) = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v14 + 2) + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    unint64_t v17 = *((void *)v14 + 2);
    unint64_t v16 = *((void *)v14 + 3);
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)(a4 + 16) = v14;
    }
    *((void *)v14 + 2) = v17 + 1;
    uint64_t v18 = &v14[32 * v17];
    *((void *)v18 + 4) = v7;
    *((void *)v18 + 5) = v9;
    *((void *)v18 + 6) = v11;
    *((void *)v18 + 7) = v13;
    return v5 ^ 1u;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_187A9B4C4()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t specialized Array._customRemoveLast()()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v0 = v1;
  if (!result || v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    uint64_t v1 = result;
    *uint64_t v0 = result;
  }
  uint64_t v3 = v1 & 0xFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    uint64_t v5 = v4 - 1;
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(void *)(v3 + 16) = v5;
    specialized Array._endMutation()();
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void type metadata accessor for (Any, EncodingError.Context)()
{
  if (!lazy cache variable for type metadata for (Any, EncodingError.Context))
  {
    type metadata accessor for EncodingError.Context();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Any, EncodingError.Context));
    }
  }
}

uint64_t specialized __DictionaryReferencingEncoder.init(referencing:key:convertedKey:wrapping:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v61 = a7;
  MEMORY[0x1F4188790](a1);
  uint64_t v59 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v62 = v15;
  uint64_t v63 = v14;
  unint64_t v16 = *(void (**)(double))(v15 + 32);
  uint64_t v60 = (char *)&v47 - v17;
  v16(v13);
  *(void *)(a5 + 144) = a1;
  __swift_project_boxed_opaque_existential_1(a3, a3[3]);
  swift_retain();
  swift_retain();
  id v18 = a4;
  uint64_t v19 = dispatch thunk of CodingKey.stringValue.getter();
  id v58 = v18;
  *(void *)(a5 + 152) = v18;
  *(void *)(a5 + 160) = v19;
  *(void *)(a5 + 168) = v20;
  *(unsigned char *)(a5 + 176) = 1;
  swift_release();
  uint64_t v21 = *(void *)(a1 + 32);
  unint64_t v56 = *(void **)(a1 + 24);
  unint64_t v23 = *(void *)(a1 + 48);
  uint64_t v22 = *(void *)(a1 + 56);
  uint64_t v51 = v21;
  unint64_t v52 = v23;
  uint64_t v47 = v22;
  uint64_t v24 = *(void *)(a1 + 72);
  uint64_t v54 = *(void *)(a1 + 64);
  uint64_t v25 = v54;
  uint64_t v49 = v24;
  uint64_t v27 = *(void *)(a1 + 88);
  uint64_t v53 = *(void *)(a1 + 80);
  uint64_t v26 = v53;
  uint64_t v28 = *(void *)(a1 + 96);
  uint64_t v48 = *(void *)(a1 + 104);
  uint64_t v29 = *(void *)(a1 + 120);
  unint64_t v55 = *(void *)(a1 + 112);
  unint64_t v30 = v55;
  uint64_t v31 = *(void *)(a1 + 128);
  uint64_t v64 = v29;
  uint64_t v65 = v31;
  LOBYTE(a3) = *(unsigned char *)(a1 + 40);
  int v50 = a3;
  swift_beginAccess();
  uint64_t v57 = *(void *)(a1 + 136);
  uint64_t v32 = v57;
  *(void *)(a5 + 32) = v21;
  *(unsigned char *)(a5 + 40) = (_BYTE)a3;
  *(void *)(a5 + 48) = v23;
  *(void *)(a5 + 56) = v47;
  *(void *)(a5 + 64) = v25;
  uint64_t v33 = v49;
  *(void *)(a5 + 72) = v49;
  *(void *)(a5 + 80) = v26;
  *(void *)(a5 + 88) = v27;
  *(void *)(a5 + 96) = v28;
  *(void *)(a5 + 104) = v48;
  *(void *)(a5 + 112) = v30;
  uint64_t v34 = v65;
  *(void *)(a5 + 120) = v64;
  uint64_t v35 = MEMORY[0x1E4FBC860];
  *(void *)(a5 + 128) = v34;
  uint64_t v36 = v56;
  *(void *)(a5 + 16) = v35;
  *(void *)(a5 + 24) = v36;
  *(void *)(a5 + 136) = v32;
  uint64_t v37 = (void *)(a5 + 136);
  swift_beginAccess();
  uint64_t v38 = *(void **)(a5 + 136);
  outlined copy of DictionaryDecoder.DateDecodingStrategy(v36, v51, v50);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v52);
  outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(v54, v33);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v55);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a5 + 136) = v38;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v38 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
    *uint64_t v37 = v38;
  }
  unint64_t v41 = v38[2];
  unint64_t v40 = v38[3];
  if (v41 >= v40 >> 1) {
    *uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v40 > 1), v41 + 1, 1, v38);
  }
  uint64_t v43 = v62;
  uint64_t v42 = v63;
  uint64_t v45 = (uint64_t)v59;
  uint64_t v44 = v60;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))(v59, v60, v63);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v45, (uint64_t *)(a5 + 136), v42, v61);
  swift_release();
  swift_release();

  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
  return a5;
}

unint64_t specialized static DictionaryDecoder.KeyDecodingStrategy._convertFromSnakeCase(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v4)
  {
LABEL_11:
    swift_bridgeObjectRetain();
    return v3;
  }
  unint64_t v5 = 0;
  unint64_t v6 = 4 * v4;
  unint64_t v7 = 15;
  while (1)
  {
    if (String.subscript.getter() == 95 && v9 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0) {
      break;
    }
LABEL_7:
    unint64_t v7 = String.index(after:)();
    unint64_t v5 = v7 >> 14;
    if (v7 >> 14 == v6) {
      goto LABEL_11;
    }
  }
  uint64_t v11 = 7;
  if (((a2 >> 60) & ((v3 & 0x800000000000000) == 0)) != 0) {
    uint64_t v11 = 11;
  }
  uint64_t v69 = v11 | (v4 << 16);
  unint64_t result = String.index(before:)();
  unint64_t i = result >> 14;
  if (v5 < result >> 14)
  {
    if (String.subscript.getter() == 95 && v13 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      unint64_t result = swift_bridgeObjectRelease();
      if ((v15 & 1) == 0) {
        goto LABEL_30;
      }
    }
    unint64_t result = String.index(before:)();
    for (unint64_t i = result >> 14; v5 < result >> 14; unint64_t i = result >> 14)
    {
      if (String.subscript.getter() == 95 && v17 == 0xE100000000000000)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        unint64_t result = swift_bridgeObjectRelease();
        if ((v16 & 1) == 0) {
          break;
        }
      }
      unint64_t result = String.index(before:)();
    }
  }
LABEL_30:
  if (i < v5)
  {
    __break(1u);
    goto LABEL_53;
  }
  unint64_t result = String.index(after:)();
  unint64_t v68 = result;
  unint64_t v70 = result >> 14;
  unint64_t v71 = v6;
  if (v6 < result >> 14)
  {
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  swift_bridgeObjectRetain();
  String.index(after:)();
  unint64_t v18 = String.subscript.getter();
  unint64_t v20 = v19;
  uint64_t v21 = swift_bridgeObjectRelease();
  *(void *)&long long v73 = 95;
  *((void *)&v73 + 1) = 0xE100000000000000;
  MEMORY[0x1F4188790](v21);
  v64[2] = &v73;
  swift_bridgeObjectRetain();
  uint64_t v22 = specialized Collection.split(maxSplits:omittingEmptySubsequences:whereSeparator:)(0x7FFFFFFFFFFFFFFFLL, 1, partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v64, v18, v20);
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v22 + 16);
  if (v23 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    String.index(after:)();
    uint64_t v24 = String.subscript.getter();
    uint64_t v26 = v25;
    uint64_t v28 = v27;
    uint64_t v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v31 = MEMORY[0x18C115860](v24, v26, v28, v30);
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    unint64_t v34 = v71;
    if (!(v7 >> 14)) {
      goto LABEL_34;
    }
LABEL_47:
    uint64_t v54 = String.subscript.getter();
    uint64_t v55 = MEMORY[0x18C115860](v54);
    uint64_t v57 = v56;
    swift_bridgeObjectRelease();
    if (v70 == v34)
    {
      *(void *)&long long v73 = v55;
      *((void *)&v73 + 1) = v57;
      swift_bridgeObjectRetain();
      v58._countAndFlagsBits = v31;
      v58._object = v33;
      String.append(_:)(v58);
      swift_bridgeObjectRelease();
      goto LABEL_51;
    }
    *(void *)&long long v73 = v55;
    *((void *)&v73 + 1) = v57;
    swift_bridgeObjectRetain();
    v59._countAndFlagsBits = v31;
    v59._object = v33;
    String.append(_:)(v59);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v33 = (void *)*((void *)&v73 + 1);
    uint64_t v60 = v73;
    uint64_t v61 = String.subscript.getter();
    uint64_t v50 = MEMORY[0x18C115860](v61);
    unint64_t v52 = v62;
    swift_bridgeObjectRelease();
    *(void *)&long long v73 = v60;
LABEL_50:
    *((void *)&v73 + 1) = v33;
    swift_bridgeObjectRetain();
    v63._countAndFlagsBits = v50;
    v63._object = v52;
    String.append(_:)(v63);
    swift_bridgeObjectRelease();
LABEL_51:
    swift_bridgeObjectRelease();
    return v73;
  }
  _sypSgMaTm_3(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  unint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_18834BB80;
  if (!v23) {
    goto LABEL_54;
  }
  uint64_t v35 = (Swift::String *)result;
  swift_bridgeObjectRetain();
  Swift::String v36 = Substring.lowercased()();
  unint64_t result = swift_bridgeObjectRelease();
  _OWORD v35[2] = v36;
  uint64_t v67 = v22;
  uint64_t v37 = *(void *)(v22 + 16);
  unint64_t v34 = v71;
  if (!v37)
  {
LABEL_55:
    __break(1u);
    return result;
  }
  uint64_t v66 = v3;
  int64_t v38 = v37 - 1;
  if (v37 == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v39 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v65 = v35;
    uint64_t v76 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38, 0);
    uint64_t v39 = v76;
    unint64_t v72 = lazy protocol witness table accessor for type Substring and conformance Substring();
    unint64_t v40 = (uint64_t *)(v67 + 88);
    do
    {
      uint64_t v41 = *(v40 - 1);
      uint64_t v42 = *v40;
      long long v73 = *(_OWORD *)(v40 - 3);
      uint64_t v74 = v41;
      uint64_t v75 = v42;
      uint64_t v43 = StringProtocol.capitalized.getter();
      uint64_t v45 = v44;
      uint64_t v76 = v39;
      unint64_t v47 = *(void *)(v39 + 16);
      unint64_t v46 = *(void *)(v39 + 24);
      if (v47 >= v46 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1);
        uint64_t v39 = v76;
      }
      *(void *)(v39 + 16) = v47 + 1;
      uint64_t v48 = v39 + 16 * v47;
      *(void *)(v48 + 32) = v43;
      *(void *)(v48 + 40) = v45;
      v40 += 4;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease();
    unint64_t v34 = v71;
    uint64_t v35 = v65;
  }
  *(void *)&long long v73 = v35;
  specialized Array.append<A>(contentsOf:)(v39);
  _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v31 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v33 = v53;
  swift_bridgeObjectRelease();
  if (v7 >> 14) {
    goto LABEL_47;
  }
LABEL_34:
  if (v70 != v34)
  {
    uint64_t v49 = String.subscript.getter();
    uint64_t v50 = MEMORY[0x18C115860](v49);
    unint64_t v52 = v51;
    swift_bridgeObjectRelease();
    *(void *)&long long v73 = v31;
    goto LABEL_50;
  }
  return v31;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSypG_SS_ypts5NeverOTg506_sSSypf31Iggnor_SS3key_yp5valuetSS_ypts5D11OIegnrzr_TRSSypSSypIggnor_Tf1cn_nTf4ng_n(uint64_t a1, uint64_t (*a2)(_OWORD *, void, void, _OWORD *), uint64_t a3)
{
  uint64_t v43 = a3;
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (!v3) {
    return v4;
  }
  uint64_t v42 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
  uint64_t result = specialized Dictionary.startIndex.getter(a1);
  uint64_t v8 = result;
  uint64_t v9 = 0;
  uint64_t v10 = a1 + 64;
  char v11 = *(unsigned char *)(a1 + 32);
  int v31 = v7;
  uint64_t v32 = a1 + 64;
  int64_t v30 = v3;
  while ((v8 & 0x8000000000000000) == 0 && v8 < 1 << v11)
  {
    unint64_t v14 = (unint64_t)v8 >> 6;
    if ((*(void *)(v10 + 8 * ((unint64_t)v8 >> 6)) & (1 << v8)) == 0) {
      goto LABEL_27;
    }
    if (*(_DWORD *)(a1 + 36) != v7) {
      goto LABEL_28;
    }
    char v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v8);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v8, (uint64_t)v39);
    v38[0] = v17;
    v38[1] = v16;
    *(void *)&long long v36 = v17;
    *((void *)&v36 + 1) = v16;
    outlined init with copy of Any((uint64_t)v39, (uint64_t)v37);
    long long v34 = v36;
    v35[0] = v37[0];
    v35[1] = v37[1];
    swift_bridgeObjectRetain_n();
    uint64_t v18 = MEMORY[0x1E4FBB1A0];
    outlined destroy of (key: String, value: Any)((uint64_t)v38, (uint64_t)&lazy cache variable for type metadata for (key: String, value: Any), MEMORY[0x1E4FBB1A0], (uint64_t (*)(void))type metadata accessor for (key: Any, value: Any));
    *(void *)&long long v40 = a2(v41, v34, *((void *)&v34 + 1), v35);
    *((void *)&v40 + 1) = v19;
    outlined destroy of (key: String, value: Any)((uint64_t)&v34, (uint64_t)&lazy cache variable for type metadata for (key: String, value: Any), v18, (uint64_t (*)(void))type metadata accessor for (key: Any, value: Any));
    uint64_t v4 = v42;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
      uint64_t v4 = v42;
    }
    unint64_t v21 = *(void *)(v4 + 16);
    unint64_t v20 = *(void *)(v4 + 24);
    if (v21 >= v20 >> 1)
    {
      uint64_t result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v20 > 1), v21 + 1, 1);
      uint64_t v4 = v42;
    }
    *(void *)(v4 + 16) = v21 + 1;
    uint64_t v22 = (_OWORD *)(v4 + 48 * v21);
    long long v23 = v40;
    long long v24 = v41[1];
    void v22[3] = v41[0];
    unint64_t v22[4] = v24;
    v22[2] = v23;
    char v11 = *(unsigned char *)(a1 + 32);
    unint64_t v12 = 1 << v11;
    if (v8 >= 1 << v11) {
      goto LABEL_29;
    }
    uint64_t v10 = a1 + 64;
    uint64_t v25 = *(void *)(v32 + 8 * v14);
    if ((v25 & (1 << v8)) == 0) {
      goto LABEL_30;
    }
    int v7 = v31;
    if (*(_DWORD *)(a1 + 36) != v31) {
      goto LABEL_31;
    }
    unint64_t v26 = v25 & (-2 << (v8 & 0x3F));
    if (v26)
    {
      unint64_t v12 = __clz(__rbit64(v26)) | v8 & 0xFFFFFFFFFFFFFFC0;
      int64_t v13 = v30;
    }
    else
    {
      unint64_t v27 = v14 + 1;
      unint64_t v28 = (v12 + 63) >> 6;
      int64_t v13 = v30;
      if (v14 + 1 < v28)
      {
        unint64_t v29 = *(void *)(v32 + 8 * v27);
        if (!v29)
        {
          unint64_t v27 = v14 + 2;
          if (v14 + 2 >= v28) {
            goto LABEL_4;
          }
          unint64_t v29 = *(void *)(v32 + 8 * v27);
          if (!v29)
          {
            while (v28 - 3 != v14)
            {
              unint64_t v29 = *(void *)(a1 + 88 + 8 * v14++);
              if (v29)
              {
                unint64_t v27 = v14 + 2;
                goto LABEL_19;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_19:
        unint64_t v12 = __clz(__rbit64(v29)) + (v27 << 6);
      }
    }
LABEL_4:
    ++v9;
    uint64_t v8 = v12;
    if (v9 == v13) {
      return v4;
    }
  }
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50124_s7SwiftUI17DictionaryEncoderC19KeyEncodingStrategyO19_convertToSnakeCase33_2462DFFC835A6F4511AFEB231EB4B8C2LLyS2SFZSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_n(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = a1 + 40;
    do
    {
      String.subscript.getter();
      Swift::String v5 = Substring.lowercased()();
      swift_bridgeObjectRelease();
      unint64_t v7 = *(void *)(v9 + 16);
      unint64_t v6 = *(void *)(v9 + 24);
      if (v7 >= v6 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1);
      }
      v4 += 16;
      *(void *)(v9 + 16) = v7 + 1;
      *(Swift::String *)(v9 + 16 * v7 + 32) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t result, char a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (!v3) {
    return result;
  }
  unint64_t v29 = &v28;
  uint64_t v6 = result + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)v27);
    uint64_t v10 = v27[0];
    uint64_t v9 = v27[1];
    outlined init with take of Any(v29, v26);
    uint64_t v11 = *a3;
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
    uint64_t v14 = *(void *)(v11 + 16);
    BOOL v15 = (v12 & 1) == 0;
    uint64_t v16 = v14 + v15;
    if (__OFADD__(v14, v15)) {
      break;
    }
    char v17 = v12;
    if (*(void *)(v11 + 24) >= v16)
    {
      if (a2)
      {
        if (v12) {
          goto LABEL_3;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v17) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a2 & 1);
      unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v9);
      if ((v17 & 1) != (v19 & 1)) {
        goto LABEL_20;
      }
      unint64_t v13 = v18;
      if (v17)
      {
LABEL_3:
        uint64_t v7 = 32 * v13;
        outlined init with copy of Any(*(void *)(*a3 + 56) + v7, (uint64_t)v25);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
        swift_bridgeObjectRelease();
        uint64_t v8 = (_OWORD *)(*(void *)(*a3 + 56) + v7);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
        outlined init with take of Any(v25, v8);
        goto LABEL_4;
      }
    }
    unint64_t v20 = (void *)*a3;
    *(void *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    unint64_t v21 = (uint64_t *)(v20[6] + 16 * v13);
    *unint64_t v21 = v10;
    v21[1] = v9;
    outlined init with take of Any(v26, (_OWORD *)(v20[7] + 32 * v13));
    uint64_t v22 = v20[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_19;
    }
    void v20[2] = v24;
LABEL_4:
    v6 += 48;
    a2 = 1;
    if (!--v3) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 112);
  if (v4)
  {
    if (v4 == 1)
    {
      swift_retain();
      uint64_t v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSypG_SS_ypts5NeverOTg506_sSSypf31Iggnor_SS3key_yp5valuetSS_ypts5d148OIegnrzr_TR160_s7SwiftUI33_DictionaryKeyedDecodingContainer33_2462DFFC835A6F4511AFEB231EB4B8C2LLV11referencing8wrappingADyxGAA02__C7DecoderACLLC_SDyf5Gtcfcj4_yptJ19_yptXEfU_Tf3nnnpf_nTf1cn_n(a2);
      swift_bridgeObjectRelease();
      if (*(void *)(v5 + 16))
      {
        type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Any>, MEMORY[0x1E4FBBD58]);
        uint64_t v6 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        uint64_t v6 = MEMORY[0x1E4FBC868];
      }
      v12[0] = v6;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v5, 1, v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 120);
      MEMORY[0x1F4188790](a1);
      _OWORD v11[2] = v4;
      v11[3] = v7;
      v11[4] = a1;
      swift_retain();
      outlined copy of DictionaryDecoder.KeyDecodingStrategy(v4);
      uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSypG_SS_ypts5NeverOTg506_sSSypf31Iggnor_SS3key_yp5valuetSS_ypts5D11OIegnrzr_TRSSypSSypIggnor_Tf1cn_nTf4ng_n(a2, (uint64_t (*)(_OWORD *, void, void, _OWORD *))partial apply for closure #3 in _DictionaryKeyedDecodingContainer.init(referencing:wrapping:), (uint64_t)v11);
      swift_bridgeObjectRelease();
      if (*(void *)(v8 + 16))
      {
        type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, Any>, MEMORY[0x1E4FBBD58]);
        uint64_t v9 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        uint64_t v9 = MEMORY[0x1E4FBC868];
      }
      v12[0] = v9;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v8, 1, v12);
      swift_bridgeObjectRelease();
      outlined consume of DictionaryDecoder.KeyDecodingStrategy(v4);
    }
  }
  else
  {
    swift_retain();
  }
  swift_beginAccess();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized static DictionaryEncoder.KeyEncodingStrategy._convertToSnakeCase(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v40 = type metadata accessor for CharacterSet();
  uint64_t v6 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v9 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v9 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9)
  {
    swift_bridgeObjectRetain();
    return a1;
  }
  unint64_t v10 = String.index(after:)();
  uint64_t v11 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0) {
    uint64_t v11 = 11;
  }
  unint64_t v38 = 4 * v9;
  if (4 * v9 < v10 >> 14)
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  else
  {
    unint64_t v42 = a2;
    uint64_t v39 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v2 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v3 = 15;
    uint64_t v41 = v11 | (v9 << 16);
    uint64_t v37 = a1;
    while (1)
    {
      uint64_t v43 = a1;
      unint64_t v44 = v42;
      static CharacterSet.uppercaseLetters.getter();
      lazy protocol witness table accessor for type String and conformance String();
      unint64_t v13 = StringProtocol.rangeOfCharacter(from:options:range:)();
      char v15 = v14;
      uint64_t v16 = *v39;
      (*v39)(v8, v40);
      if (v15)
      {
        unint64_t v17 = v3 >> 14;
        goto LABEL_26;
      }
      unint64_t v17 = v13 >> 14;
      if (v13 >> 14 < v3 >> 14)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
      }
      unint64_t v19 = *((void *)v2 + 2);
      unint64_t v18 = *((void *)v2 + 3);
      if (v19 >= v18 >> 1) {
        uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, v2);
      }
      *((void *)v2 + 2) = v19 + 1;
      unint64_t v20 = &v2[16 * v19];
      *((void *)v20 + 4) = v3;
      *((void *)v20 + 5) = v13;
      if (v38 < v17) {
        goto LABEL_33;
      }
      a1 = v37;
      unint64_t v3 = v42;
      uint64_t v43 = v37;
      unint64_t v44 = v42;
      static CharacterSet.lowercaseLetters.getter();
      uint64_t v21 = StringProtocol.rangeOfCharacter(from:options:range:)();
      unint64_t v23 = v22;
      char v25 = v24;
      v16(v8, v40);
      if (v25) {
        break;
      }
      if ((String.index(after:)() ^ (unint64_t)v21) >= 0x4000)
      {
        unint64_t v26 = String.index(before:)();
        if (v17 > v26 >> 14) {
          goto LABEL_35;
        }
        unint64_t v27 = v26;
        unint64_t v29 = *((void *)v2 + 2);
        unint64_t v28 = *((void *)v2 + 3);
        if (v29 >= v28 >> 1) {
          uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1, v2);
        }
        *((void *)v2 + 2) = v29 + 1;
        char v12 = &v2[16 * v29];
        *((void *)v12 + 4) = v13;
        *((void *)v12 + 5) = v27;
        unint64_t v13 = v27;
        a1 = v37;
      }
      unint64_t v3 = v13;
      if (v38 < v23 >> 14) {
        goto LABEL_34;
      }
    }
    unint64_t v3 = v13;
LABEL_26:
    if (v38 < v17) {
      goto LABEL_37;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      goto LABEL_28;
    }
  }
  uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
LABEL_28:
  unint64_t v31 = *((void *)v2 + 2);
  unint64_t v30 = *((void *)v2 + 3);
  if (v31 >= v30 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v30 > 1), v31 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v31 + 1;
  uint64_t v32 = &v2[16 * v31];
  uint64_t v33 = v41;
  *((void *)v32 + 4) = v3;
  *((void *)v32 + 5) = v33;
  swift_bridgeObjectRetain();
  uint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v35 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySnySS5IndexVGG_SSs5NeverOTg50124_s7SwiftUI17DictionaryEncoderC19KeyEncodingStrategyO19_convertToSnakeCase33_2462DFFC835A6F4511AFEB231EB4B8C2LLyS2SFZSSSnySS5D7VGXEfU_SSTf1cn_nTf4ng_n(v34);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v43 = v35;
  _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  a1 = BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t specialized __DictionaryReferencingEncoder.init(referencing:key:convertedKey:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, void *a7, uint64_t a8)
{
  *(void *)(a8 + 144) = a1;
  __swift_project_boxed_opaque_existential_1(a6, a6[3]);
  swift_retain();
  swift_retain();
  id v11 = a7;
  uint64_t v12 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v40 = v11;
  *(void *)(a8 + 152) = v11;
  *(void *)(a8 + 160) = v12;
  *(void *)(a8 + 168) = v13;
  *(unsigned char *)(a8 + 176) = 1;
  swift_release();
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 48);
  uint64_t v34 = v14;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v33 = *(void *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 80);
  uint64_t v18 = *(void *)(a1 + 88);
  uint64_t v19 = *(void *)(a1 + 96);
  uint64_t v31 = *(void *)(a1 + 56);
  uint64_t v32 = *(void *)(a1 + 104);
  unint64_t v20 = *(void *)(a1 + 112);
  unint64_t v35 = v20;
  long long v36 = *(void **)(a1 + 24);
  uint64_t v42 = *(void *)(a1 + 120);
  uint64_t v43 = *(void *)(a1 + 128);
  char v21 = *(unsigned char *)(a1 + 40);
  swift_beginAccess();
  uint64_t v22 = *(void *)(a1 + 136);
  *(void *)(a8 + 32) = v14;
  *(unsigned char *)(a8 + 40) = v21;
  *(void *)(a8 + 48) = v15;
  *(void *)(a8 + 56) = v31;
  *(void *)(a8 + 64) = v16;
  *(void *)(a8 + 72) = v33;
  *(void *)(a8 + 80) = v17;
  *(void *)(a8 + 88) = v18;
  *(void *)(a8 + 96) = v19;
  *(void *)(a8 + 104) = v32;
  *(void *)(a8 + 112) = v20;
  *(void *)(a8 + 120) = v42;
  uint64_t v23 = MEMORY[0x1E4FBC860];
  *(void *)(a8 + 128) = v43;
  *(void *)(a8 + 16) = v23;
  *(void *)(a8 + 24) = v36;
  *(void *)(a8 + 136) = v22;
  char v24 = (void *)(a8 + 136);
  swift_beginAccess();
  char v25 = *(void **)(a8 + 136);
  outlined copy of DictionaryDecoder.DateDecodingStrategy(v36, v34, v21);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v15);
  outlined copy of DictionaryEncoder.NonConformingFloatEncodingStrategy(v16, v33);
  outlined copy of DictionaryDecoder.KeyDecodingStrategy(v35);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a8 + 136) = v25;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
    *char v24 = v25;
  }
  unint64_t v28 = v25[2];
  unint64_t v27 = v25[3];
  if (v28 >= v27 >> 1)
  {
    char v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v27 > 1), v28 + 1, 1, v25);
    *char v24 = v25;
  }
  uint64_t v45 = &unk_1ED468578;
  unint64_t v46 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
  uint64_t v29 = swift_allocObject();
  *(void *)&long long v44 = v29;
  *(void *)(v29 + 16) = a2;
  *(void *)(v29 + 24) = a3;
  *(void *)(v29 + 32) = a4;
  *(unsigned char *)(v29 + 40) = a5 & 1;
  _OWORD v25[2] = v28 + 1;
  outlined init with take of OptionalBinaryInteger(&v44, (uint64_t)&v25[5 * v28 + 4]);
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();

  return a8;
}

uint64_t specialized __DictionaryReferencingEncoder.__allocating_init(referencing:key:convertedKey:wrapping:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for __DictionaryReferencingEncoder();
  uint64_t v16 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, a6);
  return specialized __DictionaryReferencingEncoder.init(referencing:key:convertedKey:wrapping:)(a1, (uint64_t)v15, a3, a4, v16, a6, a7);
}

uint64_t outlined destroy of (key: String, value: Any)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer;
  if (!lazy protocol witness table cache variable for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer);
  }
  return result;
}

uint64_t sub_187A9E634()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t type metadata accessor for _DictionaryKeyedDecodingContainer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #3 in _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #3 in _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(a1, a2, a3, a4, *(void (**)(void *__return_ptr, uint64_t))(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32));
}

unint64_t outlined consume of DictionaryDecoder.KeyDecodingStrategy(unint64_t result)
{
  if (result >= 2) {
    return swift_release();
  }
  return result;
}

void type metadata accessor for (key: Any, value: Any)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t sub_187A9E76C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187A9E7A4()
{
  return swift_deallocObject();
}

uint64_t outlined consume of DictionaryDecoder.NonConformingFloatDecodingStrategy(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer;
  if (!lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _JSONUnkeyedEncodingContainer and conformance _JSONUnkeyedEncodingContainer);
  }
  return result;
}

uint64_t type metadata accessor for _JSONKeyedEncodingContainer()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for (String, Any)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t destroy for _JSONKeyedEncodingContainer(uint64_t a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for _JSONKeyedEncodingContainer(void *a1, void *a2)
{
  unint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  id v4 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for _JSONKeyedEncodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  id v4 = (void *)a2[1];
  uint64_t v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _JSONKeyedEncodingContainer(uint64_t a1, uint64_t a2)
{
  swift_release();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for _JSONUnkeyedEncodingContainer()
{
  return &unk_1ED457C38;
}

void *initializeBufferWithCopyOfBuffer for _DictionaryKeyedDecodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for _DictionaryKeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _DictionaryKeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t destroy for _DictionaryKeyedDecodingContainer()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for _JSONUnkeyedDecodingContainer(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for _JSONUnkeyedDecodingContainer(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for _JSONUnkeyedDecodingContainer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  return a1;
}

void *type metadata accessor for _JSONUnkeyedDecodingContainer()
{
  return &unk_1ED457BB0;
}

void *type metadata accessor for _JSONKey()
{
  return &unk_1ED468578;
}

uint64_t partial apply for closure #1 in _DictionaryKeyedDecodingContainer.allKeys.getter()
{
  return dispatch thunk of CodingKey.init(stringValue:)();
}

uint64_t assignWithCopy for AccessibilityAdaptiveStack(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = v2[2];
  *(void *)(a1 + 24) = v2[3];
  uint64_t v5 = v2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)v2 + 40);
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 41) = *((unsigned char *)v2 + 41);
  uint64_t v6 = v2[6];
  char v7 = *((unsigned char *)v2 + 56);
  outlined copy of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a1 + 48);
  char v9 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = v2[8];
  LOBYTE(v2) = *((unsigned char *)v2 + 72);
  outlined copy of Environment<Bool>.Content(v10, (char)v2);
  uint64_t v11 = *(void *)(a1 + 64);
  char v12 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = (_BYTE)v2;
  outlined consume of Environment<Bool>.Content(v11, v12);
  return a1;
}

uint64_t assignWithTake for AccessibilityAdaptiveStack(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  char v4 = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)(a1 + 48);
  char v6 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  char v7 = *(unsigned char *)(a2 + 72);
  uint64_t v8 = *(void *)(a1 + 64);
  char v9 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityAdaptiveStack(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityAdaptiveStack(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

_UNKNOWN **sub_187AA0B10()
{
  return &protocol witness table for AdaptiveStack<A>;
}

void WindowLayoutRoot.subscript.getter()
{
}

void WindowLayoutRoot.sizeThatFits(_:)()
{
}

void WindowLayoutRootView.dimensions(in:)()
{
}

void static WindowLayoutRootView.== infix(_:_:)()
{
}

uint64_t outlined destroy of WindowLayoutRootView.Proxy(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)a1 + 2;
  }
  if (v2 == 1) {
    swift_unknownObjectWeakDestroy();
  }
  return a1;
}

ValueMetadata *type metadata accessor for WindowLayoutRoot()
{
  return &type metadata for WindowLayoutRoot;
}

uint64_t destroy for WindowLayoutRoot(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16) == 1) {
    swift_unknownObjectWeakDestroy();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WindowLayoutRoot(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) == 1)
  {
    swift_unknownObjectWeakCopyInit();
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    char v4 = 1;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    char v4 = *(unsigned char *)(a2 + 16);
  }
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WindowLayoutRoot(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of WindowLayoutRootView.Proxy(a1);
    if (*((unsigned char *)a2 + 16) == 1)
    {
      swift_unknownObjectWeakCopyInit();
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(unsigned char *)(a1 + 16) = 1;
    }
    else
    {
      long long v4 = *a2;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = v4;
    }
  }
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for WindowLayoutRoot(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16) == 1)
  {
    unint64_t result = swift_unknownObjectWeakTakeInit();
    *(void *)(result + 8) = *(void *)(a2 + 8);
    char v3 = 1;
  }
  else
  {
    *(_OWORD *)unint64_t result = *(_OWORD *)a2;
    char v3 = *(unsigned char *)(a2 + 16);
  }
  *(unsigned char *)(result + 16) = v3;
  *(void *)(result + 24) = *(void *)(a2 + 24);
  return result;
}

uint64_t assignWithTake for WindowLayoutRoot(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of WindowLayoutRootView.Proxy(a1);
    if (*(unsigned char *)(a2 + 16) == 1)
    {
      swift_unknownObjectWeakTakeInit();
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      char v4 = 1;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v4 = *(unsigned char *)(a2 + 16);
    }
    *(unsigned char *)(a1 + 16) = v4;
  }
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for WindowLayoutRootView()
{
  return &type metadata for WindowLayoutRootView;
}

uint64_t destroy for WindowLayoutRootView.Proxy(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 16);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)result + 2;
  }
  if (v1 == 1) {
    return swift_unknownObjectWeakDestroy();
  }
  return result;
}

uint64_t initializeWithCopy for WindowLayoutRootView.Proxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for WindowLayoutRootView.Proxy(a1, a2, a3, MEMORY[0x1E4FBC920]);
}

uint64_t assignWithCopy for WindowLayoutRootView.Proxy(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      swift_unknownObjectWeakDestroy();
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 16);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      swift_unknownObjectWeakCopyInit();
      *(void *)(a1 + 8) = a2[1];
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      uint64_t v7 = *a2;
      *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a1 = v7;
    }
    *(unsigned char *)(a1 + 16) = v6;
  }
  return a1;
}

uint64_t initializeWithTake for WindowLayoutRootView.Proxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for WindowLayoutRootView.Proxy(a1, a2, a3, MEMORY[0x1E4FBC930]);
}

uint64_t initializeWithCopy for WindowLayoutRootView.Proxy(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 >= 2) {
    unsigned int v5 = *(_DWORD *)a2 + 2;
  }
  if (v5 == 1)
  {
    unint64_t result = a4(result, a2);
    *(void *)(result + 8) = *(void *)(a2 + 8);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(void *)unint64_t result = *(void *)a2;
    *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  }
  *(unsigned char *)(result + 16) = v6;
  return result;
}

uint64_t assignWithTake for WindowLayoutRootView.Proxy(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      swift_unknownObjectWeakDestroy();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      swift_unknownObjectWeakTakeInit();
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    }
    *(unsigned char *)(a1 + 16) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for WindowLayoutRootView.Proxy(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WindowLayoutRootView.Proxy(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(unsigned char *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for WindowLayoutRootView.Proxy(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 16);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for WindowLayoutRootView.Proxy(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for WindowLayoutRootView.Proxy()
{
  return &type metadata for WindowLayoutRootView.Proxy;
}

ValueMetadata *type metadata accessor for WindowLayoutRootView.WeakHost()
{
  return &type metadata for WindowLayoutRootView.WeakHost;
}

void WindowLayoutRootView.subscript.getter()
{
}

void WindowLayoutRootView.sizeThatFits(_:)()
{
}

uint64_t View.accessibilityScrollAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  unint64_t v11 = lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction();
  uint64_t v12 = swift_retain();
  View.accessibilityAction<A>(_:label:image:_:)(v12, 0, 0, 0, 0, 0, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@unowned Edge) -> (), v10, a5, a3, (uint64_t)&type metadata for AccessibilityScrollAction, a4, v11);

  return swift_release();
}

uint64_t sub_187AA11EC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned Edge) -> ()(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

unint64_t lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityScrollAction and conformance AccessibilityScrollAction;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollAction and conformance AccessibilityScrollAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollAction and conformance AccessibilityScrollAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityScrollAction and conformance AccessibilityScrollAction;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollAction and conformance AccessibilityScrollAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollAction and conformance AccessibilityScrollAction);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityScrollAction(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  unint64_t v9 = lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction();
  uint64_t v10 = swift_retain();
  ModifiedContent<>.accessibilityAction<A>(_:label:image:_:)(v10, 0, 0, 0, 0, 0, (uint64_t)thunk for @escaping @callee_guaranteed (@unowned Edge) -> ()partial apply, v8, a4, a3, (uint64_t)&type metadata for AccessibilityScrollAction, v9);

  return swift_release();
}

ValueMetadata *type metadata accessor for AccessibilityScrollAction()
{
  return &type metadata for AccessibilityScrollAction;
}

unint64_t instantiation function for generic protocol witness table for AccessibilityScrollAction(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t View.fileDialogDefaultDirectory(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();

  return swift_release();
}

uint64_t EnvironmentValues.fileDialogDefaultDirectory.getter()
{
  return EnvironmentValues.fileDialogDefaultDirectory.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey>, (uint64_t)&unk_1ED422210, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogDefaultDirectoryKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey>, (uint64_t)&unk_1ED422210, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogDefaultDirectoryKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t sub_187AA14BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey>, (uint64_t)&unk_1ED422210, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogDefaultDirectoryKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path setter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for URL?, (void (*)(uint64_t, char *, double))outlined init with copy of URL?, (uint64_t (*)(char *))EnvironmentValues.fileDialogDefaultDirectory.setter);
}

uint64_t sub_187AA1534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for URL?, (void (*)(uint64_t, char *, double))outlined init with copy of URL?, (uint64_t (*)(char *))EnvironmentValues.fileDialogDefaultDirectory.setter);
}

uint64_t EnvironmentValues.fileDialogDefaultDirectory.setter(uint64_t a1)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v3 - 8);
  outlined init with copy of URL?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogDefaultDirectoryKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of Predicate<Pack{URL}>?(a1, (uint64_t (*)(void))type metadata accessor for URL?);
}

uint64_t View.fileDialogCustomizationID(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.fileDialogCustomizationID.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogCustomizationIDKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.fileDialogCustomizationID : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.fileDialogCustomizationID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_187AA1904@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.fileDialogCustomizationID.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.fileDialogCustomizationID : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t View.fileDialogMessage(_:)()
{
  return View.fileDialogMessage(_:)();
}

{
  return View.fileDialogMessage(_:)();
}

{
  swift_getKeyPath();
  View.environment<A>(_:_:)();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;

  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v0 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v2 = v1;
  uint64_t v4 = v3 & 1;
  View.environment<A>(_:_:)();
  swift_release();
  outlined consume of Text.Storage(v0, v2, v4);
  return swift_bridgeObjectRelease();
}

uint64_t EnvironmentValues.fileDialogMessage.getter()
{
  return EnvironmentValues.fileDialogMessage.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogMessageKey>, (uint64_t)&type metadata for EnvironmentValues.FileDialogMessageKey, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogMessageKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogMessageKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.fileDialogMessage.getter, a3);
}

uint64_t sub_187AA19E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.fileDialogMessage.getter, a3);
}

uint64_t key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t sub_187AA1A10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t View.fileDialogMessage<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.fileDialogMessage<A>(_:)(a1, a2, a3);
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void v14[4];

  unsigned int v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, a3);
  uint64_t v8 = Text.init<A>(_:)();
  uint64_t v10 = v9;
  v14[0] = v8;
  v14[1] = v9;
  LOBYTE(v7) = v11 & 1;
  v14[2] = v11 & 1;
  v14[3] = v12;
  View.environment<A>(_:_:)();
  swift_release();
  outlined consume of Text.Storage(v8, v10, (char)v7);
  return swift_bridgeObjectRelease();
}

uint64_t View.fileDialogConfirmationLabel<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.fileDialogMessage<A>(_:)(a1, a2, a3);
}

uint64_t EnvironmentValues.fileDialogConfirmationLabel.getter()
{
  return EnvironmentValues.fileDialogMessage.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogConfirmationLabelKey>, (uint64_t)&type metadata for EnvironmentValues.FileDialogConfirmationLabelKey, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogConfirmationLabelKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogConfirmationLabelKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.fileDialogConfirmationLabel : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.fileDialogConfirmationLabel.getter, a3);
}

uint64_t key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result = a3(a1, a2);
  *a4 = result;
  a4[1] = v6;
  a4[2] = v7;
  a4[3] = v8;
  return result;
}

uint64_t sub_187AA1AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.fileDialogConfirmationLabel.getter, a3);
}

uint64_t key path setter for EnvironmentValues.fileDialogConfirmationLabel : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t sub_187AA1B10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t View.fileDialogConfirmationLabel(_:)()
{
  return View.fileDialogMessage(_:)();
}

{
  return View.fileDialogMessage(_:)();
}

uint64_t View.fileExporterFilenameLabel(_:)()
{
  return View.fileDialogMessage(_:)();
}

{
  return View.fileDialogMessage(_:)();
}

uint64_t EnvironmentValues.fileExporterFilenameLabel.getter()
{
  return EnvironmentValues.fileDialogMessage.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileExporterFilenameLabelKey>, (uint64_t)&type metadata for EnvironmentValues.FileExporterFilenameLabelKey, (uint64_t)&protocol witness table for EnvironmentValues.FileExporterFilenameLabelKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileExporterFilenameLabelKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.fileDialogMessage.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (*(void *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v8;
}

uint64_t key path getter for EnvironmentValues.fileExporterFilenameLabel : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.fileExporterFilenameLabel.getter, a3);
}

uint64_t sub_187AA1D58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return key path getter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.fileExporterFilenameLabel.getter, a3);
}

uint64_t key path setter for EnvironmentValues.fileExporterFilenameLabel : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = a1[3];
  outlined copy of Text?(*a1, v7, v8, v9);
  a5(v6, v7, v8, v9);

  return outlined consume of Text?(v6, v7, v8, v9);
}

uint64_t sub_187AA1E10(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogMessage : EnvironmentValues(a1, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized EnvironmentValues.subscript.setter);
}

uint64_t View.fileExporterFilenameLabel<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.fileDialogMessage<A>(_:)(a1, a2, a3);
}

uint64_t View.fileDialogURLEnabled(_:)(uint64_t a1)
{
  type metadata accessor for Predicate<Pack{URL}>?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v4, a1, v5);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v4, 0, 1, v6);
  View.environment<A>(_:_:)();
  swift_release();
  return outlined destroy of Predicate<Pack{URL}>?((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for Predicate<Pack{URL}>?);
}

uint64_t EnvironmentValues.fileDialogURLEnabled.getter()
{
  return EnvironmentValues.fileDialogDefaultDirectory.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey>, (uint64_t)&unk_1ED421E98, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogURLEnabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.fileDialogDefaultDirectory.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (*(void *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a4, a1);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.fileDialogURLEnabled : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey>, (uint64_t)&unk_1ED421E98, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogURLEnabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path getter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a4);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a7, a4);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a4);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a7, a4);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_187AA2488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return key path getter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey>, (uint64_t)&unk_1ED421E98, (uint64_t)&protocol witness table for EnvironmentValues.FileDialogURLEnabledKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path setter for EnvironmentValues.fileDialogURLEnabled : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for Predicate<Pack{URL}>?, (void (*)(uint64_t, char *, double))outlined init with copy of Predicate<Pack{URL}>?, (uint64_t (*)(char *))EnvironmentValues.fileDialogURLEnabled.setter);
}

uint64_t key path setter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), void (*a6)(uint64_t, char *, double), uint64_t (*a7)(char *))
{
  uint64_t v10 = a5(0);
  double v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v13 = (char *)&v15 - v12;
  a6(a1, (char *)&v15 - v12, v11);
  return a7(v13);
}

uint64_t sub_187AA25A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for EnvironmentValues.fileDialogDefaultDirectory : EnvironmentValues(a1, a2, a3, a4, (uint64_t (*)(void))type metadata accessor for Predicate<Pack{URL}>?, (void (*)(uint64_t, char *, double))outlined init with copy of Predicate<Pack{URL}>?, (uint64_t (*)(char *))EnvironmentValues.fileDialogURLEnabled.setter);
}

uint64_t EnvironmentValues.fileDialogURLEnabled.setter(uint64_t a1)
{
  type metadata accessor for Predicate<Pack{URL}>?(0);
  MEMORY[0x1F4188790](v3 - 8);
  outlined init with copy of Predicate<Pack{URL}>?(a1, (uint64_t)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogURLEnabledKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of Predicate<Pack{URL}>?(a1, (uint64_t (*)(void))type metadata accessor for Predicate<Pack{URL}>?);
}

uint64_t View.fileDialogImportsUnresolvedAliases(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.fileDialogImportsUnresolvedAliases.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.fileDialogImportsUnresolvedAliases : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.fileDialogImportsUnresolvedAliases.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187AA2954@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.fileDialogImportsUnresolvedAliases.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.fileDialogImportsUnresolvedAliases : EnvironmentValues()
{
  return EnvironmentValues.fileDialogImportsUnresolvedAliases.setter();
}

uint64_t sub_187AA29B8()
{
  return EnvironmentValues.fileDialogImportsUnresolvedAliases.setter();
}

uint64_t EnvironmentValues.fileDialogImportsUnresolvedAliases.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogImportsUnresolvedAliasesKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.fileDialogBrowserOptions(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.fileDialogBrowserOptions.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.fileDialogBrowserOptions : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.fileDialogBrowserOptions : EnvironmentValues()
{
  return EnvironmentValues.fileDialogBrowserOptions.setter();
}

uint64_t sub_187AA2E3C()
{
  return EnvironmentValues.fileDialogBrowserOptions.setter();
}

uint64_t EnvironmentValues.fileDialogBrowserOptions.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.FileDialogBrowserOptionsKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t FileDialogBrowserOptions.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::FileDialogBrowserOptions __swiftcall FileDialogBrowserOptions.init(rawValue:)(SwiftUI::FileDialogBrowserOptions rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static FileDialogBrowserOptions.enumeratePackages.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static FileDialogBrowserOptions.includeHiddenFiles.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static FileDialogBrowserOptions.displayFileExtensions.getter(void *a1@<X8>)
{
  *a1 = 4;
}

unint64_t lazy protocol witness table accessor for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions;
  if (!lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions;
  if (!lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions;
  if (!lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions;
  if (!lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDialogBrowserOptions and conformance FileDialogBrowserOptions);
  }
  return result;
}

ValueMetadata *type metadata accessor for FileDialogBrowserOptions()
{
  return &type metadata for FileDialogBrowserOptions;
}

uint64_t sub_187AA3124(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy10Foundation3URLVSgGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<URL?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_187AA314C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVySSSgGGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<String?>, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>);
}

void type metadata accessor for Environment<Text?>.Content(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for AccessibilityValueStorage?(255, a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_187AA31D8(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVySSSgGGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text?>, &lazy cache variable for type metadata for Text?, MEMORY[0x1E4F41420], &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVySSSgGGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  return swift_getWitnessTable();
}

uint64_t sub_187AA32AC()
{
  uint64_t v0 = MEMORY[0x1E4F41420];
  type metadata accessor for Environment<Text?>.Content(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text?>, &lazy cache variable for type metadata for Text?, MEMORY[0x1E4F41420], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text?> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text?>, &lazy cache variable for type metadata for Text?, v0);
  return swift_getWitnessTable();
}

uint64_t sub_187AA3378(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy10Foundation3URLVSgGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Predicate<Pack{URL}>?>, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>?, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Predicate<Pack{URL}>?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVy10Foundation3URLVSgGGAaBHPxAaBHD1__AkA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), unint64_t *a4)
{
  return swift_getWitnessTable();
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<URL?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Predicate<Pack{URL}>?(255, a2, a3, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187AA34AC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVySSSgGGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390], (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t sub_187AA34D0(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA30_EnvironmentKeyWritingModifierVySSSgGGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<FileDialogBrowserOptions?>, &lazy cache variable for type metadata for FileDialogBrowserOptions?, (uint64_t)&type metadata for FileDialogBrowserOptions, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<FileDialogBrowserOptions?> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Environment<Text?>.Content(255, a2, a3, a4, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata completion function for FileDialogConfiguration()
{
  type metadata accessor for Predicate<Pack{URL}>?(319, &lazy cache variable for type metadata for Environment<URL?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for URL?, MEMORY[0x1E4F3F4D8]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Predicate<Pack{URL}>?(319, &lazy cache variable for type metadata for Environment<Predicate<Pack{URL}>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>?, MEMORY[0x1E4F3F4D8]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Optional();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void *initializeBufferWithCopyOfBuffer for FileDialogConfiguration(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84)) {
    size_t v8 = *(void *)(v7 + 64);
  }
  else {
    size_t v8 = *(void *)(v7 + 64) + 1;
  }
  if (v8 <= 8) {
    uint64_t v9 = 8;
  }
  else {
    uint64_t v9 = v8;
  }
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v12 & 0xF8 | 7;
  if (*(_DWORD *)(v11 + 84)) {
    unint64_t v14 = *(void *)(v11 + 64);
  }
  else {
    unint64_t v14 = *(void *)(v11 + 64) + 1;
  }
  if (v14 <= 8) {
    uint64_t v15 = 8;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = *(void *)(a3 + 24);
  uint64_t v17 = *(void *)(v16 - 8);
  int v18 = *(_DWORD *)(v17 + 80);
  uint64_t v19 = v18;
  if (*(_DWORD *)(v17 + 84)) {
    uint64_t v20 = *(void *)(v17 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v17 + 64) + 1;
  }
  unsigned int v21 = v18 | *(_DWORD *)(v7 + 80) & 0xF8 | *(_DWORD *)(v11 + 80) & 0xF8;
  int v22 = (v18 | v12 | *(_DWORD *)(v7 + 80)) & 0x100000;
  if (v21 > 7
    || v22 != 0
    || ((v18
       + 8
       + (((((((v9 & 0xFFFFFFFFFFFFFFF8) + v13 + 145) & ~v13) + v15 + 1 + 23) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)v18)
     + v20 > 0x18)
  {
    uint64_t v25 = *(void *)a2;
    *a1 = *(void *)a2;
    uint64_t v26 = v25 + (((v21 | 7) + 16) & ~(unint64_t)(v21 | 7));
    swift_retain();
  }
  else
  {
    unsigned int v27 = a2[v9];
    unsigned int v28 = v27 - 2;
    if (v27 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v29 = v9;
      }
      else {
        uint64_t v29 = 4;
      }
      switch(v29)
      {
        case 1:
          int v30 = *a2;
          if (v9 < 4) {
            goto LABEL_33;
          }
          goto LABEL_37;
        case 2:
          int v30 = *(unsigned __int16 *)a2;
          if (v9 < 4) {
            goto LABEL_33;
          }
          goto LABEL_37;
        case 3:
          int v30 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v9 < 4) {
            goto LABEL_33;
          }
          goto LABEL_37;
        case 4:
          int v30 = *(_DWORD *)a2;
          if (v9 < 4) {
LABEL_33:
          }
            unsigned int v27 = (v30 | (v28 << (8 * v9))) + 2;
          else {
LABEL_37:
          }
            unsigned int v27 = v30 + 2;
          break;
        default:
          break;
      }
    }
    size_t __n = v14;
    uint64_t v84 = v10;
    uint64_t v87 = *(void *)(v10 - 8);
    uint64_t v88 = v15 + 1;
    uint64_t v93 = v15;
    uint64_t v89 = v18 + 8;
    uint64_t v90 = *(void *)(v16 - 8);
    size_t v85 = v20;
    uint64_t v86 = ~v13;
    uint64_t v91 = v16;
    if (v27 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v8);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      *((unsigned char *)a1 + v9) = 1;
    }
    else
    {
      *a1 = *(void *)a2;
      *((unsigned char *)a1 + v9) = 0;
      swift_retain();
    }
    int v92 = a1;
    uint64_t v31 = (char *)a1 + v9 + 1;
    uint64_t v32 = &a2[v9 + 1];
    unint64_t v33 = (unint64_t)(v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v34 = (unint64_t)(v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v35 = *(void *)v34;
    uint64_t v36 = *(void *)(v34 + 8);
    char v37 = *(unsigned char *)(v34 + 16);
    outlined copy of Environment<String?>.Content(*(void *)v34, v36, v37);
    *(void *)unint64_t v33 = v35;
    *(void *)(v33 + 8) = v36;
    *(unsigned char *)(v33 + 16) = v37;
    unint64_t v38 = (unint64_t)(v31 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v39 = (unint64_t)(v32 + 31) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v40 = *(void *)v39;
    uint64_t v41 = *(void *)(v39 + 8);
    uint64_t v42 = *(void *)(v39 + 16);
    uint64_t v43 = *(void *)(v39 + 24);
    char v44 = *(unsigned char *)(v39 + 32);
    outlined copy of Environment<Text?>.Content(*(void *)v39, v41, v42, v43, v44);
    *(void *)unint64_t v38 = v40;
    *(void *)(v38 + 8) = v41;
    *(void *)(v38 + 16) = v42;
    *(void *)(v38 + 24) = v43;
    *(unsigned char *)(v38 + 32) = v44;
    unint64_t v45 = (unint64_t)(v31 + 71) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v46 = (unint64_t)(v32 + 71) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v47 = *(void *)v46;
    uint64_t v48 = *(void *)(v46 + 8);
    uint64_t v49 = *(void *)(v46 + 16);
    uint64_t v50 = *(void *)(v46 + 24);
    char v51 = *(unsigned char *)(v46 + 32);
    outlined copy of Environment<Text?>.Content(*(void *)v46, v48, v49, v50, v51);
    *(void *)unint64_t v45 = v47;
    *(void *)(v45 + 8) = v48;
    *(void *)(v45 + 16) = v49;
    *(void *)(v45 + 24) = v50;
    *(unsigned char *)(v45 + 32) = v51;
    unint64_t v52 = (unint64_t)(v31 + 111) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v53 = (unint64_t)(v32 + 111) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v54 = *(void *)v53;
    uint64_t v55 = *(void *)(v53 + 8);
    uint64_t v56 = *(void *)(v53 + 16);
    uint64_t v57 = *(void *)(v53 + 24);
    char v58 = *(unsigned char *)(v53 + 32);
    outlined copy of Environment<Text?>.Content(*(void *)v53, v55, v56, v57, v58);
    *(void *)unint64_t v52 = v54;
    *(void *)(v52 + 8) = v55;
    *(void *)(v52 + 16) = v56;
    *(void *)(v52 + 24) = v57;
    *(unsigned char *)(v52 + 32) = v58;
    Swift::String v59 = (void *)((v52 + v13 + 33) & v86);
    uint64_t v60 = (unsigned __int8 *)((v53 + v13 + 33) & v86);
    unsigned int v61 = v60[v93];
    unsigned int v62 = v61 - 2;
    if (v61 < 2)
    {
      uint64_t v64 = v87;
    }
    else
    {
      if (v93 <= 3) {
        uint64_t v63 = v93;
      }
      else {
        uint64_t v63 = 4;
      }
      uint64_t v64 = v87;
      switch(v63)
      {
        case 1:
          int v65 = *v60;
          if (v93 < 4) {
            goto LABEL_53;
          }
          goto LABEL_57;
        case 2:
          int v65 = *(unsigned __int16 *)v60;
          if (v93 < 4) {
            goto LABEL_53;
          }
          goto LABEL_57;
        case 3:
          int v65 = *(unsigned __int16 *)((v53 + v13 + 33) & v86) | (*(unsigned __int8 *)(((v53 + v13 + 33) & v86) + 2) << 16);
          if (v93 < 4) {
            goto LABEL_53;
          }
          goto LABEL_57;
        case 4:
          int v65 = *(_DWORD *)v60;
          if (v93 < 4) {
LABEL_53:
          }
            unsigned int v61 = (v65 | (v62 << (8 * v93))) + 2;
          else {
LABEL_57:
          }
            unsigned int v61 = v65 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v66 = ~v19;
    if (v61 == 1)
    {
      uint64_t v67 = (v53 + v13 + 33) & v86;
      uint64_t v68 = v64;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v67, 1, v84))
      {
        memcpy(v59, v60, __n);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v68 + 16))(v59, v60, v84);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v59, 0, 1, v84);
      }
      *((unsigned char *)v59 + v93) = 1;
    }
    else
    {
      void *v59 = *(void *)v60;
      *((unsigned char *)v59 + v93) = 0;
      swift_retain();
    }
    uint64_t v69 = (char *)v59 + v88;
    unint64_t v70 = ((unint64_t)v59 + v88 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v71 = (unint64_t)&v60[v88 + 7] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v72 = *(void *)v71;
    char v73 = *(unsigned char *)(v71 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v71, v73);
    *(void *)unint64_t v70 = v72;
    *(unsigned char *)(v70 + 8) = v73;
    unint64_t v74 = (unint64_t)(v69 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v75 = (unint64_t)&v60[v88 + 23] & 0xFFFFFFFFFFFFFFF8;
    uint64_t v76 = *(void *)v75;
    char v77 = *(unsigned char *)(v75 + 9);
    LOBYTE(v70) = *(unsigned char *)(v75 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(void *)v75, v70, v77);
    *(void *)unint64_t v74 = v76;
    *(unsigned char *)(v74 + 8) = v70;
    *(unsigned char *)(v74 + 9) = v77;
    long long v78 = (void *)((v74 + 17) & 0xFFFFFFFFFFFFFFF8);
    long long v79 = (void *)((v75 + 17) & 0xFFFFFFFFFFFFFFF8);
    *long long v78 = *v79;
    int v80 = (void *)(((unint64_t)v78 + v89) & v66);
    long long v81 = (const void *)(((unint64_t)v79 + v89) & v66);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v90 + 48))(v81, 1, v91))
    {
      memcpy(v80, v81, v85);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v90 + 16))(v80, v81, v91);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v90 + 56))(v80, 0, 1, v91);
    }
    return v92;
  }
  return (void *)v26;
}

uint64_t outlined copy of Environment<String?>.Content(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRetain();
  }
  else {
    return swift_retain();
  }
}

uint64_t outlined copy of Environment<Text?>.Content(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if (a5) {
    return outlined copy of Text?(result, a2, a3, a4);
  }
  else {
    return swift_retain();
  }
}

uint64_t destroy for FileDialogConfiguration(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 <= 8) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = v6;
  }
  unsigned int v8 = a1[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        if (v7 >= 4) {
          goto LABEL_22;
        }
        goto LABEL_17;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        if (v7 >= 4) {
          goto LABEL_22;
        }
        goto LABEL_17;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v7 < 4) {
          goto LABEL_17;
        }
        goto LABEL_22;
      case 4:
        int v11 = *(_DWORD *)a1;
        if (v7 < 4)
        {
LABEL_17:
          unsigned int v8 = (v11 | (v9 << (8 * v7))) + 2;
          break;
        }
LABEL_22:
        if (v11 != -1) {
          goto LABEL_23;
        }
        goto LABEL_19;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
LABEL_19:
    if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, v4);
    }
  }
  else
  {
LABEL_23:
    swift_release();
  }
  int v12 = &a1[v7];
  outlined consume of Environment<String?>.Content(*(void *)((unint64_t)(v12 + 8) & 0xFFFFFFFFFFFFFFF8), *(void *)(((unint64_t)(v12 + 8) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((unint64_t)(v12 + 8) & 0xFFFFFFFFFFFFFFF8) + 16));
  outlined consume of Environment<Text?>.Content(*(void *)((unint64_t)(v12 + 32) & 0xFFFFFFFFFFFFFFF8), *(void *)(((unint64_t)(v12 + 32) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((unint64_t)(v12 + 32) & 0xFFFFFFFFFFFFFFF8) + 16), *(void *)(((unint64_t)(v12 + 32) & 0xFFFFFFFFFFFFFFF8) + 24), *(unsigned char *)(((unint64_t)(v12 + 32) & 0xFFFFFFFFFFFFFFF8) + 32));
  outlined consume of Environment<Text?>.Content(*(void *)((unint64_t)(v12 + 72) & 0xFFFFFFFFFFFFFFF8), *(void *)(((unint64_t)(v12 + 72) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(((unint64_t)(v12 + 72) & 0xFFFFFFFFFFFFFFF8) + 16), *(void *)(((unint64_t)(v12 + 72) & 0xFFFFFFFFFFFFFFF8) + 24), *(unsigned char *)(((unint64_t)(v12 + 72) & 0xFFFFFFFFFFFFFFF8) + 32));
  unint64_t v13 = (unint64_t)(v12 + 112) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Text?>.Content(*(void *)v13, *(void *)(v13 + 8), *(void *)(v13 + 16), *(void *)(v13 + 24), *(unsigned char *)(v13 + 32));
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = *(_DWORD *)(v16 + 80) & 0xF8 | 7;
  int v18 = (unsigned __int8 *)((v13 + v17 + 33) & ~v17);
  unint64_t v19 = *(void *)(v16 + 64);
  if (!*(_DWORD *)(v16 + 84)) {
    ++v19;
  }
  if (v19 <= 8) {
    uint64_t v20 = 8;
  }
  else {
    uint64_t v20 = v19;
  }
  unsigned int v21 = v18[v20];
  unsigned int v22 = v21 - 2;
  if (v21 >= 2)
  {
    if (v20 <= 3) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = 4;
    }
    switch(v23)
    {
      case 1:
        int v24 = *v18;
        goto LABEL_38;
      case 2:
        int v24 = *(unsigned __int16 *)v18;
        goto LABEL_38;
      case 3:
        int v24 = *(unsigned __int16 *)v18 | (v18[2] << 16);
        goto LABEL_38;
      case 4:
        int v24 = *(_DWORD *)v18;
LABEL_38:
        int v25 = (v24 | (v22 << (8 * v20))) + 2;
        unsigned int v21 = v24 + 2;
        if (v20 < 4) {
          unsigned int v21 = v25;
        }
        break;
      default:
        break;
    }
  }
  if (v21 == 1)
  {
    if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v16 + 48))(v18, 1, v14)) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v16 + 8))(v18, v15);
    }
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Bool?>.Content(*(void *)((unint64_t)&v18[v20 + 8] & 0xFFFFFFFFFFFFFFF8), *(unsigned __int8 *)(((unint64_t)&v18[v20 + 8] & 0xFFFFFFFFFFFFFFF8) + 8));
  unint64_t v26 = (unint64_t)&v18[v20 + 24] & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(void *)v26, *(unsigned __int8 *)(v26 + 8), *(unsigned char *)(v26 + 9));
  uint64_t v27 = *(void *)(a2 + 24);
  uint64_t v28 = *(void *)(v27 - 8);
  unint64_t v29 = (((v26 + 17) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v28 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80);
  uint64_t v32 = v28;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1, v27);
  if (!result)
  {
    uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t))(v32 + 8);
    return v31(v29, v27);
  }
  return result;
}

uint64_t outlined consume of Environment<Text?>.Content(uint64_t result, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if (a5) {
    return outlined consume of Text?(result, a2, a3, a4);
  }
  else {
    return swift_release();
  }
}

void *initializeWithCopy for FileDialogConfiguration(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84)) {
    size_t v8 = *(void *)(v7 + 64);
  }
  else {
    size_t v8 = *(void *)(v7 + 64) + 1;
  }
  if (v8 <= 8) {
    uint64_t v9 = 8;
  }
  else {
    uint64_t v9 = v8;
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        if (v9 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_17;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        if (v9 >= 4) {
          goto LABEL_24;
        }
        goto LABEL_17;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v9 < 4) {
          goto LABEL_17;
        }
        goto LABEL_24;
      case 4:
        int v13 = *(_DWORD *)a2;
        if (v9 < 4)
        {
LABEL_17:
          unsigned int v10 = (v13 | (v11 << (8 * v9))) + 2;
          break;
        }
LABEL_24:
        if (v13 != -1) {
          goto LABEL_25;
        }
        goto LABEL_19;
      default:
        break;
    }
  }
  if (v10 == 1)
  {
LABEL_19:
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    *((unsigned char *)a1 + v9) = 1;
  }
  else
  {
LABEL_25:
    *a1 = *(void *)a2;
    *((unsigned char *)a1 + v9) = 0;
    swift_retain();
  }
  uint64_t v14 = (char *)a1 + v9 + 1;
  uint64_t v15 = &a2[v9 + 1];
  unint64_t v16 = (unint64_t)(v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (unint64_t)(v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = *(void *)v17;
  uint64_t v19 = *(void *)(v17 + 8);
  char v20 = *(unsigned char *)(v17 + 16);
  outlined copy of Environment<String?>.Content(*(void *)v17, v19, v20);
  *(void *)unint64_t v16 = v18;
  *(void *)(v16 + 8) = v19;
  *(unsigned char *)(v16 + 16) = v20;
  unint64_t v21 = (unint64_t)(v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (unint64_t)(v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)v22;
  uint64_t v24 = *(void *)(v22 + 8);
  uint64_t v25 = *(void *)(v22 + 16);
  uint64_t v26 = *(void *)(v22 + 24);
  char v27 = *(unsigned char *)(v22 + 32);
  outlined copy of Environment<Text?>.Content(*(void *)v22, v24, v25, v26, v27);
  *(void *)unint64_t v21 = v23;
  *(void *)(v21 + 8) = v24;
  *(void *)(v21 + 16) = v25;
  *(void *)(v21 + 24) = v26;
  *(unsigned char *)(v21 + 32) = v27;
  unint64_t v28 = (unint64_t)(v14 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (unint64_t)(v15 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = *(void *)v29;
  uint64_t v31 = *(void *)(v29 + 8);
  uint64_t v32 = *(void *)(v29 + 16);
  uint64_t v33 = *(void *)(v29 + 24);
  char v34 = *(unsigned char *)(v29 + 32);
  outlined copy of Environment<Text?>.Content(*(void *)v29, v31, v32, v33, v34);
  *(void *)unint64_t v28 = v30;
  *(void *)(v28 + 8) = v31;
  *(void *)(v28 + 16) = v32;
  *(void *)(v28 + 24) = v33;
  *(unsigned char *)(v28 + 32) = v34;
  unint64_t v35 = (unint64_t)(v14 + 111) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (unint64_t)(v15 + 111) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = *(void *)v36;
  uint64_t v38 = *(void *)(v36 + 8);
  uint64_t v39 = *(void *)(v36 + 16);
  uint64_t v40 = *(void *)(v36 + 24);
  char v41 = *(unsigned char *)(v36 + 32);
  outlined copy of Environment<Text?>.Content(*(void *)v36, v38, v39, v40, v41);
  *(void *)unint64_t v35 = v37;
  *(void *)(v35 + 8) = v38;
  *(void *)(v35 + 16) = v39;
  *(void *)(v35 + 24) = v40;
  *(unsigned char *)(v35 + 32) = v41;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v43 = v42;
  uint64_t v44 = *(void *)(v42 - 8);
  uint64_t v45 = *(_DWORD *)(v44 + 80) & 0xF8;
  unint64_t v46 = ~v45 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v47 = v45 + 40;
  uint64_t v48 = (void *)((v47 + v35) & v46);
  uint64_t v49 = (unsigned __int8 *)((v47 + v36) & v46);
  if (*(_DWORD *)(v44 + 84)) {
    size_t v50 = *(void *)(*(void *)(v42 - 8) + 64);
  }
  else {
    size_t v50 = *(void *)(*(void *)(v42 - 8) + 64) + 1;
  }
  if (v50 <= 8) {
    uint64_t v51 = 8;
  }
  else {
    uint64_t v51 = v50;
  }
  unsigned int v52 = v49[v51];
  unsigned int v53 = v52 - 2;
  if (v52 >= 2)
  {
    if (v51 <= 3) {
      uint64_t v54 = v51;
    }
    else {
      uint64_t v54 = 4;
    }
    switch(v54)
    {
      case 1:
        int v55 = *v49;
        goto LABEL_41;
      case 2:
        int v55 = *(unsigned __int16 *)v49;
        goto LABEL_41;
      case 3:
        int v55 = *(unsigned __int16 *)((v47 + v36) & v46) | (*(unsigned __int8 *)(((v47 + v36) & v46) + 2) << 16);
        goto LABEL_41;
      case 4:
        int v55 = *(_DWORD *)v49;
LABEL_41:
        int v56 = (v55 | (v53 << (8 * v51))) + 2;
        unsigned int v52 = v55 + 2;
        if (v51 < 4) {
          unsigned int v52 = v56;
        }
        break;
      default:
        break;
    }
  }
  if (v52 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v44 + 48))(v49, 1, v42))
    {
      memcpy(v48, v49, v50);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v44 + 16))(v48, v49, v43);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v44 + 56))(v48, 0, 1, v43);
    }
    *((unsigned char *)v48 + v51) = 1;
  }
  else
  {
    *uint64_t v48 = *(void *)v49;
    *((unsigned char *)v48 + v51) = 0;
    swift_retain();
  }
  uint64_t v57 = (char *)v48 + v51 + 1;
  char v58 = &v49[v51 + 1];
  unint64_t v59 = (unint64_t)(v57 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = (unint64_t)(v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v61 = *(void *)v60;
  char v62 = *(unsigned char *)(v60 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v60, v62);
  *(void *)unint64_t v59 = v61;
  *(unsigned char *)(v59 + 8) = v62;
  unint64_t v63 = (unint64_t)(v57 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v64 = (unint64_t)(v58 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v65 = *(void *)v64;
  char v66 = *(unsigned char *)(v64 + 9);
  LOBYTE(v57) = *(unsigned char *)(v64 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v64, v57, v66);
  *(void *)unint64_t v63 = v65;
  *(unsigned char *)(v63 + 8) = (_BYTE)v57;
  *(unsigned char *)(v63 + 9) = v66;
  uint64_t v67 = (void *)((v63 + 17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v68 = (void *)((v64 + 17) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v67 = *v68;
  uint64_t v69 = *(void *)(a3 + 24);
  uint64_t v70 = *(void *)(v69 - 8);
  uint64_t v71 = *(unsigned __int8 *)(v70 + 80);
  uint64_t v72 = (void *)(((unint64_t)v67 + v71 + 8) & ~v71);
  char v73 = (const void *)(((unint64_t)v68 + v71 + 8) & ~v71);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v70 + 48))(v73, 1, v69))
  {
    if (*(_DWORD *)(v70 + 84)) {
      size_t v74 = *(void *)(v70 + 64);
    }
    else {
      size_t v74 = *(void *)(v70 + 64) + 1;
    }
    memcpy(v72, v73, v74);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v70 + 16))(v72, v73, v69);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v70 + 56))(v72, 0, 1, v69);
  }
  return a1;
}

unsigned __int8 *assignWithCopy for FileDialogConfiguration(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(_DWORD *)(v7 + 84)) {
      size_t v8 = *(void *)(v7 + 64);
    }
    else {
      size_t v8 = *(void *)(v7 + 64) + 1;
    }
    if (v8 <= 8) {
      uint64_t v9 = 8;
    }
    else {
      uint64_t v9 = v8;
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          if (v9 >= 4) {
            goto LABEL_23;
          }
          goto LABEL_18;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          if (v9 >= 4) {
            goto LABEL_23;
          }
          goto LABEL_18;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v9 < 4) {
            goto LABEL_18;
          }
          goto LABEL_23;
        case 4:
          int v13 = *(_DWORD *)a1;
          if (v9 < 4)
          {
LABEL_18:
            unsigned int v10 = (v13 | (v11 << (8 * v9))) + 2;
            break;
          }
LABEL_23:
          if (v13 != -1) {
            goto LABEL_24;
          }
          goto LABEL_20;
        default:
          break;
      }
    }
    if (v10 == 1)
    {
LABEL_20:
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
      }
    }
    else
    {
LABEL_24:
      swift_release();
    }
    unsigned int v14 = a2[v9];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          if (v9 >= 4) {
            goto LABEL_42;
          }
          goto LABEL_35;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          if (v9 >= 4) {
            goto LABEL_42;
          }
          goto LABEL_35;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v9 < 4) {
            goto LABEL_35;
          }
          goto LABEL_42;
        case 4:
          int v17 = *(_DWORD *)a2;
          if (v9 < 4)
          {
LABEL_35:
            unsigned int v14 = (v17 | (v15 << (8 * v9))) + 2;
            break;
          }
LABEL_42:
          if (v17 != -1) {
            goto LABEL_43;
          }
          goto LABEL_37;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
LABEL_37:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v8);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v6);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
      a1[v9] = 1;
    }
    else
    {
LABEL_43:
      *(void *)a1 = *(void *)a2;
      a1[v9] = 0;
      swift_retain();
    }
  }
  uint64_t v18 = *(void *)(type metadata accessor for URL() - 8);
  if (*(_DWORD *)(v18 + 84)) {
    unint64_t v19 = *(void *)(v18 + 64);
  }
  else {
    unint64_t v19 = *(void *)(v18 + 64) + 1;
  }
  if (v19 <= 8) {
    unint64_t v19 = 8;
  }
  unint64_t v20 = v19 + 1;
  unint64_t v21 = &a1[v20];
  unint64_t v22 = &a2[v20];
  unint64_t v23 = (unint64_t)&a1[v20 + 7] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (unint64_t)&a2[v20 + 7] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = *(void *)v24;
  uint64_t v26 = *(void *)(v24 + 8);
  char v27 = *(unsigned char *)(v24 + 16);
  outlined copy of Environment<String?>.Content(*(void *)v24, v26, v27);
  uint64_t v28 = *(void *)v23;
  uint64_t v29 = *(void *)(v23 + 8);
  char v30 = *(unsigned char *)(v23 + 16);
  *(void *)unint64_t v23 = v25;
  *(void *)(v23 + 8) = v26;
  *(unsigned char *)(v23 + 16) = v27;
  outlined consume of Environment<String?>.Content(v28, v29, v30);
  unint64_t v31 = (unint64_t)(v21 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (unint64_t)(v22 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = *(void *)v32;
  uint64_t v34 = *(void *)(v32 + 8);
  uint64_t v35 = *(void *)(v32 + 16);
  uint64_t v36 = *(void *)(v32 + 24);
  char v37 = *(unsigned char *)(v32 + 32);
  outlined copy of Environment<Text?>.Content(*(void *)v32, v34, v35, v36, v37);
  uint64_t v38 = *(void *)v31;
  uint64_t v39 = *(void *)(v31 + 8);
  uint64_t v40 = *(void *)(v31 + 16);
  uint64_t v41 = *(void *)(v31 + 24);
  char v42 = *(unsigned char *)(v31 + 32);
  *(void *)unint64_t v31 = v33;
  *(void *)(v31 + 8) = v34;
  *(void *)(v31 + 16) = v35;
  *(void *)(v31 + 24) = v36;
  *(unsigned char *)(v31 + 32) = v37;
  outlined consume of Environment<Text?>.Content(v38, v39, v40, v41, v42);
  unint64_t v43 = (unint64_t)(v21 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = (unint64_t)(v22 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v45 = *(void *)v44;
  uint64_t v46 = *(void *)(v44 + 8);
  uint64_t v47 = *(void *)(v44 + 16);
  uint64_t v48 = *(void *)(v44 + 24);
  char v49 = *(unsigned char *)(v44 + 32);
  outlined copy of Environment<Text?>.Content(*(void *)v44, v46, v47, v48, v49);
  uint64_t v50 = *(void *)v43;
  uint64_t v51 = *(void *)(v43 + 8);
  uint64_t v52 = *(void *)(v43 + 16);
  uint64_t v53 = *(void *)(v43 + 24);
  char v54 = *(unsigned char *)(v43 + 32);
  *(void *)unint64_t v43 = v45;
  *(void *)(v43 + 8) = v46;
  *(void *)(v43 + 16) = v47;
  *(void *)(v43 + 24) = v48;
  *(unsigned char *)(v43 + 32) = v49;
  outlined consume of Environment<Text?>.Content(v50, v51, v52, v53, v54);
  unint64_t v55 = (unint64_t)(v21 + 111) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v56 = (unint64_t)(v22 + 111) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v57 = *(void *)v56;
  uint64_t v58 = *(void *)(v56 + 8);
  uint64_t v59 = *(void *)(v56 + 16);
  uint64_t v60 = *(void *)(v56 + 24);
  char v61 = *(unsigned char *)(v56 + 32);
  outlined copy of Environment<Text?>.Content(*(void *)v56, v58, v59, v60, v61);
  uint64_t v62 = *(void *)v55;
  uint64_t v63 = *(void *)(v55 + 8);
  uint64_t v64 = *(void *)(v55 + 16);
  uint64_t v65 = *(void *)(v55 + 24);
  char v66 = *(unsigned char *)(v55 + 32);
  *(void *)unint64_t v55 = v57;
  *(void *)(v55 + 8) = v58;
  *(void *)(v55 + 16) = v59;
  *(void *)(v55 + 24) = v60;
  *(unsigned char *)(v55 + 32) = v61;
  outlined consume of Environment<Text?>.Content(v62, v63, v64, v65, v66);
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v68 = *(void *)(v67 - 8);
  uint64_t v69 = v68;
  int v70 = *(_DWORD *)(v68 + 84);
  uint64_t v71 = *(_DWORD *)(v68 + 80) & 0xF8;
  unint64_t v72 = ~v71 & 0xFFFFFFFFFFFFFFF8;
  v71 += 40;
  char v73 = (unsigned __int8 *)((v71 + v55) & v72);
  size_t v74 = (unsigned __int8 *)((v71 + v56) & v72);
  unint64_t v75 = *(void *)(v68 + 64);
  if (v73 != v74)
  {
    uint64_t v76 = v67;
    if (v70) {
      size_t v77 = *(void *)(v68 + 64);
    }
    else {
      size_t v77 = v75 + 1;
    }
    if (v77 <= 8) {
      uint64_t v78 = 8;
    }
    else {
      uint64_t v78 = v77;
    }
    unsigned int v79 = v73[v78];
    unsigned int v80 = v79 - 2;
    if (v79 >= 2)
    {
      if (v78 <= 3) {
        uint64_t v81 = v78;
      }
      else {
        uint64_t v81 = 4;
      }
      switch(v81)
      {
        case 1:
          int v82 = *v73;
          if (v78 >= 4) {
            goto LABEL_71;
          }
          goto LABEL_66;
        case 2:
          int v82 = *(unsigned __int16 *)v73;
          if (v78 >= 4) {
            goto LABEL_71;
          }
          goto LABEL_66;
        case 3:
          int v82 = *(unsigned __int16 *)v73 | (v73[2] << 16);
          if (v78 < 4) {
            goto LABEL_66;
          }
          goto LABEL_71;
        case 4:
          int v82 = *(_DWORD *)v73;
          if (v78 < 4)
          {
LABEL_66:
            unsigned int v79 = (v82 | (v80 << (8 * v78))) + 2;
            break;
          }
LABEL_71:
          if (v82 != -1) {
            goto LABEL_72;
          }
          goto LABEL_68;
        default:
          break;
      }
    }
    if (v79 == 1)
    {
LABEL_68:
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v69 + 48))(v73, 1, v67)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v69 + 8))(v73, v76);
      }
    }
    else
    {
LABEL_72:
      swift_release();
    }
    unsigned int v83 = v74[v78];
    unsigned int v84 = v83 - 2;
    if (v83 >= 2)
    {
      if (v78 <= 3) {
        uint64_t v85 = v78;
      }
      else {
        uint64_t v85 = 4;
      }
      switch(v85)
      {
        case 1:
          int v86 = *v74;
          if (v78 >= 4) {
            goto LABEL_90;
          }
          goto LABEL_83;
        case 2:
          int v86 = *(unsigned __int16 *)v74;
          if (v78 >= 4) {
            goto LABEL_90;
          }
          goto LABEL_83;
        case 3:
          int v86 = *(unsigned __int16 *)v74 | (v74[2] << 16);
          if (v78 < 4) {
            goto LABEL_83;
          }
          goto LABEL_90;
        case 4:
          int v86 = *(_DWORD *)v74;
          if (v78 < 4)
          {
LABEL_83:
            unsigned int v83 = (v86 | (v84 << (8 * v78))) + 2;
            break;
          }
LABEL_90:
          if (v86 != -1) {
            goto LABEL_91;
          }
          goto LABEL_85;
        default:
          break;
      }
    }
    if (v83 == 1)
    {
LABEL_85:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v69 + 48))(v74, 1, v76))
      {
        memcpy(v73, v74, v77);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v69 + 16))(v73, v74, v76);
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v69 + 56))(v73, 0, 1, v76);
      }
      v73[v78] = 1;
    }
    else
    {
LABEL_91:
      *(void *)char v73 = *(void *)v74;
      v73[v78] = 0;
      swift_retain();
    }
  }
  if (v70) {
    unint64_t v87 = v75;
  }
  else {
    unint64_t v87 = v75 + 1;
  }
  if (v87 <= 8) {
    unint64_t v87 = 8;
  }
  unint64_t v88 = v87 + 1;
  uint64_t v89 = &v73[v88];
  uint64_t v90 = &v74[v88];
  unint64_t v91 = (unint64_t)&v73[v88 + 7] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v92 = (unint64_t)&v74[v88 + 7] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v93 = *(void *)v92;
  char v94 = *(unsigned char *)(v92 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v92, v94);
  uint64_t v95 = *(void *)v91;
  uint64_t v96 = *(unsigned __int8 *)(v91 + 8);
  *(void *)unint64_t v91 = v93;
  *(unsigned char *)(v91 + 8) = v94;
  outlined consume of Environment<Bool?>.Content(v95, v96);
  unint64_t v97 = (unint64_t)(v89 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v98 = (unint64_t)(v90 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v99 = *(void *)v98;
  char v100 = *(unsigned char *)(v98 + 9);
  LOBYTE(v89) = *(unsigned char *)(v98 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v98, v89, v100);
  uint64_t v101 = *(void *)v97;
  char v102 = *(unsigned char *)(v97 + 9);
  *(void *)unint64_t v97 = v99;
  uint64_t v103 = *(unsigned __int8 *)(v97 + 8);
  *(unsigned char *)(v97 + 8) = (_BYTE)v89;
  *(unsigned char *)(v97 + 9) = v100;
  outlined consume of Environment<CGFloat?>.Content(v101, v103, v102);
  int v104 = (void *)((v97 + 17) & 0xFFFFFFFFFFFFFFF8);
  int v105 = (void *)((v98 + 17) & 0xFFFFFFFFFFFFFFF8);
  *int v104 = *v105;
  uint64_t v106 = *(void *)(a3 + 24);
  uint64_t v107 = *(void *)(v106 - 8);
  uint64_t v108 = *(unsigned __int8 *)(v107 + 80);
  unint64_t v109 = (void *)(((unint64_t)v104 + v108 + 8) & ~v108);
  uint64_t v110 = (void *)(((unint64_t)v105 + v108 + 8) & ~v108);
  v111 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v107 + 48);
  LODWORD(v89) = v111(v109, 1, v106);
  int v112 = v111(v110, 1, v106);
  if (v89)
  {
    if (!v112)
    {
      (*(void (**)(void *, void *, uint64_t))(v107 + 16))(v109, v110, v106);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v107 + 56))(v109, 0, 1, v106);
      return a1;
    }
    int v113 = *(_DWORD *)(v107 + 84);
    size_t v114 = *(void *)(v107 + 64);
  }
  else
  {
    if (!v112)
    {
      (*(void (**)(void *, void *, uint64_t))(v107 + 24))(v109, v110, v106);
      return a1;
    }
    v116 = *(void (**)(void *, uint64_t))(v107 + 8);
    uint64_t v115 = v107 + 8;
    v116(v109, v106);
    int v113 = *(_DWORD *)(v115 + 76);
    size_t v114 = *(void *)(v115 + 56);
  }
  if (v113) {
    size_t v117 = v114;
  }
  else {
    size_t v117 = v114 + 1;
  }
  memcpy(v109, v110, v117);
  return a1;
}

void *initializeWithTake for FileDialogConfiguration(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84)) {
    size_t v8 = *(void *)(v7 + 64);
  }
  else {
    size_t v8 = *(void *)(v7 + 64) + 1;
  }
  if (v8 <= 8) {
    uint64_t v9 = 8;
  }
  else {
    uint64_t v9 = v8;
  }
  unsigned int v10 = a2[v9];
  unsigned int v11 = v10 - 2;
  if (v10 >= 2)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *a2;
        if (v9 >= 4) {
          goto LABEL_23;
        }
        goto LABEL_17;
      case 2:
        int v13 = *(unsigned __int16 *)a2;
        if (v9 >= 4) {
          goto LABEL_23;
        }
        goto LABEL_17;
      case 3:
        int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        if (v9 < 4) {
          goto LABEL_17;
        }
        goto LABEL_23;
      case 4:
        int v13 = *(_DWORD *)a2;
        if (v9 < 4)
        {
LABEL_17:
          unsigned int v10 = (v13 | (v11 << (8 * v9))) + 2;
          break;
        }
LABEL_23:
        if (v13 != -1) {
          goto LABEL_24;
        }
        goto LABEL_19;
      default:
        break;
    }
  }
  if (v10 == 1)
  {
LABEL_19:
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, v8);
      char v14 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
      char v14 = 1;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
  }
  else
  {
LABEL_24:
    char v14 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v9) = v14;
  unsigned int v15 = (char *)a1 + v9 + 1;
  uint64_t v16 = &a2[v9 + 1];
  unint64_t v17 = (unint64_t)(v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (unint64_t)(v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v19 = *(_OWORD *)v18;
  *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
  *(_OWORD *)unint64_t v17 = v19;
  unint64_t v20 = (unint64_t)(v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (unint64_t)(v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v22 = *(_OWORD *)v21;
  long long v23 = *(_OWORD *)(v21 + 16);
  *(unsigned char *)(v20 + 32) = *(unsigned char *)(v21 + 32);
  *(_OWORD *)unint64_t v20 = v22;
  *(_OWORD *)(v20 + 16) = v23;
  unint64_t v24 = (unint64_t)(v15 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (unint64_t)(v16 + 71) & 0xFFFFFFFFFFFFFFF8;
  long long v26 = *(_OWORD *)v25;
  long long v27 = *(_OWORD *)(v25 + 16);
  *(unsigned char *)(v24 + 32) = *(unsigned char *)(v25 + 32);
  *(_OWORD *)unint64_t v24 = v26;
  *(_OWORD *)(v24 + 16) = v27;
  unint64_t v28 = (unint64_t)(v15 + 111) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (unint64_t)(v16 + 111) & 0xFFFFFFFFFFFFFFF8;
  long long v30 = *(_OWORD *)v29;
  long long v31 = *(_OWORD *)(v29 + 16);
  *(unsigned char *)(v28 + 32) = *(unsigned char *)(v29 + 32);
  *(_OWORD *)unint64_t v28 = v30;
  *(_OWORD *)(v28 + 16) = v31;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v33 = v32;
  uint64_t v34 = *(void *)(v32 - 8);
  uint64_t v35 = *(_DWORD *)(v34 + 80) & 0xF8;
  unint64_t v36 = ~v35 & 0xFFFFFFFFFFFFFFF8;
  v35 += 40;
  char v37 = (void *)((v35 + v28) & v36);
  uint64_t v38 = (unsigned __int8 *)((v35 + v29) & v36);
  if (*(_DWORD *)(v34 + 84)) {
    size_t v39 = *(void *)(*(void *)(v32 - 8) + 64);
  }
  else {
    size_t v39 = *(void *)(*(void *)(v32 - 8) + 64) + 1;
  }
  if (v39 <= 8) {
    uint64_t v40 = 8;
  }
  else {
    uint64_t v40 = v39;
  }
  unsigned int v41 = v38[v40];
  unsigned int v42 = v41 - 2;
  if (v41 >= 2)
  {
    if (v40 <= 3) {
      uint64_t v43 = v40;
    }
    else {
      uint64_t v43 = 4;
    }
    switch(v43)
    {
      case 1:
        int v44 = *v38;
        goto LABEL_40;
      case 2:
        int v44 = *(unsigned __int16 *)v38;
        goto LABEL_40;
      case 3:
        int v44 = *(unsigned __int16 *)v38 | (v38[2] << 16);
        goto LABEL_40;
      case 4:
        int v44 = *(_DWORD *)v38;
LABEL_40:
        int v45 = (v44 | (v42 << (8 * v40))) + 2;
        unsigned int v41 = v44 + 2;
        if (v40 < 4) {
          unsigned int v41 = v45;
        }
        break;
      default:
        break;
    }
  }
  if (v41 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v34 + 48))(v38, 1, v32))
    {
      memcpy(v37, v38, v39);
      char v46 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v34 + 32))(v37, v38, v33);
      char v46 = 1;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v33);
    }
  }
  else
  {
    char v46 = 0;
    *char v37 = *(void *)v38;
  }
  *((unsigned char *)v37 + v40) = v46;
  uint64_t v47 = (char *)v37 + v40 + 1;
  uint64_t v48 = &v38[v40 + 1];
  unint64_t v49 = (unint64_t)(v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v50 = (unint64_t)(v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v51 = *(void *)v50;
  *(unsigned char *)(v49 + 8) = *(unsigned char *)(v50 + 8);
  *(void *)unint64_t v49 = v51;
  unint64_t v52 = (unint64_t)(v47 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v53 = (unint64_t)(v48 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v54 = *(void *)v53;
  *(_WORD *)(v52 + 8) = *(_WORD *)(v53 + 8);
  *(void *)unint64_t v52 = v54;
  unint64_t v55 = (void *)((v52 + 17) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v56 = (void *)((v53 + 17) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v55 = *v56;
  uint64_t v57 = *(void *)(a3 + 24);
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = *(unsigned __int8 *)(v58 + 80);
  uint64_t v60 = (void *)(((unint64_t)v55 + v59 + 8) & ~v59);
  char v61 = (const void *)(((unint64_t)v56 + v59 + 8) & ~v59);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v58 + 48))(v61, 1, v57))
  {
    if (*(_DWORD *)(v58 + 84)) {
      size_t v62 = *(void *)(v58 + 64);
    }
    else {
      size_t v62 = *(void *)(v58 + 64) + 1;
    }
    memcpy(v60, v61, v62);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v58 + 32))(v60, v61, v57);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v60, 0, 1, v57);
  }
  return a1;
}

unsigned __int8 *assignWithTake for FileDialogConfiguration(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = type metadata accessor for URL();
    uint64_t v7 = *(void *)(v6 - 8);
    if (*(_DWORD *)(v7 + 84)) {
      size_t v8 = *(void *)(v7 + 64);
    }
    else {
      size_t v8 = *(void *)(v7 + 64) + 1;
    }
    if (v8 <= 8) {
      uint64_t v9 = 8;
    }
    else {
      uint64_t v9 = v8;
    }
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          if (v9 >= 4) {
            goto LABEL_23;
          }
          goto LABEL_18;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          if (v9 >= 4) {
            goto LABEL_23;
          }
          goto LABEL_18;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v9 < 4) {
            goto LABEL_18;
          }
          goto LABEL_23;
        case 4:
          int v13 = *(_DWORD *)a1;
          if (v9 < 4)
          {
LABEL_18:
            unsigned int v10 = (v13 | (v11 << (8 * v9))) + 2;
            break;
          }
LABEL_23:
          if (v13 != -1) {
            goto LABEL_24;
          }
          goto LABEL_20;
        default:
          break;
      }
    }
    if (v10 == 1)
    {
LABEL_20:
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v7 + 8))(a1, v6);
      }
    }
    else
    {
LABEL_24:
      swift_release();
    }
    unsigned int v14 = a2[v9];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          if (v9 >= 4) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          if (v9 >= 4) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v9 < 4) {
            goto LABEL_35;
          }
          goto LABEL_41;
        case 4:
          int v17 = *(_DWORD *)a2;
          if (v9 < 4)
          {
LABEL_35:
            unsigned int v14 = (v17 | (v15 << (8 * v9))) + 2;
            break;
          }
LABEL_41:
          if (v17 != -1) {
            goto LABEL_42;
          }
          goto LABEL_37;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
LABEL_37:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
      {
        memcpy(a1, a2, v8);
        char v18 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v6);
        char v18 = 1;
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      }
    }
    else
    {
LABEL_42:
      char v18 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v9] = v18;
  }
  uint64_t v19 = *(void *)(type metadata accessor for URL() - 8);
  if (*(_DWORD *)(v19 + 84)) {
    unint64_t v20 = *(void *)(v19 + 64);
  }
  else {
    unint64_t v20 = *(void *)(v19 + 64) + 1;
  }
  if (v20 <= 8) {
    unint64_t v20 = 8;
  }
  unint64_t v21 = v20 + 1;
  long long v22 = &a1[v21];
  long long v23 = &a2[v21];
  unint64_t v24 = (unint64_t)&a1[v21 + 7] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (unint64_t)(v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v26 = *(unsigned char *)(v25 + 16);
  uint64_t v27 = *(void *)v24;
  uint64_t v28 = *(void *)(v24 + 8);
  char v29 = *(unsigned char *)(v24 + 16);
  *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
  *(unsigned char *)(v24 + 16) = v26;
  outlined consume of Environment<String?>.Content(v27, v28, v29);
  unint64_t v30 = (unint64_t)(v23 + 31) & 0xFFFFFFFFFFFFFFF8;
  char v31 = *(unsigned char *)(v30 + 32);
  unint64_t v32 = (unint64_t)(v22 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = *(void *)v32;
  uint64_t v34 = *(void *)(v32 + 8);
  uint64_t v35 = *(void *)(v32 + 16);
  uint64_t v36 = *(void *)(v32 + 24);
  char v37 = *(unsigned char *)(v32 + 32);
  long long v38 = *(_OWORD *)(v30 + 16);
  *(_OWORD *)unint64_t v32 = *(_OWORD *)v30;
  *(_OWORD *)(v32 + 16) = v38;
  *(unsigned char *)(v32 + 32) = v31;
  outlined consume of Environment<Text?>.Content(v33, v34, v35, v36, v37);
  unint64_t v39 = (unint64_t)(v23 + 71) & 0xFFFFFFFFFFFFFFF8;
  char v40 = *(unsigned char *)(v39 + 32);
  unint64_t v41 = (unint64_t)(v22 + 71) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v42 = *(void *)v41;
  uint64_t v43 = *(void *)(v41 + 8);
  uint64_t v44 = *(void *)(v41 + 16);
  uint64_t v45 = *(void *)(v41 + 24);
  char v46 = *(unsigned char *)(v41 + 32);
  long long v47 = *(_OWORD *)(v39 + 16);
  *(_OWORD *)unint64_t v41 = *(_OWORD *)v39;
  *(_OWORD *)(v41 + 16) = v47;
  *(unsigned char *)(v41 + 32) = v40;
  outlined consume of Environment<Text?>.Content(v42, v43, v44, v45, v46);
  unint64_t v48 = (unint64_t)(v23 + 111) & 0xFFFFFFFFFFFFFFF8;
  char v49 = *(unsigned char *)(v48 + 32);
  unint64_t v50 = (unint64_t)(v22 + 111) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v51 = *(void *)v50;
  uint64_t v52 = *(void *)(v50 + 8);
  uint64_t v53 = *(void *)(v50 + 16);
  uint64_t v54 = *(void *)(v50 + 24);
  char v55 = *(unsigned char *)(v50 + 32);
  long long v56 = *(_OWORD *)(v48 + 16);
  *(_OWORD *)unint64_t v50 = *(_OWORD *)v48;
  *(_OWORD *)(v50 + 16) = v56;
  *(unsigned char *)(v50 + 32) = v49;
  outlined consume of Environment<Text?>.Content(v51, v52, v53, v54, v55);
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = v58;
  int v60 = *(_DWORD *)(v58 + 84);
  uint64_t v61 = *(_DWORD *)(v58 + 80) & 0xF8;
  unint64_t v62 = ~v61 & 0xFFFFFFFFFFFFFFF8;
  v61 += 40;
  uint64_t v63 = (unsigned __int8 *)((v61 + v50) & v62);
  uint64_t v64 = (unsigned __int8 *)((v61 + v48) & v62);
  unint64_t v65 = *(void *)(v58 + 64);
  if (v63 != v64)
  {
    uint64_t v66 = v57;
    if (v60) {
      size_t v67 = *(void *)(v58 + 64);
    }
    else {
      size_t v67 = v65 + 1;
    }
    if (v67 <= 8) {
      uint64_t v68 = 8;
    }
    else {
      uint64_t v68 = v67;
    }
    unsigned int v69 = v63[v68];
    unsigned int v70 = v69 - 2;
    if (v69 >= 2)
    {
      if (v68 <= 3) {
        uint64_t v71 = v68;
      }
      else {
        uint64_t v71 = 4;
      }
      switch(v71)
      {
        case 1:
          int v72 = *v63;
          if (v68 >= 4) {
            goto LABEL_71;
          }
          goto LABEL_66;
        case 2:
          int v72 = *(unsigned __int16 *)v63;
          if (v68 >= 4) {
            goto LABEL_71;
          }
          goto LABEL_66;
        case 3:
          int v72 = *(unsigned __int16 *)v63 | (v63[2] << 16);
          if (v68 < 4) {
            goto LABEL_66;
          }
          goto LABEL_71;
        case 4:
          int v72 = *(_DWORD *)v63;
          if (v68 < 4)
          {
LABEL_66:
            unsigned int v69 = (v72 | (v70 << (8 * v68))) + 2;
            break;
          }
LABEL_71:
          if (v72 != -1) {
            goto LABEL_72;
          }
          goto LABEL_68;
        default:
          break;
      }
    }
    if (v69 == 1)
    {
LABEL_68:
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v59 + 48))(v63, 1, v57)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v59 + 8))(v63, v66);
      }
    }
    else
    {
LABEL_72:
      swift_release();
    }
    unsigned int v73 = v64[v68];
    unsigned int v74 = v73 - 2;
    if (v73 >= 2)
    {
      if (v68 <= 3) {
        uint64_t v75 = v68;
      }
      else {
        uint64_t v75 = 4;
      }
      switch(v75)
      {
        case 1:
          int v76 = *v64;
          if (v68 >= 4) {
            goto LABEL_89;
          }
          goto LABEL_83;
        case 2:
          int v76 = *(unsigned __int16 *)v64;
          if (v68 >= 4) {
            goto LABEL_89;
          }
          goto LABEL_83;
        case 3:
          int v76 = *(unsigned __int16 *)v64 | (v64[2] << 16);
          if (v68 < 4) {
            goto LABEL_83;
          }
          goto LABEL_89;
        case 4:
          int v76 = *(_DWORD *)v64;
          if (v68 < 4)
          {
LABEL_83:
            unsigned int v73 = (v76 | (v74 << (8 * v68))) + 2;
            break;
          }
LABEL_89:
          if (v76 != -1) {
            goto LABEL_90;
          }
          goto LABEL_85;
        default:
          break;
      }
    }
    if (v73 == 1)
    {
LABEL_85:
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v59 + 48))(v64, 1, v66))
      {
        memcpy(v63, v64, v67);
        char v77 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v59 + 32))(v63, v64, v66);
        char v77 = 1;
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v59 + 56))(v63, 0, 1, v66);
      }
    }
    else
    {
LABEL_90:
      char v77 = 0;
      *(void *)uint64_t v63 = *(void *)v64;
    }
    v63[v68] = v77;
  }
  if (v60) {
    unint64_t v78 = v65;
  }
  else {
    unint64_t v78 = v65 + 1;
  }
  if (v78 <= 8) {
    unint64_t v78 = 8;
  }
  unint64_t v79 = v78 + 1;
  unsigned int v80 = &v63[v79];
  uint64_t v81 = &v64[v79];
  unint64_t v82 = (unint64_t)(v80 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v83 = (unint64_t)(v81 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v84 = *(void *)v83;
  LOBYTE(v83) = *(unsigned char *)(v83 + 8);
  uint64_t v85 = *(void *)v82;
  uint64_t v86 = *(unsigned __int8 *)(v82 + 8);
  *(void *)unint64_t v82 = v84;
  *(unsigned char *)(v82 + 8) = v83;
  outlined consume of Environment<Bool?>.Content(v85, v86);
  unint64_t v87 = (unint64_t)(v80 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v88 = (unint64_t)(v81 + 23) & 0xFFFFFFFFFFFFFFF8;
  char v89 = *(unsigned char *)(v88 + 8);
  char v90 = *(unsigned char *)(v88 + 9);
  uint64_t v91 = *(void *)v87;
  char v92 = *(unsigned char *)(v87 + 9);
  *(void *)unint64_t v87 = *(void *)v88;
  uint64_t v93 = *(unsigned __int8 *)(v87 + 8);
  *(unsigned char *)(v87 + 8) = v89;
  *(unsigned char *)(v87 + 9) = v90;
  outlined consume of Environment<CGFloat?>.Content(v91, v93, v92);
  char v94 = (void *)((v87 + 17) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v95 = (void *)((v88 + 17) & 0xFFFFFFFFFFFFFFF8);
  *char v94 = *v95;
  uint64_t v96 = *(void *)(a3 + 24);
  uint64_t v97 = *(void *)(v96 - 8);
  uint64_t v98 = *(unsigned __int8 *)(v97 + 80);
  uint64_t v99 = (void *)(((unint64_t)v94 + v98 + 8) & ~v98);
  char v100 = (void *)(((unint64_t)v95 + v98 + 8) & ~v98);
  uint64_t v101 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v97 + 48);
  int v102 = v101(v99, 1, v96);
  int v103 = v101(v100, 1, v96);
  if (v102)
  {
    if (!v103)
    {
      (*(void (**)(void *, void *, uint64_t))(v97 + 32))(v99, v100, v96);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v97 + 56))(v99, 0, 1, v96);
      return a1;
    }
    int v104 = *(_DWORD *)(v97 + 84);
    size_t v105 = *(void *)(v97 + 64);
  }
  else
  {
    if (!v103)
    {
      (*(void (**)(void *, void *, uint64_t))(v97 + 40))(v99, v100, v96);
      return a1;
    }
    uint64_t v107 = *(void (**)(void *, uint64_t))(v97 + 8);
    uint64_t v106 = v97 + 8;
    v107(v99, v96);
    int v104 = *(_DWORD *)(v106 + 76);
    size_t v105 = *(void *)(v106 + 56);
  }
  if (v104) {
    size_t v108 = v105;
  }
  else {
    size_t v108 = v105 + 1;
  }
  memcpy(v99, v100, v108);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileDialogConfiguration(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for URL() - 8);
  int v7 = *(_DWORD *)(v6 + 84);
  unint64_t v8 = *(void *)(v6 + 64);
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v11 + 84);
  if (v13) {
    unsigned int v14 = v13 - 1;
  }
  else {
    unsigned int v14 = 0;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v18 = v10 + 80;
  int v17 = *(_DWORD *)(v10 + 80);
  int v16 = *(_DWORD *)(v18 + 4);
  unint64_t v19 = *(void *)(*(void *)(v9 - 8) + 64);
  if (v7) {
    unint64_t v20 = v8;
  }
  else {
    unint64_t v20 = v8 + 1;
  }
  if (v20 <= 8) {
    unint64_t v20 = 8;
  }
  if (!v16) {
    ++v19;
  }
  if (v19 <= 8) {
    uint64_t v21 = 8;
  }
  else {
    uint64_t v21 = v19;
  }
  uint64_t v22 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v23 = *(void *)(v11 + 64);
  if (v13) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = v23 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v25 = v17 & 0xF8 | 7;
  uint64_t v26 = v21 + 24;
  uint64_t v27 = v22 + 8;
  if (a2 <= v15) {
    goto LABEL_41;
  }
  uint64_t v28 = v24
      + ((v27
        + ((((v26 + (((v20 & 0xFFFFFFFFFFFFFFF8) + v25 + 145) & ~v25)) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)) & ~v22);
  char v29 = 8 * v28;
  if (v28 <= 3)
  {
    unsigned int v32 = ((a2 - v15 + ~(-1 << v29)) >> v29) + 1;
    if (HIWORD(v32))
    {
      int v30 = *(_DWORD *)((char *)a1 + v28);
      if (!v30) {
        goto LABEL_41;
      }
      goto LABEL_31;
    }
    if (v32 > 0xFF)
    {
      int v30 = *(unsigned __int16 *)((char *)a1 + v28);
      if (!*(unsigned __int16 *)((char *)a1 + v28)) {
        goto LABEL_41;
      }
      goto LABEL_31;
    }
    if (v32 < 2)
    {
LABEL_41:
      uint64_t v36 = (uint64_t *)((((v26 + (((((unint64_t)a1 + v20 + 112) & 0xFFFFFFFFFFFFFFF8) + v25 + 33) & ~v25)) & 0xFFFFFFFFFFFFFFF8)
                       + 17) & 0xFFFFFFFFFFFFFFF8);
      if ((v14 & 0x80000000) != 0)
      {
        unsigned int v38 = (*(uint64_t (**)(unint64_t))(v12 + 48))(((unint64_t)v36 + v27) & ~v22);
        if (v38 >= 2) {
          return v38 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        uint64_t v37 = *v36;
        if ((unint64_t)*v36 >= 0xFFFFFFFF) {
          LODWORD(v37) = -1;
        }
        return (v37 + 1);
      }
    }
  }
  int v30 = *((unsigned __int8 *)a1 + v28);
  if (!*((unsigned char *)a1 + v28)) {
    goto LABEL_41;
  }
LABEL_31:
  int v33 = (v30 - 1) << v29;
  if (v28 > 3) {
    int v33 = 0;
  }
  if (v28)
  {
    if (v28 <= 3) {
      int v34 = v28;
    }
    else {
      int v34 = 4;
    }
    switch(v34)
    {
      case 2:
        int v35 = *a1;
        break;
      case 3:
        int v35 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v35 = *(_DWORD *)a1;
        break;
      default:
        int v35 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v35 = 0;
  }
  return v15 + (v35 | v33) + 1;
}

void storeEnumTagSinglePayload for FileDialogConfiguration(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for URL() - 8);
  int v9 = *(_DWORD *)(v8 + 84);
  unint64_t v10 = *(void *)(v8 + 64);
  type metadata accessor for Predicate<Pack{URL}>();
  int v12 = 0;
  uint64_t v13 = *(void *)(*(void *)(a4 + 24) - 8);
  int v14 = *(_DWORD *)(v13 + 84);
  unsigned int v15 = v14 - 1;
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (!v14) {
    unsigned int v15 = 0;
  }
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = v15;
  }
  if (v9) {
    unint64_t v18 = v10;
  }
  else {
    unint64_t v18 = v10 + 1;
  }
  uint64_t v19 = 8;
  if (v18 <= 8) {
    unint64_t v18 = 8;
  }
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84)) {
    unint64_t v20 = *(void *)(*(void *)(v11 - 8) + 64);
  }
  else {
    unint64_t v20 = *(void *)(*(void *)(v11 - 8) + 64) + 1;
  }
  if (v20 > 8) {
    uint64_t v19 = v20;
  }
  uint64_t v21 = *(_DWORD *)(*(void *)(v11 - 8) + 80) & 0xF8 | 7;
  uint64_t v22 = v19 + 24;
  uint64_t v23 = v16 + 8;
  if (v14) {
    size_t v24 = *(void *)(v13 + 64);
  }
  else {
    size_t v24 = *(void *)(v13 + 64) + 1;
  }
  unint64_t v25 = ((v16
        + 8
        + ((((v22 + (((v18 & 0xFFFFFFFFFFFFFFF8) + v21 + 145) & ~v21)) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)) & ~v16)
      + v24;
  if (a3 <= v17) {
    goto LABEL_27;
  }
  if (v25 <= 3)
  {
    unsigned int v26 = ((a3 - v17 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
    if (HIWORD(v26))
    {
      int v12 = 4;
      if (v17 >= a2) {
        goto LABEL_35;
      }
      goto LABEL_28;
    }
    if (v26 >= 0x100) {
      int v12 = 2;
    }
    else {
      int v12 = v26 > 1;
    }
LABEL_27:
    if (v17 >= a2) {
      goto LABEL_35;
    }
    goto LABEL_28;
  }
  int v12 = 1;
  if (v17 >= a2)
  {
LABEL_35:
    uint64_t v30 = ~v16;
    switch(v12)
    {
      case 1:
        a1[v25] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_40;
      case 2:
        *(_WORD *)&a1[v25] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_40;
      case 3:
        goto LABEL_70;
      case 4:
        *(_DWORD *)&a1[v25] = 0;
        goto LABEL_39;
      default:
LABEL_39:
        if (a2)
        {
LABEL_40:
          char v31 = (void *)((((v22 + ((((unint64_t)&a1[v18 + 112] & 0xFFFFFFFFFFFFFFF8) + v21 + 33) & ~v21)) & 0xFFFFFFFFFFFFFFF8)
                          + 17) & 0xFFFFFFFFFFFFFFF8);
          if ((v15 & 0x80000000) != 0)
          {
            int v33 = (unsigned char *)(((unint64_t)v31 + v23) & v30);
            if (v15 >= a2)
            {
              uint64_t v37 = *(void (**)(unint64_t, void))(v13 + 56);
              v37(((unint64_t)v31 + v23) & v30, a2 + 1);
            }
            else
            {
              if (v24 <= 3) {
                int v34 = ~(-1 << (8 * v24));
              }
              else {
                int v34 = -1;
              }
              if (v24)
              {
                int v35 = v34 & (~v15 + a2);
                if (v24 <= 3) {
                  int v36 = v24;
                }
                else {
                  int v36 = 4;
                }
                bzero(v33, v24);
                switch(v36)
                {
                  case 2:
                    *(_WORD *)int v33 = v35;
                    break;
                  case 3:
                    *(_WORD *)int v33 = v35;
                    void v33[2] = BYTE2(v35);
                    break;
                  case 4:
                    *(_DWORD *)int v33 = v35;
                    break;
                  default:
                    unsigned char *v33 = v35;
                    break;
                }
              }
            }
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v32 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v32 = a2 - 1;
            }
            *char v31 = v32;
          }
        }
        break;
    }
    return;
  }
LABEL_28:
  unsigned int v27 = ~v17 + a2;
  if (v25 < 4)
  {
    int v28 = (v27 >> (8
                 * (((v16 + 8 + ((((v22 + (((v18 & 0xF8) + v21 - 111) & ~(_BYTE)v21)) & 0xF8) + 17) & 0xF8)) & ~(_BYTE)v16)
                  + v24)))
        + 1;
    if (v25)
    {
      int v29 = v27 & ~(-1 << (8
                         * (((v16 + 8 + ((((v22 + (((v18 & 0xF8) + v21 - 111) & ~(_BYTE)v21)) & 0xF8) + 17) & 0xF8)) & ~(_BYTE)v16)
                          + v24)));
      bzero(a1, ((v16+ 8+ ((((v22 + (((v18 & 0xFFFFFFFFFFFFFFF8) + v21 + 145) & ~v21)) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)) & ~v16)+ v24);
      if (v25 == 3)
      {
        *(_WORD *)a1 = v29;
        a1[2] = BYTE2(v29);
      }
      else if (v25 == 2)
      {
        *(_WORD *)a1 = v29;
      }
      else
      {
        *a1 = v29;
      }
    }
  }
  else
  {
    bzero(a1, ((v16+ 8+ ((((v22 + (((v18 & 0xFFFFFFFFFFFFFFF8) + v21 + 145) & ~v21)) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)) & ~v16)+ v24);
    *(_DWORD *)a1 = v27;
    int v28 = 1;
  }
  switch(v12)
  {
    case 1:
      a1[v25] = v28;
      break;
    case 2:
      *(_WORD *)&a1[v25] = v28;
      break;
    case 3:
LABEL_70:
      __break(1u);
      JUMPOUT(0x187AA66F0);
    case 4:
      *(_DWORD *)&a1[v25] = v28;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for FileDialogConfiguration()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for Predicate<Pack{URL}>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in FileDialogConfiguration<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.FileDialogDefaultDirectoryKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  type metadata accessor for URL?(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static EnvironmentValues.FileDialogDefaultDirectoryKey.defaultValue);

  return outlined init with copy of URL?(v3, a1);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.FileDialogMessageKey(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = a2[3];
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    return (v2 | v3) == 0;
  }
  uint64_t v5 = a2[1];
  uint64_t v6 = *a2;
  char v7 = a2[2] & 1;
  outlined copy of Text.Storage(*a2, v5, v7);
  swift_bridgeObjectRetain();
  char v8 = static Text.== infix(_:_:)();
  outlined consume of Text.Storage(v6, v5, v7);
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t one-time initialization function for defaultValue(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a2(0);
  __swift_allocate_value_buffer(v6, a3);
  uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)a3);
  uint64_t v8 = a4(0);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);

  return v9(v7, 1, 1, v8);
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v6 = a2(0);
  __swift_allocate_value_buffer(v6, a3);
  uint64_t v7 = __swift_project_value_buffer(v6, (uint64_t)a3);
  uint64_t v8 = a4(0);
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);

  return v9(v7, 1, 1, v8);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.FileDialogURLEnabledKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  type metadata accessor for Predicate<Pack{URL}>?(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static EnvironmentValues.FileDialogURLEnabledKey.defaultValue);

  return outlined init with copy of Predicate<Pack{URL}>?(v3, a1);
}

uint64_t FileDialogConfiguration.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v69 = a2;
  type metadata accessor for Predicate<Pack{URL}>?(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v67 = (uint64_t)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v68 = swift_allocBox();
  uint64_t v13 = v12;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v12, v3 + *(int *)(a1 + 84), v11);
  int v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
  if (!v14(v13, 1, v10))
  {
    specialized Environment.wrappedValue.getter((uint64_t)v9);
    (*(void (**)(char *, uint64_t))(*(void *)(a1 + 40) + 40))(v9, v10);
  }
  unsigned int v15 = v14(v13, 1, v10);
  *(void *)&long long v70 = v3;
  if (!v15)
  {
    uint64_t v16 = v3 + *(int *)(a1 + 52);
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    char v19 = *(unsigned char *)(v16 + 16);
    outlined copy of Environment<String?>.Content(*(void *)v16, v18, v19);
    uint64_t v66 = specialized Environment.wrappedValue.getter(v17, v18, v19);
    uint64_t v21 = v20;
    char v22 = v19;
    uint64_t v3 = v70;
    outlined consume of Environment<String?>.Content(v17, v18, v22);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 16))(v66, v21, v10);
  }
  if (!v14(v13, 1, v10))
  {
    uint64_t v23 = v3 + *(int *)(a1 + 56);
    long long v24 = *(_OWORD *)(v23 + 16);
    v79[0] = *(_OWORD *)v23;
    v79[1] = v24;
    char v80 = *(unsigned char *)(v23 + 32);
    outlined init with take of Environment<Text?>.Content((uint64_t)v79, (uint64_t)v81);
    outlined retain of Environment<Text?>.Content((uint64_t)v81, (void (*)(void, void, void, void, void))outlined copy of Environment<Text?>.Content);
    uint64_t v25 = specialized Environment.wrappedValue.getter();
    uint64_t v27 = v26;
    uint64_t v29 = v28;
    uint64_t v31 = v30;
    outlined retain of Environment<Text?>.Content((uint64_t)v79, (void (*)(void, void, void, void, void))outlined consume of Environment<Text?>.Content);
    uint64_t v32 = v27;
    uint64_t v3 = v70;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 64))(v25, v32, v29, v31, v10);
  }
  if (!v14(v13, 1, v10))
  {
    uint64_t v33 = v3 + *(int *)(a1 + 60);
    long long v34 = *(_OWORD *)(v33 + 16);
    v77[0] = *(_OWORD *)v33;
    v77[1] = v34;
    char v78 = *(unsigned char *)(v33 + 32);
    outlined init with take of Environment<Text?>.Content((uint64_t)v77, (uint64_t)v82);
    outlined retain of Environment<Text?>.Content((uint64_t)v82, (void (*)(void, void, void, void, void))outlined copy of Environment<Text?>.Content);
    uint64_t v35 = specialized Environment.wrappedValue.getter();
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    outlined retain of Environment<Text?>.Content((uint64_t)v77, (void (*)(void, void, void, void, void))outlined consume of Environment<Text?>.Content);
    uint64_t v42 = v37;
    uint64_t v3 = v70;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 88))(v35, v42, v39, v41, v10);
  }
  if (!v14(v13, 1, v10))
  {
    uint64_t v43 = v3 + *(int *)(a1 + 64);
    long long v44 = *(_OWORD *)(v43 + 16);
    v75[0] = *(_OWORD *)v43;
    v75[1] = v44;
    char v76 = *(unsigned char *)(v43 + 32);
    outlined init with take of Environment<Text?>.Content((uint64_t)v75, (uint64_t)v83);
    outlined retain of Environment<Text?>.Content((uint64_t)v83, (void (*)(void, void, void, void, void))outlined copy of Environment<Text?>.Content);
    uint64_t v45 = specialized Environment.wrappedValue.getter();
    uint64_t v47 = v46;
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    outlined retain of Environment<Text?>.Content((uint64_t)v75, (void (*)(void, void, void, void, void))outlined consume of Environment<Text?>.Content);
    uint64_t v52 = v47;
    uint64_t v3 = v70;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 40) + 112))(v45, v52, v49, v51, v10);
  }
  if (!v14(v13, 1, v10))
  {
    uint64_t v53 = v67;
    specialized Environment.wrappedValue.getter(v67);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 40) + 136))(v53, v10);
  }
  if (!v14(v13, 1, v10))
  {
    uint64_t v54 = v3 + *(int *)(a1 + 72);
    uint64_t v55 = *(void *)v54;
    uint64_t v56 = *(unsigned __int8 *)(v54 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v54, *(unsigned char *)(v54 + 8));
    uint64_t v57 = specialized Environment.wrappedValue.getter(v55, v56);
    uint64_t v58 = v56;
    uint64_t v3 = v70;
    outlined consume of Environment<Bool?>.Content(v55, v58);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(a1 + 40) + 160))(v57, v10);
  }
  if (!v14(v13, 1, v10))
  {
    uint64_t v59 = v3 + *(int *)(a1 + 76);
    uint64_t v60 = *(void *)v59;
    uint64_t v61 = *(unsigned __int8 *)(v59 + 8);
    int v62 = *(unsigned __int8 *)(v59 + 9);
    outlined copy of Environment<CGFloat?>.Content(*(void *)v59, v61, *(unsigned char *)(v59 + 9));
    specialized Environment.wrappedValue.getter(v60, v61 | (v62 << 8), (uint64_t)&v73);
    outlined consume of Environment<CGFloat?>.Content(v60, v61, v62);
    uint64_t v71 = v73;
    char v72 = v74;
    (*(void (**)(uint64_t *, uint64_t))(*(void *)(a1 + 40) + 184))(&v71, v10);
  }
  uint64_t v63 = *(void *)(a1 + 16);
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = v63;
  *(void *)(v64 + 24) = v10;
  long long v70 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v64 + 32) = v70;
  *(void *)(v64 + 48) = v68;
  swift_retain();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  swift_getWitnessTable();
  View.transformPreference<A>(_:_:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in FileDialogConfiguration.body(content:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  uint64_t v4 = swift_projectBox();
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(a1, v4, v2);
}

uint64_t sub_187AA725C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FileDialogConfiguration.body(content:)(uint64_t a1)
{
  return closure #1 in FileDialogConfiguration.body(content:)(a1);
}

uint64_t outlined init with take of Environment<Text?>.Content(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Environment<Text?>.Content(0, &lazy cache variable for type metadata for Environment<Text?>.Content, &lazy cache variable for type metadata for Text?, MEMORY[0x1E4F41420], MEMORY[0x1E4F3F4D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of Environment<Text?>.Content(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined init with copy of Predicate<Pack{URL}>?(uint64_t a1, uint64_t a2)
{
  return outlined init with copy of Predicate<Pack{URL}>?(a1, a2, (uint64_t (*)(void))type metadata accessor for Predicate<Pack{URL}>?);
}

uint64_t outlined init with copy of Predicate<Pack{URL}>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Predicate<Pack{URL}>?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *type metadata accessor for EnvironmentValues.FileDialogDefaultDirectoryKey()
{
  return &unk_1ED422210;
}

ValueMetadata *type metadata accessor for EnvironmentValues.FileDialogCustomizationIDKey()
{
  return &type metadata for EnvironmentValues.FileDialogCustomizationIDKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.FileDialogMessageKey()
{
  return &type metadata for EnvironmentValues.FileDialogMessageKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.FileDialogConfirmationLabelKey()
{
  return &type metadata for EnvironmentValues.FileDialogConfirmationLabelKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.FileExporterFilenameLabelKey()
{
  return &type metadata for EnvironmentValues.FileExporterFilenameLabelKey;
}

void *type metadata accessor for EnvironmentValues.FileDialogURLEnabledKey()
{
  return &unk_1ED421E98;
}

void *type metadata accessor for EnvironmentValues.FileDialogImportsUnresolvedAliasesKey()
{
  return &unk_1ED422448;
}

void *type metadata accessor for EnvironmentValues.FileDialogBrowserOptionsKey()
{
  return &unk_1ED422170;
}

uint64_t sub_187AA74D4()
{
  return swift_getWitnessTable();
}

uint64_t SceneStorage.init<A>(key:transform:defaultValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v12 = (int *)type metadata accessor for SceneStorage();
  *((void *)a6 + 2) = 0;
  *((void *)a6 + 3) = 0;
  *(void *)&a6[v12[9]] = 0;
  *(void *)a6 = a1;
  *((void *)a6 + 1) = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(&a6[v12[8]], a4, a5);
  type metadata accessor for TransformBox();
  uint64_t result = TransformBox.__allocating_init(_:)(a3);
  *(void *)&a6[v12[10]] = result;
  return result;
}

void SceneStorageValues.AnyEntry.encode(into:)()
{
}

void *SceneStorageValues.Entry.__allocating_init(_:_:location:transformBox:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a1;
  uint64_t v12[3] = a2;
  v12[4] = a3;
  uint64_t v12[5] = a4;
  swift_retain();
  swift_bridgeObjectRelease();
  v12[6] = a5;
  v12[7] = a6;
  swift_release();
  return v12;
}

uint64_t SceneStorageValues.Entry.encode(into:)(uint64_t a1)
{
  uint64_t v3 = v1[7];
  v11[3] = *(void *)(*v1 + 104);
  __swift_allocate_boxed_opaque_existential_1(v11);
  swift_retain();
  swift_retain();
  StoredLocationBase.get()();
  swift_release();
  uint64_t v4 = (void *)v1[5];
  uint64_t v6 = v1[2];
  uint64_t v5 = (void *)v1[3];
  if (v4)
  {
    uint64_t v10 = v1[4];
    swift_bridgeObjectRetain();
    v7._countAndFlagsBits = 47;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = v6;
    v8._object = v5;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = v10;
    uint64_t v5 = v4;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t, void *))(*(void *)v3 + 96))(v11, a1, v6, v5);
  swift_bridgeObjectRelease();
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t SceneStorageValues.Entry.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t SceneStorageValues.Entry.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t SceneStorageValues.Entry.__deallocating_deinit()
{
  SceneStorageValues.Entry.deinit();

  return swift_deallocClassInstance();
}

uint64_t SceneStorageValues.initialValue<A>(_:key:transformBox:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  void (*v15)(void *__return_ptr, void, void, void, void);
  uint64_t v16;
  char v17;
  void (*v18)(void, void, void, void);
  uint64_t v19;
  void (*v20)(void, void, void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void v29[4];
  char v30;

  uint64_t v27 = a5;
  uint64_t v28 = a2;
  uint64_t v26 = type metadata accessor for Optional();
  long long v24 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v12);
  int v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = 0;
  uint64_t v25 = v5;
  unsigned int v15 = *(void (**)(void *__return_ptr, void, void, void, void))(*(void *)a3 + 88);
  uint64_t v16 = swift_bridgeObjectRetain();
  v15(v29, v16, a1, v28, &v30);
  swift_bridgeObjectRelease();
  type metadata accessor for PropertyListTransform<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  uint64_t v17 = swift_dynamicCast();
  uint64_t v18 = *(void (**)(void, void, void, void))(v11 + 56);
  if (v17)
  {
    char v19 = v25;
    v18(v10, 0, 1, a4);
    uint64_t v20 = *(void (**)(void, void, void))(v11 + 32);
    v20(v14, v10, a4);
    uint64_t v21 = v27;
    if (v30 == 1)
    {
      --*(void *)(v19 + 32);
      v20(v21, v14, a4);
      char v22 = 0;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a4);
      char v22 = 1;
    }
  }
  else
  {
    char v22 = 1;
    v18(v10, 1, 1, a4);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v26);
    uint64_t v21 = v27;
  }
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v18)(v21, v22, 1, a4);
}

uint64_t SceneStorageValues.getLocation<A>(_:domain:key:transformBox:signal:makeLocation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(char *), uint64_t a9, uint64_t a10)
{
  uint64_t v11 = v10;
  uint64_t v37 = a8;
  uint64_t v35 = a1;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v35 - v20;
  uint64_t v41 = (uint64_t)a5;
  uint64_t v42 = a7;
  uint64_t v39 = a4;
  uint64_t v40 = a2;
  uint64_t v38 = a6;
  uint64_t v36 = v22;
  if (a3)
  {
    uint64_t v44 = a2;
    uint64_t v45 = (void *)a3;
    swift_bridgeObjectRetain();
    v23._countAndFlagsBits = 47;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v24._countAndFlagsBits = a4;
    v24._object = a5;
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a4 = v44;
    a5 = v45;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_beginAccess();
  if (!*(void *)(*(void *)(v11 + 24) + 16))
  {
    swift_endAccess();
LABEL_11:
    uint64_t v29 = a4;
    uint64_t v35 = a4;
    uint64_t v30 = v38;
    SceneStorageValues.initialValue<A>(_:key:transformBox:)(v29, (uint64_t)a5, v38, a10, (uint64_t)v21);
    uint64_t v28 = v37(v21);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v36);
    type metadata accessor for SceneStorageValues.Entry();
    swift_bridgeObjectRetain();
    uint64_t v31 = v41;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    uint64_t v32 = SceneStorageValues.Entry.__allocating_init(_:_:location:transformBox:)(v39, v31, v40, a3, v28, v30);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v43 = *(void *)(v11 + 24);
    *(void *)(v11 + 24) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v32, v35, (uint64_t)a5, isUniquelyReferenced_nonNull_native);
    *(void *)(v11 + 24) = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(a4, (uint64_t)a5);
  if ((v25 & 1) == 0)
  {
    swift_endAccess();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease();
  type metadata accessor for SceneStorageValues.Entry();
  uint64_t v26 = swift_dynamicCastClass();
  if (!v26)
  {
    swift_release();
    goto LABEL_11;
  }
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(v27 + 48);
  swift_retain();
  swift_release();
LABEL_12:
  type metadata accessor for GraphHost();
  MEMORY[0x18C114840]();
  ObservableLocation.addObserver(host:signal:)();
  swift_release();
  return v28;
}

uint64_t SceneStorageValues.removeObserver<A>(_:domain:key:signal:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  if (a3)
  {
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = 47;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = a4;
    v9._object = a5;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a4 = a2;
    a5 = a3;
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_beginAccess();
  if (*(void *)(*(void *)(v5 + 24) + 16))
  {
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(a4, (uint64_t)a5);
    if (v10)
    {
      swift_endAccess();
      swift_retain();
      swift_bridgeObjectRelease_n();
      type metadata accessor for SceneStorageValues.Entry();
      if (swift_dynamicCastClass())
      {
        swift_retain();
        swift_release();
        ObservableLocation.removeObserver(signal:)();
      }
      return swift_release();
    }
    else
    {
      swift_endAccess();
      return swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
}

uint64_t SceneStorageValues.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of weak FallbackResponderProvider?(v0 + 40);

  return swift_deallocClassInstance();
}

uint64_t EnvironmentValues.sceneStorageValues.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageValuesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageValuesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageValuesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  unint64_t v1 = (uint64_t (*)(void))type metadata accessor for WeakBox<SceneStorageValues>?;
  if (v4[8])
  {
    uint64_t Strong = 0;
  }
  else
  {
    uint64_t Strong = swift_weakLoadStrong();
    unint64_t v1 = (uint64_t (*)(void))type metadata accessor for WeakBox<SceneStorageValues>;
  }
  outlined destroy of WeakBox<SceneStorageValues>((uint64_t)v4, v1);
  return Strong;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance SceneStorageValuesKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of WeakBox<SceneStorageValues>?((uint64_t)&static SceneStorageValuesKey.defaultValue, a1);
}

uint64_t View.sceneStorageDomain(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.sceneStorageDomain.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.sceneStorageDomain : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.sceneStorageDomain.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_187AA852C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.sceneStorageDomain.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.sceneStorageDomain : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)a1[1];
  swift_bridgeObjectRetain();
  return EnvironmentValues.sceneStorageDomain.setter(v1, v2);
}

uint64_t sub_187AA85A8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void *)a1[1];
  swift_bridgeObjectRetain();
  return EnvironmentValues.sceneStorageDomain.setter(v1, v2);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.sceneStorageDomain.setter(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v5 = *(void *)(v2 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    if (v5)
    {
      swift_retain();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release();
    if (v9)
    {
      v6._countAndFlagsBits = 47;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      v7._countAndFlagsBits = a1;
      v7._object = a2;
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      swift_bridgeObjectRetain();
      PropertyList.subscript.setter();
      if (v5) {
        goto LABEL_9;
      }
LABEL_10:
      swift_bridgeObjectRelease();
      return swift_release();
    }
  }
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
  swift_bridgeObjectRetain();
  swift_retain();
  PropertyList.subscript.setter();
  if (!*(void *)(v2 + 8)) {
    goto LABEL_10;
  }
LABEL_9:
  swift_retain();
  swift_retain();
  PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

void (*EnvironmentValues.sceneStorageDomain.modify(void *a1))(uint64_t **a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneStorageDomainKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneStorageDomainKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(_OWORD *)uint64_t v3 = *((_OWORD *)v3 + 1);
  return EnvironmentValues.sceneStorageDomain.modify;
}

void EnvironmentValues.sceneStorageDomain.modify(uint64_t **a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v4 = **a1;
  uint64_t v3 = (void *)(*a1)[1];
  if (a2)
  {
    swift_bridgeObjectRetain();
    EnvironmentValues.sceneStorageDomain.setter(v4, v3);
    swift_bridgeObjectRelease();
  }
  else
  {
    EnvironmentValues.sceneStorageDomain.setter(**a1, v3);
  }

  free(v2);
}

uint64_t SceneStorage._key.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SceneStorage._key.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*SceneStorage._key.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SceneStorage._domain.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SceneStorage._domain.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*SceneStorage._domain.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SceneStorage._value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 32));
}

uint64_t SceneStorage._value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 32), a1);
}

uint64_t (*SceneStorage._value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SceneStorage._location.getter()
{
  return swift_retain();
}

uint64_t SceneStorage._location.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 36);
  uint64_t result = swift_release();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*SceneStorage._location.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SceneStorage._transformBox.getter()
{
  return swift_retain();
}

uint64_t SceneStorage._transformBox.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(a2 + 40);
  uint64_t result = swift_release();
  *(void *)(v2 + v4) = a1;
  return result;
}

uint64_t (*SceneStorage._transformBox.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t TransformBox.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 112) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 128), a1);
  return v2;
}

uint64_t SceneStorage.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SceneStorage.getValue(forReading:)(1, a1, a2);
}

uint64_t SceneStorage.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  specialized SceneStorage.wrappedValue.setter(a1, a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8);

  return v4(a1);
}

uint64_t SceneStorage.getValue(forReading:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!*(void *)(v3 + *(int *)(a2 + 36)))
  {
    static os_log_type_t.fault.getter();
    Swift::String v7 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

LABEL_7:
    uint64_t v8 = v3 + *(int *)(a2 + 32);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 16);
    return v9(a3, v8);
  }
  type metadata accessor for GraphHost();
  swift_retain();
  if (static GraphHost.isUpdating.getter())
  {
    if (a1) {
      dispatch thunk of AnyLocation.wasRead.setter();
    }
    swift_release();
    goto LABEL_7;
  }
  dispatch thunk of AnyLocation.get()();

  return swift_release();
}

void (*SceneStorage.wrappedValue.modify(void *a1, uint64_t a2))(void **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  _OWORD v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  SceneStorage.getValue(forReading:)(1, a2, (uint64_t)v9);
  return SceneStorage.wrappedValue.modify;
}

void SceneStorage.wrappedValue.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v4 = *v2;
    uint64_t v3 = v2[1];
    (*(void (**)(void, void, void))(v2[3] + 16))(v2[4], v2[5], v2[2]);
    if (*(void *)(v3 + *(int *)(v4 + 36))) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    uint64_t v6 = (void *)v2[4];
    uint64_t v5 = (void *)v2[5];
    uint64_t v7 = v2[2];
    size_t v8 = *(void (**)(void *, uint64_t))(v2[3] + 8);
    v8(v6, v7);
    v8(v5, v7);
  }
  else
  {
    if (*(void *)(v2[1] + *(int *)(*v2 + 36))) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    uint64_t v6 = (void *)v2[4];
    uint64_t v5 = (void *)v2[5];
    (*(void (**)(void *, void))(v2[3] + 8))(v5, v2[2]);
  }
  free(v5);
  free(v6);

  free(v2);
}

uint64_t SceneStorage.projectedValue.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v12 - v8;
  SceneStorage.getValue(forReading:)(0, a1, (uint64_t)&v12 - v8);
  if (*(void *)(v1 + *(int *)(a1 + 36)))
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
    swift_retain();
    Binding.init(value:location:transaction:)();
  }
  else
  {
    static os_log_type_t.fault.getter();
    char v10 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t static SceneStorage._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static SceneStorage._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4);
}

uint64_t SceneStorage.Box.update(property:phase:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v45 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v44 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v43) = *(_DWORD *)v4;
  char v9 = *(unsigned char *)(v4 + 8);
  uint64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = *(void *)(v4 + 24);
  uint64_t v12 = *(void **)(v4 + 40);
  uint64_t v46 = *(void *)(v4 + 32);
  uint64_t v42 = *(void *)(v4 + 48);
  type metadata accessor for PropertyListTransform<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v15 = *Value;
  uint64_t v16 = Value[1];
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v4 + 16) = v15;
    *(void *)(v4 + 24) = v16;
    *(unsigned char *)(v4 + 8) = 1;
    uint64_t v17 = v15;
    uint64_t v18 = v7;
    goto LABEL_15;
  }
  if ((v14 & 1) == 0)
  {
    uint64_t v17 = v10;
    uint64_t v16 = v11;
    uint64_t v18 = v7;
    goto LABEL_15;
  }
  uint64_t v18 = v7;
  if (v11)
  {
    if (v16)
    {
      BOOL v19 = v10 == v15 && v11 == v16;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v17 = v10;
        uint64_t v16 = v11;
        goto LABEL_15;
      }
    }
    goto LABEL_14;
  }
  if (v16)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    static os_log_type_t.fault.getter();
    uint64_t v20 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    SceneStorage.Box.reset()(a3);
    swift_bridgeObjectRelease();
    uint64_t v17 = v15;
    *(void *)(v4 + 16) = v15;
    *(void *)(v4 + 24) = v16;
    goto LABEL_15;
  }
  uint64_t v17 = v10;
LABEL_15:
  uint64_t v21 = *a1;
  uint64_t v22 = (void *)a1[1];
  if (v12)
  {
    if (v46 == v21 && v12 == v22)
    {
      uint64_t v21 = v46;
    }
    else if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      MEMORY[0x18C112B90](0xD000000000000056, 0x8000000188331290);
    }
  }
  else
  {
    *(void *)(v4 + 32) = v21;
    *(void *)(v4 + 40) = v22;
    swift_bridgeObjectRetain();
  }
  uint64_t v23 = *(void *)(v4 + 56);
  LODWORD(v46) = v23 == 0;
  if (!v23)
  {
    uint64_t v41 = v17;
    uint64_t v36 = type metadata accessor for SceneStorage();
    if (*(uint64_t *)((char *)a1 + *(int *)(v36 + 36))
      && (type metadata accessor for ObservableLocation(), (uint64_t v37 = swift_dynamicCastClass()) != 0))
    {
      *(void *)(v4 + 56) = v37;
      swift_retain();
    }
    else
    {
      type metadata accessor for SceneStorage<URL>(0, &lazy cache variable for type metadata for SceneStorageValues?, v35, (uint64_t (*)(uint64_t))type metadata accessor for SceneStorageValues, MEMORY[0x1E4FBB718]);
      uint64_t v38 = (void *)AGGraphGetValue();
      if (!*v38)
      {
        MEMORY[0x18C112B90](0xD00000000000006CLL, 0x80000001883312F0);
        char v34 = 0;
        return v34 & 1;
      }
      uint64_t v43 = &v41;
      uint64_t v39 = *(uint64_t *)((char *)a1 + *(int *)(v36 + 40));
      MEMORY[0x1F4188790](v38);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v40 = SceneStorageValues.getLocation<A>(_:domain:key:transformBox:signal:makeLocation:)(v18, v41, v16, v21, v22, v39, v42, (uint64_t (*)(char *))partial apply for closure #1 in SceneStorage.Box.update(property:phase:), (uint64_t)(&v41 - 4), v18);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_release();
      *(void *)(v4 + 56) = v40;
    }
  }
  Weakuint64_t Value = AGGraphGetWeakValue();
  char v26 = v25;
  uint64_t v27 = v44;
  StoredLocationBase.updateValue.getter();
  uint64_t v28 = type metadata accessor for SceneStorage();
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v45 + 40))((char *)a1 + *(int *)(v28 + 32), v27, v18);
  uint64_t v30 = *(void *)(v4 + 56);
  if (v30)
  {
    uint64_t v31 = *(int *)(v28 + 36);
    swift_retain();
    swift_release();
    *(uint64_t *)((char *)a1 + v31) = v30;
    uint64_t v33 = *(void *)(v4 + 16);
    uint64_t v32 = *(void *)(v4 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    a1[2] = v33;
    a1[3] = v32;
    if (WeakValue)
    {
      char v34 = v46;
      if (v26) {
        char v34 = (v23 == 0) | StoredLocationBase.wasRead.getter();
      }
    }
    else
    {
      char v34 = v46;
    }
    return v34 & 1;
  }
  __break(1u);
  return result;
}

void *SceneStorage.Box.reset()(uint64_t a1)
{
  uint64_t result = (void *)swift_release();
  v1[7] = 0;
  uint64_t v5 = (void *)v1[5];
  if (v5)
  {
    uint64_t v6 = v1[4];
    type metadata accessor for SceneStorage<URL>(0, &lazy cache variable for type metadata for SceneStorageValues?, v4, (uint64_t (*)(uint64_t))type metadata accessor for SceneStorageValues, MEMORY[0x1E4FBB718]);
    uint64_t result = (void *)AGGraphGetValue();
    if (*result)
    {
      char v9 = v1 + 2;
      uint64_t v7 = v1[2];
      uint64_t v8 = (void *)v9[1];
      uint64_t v10 = *(void *)(a1 + 16);
      swift_retain();
      swift_bridgeObjectRetain();
      SceneStorageValues.removeObserver<A>(_:domain:key:signal:)(v10, v7, v8, v6, v5);
      swift_bridgeObjectRelease();
      return (void *)swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in SceneStorage.Box.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)&v17 - v8;
  uint64_t v10 = *(void *)(a3 - 8);
  double v12 = MEMORY[0x1F4188790](v11);
  char v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, v6, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, a3) == 1)
  {
    uint64_t v15 = type metadata accessor for SceneStorage();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a2 + *(int *)(v15 + 32), a3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v14, v9, a3);
  }
  type metadata accessor for ObservableLocation();
  swift_allocObject();
  return ObservableLocation.init(initialValue:)();
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance SceneStorage<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static SceneStorage._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4);
}

uint64_t protocol witness for static DynamicProperty._propertyBehaviors.getter in conformance SceneStorage<A>()
{
  return MEMORY[0x1F40FE6D0]();
}

uint64_t SceneStorage.init<A>(wrappedValue:_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for TransformBox<PropertyListTransform<Bool>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Bool>>, &lazy cache variable for type metadata for PropertyListTransform<Bool>, MEMORY[0x1E4FBB390]);
  uint64_t result = swift_allocObject();
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = a3;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(unsigned char *)(a4 + 32) = a1;
  *(void *)(a4 + 40) = 0;
  *(void *)(a4 + 48) = result;
  return result;
}

uint64_t SceneStorage.init<A>(wrappedValue:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  type metadata accessor for RawRepresentableTransform();

  return SceneStorage.init<A>(key:transform:defaultValue:)(a2, a3, v10, a1, a4, a5);
}

uint64_t SceneStorage<A>.init<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for TransformBox<PropertyListTransform<Data?>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Bool?>>, &lazy cache variable for type metadata for PropertyListTransform<Bool?>, (unint64_t *)&lazy cache variable for type metadata for Bool?, MEMORY[0x1E4FBB390]);
  uint64_t result = swift_allocObject();
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 2;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = result;
  return result;
}

{
  return SceneStorage<A>.init<>(_:)(a1, a2, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Int?>>, &lazy cache variable for type metadata for PropertyListTransform<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550], a3);
}

{
  return SceneStorage<A>.init<>(_:)(a1, a2, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Double?>>, &lazy cache variable for type metadata for PropertyListTransform<Double?>, &lazy cache variable for type metadata for Double?, MEMORY[0x1E4FBB3D0], a3);
}

uint64_t SceneStorage<A>.init<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X2>, unint64_t *a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  type metadata accessor for TransformBox<PropertyListTransform<Data?>>(0, a3, a4, a5, a6);
  uint64_t result = swift_allocObject();
  *(void *)a7 = a1;
  *(void *)(a7 + 8) = a2;
  *(void *)(a7 + 24) = 0;
  *(void *)(a7 + 32) = 0;
  *(void *)(a7 + 16) = 0;
  *(unsigned char *)(a7 + 40) = 1;
  *(void *)(a7 + 48) = 0;
  *(void *)(a7 + 56) = result;
  return result;
}

double SceneStorage<A>.init<>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for TransformBox<PropertyListTransform<Data?>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<String?>>, &lazy cache variable for type metadata for PropertyListTransform<String?>, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0]);
  uint64_t v6 = swift_allocObject();
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = v6;
  return result;
}

{
  uint64_t v6;
  double result;

  type metadata accessor for TransformBox<PropertyListTransform<Data?>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Data?>>, &lazy cache variable for type metadata for PropertyListTransform<Data?>, (unint64_t *)&lazy cache variable for type metadata for Data?, MEMORY[0x1E4F277C0]);
  uint64_t v6 = swift_allocObject();
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  double result = -3.10503618e231;
  *(_OWORD *)(a3 + 40) = xmmword_188378C10;
  *(void *)(a3 + 56) = v6;
  return result;
}

uint64_t SceneStorage<A>.init<>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  type metadata accessor for SceneStorage<URL>(0, &lazy cache variable for type metadata for SceneStorage<URL?>, 255, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for SceneStorage);
  uint64_t v7 = v6;
  uint64_t v8 = (char *)a3 + *(int *)(v6 + 32);
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  a3[2] = 0;
  a3[3] = 0;
  *(void *)((char *)a3 + *(int *)(v7 + 36)) = 0;
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for TransformBox<PropertyListTransform<URL>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<URL?>>, type metadata accessor for PropertyListTransform<URL?>);
  uint64_t result = swift_allocObject();
  *(void *)((char *)a3 + *(int *)(v7 + 40)) = result;
  return result;
}

{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;

  type metadata accessor for SceneStorage<URL>(0, &lazy cache variable for type metadata for SceneStorage<Date?>, 255, (uint64_t (*)(uint64_t))type metadata accessor for Date?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for SceneStorage);
  uint64_t v7 = v6;
  uint64_t v8 = (char *)a3 + *(int *)(v6 + 32);
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  a3[2] = 0;
  a3[3] = 0;
  *(void *)((char *)a3 + *(int *)(v7 + 36)) = 0;
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for TransformBox<PropertyListTransform<URL>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Date?>>, type metadata accessor for PropertyListTransform<Date?>);
  uint64_t result = swift_allocObject();
  *(void *)((char *)a3 + *(int *)(v7 + 40)) = result;
  return result;
}

uint64_t SceneStorage.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Optional();
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(a3 - 8) + 56))((char *)&v14 - v10, 1, 1, a3, v9);
  type metadata accessor for RawRepresentableTransform();
  return SceneStorage.init<A>(key:transform:defaultValue:)(a1, a2, v12, (uint64_t)v11, v8, a4);
}

uint64_t SceneStorage<A>.init(wrappedValue:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  type metadata accessor for JSONCodableTransform();

  return SceneStorage.init<A>(key:transform:defaultValue:)(a2, a3, v10, a1, a4, a5);
}

uint64_t SceneStorage<A>.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  double v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)();
  type metadata accessor for JSONCodableTransform();
  return SceneStorage.init<A>(key:transform:defaultValue:)(a1, a2, v10, (uint64_t)v9, a3, a4);
}

void SceneStorageTransformBox.readValue(from:key:read:)()
{
}

void SceneStorageTransformBox.writeValue(_:to:key:)()
{
}

uint64_t SceneStorageTransformBox.deinit()
{
  return v0;
}

uint64_t SceneStorageTransformBox.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t PropertyListTransform.readValue(from:key:read:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X3>, _OWORD *a3@<X8>)
{
  *a2 = 1;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v8), (v6 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v5, (uint64_t)a3);
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
  }
  return outlined destroy of AnyHashable((uint64_t)v8);
}

uint64_t protocol witness for SceneStorageValueTransform.readValue(from:key:read:) in conformance PropertyListTransform<A>@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X3>, _OWORD *a3@<X8>)
{
  return PropertyListTransform.readValue(from:key:read:)(a1, a2, a3);
}

uint64_t protocol witness for SceneStorageValueTransform.writeValue(_:to:key:) in conformance PropertyListTransform<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized PropertyListTransform.writeValue(_:to:key:)(a1, a2, a3, a4);
}

uint64_t protocol witness for SceneStorageValueTransform.readValue(from:key:read:) in conformance RawRepresentableTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return RawRepresentableTransform.readValue(from:key:read:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for SceneStorageValueTransform.writeValue(_:to:key:) in conformance RawRepresentableTransform<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized RawRepresentableTransform.writeValue(_:to:key:)(a1, a2, a3, a4, *(void *)(a5 + 16));
}

uint64_t JSONCodableTransform.readValue(from:key:read:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v27 = a4;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v28 = a2;
  unint64_t v29 = a3;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v30), (v19 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v18, (uint64_t)&v31);
  }
  else
  {
    long long v31 = 0u;
    long long v32 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v30);
  if (*((void *)&v32 + 1))
  {
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      uint64_t v22 = v28;
      unint64_t v21 = v29;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      unint64_t v26 = v21;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      uint64_t v23 = *(void *)(a5 - 8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v17, 0, 1, a5);
      *uint64_t v27 = 1;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v17, v11);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v14, 1, a5) != 1)
      {
        *(void *)(a6 + 24) = a5;
        boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a6);
        (*(void (**)(uint64_t *, char *, uint64_t))(v23 + 32))(boxed_opaque_existential_1, v14, a5);
        swift_release();
        outlined consume of Data._Representation(v22, v26);
        return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v17, v11);
      }
      Swift::String v24 = *(void (**)(char *, uint64_t))(v12 + 8);
      v24(v17, v11);
      swift_release();
      outlined consume of Data._Representation(v22, v26);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v24)(v14, v11);
    }
  }
  else
  {
    uint64_t result = outlined destroy of Any?((uint64_t)&v31);
  }
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  return result;
}

uint64_t protocol witness for SceneStorageValueTransform.readValue(from:key:read:) in conformance JSONCodableTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return JSONCodableTransform.readValue(from:key:read:)(a1, a2, a3, a4, *(void *)(a5 + 16), a6);
}

uint64_t protocol witness for SceneStorageValueTransform.writeValue(_:to:key:) in conformance JSONCodableTransform<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized JSONCodableTransform.writeValue(_:to:key:)(a1, a2, a3, a4, *(void *)(a5 + 16));
}

uint64_t specialized JSONCodableTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v23[1] = a2;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v23 - v11;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v26);
  int v17 = swift_dynamicCast();
  unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (v17)
  {
    v18(v12, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, a5);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    uint64_t v20 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v22 = v21;
    *(void *)&long long v24 = a3;
    *((void *)&v24 + 1) = a4;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (v22 >> 60 == 15)
    {
      long long v24 = 0u;
      long long v25 = 0u;
    }
    else
    {
      *((void *)&v25 + 1) = MEMORY[0x1E4F277C0];
      *(void *)&long long v24 = v20;
      *((void *)&v24 + 1) = v22;
    }
    outlined copy of Data?(v20, v22);
    specialized Dictionary.subscript.setter((uint64_t)&v24, (uint64_t)v26);
    swift_release();
    outlined consume of Data?(v20, v22);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, a5);
  }
  else
  {
    v18(v12, 1, 1, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

uint64_t specialized PropertyListTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v6[0] = a3;
  v6[1] = a4;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  outlined init with copy of Any(a1, (uint64_t)v6);
  return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)v7);
}

uint64_t specialized static SceneStorage._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  type metadata accessor for PropertyListTransform<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  int v4 = *(_DWORD *)(a3 + 8);
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 40);
  unint64_t v9 = *(void *)a3;
  int v10 = v4;
  *(void *)&v11[0] = v5;
  *(_OWORD *)((char *)v11 + 8) = *(_OWORD *)(a3 + 24);
  *((void *)&v11[1] + 1) = v6;
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  LODWORD(v5) = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v10 = *(_DWORD *)(a3 + 8);
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  unsigned int v7 = _GraphInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v9 = __PAIR64__(v7, v5);
  LOBYTE(v10) = 0;
  memset(v11, 0, 32);
  _OWORD v11[2] = (unint64_t)AGCreateWeakAttribute();
  type metadata accessor for SceneStorage.Box();
  swift_getWitnessTable();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
  type metadata accessor for SceneStorage();
  static DynamicProperty.addTreeValue<A, B>(_:as:at:in:flags:)();
  return outlined release of SceneStorage<A>.Box((uint64_t)&v9);
}

uint64_t type metadata accessor for PropertyListTransform()
{
  return __swift_instantiateGenericMetadata();
}

{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TransformBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SceneStorage()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for PropertyListTransform<URL>(uint64_t a1)
{
}

void type metadata accessor for PropertyListTransform<Date>(uint64_t a1)
{
}

uint64_t type metadata accessor for RawRepresentableTransform()
{
  return __swift_instantiateGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<String?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for PropertyListTransform<Bool>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for TransformBox<PropertyListTransform<Data?>>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<String?>(255, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PropertyListTransform);
    unint64_t v6 = type metadata accessor for TransformBox();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for PropertyListTransform<URL?>(uint64_t a1)
{
}

void type metadata accessor for PropertyListTransform<Date?>(uint64_t a1)
{
}

uint64_t type metadata accessor for JSONCodableTransform()
{
  return __swift_instantiateGenericMetadata();
}

{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187AAB054@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SceneStorage();
  return SceneStorage.wrappedValue.getter(v2, a1);
}

uint64_t sub_187AAB090(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SceneStorage();
  return specialized SceneStorage.wrappedValue.setter(a1, v2);
}

uint64_t sub_187AAB0D0()
{
  return 8;
}

void *sub_187AAB0DC(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for SceneStorageValues.AnyEntry()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for SceneStorage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((v7 + ((v6 + 32) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    uint64_t v11 = a2[1];
    *uint64_t v3 = *a2;
    v3[1] = v11;
    uint64_t v12 = (void *)(((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v13;
    v12[1] = v13[1];
    uint64_t v14 = ((unint64_t)v12 + v6 + 16) & ~v6;
    uint64_t v15 = ((unint64_t)v13 + v6 + 16) & ~v6;
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16(v14, v15, v4);
    int v17 = (void *)((v7 + v14) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v18 = (void *)((v7 + v15) & 0xFFFFFFFFFFFFFFF8);
    *int v17 = *v18;
    *(void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v3;
}

uint64_t destroy for SceneStorage(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  swift_release();

  return swift_release();
}

void *initializeWithCopy for SceneStorage(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 16) & ~v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(v11, v12, v7);
  uint64_t v13 = *(void *)(v9 + 48) + 7;
  uint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SceneStorage(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 16) & ~v10;
  uint64_t v12 = ((unint64_t)v7 + v10 + 16) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 40) + 7;
  uint64_t v14 = (void *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = v13 + v12;
  unint64_t v16 = (v15 & 0xFFFFFFFFFFFFFFF8) + 15;
  *uint64_t v14 = *(void *)(v15 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v16 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *initializeWithTake for SceneStorage(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 16) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 16) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 32) + 7;
  uint64_t v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for SceneStorage(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = (void *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ((unint64_t)v7 + v11 + 16) & ~v11;
  uint64_t v13 = ((unint64_t)v8 + v11 + 16) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 24) + 7;
  uint64_t v15 = (void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  swift_release();
  *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

void storeEnumTagSinglePayload for SceneStorage(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v18 = (((unint64_t)(a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v9 + 16) & ~v9;
              char v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *(void *)a1 = a2 ^ 0x80000000;
              *((void *)a1 + 1) = 0;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) + 7) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) + 7) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 32) & ~v9) + 7) & 0xFFFFFFF8)
       + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187AAB944);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for SceneStorageTransformBox()
{
  return self;
}

uint64_t method lookup function for SceneStorageTransformBox(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SceneStorageTransformBox);
}

uint64_t sub_187AAB9A8()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<String?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<String?>, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<String?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void *type metadata accessor for SceneStorageDomainKey()
{
  return &unk_1ED436688;
}

uint64_t partial apply for closure #1 in RawRepresentableTransform.readValue(from:key:read:)(uint64_t a1)
{
  return closure #1 in RawRepresentableTransform.readValue(from:key:read:)(a1);
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed A.RawRepresentable.RawValue) -> (@out A?)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return thunk for @callee_guaranteed (@in_guaranteed A.RawRepresentable.RawValue) -> (@out A?)(a1, *(void (**)(uint64_t, double))(v2 + 32), *(void *)(v2 + 16), a2);
}

{
  uint64_t v2;

  return thunk for @callee_guaranteed (@in_guaranteed A.RawRepresentable.RawValue) -> (@out A?)(a1, *(void (**)(uint64_t, double))(v2 + 48), *(void *)(v2 + 16), a2);
}

void type metadata accessor for PropertyListTransform<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_187AABB4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.sceneStorageValues.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187AABB88()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.sceneStorageValues.setter(v0);

  return swift_release();
}

uint64_t type metadata accessor for SceneStorage.Box()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined release of SceneStorage<A>.Box(uint64_t a1)
{
  return a1;
}

uint64_t destroy for SceneStorage.Box()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for SceneStorage.Box(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SceneStorage.Box(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SceneStorage.Box(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SceneStorage.Box(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SceneStorage.Box(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

void *type metadata accessor for SceneStorageValuesKey()
{
  return &unk_1ED4366A8;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in SceneStorage<A>.Box()
{
  return &protocol witness table for SceneStorage<A>;
}

uint64_t partial apply for closure #1 in SceneStorage.Box.update(property:phase:)(uint64_t a1)
{
  return closure #1 in SceneStorage.Box.update(property:phase:)(a1, *(void *)(v1 + 24), *(void *)(v1 + 16));
}

uint64_t key path getter for EnvironmentValues.menuIndicatorVisibility : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.menuIndicatorVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.menuIndicatorVisibility : EnvironmentValues()
{
  return EnvironmentValues.menuIndicatorVisibility.setter();
}

uint64_t Menu<>.init(_:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  outlined copy of AppIntentExecutor?(*a1);
  outlined copy of AppIntentExecutor?(v5);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v3);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

uint64_t Menu.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v71 = a2;
  uint64_t v63 = *(void *)(a1 + 16);
  unint64_t v66 = lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label();
  uint64_t v61 = *(void *)(a1 + 32);
  char v90 = &type metadata for MenuStyleConfiguration.Label;
  uint64_t v91 = v63;
  uint64_t v92 = v66;
  uint64_t v93 = v61;
  type metadata accessor for StaticSourceWriter();
  uint64_t v52 = type metadata accessor for ModifiedContent();
  uint64_t v70 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v60 = (char *)&v50 - v5;
  uint64_t v6 = *(void *)(a1 + 24);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v58 = v7;
  unint64_t v8 = lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content();
  unint64_t v59 = v8;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>);
  uint64_t v97 = v9;
  uint64_t v98 = v10;
  uint64_t v55 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  char v90 = &type metadata for MenuStyleConfiguration.Content;
  uint64_t v91 = v7;
  uint64_t v92 = v8;
  uint64_t v93 = WitnessTable;
  type metadata accessor for StaticSourceWriter();
  uint64_t v57 = type metadata accessor for ModifiedContent();
  uint64_t v67 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v51 = (char *)&v50 - v11;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v68 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v56 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v64 = (uint64_t)&v50 - v15;
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier>();
  uint64_t v54 = type metadata accessor for ModifiedContent();
  uint64_t v69 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  int v62 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unint64_t v65 = (char *)&v50 - v18;
  uint64_t v19 = *(int *)(a1 + 60);
  uint64_t v20 = (uint64_t *)(v2 + *(int *)(a1 + 56));
  unint64_t v22 = (ValueMetadata *)*v20;
  uint64_t v21 = v20[1];
  uint64_t v23 = *(void *)(v3 + v19);
  uint64_t v24 = *(void *)(v3 + v19 + 8);
  outlined copy of AppIntentExecutor?(*v20);
  outlined copy of AppIntentExecutor?(v23);
  char v90 = v22;
  uint64_t v91 = v21;
  uint64_t v92 = v23;
  uint64_t v93 = v24;
  uint64_t v25 = v63;
  uint64_t v79 = v63;
  uint64_t v80 = v6;
  uint64_t v26 = v61;
  uint64_t v81 = v61;
  uint64_t v82 = v9;
  uint64_t v83 = v3;
  unint64_t v27 = lazy protocol witness table accessor for type ResolvedMenuStyle and conformance ResolvedMenuStyle();
  uint64_t v28 = v26;
  unint64_t v29 = v60;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for MenuStyleConfiguration.Label, (void (*)(double))partial apply for closure #1 in Menu.body.getter, (uint64_t)v78, (uint64_t)&type metadata for ResolvedMenuStyle, (uint64_t)&type metadata for MenuStyleConfiguration.Label, v25, v27);
  uint64_t v30 = v92;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v90);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v30);
  uint64_t v73 = v25;
  uint64_t v74 = v6;
  uint64_t v75 = v28;
  uint64_t v76 = v9;
  uint64_t v77 = v3;
  unint64_t v95 = v27;
  uint64_t v96 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v31 = v52;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = v51;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for MenuStyleConfiguration.Content, (void (*)(double))partial apply for closure #2 in Menu.body.getter, (uint64_t)v72, v31, (uint64_t)&type metadata for MenuStyleConfiguration.Content, v58, v32);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v29, v31);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = swift_getKeyPath();
  char v90 = 0;
  uint64_t v91 = KeyPath;
  LOBYTE(v92) = 0;
  uint64_t v93 = v35;
  char v94 = 0;
  uint64_t v88 = v32;
  char v89 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v36 = v57;
  uint64_t v37 = swift_getWitnessTable();
  lazy protocol witness table accessor for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle();
  uint64_t v38 = v56;
  View.menuStyle<A, B>(_:in:)((uint64_t)&v90, v39, v36, (uint64_t)&type metadata for PlatformItemListMenuStyle, MEMORY[0x1E4F3FCF0], v37, MEMORY[0x1E4F3FCE8], v56);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v33, v36);
  unint64_t v40 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v86 = v37;
  unint64_t v87 = v40;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v42 = v64;
  ModifiedContent<>.accessibility()(v12, v64);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
  v43(v38, v12);
  uint64_t v44 = v62;
  View.sharingPickerHost()(v12, v41);
  v43(v42, v12);
  unint64_t IsSharingPicker = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsSharingPickerHost>, SharingPickerHostModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v84 = v41;
  unint64_t v85 = IsSharingPicker;
  uint64_t v46 = v54;
  swift_getWitnessTable();
  uint64_t v47 = v65;
  static ViewBuilder.buildExpression<A>(_:)(v44);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v69 + 8);
  v48(v44, v46);
  static ViewBuilder.buildExpression<A>(_:)(v47);
  return ((uint64_t (*)(char *, uint64_t))v48)(v47, v46);
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
    type metadata accessor for MenuStyleModifier<PlatformItemListMenuStyle>(255, &lazy cache variable for type metadata for MenuStyleModifier<PlatformItemListMenuStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle, (uint64_t)&type metadata for PlatformItemListMenuStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for MenuStyleModifier);
    lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (void (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle;
  if (!lazy protocol witness table cache variable for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListMenuStyle and conformance PlatformItemListMenuStyle);
  }
  return result;
}

void type metadata accessor for MenuStyleModifier<PlatformItemListMenuStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t closure #1 in Menu.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t partial apply for closure #1 in Menu.body.getter()
{
  return partial apply for closure #1 in Menu.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in Menu.body.getter);
}

uint64_t closure #2 in Menu.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v19[1] = a5;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v19 - v14;
  void v19[4] = a1;
  v19[5] = a2;
  v19[6] = a3;
  v19[7] = a4;
  type metadata accessor for Menu();
  View.styleContext<A>(_:)();
  uint64_t v16 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>);
  v19[2] = a4;
  uint64_t v19[3] = v16;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

uint64_t partial apply for closure #2 in Menu.body.getter()
{
  return partial apply for closure #1 in Menu.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in Menu.body.getter);
}

uint64_t partial apply for closure #1 in Menu.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_187AACC4C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.menuIndicatorVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187AACC88()
{
  return EnvironmentValues.menuIndicatorVisibility.setter();
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, MenuStyleModifier<PlatformItemListMenuStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t Menu.init(content:label:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Menu();
  uint64_t v7 = (void *)(a3 + *(int *)(v6 + 56));
  *uint64_t v7 = 0;
  v7[1] = 0;
  uint64_t v8 = (void *)(a3 + *(int *)(v6 + 60));
  *uint64_t v8 = 0;
  v8[1] = 0;
  uint64_t v12 = a2(v6, v9, v10, v11);
  return a1(v12);
}

uint64_t Menu.init<>(_:content:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Menu();
  uint64_t v9 = (void *)(a4 + *(int *)(v8 + 56));
  *uint64_t v9 = 0;
  v9[1] = 0;
  uint64_t v10 = (void *)(a4 + *(int *)(v8 + 60));
  *uint64_t v10 = 0;
  v10[1] = 0;
  closure #1 in TextField<>.init<A>(_:value:format:prompt:)(a4);
  closure #1 in Menu.init<>(_:content:)(a1, a2, a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Menu.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Menu();
  uint64_t v13 = (void *)(a6 + *(int *)(v12 + 56));
  *uint64_t v13 = 0;
  v13[1] = 0;
  uint64_t v14 = (void *)(a6 + *(int *)(v12 + 60));
  *uint64_t v14 = 0;
  v14[1] = 0;
  closure #2 in Menu.init<A>(_:content:)(a1, a6);
  closure #1 in Menu.init<A>(_:content:)(a2, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
}

uint64_t Menu.init(content:label:primaryAction:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Menu();
  uint64_t v11 = (void *)(a5 + *(int *)(v10 + 56));
  uint64_t v12 = (void *)(a5 + *(int *)(v10 + 60));
  *uint64_t v12 = 0;
  v12[1] = 0;
  *uint64_t v11 = a3;
  v11[1] = a4;
  uint64_t v13 = swift_retain();
  uint64_t v14 = a2(v13);
  a1(v14);
  return swift_release();
}

uint64_t Menu.init<>(_:content:primaryAction:)@<X0>(uint64_t a1@<X6>, uint64_t a2@<X7>, uint64_t a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  swift_retain();
  Menu.init(content:label:primaryAction:)((void (*)(uint64_t))partial apply for closure #1 in Menu.init<>(_:content:primaryAction:), (uint64_t (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)partial apply for closure #3 in Menu.init<A>(_:content:primaryAction:), v6, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_187AAD18C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Menu.init<A>(_:content:primaryAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X6>, uint64_t a5@<X8>)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  swift_retain();
  Menu.init(content:label:primaryAction:)((void (*)(uint64_t))partial apply for closure #1 in Menu.init<A>(_:content:primaryAction:), (uint64_t (*)(uint64_t))partial apply for closure #2 in Menu.init<A>(_:content:primaryAction:), (uint64_t)partial apply for closure #3 in Menu.init<A>(_:content:primaryAction:), v10, a5);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
}

uint64_t partial apply for closure #1 in Menu.init<A>(_:content:primaryAction:)()
{
  return closure #1 in Menu.init<A>(_:content:)(v0[6], v0[7], v0[2]);
}

uint64_t closure #2 in Menu.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #2 in Menu.init<A>(_:content:primaryAction:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in Menu.init<A>(_:content:)(*(void *)(v1 + 48), a1);
}

uint64_t Menu<>.init(_:image:content:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  type metadata accessor for Label<Text, Image>();
  lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>);
  uint64_t v13 = type metadata accessor for Menu();
  uint64_t v14 = (void *)(a7 + *(int *)(v13 + 56));
  *uint64_t v14 = 0;
  v14[1] = 0;
  uint64_t v15 = (void *)(a7 + *(int *)(v13 + 60));
  *uint64_t v15 = 0;
  v15[1] = 0;
  closure #2 in Menu<>.init(_:image:content:)(a1, a2, a3, a7);
  closure #1 in Menu.init<>(_:content:)(a4, a5, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v16 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a3, v16);
}

uint64_t Menu<>.init<A>(_:image:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  type metadata accessor for Label<Text, Image>();
  lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>);
  uint64_t v14 = type metadata accessor for Menu();
  uint64_t v15 = (void *)(a7 + *(int *)(v14 + 56));
  *uint64_t v15 = 0;
  v15[1] = 0;
  uint64_t v16 = (void *)(a7 + *(int *)(v14 + 60));
  *uint64_t v16 = 0;
  v16[1] = 0;
  closure #2 in Menu<>.init<A>(_:image:content:)(a1, a2, a6, a7);
  closure #1 in Menu.init<A>(_:content:)(a3, a4, a5);
  uint64_t v17 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a2, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
}

uint64_t closure #1 in Menu.init<A>(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - v9;
  v11(v8);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, a3);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, a3);
}

__n128 closure #2 in Menu<>.init<A>(_:image:content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ImageResource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, a1, a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v15, (uint64_t)v11, a3, (uint64_t)&v19);
  char v17 = v20;
  __n128 result = v21;
  *(_OWORD *)a4 = v19;
  *(unsigned char *)(a4 + 16) = v17;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

uint64_t Menu<>.init(_:image:content:primaryAction:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X7>, uint64_t a3@<X8>, uint64_t a4)
{
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a4;
  type metadata accessor for Label<Text, Image>();
  lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>((unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>, (void (*)(uint64_t))type metadata accessor for Label<Text, Image>);
  swift_retain();
  Menu.init(content:label:primaryAction:)((void (*)(uint64_t))partial apply for closure #1 in Menu<>.init(_:image:content:primaryAction:), (uint64_t (*)(uint64_t))partial apply for closure #2 in Menu<>.init(_:image:content:primaryAction:), (uint64_t)partial apply for closure #1 in UIKitSearchScopeCoordinating<>.onChange(selectedScope:), v7, a3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v8 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
}

uint64_t closure #1 in Menu.init<>(_:content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - v9;
  v11(v8);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, a3);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, a3);
}

uint64_t partial apply for closure #1 in Menu<>.init(_:image:content:primaryAction:)()
{
  return closure #1 in Menu.init<>(_:content:)(v0[4], v0[5], v0[2]);
}

uint64_t closure #2 in Menu<>.init(_:image:content:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  LODWORD(v25) = a2;
  uint64_t v24 = a1;
  uint64_t v6 = type metadata accessor for ImageResource();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  double v13 = (char *)&v24 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v14((char *)&v24 - v12, a3, v6, v11);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v24 = v16;
  uint64_t v25 = v15;
  uint64_t v18 = v17;
  char v26 = v19 & 1;
  ((void (*)(char *, char *, uint64_t))v14)(v9, v13, v6);
  uint64_t v20 = Image.init(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  char v22 = v26;
  uint64_t v23 = v24;
  *(void *)a4 = v25;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = v22;
  *(void *)(a4 + 24) = v18;
  *(void *)(a4 + 32) = v20;
  return result;
}

uint64_t partial apply for closure #2 in Menu<>.init(_:image:content:primaryAction:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in Menu<>.init(_:image:content:)(*(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 48), a1);
}

uint64_t Menu.init(onPresentationChanged:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Menu();
  double v11 = (void *)(a5 + *(int *)(v10 + 56));
  *double v11 = 0;
  v11[1] = 0;
  uint64_t v12 = (void *)(a5 + *(int *)(v10 + 60));
  uint64_t v16 = a4(v10, v13, v14, v15);
  uint64_t result = a3(v16);
  *uint64_t v12 = a1;
  v12[1] = a2;
  return result;
}

uint64_t Menu.init(onPresentationChanged:content:label:primaryAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t (*a4)(void)@<X4>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v12 = type metadata accessor for Menu();
  uint64_t v13 = (void *)(a7 + *(int *)(v12 + 56));
  uint64_t v14 = (void *)(a7 + *(int *)(v12 + 60));
  uint64_t v15 = a4();
  uint64_t result = a3(v15);
  *uint64_t v13 = a5;
  v13[1] = a6;
  *uint64_t v14 = a1;
  v14[1] = a2;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in Menu<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for Menu(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 7;
  unint64_t v12 = ((((v11 + ((v6 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    unint64_t v19 = (v11 + (((unint64_t)v4 + v10) & v17)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v11 + v18) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v20 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
    }
    else
    {
      uint64_t v21 = *(void *)(v20 + 8);
      *(void *)unint64_t v19 = *(void *)v20;
      *(void *)(v19 + 8) = v21;
      swift_retain();
    }
    unint64_t v22 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v23 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
      return v4;
    }
    uint64_t v24 = *(void *)(v23 + 8);
    *(void *)unint64_t v22 = *(void *)v23;
    *(void *)(v22 + 8) = v24;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for Menu(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v10 = (void *)((*(void *)(v7 + 56) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v10 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  if (*(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Menu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v16 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
  }
  else
  {
    uint64_t v17 = *(void *)(v16 + 8);
    *(void *)unint64_t v15 = *(void *)v16;
    *(void *)(v15 + 8) = v17;
    swift_retain();
  }
  unint64_t v18 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v19 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v20 = *(void *)(v19 + 8);
    *(void *)unint64_t v18 = *(void *)v19;
    *(void *)(v18 + 8) = v20;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for Menu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40) + 7;
  unint64_t v15 = (void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (unint64_t *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = *v16;
  if (*v15 < 0xFFFFFFFFuLL)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      unint64_t v19 = v16[1];
      *unint64_t v15 = v17;
      v15[1] = v19;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v17 >= 0xFFFFFFFF)
    {
      unint64_t v18 = v16[1];
      *unint64_t v15 = v17;
      v15[1] = v18;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
LABEL_8:
  uint64_t v20 = (void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (unint64_t *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = *v21;
  if (*v20 < 0xFFFFFFFFuLL)
  {
    if (v22 >= 0xFFFFFFFF)
    {
      unint64_t v24 = v21[1];
      *uint64_t v20 = v22;
      v20[1] = v24;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    return a1;
  }
  if (v22 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  unint64_t v23 = v21[1];
  *uint64_t v20 = v22;
  v20[1] = v23;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Menu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 32) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v16 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
  }
  else
  {
    uint64_t v17 = *(void *)(v16 + 8);
    *(void *)unint64_t v15 = *(void *)v16;
    *(void *)(v15 + 8) = v17;
  }
  unint64_t v18 = (v15 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (uint64_t *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = *v19;
  if ((unint64_t)*v19 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v21 = v19[1];
    *(void *)unint64_t v18 = v20;
    *(void *)(v18 + 8) = v21;
  }
  return a1;
}

uint64_t assignWithTake for Menu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 24) + 7;
  unint64_t v15 = (void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (unint64_t *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v17 = *v16;
  if (*v15 < 0xFFFFFFFFuLL)
  {
    if (v17 >= 0xFFFFFFFF)
    {
      unint64_t v19 = v16[1];
      *unint64_t v15 = v17;
      v15[1] = v19;
      goto LABEL_8;
    }
  }
  else
  {
    if (v17 >= 0xFFFFFFFF)
    {
      unint64_t v18 = v16[1];
      *unint64_t v15 = v17;
      v15[1] = v18;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
LABEL_8:
  uint64_t v20 = (void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (unint64_t *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = *v21;
  if (*v20 < 0xFFFFFFFFuLL)
  {
    if (v22 >= 0xFFFFFFFF)
    {
      unint64_t v24 = v21[1];
      *uint64_t v20 = v22;
      v20[1] = v24;
      return a1;
    }
LABEL_14:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    return a1;
  }
  if (v22 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  unint64_t v23 = v21[1];
  *uint64_t v20 = v22;
  v20[1] = v23;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Menu(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  uint64_t v12 = *(void *)(v7 + 64) + 7;
  if (v10 < a2)
  {
    unint64_t v13 = ((((v12 + (v11 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v14 = a2 - v10;
    uint64_t v15 = v13 & 0xFFFFFFF8;
    if ((v13 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v14 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v13);
        if (!v19) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v13);
        if (v19) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187AAEAC0);
      case 4:
        int v19 = *(int *)((char *)a1 + v13);
        if (!v19) {
          break;
        }
LABEL_24:
        int v21 = v19 - 1;
        if (v15)
        {
          int v21 = 0;
          int v22 = *a1;
        }
        else
        {
          int v22 = 0;
        }
        return v10 + (v22 | v21) + 1;
      default:
        break;
    }
  }
  if (v6 == v10) {
    return (*(uint64_t (**)(int *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v23 = ((unint64_t)a1 + v11) & ~v9;
  if (v8 == v10) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v23);
  }
  unint64_t v24 = *(void *)((v12 + v23) & 0xFFFFFFFFFFFFFFF8);
  if (v24 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  if ((v24 + 1) >= 2) {
    return v24;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for Menu(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v7 = *(void *)(a4 + 24);
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(v7 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v12 = 2147483646;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  uint64_t v14 = *(void *)(*(void *)(v7 - 8) + 64) + 7;
  unint64_t v15 = ((((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v12 >= a3)
  {
    int v19 = 0;
    int v20 = a2 - v12;
    if (a2 <= v12)
    {
LABEL_19:
      switch(v19)
      {
        case 1:
          a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 2:
          *(_WORD *)&a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_32;
        case 3:
          goto LABEL_48;
        case 4:
          *(_DWORD *)&a1[v15] = 0;
          goto LABEL_31;
        default:
LABEL_31:
          if (a2)
          {
LABEL_32:
            if (v8 == v12)
            {
              unint64_t v23 = *(void (**)(void))(v6 + 56);
              v23();
            }
            else
            {
              unint64_t v24 = (unint64_t)&a1[v13] & ~v11;
              if (v10 == v12)
              {
                uint64_t v25 = *(void (**)(unint64_t))(v9 + 56);
                v25(v24);
              }
              else
              {
                char v26 = (void *)((v14 + v24) & 0xFFFFFFFFFFFFFFF8);
                if (a2 > 0x7FFFFFFE)
                {
                  *char v26 = 0;
                  v26[1] = 0;
                  *(_DWORD *)char v26 = a2 - 0x7FFFFFFF;
                }
                else
                {
                  *char v26 = a2;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v16 = a3 - v12;
    if (((((v14 + (v13 & ~v11)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v17 = v16 + 1;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    int v20 = a2 - v12;
    if (a2 <= v12) {
      goto LABEL_19;
    }
  }
  if (((((v14 + (v13 & ~v11)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v21 = v20;
  }
  else {
    int v21 = 1;
  }
  if (((((v14 + (v13 & ~v11)) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v22 = ~v12 + a2;
    bzero(a1, ((((v14 + (v13 & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v22;
  }
  switch(v19)
  {
    case 1:
      a1[v15] = v21;
      break;
    case 2:
      *(_WORD *)&a1[v15] = v21;
      break;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x187AAED84);
    case 4:
      *(_DWORD *)&a1[v15] = v21;
      break;
    default:
      return;
  }
}

uint64_t sub_187AAEDAC()
{
  return swift_getWitnessTable();
}

void __swiftcall TexturedButtonMenuStyle.init()()
{
}

void TexturedButtonMenuStyle.makeBody(configuration:)()
{
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in TexturedButtonMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for TexturedButtonMenuStyle()
{
  return &type metadata for TexturedButtonMenuStyle;
}

uint64_t sub_187AAEFD8()
{
  return MEMORY[0x1E4F417F0];
}

uint64_t sub_187AAEFE4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t TabContent._dropDestination<A>(for:isTargeted:action:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  unsigned int v17 = (void *)swift_allocObject();
  v17[2] = a6;
  uint64_t v17[3] = a7;
  void v17[4] = a9;
  v17[5] = a10;
  void v17[6] = a4;
  v17[7] = a5;
  swift_retain();
  v20[0] = static Transferable.readableContentTypes.getter();
  v20[1] = a1;
  void v20[2] = a2;
  char v21 = a3;
  unsigned int v22 = partial apply for closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:);
  unint64_t v23 = v17;
  TabContent.modifier<A>(_:)((uint64_t)v20, a6, (uint64_t)&type metadata for DropDestinationModifier, a8);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.springLoadingBehavior(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a1;
  return TabContent.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&unk_1ED436FD0, a3);
}

uint64_t TabContent.dropDestination<A>(for:isTargeted:action:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  unsigned int v17 = (void *)swift_allocObject();
  v17[2] = a6;
  uint64_t v17[3] = a7;
  void v17[4] = a9;
  v17[5] = a10;
  void v17[6] = a4;
  v17[7] = a5;
  swift_retain();
  TabContent._dropDestination<A>(for:isTargeted:action:)(a1, a2, a3 & 1, (uint64_t)partial apply for closure #1 in TabContent.dropDestination<A>(for:action:), (uint64_t)v17, a6, a7, a8, a9, a10);

  return swift_release();
}

uint64_t partial apply for closure #1 in TabContent.dropDestination<A>(for:action:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t))(v3 + 48))(a3);
}

uint64_t TabContent.draggable<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a3;
  v14[3] = a4;
  void v14[4] = a5;
  v14[5] = a6;
  v14[6] = a1;
  v14[7] = a2;
  v16[0] = partial apply for closure #1 in TabContent.draggable<A>(_:);
  v16[1] = v14;
  TabContent.modifier<A>(_:)((uint64_t)v16, a3, (uint64_t)&unk_1ED4806A8, a7);
  swift_retain();
  return swift_release();
}

uint64_t closure #1 in TabContent.draggable<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSItemProvider);
  unsigned int v12 = (void *)swift_allocObject();
  v12[2] = a3;
  uint64_t v12[3] = a4;
  v12[4] = a5;
  uint64_t v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  swift_retain();
  return NSItemProvider.init<A>(transferable:)();
}

uint64_t partial apply for closure #1 in TabContent.draggable<A>(_:)()
{
  return closure #1 in TabContent.draggable<A>(_:)(v0[6], v0[7], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_187AAF3E4(uint64_t a1)
{
  return get_witness_table_7SwiftUI10TabContentRz16CoreTransferable0F0Rd__r__lAA08ModifiedcD0VyxAA23DropDestinationModifierVGAaBHPxAaBHD1__AhA04ViewJ0HPyHCHCTm(a1, (uint64_t)&type metadata for DropDestinationModifier, (void (*)(void))lazy protocol witness table accessor for type DropDestinationModifier and conformance DropDestinationModifier);
}

unint64_t lazy protocol witness table accessor for type DropDestinationModifier and conformance DropDestinationModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DropDestinationModifier and conformance DropDestinationModifier;
  if (!lazy protocol witness table cache variable for type DropDestinationModifier and conformance DropDestinationModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DropDestinationModifier and conformance DropDestinationModifier);
  }
  return result;
}

uint64_t sub_187AAF458()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type SpringLoadingModifier and conformance SpringLoadingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type SpringLoadingModifier and conformance SpringLoadingModifier;
  if (!lazy protocol witness table cache variable for type SpringLoadingModifier and conformance SpringLoadingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingModifier and conformance SpringLoadingModifier);
  }
  return result;
}

uint64_t sub_187AAF510(uint64_t a1)
{
  return get_witness_table_7SwiftUI10TabContentRz16CoreTransferable0F0Rd__r__lAA08ModifiedcD0VyxAA23DropDestinationModifierVGAaBHPxAaBHD1__AhA04ViewJ0HPyHCHCTm(a1, (uint64_t)&unk_1ED4806A8, (void (*)(void))lazy protocol witness table accessor for type DraggableTabModifier and conformance DraggableTabModifier);
}

uint64_t get_witness_table_7SwiftUI10TabContentRz16CoreTransferable0F0Rd__r__lAA08ModifiedcD0VyxAA23DropDestinationModifierVGAaBHPxAaBHD1__AhA04ViewJ0HPyHCHCTm(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for DropDestinationModifier()
{
  return &type metadata for DropDestinationModifier;
}

void *type metadata accessor for DraggableTabModifier()
{
  return &unk_1ED4806A8;
}

unsigned char *storeEnumTagSinglePayload for SpringLoadingModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187AAF6A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for SpringLoadingModifier()
{
  return &unk_1ED436FD0;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DraggableTabModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void closure #1 in closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v33[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v33[-1] - v13;
  type metadata accessor for Error();
  uint64_t v15 = type metadata accessor for Result();
  double v16 = MEMORY[0x1F4188790](v15);
  int v18 = (void **)((char *)&v33[-1] - v17);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)&v33[-1] - v17, a1, v15, v16);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    int v20 = *v18;
    os_log_type_t v21 = static os_log_type_t.fault.getter();
    unsigned int v22 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v22, v21))
    {
      id v23 = v20;
      id v24 = v20;
      uint64_t v25 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v33[0] = v26;
      *(_DWORD *)uint64_t v25 = 136315394;
      uint64_t v27 = _typeName(_:qualified:)();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2080;
      swift_getErrorValue();
      uint64_t v29 = Error.localizedDescription.getter();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1872C6000, v22, v21, "Error loading %s: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v26, -1, -1);
      MEMORY[0x18C119C60](v25, -1, -1);
    }
    else
    {
    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v9 + 32))(v14, v18, a5);
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, a5);
    uint64_t v34 = a3;
    swift_retain();
    type metadata accessor for Array();
    type metadata accessor for AtomicBox();
    uint64_t v31 = (void (*)(uint64_t *, void))AtomicBox.wrappedValue.modify();
    Array.append(_:)();
    v31(v33, 0);
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, a5);
  }
  dispatch_group_leave(a2);
}

uint64_t closure #2 in closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(void (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_bridgeObjectRelease();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SpringLoadingModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance SpringLoadingModifier@<X0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)a1 = v3;
  *(void *)(a1 + 8) = result;
  *(unsigned char *)(a1 + 16) = v3;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DropDestinationModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187AAFBF0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(a1, a2, a3, v3[6], v3[7], v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_187AAFC60()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)()
{
  return closure #2 in closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(*(void (**)(uint64_t, uint64_t))(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72));
}

void partial apply for closure #1 in closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(uint64_t a1)
{
  closure #1 in closure #1 in TabContent._dropDestination<A>(for:isTargeted:action:)(a1, *(NSObject **)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

ValueMetadata *type metadata accessor for IdentifiedDropOntoTraitKey()
{
  return &type metadata for IdentifiedDropOntoTraitKey;
}

ValueMetadata *type metadata accessor for SpringLoadingTraitKey()
{
  return &type metadata for SpringLoadingTraitKey;
}

uint64_t destroy for DropDestinationModifier(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16))
  {
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for DropDestinationModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  unsigned int v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    *unsigned int v4 = *(_OWORD *)(a2 + 8);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_retain();
  return a1;
}

uint64_t assignWithTake for DropDestinationModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 16)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if (!v4)
  {
    outlined destroy of Binding<Bool>(a1 + 8);
LABEL_5:
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    goto LABEL_6;
  }
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = v4;
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
LABEL_6:
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for IdentifiedDropConfiguration()
{
  return &type metadata for IdentifiedDropConfiguration;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<DraggableTabModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<DropDestinationModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<DropDestinationModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DropDestinationModifier and conformance DropDestinationModifier, (uint64_t)&type metadata for DropDestinationModifier);
    lazy protocol witness table accessor for type _TraitWritingModifier<IdentifiedDropOntoTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DropDestinationModifier>, _TraitWritingModifier<IdentifiedDropOntoTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IdentifiedDropOntoTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<IdentifiedDropOntoTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IdentifiedDropOntoTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IdentifiedDropOntoTraitKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IdentifiedDropOntoTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>();
    type metadata accessor for _ViewModifier_Content<DropDestinationModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior, (uint64_t)&type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>, ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>();
    _s7SwiftUI7BindingVySbGMaTm_4(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SpringLoadingBehavior>, (uint64_t)&type metadata for SpringLoadingBehavior, MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>)
  {
    type metadata accessor for _ViewModifier_Content<DropDestinationModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<SpringLoadingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpringLoadingModifier and conformance SpringLoadingModifier, (uint64_t)&unk_1ED436FD0, MEMORY[0x1E4F408E0]);
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SpringLoadingTraitKey>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>, _EnvironmentKeyWritingModifier<SpringLoadingBehavior>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<DraggableTabModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<SpringLoadingModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<SpringLoadingModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SpringLoadingModifier and conformance SpringLoadingModifier, (uint64_t)&unk_1ED436FD0);
    lazy protocol witness table accessor for type _TraitWritingModifier<SpringLoadingTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SpringLoadingModifier>, _TraitWritingModifier<SpringLoadingTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<SpringLoadingTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<SpringLoadingTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<SpringLoadingTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SpringLoadingTraitKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<SpringLoadingTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<DraggableTabModifier>, _TraitWritingModifier<ItemProviderTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DraggableTabModifier>, _TraitWritingModifier<ItemProviderTraitKey>>)
  {
    type metadata accessor for _ViewModifier_Content<DropDestinationModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DraggableTabModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type DraggableTabModifier and conformance DraggableTabModifier, (uint64_t)&unk_1ED4806A8, MEMORY[0x1E4F408E0]);
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ItemProviderTraitKey>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DraggableTabModifier>, _TraitWritingModifier<ItemProviderTraitKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ItemProviderTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<ItemProviderTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ItemProviderTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ItemProviderTraitKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ItemProviderTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ShouldUseListSectionInlinePickerStyle and conformance ShouldUseListSectionInlinePickerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ShouldUseListSectionInlinePickerStyle and conformance ShouldUseListSectionInlinePickerStyle;
  if (!lazy protocol witness table cache variable for type ShouldUseListSectionInlinePickerStyle and conformance ShouldUseListSectionInlinePickerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldUseListSectionInlinePickerStyle and conformance ShouldUseListSectionInlinePickerStyle);
  }
  return result;
}

void type metadata accessor for PickerStyleWriter<SectionPickerStyle>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for PickerStyleWriter();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t type metadata accessor for InlinePickerStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static InlinePickerStyle._makeViewList<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

uint64_t InlinePickerStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _PickerValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance InlinePickerStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ResolvedPicker();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<WheelPickerStyle>);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  unint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

void *type metadata accessor for ShouldUseListSectionInlinePickerStyle()
{
  return &unk_1ED4633F0;
}

uint64_t base witness table accessor for _AttributeBody in InlinePickerStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized static ShouldUseListSectionInlinePickerStyle.evaluate(inputs:)()
{
  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0
    || (static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
  {
    return static SemanticFeature.isEnabled.getter() & 1;
  }
  else
  {
    return 0;
  }
}

ValueMetadata *type metadata accessor for _WidgetOutputs()
{
  return &type metadata for _WidgetOutputs;
}

void _HoverTableRowModifier.body.getter()
{
}

void TableRowContent.onHover(perform:)()
{
}

{
  TableRowContent.onHover(perform:)();
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in _HoverTableRowModifier()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for _HoverTableRowModifier()
{
  return &type metadata for _HoverTableRowModifier;
}

uint64_t sub_187AB0BF8()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _HoverTableRowModifier and conformance _HoverTableRowModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type _HoverTableRowModifier and conformance _HoverTableRowModifier;
  if (!lazy protocol witness table cache variable for type _HoverTableRowModifier and conformance _HoverTableRowModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _HoverTableRowModifier and conformance _HoverTableRowModifier);
  }
  return result;
}

_UNKNOWN **sub_187AB0CB0()
{
  return &protocol witness table for _TraitWritingTableRowModifier<A>;
}

ValueMetadata *type metadata accessor for TableRowHoverActionTraitKey()
{
  return &type metadata for TableRowHoverActionTraitKey;
}

double EnvironmentValues.dialogSuppression.getter@<D0>(uint64_t a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double result = *(double *)&v4;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  return result;
}

uint64_t View.dialogSuppressionToggle(_:isSuppressed:)()
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v0 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v2 = v1;
  char v4 = v3 & 1;
  View.dialogSuppressionToggle(_:isSuppressed:)(v0, v1, v3 & 1);
  outlined consume of Text.Storage(v0, v2, v4);

  return swift_bridgeObjectRelease();
}

uint64_t View.dialogSuppressionToggle(_:isSuppressed:)(uint64_t a1, uint64_t a2, char a3)
{
  char v5 = a3 & 1;
  Text.assertUnstyled(_:options:)();
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(a1, a2, v5);
  swift_bridgeObjectRetain();
  View.environment<A>(_:_:)();
  swift_release();
  outlined consume of Text.Storage(a1, a2, v5);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t View.dialogSuppression<A>(_:isSuppressed:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  uint64_t v4 = Text.init<A>(_:)();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  View.dialogSuppressionToggle(_:isSuppressed:)(v4, v5, v7 & 1);
  outlined consume of Text.Storage(v4, v6, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_187AB11C4@<X0>(uint64_t a1@<X8>)
{
  EnvironmentValues.dialogSuppression.getter((uint64_t)v3);
  return outlined init with take of DialogSuppressionConfiguration?((uint64_t)v3, a1);
}

uint64_t key path setter for EnvironmentValues.dialogSuppression : EnvironmentValues(uint64_t a1)
{
  outlined init with take of DialogSuppressionConfiguration?(a1, (uint64_t)v2);
  outlined retain of DialogSuppressionConfiguration?((uint64_t)v2, (void (*)(void, void, void, void, void, void, void))outlined copy of DialogSuppressionConfiguration?);
  specialized EnvironmentValues.subscript.setter(v2);
  return outlined retain of DialogSuppressionConfiguration?((uint64_t)v2, (void (*)(void, void, void, void, void, void, void))outlined consume of DialogSuppressionConfiguration?);
}

uint64_t View.dialogSuppressionToggle(isSuppressed:)()
{
  return swift_release();
}

void Scene.dialogSuppressionToggle(_:isSuppressed:)()
{
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void Scene.dialogSuppressionToggle<A>(_:isSuppressed:)()
{
}

void Scene.dialogSuppressionToggle(isSuppressed:)()
{
}

uint64_t sub_187AB1384()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?>)
  {
    type metadata accessor for DialogSuppressionConfiguration?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?>);
    }
  }
}

void type metadata accessor for DialogSuppressionConfiguration?()
{
  if (!lazy cache variable for type metadata for DialogSuppressionConfiguration?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DialogSuppressionConfiguration?);
    }
  }
}

uint64_t sub_187AB14D0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187AB1570(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_187AB1578(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t destroy for DialogSuppressionConfiguration(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for DialogSuppressionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    char v7 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v6, v7);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DialogSuppressionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)a2;
      uint64_t v6 = *(void *)(a2 + 8);
      char v7 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v6, v7);
      uint64_t v8 = *(void *)a1;
      uint64_t v9 = *(void *)(a1 + 8);
      char v10 = *(unsigned char *)(a1 + 16);
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v6;
      *(unsigned char *)(a1 + 16) = v7;
      outlined consume of Text.Storage(v8, v9, v10);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1);
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v14;
    }
  }
  else if (v4)
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    char v13 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v12, v13);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v13;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for DialogSuppressionConfiguration(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 24)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 24);
  if (!v4)
  {
    outlined destroy of Text(a1);
LABEL_5:
    long long v9 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v9;
    goto LABEL_6;
  }
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Text.Storage(v6, v7, v8);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
LABEL_6:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for DialogSuppressionConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DialogSuppressionConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<DialogSuppressionConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DialogSuppressionConfiguration.Key()
{
  return &type metadata for DialogSuppressionConfiguration.Key;
}

void static DigitalCrownRotationalSensitivity.== infix(_:_:)()
{
}

void DigitalCrownRotationalSensitivity.hash(into:)()
{
}

void DigitalCrownRotationalSensitivity.hashValue.getter()
{
}

void View.digitalCrownRotation<A>(_:from:through:by:sensitivity:isContinuous:isHapticFeedbackEnabled:)()
{
}

void View._digitalCrownRotation<A>(_:configuration:onChange:onIdle:)()
{
}

void View.digitalCrownRotation<A>(_:)()
{
}

void View._digitalCrownRotation<A>(_:configuration:)()
{
}

void DigitalCrownEvent.offset.getter()
{
}

void DigitalCrownEvent.offset.setter()
{
}

void DigitalCrownEvent.offset.modify()
{
}

void DigitalCrownEvent.velocity.getter()
{
}

void View._digitalCrownRotation<A>(detent:from:through:by:sensitivity:isContinuous:isHapticFeedbackEnabled:isRubberBandingEnabled:onChange:onIdle:)()
{
}

void View._digitalCrownRotation<A>(binding:from:through:by:sensitivity:isContinuous:isHapticFeedbackEnabled:isRubberBandingEnabled:isBindingConstrainedToDetent:onChange:onIdle:)()
{
}

void View.digitalCrownRotation<A>(detent:from:through:by:sensitivity:isContinuous:isHapticFeedbackEnabled:onChange:onIdle:)()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void View.digitalCrownRotation<A>(_:from:through:sensitivity:isContinuous:isHapticFeedbackEnabled:onChange:onIdle:)()
{
}

void View.digitalCrownRotation<A>(_:onChange:onIdle:)()
{
}

unint64_t lazy protocol witness table accessor for type DigitalCrownRotationalSensitivity and conformance DigitalCrownRotationalSensitivity()
{
  unint64_t result = lazy protocol witness table cache variable for type DigitalCrownRotationalSensitivity and conformance DigitalCrownRotationalSensitivity;
  if (!lazy protocol witness table cache variable for type DigitalCrownRotationalSensitivity and conformance DigitalCrownRotationalSensitivity)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DigitalCrownRotationalSensitivity and conformance DigitalCrownRotationalSensitivity);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DigitalCrownRotationalSensitivity(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187AB1C20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DigitalCrownRotationalSensitivity()
{
  return &type metadata for DigitalCrownRotationalSensitivity;
}

ValueMetadata *type metadata accessor for DigitalCrownEvent()
{
  return &type metadata for DigitalCrownEvent;
}

uint64_t get_witness_table_7SwiftUI4ViewRzSBRd__SB6StrideRpd__r__lAA15ModifiedContentVyxAA21_DigitalCrownModifierVGAaBHPxAaBHD1__AhA0cI0HPyHCHCTm()
{
  return swift_getWitnessTable();
}

void DigitalCrownEvent.velocity.setter()
{
}

uint64_t View.fileImporter(isPresented:allowedContentTypes:onCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a5;
  *(void *)(v18 + 24) = a6;
  swift_retain();
  View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(a1, a2, a3, a4, 0, (uint64_t)partial apply for closure #1 in View.fileImporter(isPresented:allowedContentTypes:onCompletion:), v18, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, a9, 0, a7, a8);

  return swift_release();
}

uint64_t closure #1 in View.fileImporter(isPresented:allowedContentTypes:onCompletion:)(void *a1, char a2, void (*a3)(void *))
{
  _s10Foundation9PredicateVyAA3URLV_QPGSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)&v18 - v7;
  type metadata accessor for Result<URL, Error>();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (uint64_t *)((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    *uint64_t v11 = a1;
    swift_storeEnumTagMultiPayload();
    uint64_t v17 = a1;
    goto LABEL_6;
  }
  uint64_t v12 = a1[2];
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14;
  if (v12)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v8, (unint64_t)a1+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v8, 0, 1, v13);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v13);
    if (result != 1)
    {
      (*(void (**)(void *, char *, uint64_t))(v15 + 32))(v11, v8, v13);
      swift_storeEnumTagMultiPayload();
LABEL_6:
      a3(v11);
      return outlined destroy of FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Result<URL, Error>);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v8, 1, 1, v13);
  }
  __break(1u);
  return result;
}

uint64_t sub_187AB2034()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.fileImporter(isPresented:allowedContentTypes:onCompletion:)(void *a1, char a2)
{
  return closure #1 in View.fileImporter(isPresented:allowedContentTypes:onCompletion:)(a1, a2 & 1, *(void (**)(void *))(v2 + 16));
}

uint64_t View.fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t View.fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  return View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, a9, 0, a8, a10);
}

uint64_t View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v60 = a6;
  uint64_t v61 = a8;
  uint64_t v64 = a7;
  int v62 = a5;
  uint64_t v67 = a9;
  uint64_t v68 = a12;
  uint64_t v66 = a11;
  _s10Foundation9PredicateVyAA3URLV_QPGSgMaTm_0(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v63 = (uint64_t)&v59 - v17;
  _s10Foundation9PredicateVyAA3URLV_QPGSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
  MEMORY[0x1F4188790](v18 - 8);
  unint64_t v59 = (char *)&v59 - v19;
  _s10Foundation9PredicateVyAA3URLV_QPGSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for FileImportOperation?, (void (*)(uint64_t))type metadata accessor for FileImportOperation);
  MEMORY[0x1F4188790](v20 - 8);
  unsigned int v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char **)((char *)&v59 - v24);
  type metadata accessor for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>();
  uint64_t v65 = v26;
  MEMORY[0x1F4188790](v26);
  unint64_t v28 = (uint64_t *)((char *)&v59 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (uint64_t *)((char *)&v59 - v30);
  uint64_t v32 = a1;
  uint64_t v69 = a1;
  uint64_t v70 = a2;
  uint64_t v33 = a2;
  char v71 = a3;
  type metadata accessor for Binding<Bool>();
  uint64_t v35 = v34;
  MEMORY[0x18C113DA0](&v72);
  if (v72 == 1)
  {
    char v36 = a3 & 1;
    if (!*(void *)(a4 + 16))
    {
      static os_log_type_t.fault.getter();
      uint64_t v37 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)();
    }
    uint64_t v69 = v32;
    uint64_t v70 = v33;
    char v71 = a3 & 1;
    MEMORY[0x18C113DA0](&v72, v35);
    if (v72 == 1)
    {
      uint64_t v38 = type metadata accessor for URL();
      uint64_t v39 = v32;
      uint64_t v40 = v33;
      uint64_t v41 = (uint64_t)v59;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v59, 1, 1, v38);
      type metadata accessor for Predicate<Pack{URL}>();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v63, 1, 1, v42);
      uint64_t v43 = swift_allocObject();
      *(void *)(v43 + 16) = v32;
      *(void *)(v43 + 24) = v40;
      *(unsigned char *)(v43 + 32) = v36;
      uint64_t v44 = v64;
      *(void *)(v43 + 40) = v60;
      *(void *)(v43 + 48) = v44;
      uint64_t v45 = swift_allocObject();
      *(void *)(v45 + 16) = v39;
      *(void *)(v45 + 24) = v40;
      *(unsigned char *)(v45 + 32) = v36;
      *(void *)(v45 + 40) = v61;
      *(void *)(v45 + 48) = a10;
      uint64_t v46 = (int *)type metadata accessor for FileImportOperation(0);
      *uint64_t v25 = 0;
      v25[1] = 0;
      outlined init with take of URL?(v41, (uint64_t)v25 + v46[5], (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
      uint64_t v47 = (_OWORD *)((char *)v25 + v46[6]);
      *uint64_t v47 = 0u;
      v47[1] = 0u;
      uint64_t v48 = (_OWORD *)((char *)v25 + v46[7]);
      *uint64_t v48 = 0u;
      v48[1] = 0u;
      uint64_t v49 = (_OWORD *)((char *)v25 + v46[8]);
      _OWORD *v49 = 0u;
      v49[1] = 0u;
      *(void *)((char *)v25 + v46[9]) = a4;
      *((unsigned char *)v25 + v46[10]) = v62 & 1;
      outlined init with take of URL?(v63, (uint64_t)v25 + v46[11], &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (void (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
      *((unsigned char *)v25 + v46[12]) = 2;
      uint64_t v50 = (char *)v25 + v46[13];
      *(void *)uint64_t v50 = 0;
      v50[8] = 1;
      uint64_t v51 = (void (**)(void *, unsigned __int8))((char *)v25 + v46[14]);
      *uint64_t v51 = partial apply for closure #1 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:);
      v51[1] = (void (*)(void *, unsigned __int8))v43;
      uint64_t v52 = (uint64_t (**)())((char *)v25 + v46[15]);
      *uint64_t v52 = partial apply for closure #2 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:);
      v52[1] = (uint64_t (*)())v45;
      (*(void (**)(void *, void, uint64_t, int *))(*((void *)v46 - 1) + 56))(v25, 0, 1, v46);
      swift_retain_n();
      swift_retain_n();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      uint64_t v57 = type metadata accessor for FileImportOperation(0);
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v25, 1, 1, v57);
    }
    uint64_t v54 = v68;
    uint64_t v55 = v66;
    uint64_t v56 = v65;
    specialized FileDialogConfiguration.init(preferenceKey:operation:)((uint64_t)v25, v31);
  }
  else
  {
    uint64_t v53 = type metadata accessor for FileImportOperation(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v22, 1, 1, v53);
    specialized FileDialogConfiguration.init(preferenceKey:operation:)((uint64_t)v22, v28);
    uint64_t v31 = v28;
    uint64_t v54 = v68;
    uint64_t v55 = v66;
    uint64_t v56 = v65;
  }
  MEMORY[0x18C113660](v31, v55, v56, v54);
  return outlined destroy of FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>);
}

uint64_t sub_187AB26D0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>()
{
  if (!lazy cache variable for type metadata for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>)
  {
    type metadata accessor for FileImportOperation(255);
    unint64_t v0 = type metadata accessor for FileDialogConfiguration();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type FileDialogConfiguration<FileImportOperation.Key, FileImportOperation> and conformance FileDialogConfiguration<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type FileDialogConfiguration<FileImportOperation.Key, FileImportOperation> and conformance FileDialogConfiguration<A, B>;
  if (!lazy protocol witness table cache variable for type FileDialogConfiguration<FileImportOperation.Key, FileImportOperation> and conformance FileDialogConfiguration<A, B>)
  {
    type metadata accessor for FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileDialogConfiguration<FileImportOperation.Key, FileImportOperation> and conformance FileDialogConfiguration<A, B>);
  }
  return result;
}

void _s10Foundation9PredicateVyAA3URLV_QPGSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void closure #1 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(void *a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *, void))
{
  int v9 = ~a2;
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  if (v9)
  {
    outlined copy of Result<[URL], Error>(a1, a2 & 1);
    a6(a1, a2 & 1);
    outlined consume of Result<[URL], Error>?(a1, a2);
  }
}

void partial apply for closure #1 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(void *a1, unsigned __int8 a2)
{
  closure #1 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32), *(void (**)(void *, void))(v2 + 40));
}

uint64_t closure #2 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  uint64_t v5 = swift_release();
  return a4(v5);
}

uint64_t partial apply for closure #2 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)()
{
  return closure #2 in View._fileImporter(isPresented:allowedContentTypes:allowsMultipleSelection:onCompletion:onCancellation:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(uint64_t (**)(uint64_t))(v0 + 40));
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  _s10Foundation9PredicateVyAA3URLV_QPGSgMaTm_0(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

id outlined copy of Result<[URL], Error>(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_bridgeObjectRetain();
  }
}

void outlined consume of Result<[URL], Error>?(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    outlined consume of Result<[URL], Error>(a1, a2 & 1);
  }
}

void outlined consume of Result<[URL], Error>(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_bridgeObjectRelease();
  }
}

void type metadata accessor for Result<URL, Error>()
{
  if (!lazy cache variable for type metadata for Result<URL, Error>)
  {
    type metadata accessor for URL();
    type metadata accessor for Error();
    unint64_t v0 = type metadata accessor for Result();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Result<URL, Error>);
    }
  }
}

uint64_t outlined destroy of FileDialogConfiguration<FileImportOperation.Key, FileImportOperation>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for DisplayList.HostedViewResponder(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DisplayList.HostedViewResponder);
}

uint64_t type metadata completion function for DisplayList.HostedViewResponder()
{
  return swift_initClassMetadata2();
}

Swift::Void __swiftcall DisplayList.HostedViews.updateValue()()
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *v0;
  int CurrentAttribute = AGGraphGetCurrentAttribute();
  if (CurrentAttribute == *MEMORY[0x1E4F4E7A0]) {
    __break(1u);
  }
  int v3 = CurrentAttribute;
  swift_beginAccess();
  long long v5 = *(_OWORD *)(v1 + 80);
  long long v4 = *(_OWORD *)(v1 + 96);
  long long v6 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)&v51[12] = *(_OWORD *)(v1 + 124);
  long long v7 = *(_OWORD *)(v1 + 16);
  long long v8 = *(_OWORD *)(v1 + 32);
  long long v9 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)uint64_t v51 = v6;
  v49[0] = v7;
  v49[1] = v8;
  long long v10 = *(_OWORD *)(v1 + 64);
  *(_OWORD *)uint64_t v50 = v9;
  *(_OWORD *)&v50[16] = v10;
  *(_OWORD *)&v50[32] = v5;
  *(_OWORD *)&v50[48] = v4;
  int v11 = DWORD2(v8);
  uint64_t v12 = v9;
  int v13 = *(_DWORD *)&v51[24];
  int v14 = *(_DWORD *)v51;
  uint64_t v16 = *((void *)&v7 + 1);
  uint64_t v15 = v8;
  int v17 = DWORD1(v7);
  long long v18 = *(_OWORD *)&v50[24];
  long long v19 = *(_OWORD *)&v51[8];
  long long v20 = *(_OWORD *)&v50[8];
  long long v21 = *(_OWORD *)&v50[40];
  long long v22 = *(_OWORD *)(v1 + 16);
  long long v23 = *(_OWORD *)(v1 + 32);
  long long v24 = *(_OWORD *)(v1 + 64);
  v52[2] = *(_OWORD *)(v1 + 48);
  v52[3] = v24;
  long long v25 = *(_OWORD *)(v1 + 80);
  long long v26 = *(_OWORD *)(v1 + 96);
  long long v27 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)((char *)v53 + 12) = *(_OWORD *)(v1 + 124);
  uint64_t v28 = *(void *)&v50[56];
  void v52[5] = v26;
  v53[0] = v27;
  v52[4] = v25;
  v52[0] = v22;
  v52[1] = v23;
  *(_DWORD *)(v1 + 16) = v3;
  *(_DWORD *)(v1 + 20) = v17;
  *(void *)(v1 + 24) = v16;
  *(void *)(v1 + 32) = v15;
  *(_DWORD *)(v1 + 40) = v11;
  *(void *)(v1 + 48) = v12;
  *(_OWORD *)(v1 + 56) = v20;
  *(_OWORD *)(v1 + 72) = v18;
  *(_OWORD *)(v1 + 88) = v21;
  *(void *)(v1 + 104) = v28;
  *(_DWORD *)(v1 + 112) = v14;
  *(_OWORD *)(v1 + 120) = v19;
  *(_DWORD *)(v1 + 136) = v13;
  outlined retain of DisplayList.HostedViewState((uint64_t)v49);
  outlined release of DisplayList.HostedViewState((uint64_t)v52);
  long long v29 = *(_OWORD *)(v1 + 16);
  long long v30 = *(_OWORD *)(v1 + 32);
  long long v31 = *(_OWORD *)(v1 + 64);
  _OWORD v54[2] = *(_OWORD *)(v1 + 48);
  long long v54[3] = v31;
  long long v32 = *(_OWORD *)(v1 + 80);
  long long v33 = *(_OWORD *)(v1 + 96);
  long long v34 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)((char *)v55 + 12) = *(_OWORD *)(v1 + 124);
  long long v35 = *(_OWORD *)((char *)v55 + 12);
  v54[5] = v33;
  v55[0] = v34;
  v54[4] = v32;
  v54[0] = v29;
  v54[1] = v30;
  long long v44 = *(_OWORD *)(v1 + 48);
  long long v45 = *(_OWORD *)(v1 + 64);
  long long v42 = *(_OWORD *)(v1 + 16);
  long long v43 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)&v48[12] = v35;
  long long v47 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)uint64_t v48 = *(_OWORD *)(v1 + 112);
  long long v46 = *(_OWORD *)(v1 + 80);
  outlined retain of DisplayList.HostedViewState((uint64_t)v54);
  LOBYTE(v3) = DisplayList.HostedViewState.update()();
  long long v36 = *(_OWORD *)(v1 + 16);
  long long v37 = *(_OWORD *)(v1 + 32);
  long long v38 = *(_OWORD *)(v1 + 64);
  v56[2] = *(_OWORD *)(v1 + 48);
  v56[3] = v38;
  long long v39 = *(_OWORD *)(v1 + 80);
  long long v40 = *(_OWORD *)(v1 + 96);
  long long v41 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)((char *)v57 + 12) = *(_OWORD *)(v1 + 124);
  v56[5] = v40;
  v57[0] = v41;
  v56[4] = v39;
  v56[0] = v36;
  v56[1] = v37;
  *(_OWORD *)(v1 + 16) = v42;
  *(_OWORD *)(v1 + 32) = v43;
  *(_OWORD *)(v1 + 48) = v44;
  *(_OWORD *)(v1 + 64) = v45;
  *(_OWORD *)(v1 + 80) = v46;
  *(_OWORD *)(v1 + 124) = *(_OWORD *)&v48[12];
  *(_OWORD *)(v1 + 96) = v47;
  *(_OWORD *)(v1 + 112) = *(_OWORD *)v48;
  outlined release of DisplayList.HostedViewState((uint64_t)v56);
  if ((v3 & 1) != 0 || !AGGraphGetOutputValue()) {
    AGGraphSetOutputValue();
  }
}

Swift::Bool __swiftcall DisplayList.HostedViewState.update()()
{
  uint64_t v1 = v0;
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  long long v4 = (char *)&v41 - v3;
  uint64_t Value = AGGraphGetValue();
  __int16 v6 = *(_WORD *)(Value + 8);
  LODWORD(v8) = v7 | ((v6 & 2) >> 1);
  if (v7 & 1 | ((v6 & 2) != 0))
  {
    uint64_t v9 = *(void *)Value;
    int v61 = *(unsigned __int8 *)(Value + 10);
    ++*(_DWORD *)(v0 + 120);
    swift_bridgeObjectRetain();
    long long v10 = (size_t *)(v0 + 112);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    size_t v12 = *v10;
    if (isUniquelyReferenced_nonNull_native)
    {
      specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v12 + 16));
      if ((v6 & 2) == 0)
      {
LABEL_4:
        swift_bridgeObjectRelease();
LABEL_7:
        DisplayList.HostedViewState.reclaim()();
        return v8 & 1;
      }
    }
    else
    {
      *long long v10 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v12 + 24) >> 1);
      swift_bridgeObjectRelease();
      if ((v6 & 2) == 0) {
        goto LABEL_4;
      }
    }
    DisplayList.Index.init()();
    uint64_t v57 = *(void *)(v1 + 16);
    int v58 = *(_DWORD *)(v1 + 24);
    uint64_t v62 = v9;
    uint64_t v59 = *(void *)(v1 + 32);
    int v13 = *(_DWORD *)(v1 + 40);
    int v14 = *(_DWORD *)(v1 + 44);
    int v15 = *(_DWORD *)(v1 + 48);
    int v16 = *(_DWORD *)(v1 + 52);
    uint64_t v17 = *(void *)(v1 + 64);
    uint64_t v46 = *(void *)(v1 + 56);
    uint64_t v60 = v17;
    int v18 = *(_DWORD *)(v1 + 76);
    int v44 = *(_DWORD *)(v1 + 72);
    int v19 = *(_DWORD *)(v1 + 80);
    int v45 = *(_DWORD *)(v1 + 84);
    int v20 = *(_DWORD *)(v1 + 92);
    int v43 = *(_DWORD *)(v1 + 88);
    int v42 = v20;
    int v21 = *(_DWORD *)(v1 + 96);
    *(void *)&long long v66 = v57;
    DWORD2(v66) = v58;
    uint64_t v67 = v59;
    int v68 = v13;
    int v69 = v14;
    int v56 = v8;
    int v22 = v13;
    int v54 = v13;
    int v53 = v14;
    int v70 = v15;
    int v71 = v16;
    int v52 = v15;
    int v51 = v16;
    uint64_t v72 = v46;
    uint64_t v73 = v17;
    int v74 = v44;
    int v75 = v18;
    uint64_t v55 = v4;
    int v23 = v18;
    int v50 = v18;
    int v76 = v19;
    int v77 = v45;
    int v49 = v19;
    int v78 = v43;
    int v79 = v20;
    int v80 = v21;
    int v48 = v21;
    _ViewInputs.transform.getter();
    uint64_t v24 = AGGraphGetValue();
    uint64_t v25 = *(void *)v24;
    long long v47 = *(_OWORD *)(v24 + 8);
    uint64_t v26 = *(void *)(v24 + 24);
    uint64_t v27 = *(void *)(v24 + 32);
    *(void *)&long long v66 = v57;
    DWORD2(v66) = v58;
    uint64_t v67 = v59;
    int v68 = v22;
    int v69 = v14;
    int v70 = v15;
    int v71 = v16;
    uint64_t v28 = v46;
    uint64_t v72 = v46;
    uint64_t v73 = v60;
    int v29 = v44;
    int v74 = v44;
    int v75 = v23;
    int v30 = v45;
    int v76 = v19;
    int v77 = v45;
    int v31 = v43;
    int v32 = v42;
    int v78 = v43;
    int v79 = v42;
    int v80 = v21;
    uint64_t v33 = v25;
    swift_retain();
    _ViewInputs.environment.getter();
    long long v34 = (uint64_t *)AGGraphGetValue();
    uint64_t v35 = *v34;
    uint64_t v8 = v34[1];
    uint64_t v81 = v33;
    long long v82 = v47;
    uint64_t v83 = v26;
    uint64_t v84 = v27;
    uint64_t v85 = v35;
    uint64_t v86 = v8;
    uint64_t v63 = v62;
    __int16 v64 = v6;
    char v65 = v61;
    uint64_t v36 = type metadata accessor for DisplayList.ArchiveIDs();
    uint64_t v37 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v55, 1, 1, v36);
    *(void *)&long long v66 = v57;
    DWORD2(v66) = v58;
    uint64_t v67 = v59;
    int v68 = v54;
    int v69 = v53;
    int v70 = v52;
    int v71 = v51;
    uint64_t v72 = v28;
    uint64_t v73 = v60;
    int v74 = v29;
    int v75 = v50;
    int v76 = v49;
    int v77 = v30;
    int v78 = v31;
    int v79 = v32;
    int v80 = v48;
    LOBYTE(v8) = v56;
    swift_retain();
    swift_retain();
    _ViewInputs.position.getter();
    long long v66 = *(_OWORD *)AGGraphGetValue();
    double v38 = MEMORY[0x18C10C240]();
    DisplayList.HostedViewState.updateViews(in:index:archive:position:state:)(&v63, &v87, v37, &v81, v38, v39);
    outlined destroy of DisplayList.ArchiveIDs?(v37, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_7;
  }
  return v8 & 1;
}

uint64_t DisplayList.HostedViewState.splicedDisplayList()@<X0>(uint64_t a1@<X8>)
{
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  long long v4 = (char *)&v10 - v3;
  uint64_t Value = AGGraphGetValue();
  __int16 v6 = *(_WORD *)(Value + 8);
  char v7 = *(unsigned char *)(Value + 10);
  uint64_t v12 = *(void *)Value;
  __int16 v13 = v6;
  char v14 = v7;
  if ((v6 & 2) != 0)
  {
    swift_bridgeObjectRetain();
    DisplayList.Index.init()();
    uint64_t v9 = type metadata accessor for DisplayList.ArchiveIDs();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
    DisplayList.HostedViewState.spliceViews(into:index:archive:substitutions:)(&v12, &v11, (uint64_t)v4, MEMORY[0x1E4FBC868], &v10);
    outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
    uint64_t result = v12;
    __int16 v6 = v13;
    char v7 = v14;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRetain();
  }
  *(void *)a1 = result;
  *(_WORD *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 10) = v7;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance DisplayList.HostedViews.SplicedDisplayList@<X0>(uint64_t a1@<X8>)
{
  AGGraphGetValue();
  swift_retain();
  uint64_t v2 = specialized MutableBox.wrappedValue.modify(v4);
  DisplayList.HostedViewState.splicedDisplayList()(a1);
  v2((uint64_t)v4, 0);
  return swift_release();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DisplayList.HostedViews.SplicedDisplayList(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList();

  return MEMORY[0x1F40FE388](a1, v2);
}

Swift::Void __swiftcall DisplayList.HostedViews.ResponderFilter.updateValue()()
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned int *)(AGGraphGetValue() + 8);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v4 = Value[1];
  v14[0] = *Value;
  v14[1] = v4;
  long long v5 = (long long *)AGGraphGetValue();
  char v7 = v6 & 1;
  long long v13 = *v5;
  uint64_t v8 = AGGraphGetValue();
  char v10 = v9 & 1;
  uint64_t v15 = *(void *)v8;
  long long v16 = *(_OWORD *)(v8 + 8);
  long long v17 = *(_OWORD *)(v8 + 24);
  swift_retain();
  uint64_t v11 = swift_retain();
  specialized DisplayList.HostedViewResponder.update(info:size:position:transform:)(v11, v2, (uint64_t)v14, (uint64_t)&v13, v7, &v15, v10);
  swift_release();
  swift_release();
  _s10Foundation4UUIDVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
  if (!AGGraphGetOutputValue())
  {
    type metadata accessor for DisplayList.HostedViewState.ViewInfo?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_188351940;
    *(void *)(v12 + 32) = v1;
    uint64_t v15 = v12;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
  }
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DisplayList.HostedViews.ResponderFilter(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t DisplayList.HostedViews.Preference.value.getter@<X0>(uint64_t (**a1)(uint64_t, char *, uint64_t)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v35 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  long long v34 = *(uint64_t (****)(uint64_t, char *, uint64_t))(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v33 = (char *)&v27 - v5;
  uint64_t v6 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  char v9 = (Swift::UInt32 *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void *)AGGraphGetValue();
  swift_beginAccess();
  uint64_t v11 = *(void *)(v10 + 120);
  uint64_t v12 = *(void (**)(uint64_t (**)(uint64_t, char *, uint64_t), uint64_t))(a2 + 16);
  swift_bridgeObjectRetain();
  uint64_t v36 = a1;
  v12(a1, a2);
  uint64_t v13 = *(void *)AGGraphGetValue();
  swift_beginAccess();
  uint64_t v14 = *(void *)(v13 + 128);
  uint64_t v15 = *(void *)(v14 + 16);
  if (!v15) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v16 = v14 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  int v29 = (void (**)(char *, uint64_t, uint64_t))(v34 + 2);
  uint64_t v30 = a2 + 24;
  uint64_t v27 = (uint64_t (**)(uint64_t, char *, uint64_t))(v34 + 4);
  uint64_t v28 = (void (**)(uint64_t, uint64_t))(v34 + 1);
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v18 = 0;
  uint64_t v31 = v15 - 1;
  LODWORD(v34) = 1;
LABEL_3:
  unint64_t v19 = v18;
  while (v19 < *(void *)(v14 + 16))
  {
    outlined init with copy of DisplayList.HostedViewState.Key(v16 + *(void *)(v7 + 72) * v19, (uint64_t)v9, type metadata accessor for DisplayList.HostedViewState.Key);
    if (*(void *)(v11 + 16) && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v9), (v21 & 1) != 0))
    {
      outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(void *)(v11 + 56) + 176 * v20, (uint64_t)&v37);
    }
    else
    {
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v37 = 0u;
    }
    outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v9, type metadata accessor for DisplayList.HostedViewState.Key);
    if (*((void *)&v39 + 1))
    {
      v48[8] = v45;
      v48[9] = v46;
      long long v49 = v47;
      v48[4] = v41;
      v48[5] = v42;
      _OWORD v48[6] = v43;
      v48[7] = v44;
      v48[0] = v37;
      v48[1] = v38;
      v48[2] = v39;
      v48[3] = v40;
      if (*((void *)&v46 + 1))
      {
        *(void *)&long long v37 = *((void *)&v46 + 1);
        *((void *)&v37 + 1) = v49;
        uint64_t v22 = _ViewOutputs.subscript.getter();
        if ((v22 & 0x100000000) == 0)
        {
          if (v34)
          {
            uint64_t v23 = AssociatedTypeWitness;
            uint64_t Value = AGGraphGetValue();
            (*v29)(v33, Value, v23);
            outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v48);
            (*v28)(v35, v23);
            uint64_t result = (*v27)(v35, v33, v23);
          }
          else
          {
            long long v34 = &v27;
            double v25 = MEMORY[0x1F4188790](v22);
            *(&v27 - 4) = v36;
            *(&v27 - 3) = (uint64_t (**)(uint64_t, char *, uint64_t))a2;
            *((_DWORD *)&v27 - 4) = v26;
            (*(void (**)(uint64_t, uint64_t (*)@<X0>(uint64_t@<X8>), double))(a2 + 24))(v35, partial apply for closure #1 in LazyPreference.value.getter, v25);
            uint64_t result = outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v48);
          }
          LODWORD(v34) = 0;
          unint64_t v18 = v19 + 1;
          if (v31 == v19)
          {
LABEL_19:
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          goto LABEL_3;
        }
      }
      uint64_t result = outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v48);
    }
    else
    {
      uint64_t result = outlined destroy of DisplayList.ArchiveIDs?((uint64_t)&v37, (uint64_t)&lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for DisplayList.HostedViewState.ViewInfo?);
    }
    if (v15 == ++v19) {
      goto LABEL_19;
    }
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DisplayList.HostedViews.Preference<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for Rule.value.getter in conformance DisplayList.HostedViews.Preference<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DisplayList.HostedViews.Preference.value.getter(*(uint64_t (***)(uint64_t, char *, uint64_t))(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DisplayList.HostedViews.Preference<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DisplayList.HostedViews(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DisplayList.HostedViews and conformance DisplayList.HostedViews();

  return MEMORY[0x1F40FE388](a1, v2);
}

void DisplayList.HostedViewState.Key.hash(into:)()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  long long v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27990];
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v10 - v7;
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  uint64_t v9 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  outlined init with copy of DisplayList.ArchiveIDs?((uint64_t)v0 + *(int *)(v9 + 24), (uint64_t)v8, &lazy cache variable for type metadata for UUID?, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v8, v1);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
}

Swift::Int DisplayList.HostedViewState.Key.hashValue.getter()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  long long v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27990];
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v11 - v7;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v0[1]);
  uint64_t v9 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  outlined init with copy of DisplayList.ArchiveIDs?((uint64_t)v0 + *(int *)(v9 + 24), (uint64_t)v8, &lazy cache variable for type metadata for UUID?, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v8, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v8, v1);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayList.HostedViewState.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27990];
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v13 - v10;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*v2);
  Hasher._combine(_:)(v2[1]);
  outlined init with copy of DisplayList.ArchiveIDs?((uint64_t)v2 + *(int *)(a2 + 24), (uint64_t)v11, &lazy cache variable for type metadata for UUID?, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v11, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v11, v4);
    Hasher._combine(_:)(1u);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return Hasher._finalize()();
}

void DisplayList.HostedViewState.reclaim()()
{
  if (*(void *)(*(void *)(v0 + 104) + 16))
  {
    uint64_t v1 = swift_bridgeObjectRetain();
    uint64_t v2 = specialized _NativeDictionary.filter(_:)(v1, v0);
    swift_bridgeObjectRelease_n();
    *(void *)(v0 + 104) = v2;
    uint64_t v3 = *(void *)(v0 + 112);
    if (*(void *)(v3 + 16) < *(void *)(v3 + 24) >> 3)
    {
      uint64_t v4 = MEMORY[0x1E4FBC860];
      specialized Array.append<A>(contentsOf:)(v3);
      *(void *)(v0 + 112) = v4;
    }
  }
}

uint64_t DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, CGFloat a6, CGFloat a7)
{
  v33.x = a6;
  v33.y = a7;
  uint64_t v9 = *a4;
  uint64_t v10 = a4[1];
  uint64_t v11 = a4[2];
  uint64_t v12 = a4[3];
  uint64_t v13 = a4[4];
  uint64_t v14 = *a5;
  uint64_t v15 = a5[1];
  uint64_t v16 = a5[2];
  uint64_t v17 = a5[3];
  uint64_t v18 = a5[4];
  uint64_t v19 = a5[5];
  uint64_t v20 = a5[6];
  long long v21 = v7[5];
  v36[4] = v7[4];
  v36[5] = v21;
  *(_OWORD *)long long v37 = v7[6];
  *(_OWORD *)&v37[12] = *(_OWORD *)((char *)v7 + 108);
  long long v22 = v7[1];
  v36[0] = *v7;
  v36[1] = v22;
  long long v23 = v7[3];
  v36[2] = v7[2];
  _OWORD v36[3] = v23;
  if (!*(void *)(a1 + 144))
  {
    int v32 = a3;
    id v25 = (id)AGSubgraphGetGraph();
    int v26 = (void *)AGSubgraphCreate();

    AGSubgraphAddChild();
    *(void *)(a1 + 144) = v26;
    id v27 = v26;
    AGGraphClearUpdate();
    id v28 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)((int *)v36, a2, a1);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    *(void *)(swift_allocObject() + 16) = v27;
    id v29 = v27;
    static Update.enqueueAction(_:)();

    swift_release();
    a3 = v32;
  }
  *(void *)a1 = v13;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)&v37[24];
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), a3);
  *(void *)&long long v34 = v9;
  *((void *)&v34 + 1) = v10;
  *(void *)&long long v35 = v11;
  *((void *)&v35 + 1) = v12;
  DisplayList.Item.frame.getter();
  static ViewSize.fixed(_:)();
  *(_OWORD *)(a1 + 56) = v34;
  *(_OWORD *)(a1 + 72) = v35;
  uint64_t v30 = (void *)(a1 + 88);
  swift_retain();
  swift_release();
  *uint64_t v30 = v14;
  v30[1] = v15;
  v30[2] = v16;
  uint64_t v30[3] = v17;
  v30[4] = v18;
  ViewTransform.resetPosition(_:)(v33);
  swift_retain();
  swift_retain();
  swift_release();
  uint64_t result = swift_release();
  v30[5] = v19;
  v30[6] = v20;
  return result;
}

uint64_t closure #1 in DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t View = type metadata accessor for DisplayList.HostedViewState.FetchView(0);
  MEMORY[0x1F4188790](View);
  uint64_t v8 = (_DWORD *)((char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v9 = *a1;
  if (*a1 == *MEMORY[0x1E4F4E7A0]) {
    __break(1u);
  }
  outlined init with copy of DisplayList.HostedViewState.Key(a2, (uint64_t)v8 + *(int *)(View + 20), type metadata accessor for DisplayList.HostedViewState.Key);
  *uint64_t v8 = v9;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type DisplayList.HostedViewState.FetchView and conformance DisplayList.HostedViewState.FetchView, (void (*)(uint64_t))type metadata accessor for DisplayList.HostedViewState.FetchView);
  int v30 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v8, type metadata accessor for DisplayList.HostedViewState.FetchView);
  long long v10 = *((_OWORD *)a1 + 2);
  long long v43 = *((_OWORD *)a1 + 1);
  v44[0] = v10;
  long long v11 = *((_OWORD *)a1 + 4);
  v44[1] = *((_OWORD *)a1 + 3);
  *(_OWORD *)long long v45 = v11;
  *(_OWORD *)&v45[16] = *((_OWORD *)a1 + 5);
  *(_DWORD *)&v45[32] = a1[24];
  uint64_t v12 = *(void *)&v44[0];
  uint64_t v37 = v43;
  long long v40 = *(_OWORD *)((char *)v44 + 8);
  int v38 = DWORD2(v43);
  LODWORD(v42[0]) = DWORD2(v11);
  *(void *)&long long v41 = *((void *)&v44[1] + 1);
  *((void *)&v41 + 1) = v11;
  *(_OWORD *)((char *)v42 + 4) = *(_OWORD *)&v45[12];
  *(void *)((char *)&v42[1] + 4) = *(void *)&v45[28];
  swift_beginAccess();
  int v13 = *(_DWORD *)(v12 + 16);
  uint64_t v14 = *(void *)(v12 + 24);
  long long v15 = *(_OWORD *)(v12 + 32);
  long long v28 = *(_OWORD *)(v12 + 48);
  long long v29 = v15;
  uint64_t v31 = a3;
  uint64_t v17 = *(void *)(v12 + 64);
  uint64_t v16 = *(void *)(v12 + 72);
  char v18 = *(unsigned char *)(v12 + 80);
  int v27 = *(unsigned __int8 *)(v12 + 81);
  uint64_t v19 = *(void *)(v12 + 88);
  type metadata accessor for DisplayList.HostedViewState.ViewInfo?(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v20 = swift_allocObject();
  *(_DWORD *)(v20 + 16) = v13;
  *(void *)(v20 + 24) = v14;
  long long v21 = v28;
  *(_OWORD *)(v20 + 32) = v29;
  *(_OWORD *)(v20 + 48) = v21;
  *(void *)(v20 + 64) = v17;
  *(void *)(v20 + 72) = v16;
  *(unsigned char *)(v20 + 80) = v18;
  *(unsigned char *)(v20 + 81) = v27;
  *(void *)(v20 + 88) = v19;
  outlined retain of _ViewInputs((uint64_t)&v43);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v39 = v20;
  type metadata accessor for ViewGraph();
  MEMORY[0x18C114EE0]();
  ViewGraph.$zeroPoint.getter();
  swift_release();
  _ViewInputs.position.setter();
  *(void *)&long long v34 = v37;
  DWORD2(v34) = v38;
  *(void *)&v35[0] = v39;
  *(_OWORD *)((char *)v35 + 8) = v40;
  *(_OWORD *)((char *)&v35[1] + 8) = v41;
  *(_OWORD *)((char *)&v35[2] + 8) = v42[0];
  *((void *)&v35[3] + 1) = *(void *)&v42[1];
  int v36 = DWORD2(v42[1]);
  _ViewInputs.position.getter();
  _ViewInputs.containerPosition.setter();
  LODWORD(v16) = v30;
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.transform.setter();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.environment.setter();
  AGGraphCreateOffsetAttribute2();
  _ViewInputs.size.setter();
  LODWORD(v34) = v16;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  *(void *)&long long v34 = v37;
  DWORD2(v34) = v38;
  *(void *)&v35[0] = v39;
  *(_OWORD *)((char *)v35 + 8) = v40;
  *(_OWORD *)((char *)&v35[1] + 8) = v41;
  *(_OWORD *)((char *)&v35[2] + 8) = v42[0];
  *((void *)&v35[3] + 1) = *(void *)&v42[1];
  int v36 = DWORD2(v42[1]);
  static AnyView._makeView(view:inputs:)();
  uint64_t v22 = v33;
  uint64_t v23 = v31;
  *(void *)(v31 + 152) = v32;
  *(void *)(v23 + 160) = v22;
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  v35[1] = v44[1];
  _OWORD v35[2] = *(_OWORD *)v45;
  v35[3] = *(_OWORD *)&v45[16];
  int v36 = *(_DWORD *)&v45[32];
  long long v34 = v43;
  v35[0] = v44[0];
  type metadata accessor for DefaultLayoutViewResponder();
  swift_allocObject();
  outlined retain of _ViewInputs((uint64_t)&v43);
  *(void *)(v24 + 168) = DefaultLayoutViewResponder.init(inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)(uint64_t a1)
{
  uint64_t result = AGSubgraphIsValid();
  if (result)
  {
    uint64_t v3 = static AGAttributeFlags.transactional.getter();
    return MEMORY[0x1F410B240](a1, v3);
  }
  return result;
}

uint64_t DisplayList.HostedViewState.FetchView.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (Swift::UInt32 *)((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(_OWORD **)AGGraphGetValue();
  uint64_t View = type metadata accessor for DisplayList.HostedViewState.FetchView(0);
  outlined init with copy of DisplayList.HostedViewState.Key(v1 + *(int *)(View + 20), (uint64_t)v5, type metadata accessor for DisplayList.HostedViewState.Key);
  swift_beginAccess();
  long long v8 = v6[5];
  long long v9 = v6[7];
  void v34[5] = v6[6];
  v35[0] = v9;
  *(_OWORD *)((char *)v35 + 12) = *(_OWORD *)((char *)v6 + 124);
  v34[4] = v8;
  long long v10 = v6[2];
  v34[0] = v6[1];
  v34[1] = v10;
  long long v11 = v6[4];
  v34[2] = v6[3];
  void v34[3] = v11;
  uint64_t v12 = *((void *)&v35[0] + 1);
  if (*(void *)(*((void *)&v35[0] + 1) + 16))
  {
    outlined retain of DisplayList.HostedViewState((uint64_t)v34);
    unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if (v14)
    {
      outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(void *)(v12 + 56) + 176 * v13, (uint64_t)&v23);
    }
    else
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v23 = 0u;
    }
    outlined release of DisplayList.HostedViewState((uint64_t)v34);
  }
  else
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v23 = 0u;
  }
  uint64_t result = outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v5, type metadata accessor for DisplayList.HostedViewState.Key);
  if (*((void *)&v25 + 1))
  {
    long long v16 = v32;
    *(_OWORD *)(a1 + 128) = v31;
    *(_OWORD *)(a1 + 144) = v16;
    *(_OWORD *)(a1 + 160) = v33;
    long long v17 = v28;
    *(_OWORD *)(a1 + 64) = v27;
    *(_OWORD *)(a1 + 80) = v17;
    long long v18 = v30;
    *(_OWORD *)(a1 + 96) = v29;
    *(_OWORD *)(a1 + 112) = v18;
    long long v19 = v24;
    *(_OWORD *)a1 = v23;
    *(_OWORD *)(a1 + 16) = v19;
    long long v20 = v26;
    *(_OWORD *)(a1 + 32) = v25;
    *(_OWORD *)(a1 + 48) = v20;
  }
  else
  {
    *(void *)a1 = 0;
    uint64_t v21 = MEMORY[0x1E4F3FCC8];
    *(_DWORD *)(a1 + 8) = 0;
    uint64_t v22 = MEMORY[0x1E4F3FCC0];
    *(void *)(a1 + 40) = v21;
    *(void *)(a1 + 48) = v22;
    static ViewSize.zero.getter();
    ViewTransform.init()();
    EnvironmentValues.init()();
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    return outlined destroy of DisplayList.ArchiveIDs?((uint64_t)&v23, (uint64_t)&lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for DisplayList.HostedViewState.ViewInfo?);
  }
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance DisplayList.HostedViewState.FetchView@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DisplayList.HostedViewState.FetchView(uint64_t a1)
{
  uint64_t v2 = lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type DisplayList.HostedViewState.FetchView and conformance DisplayList.HostedViewState.FetchView, (void (*)(uint64_t))type metadata accessor for DisplayList.HostedViewState.FetchView);

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance DisplayList.HostedViewState.Child@<X0>(uint64_t *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value + 16, (uint64_t)v7);
  uint64_t v3 = v8;
  uint64_t v4 = v9;
  __swift_project_boxed_opaque_existential_1(v7, v8);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  *a1 = v5;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance DisplayList.HostedViewState.Child(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child();

  return MEMORY[0x1F40FE388](a1, v2);
}

uint64_t DisplayList.HostedViewResponder.__allocating_init(inputs:)()
{
  uint64_t v0 = (void *)swift_allocObject();
  v0[28] = 0;
  v0[29] = 0;
  v0[27] = 0;
  ViewTransform.init()();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t DisplayList.HostedViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0 = (void *)swift_allocObject();
  v0[28] = 0;
  v0[29] = 0;
  v0[27] = 0;
  ViewTransform.init()();
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t DisplayList.HostedViewResponder.__ivar_destroyer()
{
  swift_release();

  return swift_release();
}

uint64_t DisplayList.HostedViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for DisplayList.HostedViewResponder()
{
  return type metadata accessor for DisplayList.HostedViewResponder(0);
}

uint64_t type metadata accessor for DisplayList.HostedViews.Preference()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for DisplayList.HostedViews.SplicedDisplayList()
{
  return &type metadata for DisplayList.HostedViews.SplicedDisplayList;
}

ValueMetadata *type metadata accessor for DisplayList.HostedViews.ResponderFilter()
{
  return &type metadata for DisplayList.HostedViews.ResponderFilter;
}

ValueMetadata *type metadata accessor for DisplayList.HostedViews()
{
  return &type metadata for DisplayList.HostedViews;
}

ValueMetadata *type metadata accessor for DisplayList.HostedViews.Value()
{
  return &type metadata for DisplayList.HostedViews.Value;
}

uint64_t destroy for DisplayList.HostedViewState(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DisplayList.HostedViewState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v6;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  id v7 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DisplayList.HostedViewState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  return a1;
}

__n128 __swift_memcpy124_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(_OWORD *)(a1 + 108) = *(long long *)((char *)a2 + 108);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for DisplayList.HostedViewState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.HostedViewState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 124)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.HostedViewState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 120) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 124) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 124) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.HostedViewState()
{
  return &type metadata for DisplayList.HostedViewState;
}

unint64_t lazy protocol witness table accessor for type DisplayList.HostedViews and conformance DisplayList.HostedViews()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.HostedViews and conformance DisplayList.HostedViews;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews and conformance DisplayList.HostedViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews and conformance DisplayList.HostedViews);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.HostedViews and conformance DisplayList.HostedViews;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews and conformance DisplayList.HostedViews)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews and conformance DisplayList.HostedViews);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews.ResponderFilter and conformance DisplayList.HostedViews.ResponderFilter);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViews.SplicedDisplayList and conformance DisplayList.HostedViews.SplicedDisplayList);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in DisplayList.HostedViews.Preference<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for DisplayList.HostedViewState.Key(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DisplayList.HostedViewState.Key);
}

void (*specialized MutableBox.wrappedValue.modify(void *a1))(uint64_t a1, char a2)
{
  long long v3 = (char *)malloc(0x2A0uLL);
  *a1 = v3;
  *((void *)v3 + 83) = v1;
  swift_beginAccess();
  long long v4 = v1[5];
  long long v5 = v1[6];
  *((_OWORD *)v3 + 4) = v4;
  *((_OWORD *)v3 + 5) = v5;
  long long v6 = v1[7];
  *((_OWORD *)v3 + 6) = v6;
  long long v7 = *(_OWORD *)((char *)v1 + 124);
  *(_OWORD *)(v3 + 108) = v7;
  long long v8 = v1[1];
  long long v9 = v1[2];
  *(_OWORD *)long long v3 = v8;
  *((_OWORD *)v3 + 1) = v9;
  long long v10 = v1[3];
  long long v11 = v1[4];
  *((_OWORD *)v3 + 2) = v10;
  *((_OWORD *)v3 + 3) = v11;
  *((_OWORD *)v3 + 8) = v8;
  *((_OWORD *)v3 + 9) = v9;
  *((_OWORD *)v3 + 10) = v10;
  *((_OWORD *)v3 + 11) = v11;
  *((_OWORD *)v3 + 12) = v4;
  *((_OWORD *)v3 + 13) = v5;
  *((_OWORD *)v3 + 14) = v6;
  *(_OWORD *)(v3 + 236) = v7;
  outlined retain of DisplayList.HostedViewState((uint64_t)v3);
  return MutableBox.wrappedValue.modifyspecialized ;
}

void MutableBox.wrappedValue.modifyspecialized (uint64_t a1, char a2)
{
  unint64_t v2 = *(_OWORD **)a1;
  long long v3 = (_OWORD *)(*(void *)a1 + 128);
  long long v4 = (_OWORD *)(*(void *)a1 + 256);
  long long v5 = *(_OWORD **)(*(void *)a1 + 664);
  if (a2)
  {
    long long v6 = *(_OWORD *)(*(void *)a1 + 144);
    v2[32] = *v3;
    v2[33] = v6;
    long long v7 = v3[3];
    long long v9 = *v3;
    long long v8 = v3[1];
    long long v10 = v3[2];
    long long v11 = v7;
    v2[34] = v10;
    v2[35] = v7;
    *(_OWORD *)((char *)v2 + 620) = *(_OWORD *)((char *)v3 + 108);
    long long v12 = v3[6];
    v2[37] = v3[5];
    v2[38] = v12;
    v2[36] = v3[4];
    long long v13 = v5[1];
    long long v14 = v5[2];
    long long v15 = v5[4];
    v2[26] = v5[3];
    v2[27] = v15;
    v2[24] = v13;
    v2[25] = v14;
    long long v16 = v5[5];
    long long v17 = v5[6];
    long long v18 = v5[7];
    *(_OWORD *)((char *)v2 + 492) = *(_OWORD *)((char *)v5 + 124);
    v2[29] = v17;
    v2[30] = v18;
    v2[28] = v16;
    v5[3] = v10;
    v5[4] = v11;
    v5[1] = v9;
    _OWORD v5[2] = v8;
    long long v19 = v3[4];
    long long v20 = v3[5];
    long long v21 = v3[6];
    *(_OWORD *)((char *)v5 + 124) = *(_OWORD *)((char *)v3 + 108);
    void v5[6] = v20;
    v5[7] = v21;
    v5[5] = v19;
    outlined retain of DisplayList.HostedViewState((uint64_t)(v2 + 32));
    outlined release of DisplayList.HostedViewState((uint64_t)(v2 + 24));
    long long v22 = v3[5];
    void v4[4] = v3[4];
    void v4[5] = v22;
    v4[6] = v3[6];
    *(_OWORD *)((char *)v4 + 108) = *(_OWORD *)((char *)v3 + 108);
    long long v23 = v3[1];
    *long long v4 = *v3;
    v4[1] = v23;
    long long v24 = v3[3];
    uint64_t v4[2] = v3[2];
    v4[3] = v24;
  }
  else
  {
    long long v25 = v5[4];
    long long v27 = v5[1];
    long long v26 = v5[2];
    *(_OWORD *)(*(void *)a1 + 288) = v5[3];
    v4[3] = v25;
    *long long v4 = v27;
    v4[1] = v26;
    long long v29 = v5[6];
    long long v28 = v5[7];
    long long v30 = v5[5];
    *(_OWORD *)((char *)v4 + 108) = *(_OWORD *)((char *)v5 + 124);
    void v4[5] = v29;
    v4[6] = v28;
    void v4[4] = v30;
    long long v31 = *v3;
    long long v32 = v3[1];
    long long v33 = v3[3];
    v5[3] = v3[2];
    v5[4] = v33;
    v5[1] = v31;
    _OWORD v5[2] = v32;
    long long v34 = v3[4];
    long long v35 = v3[5];
    long long v36 = v3[6];
    *(_OWORD *)((char *)v5 + 124) = *(_OWORD *)((char *)v3 + 108);
    void v5[6] = v35;
    v5[7] = v36;
    v5[5] = v34;
  }
  outlined release of DisplayList.HostedViewState((uint64_t)v4);

  free(v2);
}

void specialized DisplayList.HostedViewResponder.update(info:size:position:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t *a6, char a7)
{
  uint64_t v8 = v7;
  uint64_t v12 = *a6;
  uint64_t v13 = a6[1];
  uint64_t v14 = a6[2];
  uint64_t v15 = a6[3];
  uint64_t v16 = a6[4];
  *(void *)(v8 + 216) = a1;
  swift_retain();
  swift_release();
  swift_beginAccess();
  swift_retain();
  uint64_t v17 = swift_bridgeObjectRetain();
  specialized Sequence.compactMap<A>(_:)(v17, a1);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v18 = MultiViewResponder.children.setter();
  *(double *)(v8 + 224) = MEMORY[0x18C114450](v18);
  *(void *)(v8 + 232) = v19;
  if (a5 & 1) != 0 || (a7)
  {
    swift_beginAccess();
    *(void *)(v8 + 240) = v12;
    *(void *)(v8 + 248) = v13;
    *(void *)(v8 + 256) = v14;
    *(void *)(v8 + 264) = v15;
    *(void *)(v8 + 272) = v16;
    swift_retain();
    uint64_t v20 = swift_release();
    double v21 = MEMORY[0x18C10C240](v20);
    unint64_t v23 = v22;
    swift_beginAccess();
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v23, *(unint64_t *)&v21));
    swift_endAccess();
  }
}

uint64_t outlined destroy of DisplayList.HostedViewState.ViewInfo(uint64_t a1)
{
  return a1;
}

uint64_t sub_187AB6804()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined assign with copy of DisplayList.ArchiveIDs?(uint64_t a1, uint64_t a2)
{
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of DisplayList.HostedViewState.Key(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_187AB6938()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined retain of DisplayList.HostedViewState(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  return a1;
}

uint64_t outlined release of DisplayList.HostedViewState(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

uint64_t outlined copy of ContentTransition.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_187AB6A7C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)()
{
  return closure #2 in DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)(*(void *)(v0 + 16));
}

uint64_t type metadata accessor for DisplayList.HostedViewState.FetchView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DisplayList.HostedViewState.FetchView);
}

void type metadata accessor for DisplayList.HostedViewState.ViewInfo?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child;
  if (!lazy protocol witness table cache variable for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayList.HostedViewState.Child and conformance DisplayList.HostedViewState.Child);
  }
  return result;
}

void type metadata accessor for (key: DisplayList.HostedViewState.Key, value: DisplayList.HostedViewState.ViewInfo)()
{
  if (!lazy cache variable for type metadata for (key: DisplayList.HostedViewState.Key, value: DisplayList.HostedViewState.ViewInfo))
  {
    type metadata accessor for DisplayList.HostedViewState.Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: DisplayList.HostedViewState.Key, value: DisplayList.HostedViewState.ViewInfo));
    }
  }
}

void *type metadata accessor for DisplayList.HostedViewState.Child()
{
  return &unk_1ED40E500;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisplayList.HostedViewState.FetchView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  id v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *id v3 = *a2;
    id v3 = (uint64_t *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    *(uint64_t *)((char *)a1 + v5) = *(uint64_t *)((char *)a2 + v5);
    uint64_t v8 = *(int *)(type metadata accessor for DisplayList.HostedViewState.Key(0) + 24);
    long long v9 = &v6[v8];
    long long v10 = &v7[v8];
    uint64_t v11 = type metadata accessor for UUID();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
  }
  return v3;
}

uint64_t destroy for DisplayList.HostedViewState.FetchView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = v2 + *(int *)(type metadata accessor for DisplayList.HostedViewState.Key(0) + 24);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v3, 1, v4);
  if (!result)
  {
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
    return v6(v3, v4);
  }
  return result;
}

_DWORD *initializeWithCopy for DisplayList.HostedViewState.FetchView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(void *)((char *)a1 + v4) = *(void *)((char *)a2 + v4);
  uint64_t v7 = *(int *)(type metadata accessor for DisplayList.HostedViewState.Key(0) + 24);
  uint64_t v8 = &v5[v7];
  long long v9 = &v6[v7];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

_DWORD *assignWithCopy for DisplayList.HostedViewState.FetchView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (_DWORD *)((char *)a1 + v4);
  uint64_t v6 = (char *)a2 + v4;
  *uint64_t v5 = *(_DWORD *)((char *)a2 + v4);
  v5[1] = *(_DWORD *)((char *)a2 + v4 + 4);
  uint64_t v7 = *(int *)(type metadata accessor for DisplayList.HostedViewState.Key(0) + 24);
  uint64_t v8 = (char *)v5 + v7;
  long long v9 = &v6[v7];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 24))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

_DWORD *initializeWithTake for DisplayList.HostedViewState.FetchView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(void *)((char *)a1 + v4) = *(void *)((char *)a2 + v4);
  uint64_t v7 = *(int *)(type metadata accessor for DisplayList.HostedViewState.Key(0) + 24);
  uint64_t v8 = &v5[v7];
  long long v9 = &v6[v7];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  return a1;
}

_DWORD *assignWithTake for DisplayList.HostedViewState.FetchView(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  *(void *)((char *)a1 + v4) = *(void *)((char *)a2 + v4);
  uint64_t v7 = *(int *)(type metadata accessor for DisplayList.HostedViewState.Key(0) + 24);
  uint64_t v8 = &v5[v7];
  long long v9 = &v6[v7];
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.HostedViewState.FetchView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187AB74C8);
}

uint64_t sub_187AB74C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for DisplayList.HostedViewState.FetchView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187AB754C);
}

uint64_t sub_187AB754C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for DisplayList.HostedViewState.FetchView()
{
  uint64_t result = type metadata accessor for DisplayList.HostedViewState.Key(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for DisplayList.HostedViewState.ViewInfo(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t assignWithCopy for DisplayList.HostedViewState.ViewInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void **)(a1 + 144);
  uint64_t v5 = *(void **)(a2 + 144);
  *(void *)(a1 + 144) = v5;
  id v6 = v5;

  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy176_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for DisplayList.HostedViewState.ViewInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  long long v6 = *(void **)(a1 + 144);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);

  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.HostedViewState.ViewInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayList.HostedViewState.ViewInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayList.HostedViewState.ViewInfo()
{
  return &type metadata for DisplayList.HostedViewState.ViewInfo;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisplayList.HostedViewState.Key(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *long long v3 = *a2;
    long long v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 24);
    long long v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
      memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v6, v7, v8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t destroy for DisplayList.HostedViewState.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(v2, v3);
  }
  return result;
}

void *initializeWithCopy for DisplayList.HostedViewState.Key(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_DWORD *assignWithCopy for DisplayList.HostedViewState.Key(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 24))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
    memcpy(v5, v6, *(void *)(*(void *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v5, v6, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

void *initializeWithTake for DisplayList.HostedViewState.Key(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for DisplayList.HostedViewState.Key(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48);
  int v10 = v9(v5, 1, v7);
  int v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (!v11)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 40))(v5, v6, v7);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
    memcpy(v5, v6, *(void *)(*(void *)(v12 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayList.HostedViewState.Key(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187AB81F8);
}

uint64_t sub_187AB81F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 24);
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t storeEnumTagSinglePayload for DisplayList.HostedViewState.Key(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187AB82AC);
}

uint64_t sub_187AB82AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 24);
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

void type metadata completion function for DisplayList.HostedViewState.Key()
{
  _s10Foundation4UUIDVSgMaTm_1(319, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t base witness table accessor for _AttributeBody in DisplayList.HostedViewState.FetchView()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type DisplayList.HostedViewState.FetchView and conformance DisplayList.HostedViewState.FetchView, (void (*)(uint64_t))type metadata accessor for DisplayList.HostedViewState.FetchView);
}

uint64_t base witness table accessor for Equatable in DisplayList.HostedViewState.Key()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type DisplayList.HostedViewState.Key and conformance DisplayList.HostedViewState.Key, (void (*)(uint64_t))type metadata accessor for DisplayList.HostedViewState.Key);
}

void VibrantColorForegroundStyle.init(_:alwaysAppearsActive:)()
{
}

void VibrantColorForegroundStyle._apply(to:)()
{
}

uint64_t assignWithCopy for VibrantColorForegroundStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for VibrantColorForegroundStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for VibrantColorForegroundStyle(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VibrantColorForegroundStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VibrantColorForegroundStyle()
{
  return &type metadata for VibrantColorForegroundStyle;
}

void VibrantColorForegroundStyle.init(_:sensitiveToControlActiveState:)()
{
}

uint64_t *assignWithCopy for GradientBackground(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v4);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  outlined consume of Environment<Color?>.Content(v5, v6);
  return a1;
}

uint64_t *assignWithTake for GradientBackground(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *a1;
  uint64_t v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((unsigned char *)a1 + 8) = v4;
  outlined consume of Environment<Color?>.Content(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for GradientBackground()
{
  return &type metadata for GradientBackground;
}

uint64_t associated type witness table accessor for View.Body : View in GradientBackground()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in GradientBackground.body.getter@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t a3@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<Color>();
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18834BB70;
  uint64_t v6 = a2 & 1;
  outlined copy of Environment<Color?>.Content(a1, v6);
  uint64_t v7 = specialized Environment.wrappedValue.getter(a1, a2 & 1);
  outlined consume of Environment<Color?>.Content(a1, v6);
  if (!v7) {
    uint64_t v7 = static Color.accentColor.getter();
  }
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = static Color.clear.getter();
  specialized Array._endMutation()();
  GeometryProxy.safeAreaInsets.getter();
  double v27 = v8;
  GeometryProxy.size.getter();
  double v10 = v9;
  GeometryProxy.safeAreaInsets.getter();
  double v12 = v11;
  GeometryProxy.safeAreaInsets.getter();
  double v14 = v13;
  if (one-time initialization token for minimumComponentHeight != -1) {
    swift_once();
  }
  double v15 = *(double *)&static ClarityUIMetrics.minimumComponentHeight;
  if (one-time initialization token for backButtonPadding != -1) {
    swift_once();
  }
  double v16 = *(double *)&static ClarityUIMetrics.backButtonPadding;
  GeometryProxy.size.getter();
  double v18 = v17;
  GeometryProxy.safeAreaInsets.getter();
  double v20 = v19;
  GeometryProxy.safeAreaInsets.getter();
  double v22 = v21;
  uint64_t v23 = MEMORY[0x18C114170](v5);
  char v24 = static Edge.Set.all.getter();
  if (one-time initialization token for clarityUIContentBackground != -1) {
    swift_once();
  }
  uint64_t v25 = static Color.clarityUIContentBackground;
  swift_retain();
  uint64_t result = static Edge.Set.all.getter();
  *(void *)a3 = v23;
  *(void *)(a3 + 8) = 0x3FE0000000000000;
  *(double *)(a3 + 16) = v27 / (v10 + v12 + v14);
  *(void *)(a3 + 24) = 0x3FE0000000000000;
  *(double *)(a3 + 32) = 1.0 - (v15 + v16 + v16) / (v18 + v20 + v22);
  *(void *)(a3 + 40) = 0x3FC3333333333333;
  *(unsigned char *)(a3 + 48) = v24;
  *(void *)(a3 + 56) = v25;
  *(unsigned char *)(a3 + 64) = result;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance GradientBackground@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *((unsigned __int8 *)v1 + 8);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(unsigned char *)(v5 + 24) = v4;
  *a1 = partial apply for closure #1 in GradientBackground.body.getter;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v5;

  return outlined copy of Environment<Color?>.Content(v3, v4);
}

uint64_t sub_187AB8BE0()
{
  outlined consume of Environment<Color?>.Content(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in GradientBackground.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in GradientBackground.body.getter(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

void type metadata accessor for _ContiguousArrayStorage<Color>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Color>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Color>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>> and conformance GeometryReader<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>> and conformance GeometryReader<A>;
  if (!lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>> and conformance GeometryReader<A>)
  {
    type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>> and conformance GeometryReader<A>);
  }
  return result;
}

void type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>>()
{
  if (!lazy cache variable for type metadata for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for GeometryReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>();
    type metadata accessor for ModifiedContent<LinearGradient, _OpacityEffect>(255, &lazy cache variable for type metadata for _BackgroundStyleModifier<Color>, MEMORY[0x1E4F414E0], MEMORY[0x1E4F414D0], MEMORY[0x1E4F40E10]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>)
  {
    type metadata accessor for ModifiedContent<LinearGradient, _OpacityEffect>(255, &lazy cache variable for type metadata for ModifiedContent<LinearGradient, _OpacityEffect>, MEMORY[0x1E4F3F990], MEMORY[0x1E4F3FA70], MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>);
    }
  }
}

void type metadata accessor for ModifiedContent<LinearGradient, _OpacityEffect>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _BackgroundStyleModifier<Color> and conformance _BackgroundStyleModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>, _BackgroundStyleModifier<Color>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout>();
    lazy protocol witness table accessor for type ModifiedContent<LinearGradient, _OpacityEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LinearGradient, _OpacityEffect>, _SafeAreaIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LinearGradient, _OpacityEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LinearGradient, _OpacityEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LinearGradient, _OpacityEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LinearGradient, _OpacityEffect>(255, &lazy cache variable for type metadata for ModifiedContent<LinearGradient, _OpacityEffect>, MEMORY[0x1E4F3F990], MEMORY[0x1E4F3FA70], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type LinearGradient and conformance LinearGradient();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LinearGradient, _OpacityEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LinearGradient and conformance LinearGradient()
{
  unint64_t result = lazy protocol witness table cache variable for type LinearGradient and conformance LinearGradient;
  if (!lazy protocol witness table cache variable for type LinearGradient and conformance LinearGradient)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearGradient and conformance LinearGradient);
  }
  return result;
}

uint64_t Scene.transformEnvironment<A>(_:transform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_retain();
  swift_retain();
  v11[0] = _EnvironmentKeyTransformModifier.init(keyPath:transform:)();
  v11[1] = v7;
  _OWORD v11[2] = v8;
  uint64_t v9 = type metadata accessor for _EnvironmentKeyTransformModifier();
  Scene.modifier<A>(_:)(v11, a4, v9, a5);
  swift_release();
  return swift_release();
}

uint64_t key path setter for EnvironmentValues.subscript<A>(_:) : <A><A1>EnvironmentValuesA1()
{
  uint64_t v0 = swift_unknownObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_unknownObjectRelease();
}

uint64_t sub_187AB91DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized EnvironmentValues.subscript.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187AB9228()
{
  return 32;
}

uint64_t sub_187AB9234()
{
  return 1;
}

Swift::Int sub_187AB923C(uint64_t a1, uint64_t a2)
{
  return specialized EnvironmentObjectKey.hashValue.getter(*(void *)(a2 + a1 - 24));
}

__n128 sub_187AB9248(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t Scene.environmentObject<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (void *)static ObservableObject.environmentStore.getter();
  uint64_t v9 = a1;
  swift_unknownObjectRetain();
  Scene.environment<A>(_:_:)(v7, (uint64_t)&v9, a2, a4);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_187AB92F0()
{
  return swift_getWitnessTable();
}

Swift::Int specialized EnvironmentObjectKey.hashValue.getter(Swift::UInt a1)
{
  return Hasher._finalize()();
}

uint64_t specialized EnvironmentValues.subscript.getter()
{
  return EnvironmentValues.subscript.getter();
}

uint64_t type metadata completion function for LayoutGestureResponder()
{
  return swift_initClassMetadata2();
}

double static LayoutGestureModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v42 = a5;
  uint64_t v43 = a4;
  long long v44 = a6;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  int v34 = *a1;
  uint64_t v6 = *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 28);
  int v11 = *(_DWORD *)(a2 + 32);
  int v12 = *(_DWORD *)(a2 + 36);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  int v16 = *(_DWORD *)(a2 + 56);
  int v15 = *(_DWORD *)(a2 + 60);
  int v17 = *(_DWORD *)(a2 + 64);
  int v18 = *(_DWORD *)(a2 + 68);
  int v19 = *(_DWORD *)(a2 + 72);
  int v20 = *(_DWORD *)(a2 + 76);
  int v21 = *(_DWORD *)(a2 + 80);
  uint64_t v47 = *(void *)a2;
  LODWORD(v48) = v7;
  uint64_t v49 = v8;
  int v40 = v15;
  int v41 = v9;
  int v50 = v9;
  int v51 = v10;
  int v52 = v11;
  int v53 = v12;
  uint64_t v54 = v14;
  uint64_t v55 = v13;
  int v56 = v16;
  int v57 = v15;
  int v38 = v18;
  int v39 = v17;
  int v58 = v17;
  int v59 = v18;
  int v37 = v19;
  int v60 = v19;
  int v61 = v20;
  int v36 = v20;
  int v35 = v21;
  int v62 = v21;
  a3(&v45, a1, &v47);
  uint64_t v47 = v13;
  LODWORD(v48) = v16;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v47 = v45;
    double v48 = v46;
    int v33 = _ViewOutputs.viewResponders()();
    int v31 = v12;
    uint64_t v32 = type metadata accessor for LayoutGestureResponder();
    LODWORD(v47) = v34;
    type metadata accessor for LayoutGestureModifier();
    type metadata accessor for _GraphValue();
    int v22 = _GraphValue.value.getter();
    uint64_t v47 = v6;
    LODWORD(v48) = v7;
    uint64_t v49 = v8;
    int v50 = v41;
    int v51 = v10;
    int v52 = v11;
    int v53 = v12;
    uint64_t v54 = v14;
    uint64_t v55 = v13;
    int v56 = v16;
    int v57 = v40;
    int v58 = v39;
    int v59 = v38;
    int v60 = v37;
    int v61 = v36;
    int v62 = v35;
    swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = LayoutGestureResponder.init(modifier:inputs:)(v22, &v47);
    LODWORD(v47) = v33;
    double v48 = *(double *)&v23;
    MEMORY[0x1F4188790](v23);
    uint64_t v29 = type metadata accessor for LayoutResponderFilter();
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSay7SwiftUI13ViewResponderCGMaTm_1(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v47, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)&v28, v29, MEMORY[0x1E4FBC248], v24, MEMORY[0x1E4FBC278], v25);
    swift_release();
    LOBYTE(v47) = 0;
    _ViewOutputs.subscript.setter();
  }
  long long v26 = v44;
  *long long v44 = v45;
  double result = v46;
  *((double *)v26 + 1) = v46;
  return result;
}

uint64_t LayoutGestureResponder.__allocating_init(modifier:inputs:)(int a1, uint64_t *a2)
{
  return LayoutGestureResponder.init(modifier:inputs:)(a1, a2);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LayoutGestureModifier<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, int *, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  return static LayoutGestureModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LayoutGestureModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t View.layoutGesture<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = a1;
  v9[1] = a2;
  uint64_t v7 = type metadata accessor for LayoutGestureModifier();
  swift_retain();
  MEMORY[0x18C113660](v9, a3, v7, a5);
  return swift_release();
}

uint64_t LayoutResponderFilter.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _GestureOutputs<()>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_188351940;
    *(void *)(v4 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t LayoutGestureResponder.init(modifier:inputs:)(int a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v6 = *((_DWORD *)a2 + 20);
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_DWORD *)(v2 + 88) = a1;
  *(void *)(v2 + 96) = v3;
  *(_DWORD *)(v2 + 104) = v4;
  *(void *)(v2 + 112) = v5;
  *(_OWORD *)(v2 + 120) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(v2 + 136) = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(v2 + 152) = *(_OWORD *)(a2 + 7);
  *(void *)(v2 + 168) = a2[9];
  *(_DWORD *)(v2 + 176) = v6;
  id v7 = (id)AGSubgraphGetCurrent();
  if (v7)
  {
    *(void *)(v2 + 184) = v7;
  }
  else
  {
    __break(1u);
  }
  return MEMORY[0x1F40FF578]();
}

void LayoutGestureResponder.makeGesture(inputs:)(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  long long v5 = a1[5];
  v29[4] = a1[4];
  uint64_t v29[5] = v5;
  *(_OWORD *)long long v30 = a1[6];
  *(_OWORD *)&v30[12] = *(long long *)((char *)a1 + 108);
  long long v6 = a1[1];
  v29[0] = *a1;
  v29[1] = v6;
  long long v7 = a1[3];
  v29[2] = a1[2];
  v29[3] = v7;
  _GestureInputs.makeDefaultOutputs<A>()();
  if (!AGSubgraphIsValid()) {
    goto LABEL_11;
  }
  id v24 = (id)AGSubgraphGetCurrent();
  if (!v24)
  {
    __break(1u);
    goto LABEL_13;
  }
  char v8 = v30[24];
  id v9 = (id)AGSubgraphGetGraph();
  uint64_t v10 = AGSubgraphCreate();

  int v11 = *(void **)(v2 + 192);
  *(void *)(v2 + 192) = v10;

  int v12 = *(void **)(v2 + 192);
  if (!v12)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  id v13 = v12;
  AGSubgraphRef.addSecondaryChild(_:)();

  if (!*(void *)(v2 + 192))
  {
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  AGSubgraphAddChild();
  if ((v8 & 0x10) == 0) {
    goto LABEL_9;
  }
  id v14 = (id)AGSubgraphGetGraph();
  uint64_t v15 = AGSubgraphCreate();

  int v16 = *(void **)(v3 + 200);
  *(void *)(v3 + 200) = v15;

  int v17 = *(void **)(v3 + 192);
  if (!v17)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  int v18 = *(void **)(v3 + 200);
  if (v18)
  {
    id v19 = v17;
    id v20 = v18;
    AGSubgraphRef.addSecondaryChild(_:)();

LABEL_9:
    int v21 = *(void **)(v3 + 192);
    if (v21)
    {
      id v22 = v21;
      AGGraphClearUpdate();
      id v23 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      closure #1 in LayoutGestureResponder.makeGesture(inputs:)(v3, v29);
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
LABEL_11:
      *(_DWORD *)a2 = v25;
      *(_DWORD *)(a2 + 4) = v26;
      *(void *)(a2 + 8) = v27;
      *(_DWORD *)(a2 + 16) = v28;
      return;
    }
    goto LABEL_15;
  }
LABEL_17:
  __break(1u);
}

uint64_t closure #1 in LayoutGestureResponder.makeGesture(inputs:)(uint64_t a1, long long *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(*(void *)a1 + class metadata base offset for LayoutGestureResponder);
  uint64_t v4 = *(void *)(*(void *)a1 + class metadata base offset for LayoutGestureResponder + 8);
  LODWORD(v49) = *(_DWORD *)(a1 + 88);
  *((void *)&v49 + 1) = a1;
  uint64_t v30 = v5;
  uint64_t v31 = type metadata accessor for LayoutGestureChild();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v6 = type metadata accessor for Attribute();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v49, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v29, v31, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  swift_release();
  unint64_t v8 = AGCreateWeakAttribute();
  int v9 = v8;
  unint64_t v10 = HIDWORD(v8);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v5;
  *(void *)(v11 + 24) = v4;
  *(_DWORD *)(v11 + 32) = v9;
  *(_DWORD *)(v11 + 36) = v10;
  uint64_t v12 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = partial apply for closure #1 in closure #1 in LayoutGestureResponder.makeGesture(inputs:);
  *(void *)(a1 + 216) = v11;
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v12);
  long long v14 = a2[5];
  long long v53 = a2[4];
  long long v54 = v14;
  v55[0] = a2[6];
  *(_OWORD *)((char *)v55 + 12) = *(long long *)((char *)a2 + 108);
  long long v15 = a2[1];
  long long v49 = *a2;
  long long v50 = v15;
  long long v16 = a2[3];
  long long v51 = a2[2];
  long long v52 = v16;
  int v17 = *(_DWORD *)(a1 + 104);
  uint64_t v18 = *(void *)(a1 + 112);
  uint64_t v19 = *(void *)(a1 + 136);
  uint64_t v20 = *(void *)(a1 + 144);
  int v21 = *(_DWORD *)(a1 + 176);
  uint64_t v40 = *(void *)(a1 + 96);
  int v41 = v17;
  long long v43 = *(_OWORD *)(a1 + 120);
  uint64_t v42 = v18;
  uint64_t v44 = v19;
  uint64_t v45 = v20;
  long long v46 = *(_OWORD *)(a1 + 152);
  uint64_t v47 = *(void *)(a1 + 168);
  int v48 = v21;
  id v22 = *(void **)(a1 + 200);
  if (v22)
  {
    id v23 = *(id *)(a1 + 200);
LABEL_5:
    outlined retain of _GestureInputs((uint64_t)a2);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v25 = v22;
    _GestureInputs.mergeViewInputs(_:viewSubgraph:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    _GraphValue.init(_:)();
    long long v26 = a2[5];
    long long v37 = a2[4];
    long long v38 = v26;
    v39[0] = a2[6];
    *(_OWORD *)((char *)v39 + 12) = *(long long *)((char *)a2 + 108);
    long long v27 = a2[1];
    long long v33 = *a2;
    long long v34 = v27;
    long long v28 = a2[3];
    long long v35 = a2[2];
    long long v36 = v28;
    static Gesture.makeDebuggableGesture(gesture:inputs:)();
    type metadata accessor for _GestureOutputs<()>(0, &lazy cache variable for type metadata for _GestureOutputs<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F3FC30]);
    _GestureOutputs.overrideDefaultValues(_:)();
    long long v37 = v53;
    long long v38 = v54;
    v39[0] = v55[0];
    *(_OWORD *)((char *)v39 + 12) = *(_OWORD *)((char *)v55 + 12);
    long long v33 = v49;
    long long v34 = v50;
    long long v35 = v51;
    long long v36 = v52;
    outlined release of _GestureInputs((uint64_t)&v33);
    return swift_bridgeObjectRelease();
  }
  id v24 = *(void **)(a1 + 192);
  if (v24)
  {
    id v23 = v24;
    id v22 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in LayoutGestureResponder.makeGesture(inputs:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1;
  unint64_t v6 = HIDWORD(a1);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = a2;
  *(void *)(v7 + 24) = a3;
  *(_DWORD *)(v7 + 32) = v5;
  *(_DWORD *)(v7 + 36) = v6;
  static Update.enqueueAction(_:)();

  return swift_release();
}

uint64_t LayoutGestureResponder.childrenDidChange()()
{
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 208);
  if (v1)
  {
    uint64_t v2 = swift_retain();
    v1(v2);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v1);
  }
  type metadata accessor for MultiViewResponder();
  uint64_t v3 = (uint64_t (*)(void))method lookup function for MultiViewResponder();

  return v3();
}

uint64_t LayoutGestureResponder.resetGesture()()
{
  uint64_t v1 = v0[26];
  v0[26] = 0;
  v0[27] = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  uint64_t v2 = (void *)v0[24];
  v0[24] = 0;

  uint64_t v3 = (void *)v0[25];
  v0[25] = 0;

  type metadata accessor for MultiViewResponder();
  uint64_t v4 = (uint64_t (*)(void))method lookup function for ResponderNode();

  return v4();
}

void LayoutGestureResponder.__allocating_init()()
{
}

uint64_t LayoutGestureResponder.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  uint64_t v1 = *(void *)(v0 + 208);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t LayoutGestureResponder.deinit()
{
  uint64_t v0 = MultiViewResponder.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + 208));
  return v0;
}

uint64_t LayoutGestureResponder.__deallocating_deinit()
{
  LayoutGestureResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LayoutGestureResponder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LayoutGestureModifier()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in LayoutGestureModifier<A>()
{
  return &protocol witness table for LayoutGestureModifier<A>;
}

uint64_t LayoutGestureChild.value.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for LayoutGestureModifier();
  uint64_t v3 = *(void (**)(uint64_t))AGGraphGetValue();
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance LayoutGestureChild<A>()
{
  return LayoutGestureChild.value.getter(*v0, *((void *)v0 + 1));
}

uint64_t type metadata accessor for LayoutResponderFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LayoutGestureChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187ABA4D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LayoutGestureResponder.makeGesture(inputs:)()
{
  return closure #1 in closure #1 in LayoutGestureResponder.makeGesture(inputs:)(*(void *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_187ABA4EC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in LayoutGestureResponder.makeGesture(inputs:)()
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x1E4F4E7A0])
  {
    return AGGraphInvalidateValue();
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in LayoutGestureChild<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in LayoutResponderFilter<A>()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _GestureOutputs<()>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t MapKitViewTraitCollection.init()@<X0>(void *a1@<X8>)
{
  uint64_t result = ViewTraitCollection.init()();
  *a1 = v3;
  return result;
}

uint64_t MapKitViewTraitCollection.subscript.getter()
{
  return ViewTraitCollection.value<A>(for:)();
}

uint64_t MapKitViewTraitCollection.subscript.setter(uint64_t a1)
{
  specialized MapKitViewTraitCollection.subscript.setter(a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

void (*MapKitViewTraitCollection.subscript.modify(void *a1, uint64_t a2, uint64_t a3, uint64_t a4))(uint64_t a1, char a2)
{
  int v9 = malloc(0x40uLL);
  *a1 = v9;
  void v9[2] = a4;
  uint64_t v9[3] = v4;
  *int v9 = a2;
  v9[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  void v9[4] = AssociatedTypeWitness;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  void v9[5] = v11;
  size_t v12 = *(void *)(v11 + 64);
  v9[6] = malloc(v12);
  v9[7] = malloc(v12);
  ViewTraitCollection.value<A>(for:)();
  return MapKitViewTraitCollection.subscript.modify;
}

void MapKitViewTraitCollection.subscript.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 56);
  uint64_t v5 = *(void *)(*(void *)a1 + 32);
  uint64_t v6 = *(void *)(*(void *)a1 + 40);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 48), v4, v5);
    specialized MapKitViewTraitCollection.subscript.setter((uint64_t)v3);
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    specialized MapKitViewTraitCollection.subscript.setter(*(void *)(*(void *)a1 + 56));
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t specialized MapKitViewTraitCollection.subscript.setter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v3 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - v4, a1, v3);
  return ViewTraitCollection.subscript.setter();
}

ValueMetadata *type metadata accessor for MapKitViewTraitCollection()
{
  return &type metadata for MapKitViewTraitCollection;
}

uint64_t key path getter for EnvironmentValues.menuTitleVisibility : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.menuTitleVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.menuTitleVisibility : EnvironmentValues()
{
  return EnvironmentValues.menuTitleVisibility.setter();
}

uint64_t PaletteControlGroupStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = KeyPath;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 32) = 0;
  return result;
}

uint64_t PaletteControlGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v15 = *v1;
  long long v16 = v3;
  char v17 = *((unsigned char *)v1 + 32);
  uint64_t v4 = static VerticalAlignment.center.getter();
  uint64_t v18 = 0;
  *(void *)&long long v19 = 0xE000000000000000;
  uint64_t v14 = Namespace.wrappedValue.getter();
  _print_unlocked<A, B>(_:_:)();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0;
  *(void *)(v5 + 24) = 0xE000000000000000;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = *((void *)&v15 + 1);
  uint64_t v8 = v16;
  outlined retain of PaletteControlGroupStyle((uint64_t)&v15, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v7, v8);
  specialized Environment.wrappedValue.getter(v7, v8, &v14);
  outlined consume of Environment<Bool?>.Content(v7, v8);
  outlined retain of PaletteControlGroupStyle((uint64_t)&v15, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool?>.Content);
  uint64_t v18 = (unsigned __int16)v14;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  uint64_t v9 = swift_allocObject();
  outlined init with take of PlatformItemList.Item.SystemItem?((uint64_t)&v18, v9 + 16);
  uint64_t v10 = swift_allocObject();
  long long v11 = v16;
  *(_OWORD *)(v10 + 16) = v15;
  *(_OWORD *)(v10 + 32) = v11;
  *(unsigned char *)(v10 + 48) = v17;
  uint64_t v12 = swift_getKeyPath();
  LOBYTE(v14) = 1;
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = partial apply for closure #1 in View.platformItemIdentifier(_:);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = KeyPath;
  *(unsigned char *)(a1 + 80) = 1;
  *(void *)(a1 + 88) = partial apply for closure #1 in View.platformItemSystemType(_:);
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = partial apply for closure #3 in PaletteControlGroupStyle.makeBody(configuration:);
  *(void *)(a1 + 112) = v10;
  *(void *)(a1 + 120) = v12;
  *(void *)(a1 + 128) = closure #4 in PaletteControlGroupStyle.makeBody(configuration:);
  *(void *)(a1 + 136) = 0;
  return outlined retain of PaletteControlGroupStyle((uint64_t)&v15, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
}

void closure #3 in PaletteControlGroupStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 32);
  outlined retain of PaletteControlGroupStyle(a2, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v4, v5);
  int v6 = specialized Environment.wrappedValue.getter(v4, v5);
  outlined consume of Environment<Bool?>.Content(v4, v5);
  outlined retain of PaletteControlGroupStyle(a2, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool?>.Content);
  if (v6 == 2)
  {
    uint64_t v7 = *(void **)a1;
    uint64_t v8 = *(void *)(*(void *)a1 + 16);
    if (v8)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_10:
      }
        uint64_t v7 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v7);
      for (unint64_t i = 0; i != v8; ++i)
      {
        if (i >= v7[2])
        {
          __break(1u);
          goto LABEL_10;
        }
        uint64_t v10 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
        long long v11 = (char *)v7 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
        uint64_t v12 = *(void *)(v10 + 72) * i;
        id v13 = *(void **)&v11[v12];
        *(void *)&v11[v12] = 0;
      }
      *(void *)a1 = v7;
    }
  }
}

unsigned char *closure #4 in PaletteControlGroupStyle.makeBody(configuration:)(unsigned char *result)
{
  if (!*result) {
    *uint64_t result = 2;
  }
  return result;
}

uint64_t sub_187ABAEA0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.menuTitleVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187ABAEDC()
{
  return EnvironmentValues.menuTitleVisibility.setter();
}

uint64_t sub_187ABAF04()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.platformItemIdentifier(_:)(uint64_t a1)
{
  return closure #1 in View.platformItemIdentifier(_:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined retain of PaletteControlGroupStyle(uint64_t a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 32);
  a2(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  a3(v5, v6);
  return a1;
}

uint64_t sub_187ABAFA8()
{
  unint64_t v1 = *(void *)(v0 + 48);
  if (v1 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), v1, *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
  }

  return swift_deallocObject();
}

uint64_t outlined init with take of PlatformItemList.Item.SystemItem?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformItemList.Item.SystemItem?(0, &lazy cache variable for type metadata for PlatformItemList.Item.SystemItem?, (uint64_t)&type metadata for PlatformItemList.Item.SystemItem, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in View.platformItemSystemType(_:)(uint64_t a1)
{
  return closure #1 in View.platformItemSystemType(_:)(a1, (void *)(v1 + 16));
}

uint64_t sub_187ABB0A4()
{
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));

  return swift_deallocObject();
}

void partial apply for closure #3 in PaletteControlGroupStyle.makeBody(configuration:)(uint64_t a1)
{
  closure #3 in PaletteControlGroupStyle.makeBody(configuration:)(a1, v1 + 16);
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in PaletteControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for PaletteControlGroupStyle(uint64_t a1)
{
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32);

  return outlined consume of Environment<Bool?>.Content(v2, v3);
}

uint64_t initializeWithCopy for PaletteControlGroupStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(v2 + 24);
  LOBYTE(v2) = *(unsigned char *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v6, v2);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v2;
  return a1;
}

uint64_t assignWithCopy for PaletteControlGroupStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  uint64_t v8 = *(void *)(v2 + 24);
  LOBYTE(v2) = *(unsigned char *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v8, v2);
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v2;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  return a1;
}

uint64_t assignWithTake for PaletteControlGroupStyle(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Environment<Bool?>.Content(v5, v6);
  char v7 = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PaletteControlGroupStyle(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PaletteControlGroupStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PaletteControlGroupStyle()
{
  return &type metadata for PaletteControlGroupStyle;
}

uint64_t sub_187ABB350()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
    type metadata accessor for PlatformItemList.Item.SystemItem?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>, (uint64_t)&type metadata for MenuActionDismissBehavior, MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for HStack<ControlGroupStyleConfiguration.Label>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    type metadata accessor for PlatformItemList.Item.SystemItem?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>();
    type metadata accessor for HStack<ControlGroupStyleConfiguration.Label>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>)
  {
    type metadata accessor for Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>();
    type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>);
    }
  }
}

void type metadata accessor for Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>)
  {
    type metadata accessor for HStack<ControlGroupStyleConfiguration.Label>(255, &lazy cache variable for type metadata for HStack<ControlGroupStyleConfiguration.Label>, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Label, (uint64_t)&protocol witness table for ControlGroupStyleConfiguration.Label, MEMORY[0x1E4F415B8]);
    lazy protocol witness table accessor for type HStack<ControlGroupStyleConfiguration.Label> and conformance HStack<A>();
    unint64_t v0 = type metadata accessor for Menu();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HStack<ControlGroupStyleConfiguration.Label> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Label> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Label> and conformance HStack<A>)
  {
    type metadata accessor for HStack<ControlGroupStyleConfiguration.Label>(255, &lazy cache variable for type metadata for HStack<ControlGroupStyleConfiguration.Label>, (uint64_t)&type metadata for ControlGroupStyleConfiguration.Label, (uint64_t)&protocol witness table for ControlGroupStyleConfiguration.Label, MEMORY[0x1E4F415B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Label> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>()
{
  if (!lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>)
  {
    lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle();
    unint64_t v0 = type metadata accessor for LabelStyleWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<TitleAndIconLabelStyle>);
    }
  }
}

void type metadata accessor for HStack<ControlGroupStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for PlatformItemList.Item.SystemItem?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>, _PreferenceTransformModifier<PlatformItemList.Key>>, _EnvironmentKeyWritingModifier<Bool>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>>();
    lazy protocol witness table accessor for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>(&lazy protocol witness table cache variable for type Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content> and conformance Menu<A, B>, (void (*)(uint64_t))type metadata accessor for Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>);
    lazy protocol witness table accessor for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<HStack<ControlGroupStyleConfiguration.Label>, ControlGroupStyleConfiguration.Content>, LabelStyleWritingModifier<TitleAndIconLabelStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in ItemSheetPresentationModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v35 = a8;
  uint64_t KeyPath = a1;
  uint64_t v40 = a9;
  type metadata accessor for Optional();
  uint64_t v15 = type metadata accessor for Binding();
  uint64_t v36 = *(void *)(v15 - 8);
  uint64_t v37 = v15;
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)&v31 - v16;
  uint64_t v18 = type metadata accessor for SheetContent();
  uint64_t v38 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  long long v33 = (char *)&v31 - v19;
  type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>();
  uint64_t v39 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v39);
  long long v34 = (char *)&v31 - v20;
  uint64_t v21 = a2;
  uint64_t v22 = v35;
  closure #1 in closure #1 in ItemSheetPresentationModifier.body(content:)(v21, KeyPath, a3, a4);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v50 = a7;
  uint64_t v51 = v22;
  uint64_t v23 = type metadata accessor for ItemSheetPresentationModifier();
  ItemSheetPresentationModifier.item.getter(v23, MEMORY[0x1E4F41628]);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a3, a6, v24, v25);
  type metadata accessor for PresentationMode.FromItem();
  swift_getWitnessTable();
  uint64_t v26 = v37;
  Binding.projecting<A>(_:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v17, v26);
  uint64_t v43 = v46;
  uint64_t v44 = v47;
  char v45 = v48;
  uint64_t WitnessTable = swift_getWitnessTable();
  long long v28 = v33;
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v18);
  uint64_t v29 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>);
  uint64_t v41 = WitnessTable;
  uint64_t v42 = v29;
  swift_getWitnessTable();
  uint64_t result = AnyView.init<A>(_:)();
  *uint64_t v40 = result;
  return result;
}

uint64_t closure #1 in closure #1 in ItemSheetPresentationModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v22 - v11;
  v22[0] = v13;
  v22[1] = v14;
  v22[2] = v15;
  void v22[3] = v16;
  unint64_t v22[4] = v17;
  void v22[5] = v18;
  uint64_t v19 = type metadata accessor for ItemSheetPresentationModifier();
  (*(void (**)(uint64_t))(a1 + *(int *)(v19 + 72)))(a2);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v9, a4);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v20)(v12, a4);
}

uint64_t closure #2 in ItemSheetPresentationModifier.body(content:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a8;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v22 - v18;
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(a3 - 8) + 56))(v19, 1, 1, a3, v17);
    uint64_t v24 = a3;
    uint64_t v25 = a4;
    uint64_t v26 = a5;
    uint64_t v27 = a6;
    uint64_t v28 = a7;
    uint64_t v29 = v23;
    type metadata accessor for ItemSheetPresentationModifier();
    specialized ItemSheetPresentationModifier.item.setter();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  }
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v29 = v23;
  uint64_t result = type metadata accessor for ItemSheetPresentationModifier();
  uint64_t v21 = (uint64_t (**)(void))(a2 + *(int *)(result + 68));
  if (*v21) {
    return (*v21)();
  }
  return result;
}

uint64_t SheetPresentationModifier.isPresented.setter()
{
  return swift_release();
}

uint64_t closure #2 in SheetPresentationModifier.body(content:)(uint64_t result, uint64_t a2)
{
  if (result)
  {
    type metadata accessor for SheetPresentationModifier();
    uint64_t result = SheetPresentationModifier.isPresented.setter();
  }
  unsigned int v3 = *(uint64_t (**)(uint64_t))(a2 + 24);
  if (v3) {
    return v3(result);
  }
  return result;
}

uint64_t View._cover<A, B>(item:onDismiss:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return View.fullScreenCover<A, B>(item:onDismiss:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t View._cover<A>(isPresented:onDismiss:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return View.fullScreenCover<A>(isPresented:onDismiss:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t View.fullScreenBlur<A, B>(item:onDismiss:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return View.sheet<A, B>(item:onDismiss:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 3u);
}

uint64_t View.fullScreenBlur<A>(isPresented:onDismiss:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return View.sheet<A>(isPresented:onDismiss:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 3);
}

uint64_t View.sheet<A, B>(item:drawsBackground:content:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return View.sheet<A, B>(item:drawsBackground:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0);
}

uint64_t View.sheet<A>(isPresented:drawsBackground:content:)(uint64_t a1, uint64_t a2, char a3, char a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return View.sheet<A>(isPresented:drawsBackground:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
}

uint64_t View.fullScreenCover<A, B>(item:drawsBackground:content:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  return View.sheet<A, B>(item:drawsBackground:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 1u);
}

uint64_t View.sheet<A, B>(item:drawsBackground:content:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  uint64_t v35 = a8;
  uint64_t v33 = a9;
  uint64_t v34 = a5;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  int v32 = a2;
  int v29 = a12;
  uint64_t v27 = a11;
  uint64_t v28 = a1;
  type metadata accessor for Optional();
  uint64_t v14 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  double v17 = (char *)&v27 - v16;
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  uint64_t v19 = v18;
  uint64_t v20 = lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v38 = v19;
  uint64_t v39 = a10;
  uint64_t v40 = v27;
  uint64_t v41 = v20;
  uint64_t v21 = type metadata accessor for ItemSheetPresentationModifier();
  uint64_t v22 = *(void *)(v21 - 8);
  double v23 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v27 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, v28, v14, v23);
  ItemSheetPresentationModifier<>.init(item:onDismiss:sheetContent:placement:drawsBackground:)((uint64_t)v17, 0, 0, v30, v31, v29, v32, a6, (uint64_t)v25, a7);
  swift_retain();
  MEMORY[0x18C113660](v25, v34, v21, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v21);
}

uint64_t View.fullScreenCover<A>(isPresented:drawsBackground:content:)(uint64_t a1, uint64_t a2, char a3, char a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return View.sheet<A>(isPresented:drawsBackground:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 1);
}

uint64_t View.sheet<A>(isPresented:drawsBackground:content:)(uint64_t a1, uint64_t a2, char a3, char a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  SheetPresentationModifier<>.init(isPresented:onDismiss:sheetContent:placement:drawsBackground:)(a1, a2, a3, 0, 0, a5, a6, a11, (uint64_t)v16, a4, a8, a10);
  v14[0] = v16[0];
  v14[1] = v16[1];
  v15[0] = v17[0];
  *(_OWORD *)((char *)v15 + 11) = *(_OWORD *)((char *)v17 + 11);
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v11 = type metadata accessor for SheetPresentationModifier();
  MEMORY[0x18C113660](v14, a7, v11, a9);
  return outlined release of SheetPresentationModifier<A1, NullSheetAnchor<SheetPreference.Key>>((uint64_t)v16);
}

uint64_t View.formSheet<A, B>(item:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v63 = a9;
  uint64_t v61 = a3;
  uint64_t v62 = a7;
  uint64_t v57 = a6;
  uint64_t v59 = a4;
  uint64_t v60 = a2;
  uint64_t v65 = a1;
  type metadata accessor for Optional();
  uint64_t v58 = type metadata accessor for Binding();
  uint64_t v66 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v13 = (char *)v48 - v12;
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>, (uint64_t)&type metadata for PresentationOptionsPreferenceKey, (uint64_t)&protocol witness table for PresentationOptionsPreferenceKey, MEMORY[0x1E4F41108]);
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v52 = v14;
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  uint64_t v16 = v15;
  unint64_t v17 = lazy protocol witness table accessor for type _PreferenceTransformModifier<PresentationOptionsPreferenceKey> and conformance _PreferenceTransformModifier<A>();
  uint64_t v73 = a10;
  unint64_t v74 = v17;
  uint64_t v49 = a10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>, (unint64_t *)&lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key);
  uint64_t v20 = a5;
  uint64_t v67 = a5;
  uint64_t v68 = v14;
  uint64_t v69 = v16;
  unint64_t v70 = a8;
  uint64_t v71 = WitnessTable;
  uint64_t v72 = v19;
  v48[1] = WitnessTable;
  uint64_t v21 = type metadata accessor for ItemSheetPresentationModifier();
  MEMORY[0x1F4188790](v21);
  uint64_t v54 = (uint64_t)v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v64 = (uint64_t)v48 - v24;
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<PadInterfaceIdiom>, MEMORY[0x1E4F40178], MEMORY[0x1E4F40170], MEMORY[0x1E4F40C60]);
  uint64_t v26 = v25;
  unint64_t v27 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<PadInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  uint64_t v67 = v26;
  uint64_t v68 = v21;
  uint64_t v53 = v21;
  uint64_t v69 = v21;
  unint64_t v70 = v27;
  uint64_t v28 = type metadata accessor for StaticIf();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v55 = v28;
  uint64_t v56 = v29;
  double v30 = MEMORY[0x1F4188790](v28);
  uint64_t v51 = (char *)v48 - v31;
  int v32 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  v66 += 16;
  uint64_t v50 = v32;
  uint64_t v33 = v58;
  ((void (*)(char *, uint64_t, uint64_t, double))v32)(v13, v65, v58, v30);
  uint64_t v34 = (void *)swift_allocObject();
  uint64_t v35 = v59;
  uint64_t v36 = v60;
  v34[2] = v59;
  void v34[3] = v20;
  uint64_t v37 = v20;
  uint64_t v38 = v57;
  uint64_t v39 = v62;
  v34[4] = v57;
  void v34[5] = v39;
  _OWORD v34[6] = a8;
  v34[7] = a10;
  uint64_t v40 = v61;
  void v34[8] = v36;
  v34[9] = v40;
  unint64_t v41 = a8;
  uint64_t v42 = v52;
  ItemSheetPresentationModifier<>.init(item:onDismiss:sheetContent:placement:drawsBackground:)((uint64_t)v13, 0, 0, (uint64_t)partial apply for closure #1 in View.formSheet<A, B>(item:content:), (uint64_t)v34, 2, 1, v37, v64, v52);
  v50(v13, v65, v33);
  uint64_t v43 = (void *)swift_allocObject();
  _OWORD v43[2] = v35;
  _OWORD v43[3] = v37;
  _OWORD v43[4] = v38;
  v43[5] = v39;
  uint64_t v44 = v49;
  v43[6] = v41;
  v43[7] = v44;
  v43[8] = v36;
  v43[9] = v40;
  ItemSheetPresentationModifier<>.init(item:onDismiss:sheetContent:placement:drawsBackground:)((uint64_t)v13, 0, 0, (uint64_t)partial apply for closure #1 in View.formSheet<A, B>(item:content:), (uint64_t)v43, 0, 1, v37, v54, v42);
  swift_retain_n();
  swift_getWitnessTable();
  char v45 = v51;
  StaticIf<>.init<A>(idiom:then:else:)();
  uint64_t v46 = v55;
  MEMORY[0x18C113660](v45, v35, v55, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v45, v46);
}

uint64_t sub_187ABCD9C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #1 in View.formSheet<A, B>(item:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a6 - 8);
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11(v8);
  View.transformPreference<A>(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, a6);
}

uint64_t partial apply for closure #1 in View.formSheet<A, B>(item:content:)(uint64_t a1)
{
  return closure #1 in View.formSheet<A, B>(item:content:)(a1, v1[8], v1[9], v1[2], v1[3], v1[4]);
}

uint64_t sub_187ABCF1C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #1 in View.formSheet<A>(isPresented:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  double v6 = MEMORY[0x1F4188790](a1);
  double v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9(v6);
  View.transformPreference<A>(_:_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a4);
}

uint64_t partial apply for closure #1 in View.formSheet<A>(isPresented:content:)()
{
  return closure #1 in View.formSheet<A>(isPresented:content:)(v0[6], v0[7], v0[2], v0[3]);
}

uint64_t closure #1 in View.formSheetSizing()(uint64_t result)
{
  *(unsigned char *)(result + 136) = 1;
  return result;
}

uint64_t key path getter for EnvironmentValues.tintAdjustmentMode : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintAdjustmentMode.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.tintAdjustmentMode : EnvironmentValues()
{
  return EnvironmentValues.tintAdjustmentMode.setter();
}

uint64_t key path getter for EnvironmentValues.menuIndicatorProminenceReduced : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.menuIndicatorProminenceReduced.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.menuIndicatorProminenceReduced : EnvironmentValues()
{
  return EnvironmentValues.menuIndicatorProminenceReduced.setter();
}

void EnvironmentValues.isSheetPresented.getter()
{
}

void sub_187ABD190()
{
}

void sub_187ABD1B8()
{
}

uint64_t sub_187ABD1CC()
{
  return swift_getWitnessTable();
}

uint64_t sub_187ABD2EC()
{
  return swift_getWitnessTable();
}

uint64_t sub_187ABD3F8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187ABD5FC()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for SheetPreference.Value(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 105);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_release();
      if (*(void *)(a1 + 8)) {
        swift_release();
      }
      if (*(void *)(a1 + 56)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      }
      swift_release();
      swift_release();
      swift_release();
    }
    else if (!v4)
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 105);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v6 = *((void *)a2 + 1);
      swift_retain();
      if (v6)
      {
        uint64_t v7 = *((void *)a2 + 2);
        *(void *)(a1 + 8) = v6;
        *(void *)(a1 + 16) = v7;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(a1 + 8) = *(long long *)((char *)a2 + 8);
      }
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      uint64_t v13 = (_OWORD *)(a1 + 32);
      uint64_t v14 = a2 + 2;
      uint64_t v15 = *((void *)a2 + 7);
      if (v15)
      {
        *(void *)(a1 + 56) = v15;
        *(void *)(a1 + 64) = *((void *)a2 + 8);
        (**(void (***)(_OWORD *, long long *))(v15 - 8))(v13, v14);
      }
      else
      {
        long long v16 = *v14;
        long long v17 = a2[3];
        *(void *)(a1 + 64) = *((void *)a2 + 8);
        *uint64_t v13 = v16;
        *(_OWORD *)(a1 + 48) = v17;
      }
      *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
      *(unsigned char *)(a1 + 73) = *((unsigned char *)a2 + 73);
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      *(void *)(a1 + 96) = *((void *)a2 + 12);
      *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
      *(unsigned char *)(a1 + 105) = 1;
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else if (v5)
    {
      long long v8 = *a2;
      long long v9 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v9;
      *(_OWORD *)a1 = v8;
      long long v10 = a2[3];
      long long v11 = a2[4];
      long long v12 = a2[5];
      *(_OWORD *)(a1 + 90) = *(long long *)((char *)a2 + 90);
      *(_OWORD *)(a1 + 64) = v11;
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 48) = v10;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 105) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithTake for SheetPreference.Value(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 105);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_release();
      if (*(void *)(a1 + 8)) {
        swift_release();
      }
      if (*(void *)(a1 + 56)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 32);
      }
      swift_release();
      swift_release();
      swift_release();
    }
    else if (!v4)
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 105);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v6;
      *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      long long v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
      *(unsigned char *)(a1 + 105) = 1;
    }
    else if (v5)
    {
      long long v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(_OWORD *)(a1 + 90) = *(_OWORD *)(a2 + 90);
      long long v10 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      long long v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v11;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 105) = 0;
    }
  }
  return a1;
}

uint64_t getEnumTag for SheetPreference.Value(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 105);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for SheetPreference.Value(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 89) = 0u;
    unsigned int v2 = a2 - 2;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 105) = a2;
  return result;
}

uint64_t assignWithCopy for SheetPreference(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_8:
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  long long v7 = (_OWORD *)(a1 + 32);
  long long v8 = (_OWORD *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 56);
  if (*(void *)(a1 + 56))
  {
    if (v9)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 32), (uint64_t *)(a2 + 32));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 32);
      uint64_t v10 = *(void *)(a2 + 64);
      long long v11 = *(_OWORD *)(a2 + 48);
      *long long v7 = *v8;
      *(_OWORD *)(a1 + 48) = v11;
      *(void *)(a1 + 64) = v10;
    }
  }
  else if (v9)
  {
    *(void *)(a1 + 56) = v9;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 32, a2 + 32);
  }
  else
  {
    long long v12 = *v8;
    long long v13 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *long long v7 = v12;
    *(_OWORD *)(a1 + 48) = v13;
  }
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

uint64_t assignWithTake for SheetPreference(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = v5;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v6;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
LABEL_8:
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  if (*(void *)(a1 + 56))
  {
    if (*(void *)(a2 + 56)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else {
      outlined destroy of AnyHashable(a1 + 32);
    }
  }
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  return a1;
}

ValueMetadata *type metadata accessor for SheetPreference()
{
  return &type metadata for SheetPreference;
}

uint64_t *initializeBufferWithCopyOfBuffer for ItemSheetPresentationModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = (v6 + 16) & ~v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  size_t v9 = v7 + v8;
  uint64_t v10 = *(void *)(a3 + 32);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  unint64_t v13 = ((v12 + ((((v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 18) & ~v12)
      + *(void *)(v11 + 64);
  int v14 = (*(_DWORD *)(v11 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000;
  uint64_t v15 = *a2;
  *a1 = *a2;
  if ((v12 | v6) > 7 || v14 != 0 || v13 > 0x18)
  {
    a1 = (uint64_t *)(v15 + (((v12 | v6) & 0xF8 ^ 0x1F8) & ((v12 | v6) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v35 = v11;
    uint64_t v36 = v10;
    uint64_t v18 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v19;
    __dst = (void *)(((unint64_t)v18 + v6 + 8) & ~v6);
    uint64_t v20 = (const void *)(((unint64_t)v19 + v6 + 8) & ~v6);
    uint64_t v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v21(v20, 1, v4))
    {
      memcpy(__dst, v20, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(__dst, v20, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(__dst, 0, 1, v4);
    }
    uint64_t v22 = ~v12;
    unint64_t v23 = ((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = ((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v24 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
    }
    else
    {
      uint64_t v25 = *(void *)(v24 + 8);
      *(void *)unint64_t v23 = *(void *)v24;
      *(void *)(v23 + 8) = v25;
      swift_retain();
    }
    unint64_t v26 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v28 = *(void *)(v27 + 8);
    *(void *)unint64_t v26 = *(void *)v27;
    *(void *)(v26 + 8) = v28;
    *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
    *(unsigned char *)(v26 + 17) = *(unsigned char *)(v27 + 17);
    uint64_t v29 = (v26 + v12 + 18) & v22;
    uint64_t v30 = (v27 + v12 + 18) & v22;
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
    swift_retain();
    v31(v29, v30, v36);
  }
  return a1;
}

void *initializeWithTake for ItemSheetPresentationModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (void *)(((unint64_t)v6 + v10 + 8) & ~v10);
  uint64_t v12 = (const void *)(((unint64_t)v7 + v10 + 8) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(v12, 1, v8))
  {
    int v13 = *(_DWORD *)(v9 + 84);
    size_t v14 = *(void *)(v9 + 64);
    if (v13) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy(v11, v12, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(v11, v12, v8);
    long long v17 = *(void (**)(void *, void, uint64_t, uint64_t))(v9 + 56);
    uint64_t v16 = v9 + 56;
    v17(v11, 0, 1, v8);
    int v13 = *(_DWORD *)(v16 + 28);
    size_t v14 = *(void *)(v16 + 8);
  }
  if (v13) {
    uint64_t v18 = v14 + ((v10 + 16) & ~v10);
  }
  else {
    uint64_t v18 = v14 + ((v10 + 16) & ~v10) + 1;
  }
  unint64_t v19 = ((unint64_t)a1 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)a2 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v20 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v19 = *(_OWORD *)v20;
  }
  else
  {
    uint64_t v21 = *(void *)(v20 + 8);
    *(void *)unint64_t v19 = *(void *)v20;
    *(void *)(v19 + 8) = v21;
  }
  unint64_t v22 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v22 = *(_OWORD *)v23;
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  *(unsigned char *)(v22 + 17) = *(unsigned char *)(v23 + 17);
  uint64_t v24 = *(void *)(*(void *)(a3 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v24 + 32))((*(unsigned __int8 *)(v24 + 80) + 18 + v22) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80), (*(unsigned __int8 *)(v24 + 80) + 18 + v23) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  return a1;
}

void *assignWithTake for ItemSheetPresentationModifier(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  unint64_t v7 = (unint64_t)a1 + 15;
  swift_release();
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v7 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v6 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v30 = a3;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)((v11 + 8 + v8) & ~v11);
  int v13 = (void *)((v11 + 8 + (v6 & 0xFFFFFFFFFFFFFFF8)) & ~v11);
  size_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (v16)
    {
      int v17 = *(_DWORD *)(v10 + 84);
      size_t v18 = *(void *)(v10 + 64);
LABEL_6:
      if (v17) {
        size_t v19 = v18;
      }
      else {
        size_t v19 = v18 + 1;
      }
      memcpy(v12, v13, v19);
      goto LABEL_12;
    }
    (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
  }
  else
  {
    if (v16)
    {
      (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
      int v17 = *(_DWORD *)(v10 + 84);
      size_t v18 = *(void *)(v10 + 64);
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
  }
LABEL_12:
  uint64_t v20 = *(void *)(v10 + 64) + ((v11 + 16) & ~v11);
  if (!*(_DWORD *)(v10 + 84)) {
    ++v20;
  }
  uint64_t v21 = (void *)(((unint64_t)a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (unint64_t *)(((unint64_t)a2 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = *v22;
  if (*v21 < 0xFFFFFFFFuLL)
  {
    if (v23 >= 0xFFFFFFFF)
    {
      unint64_t v25 = v22[1];
      *uint64_t v21 = v23;
      v21[1] = v25;
      goto LABEL_21;
    }
LABEL_20:
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
    goto LABEL_21;
  }
  if (v23 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_20;
  }
  unint64_t v24 = v22[1];
  *uint64_t v21 = v23;
  v21[1] = v24;
  swift_release();
LABEL_21:
  unint64_t v26 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = ((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
  swift_release();
  *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
  *(unsigned char *)(v26 + 17) = *(unsigned char *)(v27 + 17);
  uint64_t v28 = *(void *)(*(void *)(v30 + 32) - 8);
  (*(void (**)(unint64_t, unint64_t))(v28 + 40))((*(unsigned __int8 *)(v28 + 80) + 18 + v26) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80), (*(unsigned __int8 *)(v28 + 80) + 18 + v27) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for ItemSheetPresentationModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9;
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  if (v11 <= v7) {
    unsigned int v12 = v7;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  if (v5) {
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = v15 + ((v13 + 16) & ~v13);
  uint64_t v17 = v14 + 18;
  int v18 = a2 - v12;
  if (a2 <= v12) {
    goto LABEL_34;
  }
  unint64_t v19 = ((v17 + ((((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v14)
      + *(void *)(*(void *)(v8 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 > 3) {
    goto LABEL_16;
  }
  unsigned int v23 = ((v18 + ~(-1 << v20)) >> v20) + 1;
  if (HIWORD(v23))
  {
    int v21 = *(_DWORD *)((char *)a1 + v19);
    if (v21) {
      goto LABEL_24;
    }
  }
  else
  {
    if (v23 <= 0xFF)
    {
      if (v23 < 2) {
        goto LABEL_34;
      }
LABEL_16:
      int v21 = *((unsigned __int8 *)a1 + v19);
      if (!*((unsigned char *)a1 + v19)) {
        goto LABEL_34;
      }
LABEL_24:
      int v24 = (v21 - 1) << v20;
      if (v19 > 3) {
        int v24 = 0;
      }
      if (v19)
      {
        if (v19 <= 3) {
          int v25 = v19;
        }
        else {
          int v25 = 4;
        }
        switch(v25)
        {
          case 2:
            int v26 = *a1;
            break;
          case 3:
            int v26 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v26 = *(_DWORD *)a1;
            break;
          default:
            int v26 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v26 = 0;
      }
      return v12 + (v26 | v24) + 1;
    }
    int v21 = *(unsigned __int16 *)((char *)a1 + v19);
    if (*(unsigned __int16 *)((char *)a1 + v19)) {
      goto LABEL_24;
    }
  }
LABEL_34:
  if (v7 >= v11)
  {
    uint64_t v29 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v31 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v29 + v13 + 8) & ~v13);
      if (v31 >= 2) {
        return v31 - 1;
      }
      else {
        return 0;
      }
    }
    unint64_t v28 = *v29;
    goto LABEL_39;
  }
  unint64_t v27 = (unint64_t *)(((((unint64_t)a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  if (v12 == 0x7FFFFFFF)
  {
    unint64_t v28 = *v27;
LABEL_39:
    if (v28 >= 0xFFFFFFFF) {
      LODWORD(v28) = -1;
    }
    return (v28 + 1);
  }
  uint64_t v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v10 + 48);

  return v30(((unint64_t)v27 + v17) & ~v14, v11, v8);
}

void storeEnumTagSinglePayload for ItemSheetPresentationModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(void *)(a4 + 32);
  uint64_t v12 = *(void *)(v11 - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  size_t v15 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  if (v13 <= v10) {
    unsigned int v17 = v10;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v12 + 84);
  }
  if (!v8) {
    ++v15;
  }
  size_t v18 = ((v14 + 16) & ~v14) + v15;
  uint64_t v19 = v16 + 18;
  size_t v20 = ((v16 + 18 + ((((v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v16)
      + *(void *)(*(void *)(v11 - 8) + 64);
  BOOL v21 = a3 >= v17;
  unsigned int v22 = a3 - v17;
  if (v22 == 0 || !v21)
  {
LABEL_23:
    if (v17 < a2) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  if (v20 > 3)
  {
    int v6 = 1;
    if (v17 < a2) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  unsigned int v24 = ((v22 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
  if (!HIWORD(v24))
  {
    if (v24 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v24 > 1;
    }
    goto LABEL_23;
  }
  int v6 = 4;
  if (v17 < a2)
  {
LABEL_24:
    unsigned int v25 = ~v17 + a2;
    if (v20 < 4)
    {
      int v26 = (v25 >> (8 * v20)) + 1;
      if (v20)
      {
        int v27 = v25 & ~(-1 << (8 * v20));
        bzero(a1, v20);
        if (v20 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v20 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v20);
      *(_DWORD *)a1 = v25;
      int v26 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v20] = v26;
        return;
      case 2:
        *(_WORD *)&a1[v20] = v26;
        return;
      case 3:
        goto LABEL_81;
      case 4:
        *(_DWORD *)&a1[v20] = v26;
        return;
      default:
        return;
    }
  }
LABEL_16:
  uint64_t v23 = ~v16;
  switch(v6)
  {
    case 1:
      a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_81:
      __break(1u);
      JUMPOUT(0x187ABED10);
    case 4:
      *(_DWORD *)&a1[v20] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if (v10 >= v13)
        {
          if (v10 >= a2)
          {
            uint64_t v33 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v9 & 0x80000000) != 0)
            {
              uint64_t v35 = (uint64_t)v33 + v14 + 8;
              a1 = (char *)(v35 & ~v14);
              if (v9 >= a2)
              {
                uint64_t v38 = a2 + 1;
                uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v7 + 56);
                v39(v35 & ~v14, v38);
              }
              else
              {
                if (v15 <= 3) {
                  int v36 = ~(-1 << (8 * v15));
                }
                else {
                  int v36 = -1;
                }
                if (v15)
                {
                  int v30 = v36 & (~v9 + a2);
                  if (v15 <= 3) {
                    int v37 = v15;
                  }
                  else {
                    int v37 = 4;
                  }
                  bzero(a1, v15);
                  switch(v37)
                  {
                    case 2:
LABEL_72:
                      *(_WORD *)a1 = v30;
                      break;
                    case 3:
LABEL_78:
                      *(_WORD *)a1 = v30;
                      a1[2] = BYTE2(v30);
                      break;
                    case 4:
LABEL_79:
                      *(_DWORD *)a1 = v30;
                      break;
                    default:
LABEL_45:
                      *a1 = v30;
                      break;
                  }
                }
              }
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v34 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v34 = a2 - 1;
              }
              void *v33 = v34;
            }
          }
          else
          {
            if (v18 <= 3) {
              int v29 = ~(-1 << (8 * v18));
            }
            else {
              int v29 = -1;
            }
            if (v18)
            {
              int v30 = v29 & (~v10 + a2);
              if (v18 <= 3) {
                int v31 = ((v14 + 16) & ~v14) + v15;
              }
              else {
                int v31 = 4;
              }
              bzero(a1, ((v14 + 16) & ~v14) + v15);
              switch(v31)
              {
                case 2:
                  goto LABEL_72;
                case 3:
                  goto LABEL_78;
                case 4:
                  goto LABEL_79;
                default:
                  goto LABEL_45;
              }
            }
          }
        }
        else
        {
          unint64_t v28 = (void *)((((unint64_t)&a1[v18 + 7] & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
          if (v17 == 0x7FFFFFFF)
          {
            if ((a2 & 0x80000000) != 0)
            {
              *unint64_t v28 = a2 ^ 0x80000000;
              v28[1] = 0;
            }
            else
            {
              *unint64_t v28 = a2 - 1;
            }
          }
          else
          {
            int v32 = *(void (**)(unint64_t))(v12 + 56);
            v32(((unint64_t)v28 + v19) & v23);
          }
        }
      }
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SheetPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  if (v6 > 7 || v8 != 0 || v7 + ((v6 + 58) & (unint64_t)~v6) + 1 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v24 = ~v6;
    uint64_t v25 = v4;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    uint64_t v12 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
    unint64_t v13 = a2 & 0xFFFFFFFFFFFFFFF8;
    size_t v15 = (unint64_t *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    unint64_t v14 = *v15;
    swift_retain();
    swift_retain();
    if (v14 < 0xFFFFFFFF)
    {
      *uint64_t v12 = *(_OWORD *)v15;
    }
    else
    {
      unint64_t v16 = v15[1];
      *(void *)uint64_t v12 = v14;
      *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v16;
      swift_retain();
    }
    unint64_t v17 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (v13 + 47) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)(v18 + 8);
    *(void *)unint64_t v17 = *(void *)v18;
    *(void *)(v17 + 8) = v19;
    *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
    *(unsigned char *)(v17 + 17) = *(unsigned char *)(v18 + 17);
    uint64_t v20 = (v17 + v6 + 18) & v24;
    uint64_t v21 = (v18 + v6 + 18) & v24;
    unsigned int v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v22(v20, v21, v25);
    *(unsigned char *)(v20 + v7) = *(unsigned char *)(v21 + v7);
  }
  return a1;
}

uint64_t initializeWithTake for SheetPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = (_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  unint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (v5 < 0xFFFFFFFF)
  {
    *uint64_t v4 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  }
  else
  {
    uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    *(void *)uint64_t v4 = v5;
    *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v6;
  }
  unint64_t v7 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((a2 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v8 + 17);
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v10 = v9 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 18 + v7) & ~v11;
  uint64_t v13 = (v11 + 18 + v8) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v12, v13);
  *(unsigned char *)(*(void *)(v10 + 32) + v12) = *(unsigned char *)(*(void *)(v10 + 32) + v13);
  return a1;
}

uint64_t assignWithTake for SheetPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = (unint64_t *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  unint64_t v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = *(void *)(v7 + 24);
  if (*v6 < 0xFFFFFFFF)
  {
    if (v8 >= 0xFFFFFFFF)
    {
      uint64_t v10 = *(void *)(v7 + 32);
      *uint64_t v6 = v8;
      *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v10;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)uint64_t v6 = *(_OWORD *)(v7 + 24);
    goto LABEL_8;
  }
  if (v8 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)(v7 + 32);
  *uint64_t v6 = v8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32) = v9;
  swift_release();
LABEL_8:
  unint64_t v11 = ((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v7 + 47) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  swift_release();
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(unsigned char *)(v11 + 17) = *(unsigned char *)(v12 + 17);
  uint64_t v13 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v14 = v13 + 40;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v15 + 18 + v11) & ~v15;
  uint64_t v17 = (v15 + 18 + v12) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 40))(v16, v17);
  *(unsigned char *)(*(void *)(v14 + 24) + v16) = *(unsigned char *)(*(void *)(v14 + 24) + v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for SheetPresentationModifier(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + ((v6 + 58) & ~v6) + 1;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 18) & ~v6);
      unint64_t v15 = *(void *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(unsigned char *)(a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for SheetPresentationModifier(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + ((v9 + 58) & ~v9) + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + ((v9 + 58) & ~v9) != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero((void *)a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          *(unsigned char *)(a1 + 2) = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *(unsigned char *)a1 = v17;
        }
      }
    }
    else
    {
      bzero((void *)a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        *(unsigned char *)(a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)(a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)(a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      *(unsigned char *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187ABF570);
    case 4:
      *(_DWORD *)(a1 + v10) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = ((((a1 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + v9 + 18) & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(unsigned char *)(a1 + 16) = 0;
          *(void *)a1 = a2 ^ 0x80000000;
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          *(void *)(a1 + 8) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t View.inspectorSheet<A>(isPresented:activeInspector:content:)(uint64_t a1, uint64_t a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(0, &lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.InspectorKey>, (uint64_t)&type metadata for SheetPreference.InspectorKey, (uint64_t)&protocol witness table for SheetPreference.InspectorKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for NullSheetAnchor);
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  char v34 = a3;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  __int16 v39 = 256;
  uint64_t v23 = a8;
  uint64_t v24 = v15;
  uint64_t v25 = a10;
  uint64_t v26 = lazy protocol witness table accessor for type NullSheetAnchor<SheetPreference.Key> and conformance NullSheetAnchor<A>((unint64_t *)&lazy protocol witness table cache variable for type NullSheetAnchor<SheetPreference.InspectorKey> and conformance NullSheetAnchor<A>, &lazy cache variable for type metadata for NullSheetAnchor<SheetPreference.InspectorKey>, (uint64_t)&type metadata for SheetPreference.InspectorKey, (uint64_t)&protocol witness table for SheetPreference.InspectorKey);
  uint64_t v16 = type metadata accessor for SheetPresentationModifier();
  (*(void (**)(char *))(*(void *)(v24 - 8) + 32))((char *)&v32 + *(int *)(v16 + 68));
  *((unsigned char *)&v32 + *(int *)(v16 + 72)) = a4;
  uint64_t v17 = v35;
  uint64_t v23 = v32;
  uint64_t v24 = v33;
  LOBYTE(v25) = v34;
  uint64_t v26 = v35;
  uint64_t v27 = v36;
  uint64_t v28 = v37;
  uint64_t v29 = v38;
  __int16 v30 = v39;
  char v31 = v40;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v18 = type metadata accessor for SheetPresentationModifier();
  MEMORY[0x18C113660](&v23, a7, v18, a9);
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  return swift_release();
}

void specialized LazyMapSequence.Iterator.next()(uint64_t a1@<X8>)
{
  uint64_t v43 = a1;
  type metadata accessor for (key: UIMenuElement, value: CommandOperation)();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: Selector, value: CommandAction)?(0, &lazy cache variable for type metadata for (key: UIMenuElement, value: CommandOperation)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UIMenuElement, value: CommandOperation), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11.n128_f64[0] = MEMORY[0x1F4188790](v10);
  int v13 = (char **)((char *)&v38 - v12);
  uint64_t v14 = *v1;
  uint64_t v15 = v1[1];
  uint64_t v17 = v1[2];
  int64_t v16 = v1[3];
  int64_t v18 = v16;
  unint64_t v19 = v1[4];
  uint64_t v38 = v6;
  uint64_t v42 = v17;
  if (v19)
  {
    int64_t v39 = v16;
    uint64_t v40 = v15;
    uint64_t v20 = v4;
    unint64_t v41 = v9;
    uint64_t v21 = v3;
    uint64_t v22 = (v19 - 1) & v19;
    unint64_t v23 = __clz(__rbit64(v19)) | (v16 << 6);
LABEL_3:
    uint64_t v24 = *(void *)(v14 + 56);
    uint64_t v25 = *(void **)(*(void *)(v14 + 48) + 8 * v23);
    uint64_t v26 = v24 + *(void *)(*(void *)(type metadata accessor for CommandOperation() - 8) + 72) * v23;
    uint64_t v3 = v21;
    outlined init with copy of CommandOperation(v26, (uint64_t)v13 + *(int *)(v21 + 48), (uint64_t (*)(void))type metadata accessor for CommandOperation);
    *int v13 = v25;
    uint64_t v4 = v20;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v13, 0, 1, v21);
    id v27 = v25;
    uint64_t v15 = v40;
    uint64_t v9 = v41;
    int64_t v18 = v39;
    goto LABEL_23;
  }
  int64_t v28 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    return;
  }
  int64_t v29 = (unint64_t)(v17 + 64) >> 6;
  if (v28 < v29)
  {
    unint64_t v30 = *(void *)(v15 + 8 * v28);
    if (v30)
    {
LABEL_7:
      uint64_t v20 = v4;
      uint64_t v40 = v15;
      unint64_t v41 = v9;
      uint64_t v21 = v3;
      uint64_t v22 = (v30 - 1) & v30;
      unint64_t v23 = __clz(__rbit64(v30)) + (v28 << 6);
      int64_t v39 = v28;
      goto LABEL_3;
    }
    int64_t v31 = v16 + 2;
    int64_t v18 = v16 + 1;
    if (v16 + 2 < v29)
    {
      unint64_t v30 = *(void *)(v15 + 8 * v31);
      if (v30)
      {
LABEL_10:
        int64_t v28 = v31;
        goto LABEL_7;
      }
      int64_t v18 = v16 + 2;
      if (v16 + 3 < v29)
      {
        unint64_t v30 = *(void *)(v15 + 8 * (v16 + 3));
        if (v30)
        {
          int64_t v28 = v16 + 3;
          goto LABEL_7;
        }
        int64_t v31 = v16 + 4;
        int64_t v18 = v16 + 3;
        if (v16 + 4 < v29)
        {
          unint64_t v30 = *(void *)(v15 + 8 * v31);
          if (v30) {
            goto LABEL_10;
          }
          int64_t v28 = v16 + 5;
          int64_t v18 = v16 + 4;
          if (v16 + 5 < v29)
          {
            unint64_t v30 = *(void *)(v15 + 8 * v28);
            if (v30) {
              goto LABEL_7;
            }
            int64_t v18 = v29 - 1;
            int64_t v32 = v16 + 6;
            while (v29 != v32)
            {
              unint64_t v30 = *(void *)(v15 + 8 * v32++);
              if (v30)
              {
                int64_t v28 = v32 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(v13, 1, 1, v3, v11);
  uint64_t v22 = 0;
LABEL_23:
  *uint64_t v1 = v14;
  v1[1] = v15;
  v1[2] = v42;
  v1[3] = v18;
  v1[4] = v22;
  uint64_t v33 = (void (*)(uint64_t))v1[5];
  outlined init with take of (key: Selector, value: CommandAction)?((uint64_t)v13, (uint64_t)v9, &lazy cache variable for type metadata for (key: UIMenuElement, value: CommandOperation)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UIMenuElement, value: CommandOperation));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    type metadata accessor for (UIMenuElement, CommandOperation)();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v43, 1, 1, v34);
  }
  else
  {
    uint64_t v35 = (uint64_t)v38;
    outlined init with take of (key: ViewIdentity, value: InspectorStorage)?((uint64_t)v9, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for (key: UIMenuElement, value: CommandOperation));
    uint64_t v36 = v43;
    v33(v35);
    outlined destroy of (key: Selector, value: CommandAction)(v35, (uint64_t (*)(void))type metadata accessor for (key: UIMenuElement, value: CommandOperation));
    type metadata accessor for (UIMenuElement, CommandOperation)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v36, 0, 1, v37);
  }
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *);
  void v11[2];
  char v12;

  uint64_t v3 = *(void *)(v1 + 288);
  uint64_t v4 = *(void *)(v1 + 296);
  uint64_t v5 = *(unsigned char *)(v1 + 304);
  if (v3 == *(void *)(v1 + 264))
  {
    uint64_t v6 = *(unsigned char *)(v1 + 280);
    if (*(unsigned char *)(v1 + 304))
    {
      if ((*(unsigned char *)(v1 + 280) & 1) == 0) {
        goto LABEL_4;
      }
LABEL_13:
      *(void *)(a1 + 80) = 0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_WORD *)(a1 + 88) = -256;
      return;
    }
    if (v4 != *(void *)(v1 + 272)) {
      uint64_t v6 = 1;
    }
    if ((v6 & 1) == 0) {
      goto LABEL_13;
    }
  }
LABEL_4:
  outlined init with copy of CommandOperation(v1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>);
  uint64_t v7 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v8 = specialized ShadowRowCollection.endIndex.getter();
    if (v7 == v8)
    {
      uint64_t v9 = 0;
LABEL_9:
      *(void *)(v1 + 288) = v7;
      *(void *)(v1 + 296) = v9;
      *(unsigned char *)(v1 + 304) = v7 == v8;
      outlined destroy of (key: Selector, value: CommandAction)((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>);
      uint64_t v10 = *(void (**)(void *))(v1 + 312);
      v11[0] = v3;
      v11[1] = v4;
      uint64_t v12 = v5;
      v10(v11);
      return;
    }
    if (v5) {
      goto LABEL_16;
    }
    uint64_t v9 = v4 + 1;
    if (!__OFADD__(v4, 1)) {
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    int v11 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v10);
    outlined init with copy of ConfirmationDialog(*(void *)(v3 + 56) + 184 * v10, (uint64_t)v22 + 8);
    LODWORD(v22[0]) = v11;
    goto LABEL_23;
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    unint64_t v14 = *(void *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v10 = __clz(__rbit64(v14)) + (v12 << 6);
      int64_t v7 = v12;
      goto LABEL_3;
    }
    int64_t v15 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      unint64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        int64_t v12 = v15;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        unint64_t v14 = *(void *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          int64_t v12 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v15 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          unint64_t v14 = *(void *)(v4 + 8 * v15);
          if (v14) {
            goto LABEL_10;
          }
          int64_t v12 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            unint64_t v14 = *(void *)(v4 + 8 * v12);
            if (v14) {
              goto LABEL_7;
            }
            int64_t v7 = v13 - 1;
            int64_t v16 = v5 + 6;
            while (v13 != v16)
            {
              unint64_t v14 = *(void *)(v4 + 8 * v16++);
              if (v14)
              {
                int64_t v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v22, 0, 185);
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v17 = (void (*)(unsigned char *))v1[5];
  uint64_t result = outlined init with take of (key: ViewIdentity, value: InspectorStorage)?((uint64_t)v22, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for (key: ViewIdentity, value: ConfirmationDialog)?);
  if (v21)
  {
    _ss11AnyHashableVSgWObTm_0((uint64_t)v20, (uint64_t)v19, (uint64_t)&lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog), (uint64_t)&type metadata for ViewIdentity, (uint64_t)&type metadata for ConfirmationDialog, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (key: ViewIdentity, value: InspectorStorage));
    v17(v19);
    return outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)v19, &lazy cache variable for type metadata for (key: ViewIdentity, value: ConfirmationDialog));
  }
  else
  {
    *(_OWORD *)((char *)a1 + 169) = 0u;
    a1[9] = 0u;
    a1[10] = 0u;
    a1[7] = 0u;
    a1[8] = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_OWORD *);
  uint64_t result;
  _OWORD v19[3];
  _OWORD v20[2];
  long long v21;
  _OWORD v22[3];

  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    int v11 = *(void *)(*(void *)(v3 + 48) + 8 * v10);
    outlined init with copy of TableColumnList(*(void *)(v3 + 56) + 40 * v10, (uint64_t)v22 + 8);
    *(void *)&v22[0] = v11;
    goto LABEL_23;
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    unint64_t v14 = *(void *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v10 = __clz(__rbit64(v14)) + (v12 << 6);
      int64_t v7 = v12;
      goto LABEL_3;
    }
    int64_t v15 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      unint64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        int64_t v12 = v15;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        unint64_t v14 = *(void *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          int64_t v12 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v15 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          unint64_t v14 = *(void *)(v4 + 8 * v15);
          if (v14) {
            goto LABEL_10;
          }
          int64_t v12 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            unint64_t v14 = *(void *)(v4 + 8 * v12);
            if (v14) {
              goto LABEL_7;
            }
            int64_t v7 = v13 - 1;
            int64_t v16 = v5 + 6;
            while (v13 != v16)
            {
              unint64_t v14 = *(void *)(v4 + 8 * v16++);
              if (v14)
              {
                int64_t v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v22, 0, sizeof(v22));
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v17 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: Selector, value: CommandAction)?((uint64_t)v22, (uint64_t)v20, &lazy cache variable for type metadata for (key: Selector, value: CommandAction)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: Selector, value: CommandAction));
  if ((void)v21)
  {
    v19[0] = v20[0];
    v19[1] = v20[1];
    v19[2] = v21;
    v17(v19);
    return outlined destroy of (key: Selector, value: CommandAction)((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for (key: Selector, value: CommandAction));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  void (*v16)(_OWORD *);
  uint64_t result;
  _OWORD v18[3];
  long long v19;
  long long v20;
  long long v21;
  _OWORD v22[2];
  long long v23;

  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    outlined init with copy of AnyHashable(*(void *)(v3 + 48) + 40 * v10, (uint64_t)v22);
    *((void *)&v23 + 1) = *(void *)(*(void *)(v3 + 56) + 8 * v10);
    swift_retain();
    goto LABEL_23;
  }
  int v11 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v12 = (unint64_t)(v6 + 64) >> 6;
  if (v11 < v12)
  {
    int64_t v13 = *(void *)(v4 + 8 * v11);
    if (v13)
    {
LABEL_7:
      uint64_t v9 = (v13 - 1) & v13;
      unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
      int64_t v7 = v11;
      goto LABEL_3;
    }
    unint64_t v14 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v12)
    {
      int64_t v13 = *(void *)(v4 + 8 * v14);
      if (v13)
      {
LABEL_10:
        int v11 = v14;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v12)
      {
        int64_t v13 = *(void *)(v4 + 8 * (v5 + 3));
        if (v13)
        {
          int v11 = v5 + 3;
          goto LABEL_7;
        }
        unint64_t v14 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v12)
        {
          int64_t v13 = *(void *)(v4 + 8 * v14);
          if (v13) {
            goto LABEL_10;
          }
          int v11 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v12)
          {
            int64_t v13 = *(void *)(v4 + 8 * v11);
            if (v13) {
              goto LABEL_7;
            }
            int64_t v7 = v12 - 1;
            int64_t v15 = v5 + 6;
            while (v12 != v15)
            {
              int64_t v13 = *(void *)(v4 + 8 * v15++);
              if (v13)
              {
                int v11 = v15 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  unint64_t v23 = 0u;
  memset(v22, 0, sizeof(v22));
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  int64_t v16 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: Selector, value: CommandAction)?((uint64_t)v22, (uint64_t)&v19, &lazy cache variable for type metadata for (key: AnyHashable, value: Anchor<CGRect?>)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: AnyHashable, value: Anchor<CGRect?>));
  if (*((void *)&v20 + 1))
  {
    v18[0] = v19;
    v18[1] = v20;
    void v18[2] = v21;
    v16(v18);
    return outlined destroy of (key: Selector, value: CommandAction)((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for (key: AnyHashable, value: Anchor<CGRect?>));
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t specialized static SheetPreference.reduce(value:nextValue:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = outlined init with copy of SheetPreference.Value(a1, (uint64_t)v18);
  if (v19)
  {
    if (v19 == 1)
    {
      return outlined destroy of SheetPreference.Value((uint64_t)v18);
    }
    else
    {
      uint64_t v10 = outlined destroy of SheetPreference.Value(a1);
      return a2(v10);
    }
  }
  else
  {
    uint64_t v6 = v18[0];
    ((void (*)(_OWORD *__return_ptr, uint64_t))a2)(v15, v4);
    if (v17)
    {
      if (v17 == 1)
      {
        outlined destroy of SheetPreference.Value(a1);
        uint64_t result = swift_bridgeObjectRelease();
        long long v7 = *(_OWORD *)v16;
        *(_OWORD *)(a1 + 64) = v15[4];
        *(_OWORD *)(a1 + 80) = v7;
        *(_OWORD *)(a1 + 89) = *(_OWORD *)&v16[9];
        long long v8 = v15[1];
        *(_OWORD *)a1 = v15[0];
        *(_OWORD *)(a1 + 16) = v8;
        long long v9 = v15[3];
        *(_OWORD *)(a1 + 32) = v15[2];
        *(_OWORD *)(a1 + 48) = v9;
        *(unsigned char *)(a1 + 105) = 1;
      }
      else
      {
        return swift_bridgeObjectRelease();
      }
    }
    else
    {
      uint64_t v11 = *(void *)&v15[0];
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v14 = v6;
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v11, (uint64_t)keypath_getTm_1, 0, isUniquelyReferenced_nonNull_native, &v14);
      uint64_t v13 = v14;
      swift_bridgeObjectRelease();
      uint64_t result = outlined destroy of SheetPreference.Value(a1);
      *(void *)a1 = v13;
      *(unsigned char *)(a1 + 105) = 0;
    }
  }
  return result;
}

uint64_t sub_187AC20A0()
{
  long long v4 = *(_OWORD *)(v0 + 24);
  uint64_t v1 = type metadata accessor for SheetPresentationModifier();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  swift_release();
  if (*(void *)(v2 + 24)) {
    swift_release();
  }
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(v4 - 8) + 8))(v2 + *(int *)(v1 + 68));
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SheetPresentationModifier.body(content:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SheetPresentationModifier() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #2 in SheetPresentationModifier.body(content:)(a1, v4);
}

uint64_t partial apply for closure #1 in ItemSheetPresentationModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in ItemSheetPresentationModifier.body(content:)(a1, v2[8], v2[2], v2[3], v2[4], v2[5], v2[6], v2[7], a2);
}

uint64_t sub_187AC22B8()
{
  long long v6 = *(_OWORD *)(v0 + 16);
  long long v7 = *(_OWORD *)(v0 + 32);
  uint64_t v1 = type metadata accessor for ItemSheetPresentationModifier();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v4 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, void))(v4 + 48))(v3, 1, v6)) {
    (*(void (**)(uint64_t, void))(v4 + 8))(v3, v6);
  }
  if (*(void *)(v2 + *(int *)(v1 + 68))) {
    swift_release();
  }
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(v7 - 8) + 8))(v2 + *(int *)(v1 + 84));
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ItemSheetPresentationModifier.body(content:)(char a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = *(void *)(type metadata accessor for ItemSheetPresentationModifier() - 8);
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v9 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return closure #2 in ItemSheetPresentationModifier.body(content:)(a1, v10, v3, v4, v5, v6, v7, v8);
}

uint64_t specialized ItemSheetPresentationModifier.item.setter()
{
  type metadata accessor for Optional();
  type metadata accessor for Binding();

  return specialized Binding.wrappedValue.setter();
}

uint64_t outlined init with copy of InspectorStorage(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for (key: ViewIdentity, value: InspectorStorage)?()
{
  if (!lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage)?)
  {
    type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(255, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage));
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage)?);
    }
  }
}

void type metadata accessor for (key: Selector, value: CommandAction)?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (key: AnyHashable, value: Anchor<CGRect?>)()
{
  if (!lazy cache variable for type metadata for (key: AnyHashable, value: Anchor<CGRect?>))
  {
    type metadata accessor for (key: Selector, value: CommandAction)?(255, &lazy cache variable for type metadata for Anchor<CGRect?>, (uint64_t (*)(uint64_t))type metadata accessor for CGRect?, MEMORY[0x1E4F41588]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: AnyHashable, value: Anchor<CGRect?>));
    }
  }
}

uint64_t outlined destroy of (key: Selector, value: CommandAction)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (key: UIMenuElement, value: CommandOperation)()
{
  if (!lazy cache variable for type metadata for (key: UIMenuElement, value: CommandOperation))
  {
    type metadata accessor for UIMenuElement();
    type metadata accessor for CommandOperation();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: UIMenuElement, value: CommandOperation));
    }
  }
}

unint64_t type metadata accessor for UIMenuElement()
{
  unint64_t result = lazy cache variable for type metadata for UIMenuElement;
  if (!lazy cache variable for type metadata for UIMenuElement)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  }
  return result;
}

void type metadata accessor for (UIMenuElement, CommandOperation)()
{
  if (!lazy cache variable for type metadata for (UIMenuElement, CommandOperation))
  {
    type metadata accessor for UIMenuElement();
    type metadata accessor for CommandOperation();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UIMenuElement, CommandOperation));
    }
  }
}

void type metadata accessor for (key: UUID, value: PlatformItemList)()
{
  if (!lazy cache variable for type metadata for (key: UUID, value: PlatformItemList))
  {
    type metadata accessor for UUID();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: UUID, value: PlatformItemList));
    }
  }
}

uint64_t outlined init with take of (key: Selector, value: CommandAction)?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for (key: Selector, value: CommandAction)?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for (UUID, PlatformItemList)()
{
  if (!lazy cache variable for type metadata for (UUID, PlatformItemList))
  {
    type metadata accessor for UUID();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UUID, PlatformItemList));
    }
  }
}

uint64_t outlined init with copy of CommandOperation(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for SheetContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for SheetContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187AC2E20);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CoreSheetPresentationModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || v7 + ((v6 + 80) & (unint64_t)~v6) + 1 > 0x18)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = *a2;
    unint64_t v11 = (unint64_t)a2 + 15;
    *a1 = v12;
    int v13 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v13 = *(void *)(v11 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v14 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = ((v11 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = *(void *)v15;
    swift_retain();
    if (v16 < 0xFFFFFFFF)
    {
      *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v17 = *(void *)(v15 + 8);
      *(void *)unint64_t v14 = v16;
      *(void *)(v14 + 8) = v17;
      swift_retain();
    }
    uint64_t v18 = ~v6;
    *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
    *(unsigned char *)(v14 + 17) = *(unsigned char *)(v15 + 17);
    unint64_t v19 = (v14 + 25) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v15 + 25) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = *(void *)(v20 + 24);
    if (v21 < 0xFFFFFFFF)
    {
      long long v22 = *(_OWORD *)v20;
      long long v23 = *(_OWORD *)(v20 + 16);
      *(void *)(v19 + 32) = *(void *)(v20 + 32);
      *(_OWORD *)unint64_t v19 = v22;
      *(_OWORD *)(v19 + 16) = v23;
    }
    else
    {
      *(void *)(v19 + 24) = v21;
      *(void *)(v19 + 32) = *(void *)(v20 + 32);
      (**(void (***)(unint64_t, unint64_t))(v21 - 8))(v19, v20);
    }
    uint64_t v24 = (v19 + v6 + 40) & v18;
    uint64_t v25 = (v20 + v6 + 40) & v18;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v24, v25, v4);
    *(unsigned char *)(v24 + v7) = *(unsigned char *)(v25 + v7);
  }
  return v3;
}

void *initializeWithTake for CoreSheetPresentationModifier(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 15;
  *a1 = v5;
  uint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v6 = *(void *)(v4 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v7 = ((unint64_t)v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((v4 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
  }
  *(unsigned char *)(v7 + 16) = *(unsigned char *)(v8 + 16);
  *(unsigned char *)(v7 + 17) = *(unsigned char *)(v8 + 17);
  unint64_t v10 = (v7 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v8 + 25) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v11;
  long long v13 = *(_OWORD *)(v11 + 16);
  *(void *)(v10 + 32) = *(void *)(v11 + 32);
  *(_OWORD *)unint64_t v10 = v12;
  *(_OWORD *)(v10 + 16) = v13;
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v10 + v16 + 40) & ~v16;
  uint64_t v18 = (v11 + v16 + 40) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v17, v18);
  *(unsigned char *)(v17 + *(void *)(v15 + 32)) = *(unsigned char *)(v18 + *(void *)(v15 + 32));
  return a1;
}

void *assignWithTake for CoreSheetPresentationModifier(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v5 = (unint64_t)a2 + 15;
  *a1 = v6;
  unint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 15;
  *unint64_t v7 = *(void *)(v5 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = *(void *)v10;
  if (*(void *)v9 < 0xFFFFFFFFuLL)
  {
    if (v11 >= 0xFFFFFFFF)
    {
      uint64_t v13 = *(void *)(v10 + 8);
      *(void *)unint64_t v9 = v11;
      *(void *)(v9 + 8) = v13;
      goto LABEL_8;
    }
  }
  else
  {
    if (v11 >= 0xFFFFFFFF)
    {
      uint64_t v12 = *(void *)(v10 + 8);
      *(void *)unint64_t v9 = v11;
      *(void *)(v9 + 8) = v12;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
LABEL_8:
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(unsigned char *)(v9 + 17) = *(unsigned char *)(v10 + 17);
  unint64_t v14 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v14 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(v14);
  }
  unint64_t v15 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  long long v16 = *(_OWORD *)v15;
  long long v17 = *(_OWORD *)(v15 + 16);
  *(void *)(v14 + 32) = *(void *)(v15 + 32);
  *(_OWORD *)unint64_t v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  uint64_t v18 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v19 = v18 + 40;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = (v14 + v20 + 40) & ~v20;
  uint64_t v22 = (v15 + v20 + 40) & ~v20;
  (*(void (**)(uint64_t, uint64_t))(v18 + 40))(v21, v22);
  *(unsigned char *)(v21 + *(void *)(v19 + 24)) = *(unsigned char *)(v22 + *(void *)(v19 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreSheetPresentationModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 80) & ~v6) + 1;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      unint64_t v15 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v5 > 0x7FFFFFFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                        + 25) & 0xFFFFFFFFFFFFFFF8)
                                                                      + v6
                                                                      + 40) & ~v6);
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      if ((v16 + 1) >= 2) {
        return v16;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for CoreSheetPresentationModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 80) & ~v9) + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 80) & ~v9) != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187AC36E4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        uint64_t v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if (v7 > 0x7FFFFFFE)
        {
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(((((((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + v9 + 40) & ~v9);
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *uint64_t v18 = 0;
          *(_DWORD *)uint64_t v18 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *uint64_t v18 = a2;
        }
      }
      return;
  }
}

unsigned char *storeEnumTagSinglePayload for SheetPreference.Placement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187AC37D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

_UNKNOWN **sub_187AC3800()
{
  return &protocol witness table for TransactionalPreferenceTransformModifier<A>;
}

uint64_t sub_187AC380C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187AC38FC()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type SheetPreference.Placement and conformance SheetPreference.Placement()
{
  unint64_t result = lazy protocol witness table cache variable for type SheetPreference.Placement and conformance SheetPreference.Placement;
  if (!lazy protocol witness table cache variable for type SheetPreference.Placement and conformance SheetPreference.Placement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SheetPreference.Placement and conformance SheetPreference.Placement);
  }
  return result;
}

uint64_t sub_187AC3A3C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tintAdjustmentMode.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187AC3A80()
{
  return EnvironmentValues.tintAdjustmentMode.setter();
}

uint64_t sub_187AC3AB8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.menuIndicatorProminenceReduced.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187AC3AF8()
{
  return EnvironmentValues.menuIndicatorProminenceReduced.setter();
}

double _s7SwiftUI12ViewIdentityV_AA12AlertStorageVtSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void type metadata accessor for (ViewIdentity, AlertStorage)?()
{
  if (!lazy cache variable for type metadata for (ViewIdentity, AlertStorage)?)
  {
    type metadata accessor for (Badge, Spacer)(255, (unint64_t *)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage));
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage)?);
    }
  }
}

void type metadata accessor for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?()
{
  if (!lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?)
  {
    type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(255, (unint64_t *)&lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration));
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?);
    }
  }
}

double _s7SwiftUI9NamespaceV2IDV_AA20OrnamentPresentationVtSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

void type metadata accessor for (Namespace.ID, OrnamentPresentation)?()
{
  if (!lazy cache variable for type metadata for (Namespace.ID, OrnamentPresentation)?)
  {
    type metadata accessor for (Badge, Spacer)(255, &lazy cache variable for type metadata for (Namespace.ID, OrnamentPresentation));
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (Namespace.ID, OrnamentPresentation)?);
    }
  }
}

void type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation)?()
{
  if (!lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation)?)
  {
    type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(255, (unint64_t *)&lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation));
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation)?);
    }
  }
}

uint64_t sub_187AC3D20()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for CoreSheetPresentationModifier();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  swift_release();
  if (*(void *)(v3 + 16)) {
    swift_release();
  }
  if (*(void *)(v3 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(v3 + 40);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + *(int *)(v2 + 56), v1);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for (key: Selector, value: CommandAction)()
{
  if (!lazy cache variable for type metadata for (key: Selector, value: CommandAction))
  {
    type metadata accessor for CommandAction();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: Selector, value: CommandAction));
    }
  }
}

unint64_t type metadata accessor for CommandAction()
{
  unint64_t result = lazy cache variable for type metadata for CommandAction;
  if (!lazy cache variable for type metadata for CommandAction)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CommandAction);
  }
  return result;
}

uint64_t sub_187AC3F20()
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, &lazy cache variable for type metadata for StyleContextWriter<SheetStyleContext>, MEMORY[0x1E4F40190], MEMORY[0x1E4F40188], MEMORY[0x1E4F40318]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  type metadata accessor for Binding<PresentationMode>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior, MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Binding<PresentationMode>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], v0);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for Binding<PresentationMode>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, v0);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Binding<PresentationMode>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, v0);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<SheetStyleContext> and conformance StyleContextWriter<A>();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>, (void (*)(uint64_t))type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>);
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>);
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior);
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390]);
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled);
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed);
  return swift_getWitnessTable();
}

uint64_t sub_187AC439C()
{
  return swift_getWitnessTable();
}

uint64_t destroy for UpdateViewDestinationRequest(uint64_t result)
{
  uint64_t v1 = result;
  if (*(void *)(result + 8) != 1)
  {
    swift_weakDestroy();
    swift_release();
    unint64_t result = swift_release();
  }
  if (*(void *)(v1 + 128) >> 1 != 0xFFFFFFFFLL)
  {
    outlined consume of NavigationRequest.Action(*(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(unsigned char *)(v1 + 88));
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for UpdateViewDestinationRequest(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 8) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    swift_weakCopyInit();
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v4;
    swift_retain();
    swift_retain();
  }
  if (*(void *)(a2 + 128) >> 1 == 0xFFFFFFFFLL)
  {
    long long v5 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v5;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    long long v6 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v6;
    long long v7 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v7;
    long long v8 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v8;
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 24);
    uint64_t v10 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v12 = *(void *)(a2 + 48);
    uint64_t v13 = *(void *)(a2 + 56);
    uint64_t v14 = *(void *)(a2 + 64);
    uint64_t v15 = *(void *)(a2 + 72);
    uint64_t v16 = *(void *)(a2 + 80);
    char v19 = *(unsigned char *)(a2 + 88);
    outlined copy of NavigationRequest.Action(v9, v10, v11, v12, v13, v14, v15, v16, v19);
    *(void *)(a1 + 24) = v9;
    *(void *)(a1 + 32) = v10;
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v16;
    *(unsigned char *)(a1 + 88) = v19;
    long long v17 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v17;
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for UpdateViewDestinationRequest(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8) == 1)
  {
    if (v4 == 1)
    {
      long long v5 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v5;
    }
    else
    {
      swift_weakCopyInit();
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      swift_retain();
      swift_retain();
    }
  }
  else if (v4 == 1)
  {
    outlined destroy of NavigationAuthority(a1);
    uint64_t v6 = *((void *)a2 + 2);
    *(_OWORD *)a1 = *a2;
    *(void *)(a1 + 16) = v6;
  }
  else
  {
    swift_weakCopyAssign();
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    swift_retain();
    swift_release();
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    swift_retain();
    swift_release();
  }
  long long v7 = (_OWORD *)(a1 + 24);
  long long v8 = (long long *)((char *)a2 + 24);
  unint64_t v9 = a2[8] & 0xFFFFFFFFFFFFFFFELL;
  if (*(void *)(a1 + 128) >> 1 == 0xFFFFFFFFLL)
  {
    if (v9 == 0x1FFFFFFFELL)
    {
      *long long v7 = *v8;
      long long v10 = *(long long *)((char *)a2 + 40);
      long long v11 = *(long long *)((char *)a2 + 56);
      long long v12 = *(long long *)((char *)a2 + 88);
      *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
      *(_OWORD *)(a1 + 88) = v12;
      *(_OWORD *)(a1 + 40) = v10;
      *(_OWORD *)(a1 + 56) = v11;
      long long v13 = *(long long *)((char *)a2 + 104);
      long long v14 = *(long long *)((char *)a2 + 120);
      long long v15 = *(long long *)((char *)a2 + 136);
      *(void *)(a1 + 152) = *((void *)a2 + 19);
      *(_OWORD *)(a1 + 120) = v14;
      *(_OWORD *)(a1 + 136) = v15;
      *(_OWORD *)(a1 + 104) = v13;
    }
    else
    {
      uint64_t v22 = *((void *)a2 + 3);
      uint64_t v23 = *((void *)a2 + 4);
      uint64_t v24 = *((void *)a2 + 5);
      uint64_t v25 = *((void *)a2 + 6);
      uint64_t v26 = *((void *)a2 + 7);
      uint64_t v27 = *((void *)a2 + 8);
      uint64_t v28 = *((void *)a2 + 9);
      uint64_t v29 = *((void *)a2 + 10);
      char v52 = *((unsigned char *)a2 + 88);
      outlined copy of NavigationRequest.Action(v22, v23, v24, v25, v26, v27, v28, v29, v52);
      *(void *)(a1 + 24) = v22;
      *(void *)(a1 + 32) = v23;
      *(void *)(a1 + 40) = v24;
      *(void *)(a1 + 48) = v25;
      *(void *)(a1 + 56) = v26;
      *(void *)(a1 + 64) = v27;
      *(void *)(a1 + 72) = v28;
      *(void *)(a1 + 80) = v29;
      *(unsigned char *)(a1 + 88) = v52;
      long long v30 = a2[6];
      long long v31 = a2[8];
      *(_OWORD *)(a1 + 112) = a2[7];
      *(_OWORD *)(a1 + 128) = v31;
      *(_OWORD *)(a1 + 96) = v30;
      *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
      *(void *)(a1 + 152) = *((void *)a2 + 19);
      swift_retain();
    }
  }
  else if (v9 == 0x1FFFFFFFELL)
  {
    outlined destroy of NavigationRequest(a1 + 24);
    *long long v7 = *v8;
    long long v16 = *(long long *)((char *)a2 + 88);
    long long v18 = *(long long *)((char *)a2 + 40);
    long long v17 = *(long long *)((char *)a2 + 56);
    *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
    *(_OWORD *)(a1 + 88) = v16;
    *(_OWORD *)(a1 + 40) = v18;
    *(_OWORD *)(a1 + 56) = v17;
    long long v20 = *(long long *)((char *)a2 + 120);
    long long v19 = *(long long *)((char *)a2 + 136);
    long long v21 = *(long long *)((char *)a2 + 104);
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    *(_OWORD *)(a1 + 120) = v20;
    *(_OWORD *)(a1 + 136) = v19;
    *(_OWORD *)(a1 + 104) = v21;
  }
  else
  {
    uint64_t v32 = *((void *)a2 + 3);
    uint64_t v33 = *((void *)a2 + 4);
    uint64_t v34 = *((void *)a2 + 5);
    uint64_t v35 = *((void *)a2 + 6);
    uint64_t v36 = *((void *)a2 + 7);
    uint64_t v37 = *((void *)a2 + 8);
    uint64_t v38 = *((void *)a2 + 9);
    uint64_t v39 = *((void *)a2 + 10);
    char v53 = *((unsigned char *)a2 + 88);
    outlined copy of NavigationRequest.Action(v32, v33, v34, v35, v36, v37, v38, v39, v53);
    uint64_t v40 = *(void *)(a1 + 24);
    uint64_t v41 = *(void *)(a1 + 32);
    uint64_t v42 = *(void *)(a1 + 40);
    uint64_t v43 = *(void *)(a1 + 48);
    uint64_t v44 = *(void *)(a1 + 56);
    uint64_t v45 = *(void *)(a1 + 64);
    uint64_t v46 = *(void *)(a1 + 72);
    uint64_t v47 = *(void *)(a1 + 80);
    char v48 = *(unsigned char *)(a1 + 88);
    *(void *)(a1 + 24) = v32;
    *(void *)(a1 + 32) = v33;
    *(void *)(a1 + 40) = v34;
    *(void *)(a1 + 48) = v35;
    *(void *)(a1 + 56) = v36;
    *(void *)(a1 + 64) = v37;
    *(void *)(a1 + 72) = v38;
    *(void *)(a1 + 80) = v39;
    *(unsigned char *)(a1 + 88) = v53;
    outlined consume of NavigationRequest.Action(v40, v41, v42, v43, v44, v45, v46, v47, v48);
    long long v49 = a2[6];
    long long v50 = a2[8];
    *(_OWORD *)(a1 + 112) = a2[7];
    *(_OWORD *)(a1 + 128) = v50;
    *(_OWORD *)(a1 + 96) = v49;
    *(unsigned char *)(a1 + 144) = *((unsigned char *)a2 + 144);
    *(void *)(a1 + 152) = *((void *)a2 + 19);
    swift_retain();
    swift_release();
  }
  return a1;
}

uint64_t outlined destroy of NavigationRequest(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for UpdateViewDestinationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (_OWORD *)(a2 + 8);
  if (*(void *)(a2 + 8) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    a1 = swift_weakTakeInit();
    *(_OWORD *)(a1 + 8) = *v3;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  return result;
}

uint64_t assignWithTake for UpdateViewDestinationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) == 1)
  {
    if (v5 != 1)
    {
      swift_weakTakeInit();
      *uint64_t v4 = *v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 == 1)
  {
    outlined destroy of NavigationAuthority(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    goto LABEL_8;
  }
  swift_weakTakeAssign();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
LABEL_8:
  if (*(void *)(a1 + 128) >> 1 != 0xFFFFFFFFLL)
  {
    if (*(void *)(a2 + 128) >> 1 != 0xFFFFFFFFLL)
    {
      char v11 = *(unsigned char *)(a2 + 88);
      uint64_t v12 = *(void *)(a1 + 24);
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(void *)(a1 + 40);
      uint64_t v15 = *(void *)(a1 + 48);
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = *(void *)(a1 + 64);
      uint64_t v18 = *(void *)(a1 + 72);
      uint64_t v19 = *(void *)(a1 + 80);
      char v20 = *(unsigned char *)(a1 + 88);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(unsigned char *)(a1 + 88) = v11;
      outlined consume of NavigationRequest.Action(v12, v13, v14, v15, v16, v17, v18, v19, v20);
      long long v21 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v21;
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      swift_release();
      return a1;
    }
    outlined destroy of NavigationRequest(a1 + 24);
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v7;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  long long v8 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = v8;
  long long v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v9;
  long long v10 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v10;
  return a1;
}

uint64_t storeEnumTagSinglePayload for UpdateViewDestinationRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 0;
    }
    if (a2)
    {
      *(_OWORD *)(result + 96) = 0u;
      *(_OWORD *)(result + 112) = 0u;
      *(void *)(result + 128) = 2 * ~a2;
      *(void *)(result + 136) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UpdateViewDestinationRequest.UpdateViewDestinationRequestKey()
{
  return &type metadata for UpdateViewDestinationRequest.UpdateViewDestinationRequestKey;
}

uint64_t UpdateViewDestinationRequest.init<A>(presentDestination:key:depth:linkIdentifier:shouldTargetSourceColumn:isPresented:navigationAuthority:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, char a7@<W7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  outlined init with take of NavigationRequest.KeyKind?(a2, (uint64_t)v39, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  uint64_t v15 = v39[0];
  uint64_t v14 = v39[1];
  uint64_t v17 = v39[2];
  uint64_t v16 = v39[3];
  uint64_t v26 = v39[5];
  uint64_t v27 = v39[4];
  uint64_t v31 = *(void *)(a4 + 8);
  uint64_t v30 = *(void *)(a4 + 16);
  *(_OWORD *)a8 = xmmword_18834BB90;
  *(void *)(a8 + 16) = 0;
  _s7SwiftUI17NavigationRequestVSgWOi0_((uint64_t)v43);
  outlined init with take of NavigationRequest.KeyKind?((uint64_t)v43, a8 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  outlined init with take of NavigationRequest.KeyKind?(a2, (uint64_t)v40, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  if (v41 >> 1 == 0xFFFFFFFF)
  {
    swift_release();
    outlined init with take of NavigationRequest.KeyKind?((uint64_t)v43, (uint64_t)v42, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    uint64_t v18 = a1;
    uint64_t v19 = a11;
    uint64_t v20 = v30;
    uint64_t v21 = v31;
  }
  else
  {
    v42[0] = v15;
    v42[1] = v14;
    _OWORD v42[2] = v17;
    void v42[3] = v16;
    void v42[4] = v27;
    v42[5] = v26;
    uint64_t v18 = a1;
    uint64_t v20 = v30;
    uint64_t v21 = v31;
    closure #1 in UpdateViewDestinationRequest.init<A>(presentDestination:key:depth:linkIdentifier:shouldTargetSourceColumn:isPresented:navigationAuthority:transaction:)((uint64_t)v42, a1, a3, (uint64_t)v35, a5, a6, a7 & 1);
    swift_release();
    v37[6] = v35[6];
    v37[7] = v35[7];
    uint64_t v38 = v36;
    _OWORD v37[2] = v35[2];
    v37[3] = v35[3];
    v37[4] = v35[4];
    v37[5] = v35[5];
    v37[0] = v35[0];
    v37[1] = v35[1];
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v37, v22, v23, v24);
    outlined init with take of NavigationRequest.KeyKind?((uint64_t)v37, (uint64_t)v42, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    uint64_t v19 = a11;
  }
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(v21, v20);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
  outlined init with take of NavigationRequest.KeyKind?(a8 + 24, (uint64_t)v37, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  outlined release of NavigationRequest?(v37, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationRequest?);
  outlined init with take of NavigationRequest.KeyKind?((uint64_t)v42, a8 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  return outlined assign with take of NavigationAuthority?(a9, a8);
}

uint64_t UpdateViewDestinationRequest.init<A>(updateDestination:key:identifier:shouldTargetSourceColumn:navigationAuthority:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  outlined init with take of NavigationRequest.KeyKind?(a2, (uint64_t)v42, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  uint64_t v10 = v42[0];
  uint64_t v11 = v42[1];
  uint64_t v23 = v42[3];
  uint64_t v24 = v42[2];
  uint64_t v21 = v42[5];
  uint64_t v22 = v42[4];
  uint64_t v13 = *a3;
  uint64_t v12 = a3[1];
  uint64_t v14 = a3[2];
  uint64_t v25 = a3[3];
  *(_OWORD *)a7 = xmmword_18834BB90;
  *(void *)(a7 + 16) = 0;
  _s7SwiftUI17NavigationRequestVSgWOi0_((uint64_t)v46);
  outlined init with take of NavigationRequest.KeyKind?((uint64_t)v46, a7 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  outlined init with take of NavigationRequest.KeyKind?(a2, (uint64_t)v43, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
  if (v44 >> 1 == 0xFFFFFFFF)
  {
    swift_release();
    outlined consume of Text.LineStyle?(v12, v14);
    outlined init with take of NavigationRequest.KeyKind?((uint64_t)v46, (uint64_t)v45, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    uint64_t v15 = a1;
    uint64_t v16 = a6;
  }
  else
  {
    v30[0] = v10;
    v30[1] = v11;
    v30[2] = v24;
    uint64_t v30[3] = v23;
    v30[4] = v22;
    v30[5] = v21;
    outlined init with take of NavigationRequest.KeyKind((uint64_t)v30, (uint64_t)v45);
    *(void *)&long long v33 = v13;
    *((void *)&v33 + 1) = v12;
    *(void *)&long long v34 = v14;
    *((void *)&v34 + 1) = v25;
    static NavigationRequest.updateView<A>(_:from:identifier:shouldTargetSourceColumn:)(a1, (uint64_t)v45, a4 & 1, (uint64_t)v31);
    swift_release();
    outlined consume of Text.LineStyle?(v12, v14);
    long long v39 = v31[6];
    long long v40 = v31[7];
    uint64_t v41 = v32;
    long long v35 = v31[2];
    long long v36 = v31[3];
    long long v37 = v31[4];
    long long v38 = v31[5];
    long long v33 = v31[0];
    long long v34 = v31[1];
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v33, v17, v18, v19);
    outlined init with take of NavigationRequest.KeyKind?((uint64_t)&v33, (uint64_t)v45, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
    uint64_t v16 = a6;
    uint64_t v15 = a1;
  }
  (*(void (**)(uint64_t))(*(void *)(v16 - 8) + 8))(v15);
  outlined init with take of NavigationRequest.KeyKind?(a7 + 24, (uint64_t)&v33, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  outlined release of NavigationRequest?(&v33, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of NavigationRequest?);
  outlined init with take of NavigationRequest.KeyKind?((uint64_t)v45, a7 + 24, &lazy cache variable for type metadata for NavigationRequest?, (uint64_t)&type metadata for NavigationRequest);
  return outlined assign with take of NavigationAuthority?(a5, a7);
}

uint64_t closure #1 in UpdateViewDestinationRequest.init<A>(presentDestination:key:depth:linkIdentifier:shouldTargetSourceColumn:isPresented:navigationAuthority:transaction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6, char a7)
{
  outlined init with take of NavigationRequest.KeyKind(a1, (uint64_t)v12);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a5;
  *(void *)(v8 + 24) = a6;
  *(unsigned char *)(v8 + 32) = a7;
  swift_retain();
  swift_retain();
  static NavigationRequest.programmaticallyPresentView<A>(_:from:transaction:depth:identifier:dismiss:)(a2, (uint64_t)v12, a3, (uint64_t)partial apply for closure #1 in View.actionSheet(isPresented:content:), v8, a4);
  return swift_release();
}

uint64_t *initializeBufferWithCopyOfBuffer for UpdateViewDestinationRequestProcessor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84)) {
    size_t v8 = *(void *)(v7 + 64);
  }
  else {
    size_t v8 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  size_t v11 = v8 + v10;
  uint64_t v12 = *(void *)(v9 + 64) + 7;
  unsigned int v13 = v10 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v12 + ((v8 + v10) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v10;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    unint64_t v18 = ((unint64_t)a2 + v11) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, v18, v5);
    *(void *)((v12 + (((unint64_t)a1 + v11) & v17)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v12 + v18) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for UpdateViewDestinationRequestProcessor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)(v6 - 8) + 8);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v9 = *(void *)(v5 + 64) + a1;
  if (!*(_DWORD *)(v5 + 84)) {
    ++v9;
  }

  return v7((v9 + v8) & ~v8);
}

void *initializeWithCopy for UpdateViewDestinationRequestProcessor(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    int v8 = *(_DWORD *)(v7 + 84);
    size_t v9 = *(void *)(v7 + 64);
    if (v8) {
      size_t v10 = v9;
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    uint64_t v12 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v11 = v7 + 56;
    v12(a1, 0, 1, v6);
    int v8 = *(_DWORD *)(v11 + 28);
    size_t v9 = *(void *)(v11 + 8);
  }
  if (v8) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v9 + 1;
  }
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  unint64_t v18 = ((unint64_t)a1 + v17) & ~v16;
  unint64_t v19 = ((unint64_t)a2 + v17) & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))(v18, v19);
  *(void *)((*(void *)(v15 + 48) + 7 + v18) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v15 + 48)
                                                                                       + 7
                                                                                       + v19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for UpdateViewDestinationRequestProcessor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_12;
    }
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  if (v11) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v12 + 1;
  }
  memcpy(a1, a2, v13);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v14 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v14 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v16 = v15 + 24;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = v14 + v17;
  unint64_t v19 = ((unint64_t)a1 + v18) & ~v17;
  unint64_t v20 = ((unint64_t)a2 + v18) & ~v17;
  (*(void (**)(unint64_t, unint64_t))(v15 + 24))(v19, v20);
  *(void *)((*(void *)(v16 + 40) + 7 + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v16 + 40)
                                                                                       + 7
                                                                                       + v20) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for UpdateViewDestinationRequestProcessor(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    int v8 = *(_DWORD *)(v7 + 84);
    size_t v9 = *(void *)(v7 + 64);
    if (v8) {
      size_t v10 = v9;
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    size_t v12 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v11 = v7 + 56;
    v12(a1, 0, 1, v6);
    int v8 = *(_DWORD *)(v11 + 28);
    size_t v9 = *(void *)(v11 + 8);
  }
  if (v8) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v9 + 1;
  }
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  unint64_t v18 = ((unint64_t)a1 + v17) & ~v16;
  unint64_t v19 = ((unint64_t)a2 + v17) & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v14 + 32))(v18, v19);
  *(void *)((*(void *)(v15 + 32) + 7 + v18) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v15 + 32)
                                                                                       + 7
                                                                                       + v19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for UpdateViewDestinationRequestProcessor(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_12;
    }
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  if (v11) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v12 + 1;
  }
  memcpy(a1, a2, v13);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v14 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v14 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v16 = v15 + 40;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = v14 + v17;
  unint64_t v19 = ((unint64_t)a1 + v18) & ~v17;
  unint64_t v20 = ((unint64_t)a2 + v18) & ~v17;
  (*(void (**)(unint64_t, unint64_t))(v15 + 40))(v19, v20);
  *(void *)((*(void *)(v16 + 24) + 7 + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v16 + 24)
                                                                                       + 7
                                                                                       + v20) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateViewDestinationRequestProcessor(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned int *)(v8 + 84);
  if (v10 <= v6) {
    unsigned int v11 = v6;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  if (v5) {
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  }
  else {
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v13 + v12;
  if (v11 < a2)
  {
    unint64_t v15 = ((*(void *)(*(void *)(v7 - 8) + 64) + (v14 & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = a2 - v11 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v15);
        if (!*((unsigned char *)a1 + v15)) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v15);
        if (*(_WORD *)((char *)a1 + v15)) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187AC5F48);
      case 4:
        int v19 = *(_DWORD *)((char *)a1 + v15);
        if (!v19) {
          break;
        }
LABEL_27:
        int v20 = v19 - 1;
        if ((v15 & 0xFFFFFFF8) != 0)
        {
          int v20 = 0;
          int v21 = *a1;
        }
        else
        {
          int v21 = 0;
        }
        return v11 + (v21 | v20) + 1;
      default:
        break;
    }
  }
  if (!v11) {
    return 0;
  }
  if (v6 >= v10)
  {
    unsigned int v25 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v25 >= 2) {
      return v25 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v22 = ((unint64_t)a1 + v14) & ~v12;
    uint64_t v23 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    return v23(v22, v10, v7);
  }
}

void storeEnumTagSinglePayload for UpdateViewDestinationRequestProcessor(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(a4 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  size_t v13 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  if (!v8) {
    ++v13;
  }
  size_t v16 = ((*(void *)(*(void *)(v10 - 8) + 64) + ((v13 + v14) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v15 < a3)
  {
    unsigned int v17 = a3 - v15;
    if (((*(_DWORD *)(*(void *)(v10 - 8) + 64) + ((v13 + v14) & ~v14) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v18 = v17 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v6 = v19;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v15)
  {
    if (((*(_DWORD *)(*(void *)(v10 - 8) + 64) + ((v13 + v14) & ~v14) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v20 = a2 - v15;
    }
    else {
      int v20 = 1;
    }
    if (((*(_DWORD *)(*(void *)(v10 - 8) + 64) + ((v13 + v14) & ~v14) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v21 = ~v15 + a2;
      bzero(a1, v16);
      *(_DWORD *)a1 = v21;
    }
    switch(v6)
    {
      case 1:
        a1[v16] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v20;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v16] = v20;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x187AC6258);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (a2)
      {
LABEL_36:
        if (v9 >= v12)
        {
          if (v9 >= a2)
          {
            uint64_t v26 = a2 + 1;
            uint64_t v27 = *(void (**)(char *, uint64_t))(v7 + 56);
            v27(a1, v26);
          }
          else
          {
            if (v13 <= 3) {
              int v23 = ~(-1 << (8 * v13));
            }
            else {
              int v23 = -1;
            }
            if (v13)
            {
              int v24 = v23 & (~v9 + a2);
              if (v13 <= 3) {
                int v25 = v13;
              }
              else {
                int v25 = 4;
              }
              bzero(a1, v13);
              switch(v25)
              {
                case 2:
                  *(_WORD *)a1 = v24;
                  break;
                case 3:
                  *(_WORD *)a1 = v24;
                  a1[2] = BYTE2(v24);
                  break;
                case 4:
                  *(_DWORD *)a1 = v24;
                  break;
                default:
                  *a1 = v24;
                  break;
              }
            }
          }
        }
        else
        {
          unint64_t v22 = *(void (**)(unint64_t))(v11 + 56);
          v22((unint64_t)&a1[v13 + v14] & ~v14);
        }
      }
      return;
  }
}

uint64_t destroy for UpdateViewDestinationRequestProcessor.PreferenceDebouncer(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t assignWithCopy for UpdateViewDestinationRequestProcessor.PreferenceDebouncer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v4 = (_OWORD *)(a1 + 24);
  int v5 = (_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) != 1)
  {
    if (v6 != 1)
    {
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of _ViewList_ID.Canonical(a1 + 24);
    goto LABEL_6;
  }
  if (v6 == 1)
  {
LABEL_6:
    *uint64_t v4 = *v5;
    goto LABEL_8;
  }
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
LABEL_8:
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t outlined destroy of _ViewList_ID.Canonical(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy68_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for UpdateViewDestinationRequestProcessor.PreferenceDebouncer(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v4 = (_OWORD *)(a1 + 24);
  int v5 = (void *)(a2 + 24);
  if (*(void *)(a1 + 32) != 1)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    if (v6 != 1)
    {
      *(void *)(a1 + 24) = *v5;
      *(void *)(a1 + 32) = v6;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of _ViewList_ID.Canonical((uint64_t)v4);
  }
  *long long v4 = *(_OWORD *)v5;
LABEL_6:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateViewDestinationRequestProcessor.PreferenceDebouncer(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 68)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateViewDestinationRequestProcessor.PreferenceDebouncer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(void *)__n128 result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 68) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 68) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

uint64_t assignWithTake for UpdateViewDestinationViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 24) + 7;
  unsigned int v12 = (_OWORD *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  size_t v13 = (long long *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  long long v14 = *v13;
  long long v15 = v13[2];
  v12[1] = v13[1];
  v12[2] = v15;
  *unsigned int v12 = v14;
  unint64_t v16 = ((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v13 + 55) & 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = v18;
  unint64_t v19 = ((unint64_t)v12 + 71) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v13 + 71) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  unint64_t v21 = ((unint64_t)v12 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v13 + 87) & 0xFFFFFFFFFFFFFFF8;
  int v23 = *(void *)(v21 + 8);
  if (*(void *)(v21 + 8) >= 0xFFFFFFFFuLL) {
    int v23 = -1;
  }
  int v24 = v23 - 1;
  unint64_t v25 = *(void *)(v22 + 8);
  if (v25 >= 0xFFFFFFFF) {
    LODWORD(v25) = -1;
  }
  int v26 = v25 - 1;
  if ((v24 & 0x80000000) == 0)
  {
    if (v26 < 0)
    {
      swift_weakTakeInit();
      *(_OWORD *)(v21 + 8) = *(_OWORD *)(v22 + 8);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if ((v26 & 0x80000000) == 0)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
LABEL_10:
    long long v27 = *(_OWORD *)v22;
    *(void *)(v21 + 16) = *(void *)(v22 + 16);
    *(_OWORD *)unint64_t v21 = v27;
    goto LABEL_11;
  }
  swift_weakTakeAssign();
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_release();
  *(void *)(v21 + 16) = *(void *)(v22 + 16);
  swift_release();
LABEL_11:
  *(unsigned char *)(v21 + 24) = *(unsigned char *)(v22 + 24);
  uint64_t v28 = (uint64_t *)(((unint64_t)v12 + 119) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v29 = (unint64_t *)(((unint64_t)v13 + 119) & 0xFFFFFFFFFFFFFFF8);
  if ((unint64_t)*v28 >= 0xFFFFFFFF) {
    LODWORD(v30) = -1;
  }
  else {
    uint64_t v30 = *v28;
  }
  unint64_t v31 = *v29;
  if ((int)v30 - 1 < 0)
  {
    LODWORD(v32) = -1;
    if (v31 < 0xFFFFFFFF) {
      unint64_t v32 = *v29;
    }
    if ((int)v32 - 1 < 0)
    {
      *uint64_t v28 = v31;
      swift_release();
      return a1;
    }
    swift_release();
    unint64_t v31 = *v29;
  }
  *uint64_t v28 = v31;
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateViewDestinationViewModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 17) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
         + 119) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187AC6944);
      case 4:
        int v14 = *(_DWORD *)(a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *(_DWORD *)a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 17) & ~v6);
  }
  unint64_t v17 = *(void *)(a1 + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for UpdateViewDestinationViewModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 119) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v18 = (unint64_t)&a1[v9 + 17] & ~v9;
              unint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              a1[16] = 0;
              *(void *)a1 = a2 ^ 0x80000000;
              *((void *)a1 + 1) = 0;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8)
         + 119) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8)
       + 119) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8)
       + 119) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187AC6B58);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

double _s7SwiftUI17NavigationRequestVSgWOi0_(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0x1FFFFFFFELL;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  return result;
}

uint64_t sub_187AC6BA4()
{
  swift_release();
  if (*(void *)(v0 + 56) != 1) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t destroy for UpdateViewDestinationViewModifier.RequestWriter(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result != 1) {
    uint64_t result = swift_release();
  }
  if (*(unsigned __int8 *)(a1 + 104) != 255) {
    return outlined consume of NavigationRequest.Action(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(unsigned char *)(a1 + 104));
  }
  return result;
}

uint64_t assignWithCopy for UpdateViewDestinationViewModifier.RequestWriter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  unsigned int v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16) == 1)
  {
    if (v6 != 1)
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 == 1)
  {
    outlined destroy of _ViewList_ID.Canonical(a1 + 8);
LABEL_6:
    *uint64_t v4 = *v5;
    goto LABEL_8;
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
LABEL_8:
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  char v7 = *(unsigned char *)(a2 + 36);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = v7;
  unsigned int v8 = (_OWORD *)(a1 + 40);
  uint64_t v9 = (_OWORD *)(a2 + 40);
  int v10 = *(unsigned __int8 *)(a2 + 104);
  if (*(unsigned __int8 *)(a1 + 104) == 255)
  {
    if (v10 == 255)
    {
      *unsigned int v8 = *v9;
      long long v39 = *(_OWORD *)(a2 + 56);
      long long v40 = *(_OWORD *)(a2 + 72);
      long long v41 = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      *(_OWORD *)(a1 + 72) = v40;
      *(_OWORD *)(a1 + 88) = v41;
      *(_OWORD *)(a1 + 56) = v39;
    }
    else
    {
      uint64_t v28 = *(void *)(a2 + 40);
      uint64_t v29 = *(void *)(a2 + 48);
      uint64_t v30 = *(void *)(a2 + 56);
      uint64_t v31 = *(void *)(a2 + 64);
      uint64_t v32 = *(void *)(a2 + 72);
      uint64_t v33 = *(void *)(a2 + 80);
      uint64_t v35 = *(void *)(a2 + 88);
      uint64_t v34 = *(void *)(a2 + 96);
      outlined copy of NavigationRequest.Action(v28, v29, v30, v31, v32, v33, v35, v34, v10);
      *(void *)(a1 + 40) = v28;
      *(void *)(a1 + 48) = v29;
      *(void *)(a1 + 56) = v30;
      *(void *)(a1 + 64) = v31;
      *(void *)(a1 + 72) = v32;
      *(void *)(a1 + 80) = v33;
      *(void *)(a1 + 88) = v35;
      *(void *)(a1 + 96) = v34;
      *(unsigned char *)(a1 + 104) = v10;
    }
  }
  else if (v10 == 255)
  {
    outlined destroy of NavigationRequest.Action(a1 + 40);
    *unsigned int v8 = *v9;
    long long v37 = *(_OWORD *)(a2 + 72);
    long long v36 = *(_OWORD *)(a2 + 88);
    long long v38 = *(_OWORD *)(a2 + 56);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(_OWORD *)(a1 + 72) = v37;
    *(_OWORD *)(a1 + 88) = v36;
    *(_OWORD *)(a1 + 56) = v38;
  }
  else
  {
    uint64_t v11 = *(void *)(a2 + 40);
    uint64_t v12 = *(void *)(a2 + 48);
    uint64_t v13 = *(void *)(a2 + 56);
    uint64_t v14 = *(void *)(a2 + 64);
    uint64_t v15 = *(void *)(a2 + 72);
    uint64_t v16 = *(void *)(a2 + 80);
    uint64_t v18 = *(void *)(a2 + 88);
    uint64_t v17 = *(void *)(a2 + 96);
    outlined copy of NavigationRequest.Action(v11, v12, v13, v14, v15, v16, v18, v17, v10);
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = *(void *)(a1 + 64);
    uint64_t v23 = *(void *)(a1 + 72);
    uint64_t v24 = *(void *)(a1 + 80);
    uint64_t v25 = *(void *)(a1 + 88);
    uint64_t v26 = *(void *)(a1 + 96);
    char v27 = *(unsigned char *)(a1 + 104);
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = v13;
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v15;
    *(void *)(a1 + 80) = v16;
    *(void *)(a1 + 88) = v18;
    *(void *)(a1 + 96) = v17;
    *(unsigned char *)(a1 + 104) = v10;
    outlined consume of NavigationRequest.Action(v19, v20, v21, v22, v23, v24, v25, v26, v27);
  }
  return a1;
}

uint64_t assignWithTake for UpdateViewDestinationViewModifier.RequestWriter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  unsigned int v5 = (_OWORD *)(a2 + 8);
  if (*(void *)(a1 + 16) == 1) {
    goto LABEL_4;
  }
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6 == 1)
  {
    outlined destroy of _ViewList_ID.Canonical((uint64_t)v4);
LABEL_4:
    *uint64_t v4 = *v5;
    goto LABEL_6;
  }
  *(void *)(a1 + 8) = *(void *)v5;
  *(void *)(a1 + 16) = v6;
  swift_release();
LABEL_6:
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
  int v7 = *(unsigned __int8 *)(a1 + 104);
  if (v7 == 255)
  {
LABEL_10:
    long long v17 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v17;
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    long long v18 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v18;
    return a1;
  }
  int v8 = *(unsigned __int8 *)(a2 + 104);
  if (v8 == 255)
  {
    outlined destroy of NavigationRequest.Action(a1 + 40);
    goto LABEL_10;
  }
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v16 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = v8;
  outlined consume of NavigationRequest.Action(v9, v10, v11, v12, v13, v14, v15, v16, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateViewDestinationViewModifier.RequestWriter(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateViewDestinationViewModifier.RequestWriter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)uint64_t result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 105) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2 + 1;
    }
  }
  return result;
}

uint64_t sub_187AC705C()
{
  swift_release();
  if (*(void *)(v0 + 32) != 1) {
    swift_release();
  }
  unint64_t v1 = *(void *)(v0 + 176) & 0xFFFFFFFFFFFFFFFELL;
  if (v1 != 0x1FFFFFFFCLL)
  {
    if (*(void *)(v0 + 56) != 1)
    {
      swift_weakDestroy();
      swift_release();
      swift_release();
      unint64_t v1 = *(void *)(v0 + 176) & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v1 != 0x1FFFFFFFELL)
    {
      outlined consume of NavigationRequest.Action(*(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(unsigned char *)(v0 + 136));
      swift_release();
    }
  }

  return swift_deallocObject();
}

void *outlined release of NavigationRequest?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined copy of NavigationRequest?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  if (a14 >> 1 != 0xFFFFFFFF)
  {
    outlined copy of NavigationRequest.Action(result, a2, a3, a4, a5, a6, a7, a8, a9);
    return swift_retain();
  }
  return result;
}

uint64_t sub_187AC71E8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t key path getter for _CALayerView.update : <A>_CALayerView<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(a3 + a2 - 8);
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  int v8 = (void *)swift_allocObject();
  v8[2] = v5;
  v8[3] = v7;
  void v8[4] = v6;
  *a4 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> ();
  a4[1] = v8;

  return swift_retain();
}

uint64_t key path setter for _CALayerView.update : <A>_CALayerView<A>(uint64_t *a1, uint64_t (**a2)(uint64_t a1), uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + a3 - 8);
  uint64_t v7 = *a1;
  uint64_t v6 = a1[1];
  int v8 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)v8 + 2) = v5;
  *((void *)v8 + 3) = v7;
  *((void *)v8 + 4) = v6;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
  a2[1] = v8;
  return result;
}

uint64_t _CALayerView.update.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t _CALayerView.update.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_CALayerView.update.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _CALayerView<A>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance _CALayerView<A>()
{
}

uint64_t static _CALayerView.requiresMainThread.getter()
{
  return 1;
}

uint64_t sub_187AC744C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t _CALayerView.platformLayerType.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(void *)(a1 + 16), a2, a3, a4);
}

uint64_t protocol witness for PlatformLayerFactory.renderPlatformLayer(in:size:renderer:) in conformance _CALayerView<A>()
{
  return MEMORY[0x1F40FF920]();
}

uint64_t protocol witness for ContentResponder.contains(points:size:) in conformance _CALayerView<A>(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  v11.n128_f64[0] = a4;
  v12.n128_f64[0] = a5;

  return MEMORY[0x1F40FEA50](a1, a2, a3, WitnessTable, v11, v12);
}

double protocol witness for ContentResponder.contentPath(size:) in conformance _CALayerView<A>@<D0>(uint64_t a1@<X8>)
{
  ContentResponder.contentPath(size:)();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

double protocol witness for ContentResponder.contentPath(size:kind:) in conformance _CALayerView<A>@<D0>(uint64_t a1@<X8>)
{
  ContentResponder.contentPath(size:kind:)();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t protocol witness for AnyViewFactory.viewType.getter in conformance _CALayerView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1, a2, &protocol witness table for _CALayerView<A>, a4);
}

uint64_t protocol witness for AnyViewFactory.encoding() in conformance _CALayerView<A>()
{
  return MEMORY[0x1F40FE380]();
}

uint64_t _CALayerView<>.init(onUpdate:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

uint64_t sub_187AC75CC()
{
  return 8;
}

void *sub_187AC75D8(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_187AC75E4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed A) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 24))(*a1);
}

uint64_t AppStorage.location.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*AppStorage.location.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

char *UserDefaultLocation.__allocating_init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t AppStorage.wrappedValue.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized AppStorage.wrappedValue.setter();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8);

  return v5(a1, a3);
}

void (*AppStorage.wrappedValue.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1, char a2)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t v7 = *(void *)(a3 - 8);
  _OWORD v6[2] = v7;
  size_t v8 = *(void *)(v7 + 64);
  void v6[3] = malloc(v8);
  uint64_t v9 = malloc(v8);
  void v6[4] = v9;
  UserDefaultLocation.canonicalLocation.getter();
  UserDefaultLocation.getValue(forReading:)(1, (uint64_t)v9);
  swift_release();
  return AppStorage.wrappedValue.modify;
}

void AppStorage.wrappedValue.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  long long v3 = *(void **)(*(void *)a1 + 24);
  long long v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    UserDefaultLocation.canonicalLocation.getter();
    UserDefaultLocation.set(_:transaction:)();
    swift_release();
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    UserDefaultLocation.canonicalLocation.getter();
    UserDefaultLocation.set(_:transaction:)();
    swift_release();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t AppStorage.projectedValue.getter(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = (char *)v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  UserDefaultLocation.canonicalLocation.getter();
  UserDefaultLocation.getValue(forReading:)(0, (uint64_t)v2);
  swift_release();
  type metadata accessor for UserDefaultLocation();
  swift_getWitnessTable();
  type metadata accessor for LocationBox();
  v4[1] = UserDefaultLocation.canonicalLocation.getter();
  swift_allocObject();
  LocationBox.init(_:)();
  return Binding.init(value:location:)();
}

void static AppStorage._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
}

void protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance AppStorage<A>()
{
}

uint64_t AppStorage.init<A>(wrappedValue:_:store:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, (uint64_t)&unk_1ED414480, (uint64_t)&protocol witness table for BoolTransform, a4, a1, 0);
}

uint64_t AppStorage.init<A>(wrappedValue:_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, (uint64_t)&unk_1ED419A20, (uint64_t)&protocol witness table for DoubleTransform, a3, 0, a4);
}

uint64_t AppStorage.init<A>(wrappedValue:_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a3, a4, (uint64_t)&unk_1ED41BD80, (uint64_t)&protocol witness table for StringTransform, a5, a1, a2, 0);
}

{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v10 = MEMORY[0x1E4F277C0];
  type metadata accessor for UserDefaultLocation<Bool>(0, &lazy cache variable for type metadata for PropertyListTransform<Data>, MEMORY[0x1E4F277C0], (uint64_t (*)(void, uint64_t))type metadata accessor for PropertyListTransform);
  __n128 v12 = v11;
  type metadata accessor for UserDefaultLocation<Bool>(0, &lazy cache variable for type metadata for UserDefaultLocation<Data>, v10, (uint64_t (*)(void, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a3, a4, v12, (uint64_t)&protocol witness table for PropertyListTransform<A>, a5, a1, a2, 0, 0xF000000000000000);
}

void *AppStorage.init<A>(wrappedValue:_:store:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  __n128 v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v20 - v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
  v16((char *)&v20 - v14, (uint64_t)a1, v8, v13);
  ((void (*)(char *, char *, uint64_t))v16)(v11, v15, v8);
  type metadata accessor for UserDefaultLocation<URL>(0, &lazy cache variable for type metadata for UserDefaultLocation<URL>, MEMORY[0x1E4F276F0], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  long long v17 = specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, (uint64_t)&unk_1ED413CE8, (uint64_t)&protocol witness table for URLTransform, a4, (uint64_t)v11, 0, MEMORY[0x1E4F276F0]);
  long long v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v15, v8);
  v18(a1, v8);
  return v17;
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;

  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v20 - v11;
  double v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
  type metadata accessor for UserDefaultLocation<URL>(0, &lazy cache variable for type metadata for PropertyListTransform<Date>, MEMORY[0x1E4F27928], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PropertyListTransform);
  uint64_t v15 = v14;
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v16(v12, (uint64_t)a1, v6);
  v16(v9, (uint64_t)v12, v6);
  type metadata accessor for UserDefaultLocation<URL>(0, &lazy cache variable for type metadata for UserDefaultLocation<Date>, v13, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  long long v17 = specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, v20, v15, (uint64_t)&protocol witness table for PropertyListTransform<A>, v21, (uint64_t)v9, 0, MEMORY[0x1E4F27928]);
  long long v18 = *(void (**)(char *, uint64_t))(v7 + 8);
  v18(v12, v6);
  v18(a1, v6);
  return v17;
}

char *AppStorage.init<A>(wrappedValue:_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AppStorage.init<A>(wrappedValue:_:store:)(a1, a2, a3, a4, a5);
}

{
  return AppStorage.init<A>(wrappedValue:_:store:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v10;
  char *v11;

  uint64_t v10 = type metadata accessor for RawRepresentableTransform();
  __n128 v11 = specialized AppStorage.init(key:transform:store:defaultValue:)(a2, a3, v10, (uint64_t)&protocol witness table for RawRepresentableTransform<A, B>, a4, a1, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return v11;
}

char *AppStorage<A>.init(wrappedValue:_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for JSONCodableTransform();
  __n128 v11 = specialized AppStorage.init(key:transform:store:defaultValue:)(a2, a3, v10, (uint64_t)&protocol witness table for JSONCodableTransform<A>, a4, a1, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  return v11;
}

void *AppStorage<A>.init<>(_:store:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  __n128 v11 = (char *)&v15 - v10;
  uint64_t v12 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  outlined init with copy of URL?((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for URL?);
  type metadata accessor for UserDefaultLocation<URL>(0, &lazy cache variable for type metadata for UserDefaultLocation<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  double v13 = specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, (uint64_t)&unk_1ED413CE8, (uint64_t)&protocol witness table for URLTransform, a3, (uint64_t)v8, 0, (uint64_t (*)(void))type metadata accessor for URL?, (uint64_t (*)(void))type metadata accessor for URL?);
  _s10Foundation3URLVSgWOhTm_1((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for URL?);
  return v13;
}

{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;

  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  __n128 v11 = (char *)&v17 - v10;
  type metadata accessor for UserDefaultLocation<URL>(0, &lazy cache variable for type metadata for PropertyListTransform<Date>, MEMORY[0x1E4F27928], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for PropertyListTransform);
  double v13 = v12;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v11, 1, 1, v14);
  outlined init with copy of URL?((uint64_t)v11, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for Date?);
  type metadata accessor for UserDefaultLocation<URL>(0, &lazy cache variable for type metadata for UserDefaultLocation<Date?>, (uint64_t (*)(uint64_t))type metadata accessor for Date?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  uint64_t v15 = specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, v13, (uint64_t)&protocol witness table for PropertyListTransform<A>, a3, (uint64_t)v8, 0, (uint64_t (*)(void))type metadata accessor for Date?, (uint64_t (*)(void))type metadata accessor for Date?);
  _s10Foundation3URLVSgWOhTm_1((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Date?);
  return v15;
}

char *AppStorage.init<A>(_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return AppStorage.init<A>(_:store:)(a1, a2, a3, a4, a5, (uint64_t)&unk_1ED41BD80, (uint64_t)&protocol witness table for StringTransform);
}

{
  return AppStorage.init<A>(_:store:)(a1, a2, a3, a4, a5, (uint64_t)&unk_1ED41DA40, (uint64_t)&protocol witness table for IntegerTransform);
}

char *AppStorage.init<A>(_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  long long v17 = (char *)v21 - v16;
  v21[0] = a4;
  v21[1] = a6;
  _OWORD v21[2] = a5;
  uint64_t v21[3] = a7;
  uint64_t v18 = type metadata accessor for RawRepresentableTransform();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(v17, 1, 1, a4);
  uint64_t v19 = specialized AppStorage.init(key:transform:store:defaultValue:)(a1, a2, v18, (uint64_t)&protocol witness table for RawRepresentableTransform<A, B>, a3, (uint64_t)v17, v14);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  return v19;
}

char *AppStorage<A>.init<A>(_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  __n128 v11 = (char *)&v15 - v10;
  uint64_t v12 = type metadata accessor for JSONCodableTransform();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(v11, 1, 1, a4);
  double v13 = specialized AppStorage.init(key:transform:store:defaultValue:)(a1, a2, v12, (uint64_t)&protocol witness table for JSONCodableTransform<A>, a3, (uint64_t)v11, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v13;
}

uint64_t AppStorage.objectWillChange.getter()
{
  uint64_t v0 = UserDefaultLocation.canonicalLocation.getter();
  uint64_t v1 = *(void *)(v0 + *(void *)(*(void *)v0 + 128));
  swift_retain();
  swift_release();
  return v1;
}

uint64_t key path setter for AppStorage.objectWillChange : <A>AppStorage<A>()
{
  uint64_t v0 = swift_retain();
  return AppStorage.objectWillChange.setter(v0);
}

uint64_t AppStorage.objectWillChange.setter(uint64_t a1)
{
  UserDefaultLocation.canonicalLocation.getter();
  specialized UserDefaultLocation.observableObjectPublisher.setter(a1);
  swift_release();

  return swift_release();
}

uint64_t (*AppStorage.objectWillChange.modify(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  a1[1] = a2;
  a1[2] = v2;
  *a1 = AppStorage.objectWillChange.getter();
  return AppStorage.objectWillChange.modify;
}

uint64_t AppStorage.objectWillChange.modify(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return AppStorage.objectWillChange.setter(*a1);
  }
  uint64_t v2 = swift_retain();
  AppStorage.objectWillChange.setter(v2);

  return swift_release();
}

uint64_t protocol witness for _ObservableObjectProperty.objectWillChange.getter in conformance AppStorage<A>()
{
  return AppStorage.objectWillChange.getter();
}

uint64_t (*protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance AppStorage<A>(uint64_t *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  a1[1] = v2;
  a1[2] = a2;
  *a1 = AppStorage.objectWillChange.getter();
  return protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance AppStorage<A>;
}

uint64_t protocol witness for _ObservableObjectProperty.objectWillChange.modify in conformance AppStorage<A>(uint64_t *a1, char a2)
{
  if ((a2 & 1) == 0) {
    return AppStorage.objectWillChange.setter(*a1);
  }
  uint64_t v2 = swift_retain();
  AppStorage.objectWillChange.setter(v2);

  return swift_release();
}

uint64_t View.defaultAppStorage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultAppStorage(_:)(a1, a2, a3, MEMORY[0x1E4F41438]);
}

uint64_t EnvironmentValues.defaultAppStorageDefaults.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.defaultAppStorageDefaults : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.defaultAppStorageDefaults.getter();
  *a1 = result;
  return result;
}

void key path setter for EnvironmentValues.defaultAppStorageDefaults : EnvironmentValues(id *a1)
{
  id v1 = *a1;
  specialized EnvironmentValues.subscript.setter(v1);
}

uint64_t EnvironmentValues.defaultAppStorageDefaults.setter(void *a1)
{
  type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>);
  id v3 = a1;
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

    swift_release();
    swift_release();
  }
  else
  {
  }
  return swift_release();
}

uint64_t Scene.defaultAppStorage(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return View.defaultAppStorage(_:)(a1, a2, a3, (void (*)(void))Scene.environment<A>(_:_:));
}

uint64_t View.defaultAppStorage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  return swift_release();
}

void (*EnvironmentValues.defaultAppStorageDefaults.modify(void *a1))(uint64_t a1, char a2)
{
  a1[2] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *a1 = a1[1];
  return EnvironmentValues.defaultAppStorageDefaults.modify;
}

void EnvironmentValues.defaultAppStorageDefaults.modify(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void **)a1;
  *(void *)(a1 + 8) = *(void *)a1;
  type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>);
  id v6 = v5;
  uint64_t v7 = v6;
  if (a2)
  {
    id v8 = v6;
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }

    swift_release();
    uint64_t v9 = *(void **)a1;
  }
  else
  {
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(v4 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }

    swift_release();
  }
}

id protocol witness for static EnvironmentKey.defaultValue.getter in conformance DefaultAppStorageDefaultsKey@<X0>(void *a1@<X8>)
{
  id result = objc_msgSend(self, sel_standardUserDefaults);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance DefaultAppStorageDefaultsKey()
{
  return static NSObject.== infix(_:_:)() & 1;
}

double static PropertyListTransform.readValue(from:key:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  id v6 = (void *)MEMORY[0x18C115780](a2, a3);
  id v7 = objc_msgSend(a1, sel_objectForKey_, v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t static PropertyListTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v24 = a2;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v23 - v14;
  outlined init with copy of Any?(a1, (uint64_t)v25);
  type metadata accessor for UserDefaultLocation<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  int v16 = swift_dynamicCast();
  uint64_t v17 = *(void *)(a5 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, v16 ^ 1u, 1, a5);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v18(v15, 1, a5) == 1)
  {
    uint64_t v19 = (void *)MEMORY[0x18C115780](a3, a4);
    objc_msgSend(v24, sel_removeObjectForKey_, v19);
  }
  else
  {
    uint64_t v23 = a3;
    id v20 = v24;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v15, v9);
    if (v18(v12, 1, a5) == 1)
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t v21 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v12, a5);
    }
    uint64_t v19 = (void *)MEMORY[0x18C115780](v23, a4);
    objc_msgSend(v20, sel_setObject_forKey_, v21, v19);
    swift_unknownObjectRelease();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v15, v9);
}

double protocol witness for static UserDefaultsValueTransform.readValue(from:key:) in conformance PropertyListTransform<A>@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  return static PropertyListTransform.readValue(from:key:)(a1, a2, a3, a4);
}

uint64_t protocol witness for static UserDefaultsValueTransform.writeValue(_:to:key:) in conformance PropertyListTransform<A>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static PropertyListTransform.writeValue(_:to:key:)(a1, a2, a3, a4, *(void *)(a5 + 16));
}

double specialized static ScalarUserDefaultsValueTransform.readValue(from:key:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v8 = (void *)MEMORY[0x18C115780](a2, a3);
  id v9 = objc_msgSend(a1, sel_objectForKey_, v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v13);
    *(void *)(a4 + 24) = MEMORY[0x1E4FBB390];
    uint64_t v10 = (void *)MEMORY[0x18C115780](a2, a3);
    unsigned __int8 v11 = objc_msgSend(a1, sel_BOOLForKey_, v10);

    *(unsigned char *)a4 = v11;
  }
  else
  {
    memset(v13, 0, sizeof(v13));
    outlined destroy of Any?((uint64_t)v13);
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

void specialized static ScalarUserDefaultsValueTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  outlined init with copy of Any?(a1, (uint64_t)v10);
  type metadata accessor for UserDefaultLocation<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  if (swift_dynamicCast())
  {
    v10[0] = v9 & 1;
    uint64_t v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v8 = (void *)MEMORY[0x18C115780](a3, a4);
    objc_msgSend(a2, sel_setObject_forKey_, v7, v8);
    swift_unknownObjectRelease();
  }
  else
  {
    id v8 = (void *)MEMORY[0x18C115780](a3, a4);
    objc_msgSend(a2, sel_removeObjectForKey_, v8);
  }
}

{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void v10[4];

  outlined init with copy of Any?(a1, (uint64_t)v10);
  type metadata accessor for UserDefaultLocation<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  if (swift_dynamicCast())
  {
    v10[0] = v9;
    uint64_t v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v8 = (void *)MEMORY[0x18C115780](a3, a4);
    objc_msgSend(a2, sel_setObject_forKey_, v7, v8);
    swift_unknownObjectRelease();
  }
  else
  {
    id v8 = (void *)MEMORY[0x18C115780](a3, a4);
    objc_msgSend(a2, sel_removeObjectForKey_, v8);
  }
}

{
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void v10[4];

  outlined init with copy of Any?(a1, (uint64_t)v10);
  type metadata accessor for UserDefaultLocation<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  if (swift_dynamicCast())
  {
    v10[0] = v9;
    uint64_t v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    id v8 = (void *)MEMORY[0x18C115780](a3, a4);
    objc_msgSend(a2, sel_setObject_forKey_, v7, v8);
    swift_unknownObjectRelease();
  }
  else
  {
    id v8 = (void *)MEMORY[0x18C115780](a3, a4);
    objc_msgSend(a2, sel_removeObjectForKey_, v8);
  }
}

double protocol witness for static UserDefaultsValueTransform.readValue(from:key:) in conformance StringTransform@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v6 = (void *)MEMORY[0x18C115780](a2, a3);
  id v7 = objc_msgSend(a1, sel_stringForKey_, v6);

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    *(void *)(a4 + 24) = MEMORY[0x1E4FBB1A0];
    *(void *)a4 = v8;
    *(void *)(a4 + 8) = v10;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

void static JSONCodableTransform.readValue(from:key:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = (void *)MEMORY[0x18C115780](a2, a3);
  id v9 = objc_msgSend(a1, sel_dataForKey_, v8);

  if (v9)
  {
    uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v12 = v11;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    *(void *)(a5 + 24) = a4;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)a5);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    outlined consume of Data._Representation(v10, v12);
  }
  else
  {
    *(_OWORD *)a5 = 0u;
    *(_OWORD *)(a5 + 16) = 0u;
  }
}

uint64_t static JSONCodableTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v25[0] = a2;
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)v25 - v11;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v14);
  int v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)v26);
  type metadata accessor for UserDefaultLocation<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  int v17 = swift_dynamicCast();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (v17)
  {
    v18(v12, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, a5);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    uint64_t v19 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    unint64_t v21 = v20;
    outlined copy of Data._Representation(v19, v20);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v19, v21);
    uint64_t v23 = (void *)MEMORY[0x18C115780](a3, a4);
    objc_msgSend(v25[0], sel_setObject_forKey_, isa, v23);
    swift_release();
    swift_unknownObjectRelease();

    outlined consume of Data?(v19, v21);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, a5);
  }
  else
  {
    v18(v12, 1, 1, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

void protocol witness for static UserDefaultsValueTransform.readValue(from:key:) in conformance JSONCodableTransform<A>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
}

uint64_t protocol witness for static UserDefaultsValueTransform.writeValue(_:to:key:) in conformance JSONCodableTransform<A>(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static JSONCodableTransform.writeValue(_:to:key:)(a1, a2, a3, a4, *(void *)(a5 + 16));
}

uint64_t static URLTransform.readValue(from:key:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = (void *)MEMORY[0x18C115780](a2, a3, v12);
  id v16 = objc_msgSend(a1, sel_URLForKey_, v15);

  if (v16)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = type metadata accessor for URL();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v10, 0, 1, v17);
  }
  else
  {
    uint64_t v17 = type metadata accessor for URL();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v10, 1, 1, v17);
  }
  _s10Foundation3URLVSgWObTm_0((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for URL?);
  type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v14, 1, v17) == 1)
  {
    uint64_t result = _s10Foundation3URLVSgWOhTm_1((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for URL?);
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  else
  {
    *(void *)(a4 + 24) = v17;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)a4);
    return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v18 + 32))(boxed_opaque_existential_1, v14, v17);
  }
  return result;
}

uint64_t AppStorage.init<A>(wrappedValue:_:store:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v7 = *a1;
  type metadata accessor for UserDefaultLocation<Bool>(0, &lazy cache variable for type metadata for UserDefaultLocation<ToolbarLabelStyle>, (uint64_t)&type metadata for ToolbarLabelStyle, (uint64_t (*)(void, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, (uint64_t)&unk_1ED44D060, (uint64_t)&protocol witness table for ToolbarLabelStyleTransform, a4, v7, 0, 4);
}

uint64_t specialized static RawRepresentableTransform.readValue(from:key:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  specialized static ScalarUserDefaultsValueTransform.readValue(from:key:)(a1, a2, a3, &v6);
  type metadata accessor for UserDefaultLocation<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    char v9 = result ^ 1;
    if ((unint64_t)(v8 - 5) > 3)
    {
      long long v6 = 0u;
      long long v7 = 0u;
    }
    else
    {
      *((void *)&v7 + 1) = &type metadata for ToolbarLabelStyle.Role;
      LOBYTE(v6) = v8 - 5;
    }
    return outlined init with take of Any?((uint64_t)&v6, (uint64_t)a4);
  }
  else
  {
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

uint64_t static RawRepresentableTransform.readValue(from:key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v24 = a3;
  uint64_t v25 = a8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v24 - v18;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(a7 + 8))(v38, a1, a2, v24, a5, a7, v17);
  uint64_t v20 = MEMORY[0x1E4FBC840] + 8;
  type metadata accessor for UserDefaultLocation<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  int v21 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v19, v21 ^ 1u, 1, AssociatedTypeWitness);
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v31 = partial apply for closure #1 in static RawRepresentableTransform.readValue(from:key:);
  uint64_t v32 = &v33;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed A.RawRepresentable.RawValue) -> (@out A?), (uint64_t)v26, MEMORY[0x1E4FBC248], v20, v22, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
}

uint64_t closure #1 in static RawRepresentableTransform.readValue(from:key:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v3 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, double))(v5 + 16))((char *)&v7 - v4, a1, v3);
  return dispatch thunk of RawRepresentable.init(rawValue:)();
}

uint64_t specialized static RawRepresentableTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  outlined init with copy of Any?(a1, (uint64_t)&v9);
  type metadata accessor for UserDefaultLocation<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  if (swift_dynamicCast() && v8 != 4)
  {
    *((void *)&v10 + 1) = MEMORY[0x1E4FBB550];
    *(void *)&long long v9 = v8 + 5;
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  specialized static ScalarUserDefaultsValueTransform.writeValue(_:to:key:)((uint64_t)&v9, a2, a3, a4);
  return outlined destroy of Any?((uint64_t)&v9);
}

uint64_t static RawRepresentableTransform.writeValue(_:to:key:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v24 = a2;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any?(a1, (uint64_t)&v27);
  type metadata accessor for UserDefaultLocation<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  int v20 = swift_dynamicCast();
  int v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (v20)
  {
    v21(v15, 0, 1, a5);
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v15, a5);
    *((void *)&v28 + 1) = swift_getAssociatedTypeWitness();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v27);
    dispatch thunk of RawRepresentable.rawValue.getter();
    (*(void (**)(long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(&v27, v24, v25, v26, a6, a8);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a5);
  }
  else
  {
    v21(v15, 1, 1, a5);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    long long v27 = 0u;
    long long v28 = 0u;
    (*(void (**)(long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(&v27, v24, v25, v26, a6, a8);
  }
  return outlined destroy of Any?((uint64_t)&v27);
}

uint64_t protocol witness for static UserDefaultsValueTransform.readValue(from:key:) in conformance RawRepresentableTransform<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  return static RawRepresentableTransform.readValue(from:key:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5], a5);
}

uint64_t protocol witness for static UserDefaultsValueTransform.writeValue(_:to:key:) in conformance RawRepresentableTransform<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return static RawRepresentableTransform.writeValue(_:to:key:)(a1, a2, a3, a4, a5[2], a5[3], a5[4], a5[5]);
}

double static ToolbarLabelStyleTransform.readValue(from:key:)@<D0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  specialized static RawRepresentableTransform.readValue(from:key:)(a1, a2, a3, &v7);
  if (v8)
  {
    if (swift_dynamicCast())
    {
      *(void *)(a4 + 24) = &type metadata for ToolbarLabelStyle;
      *(unsigned char *)a4 = v6;
      return result;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v7);
  }
  double result = 0.0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

void UserDefaultLocation.observableObjectPublisher.didset()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 128);
  uint64_t v3 = *(void *)((char *)v0 + v2);
  if (v3)
  {
    uint64_t v4 = *(void **)((char *)v0 + *(void *)(v1 + 152));
    if (v4)
    {
      v32[0] = *(void *)((char *)v0 + v2);
      char v33 = 1;
      uint64_t v5 = (uint64_t)v4 + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_target;
      swift_beginAccess();
      id v6 = v4;
      swift_retain();
      outlined assign with take of UserDefaultObserver.Target((uint64_t)v32, v5);
      swift_endAccess();

      return;
    }
    long long v9 = (objc_class *)type metadata accessor for UserDefaultObserver();
    long long v10 = (char *)objc_allocWithZone(v9);
    uint64_t v11 = &v10[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = 0;
    *(void *)uint64_t v11 = 0;
    uint64_t v12 = &v10[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_target];
    *(void *)uint64_t v12 = v3;
    unsigned char v12[16] = 1;
    v34.receiver = v10;
    v34.super_class = v9;
    swift_retain_n();
    id v13 = objc_msgSendSuper2(&v34, sel_init);
    uint64_t v14 = *(void *)(*v0 + 152);
    uint64_t v15 = *(void **)((char *)v0 + v14);
    *(void *)((char *)v0 + v14) = v13;

    uint64_t v16 = *(char **)((char *)v0 + *(void *)(*v0 + 152));
    if (!v16)
    {
      __break(1u);
      return;
    }
    id v17 = UserDefaultLocation.store.getter();
    uint64_t v19 = v0[2];
    uint64_t v18 = v0[3];
    int v20 = &v16[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
    int v21 = *(void **)&v16[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
    if (v21)
    {
      uint64_t v31 = v0[2];
      uint64_t v23 = *((void *)v20 + 1);
      uint64_t v22 = *((void *)v20 + 2);
      type metadata accessor for NSUserDefaults();
      uint64_t v24 = v16;
      id v25 = v21;
      swift_bridgeObjectRetain();
      if (static NSObject.== infix(_:_:)())
      {
        BOOL v26 = v31 == v23 && v22 == v18;
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {

          swift_bridgeObjectRelease();
LABEL_22:

          swift_release();
          return;
        }
      }
      UserDefaultObserver.unobserve(oldDefaults:key:)(v25, v23, v22);
      swift_bridgeObjectRelease();
      *(void *)(swift_allocObject() + 16) = v24;
      long long v27 = v24;
      static Update.enqueueAction(_:)();

      swift_release();
      uint64_t v19 = v31;
    }
    else
    {
      long long v28 = v16;
    }
    v32[0] = 46;
    v32[1] = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    if (StringProtocol.contains<A>(_:)())
    {
      id v29 = objc_msgSend(self, sel_defaultCenter);
      objc_msgSend(v29, sel_addObserver_selector_name_object_, v16, sel_userDefaultsDidChange_, *MEMORY[0x1E4F28AC8], v17);
    }
    else
    {
      id v29 = (id)MEMORY[0x18C115780](v19, v18);
      objc_msgSend(v17, sel_addObserver_forKeyPath_options_context_, v16, v29, 0, &static UserDefaultObserver.observationContext);
    }

    uint64_t v30 = *(void **)v20;
    *(void *)int v20 = v17;
    *((void *)v20 + 1) = v19;
    *((void *)v20 + 2) = v18;
    id v17 = v17;
    swift_bridgeObjectRetain();
    outlined consume of UserDefaultObserver.State(v30);

    goto LABEL_22;
  }
  uint64_t v7 = *(void *)(v1 + 152);
  uint64_t v8 = *(void **)((char *)v0 + v7);
  *(void *)((char *)v0 + v7) = 0;
}

uint64_t UserDefaultLocation.cachedValue.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 136);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

void UserDefaultLocation.defaultStore.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  uint64_t v3 = *(void **)(v1 + v2);
  *(void *)(v1 + v2) = a1;
}

void UserDefaultLocation.observer.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152);
  uint64_t v3 = *(void **)(v1 + v2);
  *(void *)(v1 + v2) = a1;
}

uint64_t UserDefaultLocation.wasRead.getter()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 160));
  swift_beginAccess();
  return *v1;
}

uint64_t UserDefaultLocation.wasRead.setter(char a1)
{
  uint64_t v3 = (unsigned char *)(v1 + *(void *)(*(void *)v1 + 160));
  uint64_t result = swift_beginAccess();
  *uint64_t v3 = a1;
  return result;
}

uint64_t (*UserDefaultLocation.wasRead.modify())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t UserDefaultLocation.changeSignal.getter()
{
  return *(void *)(v0 + *(void *)(*(void *)v0 + 168));
}

uint64_t UserDefaultLocation.changeSignal.setter(uint64_t result, char a2)
{
  uint64_t v3 = v2 + *(void *)(*(void *)v2 + 168);
  *(void *)uint64_t v3 = result;
  *(unsigned char *)(v3 + 8) = a2 & 1;
  return result;
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  *(void *)(v7 + 72) = 0;
  *(unsigned char *)(v7 + 80) = 2;
  *(void *)(v7 + 88) = objc_msgSend(self, sel_standardUserDefaults);
  *(void *)(v7 + 96) = 0;
  *(unsigned char *)(v7 + 104) = 0;
  *(void *)(v7 + 108) = 0;
  *(unsigned char *)(v7 + 116) = 1;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a4;
  *(unsigned char *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 64) = a7;
  return v7;
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7)
{
  *(void *)(v7 + 72) = 0;
  *(void *)(v7 + 80) = 0;
  *(unsigned char *)(v7 + 88) = 1;
  *(void *)(v7 + 96) = objc_msgSend(self, sel_standardUserDefaults);
  *(void *)(v7 + 104) = 0;
  *(unsigned char *)(v7 + 112) = 0;
  *(void *)(v7 + 116) = 0;
  *(unsigned char *)(v7 + 124) = 1;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a4;
  *(double *)(v7 + 48) = a7;
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 64) = a6;
  return v7;
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 80) = 0;
  *(void *)(v8 + 88) = 0;
  *(void *)(v8 + 96) = 0;
  *(void *)(v8 + 104) = objc_msgSend(self, sel_standardUserDefaults);
  *(void *)(v8 + 112) = 0;
  *(unsigned char *)(v8 + 120) = 0;
  *(void *)(v8 + 124) = 0;
  *(unsigned char *)(v8 + 132) = 1;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 56) = a7;
  *(void *)(v8 + 64) = a5;
  *(void *)(v8 + 72) = a8;
  return v8;
}

void *specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  *(void *)((char *)v8 + *(void *)(*v8 + 128)) = 0;
  uint64_t v15 = (char *)v8 + *(void *)(*v8 + 136);
  uint64_t v16 = a8(0);
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  uint64_t v18 = *(void *)(*v8 + 144);
  *(void *)((char *)v8 + v18) = objc_msgSend(self, sel_standardUserDefaults);
  *(void *)((char *)v8 + *(void *)(*v8 + 152)) = 0;
  *((unsigned char *)v8 + *(void *)(*v8 + 160)) = 0;
  uint64_t v19 = (char *)v8 + *(void *)(*v8 + 168);
  *(void *)uint64_t v19 = 0;
  void v19[8] = 1;
  *(void *)((char *)v8 + *(void *)(*v8 + 112)) = a5;
  v8[2] = a1;
  v8[3] = a2;
  void v8[4] = a3;
  v8[5] = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))((char *)v8 + *(void *)(*v8 + 104), a6, v16);
  *(void *)((char *)v8 + *(void *)(*v8 + 120)) = a7;
  return v8;
}

void *specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), uint64_t (*a9)(void))
{
  *(void *)((char *)v9 + *(void *)(*v9 + 128)) = 0;
  uint64_t v17 = (char *)v9 + *(void *)(*v9 + 136);
  uint64_t v18 = a8(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v19 = *(void *)(*v9 + 144);
  *(void *)((char *)v9 + v19) = objc_msgSend(self, sel_standardUserDefaults);
  *(void *)((char *)v9 + *(void *)(*v9 + 152)) = 0;
  *((unsigned char *)v9 + *(void *)(*v9 + 160)) = 0;
  int v20 = (char *)v9 + *(void *)(*v9 + 168);
  *(void *)int v20 = 0;
  v20[8] = 1;
  *(void *)((char *)v9 + *(void *)(*v9 + 112)) = a5;
  void v9[2] = a1;
  uint64_t v9[3] = a2;
  void v9[4] = a3;
  void v9[5] = a4;
  _s10Foundation3URLVSgWObTm_0(a6, (uint64_t)v9 + *(void *)(*v9 + 104), a9);
  *(void *)((char *)v9 + *(void *)(*v9 + 120)) = a7;
  return v9;
}

uint64_t specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  *(void *)(v8 + 72) = 0;
  *(unsigned char *)(v8 + 80) = a8;
  *(void *)(v8 + 88) = objc_msgSend(self, sel_standardUserDefaults);
  *(void *)(v8 + 96) = 0;
  *(unsigned char *)(v8 + 104) = 0;
  *(void *)(v8 + 108) = 0;
  *(unsigned char *)(v8 + 116) = 1;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a4;
  *(unsigned char *)(v8 + 48) = a6;
  *(void *)(v8 + 56) = a5;
  *(void *)(v8 + 64) = a7;
  return v8;
}

void *specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))type metadata accessor for TabSidebarCustomization, (uint64_t (*)(void))type metadata accessor for TabSidebarCustomization);
}

{
  return specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))type metadata accessor for TabViewCustomization, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
}

char *UserDefaultLocation.init(key:transform:store:defaultValue:base:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void *)v7;
  *(void *)&v7[*(void *)(*(void *)v7 + 128)] = 0;
  uint64_t v15 = *(void *)(v14 + 80);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(&v7[*(void *)(*(void *)v7 + 136)], 1, 1, v15);
  uint64_t v17 = *(void *)(*(void *)v7 + 144);
  *(void *)&v7[v17] = objc_msgSend(self, sel_standardUserDefaults);
  *(void *)&v7[*(void *)(*(void *)v7 + 152)] = 0;
  v7[*(void *)(*(void *)v7 + 160)] = 0;
  uint64_t v18 = &v7[*(void *)(*(void *)v7 + 168)];
  *(void *)uint64_t v18 = 0;
  char v18[8] = 1;
  *(void *)&v7[*(void *)(*(void *)v7 + 112)] = a5;
  *((void *)v7 + 2) = a1;
  *((void *)v7 + 3) = a2;
  *((void *)v7 + 4) = a3;
  *((void *)v7 + 5) = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(&v7[*(void *)(*(void *)v7 + 104)], a6, v15);
  *(void *)&v7[*(void *)(*(void *)v7 + 120)] = a7;
  return v7;
}

char *UserDefaultLocation.copy()(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v13 - v4;
  uint64_t v6 = *((void *)v1 + 2);
  uint64_t v7 = *((void *)v1 + 3);
  uint64_t v8 = *((void *)v1 + 4);
  uint64_t v9 = *((void *)v1 + 5);
  id v10 = UserDefaultLocation.store.getter();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, &v1[*(void *)(*(void *)v1 + 104)], v2);
  uint64_t v11 = *(void *)&v1[*(void *)(*(void *)v1 + 120)];
  if (!v11)
  {
    swift_retain();
    uint64_t v11 = (uint64_t)v1;
  }
  type metadata accessor for UserDefaultLocation();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  return UserDefaultLocation.init(key:transform:store:defaultValue:base:)(v6, v7, v8, v9, (uint64_t)v10, (uint64_t)v5, v11);
}

uint64_t UserDefaultLocation.get()@<X0>(uint64_t a1@<X8>)
{
  return UserDefaultLocation.getValue(forReading:)(0, a1);
}

uint64_t UserDefaultLocation.set(_:transaction:)()
{
  if (*(void *)(v0 + *(void *)(*(void *)v0 + 128)))
  {
    swift_retain();
    ObservableObjectPublisher.send()();
    swift_release();
  }
  uint64_t v1 = Transaction.current.getter();
  MEMORY[0x1F4188790](v1);
  withTransaction<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in UserDefaultLocation.set(_:transaction:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*a1 + 80);
  uint64_t v5 = type metadata accessor for Optional();
  v6.n128_f64[0] = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)v16 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  id v10 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v10((char *)v16 - v7, a2, v4, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v8, 0, 1, v4);
  UserDefaultLocation.cachedValue.setter((uint64_t)v8);
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5];
  v16[3] = v4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  ((void (*)(uint64_t *, uint64_t, uint64_t))v10)(boxed_opaque_existential_1, a2, v4);
  id v14 = UserDefaultLocation.store.getter();
  (*(void (**)(uint64_t *, id, void, void, uint64_t, uint64_t))(v12 + 16))(v16, v14, a1[2], a1[3], v11, v12);

  return outlined destroy of Any?((uint64_t)v16);
}

uint64_t UserDefaultLocation.update()(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((*((unsigned char *)v1 + *(void *)(*v1 + 168) + 8) & 1) != 0
    || AGWeakAttributeGetAttribute() == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v4 = (char *)v1 + *(void *)(v3 + 160);
    uint64_t v5 = 1;
    swift_beginAccess();
    *uint64_t v4 = 1;
  }
  else
  {
    AGGraphGetValue();
    uint64_t v5 = v6 & 1;
  }
  UserDefaultLocation.getValue(forReading:)(0, a1);
  return v5;
}

BOOL static UserDefaultLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t *UserDefaultLocation.deinit()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(void *)(*v0 + 104), *(void *)(v1 + 80));

  swift_release();
  uint64_t v2 = (uint64_t)v0 + *(void *)(*v0 + 136);
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  uint64_t v4 = *(void *)(*v0 + 120);
  uint64_t v5 = *(uint64_t *)((char *)v0 + v4);
  *(uint64_t *)((char *)v0 + v4) = 0;
  if (v5)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native()) {
        break;
      }
      uint64_t v6 = *(void *)(v5 + *(void *)(*(void *)v5 + 120));
      swift_retain();
      swift_release();
      uint64_t v5 = v6;
    }
    while (v6);
  }
  swift_release();
  return v0;
}

uint64_t UserDefaultLocation.__deallocating_deinit()
{
  UserDefaultLocation.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Location.wasRead.getter in conformance UserDefaultLocation<A>()
{
  return UserDefaultLocation.wasRead.getter() & 1;
}

uint64_t protocol witness for Location.wasRead.setter in conformance UserDefaultLocation<A>(char a1)
{
  return UserDefaultLocation.wasRead.setter(a1);
}

void (*protocol witness for Location.wasRead.modify in conformance UserDefaultLocation<A>(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = UserDefaultLocation.wasRead.modify();
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

uint64_t protocol witness for Location.get() in conformance UserDefaultLocation<A>@<X0>(uint64_t a1@<X8>)
{
  return UserDefaultLocation.get()(a1);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance UserDefaultLocation<A>()
{
  return UserDefaultLocation.set(_:transaction:)();
}

uint64_t protocol witness for Location.update() in conformance UserDefaultLocation<A>(uint64_t a1)
{
  return UserDefaultLocation.update()(a1) & 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UserDefaultLocation<A>(uint64_t *a1, uint64_t *a2)
{
  return static UserDefaultLocation.== infix(_:_:)(*a1, *a2);
}

uint64_t UserDefaultPropertyBox.update(property:phase:)(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = *(void *)(a3 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v5 - 8);
  long long v38 = a1;
  long long v39 = (char *)&v37 - v6;
  uint64_t v7 = (void *)UserDefaultLocation.canonicalLocation.getter();
  uint64_t v41 = v3;
  uint64_t v8 = *(char **)(v3 + 8);
  uint64_t v9 = *(void *)(AGGraphGetValue() + 8);
  swift_retain();
  swift_retain();
  type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>);
  swift_retain();
  if (v9)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v10 = *(void *)(*v7 + 144);
  uint64_t v11 = *(void **)((char *)v7 + v10);
  *(void *)((char *)v7 + v10) = v47[0];

  id v12 = UserDefaultLocation.store.getter();
  uint64_t v14 = v7[2];
  uint64_t v13 = v7[3];
  uint64_t v15 = &v8[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  uint64_t v16 = *(void **)&v8[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  if (v16)
  {
    uint64_t v18 = *((void *)v15 + 1);
    uint64_t v17 = *((void *)v15 + 2);
    type metadata accessor for NSUserDefaults();
    swift_bridgeObjectRetain();
    outlined copy of UserDefaultObserver.State(v16);
    if ((static NSObject.== infix(_:_:)() & 1) != 0
      && (v14 == v18 && v17 == v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v19 = v41;
      goto LABEL_16;
    }
    UserDefaultObserver.unobserve(oldDefaults:key:)(v16, v18, v17);
    swift_bridgeObjectRelease();
    *(void *)(swift_allocObject() + 16) = v8;
    int v20 = v8;
    static Update.enqueueAction(_:)();

    swift_release();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  v47[0] = v14;
  v47[1] = v13;
  uint64_t v45 = 46;
  unint64_t v46 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  if (StringProtocol.contains<A>(_:)())
  {
    id v21 = objc_msgSend(self, sel_defaultCenter);
    objc_msgSend(v21, sel_addObserver_selector_name_object_, v8, sel_userDefaultsDidChange_, *MEMORY[0x1E4F28AC8], v12);
  }
  else
  {
    id v21 = (id)MEMORY[0x18C115780](v14, v13);
    objc_msgSend(v12, sel_addObserver_forKeyPath_options_context_, v8, v21, 0, &static UserDefaultObserver.observationContext);
  }
  uint64_t v19 = v41;

  uint64_t v22 = *(void **)v15;
  *(void *)uint64_t v15 = v12;
  *((void *)v15 + 1) = v14;
  *((void *)v15 + 2) = v13;
  outlined consume of UserDefaultObserver.State(v22);
LABEL_16:
  uint64_t v23 = *(void *)(v19 + 8) + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_target;
  swift_beginAccess();
  outlined init with copy of UserDefaultObserver.Target(v23, (uint64_t)v47);
  if (v48)
  {
    outlined destroy of UserDefaultObserver.Target((uint64_t)v47);
    int v24 = 0;
  }
  else
  {
    outlined init with take of UserDefaultObserver.Target.GraphAttribute((uint64_t)v47, (uint64_t)v42);
    outlined destroy of weak AnyGestureResponder?((uint64_t)v42);
    Weakuint64_t Value = AGGraphGetWeakValue();
    int v24 = 0;
    if (WeakValue && (v26 & 1) != 0)
    {
      if (*(unsigned char *)(v19 + 16))
      {
        *(unsigned char *)(v19 + 16) = 0;
      }
      else
      {
        long long v27 = UserDefaultLocation.copy()(WeakValue);
        long long v28 = v38;
        swift_release();
        *long long v28 = v27;
      }
      uint64_t v29 = (uint64_t)v39;
      int v24 = 1;
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 1);
      UserDefaultLocation.cachedValue.setter(v29);
    }
  }
  uint64_t v30 = *(void *)(v19 + 8) + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_target;
  swift_beginAccess();
  outlined init with copy of UserDefaultObserver.Target(v30, (uint64_t)v47);
  char v31 = v48;
  if (v48)
  {
    outlined destroy of UserDefaultObserver.Target((uint64_t)v47);
    uint64_t v32 = 0;
  }
  else
  {
    outlined init with take of UserDefaultObserver.Target.GraphAttribute((uint64_t)v47, (uint64_t)v43);
    uint64_t v32 = v44;
    outlined destroy of weak AnyGestureResponder?((uint64_t)v43);
  }
  char v33 = (char *)v7 + *(void *)(*v7 + 168);
  *(void *)char v33 = v32;
  v33[8] = v31;
  if (v24)
  {
    objc_super v34 = (unsigned __int8 *)v7 + *(void *)(*v7 + 160);
    swift_beginAccess();
    uint64_t v35 = *v34;
  }
  else
  {
    uint64_t v35 = 0;
  }
  swift_release();
  return v35;
}

void UserDefaultPropertyBox.reset()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state;
  uint64_t v3 = *(void **)(a2 + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state);
  if (v3)
  {
    uint64_t v5 = *(void *)(v2 + 8);
    uint64_t v4 = *(void *)(v2 + 16);
    id v6 = v3;
    swift_bridgeObjectRetain();
    UserDefaultObserver.unobserve(oldDefaults:key:)(v6, v5, v4);

    swift_bridgeObjectRelease();
  }
}

void protocol witness for DynamicPropertyBox.reset() in conformance UserDefaultPropertyBox<A>()
{
  UserDefaultPropertyBox.reset()(*v0, *((void *)v0 + 1));
}

uint64_t closure #1 in closure #1 in UserDefaultObserver.Target.GraphAttribute.send()(uint64_t result)
{
  if (result)
  {
    static Transaction.current.getter();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)();
    return swift_release();
  }
  return result;
}

uint64_t UserDefaultObserver.Target.send()()
{
  outlined init with copy of UserDefaultObserver.Target(v0, (uint64_t)v6);
  if (v7)
  {
    ObservableObjectPublisher.send()();
    return swift_release();
  }
  else
  {
    outlined init with take of UserDefaultObserver.Target.GraphAttribute((uint64_t)v6, (uint64_t)v4);
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = Strong;
    *(void *)(v3 + 24) = v5;
    swift_retain();
    onMainThread(do:)();
    swift_release();
    swift_release();
    return outlined destroy of weak AnyGestureResponder?((uint64_t)v4);
  }
}

void *UserDefaultObserver.unobserve(oldDefaults:key:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  lazy protocol witness table accessor for type String and conformance String();
  if (StringProtocol.contains<A>(_:)())
  {
    id v8 = objc_msgSend(self, sel_defaultCenter, 46, 0xE100000000000000, a2, a3);
    objc_msgSend(v8, sel_removeObserver_name_object_, v4, *MEMORY[0x1E4F28AC8], a1, v12, v13, v15, v17);
  }
  else
  {
    id v8 = (id)MEMORY[0x18C115780](a2, a3);
    objc_msgSend(a1, sel_removeObserver_forKeyPath_context_, v4, v8, &static UserDefaultObserver.observationContext, 46, 0xE100000000000000, a2, a3);
  }

  uint64_t v9 = (void *)(v4 + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state);
  uint64_t v10 = *(void **)(v4 + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state);
  v9[1] = 0;
  void v9[2] = 0;
  *uint64_t v9 = 0;
  return outlined consume of UserDefaultObserver.State(v10);
}

id UserDefaultObserver.__deallocating_deinit()
{
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = &v0[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  if (v3)
  {
    uint64_t v5 = *((void *)v2 + 1);
    uint64_t v4 = *((void *)v2 + 2);
    id v6 = v3;
    swift_bridgeObjectRetain();
    UserDefaultObserver.unobserve(oldDefaults:key:)(v6, v5, v4);

    swift_bridgeObjectRelease();
  }
  v8.receiver = v0;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, sel_dealloc);
}

void UserDefaultObserver.userDefaultsDidChange(_:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  uint64_t v3 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  if (v3)
  {
    uint64_t v5 = *((void *)v2 + 1);
    uint64_t v4 = *((void *)v2 + 2);
    outlined copy of UserDefaultObserver.State(v3);
    id v6 = v3;
    Notification.object.getter();
    uint64_t v7 = v18;
    if (v18)
    {
      objc_super v8 = __swift_project_boxed_opaque_existential_1(v17, v18);
      uint64_t v9 = *(void *)(v7 - 8);
      double v10 = MEMORY[0x1F4188790](v8);
      uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v9 + 16))(v12, v10);
      uint64_t v13 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);

      swift_unknownObjectRelease();
      if ((id)v13 == v6)
      {
        v17[0] = v5;
        v17[1] = v4;
        v16[0] = 46;
        v16[1] = 0xE100000000000000;
        lazy protocol witness table accessor for type String and conformance String();
        char v14 = StringProtocol.contains<A>(_:)();
        swift_bridgeObjectRelease();
        if (v14)
        {
          *(void *)(swift_allocObject() + 16) = v1;
          id v15 = v1;
          static Update.enqueueAction(_:)();
          swift_release();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {

      swift_bridgeObjectRelease();
    }
  }
}

uint64_t closure #1 in UserDefaultObserver.noteDefaultChange()(uint64_t a1)
{
  uint64_t v1 = a1 + OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_target;
  swift_beginAccess();
  outlined init with copy of UserDefaultObserver.Target(v1, (uint64_t)v3);
  UserDefaultObserver.Target.send()();
  return outlined destroy of UserDefaultObserver.Target((uint64_t)v3);
}

char *specialized AppStorage.init(key:transform:store:defaultValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UserDefaultLocation();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a6, a7);
  swift_allocObject();
  return UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a1, a2, a3, a4, a5, (uint64_t)v16, 0);
}

uint64_t specialized AppStorage.wrappedValue.setter()
{
  UserDefaultLocation.canonicalLocation.getter();
  UserDefaultLocation.set(_:transaction:)();

  return swift_release();
}

uint64_t specialized UserDefaultPropertyBox.init(host:environment:signal:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int v3 = a3;
  unint64_t v5 = HIDWORD(a3);
  id v6 = (objc_class *)type metadata accessor for UserDefaultObserver();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  objc_super v8 = &v7[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)objc_super v8 = 0;
  swift_weakInit();
  int v12 = v3;
  int v13 = v5;
  char v14 = 0;
  outlined init with take of UserDefaultObserver.Target((uint64_t)v11, (uint64_t)&v7[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_target]);
  v10.receiver = v7;
  v10.super_class = v6;
  objc_msgSendSuper2(&v10, sel_init);
  return a2;
}

void specialized static AppStorage._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  type metadata accessor for UserDefaultLocation<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for GraphHost();
  uint64_t v0 = MEMORY[0x18C114840]();
  uint64_t v1 = _GraphInputs.environment.getter();
  unint64_t v2 = AGCreateWeakAttribute();
  specialized UserDefaultPropertyBox.init(host:environment:signal:)(v0, v1, v2);
  uint64_t v4 = v3;
  swift_release();
  type metadata accessor for UserDefaultPropertyBox();
  swift_getWitnessTable();
  _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
  type metadata accessor for AppStorage();
  static DynamicProperty.addTreeValue<A, B>(_:as:at:in:flags:)();
}

void specialized UserDefaultLocation.observableObjectPublisher.setter(uint64_t a1)
{
  *(void *)(v1 + *(void *)(*(void *)v1 + 128)) = a1;
  swift_retain();
  swift_release();

  UserDefaultLocation.observableObjectPublisher.didset();
}

uint64_t sub_187ACD918@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.defaultAppStorageDefaults.getter();
  *a1 = result;
  return result;
}

void sub_187ACD954(id *a1)
{
  id v1 = *a1;
  specialized EnvironmentValues.subscript.setter(v1);
}

void type metadata accessor for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>);
    }
  }
}

uint64_t partial apply for closure #1 in UserDefaultLocation.set(_:transaction:)()
{
  return closure #1 in UserDefaultLocation.set(_:transaction:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t base witness table accessor for Equatable in UserDefaultLocation<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_187ACDA38@<X0>(uint64_t a1@<X8>)
{
  return AppStorage.wrappedValue.getter(a1);
}

uint64_t sub_187ACDA40()
{
  return specialized AppStorage.wrappedValue.setter();
}

uint64_t sub_187ACDA50()
{
  return 8;
}

void *sub_187ACDA5C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_187ACDA68@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AppStorage.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187ACDA98()
{
  return 8;
}

uint64_t sub_187ACDAA4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = UserDefaultLocation.wasRead.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187ACDAD4(char *a1)
{
  return UserDefaultLocation.wasRead.setter(*a1);
}

uint64_t sub_187ACDAFC()
{
  return 8;
}

uint64_t type metadata accessor for AppStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for UserDefaultLocation(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for UserDefaultLocation);
}

uint64_t dispatch thunk of UserDefaultLocation.wasRead.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 280))();
}

uint64_t dispatch thunk of UserDefaultLocation.wasRead.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 288))();
}

uint64_t dispatch thunk of UserDefaultLocation.wasRead.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 296))();
}

uint64_t dispatch thunk of UserDefaultLocation.get()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of UserDefaultLocation.set(_:transaction:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of UserDefaultLocation.update()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t type metadata accessor for UserDefaultObserver()
{
  return self;
}

uint64_t sub_187ACDC64()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<NSUserDefaults>(uint64_t a1)
{
}

void type metadata accessor for UserDefaultLocation<URL>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t type metadata accessor for NSUserDefaults()
{
  unint64_t result = lazy cache variable for type metadata for NSUserDefaults;
  if (!lazy cache variable for type metadata for NSUserDefaults)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
  }
  return result;
}

uint64_t sub_187ACDDD8()
{
  return swift_getWitnessTable();
}

uint64_t destroy for UserDefaultObserver.Target(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return swift_release();
  }
  else {
    return swift_weakDestroy();
  }
}

uint64_t initializeWithCopy for UserDefaultObserver.Target(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    *(void *)a1 = *(void *)a2;
    swift_retain();
    char v5 = 1;
  }
  else
  {
    swift_weakCopyInit();
    char v5 = 0;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
  }
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for UserDefaultObserver.Target(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      swift_release();
    }
    else {
      swift_weakDestroy();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 16) = 1;
      swift_retain();
    }
    else
    {
      swift_weakCopyInit();
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = 0;
    }
  }
  return a1;
}

uint64_t initializeWithTake for UserDefaultObserver.Target(uint64_t result, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    *(void *)unint64_t result = *(void *)a2;
    char v4 = 1;
  }
  else
  {
    unint64_t result = swift_weakTakeInit();
    char v4 = 0;
    *(void *)(result + 8) = *(void *)(a2 + 8);
  }
  *(unsigned char *)(result + 16) = v4;
  return result;
}

uint64_t assignWithTake for UserDefaultObserver.Target(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1) {
      swift_release();
    }
    else {
      swift_weakDestroy();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 16);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }
    else
    {
      swift_weakTakeInit();
      char v6 = 0;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
    }
    *(unsigned char *)(a1 + 16) = v6;
  }
  return a1;
}

void *type metadata accessor for UserDefaultObserver.Target()
{
  return &unk_1ED42EF40;
}

id *destroy for UserDefaultObserver.State(id *result)
{
  if ((unint64_t)*result >= 0xFFFFFFFF)
  {

    return (id *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UserDefaultObserver.State(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(void **)a2;
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)(a2 + 16);
    *(void *)a1 = v3;
    *(void *)(a1 + 8) = v4;
    *(void *)(a1 + 16) = v5;
    id v6 = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for UserDefaultObserver.State(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  if (*(void *)a1 < 0xFFFFFFFFuLL)
  {
    if ((unint64_t)v5 >= 0xFFFFFFFF)
    {
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      id v7 = v5;
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    long long v8 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v8;
    return a1;
  }
  if ((unint64_t)v5 < 0xFFFFFFFF)
  {

    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(void *)a1 = v5;
  id v6 = v5;

  *(void *)(a1 + 8) = *((void *)a2 + 1);
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UserDefaultObserver.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)a2 < 0xFFFFFFFFuLL)
  {

    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    return a1;
  }
  *(void *)a1 = *(void *)a2;

  uint64_t v5 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserDefaultObserver.State(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UserDefaultObserver.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = 0;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

void *destructiveInjectEnumTag for UserDefaultObserver.State(void *result, int a2)
{
  if (a2 < 0)
  {
    uint64_t v2 = a2 ^ 0x80000000;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = (a2 - 1);
  }
  *unint64_t result = v2;
  return result;
}

void *type metadata accessor for UserDefaultObserver.State()
{
  return &unk_1ED42EE30;
}

void *type metadata accessor for ToolbarLabelStyleTransform()
{
  return &unk_1ED44D060;
}

ValueMetadata *type metadata accessor for DefaultAppStorageDefaultsKey()
{
  return &type metadata for DefaultAppStorageDefaultsKey;
}

void *type metadata accessor for URLTransform()
{
  return &unk_1ED413CE8;
}

void *type metadata accessor for StringTransform()
{
  return &unk_1ED41BD80;
}

void *type metadata accessor for DoubleTransform()
{
  return &unk_1ED419A20;
}

void *type metadata accessor for IntegerTransform()
{
  return &unk_1ED41DA40;
}

void *type metadata accessor for BoolTransform()
{
  return &unk_1ED414480;
}

void specialized static StringTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  outlined init with copy of Any?(a1, (uint64_t)v9);
  if (!v10)
  {
    outlined destroy of Any?((uint64_t)v9);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    long long v8 = (void *)MEMORY[0x18C115780](a3, a4);
    objc_msgSend(a2, sel_removeObjectForKey_, v8);
    goto LABEL_6;
  }
  id v7 = (void *)MEMORY[0x18C115780]();
  swift_bridgeObjectRelease();
  long long v8 = (void *)MEMORY[0x18C115780](a3, a4);
  objc_msgSend(a2, sel_setObject_forKey_, v7, v8);

LABEL_6:
}

void specialized static URLTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  char v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any?(a1, (uint64_t)v21);
  if (v22)
  {
    int v15 = swift_dynamicCast();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v10, v15 ^ 1u, 1, v11);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) != 1)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 32))(v14, v10, v11);
      URL._bridgeToObjectiveC()(v16);
      uint64_t v18 = v17;
      uint64_t v19 = (void *)MEMORY[0x18C115780](a3, a4);
      objc_msgSend(a2, sel_setURL_forKey_, v18, v19);

      (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
      return;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v21);
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  }
  _s10Foundation3URLVSgWOhTm_1((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for URL?);
  int v20 = (void *)MEMORY[0x18C115780](a3, a4);
  objc_msgSend(a2, sel_removeObjectForKey_, v20);
}

uint64_t partial apply for closure #1 in static RawRepresentableTransform.readValue(from:key:)(uint64_t a1)
{
  return closure #1 in static RawRepresentableTransform.readValue(from:key:)(a1);
}

uint64_t specialized static ToolbarLabelStyleTransform.writeValue(_:to:key:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  outlined init with copy of Any?(a1, (uint64_t)&v9);
  if (!*((void *)&v10 + 1))
  {
    outlined destroy of Any?((uint64_t)&v9);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    long long v9 = 0u;
    long long v10 = 0u;
    goto LABEL_6;
  }
  *((void *)&v10 + 1) = &type metadata for ToolbarLabelStyle.Role;
  LOBYTE(v9) = v8;
LABEL_6:
  specialized static RawRepresentableTransform.writeValue(_:to:key:)((uint64_t)&v9, a2, a3, a4);
  return outlined destroy of Any?((uint64_t)&v9);
}

void *outlined copy of UserDefaultObserver.State(void *result)
{
  if (result)
  {
    id v1 = result;
    return (void *)swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_187ACE874()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UserDefaultObserver.noteDefaultChange()()
{
  return closure #1 in UserDefaultObserver.noteDefaultChange()(*(void *)(v0 + 16));
}

uint64_t outlined init with copy of UserDefaultObserver.Target(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of UserDefaultObserver.Target(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of UserDefaultObserver.Target.GraphAttribute(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t sub_187ACE958()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UserDefaultObserver.Target.GraphAttribute.send()()
{
  return static Update.ensure<A>(_:)();
}

uint64_t partial apply for closure #1 in closure #1 in UserDefaultObserver.Target.GraphAttribute.send()()
{
  return closure #1 in closure #1 in UserDefaultObserver.Target.GraphAttribute.send()(*(void *)(v0 + 16));
}

void specialized UserDefaultObserver.observeValue(forKeyPath:of:change:context:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    if (a4 == &static UserDefaultObserver.observationContext)
    {
      uint64_t v5 = &v4[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
      id v6 = *(void **)&v4[OBJC_IVAR____TtC7SwiftUIP33_F2BB00CEA25D2617C18DE8984EB64B5319UserDefaultObserver_state];
      if (v6)
      {
        uint64_t v10 = *((void *)v5 + 1);
        uint64_t v9 = *((void *)v5 + 2);
        outlined init with copy of Any?(a3, (uint64_t)v22);
        uint64_t v11 = v23;
        if (v23)
        {
          uint64_t v12 = __swift_project_boxed_opaque_existential_1(v22, v23);
          v21[1] = v21;
          uint64_t v13 = *(void *)(v11 - 8);
          double v14 = MEMORY[0x1F4188790](v12);
          uint64_t v16 = (char *)v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *, double))(v13 + 16))(v16, v14);
          outlined copy of UserDefaultObserver.State(v6);
          id v17 = v6;
          uint64_t v18 = _bridgeAnythingToObjectiveC<A>(_:)();
          (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v11);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);

          swift_unknownObjectRelease();
          if ((id)v18 == v17 && a2)
          {
            if (v10 == a1 && v9 == a2)
            {
              swift_bridgeObjectRelease();
LABEL_14:
              *(void *)(swift_allocObject() + 16) = v4;
              int v20 = v4;
              static Update.enqueueAction(_:)();
              swift_release();
              goto LABEL_7;
            }
            char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v19) {
              goto LABEL_14;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }
LABEL_7:
        }
      }
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *outlined consume of UserDefaultObserver.State(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined assign with take of UserDefaultObserver.Target(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t _s10Foundation3URLVSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for UserDefaultPropertyBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of UserDefaultObserver.Target(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for UserDefaultPropertyBox(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for UserDefaultPropertyBox(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  id v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for UserDefaultPropertyBox(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  id v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);

  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for UserDefaultObserver.Target.GraphAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakCopyAssign();
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 12);
  return result;
}

double assignWithTake for UserDefaultObserver.Target.GraphAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_weakTakeAssign();
  double result = *(double *)(a2 + 8);
  *(double *)(v3 + 8) = result;
  return result;
}

void *type metadata accessor for UserDefaultObserver.Target.GraphAttribute()
{
  return &unk_1ED42EEC0;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in UserDefaultPropertyBox<A>()
{
  return &protocol witness table for AppStorage<A>;
}

ValueMetadata *type metadata accessor for _NavigationDestinationCollection()
{
  return &type metadata for _NavigationDestinationCollection;
}

ValueMetadata *type metadata accessor for NavigationDestinationOutputs()
{
  return &type metadata for NavigationDestinationOutputs;
}

ValueMetadata *type metadata accessor for NavigationDestinationInputs()
{
  return &type metadata for NavigationDestinationInputs;
}

uint64_t specialized Binding.projecting<A>(_:)(uint64_t a1)
{
  v4[12] = a1;
  outlined init with copy of _VariadicView_Children(a1 + 16, (uint64_t)v2);
  specialized Sequence.first(where:)((uint64_t (*)(unsigned char *))partial apply for closure #1 in ChildIndexProjection.get(base:), (uint64_t)&v3);
  outlined destroy of EnumeratedSequence<_VariadicView_Children>.Iterator((uint64_t)v2, (unint64_t *)&lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>, MEMORY[0x1E4FBBCF8]);
  if (v4[3]) {
    outlined destroy of _VariadicView_Children.Element((uint64_t)v4);
  }
  else {
    outlined destroy of (offset: Int, element: _VariadicView_Children.Element)((uint64_t)&v3, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)?);
  }
  type metadata accessor for ChildIndexProjection();
  lazy protocol witness table accessor for type WritableKeyPath<Int?, Int?> and conformance WritableKeyPath<A, B>(&lazy protocol witness table cache variable for type ChildIndexProjection and conformance ChildIndexProjection, (void (*)(uint64_t))type metadata accessor for ChildIndexProjection);
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  return swift_retain();
}

uint64_t specialized Binding.projecting<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(*(void *)(a1 + 24) + 16)) {
    specialized __RawDictionaryStorage.find<A>(_:)(a4);
  }
  swift_endAccess();
  type metadata accessor for ItemIndexTabsOnlyIndexProjection();
  lazy protocol witness table accessor for type WritableKeyPath<Int?, Int?> and conformance WritableKeyPath<A, B>(&lazy protocol witness table cache variable for type ItemIndexTabsOnlyIndexProjection and conformance ItemIndexTabsOnlyIndexProjection, (void (*)(uint64_t))type metadata accessor for ItemIndexTabsOnlyIndexProjection);
  dispatch thunk of AnyLocation.projecting<A>(_:)();
  return swift_retain();
}

uint64_t specialized Sequence.first(where:)@<X0>(uint64_t (*a1)(unsigned char *)@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of EnumeratedSequence<_VariadicView_Children>(v2, (uint64_t)v20);
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  if (_VariadicView_Children.endIndex.getter())
  {
    uint64_t v6 = 0;
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      uint64_t result = _VariadicView_Children.endIndex.getter();
      if (v6 < 0 || v6 >= result) {
        break;
      }
      uint64_t v21 = v6 + 1;
      long long v16 = *(_OWORD *)&v13[32];
      long long v17 = *(_OWORD *)&v13[48];
      long long v18 = *(_OWORD *)&v13[64];
      long long v19 = *(_OWORD *)&v13[80];
      long long v14 = *(_OWORD *)v13;
      long long v15 = *(_OWORD *)&v13[16];
      uint64_t v8 = v22;
      if (__OFADD__(v22, 1)) {
        goto LABEL_13;
      }
      ++v22;
      *(_OWORD *)&v13[40] = v16;
      *(_OWORD *)&v13[56] = v17;
      *(_OWORD *)&v13[72] = v18;
      *(_OWORD *)&v13[88] = v19;
      *(_OWORD *)&void v13[8] = v14;
      *(_OWORD *)&v13[24] = v15;
      *(void *)uint64_t v13 = v8;
      char v9 = a1(v13);
      if (v3)
      {
        outlined destroy of (offset: Int, element: _VariadicView_Children.Element)((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: _VariadicView_Children.Element));
        return outlined destroy of EnumeratedSequence<_VariadicView_Children>.Iterator((uint64_t)v20, &lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>.Iterator, MEMORY[0x1E4FBBCF0]);
      }
      if (v9)
      {
        uint64_t result = outlined destroy of EnumeratedSequence<_VariadicView_Children>.Iterator((uint64_t)v20, &lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>.Iterator, MEMORY[0x1E4FBBCF0]);
        long long v10 = *(_OWORD *)&v13[80];
        *(_OWORD *)(a2 + 64) = *(_OWORD *)&v13[64];
        *(_OWORD *)(a2 + 80) = v10;
        *(void *)(a2 + 96) = *(void *)&v13[96];
        long long v11 = *(_OWORD *)&v13[16];
        *(_OWORD *)a2 = *(_OWORD *)v13;
        *(_OWORD *)(a2 + 16) = v11;
        long long v12 = *(_OWORD *)&v13[48];
        *(_OWORD *)(a2 + 32) = *(_OWORD *)&v13[32];
        *(_OWORD *)(a2 + 48) = v12;
        return result;
      }
      outlined destroy of (offset: Int, element: _VariadicView_Children.Element)((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: _VariadicView_Children.Element));
      uint64_t v6 = v21;
      if (v6 == _VariadicView_Children.endIndex.getter()) {
        goto LABEL_9;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
  }
  else
  {
LABEL_9:
    uint64_t result = outlined destroy of EnumeratedSequence<_VariadicView_Children>.Iterator((uint64_t)v20, &lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>.Iterator, MEMORY[0x1E4FBBCF0]);
    *(void *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

void specialized Sequence.first(where:)(uint64_t (*a1)(id *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for UISceneSession();
    lazy protocol witness table accessor for type WritableKeyPath<Int?, Int?> and conformance WritableKeyPath<A, B>((unint64_t *)&lazy protocol witness table cache variable for type UISceneSession and conformance NSObject, (void (*)(uint64_t))type metadata accessor for UISceneSession);
    Set.Iterator.init(_cocoa:)();
    uint64_t v5 = v24;
    uint64_t v23 = v25;
    uint64_t v7 = v26;
    int64_t v8 = v27;
    unint64_t v9 = v28;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(a3 + 32);
    uint64_t v23 = a3 + 56;
    uint64_t v11 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & *(void *)(a3 + 56);
    swift_bridgeObjectRetain();
    uint64_t v7 = v11;
    int64_t v8 = 0;
  }
  int64_t v22 = (unint64_t)(v7 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_36;
  }
  type metadata accessor for UISceneSession();
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v14 = v29;
  swift_unknownObjectRelease();
  int64_t v15 = v8;
  uint64_t v16 = v9;
  if (!v14) {
    goto LABEL_36;
  }
  while (1)
  {
    id v29 = v14;
    char v20 = a1(&v29);
    if (v4)
    {

      goto LABEL_36;
    }
    if (v20) {
      goto LABEL_36;
    }

    int64_t v8 = v15;
    unint64_t v9 = v16;
    if (v5 < 0) {
      goto LABEL_8;
    }
LABEL_11:
    if (!v9) {
      break;
    }
    uint64_t v16 = (v9 - 1) & v9;
    unint64_t v17 = __clz(__rbit64(v9)) | (v8 << 6);
    int64_t v15 = v8;
LABEL_24:
    id v14 = *(id *)(*(void *)(v5 + 48) + 8 * v17);
    if (!v14) {
      goto LABEL_36;
    }
  }
  int64_t v15 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    return;
  }
  if (v15 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v15);
  if (v18)
  {
LABEL_23:
    uint64_t v16 = (v18 - 1) & v18;
    unint64_t v17 = __clz(__rbit64(v18)) + (v15 << 6);
    goto LABEL_24;
  }
  int64_t v19 = v8 + 2;
  if (v8 + 2 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v19 = v8 + 3;
  if (v8 + 3 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18) {
    goto LABEL_22;
  }
  int64_t v19 = v8 + 4;
  if (v8 + 4 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v19);
  if (v18)
  {
LABEL_22:
    int64_t v15 = v19;
    goto LABEL_23;
  }
  int64_t v15 = v8 + 5;
  if (v8 + 5 >= v22) {
    goto LABEL_36;
  }
  unint64_t v18 = *(void *)(v23 + 8 * v15);
  if (v18) {
    goto LABEL_23;
  }
  int64_t v21 = v8 + 6;
  while (v22 != v21)
  {
    unint64_t v18 = *(void *)(v23 + 8 * v21++);
    if (v18)
    {
      int64_t v15 = v21 - 1;
      goto LABEL_23;
    }
  }
LABEL_36:
  outlined consume of Set<UIPress>.Iterator._Variant();
}

uint64_t specialized Sequence.first(where:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == a4)
  {
    return 0;
  }
  else
  {
    uint64_t v5 = a3;
    if (a4 >= a3)
    {
      uint64_t v7 = (uint64_t (*)(uint64_t *))result;
      while (v5 < a4)
      {
        uint64_t v8 = v5;
        uint64_t result = v7(&v8);
        if (v4 || (result & 1) != 0) {
          return v5;
        }
        if (a4 == ++v5) {
          return 0;
        }
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t thunk for @callee_guaranteed (@in_guaranteed Binding<A>) -> (@owned Binding<Int?>)@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 24) = v6 & 1;
  return result;
}

uint64_t static SidebarAdaptableTabViewStyle._makeView<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeView(view:inputs:)();
}

unint64_t lazy protocol witness table accessor for type TabViewSidebarOverflowMenuInput and conformance TabViewSidebarOverflowMenuInput()
{
  unint64_t result = lazy protocol witness table cache variable for type TabViewSidebarOverflowMenuInput and conformance TabViewSidebarOverflowMenuInput;
  if (!lazy protocol witness table cache variable for type TabViewSidebarOverflowMenuInput and conformance TabViewSidebarOverflowMenuInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewSidebarOverflowMenuInput and conformance TabViewSidebarOverflowMenuInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabViewSidebarOverflowMenuInput and conformance TabViewSidebarOverflowMenuInput;
  if (!lazy protocol witness table cache variable for type TabViewSidebarOverflowMenuInput and conformance TabViewSidebarOverflowMenuInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewSidebarOverflowMenuInput and conformance TabViewSidebarOverflowMenuInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabViewSidebarOverflowMenuInput and conformance TabViewSidebarOverflowMenuInput;
  if (!lazy protocol witness table cache variable for type TabViewSidebarOverflowMenuInput and conformance TabViewSidebarOverflowMenuInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewSidebarOverflowMenuInput and conformance TabViewSidebarOverflowMenuInput);
  }
  return result;
}

uint64_t type metadata accessor for AdaptableTabViewRoot()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput()
{
  unint64_t result = lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput;
  if (!lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput;
  if (!lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput;
  if (!lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput;
  if (!lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput;
  if (!lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput);
  }
  return result;
}

uint64_t type metadata accessor for SidebarAdaptableTabViewStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static SidebarAdaptableTabViewStyle._makeViewList<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

uint64_t SidebarAdaptableTabViewStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TabViewValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t SidebarAdaptableTabViewStyle.Body.sidebarOverflowMenuItems.getter()
{
  type metadata accessor for PlatformItemCollection?(0, &lazy cache variable for type metadata for PlatformItemCollection?, (uint64_t)&type metadata for PlatformItemCollection, MEMORY[0x1E4FBB718]);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (!WeakValue) {
    return 0;
  }
  uint64_t v1 = *(void *)WeakValue;
  outlined copy of PlatformItemCollection?(*(void *)WeakValue, *(unsigned char *)(WeakValue + 8));
  return v1;
}

uint64_t SidebarAdaptableTabViewStyle.Body.value.getter@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v8 = a1;
  uint64_t v40 = a5;
  unint64_t v39 = HIDWORD(a1);
  type metadata accessor for Binding();
  uint64_t v36 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v36 - 8);
  MEMORY[0x1F4188790](v36);
  char v33 = &v30[-v10];
  char v48 = &type metadata for SidebarAdaptableTabViewStyle;
  uint64_t v49 = a3;
  long long v50 = &protocol witness table for SidebarAdaptableTabViewStyle;
  uint64_t v51 = a4;
  uint64_t v35 = type metadata accessor for _TabViewValue();
  uint64_t v11 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  uint64_t v13 = &v30[-v12];
  uint64_t v14 = type metadata accessor for AdaptableTabViewRoot();
  MEMORY[0x1F4188790](v14);
  uint64_t v32 = &v30[-v15];
  uint64_t v34 = type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v16 = type metadata accessor for _VariadicView.Tree();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v37 = v16;
  uint64_t v38 = v17;
  MEMORY[0x1F4188790](v16);
  int64_t v19 = &v30[-v18];
  int v31 = a2;
  SidebarAdaptableTabViewStyle.Body.base.getter((uint64_t)v13);
  uint64_t v20 = (uint64_t)v33;
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 16))(v33, v13, v36);
  uint64_t v21 = SidebarAdaptableTabViewStyle.Body.sidebarOverflowMenuItems.getter();
  if (v22 == 254) {
    uint64_t v23 = 0;
  }
  else {
    uint64_t v23 = v21;
  }
  if (v22 == 254) {
    char v24 = -1;
  }
  else {
    char v24 = v22;
  }
  (*(void (**)(unsigned char *, uint64_t))(v11 + 8))(v13, v35);
  uint64_t KeyPath = swift_getKeyPath();
  AdaptableTabViewRoot.init(clientSidebarVisibility:selection:adaptationMode:sidebarOverflowMenuItems:)(KeyPath, 0, 0, v20, 1, v23, v24, (uint64_t)v32);
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  int v43 = v8;
  int v44 = v39;
  int v45 = v31;
  _VariadicView.Tree.init(_:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v47 = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  uint64_t v26 = v37;
  uint64_t v27 = swift_getWitnessTable();
  unint64_t v28 = lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
  View.input<A>(_:)((uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v26, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v27, v28);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v38 + 8))(v19, v26);
}

uint64_t default argument 0 of AdaptableTabViewRoot.init(clientSidebarVisibility:selection:adaptationMode:sidebarOverflowMenuItems:)()
{
  return swift_getKeyPath();
}

uint64_t AdaptableTabViewRoot.init(clientSidebarVisibility:selection:adaptationMode:sidebarOverflowMenuItems:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  *(void *)a8 = a1;
  *(void *)(a8 + 8) = a2;
  *(unsigned char *)(a8 + 16) = a3;
  *(unsigned char *)(a8 + 17) = HIBYTE(a3) & 1;
  uint64_t v13 = a8 + 24;
  AnyHashable.init<A>(_:)();
  outlined init with copy of AnyHashable((uint64_t)v19, v13);
  *(void *)(a8 + 64) = 0;
  outlined destroy of AnyHashable((uint64_t)v19);
  *(unsigned char *)(a8 + 72) = 0;
  *(void *)(a8 + 80) = 0;
  uint64_t v14 = (int *)type metadata accessor for AdaptableTabViewRoot();
  uint64_t v15 = a8 + v14[11];
  type metadata accessor for Binding();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a4, v16);
  *(unsigned char *)(a8 + v14[12]) = a5;
  uint64_t v18 = a8 + v14[13];
  *(void *)uint64_t v18 = a6;
  *(unsigned char *)(v18 + 8) = a7;
  return result;
}

uint64_t closure #1 in SidebarAdaptableTabViewStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = &type metadata for SidebarAdaptableTabViewStyle;
  v11[1] = a3;
  _OWORD v11[2] = &protocol witness table for SidebarAdaptableTabViewStyle;
  void v11[3] = a4;
  uint64_t v4 = type metadata accessor for _TabViewValue();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v11 - v6;
  SidebarAdaptableTabViewStyle.Body.base.getter((uint64_t)v11 - v6);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v8 = type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v9 = static ViewBuilder.buildExpression<A>(_:)(v8);
  return static ViewBuilder.buildExpression<A>(_:)(v9);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SidebarAdaptableTabViewStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AdaptableTabViewRoot();
  type metadata accessor for TabViewStyleConfiguration.Content();
  type metadata accessor for _VariadicView.Tree();
  type metadata accessor for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance SidebarAdaptableTabViewStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SidebarAdaptableTabViewStyle.Body.value.getter(*(void *)v2, *(_DWORD *)(v2 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

ValueMetadata *type metadata accessor for SidebarAdaptableTabViewStyle()
{
  return &type metadata for SidebarAdaptableTabViewStyle;
}

uint64_t type metadata completion function for AdaptableTabViewRoot()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for AdaptableTabViewRoot(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  unint64_t v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  size_t v9 = ((v7 + 16) & ~v7) + *(void *)(v5 + 64);
  int v10 = v6 & 0x100000;
  if (v7 > 7 || v10 != 0 || (((v8 & (v7 + 88)) + v9) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v13 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v13 + (v8 & (v7 + 16));
    swift_retain();
    return a1;
  }
  uint64_t v43 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)a2;
  uint64_t v15 = *(void *)(a2 + 8);
  char v16 = *(unsigned char *)(a2 + 17);
  uint64_t v17 = *(unsigned __int8 *)(a2 + 16);
  int v42 = *(_DWORD *)(v5 + 84);
  outlined copy of Environment<Binding<Visibility>?>.Content(*(void *)a2, v15, v17, v16);
  *(void *)a1 = v14;
  *(void *)(a1 + 8) = v15;
  *(unsigned char *)(a1 + 16) = v17;
  *(unsigned char *)(a1 + 17) = v16;
  uint64_t v18 = (void *)((a1 + 25) & 0xFFFFFFFFFFFFFFF8);
  int64_t v19 = (void *)((a2 + 25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = v19[3];
  void v18[3] = v20;
  void v18[4] = v19[4];
  (**(void (***)(void *, void *))(v20 - 8))(v18, v19);
  v18[5] = v19[5];
  unint64_t v21 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v21 = *(unsigned char *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  uint64_t v23 = (void *)(v8 & (v21 + 23));
  char v24 = (void *)(v8 & (v22 + 23));
  uint64_t v25 = (uint64_t *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  if (v42 < 0)
  {
    uint64_t v27 = v43;
    int v29 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v25 + v7 + 8) & ~v7);
    uint64_t v28 = ~v7;
    if (v29)
    {
LABEL_14:
      memcpy(v23, v24, v9);
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v26 = *v25;
    if ((unint64_t)*v25 >= 0xFFFFFFFF) {
      LODWORD(v26) = -1;
    }
    uint64_t v27 = v43;
    uint64_t v28 = ~v7;
    if (v26 != -1) {
      goto LABEL_14;
    }
  }
  *uint64_t v23 = *v24;
  uint64_t v30 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v30 = *v25;
  uint64_t v31 = ((unint64_t)v30 + v7 + 8) & v28;
  uint64_t v32 = ((unint64_t)v25 + v7 + 8) & v28;
  char v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  swift_retain();
  swift_retain();
  v33(v31, v32, v27);
LABEL_17:
  *((unsigned char *)v23 + v9) = *((unsigned char *)v24 + v9);
  unint64_t v34 = (((unint64_t)v23 + v9) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v35 = ((unint64_t)v24 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = v35 + 8;
  unsigned int v37 = *(unsigned __int8 *)(v35 + 16);
  if (v37 > 1)
  {
    uint64_t v40 = *(void *)v36;
    *(unsigned char *)((((unint64_t)v23 + v9) & 0xFFFFFFFFFFFFFFF8) + 16) = *(unsigned char *)(v36 + 8);
    *(void *)unint64_t v34 = v40;
  }
  else
  {
    BOOL v38 = v37 != 0;
    uint64_t v39 = *(void *)v36;
    outlined copy of PlatformItemCollection.Storage(*(void *)v36, v37 != 0);
    *(void *)unint64_t v34 = v39;
    *(unsigned char *)(v34 + 8) = v38;
  }
  return a1;
}

uint64_t destroy for AdaptableTabViewRoot(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Binding<Visibility>?>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned char *)(a1 + 17));
  unint64_t v4 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v4);
  swift_release();
  unint64_t v5 = (v4 + 55) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + (v8 | 7) + 16) & ~(v8 | 7);
  uint64_t v10 = ~v8;
  uint64_t v11 = (v8 + 16) & ~v8;
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = (uint64_t *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v13 + v8 + 8) & v10);
    uint64_t v16 = v11 + v12;
    if (!result)
    {
LABEL_5:
      swift_release();
      swift_release();
      uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v13 + v8 + 8) & v10, v6);
    }
  }
  else
  {
    uint64_t v14 = *v13;
    if ((unint64_t)*v13 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    uint64_t result = (v14 + 1);
    uint64_t v16 = v11 + v12;
    if (v14 == -1) {
      goto LABEL_5;
    }
  }
  unint64_t v17 = (v16 + v9) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v18 = *(unsigned __int8 *)(v17 + 16);
  if (v18 <= 1)
  {
    uint64_t v19 = *(void *)(v17 + 8);
    return outlined consume of PlatformItemCollection.Storage(v19, v18 != 0);
  }
  return result;
}

uint64_t initializeWithCopy for AdaptableTabViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<Binding<Visibility>?>.Content(*(void *)a2, v7, v9, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 17) = v8;
  uint64_t v10 = (void *)((a1 + 25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)((a2 + 25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = v11[3];
  _OWORD v10[3] = v12;
  v10[4] = v11[4];
  (**(void (***)(void *, void *))(v12 - 8))(v10, v11);
  v10[5] = v11[5];
  unint64_t v13 = ((unint64_t)v10 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v13 = *(unsigned char *)v14;
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  uint64_t v15 = *(void *)(a3 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  uint64_t v18 = *(_DWORD *)(v16 + 80);
  unint64_t v19 = *(_DWORD *)(v16 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  __dst = (void *)((v18 + 16 + v13) & v19);
  uint64_t v20 = (void *)((v18 + 16 + v14) & v19);
  uint64_t v40 = (v18 + 16) & ~v18;
  uint64_t v21 = *(void *)(v16 + 64);
  unint64_t v22 = (uint64_t *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  if ((v17 & 0x80000000) != 0)
  {
    int v24 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(((unint64_t)v22 + v18 + 8) & ~v18, v17, v15);
  }
  else
  {
    uint64_t v23 = *v22;
    if ((unint64_t)*v22 >= 0xFFFFFFFF) {
      LODWORD(v23) = -1;
    }
    int v24 = v23 + 1;
  }
  uint64_t v25 = v40 + v21;
  if (v24)
  {
    memcpy(__dst, v20, v40 + v21);
  }
  else
  {
    void *__dst = *v20;
    uint64_t v26 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = ~v18;
    *uint64_t v26 = *v22;
    uint64_t v28 = v18 + 8;
    uint64_t v29 = ((unint64_t)v26 + v18 + 8) & ~v18;
    unint64_t v30 = ((unint64_t)v22 + v28) & v27;
    uint64_t v31 = *(void (**)(uint64_t, unint64_t, uint64_t))(v16 + 16);
    swift_retain();
    swift_retain();
    v31(v29, v30, v15);
  }
  unint64_t v32 = (unint64_t)v20 + v25;
  *((unsigned char *)__dst + v25) = *((unsigned char *)v20 + v25);
  char v33 = (uint64_t *)((((unint64_t)__dst + v25) & 0xFFFFFFFFFFFFFFF8) + 8);
  v32 &= 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (char *)(v32 + 8);
  unsigned int v35 = *(unsigned __int8 *)(v32 + 16);
  if (v35 > 1)
  {
    uint64_t v38 = *(void *)v34;
    *(unsigned char *)((((unint64_t)__dst + v25) & 0xFFFFFFFFFFFFFFF8) + 16) = v34[8];
    uint64_t *v33 = v38;
  }
  else
  {
    BOOL v36 = v35 != 0;
    uint64_t v37 = *(void *)v34;
    outlined copy of PlatformItemCollection.Storage(*(void *)v34, v35 != 0);
    uint64_t *v33 = v37;
    *(unsigned char *)((((unint64_t)__dst + v25) & 0xFFFFFFFFFFFFFFF8) + 16) = v36;
  }
  return a1;
}

uint64_t assignWithCopy for AdaptableTabViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of Environment<Binding<Visibility>?>.Content(*(void *)a2, v7, v9, v8);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  char v12 = *(unsigned char *)(a1 + 17);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v13 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 17) = v8;
  outlined consume of Environment<Binding<Visibility>?>.Content(v10, v11, v13, v12);
  unint64_t v14 = (uint64_t *)((a1 + 25) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (uint64_t *)((a2 + 25) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v14, v15);
  v14[5] = v15[5];
  swift_retain();
  swift_release();
  unint64_t v16 = ((unint64_t)v14 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_retain();
  swift_release();
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int *)(v19 + 84);
  uint64_t v21 = *(_DWORD *)(v19 + 80);
  unint64_t v22 = *(_DWORD *)(v19 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = (void *)((v21 + 16 + v16) & v22);
  int v24 = (void *)((v21 + 16 + v17) & v22);
  uint64_t v25 = *(void *)(v19 + 64);
  size_t v26 = ((v21 + 16) & ~v21) + v25;
  uint64_t v27 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v50 = ~v21;
  uint64_t v51 = v18;
  if ((v20 & 0x80000000) == 0)
  {
    uint64_t v28 = (uint64_t *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = *v28;
    if ((unint64_t)*v28 >= 0xFFFFFFFF) {
      LODWORD(v29) = -1;
    }
    int v30 = v29 + 1;
    if (*v27 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
LABEL_8:
    if (v30) {
      goto LABEL_9;
    }
    *uint64_t v23 = *v24;
    *uint64_t v27 = *v28;
    char v33 = *(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 16);
    swift_retain();
    swift_retain();
    v33(((unint64_t)v27 + v21 + 8) & v50, ((unint64_t)v28 + v21 + 8) & v50, v51);
    goto LABEL_12;
  }
  size_t v49 = ((v21 + 16) & ~v21) + v25;
  uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v19 + 48);
  int v48 = v31(((unint64_t)v27 + v21 + 8) & ~v21, v20, v18);
  uint64_t v32 = v18;
  uint64_t v28 = (uint64_t *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v30 = v31(((unint64_t)v28 + v21 + 8) & ~v21, v20, v32);
  size_t v26 = v49;
  if (v48) {
    goto LABEL_8;
  }
LABEL_5:
  if (v30)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v19 + 8))(((unint64_t)v27 + v21 + 8) & v50, v51);
LABEL_9:
    memcpy(v23, v24, v26);
    goto LABEL_12;
  }
  *uint64_t v23 = *v24;
  swift_retain();
  swift_release();
  *uint64_t v27 = *v28;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 24))(((unint64_t)v27 + v21 + 8) & v50, ((unint64_t)v28 + v21 + 8) & v50, v51);
LABEL_12:
  *((unsigned char *)v23 + v26) = *((unsigned char *)v24 + v26);
  unint64_t v34 = ((unint64_t)v23 + v26) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = v34 + 8;
  unint64_t v36 = ((unint64_t)v24 + v26) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = v36 + 8;
  unsigned int v38 = *(unsigned __int8 *)(v34 + 16);
  unsigned int v39 = *(unsigned __int8 *)(v36 + 16);
  if (v38 > 1)
  {
    if (v39 <= 1)
    {
      BOOL v44 = v39 != 0;
      uint64_t v45 = *(void *)v37;
      outlined copy of PlatformItemCollection.Storage(v45, v39 != 0);
      *(void *)unint64_t v35 = v45;
      *(unsigned char *)(v35 + 8) = v44;
      return a1;
    }
LABEL_18:
    uint64_t v46 = *(void *)v37;
    *(unsigned char *)(v35 + 8) = *(unsigned char *)(v37 + 8);
    *(void *)unint64_t v35 = v46;
    return a1;
  }
  if (v39 > 1)
  {
    outlined consume of PlatformItemCollection.Storage(*(void *)v35, v38 & 1);
    goto LABEL_18;
  }
  BOOL v40 = v39 != 0;
  uint64_t v41 = *(void *)v37;
  outlined copy of PlatformItemCollection.Storage(v41, v39 != 0);
  uint64_t v42 = *(void *)v35;
  char v43 = *(unsigned char *)(v35 + 8);
  *(void *)unint64_t v35 = v41;
  *(unsigned char *)(v35 + 8) = v40;
  outlined consume of PlatformItemCollection.Storage(v42, v43);
  return a1;
}

uint64_t initializeWithTake for AdaptableTabViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  unint64_t v4 = (_OWORD *)((a1 + 25) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v5 = (long long *)((a2 + 25) & 0xFFFFFFFFFFFFFFF8);
  long long v6 = *v5;
  long long v7 = v5[2];
  v4[1] = v5[1];
  void v4[2] = v7;
  *unint64_t v4 = v6;
  char v8 = (_OWORD *)(((unint64_t)v4 + 55) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = (_OWORD *)(((unint64_t)v5 + 55) & 0xFFFFFFFFFFFFFFF8);
  *char v8 = *v9;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  unint64_t v13 = *(_DWORD *)(v11 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (void *)(((unint64_t)v8 + v12 + 16) & v13);
  uint64_t v15 = (void *)(((unint64_t)v9 + v12 + 16) & v13);
  uint64_t v16 = ~v12;
  uint64_t v17 = (v12 + 16) & ~v12;
  uint64_t v18 = *(void *)(v11 + 64);
  uint64_t v19 = (uint64_t *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v11 + 84) & 0x80000000) == 0)
  {
    uint64_t v20 = *v19;
    if ((unint64_t)*v19 >= 0xFFFFFFFF) {
      LODWORD(v20) = -1;
    }
    size_t v21 = v17 + v18;
    if (v20 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *unint64_t v14 = *v15;
    unint64_t v22 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v22 = *v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))(((unint64_t)v22 + v12 + 8) & v16, ((unint64_t)v19 + v12 + 8) & v16, v10);
    goto LABEL_8;
  }
  size_t v21 = v17 + v18;
  if (!(*(unsigned int (**)(unint64_t))(v11 + 48))(((unint64_t)v19 + v12 + 8) & v16)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v14, v15, v21);
LABEL_8:
  *((unsigned char *)v14 + v21) = *((unsigned char *)v15 + v21);
  unint64_t v23 = ((unint64_t)v14 + v21) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v15 + v21) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v25 = *(void *)(v24 + 8);
  *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 16);
  *(void *)(v23 + 8) = v25;
  return a1;
}

uint64_t assignWithTake for AdaptableTabViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 17);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = v7;
  outlined consume of Environment<Binding<Visibility>?>.Content(v8, v9, v11, v10);
  unint64_t v12 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (a2 + 25) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v12);
  long long v14 = *(_OWORD *)v13;
  long long v15 = *(_OWORD *)(v13 + 16);
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  *(_OWORD *)unint64_t v12 = v14;
  *(_OWORD *)(v12 + 16) = v15;
  *(void *)(v12 + 40) = *(void *)(v13 + 40);
  swift_release();
  unint64_t v16 = (v12 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v13 + 55) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v16 = *(unsigned char *)v17;
  *(void *)(v16 + 8) = *(void *)(v17 + 8);
  swift_release();
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned int *)(v19 + 84);
  uint64_t v21 = *(_DWORD *)(v19 + 80);
  unint64_t v22 = *(_DWORD *)(v19 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (void *)((v21 + 16 + v16) & v22);
  unint64_t v24 = (void *)((v21 + 16 + v17) & v22);
  uint64_t v25 = *(void *)(v19 + 64);
  size_t v26 = ((v21 + 16) & ~v21) + v25;
  uint64_t v27 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v45 = ~v21;
  if ((v20 & 0x80000000) == 0)
  {
    uint64_t v28 = (uint64_t *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v29 = *v28;
    if ((unint64_t)*v28 >= 0xFFFFFFFF) {
      LODWORD(v29) = -1;
    }
    int v30 = v29 + 1;
    if (*v27 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
LABEL_8:
    if (v30) {
      goto LABEL_9;
    }
    *unint64_t v23 = *v24;
    *uint64_t v27 = *v28;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 32))(((unint64_t)v27 + v21 + 8) & v45, ((unint64_t)v28 + v21 + 8) & v45, v18);
    goto LABEL_12;
  }
  BOOL v44 = v24;
  size_t v43 = ((v21 + 16) & ~v21) + v25;
  uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v19 + 48);
  int v42 = v31(((unint64_t)v27 + v21 + 8) & ~v21, v20, v18);
  uint64_t v28 = (uint64_t *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v30 = v31(((unint64_t)v28 + v21 + 8) & ~v21, v20, v18);
  size_t v26 = v43;
  unint64_t v24 = v44;
  if (v42) {
    goto LABEL_8;
  }
LABEL_5:
  if (v30)
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v19 + 8))(((unint64_t)v27 + v21 + 8) & v45, v18);
LABEL_9:
    memcpy(v23, v24, v26);
    goto LABEL_12;
  }
  *unint64_t v23 = *v24;
  swift_release();
  *uint64_t v27 = *v28;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 40))(((unint64_t)v27 + v21 + 8) & v45, ((unint64_t)v28 + v21 + 8) & v45, v18);
LABEL_12:
  *((unsigned char *)v23 + v26) = *((unsigned char *)v24 + v26);
  unint64_t v32 = ((unint64_t)v23 + v26) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = v32 + 8;
  unint64_t v34 = ((unint64_t)v24 + v26) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = v34 + 8;
  unsigned int v36 = *(unsigned __int8 *)(v32 + 16);
  if (v36 > 1)
  {
LABEL_16:
    uint64_t v40 = *(void *)v35;
    *(unsigned char *)(v33 + 8) = *(unsigned char *)(v35 + 8);
    *(void *)unint64_t v33 = v40;
    return a1;
  }
  unsigned int v37 = *(unsigned __int8 *)(v34 + 16);
  char v38 = v36 & 1;
  if (v37 > 1)
  {
    outlined consume of PlatformItemCollection.Storage(*(void *)v33, v38);
    goto LABEL_16;
  }
  uint64_t v39 = *(void *)v33;
  *(void *)unint64_t v33 = *(void *)v35;
  *(unsigned char *)(v33 + 8) = v37 != 0;
  outlined consume of PlatformItemCollection.Storage(v39, v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for AdaptableTabViewRoot(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  if (v6 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  unsigned int v8 = v7 - 1;
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v9 | 7;
  if (v10 < a2)
  {
    unint64_t v12 = ((((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 88) & ~v11)) & 0xFFFFFFFFFFFFFFF8)
        + 17;
    unsigned int v13 = (a2 - v10 + 255) >> (8 * v12);
    if (v12 < 4) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      LODWORD(v15) = 4;
    }
    else {
      LODWORD(v15) = 2;
    }
    if (v14 < 0x100) {
      LODWORD(v15) = 1;
    }
    if (v14 >= 2) {
      uint64_t v15 = v15;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = a1[v12];
        if (!a1[v12]) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v16 = *(unsigned __int16 *)&a1[v12];
        if (*(_WORD *)&a1[v12]) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187AD1A8CLL);
      case 4:
        int v16 = *(_DWORD *)&a1[v12];
        if (!v16) {
          break;
        }
LABEL_25:
        int v18 = (v16 - 1) << (8 * v12);
        if (v12 >= 4) {
          int v18 = 0;
        }
        if (((((v9 + 16) & ~v9)
             + *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)
             + ((v9 + 88) & ~v11)) & 0xFFFFFFF8) == 0xFFFFFFF0)
          int v19 = *a1;
        else {
          int v19 = *(_DWORD *)a1;
        }
        return v10 + (v19 | v18) + 1;
      default:
        break;
    }
  }
  unint64_t v20 = (unint64_t)(a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  if ((v8 & 0x80000000) != 0)
  {
    unint64_t v22 = (unint64_t *)((((((v20 + 55) & 0xFFFFFFFFFFFFFFF8) + v11 + 16) & ~v11) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 0x80000000) != 0)
    {
      unsigned int v24 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v22 + v9 + 8) & ~v9);
    }
    else
    {
      unint64_t v23 = *v22;
      if (v23 >= 0xFFFFFFFF) {
        LODWORD(v23) = -1;
      }
      unsigned int v24 = v23 + 1;
    }
    if (v24 >= 2) {
      return v24 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v21 = *(void *)(v20 + 24);
    if (v21 >= 0xFFFFFFFF) {
      LODWORD(v21) = -1;
    }
    return (v21 + 1);
  }
}

void storeEnumTagSinglePayload for AdaptableTabViewRoot(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v10 = v9 - 1;
  if (v9 - 1 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v9 - 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  size_t v14 = ((v12 + 16) & ~v12) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v15 = ((v14 + ((v12 + 88) & ~(v12 | 7))) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v16 = 8 * v15;
  if (v11 >= a3)
  {
    int v20 = 0;
    if (v11 >= a2)
    {
LABEL_20:
      switch(v20)
      {
        case 1:
          a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_37;
        case 2:
          *(_WORD *)&a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_37;
        case 3:
          goto LABEL_76;
        case 4:
          *(_DWORD *)&a1[v15] = 0;
          goto LABEL_36;
        default:
LABEL_36:
          if (a2)
          {
LABEL_37:
            unint64_t v23 = (unint64_t)(a1 + 25) & 0xFFFFFFFFFFFFFFF8;
            if ((v10 & 0x80000000) != 0)
            {
              uint64_t v13 = v12 | 7;
              unint64_t v24 = (((v23 + 55) & 0xFFFFFFFFFFFFFFF8) + v13 + 16) & ~v13;
              if (v10 >= a2)
              {
                if (a2 + 1 <= v9)
                {
                  if (a2 != -1)
                  {
                    int v30 = (void *)((v24 + 15) & 0xFFFFFFFFFFFFFFF8);
                    if ((v8 & 0x80000000) != 0)
                    {
                      uint64_t v31 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
                      uint64_t v32 = a2 + 1;
                      v31(((unint64_t)v30 + v12 + 8) & ~v12, v32);
                    }
                    else if (((a2 + 1) & 0x80000000) != 0)
                    {
                      *int v30 = a2 - 0x7FFFFFFF;
                    }
                    else
                    {
                      *int v30 = a2;
                    }
                  }
                }
                else
                {
                  if (v14 <= 3) {
                    int v28 = ~(-1 << (8 * v14));
                  }
                  else {
                    int v28 = -1;
                  }
                  if (v14)
                  {
                    int v26 = v28 & (a2 - v9);
                    if (v14 <= 3) {
                      int v29 = v14;
                    }
                    else {
                      int v29 = 4;
                    }
                    bzero((void *)((((v23 + 55) & 0xFFFFFFFFFFFFFFF8) + v13 + 16) & ~v13), v14);
                    switch(v29)
                    {
                      case 2:
LABEL_70:
                        *(_WORD *)unint64_t v24 = v26;
                        break;
                      case 3:
LABEL_69:
                        *(_WORD *)unint64_t v24 = v26;
                        *(unsigned char *)(v24 + 2) = BYTE2(v26);
                        break;
                      case 4:
LABEL_71:
                        *(_DWORD *)unint64_t v24 = v26;
                        break;
                      default:
LABEL_64:
                        *(unsigned char *)unint64_t v24 = v26;
                        break;
                    }
                  }
                }
              }
              else
              {
                if (v14 <= 3) {
                  int v25 = ~(-1 << (8 * v14));
                }
                else {
                  int v25 = -1;
                }
                if (v14)
                {
                  int v26 = v25 & (a2 - v9);
                  if (v14 <= 3) {
                    int v27 = v14;
                  }
                  else {
                    int v27 = 4;
                  }
                  bzero((void *)((((v23 + 55) & 0xFFFFFFFFFFFFFFF8) + v13 + 16) & ~v13), v14);
                  switch(v27)
                  {
                    case 2:
                      goto LABEL_70;
                    case 3:
                      goto LABEL_69;
                    case 4:
                      goto LABEL_71;
                    default:
                      goto LABEL_64;
                  }
                }
              }
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *(void *)(v23 + 40) = 0;
              *(_OWORD *)(v23 + 24) = 0u;
              *(_OWORD *)(v23 + 8) = 0u;
              *(void *)unint64_t v23 = a2 ^ 0x80000000;
            }
            else
            {
              *(void *)(v23 + 24) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v17 = (a3 - v11 + 255) >> v16;
    if (v15 <= 3) {
      unsigned int v18 = v17 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    if (v11 >= a2) {
      goto LABEL_20;
    }
  }
  if (v15 < 4) {
    unsigned int v21 = ((~v11 + a2) >> v16) + 1;
  }
  else {
    unsigned int v21 = 1;
  }
  if (v15 >= 4) {
    unsigned int v22 = ~v11 + a2;
  }
  else {
    unsigned int v22 = (~(_BYTE)v11 + a2);
  }
  bzero(a1, v15);
  if (v15 == 1) {
    *a1 = v22;
  }
  else {
    *(_DWORD *)a1 = v22;
  }
  switch(v20)
  {
    case 1:
      a1[v15] = v21;
      break;
    case 2:
      *(_WORD *)&a1[v15] = v21;
      break;
    case 3:
LABEL_76:
      __break(1u);
      JUMPOUT(0x187AD1E2CLL);
    case 4:
      *(_DWORD *)&a1[v15] = v21;
      break;
    default:
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for AdaptableTabViewRoot<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in AdaptableTabViewRoot<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t AdaptableTabViewRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v66 = *(void *)(a2 - 8);
  *(void *)&long long v67 = a1;
  MEMORY[0x1F4188790](a1);
  uint64_t v63 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v59 = (char *)&v59 - v10;
  uint64_t v12 = *(void *)(v11 + 16);
  type metadata accessor for Binding();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  unsigned int v17 = (char *)&v59 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))((char *)&v59 - v16, v4 + *(int *)(a2 + 44), v13, v15);
  uint64_t v18 = *(void *)(a2 + 24);
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)&v80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v12;
  *(void *)(v19 + 24) = v18;
  long long v20 = v81;
  *(_OWORD *)(v19 + 32) = v80;
  *(_OWORD *)(v19 + 48) = v20;
  *(_OWORD *)(v19 + 64) = v82[0];
  *(void *)(v19 + 80) = *(void *)&v82[1];
  v69[2] = v12;
  v69[3] = v18;
  v69[4] = partial apply for implicit closure #2 in implicit closure #1 in SystemTabView.BodyContent.body.getter;
  v69[5] = v19;
  type metadata accessor for Binding<Int?>();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))_s7SwiftUI7BindingVyxGACySiSgGIgno_AdFs5NeverOIegnrzr_SHRzlTRTA_0, (uint64_t)v69, MEMORY[0x1E4FBC248], v21, v22, (uint64_t)&v85);
  uint64_t v23 = v66;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  unint64_t v24 = v59;
  swift_release();
  uint64_t v25 = v85;
  uint64_t v26 = v86;
  uint64_t v27 = v87;
  int v65 = v88;
  int v28 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v68 = v4;
  uint64_t v60 = v28;
  v28(v24, v4, a2);
  outlined init with copy of _VariadicView_Children(v67, (uint64_t)&v80);
  if (v26)
  {
    uint64_t v61 = v27;
    uint64_t v62 = v26;
    uint64_t v64 = v25;
  }
  else
  {
    type metadata accessor for PlatformItemCollection?(0, (unint64_t *)&lazy cache variable for type metadata for State<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    outlined init with copy of _VariadicView_Children((uint64_t)&v80, (uint64_t)v83);
    type metadata accessor for ChildIndexProjection();
    uint64_t v29 = swift_allocObject();
    long long v30 = v83[1];
    *(_OWORD *)(v29 + 16) = v83[0];
    *(_OWORD *)(v29 + 32) = v30;
    *(_OWORD *)(v29 + 48) = v83[2];
    *(void *)(v29 + 64) = v84;
    uint64_t v64 = specialized Binding.projecting<A>(_:)(v29);
    uint64_t v61 = v32;
    uint64_t v62 = v31;
    int v65 = v33;
    swift_release();
    outlined destroy of Binding<AnyHashable>((uint64_t)v72);
  }
  outlined destroy of _VariadicView_Children((uint64_t)&v80);
  unint64_t v34 = *(void (**)(char *, uint64_t))(v23 + 8);
  v34(v24, a2);
  uint64_t v35 = v68;
  uint64_t v36 = SystemTabView.BodyContent.clientSidebarVisibility.getter();
  uint64_t v38 = v37;
  char v40 = v39;
  uint64_t v41 = v63;
  v60(v63, v35, a2);
  if (v38)
  {
    uint64_t v66 = v38;
    v34(v41, a2);
    uint64_t v63 = (char *)v36;
  }
  else
  {
    uint64_t v42 = *((void *)v41 + 10);
    LOBYTE(v83[0]) = v41[72];
    *((void *)&v83[0] + 1) = v42;
    type metadata accessor for PlatformItemCollection?(0, &lazy cache variable for type metadata for State<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    v34(v41, a2);
    uint64_t v66 = *((void *)&v72[0] + 1);
    uint64_t v63 = *(char **)&v72[0];
    char v40 = v72[1];
  }
  outlined init with copy of _VariadicView_Children(v67, (uint64_t)&v80);
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)&v83[0] = 0;
  uint64_t v44 = v64;
  swift_retain();
  swift_retain();
  BindingOperations.NilCoalescing.init(defaultValue:)();
  long long v67 = v72[0];
  *(void *)&v72[0] = KeyPath;
  *(_OWORD *)((char *)v72 + 8) = v67;
  uint64_t v85 = v61;
  LOBYTE(v86) = v65 & 1;
  swift_retain();
  swift_getAtKeyPath();
  uint64_t v45 = *(void *)&v83[0];
  if (BYTE8(v83[0])) {
    uint64_t v45 = v67;
  }
  *(void *)&long long v67 = v45;
  type metadata accessor for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>();
  lazy protocol witness table accessor for type WritableKeyPath<Int?, Int?> and conformance WritableKeyPath<A, B>(&lazy protocol witness table cache variable for type ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>> and conformance ComposedProjection<A, B>, (void (*)(uint64_t))type metadata accessor for ComposedProjection<WritableKeyPath<Int?, Int?>, BindingOperations.NilCoalescing<Int>>);
  uint64_t v46 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_release();
  swift_release_n();
  swift_release_n();
  char v47 = *(unsigned char *)(v68 + *(int *)(a2 + 48));
  uint64_t v48 = v68 + *(int *)(a2 + 52);
  uint64_t v49 = *(void *)v48;
  unsigned __int8 v50 = *(unsigned char *)(v48 + 8);
  uint64_t v51 = swift_getKeyPath();
  uint64_t v52 = swift_getKeyPath();
  uint64_t v53 = swift_getKeyPath();
  char v77 = 0;
  char v75 = 0;
  char v73 = 0;
  *(_OWORD *)((char *)v72 + 7) = v80;
  *(_OWORD *)((char *)&v72[1] + 7) = v81;
  *(_OWORD *)((char *)&v72[2] + 7) = v82[0];
  *(void *)((char *)&v72[3] + 7) = *(void *)&v82[1];
  LODWORD(v83[0]) = *(_DWORD *)v76;
  *(_DWORD *)((char *)v83 + 3) = *(_DWORD *)&v76[3];
  *(_DWORD *)((char *)&v85 + 3) = *(_DWORD *)&v74[3];
  LODWORD(v85) = *(_DWORD *)v74;
  *(_OWORD *)((char *)v82 + 15) = *(_OWORD *)((char *)&v72[2] + 15);
  long long v81 = v72[1];
  v82[0] = v72[2];
  long long v80 = v72[0];
  __int16 v79 = v71;
  int v78 = v70;
  *(void *)a3 = v51;
  *(unsigned char *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 9) = v83[0];
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)v83 + 3);
  *(void *)(a3 + 16) = v52;
  *(unsigned char *)(a3 + 24) = 0;
  *(_DWORD *)(a3 + 25) = v85;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v85 + 3);
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 32) = v53;
  *(unsigned char *)(a3 + 56) = 0;
  long long v54 = v80;
  long long v55 = v81;
  long long v56 = v82[0];
  *(_OWORD *)(a3 + 104) = *(_OWORD *)((char *)v82 + 15);
  *(_OWORD *)(a3 + 89) = v56;
  *(_OWORD *)(a3 + 73) = v55;
  *(_OWORD *)(a3 + 57) = v54;
  *(void *)(a3 + 120) = v44;
  *(void *)(a3 + 128) = v46;
  uint64_t v57 = v63;
  *(void *)(a3 + 136) = v67;
  *(void *)(a3 + 144) = v57;
  *(void *)(a3 + 152) = v66;
  *(unsigned char *)(a3 + 160) = v40;
  *(unsigned char *)(a3 + 161) = v47;
  LODWORD(v57) = v78;
  *(_WORD *)(a3 + 166) = v79;
  *(_DWORD *)(a3 + 162) = v57;
  *(void *)(a3 + 168) = v49;
  *(unsigned char *)(a3 + 176) = v50;
  return outlined copy of PlatformItemCollection?(v49, v50);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance AdaptableTabViewRoot<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t base witness table accessor for _AttributeBody in SidebarAdaptableTabViewStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance AdaptableTabViewRoot<A>()
{
  return MEMORY[0x1F40FF800]();
}

uint64_t partial apply for closure #1 in SidebarAdaptableTabViewStyle.Body.value.getter()
{
  return closure #1 in SidebarAdaptableTabViewStyle.Body.value.getter(*(void *)(v0 + 32), *(unsigned int *)(v0 + 40), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

double AdaptableTabView.body.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0, &lazy cache variable for type metadata for Environment<Binding<TabViewCustomization>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>?, MEMORY[0x1E4F3F4E0]);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (uint64_t *)((char *)&v31 - v4);
  outlined init with copy of _VariadicView_Children(v1 + 64, (uint64_t)v42);
  uint64_t v6 = *(void *)(v1 + 120);
  uint64_t v37 = *(void *)(v1 + 128);
  uint64_t v38 = v6;
  uint64_t v39 = *(void *)(v1 + 136);
  uint64_t v7 = *(void *)v1;
  uint64_t v8 = *(unsigned __int8 *)(v1 + 8);
  swift_retain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v7, v8);
  specialized Environment.wrappedValue.getter(v7, v8, &v41);
  outlined consume of Environment<Bool?>.Content(v7, v8);
  uint64_t v9 = *(void *)(v1 + 144);
  uint64_t v10 = *(void *)(v1 + 152);
  int v35 = *(unsigned __int8 *)(v1 + 160);
  int v36 = v41;
  uint64_t v11 = *(void *)(v1 + 32);
  uint64_t v12 = *(void *)(v1 + 40);
  uint64_t v13 = *(void *)(v1 + 48);
  char v14 = *(unsigned char *)(v1 + 56);
  swift_retain();
  swift_retain();
  outlined copy of Environment<TabSidebarAccessoryViewConfiguration>.Content(v11, v12, v13, v14);
  uint64_t v15 = specialized Environment.wrappedValue.getter(v11, v12, v13, v14);
  uint64_t v33 = v16;
  uint64_t v34 = v15;
  uint64_t v32 = v17;
  outlined consume of Environment<TabSidebarAccessoryViewConfiguration>.Content(v11, v12, v13, v14);
  uint64_t v18 = *(void *)(v1 + 168);
  LOBYTE(v12) = *(unsigned char *)(v1 + 176);
  uint64_t v19 = *(void *)(v1 + 16);
  uint64_t v20 = *(unsigned __int8 *)(v1 + 24);
  outlined copy of PlatformItemCollection?(v18, v12);
  outlined copy of Environment<Bool>.Content(v19, v20);
  specialized Environment.wrappedValue.getter(v19, v20, &v40);
  outlined consume of Environment<Bool?>.Content(v19, v20);
  LOBYTE(v19) = v40;
  LOBYTE(v20) = *(unsigned char *)(v1 + 161);
  *uint64_t v5 = swift_getKeyPath();
  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0, &lazy cache variable for type metadata for Environment<Binding<TabViewCustomization>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>?, MEMORY[0x1E4F3F4D8]);
  swift_storeEnumTagMultiPayload();
  uint64_t KeyPath = swift_getKeyPath();
  outlined init with take of Environment<Binding<TabViewCustomization>?>((uint64_t)v5, a1);
  uint64_t v22 = (int *)type metadata accessor for AdaptableTabView.BodyContent(0);
  uint64_t v23 = a1 + v22[5];
  *(void *)uint64_t v23 = KeyPath;
  *(unsigned char *)(v23 + 8) = 0;
  uint64_t v24 = a1 + v22[6];
  long long v25 = v42[1];
  *(_OWORD *)uint64_t v24 = v42[0];
  *(_OWORD *)(v24 + 16) = v25;
  double result = *(double *)&v43;
  *(_OWORD *)(v24 + 32) = v43;
  *(void *)(v24 + 48) = v44;
  uint64_t v27 = (void *)(a1 + v22[7]);
  uint64_t v28 = v37;
  *uint64_t v27 = v38;
  v27[1] = v28;
  void v27[2] = v39;
  uint64_t v29 = a1 + v22[8];
  *(unsigned char *)uint64_t v29 = v36;
  *(void *)(v29 + 8) = v9;
  *(void *)(v29 + 16) = v10;
  *(unsigned char *)(v29 + 24) = v35;
  uint64_t v30 = v33;
  *(void *)(v29 + 32) = v34;
  *(void *)(v29 + 40) = v30;
  *(void *)(v29 + 48) = v32;
  *(void *)(v29 + 56) = v18;
  *(unsigned char *)(v29 + 64) = v12;
  *(unsigned char *)(v29 + 65) = v19;
  *(unsigned char *)(v29 + 66) = v20;
  return result;
}

uint64_t _s7SwiftUI7BindingVyxGACySiSgGIgno_AdFs5NeverOIegnrzr_SHRzlTRTA_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 32))();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 24) = v6 & 1;
  return result;
}

uint64_t outlined destroy of Binding<AnyHashable>(uint64_t a1)
{
  type metadata accessor for PlatformItemCollection?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformItemCollection?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type WritableKeyPath<Int?, Int?> and conformance WritableKeyPath<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance AdaptableTabView()
{
  return static StaticIf<>._viewListCount(inputs:)();
}

uint64_t key path getter for EnvironmentValues.tabContentMode : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.tabContentMode : EnvironmentValues()
{
  return EnvironmentValues.tabContentMode.setter();
}

uint64_t sub_187AD2D50()
{
  return EnvironmentValues.tabContentMode.setter();
}

uint64_t partial apply for closure #1 in ChildIndexProjection.get(base:)(void *a1)
{
  return closure #1 in ChildIndexProjection.get(base:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t outlined destroy of EnumeratedSequence<_VariadicView_Children>.Iterator(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>(0, a2, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, MEMORY[0x1E4F40A38], a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined destroy of (offset: Int, element: _VariadicView_Children.Element)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)?(uint64_t a1)
{
}

void type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: _VariadicView_Children.Element))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: _VariadicView_Children.Element));
    }
  }
}

uint64_t outlined init with copy of EnumeratedSequence<_VariadicView_Children>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>(0, (unint64_t *)&lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, MEMORY[0x1E4F40A38], MEMORY[0x1E4FBBCF8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_187AD3030()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

unint64_t type metadata accessor for UISceneSession()
{
  unint64_t result = lazy cache variable for type metadata for UISceneSession;
  if (!lazy cache variable for type metadata for UISceneSession)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UISceneSession);
  }
  return result;
}

uint64_t outlined copy of Environment<TabSidebarAccessoryViewConfiguration>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    swift_retain();
    swift_retain();
  }

  return swift_retain();
}

uint64_t destroy for AdaptableTabView(uint64_t a1)
{
  outlined consume of Environment<Bool?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  outlined consume of Environment<TabSidebarAccessoryViewConfiguration>.Content(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  __swift_destroy_boxed_opaque_existential_1(a1 + 64);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  int v3 = *(unsigned __int8 *)(a1 + 176);
  if (v3 != 255)
  {
    uint64_t v4 = *(void *)(a1 + 168);
    return outlined consume of PlatformItemCollection.Storage(v4, v3 & 1);
  }
  return result;
}

uint64_t initializeWithCopy for AdaptableTabView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  char v11 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<TabSidebarAccessoryViewConfiguration>.Content(v8, v9, v10, v11);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 56) = v11;
  long long v12 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 88) = v12;
  (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 64, a2 + 64);
  uint64_t v13 = *(void **)(a2 + 104);
  uint64_t v14 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = v13;
  *(void *)(a1 + 112) = v14;
  uint64_t v15 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v15;
  uint64_t v16 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v16;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
  uint64_t v17 = (uint64_t *)(a2 + 168);
  int v18 = *(unsigned __int8 *)(a2 + 176);
  id v19 = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v18 == 255)
  {
    *(void *)(a1 + 168) = *v17;
    *(unsigned char *)(a1 + 176) = *((unsigned char *)v17 + 8);
  }
  else
  {
    char v20 = v18 & 1;
    uint64_t v21 = *v17;
    outlined copy of PlatformItemCollection.Storage(*v17, v20);
    *(void *)(a1 + 168) = v21;
    *(unsigned char *)(a1 + 176) = v20;
  }
  return a1;
}

uint64_t *assignWithCopy for AdaptableTabView(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = a1[2];
  uint64_t v11 = *((unsigned __int8 *)a1 + 24);
  a1[2] = v8;
  *((unsigned char *)a1 + 24) = v9;
  outlined consume of Environment<Bool?>.Content(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  char v15 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<TabSidebarAccessoryViewConfiguration>.Content(v12, v13, v14, v15);
  uint64_t v16 = a1[4];
  uint64_t v17 = a1[5];
  uint64_t v18 = a1[6];
  char v19 = *((unsigned char *)a1 + 56);
  a1[4] = v12;
  a1[5] = v13;
  a1[6] = v14;
  *((unsigned char *)a1 + 56) = v15;
  outlined consume of Environment<TabSidebarAccessoryViewConfiguration>.Content(v16, v17, v18, v19);
  __swift_assign_boxed_opaque_existential_1(a1 + 8, (uint64_t *)(a2 + 64));
  char v20 = *(void **)(a2 + 104);
  uint64_t v21 = (void *)a1[13];
  a1[13] = (uint64_t)v20;
  id v22 = v20;

  a1[14] = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[15] = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  a1[16] = *(void *)(a2 + 128);
  swift_retain();
  swift_release();
  a1[17] = *(void *)(a2 + 136);
  a1[18] = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  a1[19] = *(void *)(a2 + 152);
  swift_retain();
  swift_release();
  *((unsigned char *)a1 + 160) = *(unsigned char *)(a2 + 160);
  *((unsigned char *)a1 + 161) = *(unsigned char *)(a2 + 161);
  uint64_t v23 = a1 + 21;
  uint64_t v24 = (uint64_t *)(a2 + 168);
  int v25 = *(unsigned __int8 *)(a2 + 176);
  if (*((unsigned __int8 *)a1 + 176) == 255)
  {
    if (v25 == 255)
    {
      uint64_t v27 = *v24;
      *((unsigned char *)a1 + 176) = *(unsigned char *)(a2 + 176);
      *uint64_t v23 = v27;
    }
    else
    {
      char v32 = v25 & 1;
      uint64_t v33 = *v24;
      outlined copy of PlatformItemCollection.Storage(*v24, v25 & 1);
      a1[21] = v33;
      *((unsigned char *)a1 + 176) = v32;
    }
  }
  else if (v25 == 255)
  {
    outlined destroy of PlatformItemCollection((uint64_t)(a1 + 21));
    char v26 = *(unsigned char *)(a2 + 176);
    *uint64_t v23 = *v24;
    *((unsigned char *)a1 + 176) = v26;
  }
  else
  {
    char v28 = v25 & 1;
    uint64_t v29 = *v24;
    outlined copy of PlatformItemCollection.Storage(*v24, v25 & 1);
    uint64_t v30 = a1[21];
    char v31 = *((unsigned char *)a1 + 176);
    a1[21] = v29;
    *((unsigned char *)a1 + 176) = v28;
    outlined consume of PlatformItemCollection.Storage(v30, v31);
  }
  return a1;
}

uint64_t *assignWithTake for AdaptableTabView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = a1[2];
  uint64_t v10 = *((unsigned __int8 *)a1 + 24);
  a1[2] = a2[2];
  *((unsigned char *)a1 + 24) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  uint64_t v11 = a2[6];
  char v12 = *((unsigned char *)a2 + 56);
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  char v16 = *((unsigned char *)a1 + 56);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  a1[6] = v11;
  *((unsigned char *)a1 + 56) = v12;
  outlined consume of Environment<TabSidebarAccessoryViewConfiguration>.Content(v13, v14, v15, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 8));
  long long v17 = *((_OWORD *)a2 + 5);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 5) = v17;
  uint64_t v18 = a2[13];
  char v19 = (void *)a1[13];
  a1[12] = a2[12];
  a1[13] = v18;

  a1[14] = a2[14];
  swift_bridgeObjectRelease();
  a1[15] = a2[15];
  swift_release();
  a1[16] = a2[16];
  swift_release();
  uint64_t v20 = a2[18];
  a1[17] = a2[17];
  a1[18] = v20;
  swift_release();
  a1[19] = a2[19];
  swift_release();
  *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
  uint64_t v21 = a2 + 21;
  int v22 = *((unsigned __int8 *)a1 + 176);
  if (v22 != 255)
  {
    int v23 = *((unsigned __int8 *)a2 + 176);
    if (v23 != 255)
    {
      uint64_t v24 = a1[21];
      a1[21] = *v21;
      *((unsigned char *)a1 + 176) = v23 & 1;
      outlined consume of PlatformItemCollection.Storage(v24, v22 & 1);
      return a1;
    }
    outlined destroy of PlatformItemCollection((uint64_t)(a1 + 21));
  }
  a1[21] = *v21;
  *((unsigned char *)a1 + 176) = *((unsigned char *)a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for AdaptableTabView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 177)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AdaptableTabView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 176) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 177) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 88) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 177) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdaptableTabView()
{
  return &type metadata for AdaptableTabView;
}

uint64_t associated type witness table accessor for View.Body : View in AdaptableTabView()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t key path getter for EnvironmentValues.tabViewCustomization : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewCustomization.Key>, (uint64_t)&type metadata for TabViewCustomization.Key, (uint64_t)&protocol witness table for TabViewCustomization.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewCustomization.Key>, (uint64_t)&type metadata for TabViewCustomization.Key, (uint64_t)&protocol witness table for TabViewCustomization.Key);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewCustomization.Key>, (uint64_t)&type metadata for TabViewCustomization.Key, (uint64_t)&protocol witness table for TabViewCustomization.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabViewCustomization.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewCustomization.Key>, (uint64_t)&type metadata for TabViewCustomization.Key, (uint64_t)&protocol witness table for TabViewCustomization.Key);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.tabViewCustomization : EnvironmentValues(uint64_t a1)
{
  type metadata accessor for Binding<TabViewCustomization>?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<TabViewCustomization>?(a1, (uint64_t)v4);
  return EnvironmentValues.tabViewCustomization.setter((uint64_t)v4);
}

uint64_t outlined init with take of Environment<Binding<TabViewCustomization>?>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Environment<Binding<TabViewCustomization>?>.Content(0, &lazy cache variable for type metadata for Environment<Binding<TabViewCustomization>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>?, MEMORY[0x1E4F3F4E0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Binding<TabViewCustomization>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<TabViewCustomization>?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<PhoneInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InterfaceIdiomPredicate<PhoneInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>;
  if (!lazy protocol witness table cache variable for type InterfaceIdiomPredicate<PhoneInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<PhoneInterfaceIdiom>, MEMORY[0x1E4F40460], MEMORY[0x1E4F40458], MEMORY[0x1E4F40C60]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<PhoneInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout>, type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>);
    lazy protocol witness table accessor for type ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier>(255);
    lazy protocol witness table accessor for type TabViewCommonModifier and conformance TabViewCommonModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<UIKitAdaptableTabView, TabViewCommonModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_187AD3D90()
{
  return lazy protocol witness table accessor for type WritableKeyPath<Int?, Int?> and conformance WritableKeyPath<A, B>(&lazy protocol witness table cache variable for type AdaptableTabView.BodyContent and conformance AdaptableTabView.BodyContent, (void (*)(uint64_t))type metadata accessor for AdaptableTabView.BodyContent);
}

uint64_t LimitedAvailabilityScene.storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *uint64_t v1 = a1;
  return result;
}

uint64_t (*LimitedAvailabilityScene.storage.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t LimitedAvailabilityScene.init<A>(_:)(uint64_t a1)
{
  return LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(a1);
}

uint64_t type metadata accessor for LimitedAvailabilitySceneStorage()
{
  return __swift_instantiateGenericMetadata();
}

void LimitedAvailabilityScene.body.getter()
{
}

uint64_t static LimitedAvailabilityScene._makeScene(scene:inputs:)@<X0>(uint64_t a1@<X8>)
{
  PreferencesOutputs.init()();
  PreferencesInputs.makeIndirectOutputs()();
  swift_bridgeObjectRelease();
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityScene>, (uint64_t)&type metadata for LimitedAvailabilityScene, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  id v1 = (id)AGSubgraphGetCurrent();
  if (!v1) {
    __break(1u);
  }
  uint64_t v2 = v1;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LimitedAvailabilityScene.IndirectOutputs and conformance LimitedAvailabilityScene.IndirectOutputs();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  uint64_t result = PreferencesOutputs.setIndirectDependency(_:)();
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v6;
  return result;
}

void LimitedAvailabilityScene.IndirectOutputs.updateValue()()
{
  if (!*(void *)(v0 + 96))
  {
    id v1 = (id)AGSubgraphGetGraph();
    uint64_t v2 = (void *)AGSubgraphCreate();

    *(void *)(v0 + 96) = v2;
    id v4 = v2;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v3 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityScene.IndirectOutputs.updateValue()(v0);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in LimitedAvailabilityScene.IndirectOutputs.updateValue()(uint64_t a1)
{
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  long long v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;

  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v20 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 56);
  int v22 = *(_DWORD *)(a1 + 24);
  int v23 = *(_DWORD *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v18 = *(_OWORD *)(v2 + 48);
  char v19 = *(_OWORD *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 64);
  uint64_t v9 = *(void *)(v2 + 72);
  char v10 = *(unsigned char *)(v2 + 80);
  char v11 = *(unsigned char *)(v2 + 81);
  uint64_t v12 = *(void *)(v2 + 88);
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v6;
  *(void *)(v13 + 24) = v7;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v18;
  *(void *)(v13 + 64) = v8;
  *(void *)(v13 + 72) = v9;
  *(unsigned char *)(v13 + 80) = v10;
  *(unsigned char *)(v13 + 81) = v11;
  *(void *)(v13 + 88) = v12;
  swift_retain();
  uint64_t v14 = *(void *)(a1 + 80);
  LODWORD(v8) = *(_DWORD *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_retain();
  _GraphValue.init(_:)();
  char v26 = v20;
  uint64_t v27 = v22;
  char v28 = v13;
  uint64_t v29 = v4;
  uint64_t v30 = v5;
  char v31 = v21;
  char v32 = v3;
  uint64_t v33 = v23;
  char v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(void *)v15 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v34, &v24, &v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  char v26 = v14;
  uint64_t v27 = v8;
  uint64_t v24 = v34;
  int v25 = v35;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void protocol witness for Scene.body.getter in conformance LimitedAvailabilityScene()
{
}

void LimitedAvailabilitySceneStorageBase.makeScene(scene:inputs:)()
{
}

uint64_t LimitedAvailabilitySceneStorageBase.deinit()
{
  return v0;
}

uint64_t LimitedAvailabilitySceneStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilitySceneStorage.makeScene(scene:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  int v9 = *((_DWORD *)a2 + 14);
  uint64_t v10 = *(void *)(*v3 + 96);
  LODWORD(v16) = *a1;
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityScene>, (uint64_t)&type metadata for LimitedAvailabilityScene, MEMORY[0x1E4F3F590]);
  long long v15 = *(_OWORD *)(a2 + 5);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  _GraphValue.value.getter();
  uint64_t v13 = *(void *)(v5 + 104);
  type metadata accessor for LimitedAvailabilitySceneStorage.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v16 = v6;
  int v17 = v7;
  uint64_t v18 = v8;
  uint64_t v19 = v11;
  uint64_t v20 = v12;
  long long v21 = v15;
  int v22 = v9;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(v13 + 32))(v23, &v16, v10, v13);
}

uint64_t LimitedAvailabilitySceneStorage.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  AGGraphGetValue();
  type metadata accessor for LimitedAvailabilitySceneStorage();
  uint64_t v4 = swift_dynamicCastClassUnconditional();
  uint64_t v5 = v4 + *(void *)(*(void *)v4 + 112);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v6(a2, v5, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilitySceneStorage<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LimitedAvailabilitySceneStorage.Child.value.getter(*(void *)(a1 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type LimitedAvailabilityScene.IndirectOutputs and conformance LimitedAvailabilityScene.IndirectOutputs()
{
  unint64_t result = lazy protocol witness table cache variable for type LimitedAvailabilityScene.IndirectOutputs and conformance LimitedAvailabilityScene.IndirectOutputs;
  if (!lazy protocol witness table cache variable for type LimitedAvailabilityScene.IndirectOutputs and conformance LimitedAvailabilityScene.IndirectOutputs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LimitedAvailabilityScene.IndirectOutputs and conformance LimitedAvailabilityScene.IndirectOutputs);
  }
  return result;
}

ValueMetadata *type metadata accessor for LimitedAvailabilityScene()
{
  return &type metadata for LimitedAvailabilityScene;
}

uint64_t type metadata accessor for LimitedAvailabilitySceneStorageBase()
{
  return self;
}

uint64_t method lookup function for LimitedAvailabilitySceneStorageBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LimitedAvailabilitySceneStorageBase);
}

void *type metadata accessor for LimitedAvailabilityScene.IndirectOutputs()
{
  return &unk_1ED4424E0;
}

uint64_t type metadata accessor for LimitedAvailabilitySceneStorage.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in LimitedAvailabilitySceneStorage<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t static ReferenceFileDocument.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t DocumentGroup<>.init(newDocument:editor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v18 = _typeName(_:qualified:)();
  return DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(a1, a2, a3, a4, v18, v19, a5, a6, a9, a7, a8);
}

{
  uint64_t v18;
  uint64_t v19;

  uint64_t v18 = _typeName(_:qualified:)();
  return DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(a1, a2, a3, a4, v18, v19, a5, a6, a9, a7, a8);
}

uint64_t DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  *(unsigned char *)a9 = 0;
  uint64_t v18 = type metadata accessor for ReferenceFileDocumentBox();
  *(void *)(a9 + 8) = v18;
  *(void *)(a9 + 16) = &protocol witness table for ReferenceFileDocumentBox<A>;
  *(void *)(a9 + 48) = type metadata accessor for DocumentGroupConfiguration.NewReferenceFileDocument();
  *(void *)(a9 + 56) = &protocol witness table for DocumentGroupConfiguration.NewReferenceFileDocument<A>;
  *(void *)(a9 + 24) = a1;
  *(void *)(a9 + 32) = a2;
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = a8;
  uint64_t v19[3] = a11;
  void v19[4] = a3;
  v19[5] = a4;
  type metadata accessor for DocumentGroupConfiguration.EditorReferenceFileDocumentContainer();
  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>);
  swift_getWitnessTable();
  ObservableDocumentBoxInputView.init(modelType:content:)(v18, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:));
  swift_retain();
  swift_retain();
  type metadata accessor for ObservableDocumentBoxInputView();
  *(void *)(a9 + 64) = AnyView.init<A>(_:)();
  *(void *)(a9 + 72) = a5;
  *(void *)(a9 + 80) = a6;
  *(void *)(a9 + 88) = (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 24))(a7, a10);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 32))(a7, a10);
  swift_release();
  uint64_t result = swift_release();
  *(void *)(a9 + 96) = v20;
  return result;
}

{
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t result;

  *(unsigned char *)a9 = 0;
  uint64_t v18 = type metadata accessor for FileDocumentBox();
  *(void *)(a9 + 8) = v18;
  *(void *)(a9 + 16) = &protocol witness table for FileDocumentBox<A>;
  *(void *)(a9 + 48) = type metadata accessor for DocumentGroupConfiguration.NewFileDocument();
  *(void *)(a9 + 56) = &protocol witness table for DocumentGroupConfiguration.NewFileDocument<A>;
  *(void *)(a9 + 24) = a1;
  *(void *)(a9 + 32) = a2;
  uint64_t v19 = (void *)swift_allocObject();
  v19[2] = a8;
  uint64_t v19[3] = a11;
  void v19[4] = a3;
  v19[5] = a4;
  type metadata accessor for DocumentGroupConfiguration.EditorFileDocumentContainer();
  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>);
  swift_getWitnessTable();
  ObservableDocumentBoxInputView.init(modelType:content:)(v18, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:));
  swift_retain();
  swift_retain();
  type metadata accessor for ObservableDocumentBoxInputView();
  *(void *)(a9 + 64) = AnyView.init<A>(_:)();
  *(void *)(a9 + 72) = a5;
  *(void *)(a9 + 80) = a6;
  *(void *)(a9 + 88) = (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 8))(a7, a10);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(a10 + 16))(a7, a10);
  swift_release();
  uint64_t result = swift_release();
  *(void *)(a9 + 96) = v20;
  return result;
}

uint64_t DocumentGroup<>.init(viewing:viewer:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14 = _typeName(_:qualified:)();
  return DocumentGroupConfiguration.init<A, B>(documentType:viewer:contentViewType:)(a1, a2, v14, v15, a3, a4, a5, a7, a6);
}

{
  uint64_t v14;
  uint64_t v15;

  uint64_t v14 = _typeName(_:qualified:)();
  return DocumentGroupConfiguration.init<A, B>(documentType:viewer:contentViewType:)(a1, a2, v14, v15, a3, a4, a5, a7, a6);
}

uint64_t DocumentGroupConfiguration.init<A, B>(documentType:viewer:contentViewType:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  *(unsigned char *)a8 = 1;
  uint64_t v15 = type metadata accessor for ReferenceFileDocumentBox();
  *(void *)(a8 + 8) = v15;
  *(void *)(a8 + 16) = &protocol witness table for ReferenceFileDocumentBox<A>;
  *(_OWORD *)(a8 + 24) = 0u;
  *(_OWORD *)(a8 + 40) = 0u;
  *(void *)(a8 + 56) = 0;
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a6;
  v16[3] = a9;
  uint64_t v16[4] = a1;
  v16[5] = a2;
  type metadata accessor for DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer();
  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>);
  swift_getWitnessTable();
  ObservableDocumentBoxInputView.init(modelType:content:)(v15, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B>(documentType:viewer:contentViewType:));
  swift_retain();
  type metadata accessor for ObservableDocumentBoxInputView();
  *(void *)(a8 + 64) = AnyView.init<A>(_:)();
  *(void *)(a8 + 72) = a3;
  *(void *)(a8 + 80) = a4;
  *(void *)(a8 + 88) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 24))(a5, a7);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 32))(a5, a7);
  uint64_t result = swift_release();
  *(void *)(a8 + 96) = v17;
  return result;
}

{
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;

  *(unsigned char *)a8 = 1;
  uint64_t v15 = type metadata accessor for FileDocumentBox();
  *(void *)(a8 + 8) = v15;
  *(void *)(a8 + 16) = &protocol witness table for FileDocumentBox<A>;
  *(_OWORD *)(a8 + 24) = 0u;
  *(_OWORD *)(a8 + 40) = 0u;
  *(void *)(a8 + 56) = 0;
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a6;
  v16[3] = a9;
  uint64_t v16[4] = a1;
  v16[5] = a2;
  type metadata accessor for DocumentGroupConfiguration.ViewerFileDocumentContainer();
  type metadata accessor for StyleContextWriter<DocumentStyleContext>();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<DocumentStyleContext>);
  swift_getWitnessTable();
  ObservableDocumentBoxInputView.init(modelType:content:)(v15, (uint64_t)partial apply for closure #1 in DocumentGroupConfiguration.init<A, B>(documentType:viewer:contentViewType:));
  swift_retain();
  type metadata accessor for ObservableDocumentBoxInputView();
  *(void *)(a8 + 64) = AnyView.init<A>(_:)();
  *(void *)(a8 + 72) = a3;
  *(void *)(a8 + 80) = a4;
  *(void *)(a8 + 88) = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 8))(a5, a7);
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 16))(a5, a7);
  uint64_t result = swift_release();
  *(void *)(a8 + 96) = v17;
  return result;
}

uint64_t ReferenceFileDocumentConfiguration.document.getter()
{
  specialized ReferenceFileDocumentConfiguration.document.getter();

  return swift_unknownObjectRetain();
}

uint64_t key path getter for ReferenceFileDocumentConfiguration.document : <A>ReferenceFileDocumentConfiguration<A>@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ReferenceFileDocumentConfiguration();
  *a1 = specialized ReferenceFileDocumentConfiguration.document.getter();

  return swift_unknownObjectRetain();
}

uint64_t key path setter for ReferenceFileDocumentConfiguration.document : <A>ReferenceFileDocumentConfiguration<A>()
{
  uint64_t v0 = swift_unknownObjectRetain();
  return ReferenceFileDocumentConfiguration.document.setter(v0);
}

uint64_t ReferenceFileDocumentConfiguration.document.setter(uint64_t a1)
{
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*ReferenceFileDocumentConfiguration.document.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ReferenceFileDocumentConfiguration.$document.getter()
{
  return ObservedObject.projectedValue.getter();
}

uint64_t ReferenceFileDocumentConfiguration.fileURL.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of URL?(v2 + *(int *)(a1 + 36), a2);
}

uint64_t ReferenceFileDocumentConfiguration.fileURL.setter(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of URL?(a1, v2 + *(int *)(a2 + 36));
}

uint64_t (*ReferenceFileDocumentConfiguration.fileURL.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ReferenceFileDocumentConfiguration.isEditable.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t ReferenceFileDocumentConfiguration.isEditable.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t (*ReferenceFileDocumentConfiguration.isEditable.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ReferenceFileDocumentConfiguration.init(document:fileURL:isEditable:)@<X0>(uint64_t a1@<X1>, char a2@<W2>, uint64_t *a3@<X8>)
{
  *a3 = ObservedObject.init(wrappedValue:)();
  a3[1] = v6;
  uint64_t v7 = type metadata accessor for ReferenceFileDocumentConfiguration();
  uint64_t result = outlined init with take of URL?(a1, (uint64_t)a3 + *(int *)(v7 + 36));
  *((unsigned char *)a3 + *(int *)(v7 + 40)) = a2;
  return result;
}

uint64_t static ReferenceFileDocumentBox.documentBaseClass.getter()
{
  return type metadata accessor for FileWrapperPlatformDocument();
}

uint64_t ReferenceFileDocumentBox.base.didset()
{
  uint64_t result = ReferenceFileDocumentBox.base.getter();
  uint64_t v2 = result;
  if (result) {
    uint64_t result = swift_unknownObjectRelease();
  }
  *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 120)) = v2 != 0;
  return result;
}

uint64_t ReferenceFileDocumentBox.base.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t (*ReferenceFileDocumentBox.base.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  *a1 = ReferenceFileDocumentBox.base.getter();
  return ReferenceFileDocumentBox.base.modify;
}

uint64_t ReferenceFileDocumentBox.base.modify(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_unknownObjectRetain();
    specialized ReferenceFileDocumentBox.base.setter();
    swift_unknownObjectRelease();
  }
  else
  {
    specialized ReferenceFileDocumentBox.base.setter();
  }

  return swift_unknownObjectRelease();
}

uint64_t property wrapper backing initializer of ReferenceFileDocumentBox.fileURL(uint64_t a1)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v2);
  outlined init with copy of URL?(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  Published.init(initialValue:)();
  return outlined destroy of FileDocumentWriteConfiguration(a1, (uint64_t (*)(void))type metadata accessor for URL?);
}

uint64_t ReferenceFileDocumentBox.fileURL.getter()
{
  return swift_release();
}

uint64_t ReferenceFileDocumentBox.fileURL.setter(uint64_t a1)
{
  uint64_t v3 = *v1;
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(v3 + 80);
  uint64_t v7 = v11;
  uint64_t v12 = *(void *)(v3 + 88);
  uint64_t v8 = v12;
  swift_getKeyPath();
  v10[0] = v7;
  v10[1] = v8;
  swift_getKeyPath();
  outlined init with copy of URL?(a1, (uint64_t)v6);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of FileDocumentWriteConfiguration(a1, (uint64_t (*)(void))type metadata accessor for URL?);
}

uint64_t (*ReferenceFileDocumentBox.fileURL.modify(void *a1))()
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ReferenceFileDocumentBox.fileURL.modify;
}

uint64_t ReferenceFileDocumentBox.isEditable.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t ReferenceFileDocumentBox.isEditable.setter()
{
  return static Published.subscript.setter();
}

uint64_t (*ReferenceFileDocumentBox.isEditable.modify(void *a1))()
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return ReferenceFileDocumentBox.fileURL.modify;
}

void ReferenceFileDocumentBox.fileURL.modify(void *a1)
{
  unsigned __int8 v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();

  free(v1);
}

uint64_t ReferenceFileDocumentBox.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  ReferenceFileDocumentBox.init()();
  return v0;
}

uint64_t *ReferenceFileDocumentBox.init()()
{
  uint64_t v1 = *v0;
  type metadata accessor for Published<Bool>();
  uint64_t v24 = *(void *)(v2 - 8);
  uint64_t v25 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation3URLVSgMaTm_1(0, &lazy cache variable for type metadata for Published<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, MEMORY[0x1E4F1AC70]);
  uint64_t v23 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v22 - v7;
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Optional();
  uint64_t v12 = type metadata accessor for Published();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v22 - v14;
  uint64_t v16 = (uint64_t)v0 + *(void *)(v1 + 96);
  uint64_t v26 = 0;
  uint64_t v17 = type metadata accessor for Optional();
  Published.init(wrappedValue:)((uint64_t)&v26, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v16, v15, v12);
  uint64_t v18 = (uint64_t)v0 + *(void *)(*v0 + 104);
  uint64_t v19 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v11, 1, 1, v19);
  property wrapper backing initializer of ReferenceFileDocumentBox.fileURL((uint64_t)v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v18, v8, v23);
  uint64_t v20 = (uint64_t)v0 + *(void *)(*v0 + 112);
  char v27 = 0;
  Published.init(initialValue:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v20, v4, v25);
  *((unsigned char *)v0 + *(void *)(*v0 + 120)) = 0;
  *(uint64_t *)((char *)v0 + *(void *)(*v0 + 128)) = 0;
  specialized ReferenceFileDocumentBox.base.setter();
  return v0;
}

uint64_t ReferenceFileDocumentBox.read(from:contentType:)(void *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v4;
  uint64_t Configuration = type metadata accessor for FileDocumentReadConfiguration(0);
  uint64_t v9 = Configuration - 8;
  MEMORY[0x1F4188790](Configuration);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v7 + 80);
  uint64_t v13 = type metadata accessor for UTType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v11, a2, v13);
  *(void *)&v11[*(int *)(v9 + 28)] = a1;
  uint64_t v14 = *(void *)(v7 + 88);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 40);
  id v16 = a1;
  uint64_t result = v15(v11, v12, v14);
  if (!v3)
  {
    specialized ReferenceFileDocumentBox.base.setter();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t (*ReferenceFileDocumentBox.snapshotForSerialization(contentType:)(uint64_t a1))(void *a1)
{
  uint64_t v25 = a1;
  uint64_t v3 = *v1;
  uint64_t v24 = type metadata accessor for UTType();
  uint64_t v22 = *(void *)(v24 - 8);
  uint64_t v4 = *(void *)(v22 + 64);
  MEMORY[0x1F4188790](v24);
  uint64_t v23 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v3 + 88);
  uint64_t v6 = *(void *)(v3 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v21 + 64);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v20 - v11;
  uint64_t result = (uint64_t (*)(void *))ReferenceFileDocumentBox.base.getter();
  if (result)
  {
    uint64_t v14 = result;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v25, v6, v5);
    if (v2)
    {
      return (uint64_t (*)(void *))swift_unknownObjectRelease();
    }
    else
    {
      v20[0] = AssociatedTypeWitness;
      v20[1] = 0;
      uint64_t v15 = v21 + 32;
      uint64_t v21 = *(void *)(v21 + 32);
      ((void (*)(char *, char *, uint64_t))v21)(v9, v12, AssociatedTypeWitness);
      uint64_t v16 = v22;
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v23, v25, v24);
      unint64_t v17 = (*(unsigned __int8 *)(v15 + 48) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 48);
      unint64_t v18 = (v8 + *(unsigned __int8 *)(v16 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
      uint64_t v19 = (char *)swift_allocObject();
      *((void *)v19 + 2) = v6;
      *((void *)v19 + 3) = v5;
      *((void *)v19 + 4) = v14;
      ((void (*)(char *, char *, void))v21)(&v19[v17], v9, v20[0]);
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v19[v18], v23, v24);
      return partial apply for closure #1 in ReferenceFileDocumentBox.snapshotForSerialization(contentType:);
    }
  }
  return result;
}

uint64_t closure #1 in ReferenceFileDocumentBox.snapshotForSerialization(contentType:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for FileDocumentWriteConfiguration(0);
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UTType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, a4, v15);
  *(void *)&v14[*(int *)(v12 + 28)] = a1;
  uint64_t v16 = *(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(a6 + 56);
  id v17 = a1;
  uint64_t v18 = v16(a3, v14, a5, a6);
  outlined destroy of FileDocumentWriteConfiguration((uint64_t)v14, type metadata accessor for FileDocumentWriteConfiguration);
  return v18;
}

uint64_t ReferenceFileDocumentBox.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  type metadata accessor for Optional();
  uint64_t v2 = type metadata accessor for Published();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + *(void *)(*(void *)v0 + 104);
  _s10Foundation3URLVSgMaTm_1(0, &lazy cache variable for type metadata for Published<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, MEMORY[0x1E4F1AC70]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + *(void *)(*(void *)v0 + 112);
  type metadata accessor for Published<Bool>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);

  return v0;
}

uint64_t ReferenceFileDocumentBox.__deallocating_deinit()
{
  ReferenceFileDocumentBox.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance ReferenceFileDocumentBox<A>@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ReferenceFileDocumentBox();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for FileWrapperObservableDocumentBox.read(from:contentType:) in conformance ReferenceFileDocumentBox<A>(void *a1, uint64_t a2)
{
  return ReferenceFileDocumentBox.read(from:contentType:)(a1, a2);
}

uint64_t (*protocol witness for FileWrapperObservableDocumentBox.snapshotForSerialization(contentType:) in conformance ReferenceFileDocumentBox<A>(uint64_t a1))(void *a1)
{
  return ReferenceFileDocumentBox.snapshotForSerialization(contentType:)(a1);
}

uint64_t protocol witness for DocumentBaseBox.base.getter in conformance ReferenceFileDocumentBox<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ReferenceFileDocumentBox.base.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DocumentBaseBox.base.setter in conformance ReferenceFileDocumentBox<A>()
{
  specialized ReferenceFileDocumentBox.base.setter();

  return swift_unknownObjectRelease();
}

uint64_t (*protocol witness for DocumentBaseBox.base.modify in conformance ReferenceFileDocumentBox<A>(uint64_t **a1))()
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)ReferenceFileDocumentBox.base.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t protocol witness for static ObservableDocumentBox.documentBaseClass.getter in conformance ReferenceFileDocumentBox<A>()
{
  return static ReferenceFileDocumentBox.documentBaseClass.getter();
}

uint64_t protocol witness for ObservableDocumentBox.hasLoadedDocument.getter in conformance ReferenceFileDocumentBox<A>()
{
  return *(unsigned __int8 *)(v0 + *(void *)(*(void *)v0 + 120));
}

uint64_t (*protocol witness for ObservableDocumentBox.fileURL.modify in conformance ReferenceFileDocumentBox<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ReferenceFileDocumentBox.fileURL.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*protocol witness for ObservableDocumentBox.isEditable.modify in conformance ReferenceFileDocumentBox<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = ReferenceFileDocumentBox.isEditable.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

void *protocol witness for ObservableDocumentBox.undoManager.getter in conformance ReferenceFileDocumentBox<A>()
{
  uint64_t v1 = (void **)(v0 + *(void *)(*(void *)v0 + 128));
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void protocol witness for ObservableDocumentBox.undoManager.setter in conformance ReferenceFileDocumentBox<A>(void *a1)
{
  id v3 = (void **)(v1 + *(void *)(*(void *)v1 + 128));
  swift_beginAccess();
  uint64_t v4 = *v3;
  *id v3 = a1;
}

uint64_t (*protocol witness for ObservableDocumentBox.undoManager.modify in conformance ReferenceFileDocumentBox<A>())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for ObservableDocumentBox.readableContentTypes.getter in conformance ReferenceFileDocumentBox<A>(uint64_t a1)
{
  return specialized ReferenceFileDocumentBox.readableContentTypes.getter(*(void *)(a1 + 80), *(void *)(a1 + 88));
}

uint64_t protocol witness for ObservableDocumentBox.writableContentTypes.getter in conformance ReferenceFileDocumentBox<A>(uint64_t a1)
{
  return specialized ReferenceFileDocumentBox.writableContentTypes.getter(*(void *)(a1 + 80), *(void *)(a1 + 88));
}

uint64_t DocumentGroupConfiguration.NewReferenceFileDocument.provideNewDocument(to:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  type metadata accessor for ReferenceFileDocumentBox();
  swift_dynamicCastClassUnconditional();
  uint64_t v4 = swift_unknownObjectRetain();
  a3(v4);
  specialized ReferenceFileDocumentBox.base.setter();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t protocol witness for NewDocumentProvider.provideNewDocument(to:) in conformance DocumentGroupConfiguration.NewReferenceFileDocument<A>(uint64_t a1, uint64_t a2)
{
  return DocumentGroupConfiguration.NewReferenceFileDocument.provideNewDocument(to:)(a1, a2, *v2);
}

uint64_t DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.body.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t, uint64_t, void (*)(void), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.configuration.getter);
}

uint64_t DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.configuration.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v5 = ReferenceFileDocumentBox.base.getter();
  uint64_t result = swift_release();
  if (v5)
  {
    swift_retain();
    ReferenceFileDocumentBox.fileURL.getter();
    swift_release();
    swift_retain();
    char v7 = ReferenceFileDocumentBox.isEditable.getter();
    swift_release();
    return ReferenceFileDocumentConfiguration.init(document:fileURL:isEditable:)((uint64_t)v4, v7 & 1, a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorReferenceFileDocumentContainer<A, B>(void *a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorReferenceFileDocumentContainer<A, B>(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void))DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.body.getter);
}

uint64_t closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void, void *))
{
  uint64_t v11 = *a1;
  swift_retain();
  swift_retain();
  void v15[4] = property wrapper backing initializer of DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.modelBox();
  _OWORD v15[5] = v12;
  v15[6] = a2;
  v15[7] = a3;
  uint64_t v13 = *(void *)(v11 + 88);
  v15[0] = *(void *)(v11 + 80);
  v15[1] = a4;
  _OWORD v15[2] = v13;
  uint64_t v15[3] = a5;
  a6(0, v15);
  swift_getWitnessTable();
  View.styleContext<A>(_:)();
  swift_release();
  return swift_release();
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void v15[8];

  uint64_t v11 = *a1;
  swift_retain();
  swift_retain();
  void v15[4] = property wrapper backing initializer of DocumentGroupConfiguration.EditorFileDocumentContainer.modelBox();
  _OWORD v15[5] = v12;
  v15[6] = a2;
  v15[7] = a3;
  uint64_t v13 = *(void *)(v11 + 88);
  v15[0] = *(void *)(v11 + 80);
  v15[1] = a4;
  _OWORD v15[2] = v13;
  uint64_t v15[3] = a5;
  a6(0, v15);
  swift_getWitnessTable();
  View.styleContext<A>(_:)();
  swift_release();
  return swift_release();
}

uint64_t property wrapper backing initializer of DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.modelBox()
{
  type metadata accessor for ReferenceFileDocumentBox();
  swift_getWitnessTable();

  return ObservedObject.init(wrappedValue:)();
}

uint64_t DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  return DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.body.getter(a1, a2, a3, a4, a5, a6, a7, a8, a9, (void (*)(uint64_t, uint64_t, void (*)(void), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer.configuration.getter);
}

uint64_t DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(char *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t, uint64_t, void (*)(void), uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))
{
  uint64_t v80 = a8;
  char v75 = a3;
  uint64_t v74 = a1;
  uint64_t v79 = a9;
  type metadata accessor for DocumentConfiguration?(0);
  MEMORY[0x1F4188790](v15 - 8);
  id v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = a7;
  uint64_t v71 = type metadata accessor for ReferenceFileDocumentConfiguration();
  uint64_t v70 = *(void *)(v71 - 8);
  MEMORY[0x1F4188790](v71);
  uint64_t v19 = (char *)&v61 - v18;
  uint64_t v64 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v20);
  char v73 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Optional();
  uint64_t v22 = type metadata accessor for _EnvironmentKeyWritingModifier();
  uint64_t v23 = type metadata accessor for ModifiedContent();
  uint64_t v66 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v72 = (char *)&v61 - v24;
  type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(255);
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v69 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v68 = (char *)&v61 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  int v65 = (char *)&v61 - v28;
  MEMORY[0x1F4188790](v29);
  long long v67 = (char *)&v61 - v30;
  uint64_t v31 = type metadata accessor for _ConditionalContent();
  double v32 = MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)&v61 - v33;
  LODWORD(v33) = *(unsigned __int8 *)(a2 + *(void *)(*(void *)a2 + 120));
  uint64_t v77 = v36;
  uint64_t v78 = v35;
  if (v33 != 1)
  {
    uint64_t v95 = static Color.clear.getter();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v41 = v80;
    uint64_t v93 = v80;
    uint64_t v94 = WitnessTable;
    uint64_t v54 = swift_getWitnessTable();
    uint64_t v55 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
    uint64_t v91 = v54;
    uint64_t v92 = v55;
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v95, v25, MEMORY[0x1E4F414E0]);
    swift_release();
    goto LABEL_5;
  }
  uint64_t v61 = v23;
  uint64_t v37 = v17;
  uint64_t v62 = v34;
  uint64_t v63 = v22;
  uint64_t v38 = v75;
  a10(v74, a2, (void (*)(void))v75, a4, a5, a6, v76, v80, v32);
  v38(v19);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v19, v71);
  swift_retain();
  uint64_t v39 = ReferenceFileDocumentBox.base.getter();
  uint64_t result = swift_release();
  if (v39)
  {
    uint64_t v41 = v80;
    uint64_t v42 = v73;
    View.environmentObject<A>(_:)();
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v42, a6);
    swift_getKeyPath();
    DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.documentConfiguration.getter(v37);
    uint64_t v43 = type metadata accessor for DocumentConfiguration();
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v37, 0, 1, v43);
    uint64_t v44 = swift_getWitnessTable();
    uint64_t v83 = v41;
    uint64_t v84 = v44;
    uint64_t v45 = v61;
    uint64_t v46 = swift_getWitnessTable();
    char v47 = v65;
    uint64_t v48 = v72;
    View.environment<A>(_:_:)();
    swift_release();
    outlined destroy of FileDocumentWriteConfiguration((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for DocumentConfiguration?);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v48, v45);
    uint64_t v49 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
    uint64_t v81 = v46;
    uint64_t v82 = v49;
    swift_getWitnessTable();
    unsigned __int8 v50 = v67;
    static ViewBuilder.buildExpression<A>(_:)(v47);
    uint64_t v51 = *(void (**)(char *, uint64_t))(v69 + 8);
    v51(v47, v25);
    uint64_t v52 = (uint64_t)v68;
    static ViewBuilder.buildExpression<A>(_:)(v50);
    uint64_t v34 = v62;
    static ViewBuilder.buildEither<A, B>(first:)(v52, v25);
    v51((char *)v52, v25);
    v51(v50, v25);
LABEL_5:
    uint64_t v56 = MEMORY[0x1E4F414D8];
    uint64_t v57 = swift_getWitnessTable();
    uint64_t v89 = v41;
    uint64_t v90 = v57;
    uint64_t v58 = swift_getWitnessTable();
    uint64_t v59 = lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DocumentConfiguration?> and conformance _EnvironmentKeyWritingModifier<A>, type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>);
    uint64_t v87 = v58;
    uint64_t v88 = v59;
    uint64_t v85 = swift_getWitnessTable();
    uint64_t v86 = v56;
    uint64_t v60 = v78;
    swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v34);
    return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v34, v60);
  }
  __break(1u);
  return result;
}

uint64_t DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer.configuration.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v5 = ReferenceFileDocumentBox.base.getter();
  uint64_t result = swift_release();
  if (v5)
  {
    swift_retain();
    ReferenceFileDocumentBox.fileURL.getter();
    swift_release();
    return ReferenceFileDocumentConfiguration.init(document:fileURL:isEditable:)((uint64_t)v4, 0, a1);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t DocumentGroupConfiguration.EditorReferenceFileDocumentContainer.documentConfiguration.getter@<X0>(unsigned char *a1@<X8>)
{
  swift_retain();
  char v2 = ReferenceFileDocumentBox.isEditable.getter();
  swift_release();
  type metadata accessor for DocumentConfiguration();
  swift_retain();
  ReferenceFileDocumentBox.fileURL.getter();
  uint64_t result = swift_release();
  *a1 = v2 & 1;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer<A, B>(void *a1, uint64_t a2)
{
  return protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorReferenceFileDocumentContainer<A, B>(a1, a2, (uint64_t (*)(void, void, void, void, void, void, void, void))DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer.body.getter);
}

uint64_t protocol witness for View.body.getter in conformance DocumentGroupConfiguration.EditorReferenceFileDocumentContainer<A, B>(void *a1, uint64_t a2, uint64_t (*a3)(void, void, void, void, void, void, void, void))
{
  return a3(*v3, v3[1], v3[2], v3[3], a1[2], a1[3], a1[4], a1[5]);
}

uint64_t key path setter for ReferenceFileDocumentBox.fileURL : <A>ReferenceFileDocumentBox<A>(uint64_t a1)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of URL?(a1, (uint64_t)v4);
  return ReferenceFileDocumentBox.fileURL.setter((uint64_t)v4);
}

uint64_t specialized ReferenceFileDocumentBox.base.setter()
{
  return ReferenceFileDocumentBox.base.didset();
}

uint64_t sub_187AD7618()
{
  return 16;
}

__n128 sub_187AD7624(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t dispatch thunk of static ReferenceFileDocument.readableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static ReferenceFileDocument.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ReferenceFileDocument.init(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of ReferenceFileDocument.snapshot(contentType:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of ReferenceFileDocument.fileWrapper(snapshot:configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

void type metadata completion function for ReferenceFileDocumentConfiguration()
{
  type metadata accessor for URL?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void *initializeBufferWithCopyOfBuffer for ReferenceFileDocumentConfiguration(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_unknownObjectRetain();
    if (v13(v10, 1, v11))
    {
      type metadata accessor for URL?(0);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *((unsigned char *)v4 + *(int *)(a3 + 40)) = *((unsigned char *)a2 + *(int *)(a3 + 40));
  }
  return v4;
}

uint64_t destroy for ReferenceFileDocumentConfiguration(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void *initializeWithCopy for ReferenceFileDocumentConfiguration(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_unknownObjectRetain();
  if (v12(v9, 1, v10))
  {
    type metadata accessor for URL?(0);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 40)) = *((unsigned char *)a2 + *(int *)(a3 + 40));
  return a1;
}

void *assignWithCopy for ReferenceFileDocumentConfiguration(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for URL?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 40)) = *((unsigned char *)a2 + *(int *)(a3 + 40));
  return a1;
}

_OWORD *initializeWithTake for ReferenceFileDocumentConfiguration(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for URL?(0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 40)) = *((unsigned char *)a2 + *(int *)(a3 + 40));
  return a1;
}

void *assignWithTake for ReferenceFileDocumentConfiguration(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_unknownObjectRelease();
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    type metadata accessor for URL?(0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 40)) = *((unsigned char *)a2 + *(int *)(a3 + 40));
  return a1;
}

uint64_t getEnumTagSinglePayload for ReferenceFileDocumentConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187AD7F88);
}

uint64_t sub_187AD7F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for URL?(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ReferenceFileDocumentConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187AD804C);
}

uint64_t sub_187AD804C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for URL?(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ReferenceFileDocumentConfiguration()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata completion function for ReferenceFileDocumentBox()
{
  type metadata accessor for Optional();
  type metadata accessor for Published();
  if (v0 <= 0x3F)
  {
    _s10Foundation3URLVSgMaTm_1(319, &lazy cache variable for type metadata for Published<URL?>, (uint64_t (*)(uint64_t))type metadata accessor for URL?, MEMORY[0x1E4F1AC70]);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<Bool>();
      if (v2 <= 0x3F) {
        swift_initClassMetadata2();
      }
    }
  }
}

uint64_t type metadata accessor for ReferenceFileDocumentBox()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Published<Bool>()
{
  if (!lazy cache variable for type metadata for Published<Bool>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>);
    }
  }
}

uint64_t sub_187AD82D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ReferenceFileDocumentBox.base.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187AD8300()
{
  swift_unknownObjectRetain();
  specialized ReferenceFileDocumentBox.base.setter();

  return swift_unknownObjectRelease();
}

uint64_t sub_187AD8344()
{
  return 16;
}

__n128 sub_187AD8350(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t specialized ReferenceFileDocumentBox.readableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t specialized ReferenceFileDocumentBox.writableContentTypes.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_187AD83C4()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for UTType();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ReferenceFileDocumentBox.snapshotForSerialization(contentType:)(void *a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for UTType() - 8);
  return closure #1 in ReferenceFileDocumentBox.snapshotForSerialization(contentType:)(a1, v1[4], (uint64_t)v1 + v6, (uint64_t)v1 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v3, v4);
}

uint64_t sub_187AD8630@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ReferenceFileDocumentBox.isEditable.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187AD8660()
{
  return ReferenceFileDocumentBox.isEditable.setter();
}

uint64_t sub_187AD8688()
{
  return 16;
}

__n128 sub_187AD8694(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187AD86A0()
{
  return ReferenceFileDocumentBox.fileURL.getter();
}

uint64_t sub_187AD86C8()
{
  return 16;
}

__n128 sub_187AD86D4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187AD86E0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B>(documentType:viewer:contentViewType:)(uint64_t *a1)
{
  return closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(a1, v1[4], v1[5], v1[2], v1[3], (void (*)(void, void *))type metadata accessor for DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer);
}

{
  uint64_t *v1;

  return closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(a1, v1[4], v1[5], v1[2], v1[3], (void (*)(void, void *))type metadata accessor for DocumentGroupConfiguration.ViewerFileDocumentContainer);
}

uint64_t type metadata accessor for DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for StyleContextWriter<DocumentStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextWriter<DocumentStyleContext>)
  {
    unint64_t v0 = type metadata accessor for StyleContextWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<DocumentStyleContext>);
    }
  }
}

uint64_t type metadata accessor for DocumentGroupConfiguration.NewReferenceFileDocument()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(uint64_t *a1)
{
  return closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(a1, v1[4], v1[5], v1[2], v1[3], (void (*)(void, void *))type metadata accessor for DocumentGroupConfiguration.EditorReferenceFileDocumentContainer);
}

{
  uint64_t *v1;

  return closure #1 in DocumentGroupConfiguration.init<A, B>(newDocument:editor:contentViewType:)(a1, v1[4], v1[5], v1[2], v1[3], (void (*)(void, void *))type metadata accessor for DocumentGroupConfiguration.EditorFileDocumentContainer);
}

uint64_t type metadata accessor for DocumentGroupConfiguration.EditorReferenceFileDocumentContainer()
{
  return swift_getGenericMetadata();
}

void *assignWithCopy for DocumentGroupConfiguration.EditorReferenceFileDocumentContainer(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DocumentGroupConfiguration.EditorReferenceFileDocumentContainer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v4;
  swift_release();
  return a1;
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.EditorReferenceFileDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in DocumentGroupConfiguration.ViewerReferenceFileDocumentContainer<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

void type metadata accessor for DocumentConfiguration?(uint64_t a1)
{
}

void type metadata accessor for _EnvironmentKeyWritingModifier<DocumentConfiguration?>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type StyleContextWriter<DocumentStyleContext> and conformance StyleContextWriter<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of FileDocumentWriteConfiguration(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for URL?(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187AD8AC4()
{
  return swift_getWitnessTable();
}

uint64_t View.debugLog(_:file:line:)@<X0>(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t *closure #1 in OnSubmitModifier.body(content:)(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if ((*(void *)a2 & *result) != 0)
  {
    uint64_t v4 = *(void *)(a2 + 24);
    uint64_t v5 = *(void *)(a2 + 32);
    char v6 = *(unsigned char *)(a2 + 40);
    outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
    uint64_t v7 = (void (*)(uint64_t *))specialized Environment.wrappedValue.getter(v4, v5, v6);
    uint64_t v8 = outlined consume of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
    if (v7)
    {
      uint64_t v9 = v2;
      v7(&v9);
      uint64_t v8 = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(a2 + 8))(v8);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnSubmitModifier@<X0>(uint64_t *a1@<X8>)
{
  long long v3 = v1[1];
  long long v8 = *v1;
  v9[0] = v3;
  *(_OWORD *)((char *)v9 + 9) = *(long long *)((char *)v1 + 25);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = (_OWORD *)swift_allocObject();
  long long v6 = v1[1];
  v5[1] = *v1;
  _OWORD v5[2] = v6;
  *(_OWORD *)((char *)v5 + 41) = *(long long *)((char *)v1 + 25);
  *a1 = KeyPath;
  a1[1] = (uint64_t)partial apply for closure #1 in OnSubmitModifier.body(content:);
  a1[2] = (uint64_t)v5;
  return outlined retain of OnSubmitModifier((uint64_t)&v8);
}

uint64_t *closure #1 in SubmitScopeModifier.body(content:)(uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  if ((*(unsigned char *)a2 & 1) == 0 || (*(void *)(a2 + 8) & v3) == 0)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    uint64_t v5 = *(void *)(a2 + 24);
    char v6 = *(unsigned char *)(a2 + 32);
    outlined retain of SubmitScopeModifier(a2);
    uint64_t v7 = (void (*)(uint64_t *))specialized Environment.wrappedValue.getter(v4, v5, v6);
    uint64_t result = (uint64_t *)outlined release of SubmitScopeModifier(a2);
    if (v7)
    {
      uint64_t v8 = v3;
      v7(&v8);
      return (uint64_t *)outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
    }
  }
  return result;
}

uint64_t View.onSubmit(of:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath();
  v12[0] = v9;
  v12[1] = a2;
  v12[2] = a3;
  uint64_t v12[3] = KeyPath;
  v12[4] = 0;
  char v13 = 0;
  swift_retain();
  MEMORY[0x18C113660](v12, a4, &type metadata for OnSubmitModifier, a5);
  swift_release();
  return outlined consume of Environment<AppIntentExecutor?>.Content(KeyPath, 0, 0);
}

uint64_t View.submitScope(_:)(char a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  v7[0] = a1 & 1;
  uint64_t v8 = static SubmitTriggers.all;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v10 = 0;
  char v11 = 0;
  MEMORY[0x18C113660](v7, a2, &type metadata for SubmitScopeModifier, a3);
  return swift_release();
}

uint64_t sub_187AD8FBC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA16OnSubmitModifierVGAaBHPxAaBHD1__AfA0cH0HPyHCHCTm(a1, (uint64_t)&type metadata for OnSubmitModifier, (void (*)(void))lazy protocol witness table accessor for type OnSubmitModifier and conformance OnSubmitModifier);
}

unint64_t lazy protocol witness table accessor for type OnSubmitModifier and conformance OnSubmitModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type OnSubmitModifier and conformance OnSubmitModifier;
  if (!lazy protocol witness table cache variable for type OnSubmitModifier and conformance OnSubmitModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnSubmitModifier and conformance OnSubmitModifier);
  }
  return result;
}

uint64_t sub_187AD9030(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA16OnSubmitModifierVGAaBHPxAaBHD1__AfA0cH0HPyHCHCTm(a1, (uint64_t)&type metadata for SubmitScopeModifier, (void (*)(void))lazy protocol witness table accessor for type SubmitScopeModifier and conformance SubmitScopeModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA16OnSubmitModifierVGAaBHPxAaBHD1__AfA0cH0HPyHCHCTm(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for SubmitScopeModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  char v5 = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<AppIntentExecutor?>.Content(v3, v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  outlined consume of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SubmitScopeModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SubmitScopeModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[33]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SubmitScopeModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

uint64_t destroy for OnSubmitModifier(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);

  return outlined consume of Environment<AppIntentExecutor?>.Content(v2, v3, v4);
}

uint64_t initializeWithCopy for OnSubmitModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v4, v5, v6);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for OnSubmitModifier(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  uint64_t v4 = a2[2];
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  LOBYTE(v2) = *((unsigned char *)v2 + 40);
  outlined copy of Environment<AppIntentExecutor?>.Content(v5, v6, (char)v2);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  char v9 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = (_BYTE)v2;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for OnSubmitModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnSubmitModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnSubmitModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OnSubmitModifier()
{
  return &type metadata for OnSubmitModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnSubmitModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187AD9454()
{
  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned char *)(v0 + 56));

  return swift_deallocObject();
}

uint64_t *partial apply for closure #1 in OnSubmitModifier.body(content:)(uint64_t *a1)
{
  return closure #1 in OnSubmitModifier.body(content:)(a1, v1 + 16);
}

uint64_t outlined retain of OnSubmitModifier(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  char v4 = *(unsigned char *)(a1 + 40);
  swift_retain();
  outlined copy of Environment<AppIntentExecutor?>.Content(v2, v3, v4);
  return a1;
}

uint64_t sub_187AD94EC()
{
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  return swift_deallocObject();
}

uint64_t *partial apply for closure #1 in SubmitScopeModifier.body(content:)(uint64_t *a1)
{
  return closure #1 in SubmitScopeModifier.body(content:)(a1, v1 + 16);
}

uint64_t outlined release of SubmitScopeModifier(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for EnvironmentValues.TriggerSubmissionKey()
{
  return &type metadata for EnvironmentValues.TriggerSubmissionKey;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>>, &lazy cache variable for type metadata for _ViewModifier_Content<OnSubmitModifier>, (void (*)(void))lazy protocol witness table accessor for type OnSubmitModifier and conformance OnSubmitModifier);
    lazy protocol witness table accessor for type _ViewModifier_Content<SubmitScopeModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<OnSubmitModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<OnSubmitModifier>, (void (*)(void))lazy protocol witness table accessor for type OnSubmitModifier and conformance OnSubmitModifier);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TriggerSubmitAction?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TriggerSubmitAction?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnSubmitModifier>, _EnvironmentKeyWritingModifier<TriggerSubmitAction?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t AutomaticSliderStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v9 = a1[7];
  char v11 = *((unsigned char *)a1 + 64);
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v7;
  *(void *)(a2 + 32) = v6;
  *(void *)(a2 + 40) = v8;
  *(void *)(a2 + 48) = v10;
  *(void *)(a2 + 56) = v9;
  *(_WORD *)(a2 + 64) = 1;
  *(unsigned char *)(a2 + 66) = v11;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(void *)(a2 + 104) = KeyPath;
  *(unsigned char *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t associated type witness table accessor for SliderStyle.Body : View in AutomaticSliderStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for SliderStyle.makeBody(configuration:) in conformance AutomaticSliderStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return AutomaticSliderStyle.makeBody(configuration:)(a1, a2);
}

ValueMetadata *type metadata accessor for AutomaticSliderStyle()
{
  return &type metadata for AutomaticSliderStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>>)
  {
    type metadata accessor for ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>();
    type metadata accessor for SliderStyleModifier<MenuSliderStyle>(255, &lazy cache variable for type metadata for SliderStyleModifier<PlatformSliderStyle>, (void (*)(void))lazy protocol witness table accessor for type PlatformSliderStyle and conformance PlatformSliderStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>, SliderStyleModifier<PlatformSliderStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>)
  {
    type metadata accessor for Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>()
{
  if (!lazy cache variable for type metadata for Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>)
  {
    lazy protocol witness table accessor for type SliderStyleConfiguration.ValueLabel and conformance SliderStyleConfiguration.ValueLabel();
    unint64_t v0 = type metadata accessor for Slider();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SliderStyleConfiguration.ValueLabel and conformance SliderStyleConfiguration.ValueLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type SliderStyleConfiguration.ValueLabel and conformance SliderStyleConfiguration.ValueLabel;
  if (!lazy protocol witness table cache variable for type SliderStyleConfiguration.ValueLabel and conformance SliderStyleConfiguration.ValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleConfiguration.ValueLabel and conformance SliderStyleConfiguration.ValueLabel);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
    type metadata accessor for SliderStyleModifier<MenuSliderStyle>(255, &lazy cache variable for type metadata for SliderStyleModifier<MenuSliderStyle>, (void (*)(void))lazy protocol witness table accessor for type MenuSliderStyle and conformance MenuSliderStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (void (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MenuSliderStyle and conformance MenuSliderStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuSliderStyle and conformance MenuSliderStyle;
  if (!lazy protocol witness table cache variable for type MenuSliderStyle and conformance MenuSliderStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuSliderStyle and conformance MenuSliderStyle);
  }
  return result;
}

void type metadata accessor for SliderStyleModifier<MenuSliderStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for SliderStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformSliderStyle and conformance PlatformSliderStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformSliderStyle and conformance PlatformSliderStyle;
  if (!lazy protocol witness table cache variable for type PlatformSliderStyle and conformance PlatformSliderStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformSliderStyle and conformance PlatformSliderStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel> and conformance Slider<A, B>, (void (*)(uint64_t))type metadata accessor for Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Slider<SliderStyleConfiguration.Label, SliderStyleConfiguration.ValueLabel>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SliderStyleModifier<MenuSliderStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t RoundedBorderTextFieldStyle._body(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TextField<_TextFieldStyleLabel>(a1, a2);
}

void type metadata accessor for TextField<_TextFieldStyleLabel>()
{
  if (!lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>)
  {
    unint64_t v0 = type metadata accessor for TextField();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>);
    }
  }
}

uint64_t associated type witness table accessor for TextFieldStyle._Body : View in RoundedBorderTextFieldStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for RoundedBorderTextFieldStyle()
{
  return &type metadata for RoundedBorderTextFieldStyle;
}

unint64_t lazy protocol witness table accessor for type RoundedBorderTextFieldStyle.BodyContent and conformance RoundedBorderTextFieldStyle.BodyContent()
{
  unint64_t result = lazy protocol witness table cache variable for type RoundedBorderTextFieldStyle.BodyContent and conformance RoundedBorderTextFieldStyle.BodyContent;
  if (!lazy protocol witness table cache variable for type RoundedBorderTextFieldStyle.BodyContent and conformance RoundedBorderTextFieldStyle.BodyContent)
  {
    type metadata accessor for RoundedBorderTextFieldStyle.BodyContent(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RoundedBorderTextFieldStyle.BodyContent and conformance RoundedBorderTextFieldStyle.BodyContent);
  }
  return result;
}

void LimitedAvailabilityToolbarContent.body.getter()
{
}

uint64_t LimitedAvailabilityToolbarContent.init<A>(erasing:)(uint64_t a1)
{
  return LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(a1);
}

uint64_t type metadata accessor for LimitedAvailabilityToolbarContentStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static LimitedAvailabilityToolbarContent._makeToolbar(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v8 = a2[6];
  int v10 = *((_DWORD *)a2 + 14);
  uint64_t v18 = a2[8];
  int v16 = *((_DWORD *)a2 + 18);
  int v17 = *((_DWORD *)a2 + 2);
  PreferencesInputs.makeIndirectOutputs()();
  uint64_t v11 = v20;
  int v12 = (int)v21;
  LODWORD(v20) = v3;
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityToolbarContent>, (uint64_t)&type metadata for LimitedAvailabilityToolbarContent, MEMORY[0x1E4F3F590]);
  int v13 = _GraphValue.value.getter();
  id v14 = (id)AGSubgraphGetCurrent();
  if (!v14) {
    __break(1u);
  }
  id v21 = v14;
  uint64_t v22 = v4;
  LODWORD(v20) = v13;
  int v23 = v17;
  uint64_t v24 = v5;
  uint64_t v25 = v6;
  uint64_t v26 = v7;
  uint64_t v27 = v9;
  uint64_t v28 = v8;
  uint64_t v30 = v18;
  int v29 = v10;
  int v31 = v16;
  uint64_t v32 = v11;
  int v33 = v12;
  uint64_t v34 = v18;
  uint64_t v35 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LimitedAvailabilityToolbarContent.IndirectOutputs and conformance LimitedAvailabilityToolbarContent.IndirectOutputs();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  outlined release of LimitedAvailabilityToolbarContent.IndirectOutputs((uint64_t)&v20);
  uint64_t result = PreferencesOutputs.setIndirectDependency(_:)();
  *(void *)a3 = v11;
  *(_DWORD *)(a3 + 8) = v12;
  *(void *)(a3 + 16) = v18;
  return result;
}

void LimitedAvailabilityToolbarContent.IndirectOutputs.updateValue()()
{
  if (!*(void *)(v0 + 120))
  {
    id v1 = (id)AGSubgraphGetGraph();
    uint64_t v2 = (void *)AGSubgraphCreate();

    *(void *)(v0 + 120) = v2;
    id v4 = v2;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v3 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityToolbarContent.IndirectOutputs.updateValue()(v0);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in LimitedAvailabilityToolbarContent.IndirectOutputs.updateValue()(uint64_t a1)
{
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  long long v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;

  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v20 = *(void *)(a1 + 16);
  id v21 = *(void *)(a1 + 56);
  uint64_t v25 = *(_DWORD *)(a1 + 72);
  uint64_t v24 = *(void *)(a1 + 80);
  uint64_t v22 = *(_DWORD *)(a1 + 24);
  int v23 = *(_DWORD *)(a1 + 88);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v18 = *(_OWORD *)(v2 + 48);
  uint64_t v19 = *(_OWORD *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 64);
  uint64_t v8 = *(void *)(v2 + 72);
  char v10 = *(unsigned char *)(v2 + 80);
  char v11 = *(unsigned char *)(v2 + 81);
  uint64_t v12 = *(void *)(v2 + 88);
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v6;
  *(void *)(v13 + 24) = v7;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v18;
  *(void *)(v13 + 64) = v9;
  *(void *)(v13 + 72) = v8;
  *(unsigned char *)(v13 + 80) = v10;
  *(unsigned char *)(v13 + 81) = v11;
  *(void *)(v13 + 88) = v12;
  swift_retain();
  uint64_t v14 = *(void *)(a1 + 96);
  LODWORD(v9) = *(_DWORD *)(a1 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_retain();
  _GraphValue.init(_:)();
  uint64_t v28 = v20;
  int v29 = v22;
  uint64_t v30 = v13;
  int v31 = v4;
  uint64_t v32 = v5;
  int v33 = v21;
  uint64_t v34 = v3;
  uint64_t v35 = v25;
  uint64_t v36 = v24;
  uint64_t v37 = v23;
  int v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(void *)v15 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v38, &v26, &v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v28 = v14;
  int v29 = v9;
  uint64_t v26 = v38;
  uint64_t v27 = v39;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void protocol witness for ToolbarContent.body.getter in conformance LimitedAvailabilityToolbarContent()
{
}

void LimitedAvailabilityToolbarContentStorageBase._makeToolbar(content:inputs:)()
{
}

uint64_t LimitedAvailabilityToolbarContentStorageBase.deinit()
{
  return v0;
}

uint64_t LimitedAvailabilityToolbarContentStorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilityToolbarContentStorage._makeToolbar(content:inputs:)(_DWORD *a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v3;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  int v9 = *((_DWORD *)a2 + 14);
  uint64_t v10 = a2[8];
  int v11 = *((_DWORD *)a2 + 18);
  uint64_t v12 = *(void *)(*v3 + 96);
  LODWORD(v18) = *a1;
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityToolbarContent>, (uint64_t)&type metadata for LimitedAvailabilityToolbarContent, MEMORY[0x1E4F3F590]);
  long long v17 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  _GraphValue.value.getter();
  uint64_t v15 = *(void *)(v5 + 104);
  type metadata accessor for LimitedAvailabilityToolbarContentStorage.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v18 = v6;
  int v19 = v7;
  uint64_t v20 = v8;
  uint64_t v21 = v13;
  uint64_t v22 = v14;
  long long v23 = v17;
  int v24 = v9;
  uint64_t v25 = v10;
  int v26 = v11;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(v15 + 32))(v27, &v18, v12, v15);
}

uint64_t LimitedAvailabilityToolbarContentStorage.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  AGGraphGetValue();
  type metadata accessor for LimitedAvailabilityToolbarContentStorage();
  uint64_t v4 = swift_dynamicCastClassUnconditional();
  uint64_t v5 = v4 + *(void *)(*(void *)v4 + 112);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v6(a2, v5, a1);
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilityToolbarContentStorage<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LimitedAvailabilityToolbarContentStorage.Child.value.getter(*(void *)(a1 + 16), a2);
}

unint64_t lazy protocol witness table accessor for type LimitedAvailabilityToolbarContent.IndirectOutputs and conformance LimitedAvailabilityToolbarContent.IndirectOutputs()
{
  unint64_t result = lazy protocol witness table cache variable for type LimitedAvailabilityToolbarContent.IndirectOutputs and conformance LimitedAvailabilityToolbarContent.IndirectOutputs;
  if (!lazy protocol witness table cache variable for type LimitedAvailabilityToolbarContent.IndirectOutputs and conformance LimitedAvailabilityToolbarContent.IndirectOutputs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LimitedAvailabilityToolbarContent.IndirectOutputs and conformance LimitedAvailabilityToolbarContent.IndirectOutputs);
  }
  return result;
}

uint64_t outlined release of LimitedAvailabilityToolbarContent.IndirectOutputs(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 120);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LimitedAvailabilityToolbarContent()
{
  return &type metadata for LimitedAvailabilityToolbarContent;
}

uint64_t type metadata accessor for LimitedAvailabilityToolbarContentStorageBase()
{
  return self;
}

uint64_t method lookup function for LimitedAvailabilityToolbarContentStorageBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LimitedAvailabilityToolbarContentStorageBase);
}

void destroy for LimitedAvailabilityToolbarContent.IndirectOutputs(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 120);
}

uint64_t initializeWithCopy for LimitedAvailabilityToolbarContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v6 = *(void **)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v6;
  id v7 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = v6;
  return a1;
}

uint64_t assignWithCopy for LimitedAvailabilityToolbarContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  id v7 = *(void **)(a1 + 120);
  id v8 = *(void **)(a2 + 120);
  *(void *)(a1 + 120) = v8;
  id v9 = v8;

  return a1;
}

uint64_t assignWithTake for LimitedAvailabilityToolbarContent.IndirectOutputs(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v4 = *(void **)(a1 + 120);
  uint64_t v5 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v5;

  return a1;
}

void *type metadata accessor for LimitedAvailabilityToolbarContent.IndirectOutputs()
{
  return &unk_1ED45EC58;
}

uint64_t type metadata accessor for LimitedAvailabilityToolbarContentStorage.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in LimitedAvailabilityToolbarContentStorage<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t View.navigationBarHidden(_:)(char a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for _ContiguousArrayStorage<ToolbarPlacement>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  *(_OWORD *)(inited + 48) = 0u;
  *(void *)(inited + 64) = 0;
  *(_OWORD *)(inited + 32) = 0u;
  if (a1) {
    uint64_t v7 = 2;
  }
  else {
    uint64_t v7 = 1;
  }
  View.toolbar(_:for:)(v7, inited, a2, a3);
  swift_setDeallocating();
  return swift_arrayDestroy();
}

void type metadata accessor for _ContiguousArrayStorage<ToolbarPlacement>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement>);
    }
  }
}

uint64_t View.navigationBarTitle(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return View.navigationTitle(_:)(a1, a2, a3 & 1, a4, a5, a6, a7);
}

uint64_t View.navigationBarTitle(_:displayMode:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v24 = a8;
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationTitleKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationTitleKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F41108]);
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  long long v17 = (char *)&v22 - v16;
  LOBYTE(a5) = *a5;
  View.navigationTitle(_:)(a1, a2, a3 & 1, v23, a6, a7, (uint64_t)&v22 - v16);
  v29[0] = (_BYTE)a5;
  uint64_t v27 = a7;
  uint64_t v28 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v19 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  uint64_t v25 = WitnessTable;
  unint64_t v26 = v19;
  uint64_t v20 = swift_getWitnessTable();
  View.navigationBarTitleDisplayMode(_:)(v29, v14, v20, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t View.navigationBarTitle<A>(_:displayMode:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v18 = a5;
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationTitleKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationTitleKey>, (uint64_t)&type metadata for NavigationTitleKey, (uint64_t)&protocol witness table for NavigationTitleKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationTitleKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F41108]);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v17 - v11;
  LOBYTE(a2) = *a2;
  View.navigationTitle<A>(_:)(a1, a3, a4, (uint64_t)&v17 - v11);
  char v23 = (char)a2;
  uint64_t v21 = a4;
  uint64_t v22 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v14 = lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarKey> and conformance _PreferenceTransformModifier<A>();
  uint64_t v19 = WitnessTable;
  unint64_t v20 = v14;
  uint64_t v15 = swift_getWitnessTable();
  View.navigationBarTitleDisplayMode(_:)(&v23, v9, v15, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t View.navigationBarBanner<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v10[2] = a3;
  _OWORD v10[3] = a4;
  v10[4] = a5;
  v10[5] = a6;
  v10[6] = a1;
  v10[7] = a2;
  type metadata accessor for ToolbarItem();
  uint64_t v8 = type metadata accessor for TupleToolbarContent();
  return View.toolbar<A>(content:)((void (*)(double))partial apply for closure #1 in View.navigationBarBanner<A>(_:), (uint64_t)v10, a3, v8, a5);
}

uint64_t closure #1 in View.navigationBarBanner<A>(_:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for ToolbarItem();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v15[-v11];
  if (one-time initialization token for principal != -1) {
    swift_once();
  }
  outlined init with copy of ToolbarItemPlacement((uint64_t)&static ToolbarItemPlacement.principal, (uint64_t)v15);
  ToolbarItem<>.init(placement:content:)((uint64_t)v15, a1, a4, v9);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v13 = *(void (**)(_OWORD *, uint64_t))(v7 + 8);
  v13(v9, v6);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v12, v6, &protocol witness table for ToolbarItem<A, B>);
  return ((uint64_t (*)(unsigned char *, uint64_t))v13)(v12, v6);
}

uint64_t partial apply for closure #1 in View.navigationBarBanner<A>(_:)()
{
  return closure #1 in View.navigationBarBanner<A>(_:)(*(void (**)(uint64_t))(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t View.navigationBarBackButtonHidden(_:)()
{
  return View.preference<A>(key:value:)();
}

void View.navigationBarBackgroundColor(_:)()
{
}

BOOL static NavigationBarItem.TitleDisplayMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void NavigationBarItem.TitleDisplayMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int NavigationBarItem.TitleDisplayMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type NavigationBarItem.TitleDisplayMode and conformance NavigationBarItem.TitleDisplayMode()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationBarItem.TitleDisplayMode and conformance NavigationBarItem.TitleDisplayMode;
  if (!lazy protocol witness table cache variable for type NavigationBarItem.TitleDisplayMode and conformance NavigationBarItem.TitleDisplayMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationBarItem.TitleDisplayMode and conformance NavigationBarItem.TitleDisplayMode);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NavigationBarItem(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187ADB518);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationBarItem()
{
  return &type metadata for NavigationBarItem;
}

unsigned char *storeEnumTagSinglePayload for NavigationBarItem.TitleDisplayMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187ADB61CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_187ADB644()
{
  return swift_getWitnessTable();
}

uint64_t sub_187ADB6A8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187ADB7B4()
{
  return swift_getWitnessTable();
}

uint64_t sub_187ADB8C4()
{
  return swift_getWitnessTable();
}

uint64_t sub_187ADBA3C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187ADBBB8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187ADBC64()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<NavigationBarBackButtonHiddenKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<NavigationBarBackButtonHiddenKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<NavigationBarBackButtonHiddenKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for TransactionalPreferenceTransformModifier<NavigationTitleKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<NavigationBarBackButtonHiddenKey>, (uint64_t)&type metadata for NavigationBarBackButtonHiddenKey, (uint64_t)&protocol witness table for NavigationBarBackButtonHiddenKey, MEMORY[0x1E4F40F90]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<NavigationBarBackButtonHiddenKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationBarBackButtonHiddenKey()
{
  return &type metadata for NavigationBarBackButtonHiddenKey;
}

id UIKitPasteControl.makeUIView(context:)(uint64_t a1)
{
  type metadata accessor for UIButton.Configuration.CornerStyle?();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v25 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v26 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)v1;
  LOBYTE(a1) = *(unsigned char *)(v1 + 8);
  uint64_t v13 = *(void *)(v1 + 16);
  uint64_t v14 = *(unsigned __int8 *)(v1 + 24);
  int v15 = *(unsigned __int8 *)(v1 + 25);
  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1A70]), sel_init);
  outlined copy of Environment<Bool>.Content(v12, a1);
  specialized Environment.wrappedValue.getter(v12, a1, (uint64_t *)&v27);
  outlined consume of Environment<Bool>.Content(v12, a1);
  if (v27)
  {
    if (v27 == &type metadata for TitleAndIconLabelStyle)
    {
      uint64_t v17 = 0;
    }
    else if (v27 == &type metadata for TitleOnlyLabelStyle)
    {
      uint64_t v17 = 2;
    }
    else
    {
      if (v27 != &type metadata for IconOnlyLabelStyle) {
        goto LABEL_9;
      }
      uint64_t v17 = 1;
    }
    objc_msgSend(v16, sel_setDisplayMode_, v17);
  }
LABEL_9:
  outlined copy of Environment<CGFloat?>.Content(v13, v14, v15);
  specialized Environment.wrappedValue.getter(v13, v14 | (v15 << 8), (uint64_t)&v27);
  outlined consume of Environment<CGFloat?>.Content(v13, v14, v15);
  if (v28 == 1)
  {
    uint64_t v18 = (unsigned int *)MEMORY[0x1E4FB1218];
    switch(MEMORY[0x1E4FB1218])
    {
      case 1:
      case 3:
        goto LABEL_13;
      default:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
        outlined destroy of UIButton.Configuration.CornerStyle?((uint64_t)v5);
        break;
    }
  }
  else
  {
    uint64_t v18 = (unsigned int *)MEMORY[0x1E4FB1220];
LABEL_13:
    (*(void (**)(char *, void, uint64_t))(v7 + 104))(v5, *v18, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v5, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v25, v11, v6);
    UIPasteControlConfiguration.cornerStyle.setter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  uint64_t v19 = v26;
  outlined copy of Environment<CGFloat?>.Content(v13, v14, v15);
  specialized Environment.wrappedValue.getter(v13, v14 | (v15 << 8), (uint64_t)&v27);
  outlined consume of Environment<CGFloat?>.Content(v13, v14, v15);
  if ((v28 & 1) == 0) {
    objc_msgSend(v16, sel_setCornerRadius_, *(double *)&v27);
  }
  id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1A68]), sel_initWithConfiguration_, v16);
  objc_msgSend(v20, sel_setTarget_, v19);
  LODWORD(v21) = 1144750080;
  objc_msgSend(v20, sel_setContentHuggingPriority_forAxis_, 0, v21);
  LODWORD(v22) = 1144750080;
  objc_msgSend(v20, sel_setContentHuggingPriority_forAxis_, 1, v22);

  return v20;
}

uint64_t ButtonBorderShape.cornerRadius.getter()
{
  if (v0[8]) {
    return 0;
  }
  else {
    return *(void *)v0;
  }
}

uint64_t destroy for UIKitPasteControl(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned char *)(a1 + 25));
  outlined consume of Environment<Color?>.Content(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for UIKitPasteControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 25);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<CGFloat?>.Content(v6, v8, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 25) = v7;
  uint64_t v9 = *(void *)(a2 + 32);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<Color?>.Content(v9, v10);
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = v10;
  uint64_t v11 = *(void *)(a2 + 48);
  char v12 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(void *)(a1 + 48) = v11;
  *(unsigned char *)(a1 + 56) = v12;
  uint64_t v13 = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UIKitPasteControl(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 25);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<CGFloat?>.Content(v8, v10, v9);
  uint64_t v11 = *(void *)(a1 + 16);
  char v12 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = v8;
  uint64_t v13 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v10;
  *(unsigned char *)(a1 + 25) = v9;
  outlined consume of Environment<CGFloat?>.Content(v11, v13, v12);
  uint64_t v14 = *(void *)(a2 + 32);
  unsigned __int8 v15 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<Color?>.Content(v14, v15);
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(unsigned __int8 *)(a1 + 40);
  *(void *)(a1 + 32) = v14;
  *(unsigned char *)(a1 + 40) = v15;
  outlined consume of Environment<Color?>.Content(v16, v17);
  uint64_t v18 = *(void *)(a2 + 48);
  char v19 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v18, v19);
  uint64_t v20 = *(void *)(a1 + 48);
  char v21 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = v18;
  *(unsigned char *)(a1 + 56) = v19;
  outlined consume of Environment<Bool>.Content(v20, v21);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v22;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UIKitPasteControl(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  char v9 = *((unsigned char *)a2 + 25);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 25);
  *(void *)(a1 + 16) = a2[2];
  uint64_t v12 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 25) = v9;
  outlined consume of Environment<CGFloat?>.Content(v10, v12, v11);
  char v13 = *((unsigned char *)a2 + 40);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 40);
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = v13;
  outlined consume of Environment<Color?>.Content(v14, v15);
  char v16 = *((unsigned char *)a2 + 56);
  uint64_t v17 = *(void *)(a1 + 48);
  char v18 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = a2[6];
  *(unsigned char *)(a1 + 56) = v16;
  outlined consume of Environment<Bool>.Content(v17, v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = a2[10];
  *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
  *(void *)(a1 + 80) = v19;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIKitPasteControl(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UIKitPasteControl(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UIKitPasteControl()
{
  return &type metadata for UIKitPasteControl;
}

void UIKitPasteControl.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  type metadata accessor for UIButton.Configuration.CornerStyle?();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v46 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UIButton.Configuration.CornerStyle();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v45 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v45 - v11;
  uint64_t v13 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)v2;
  char v15 = *(unsigned char *)(v2 + 8);
  uint64_t v16 = *(void *)(v2 + 16);
  uint64_t v17 = *(unsigned __int8 *)(v2 + 24);
  int v18 = *(unsigned __int8 *)(v2 + 25);
  uint64_t v47 = *(void *)(v2 + 32);
  unsigned int v19 = *(unsigned __int8 *)(v2 + 40);
  uint64_t v20 = *(void *)(v2 + 48);
  unsigned __int8 v50 = a1;
  uint64_t v51 = v20;
  LODWORD(v20) = *(unsigned __int8 *)(v2 + 56);
  unsigned int v52 = v19;
  int v53 = v20;
  long long v54 = *(_OWORD *)(v2 + 64);
  uint64_t v48 = *(void *)(v2 + 80);
  uint64_t v49 = v13;
  id v21 = objc_msgSend(a1, sel_configuration);
  outlined copy of Environment<Bool>.Content(v14, v15);
  specialized Environment.wrappedValue.getter(v14, v15, (uint64_t *)&v55);
  outlined consume of Environment<Bool>.Content(v14, v15);
  if (!v55)
  {
    uint64_t v22 = v21;
    char v23 = v12;
    uint64_t v24 = (uint64_t)v46;
    goto LABEL_12;
  }
  if (v55 == &type metadata for TitleAndIconLabelStyle)
  {
    uint64_t v25 = 0;
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v22 = v21;
    if (v55 != &type metadata for TitleOnlyLabelStyle)
    {
      char v23 = v12;
      uint64_t v24 = (uint64_t)v46;
      if (v55 != &type metadata for IconOnlyLabelStyle) {
        goto LABEL_12;
      }
      uint64_t v25 = 1;
      goto LABEL_10;
    }
    uint64_t v25 = 2;
  }
  char v23 = v12;
  uint64_t v24 = (uint64_t)v46;
LABEL_10:
  if ((id)v25 != objc_msgSend(v22, sel_displayMode)) {
    MEMORY[0x18C112B90](0xD000000000000025, 0x8000000188331930);
  }
LABEL_12:
  outlined copy of Environment<CGFloat?>.Content(v16, v17, v18);
  uint64_t v26 = v17 | (v18 << 8);
  specialized Environment.wrappedValue.getter(v16, v26, (uint64_t)&v55);
  outlined consume of Environment<CGFloat?>.Content(v16, v17, v18);
  if (v56 == 1)
  {
    uint64_t v27 = (unsigned int *)MEMORY[0x1E4FB1218];
    switch(MEMORY[0x1E4FB1218])
    {
      case 1:
      case 3:
        goto LABEL_16;
      default:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v24, 1, 1, v7);
        outlined destroy of UIButton.Configuration.CornerStyle?(v24);
        uint64_t v29 = v49;
        char v28 = v50;
        uint64_t v30 = v47;
        uint64_t v31 = v48;
        break;
    }
  }
  else
  {
    uint64_t v27 = (unsigned int *)MEMORY[0x1E4FB1220];
LABEL_16:
    LODWORD(v46) = v26;
    (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v24, *v27, v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v24, 0, 1, v7);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v23, v24, v7);
    uint64_t v32 = v22;
    int v33 = v45;
    uint64_t v34 = v32;
    UIPasteControlConfiguration.cornerStyle.getter();
    lazy protocol witness table accessor for type UIButton.Configuration.CornerStyle and conformance UIButton.Configuration.CornerStyle();
    LOBYTE(v32) = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v8 + 8);
    v35(v33, v7);
    if ((v32 & 1) == 0) {
      MEMORY[0x18C112B90](0xD00000000000002CLL, 0x80000001883318D0);
    }
    v35(v23, v7);
    uint64_t v29 = v49;
    char v28 = v50;
    uint64_t v30 = v47;
    uint64_t v31 = v48;
    uint64_t v22 = v34;
    uint64_t v26 = v46;
  }
  outlined copy of Environment<CGFloat?>.Content(v16, v17, v18);
  specialized Environment.wrappedValue.getter(v16, v26, (uint64_t)&v55);
  outlined consume of Environment<CGFloat?>.Content(v16, v17, v18);
  if (v56)
  {
    uint64_t v37 = v52;
    char v36 = v53;
  }
  else
  {
    uint64_t v38 = v55;
    objc_msgSend(v22, sel_cornerRadius);
    uint64_t v37 = v52;
    char v36 = v53;
    if (*(double *)&v38 != v39) {
      MEMORY[0x18C112B90](0xD000000000000027, 0x8000000188331900);
    }
  }
  outlined copy of Environment<Color?>.Content(v30, v37);
  char v40 = (void *)specialized Environment.wrappedValue.getter(v30, v37);
  outlined consume of Environment<Color?>.Content(v30, v37);
  if (v40)
  {
    type metadata accessor for UIColor();
    char v40 = UIColor.init(_:)((uint64_t)v40);
  }
  uint64_t v41 = v51;
  objc_msgSend(v28, sel_setTintColor_, v40);

  outlined copy of Environment<Bool>.Content(v41, v36);
  char v42 = specialized Environment.wrappedValue.getter(v41, v36);
  outlined consume of Environment<Bool>.Content(v41, v36);
  objc_msgSend(v28, sel_setEnabled_, v42 & 1);
  uint64_t v43 = v29 + OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper;
  uint64_t v44 = *(void *)(v29 + OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper);
  *(_OWORD *)uint64_t v43 = v54;
  *(void *)(v43 + 16) = v31;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  outlined copy of PasteHelper?(v44);
  outlined consume of PasteHelper?(v44);
  PasteHelper.ConfigurationSupport.pasteHelper.didset(v44);
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of PasteHelper?(v44);
}

uint64_t protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitPasteControl@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 80);
  uint64_t v4 = (objc_class *)type metadata accessor for PasteHelper.ConfigurationSupport();
  long long v9 = *(_OWORD *)(v1 + 64);
  uint64_t v5 = (char *)objc_msgSend(objc_allocWithZone(v4), sel_init);
  uint64_t v6 = &v5[OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper];
  uint64_t v7 = *(void *)&v5[OBJC_IVAR____TtCV7SwiftUI11PasteHelper20ConfigurationSupport_pasteHelper];
  *(_OWORD *)uint64_t v6 = v9;
  *((void *)v6 + 2) = v3;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  outlined copy of PasteHelper?(v7);
  outlined consume of PasteHelper?(v7);
  PasteHelper.ConfigurationSupport.pasteHelper.didset(v7);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of PasteHelper?(v7);
  *a1 = v5;
  return result;
}

void type metadata accessor for UIButton.Configuration.CornerStyle?()
{
  if (!lazy cache variable for type metadata for UIButton.Configuration.CornerStyle?)
  {
    type metadata accessor for UIButton.Configuration.CornerStyle();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIButton.Configuration.CornerStyle?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UIButton.Configuration.CornerStyle and conformance UIButton.Configuration.CornerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type UIButton.Configuration.CornerStyle and conformance UIButton.Configuration.CornerStyle;
  if (!lazy protocol witness table cache variable for type UIButton.Configuration.CornerStyle and conformance UIButton.Configuration.CornerStyle)
  {
    type metadata accessor for UIButton.Configuration.CornerStyle();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIButton.Configuration.CornerStyle and conformance UIButton.Configuration.CornerStyle);
  }
  return result;
}

uint64_t outlined destroy of UIButton.Configuration.CornerStyle?(uint64_t a1)
{
  type metadata accessor for UIButton.Configuration.CornerStyle?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void Scene.contentDefinesWindowShadow(_:)()
{
}

void View.windowContentShape<A>(_:)()
{
}

void View.windowContentShape<A>(_:sizingBehavior:)()
{
}

void static WindowContentShapeSizingBehavior.none.getter()
{
}

void static WindowContentShapeSizingBehavior.bounds(anchor:)()
{
}

void static WindowContentShapeSizingBehavior.rect(size:anchor:)()
{
}

ValueMetadata *type metadata accessor for WindowContentShapeSizingBehavior()
{
  return &type metadata for WindowContentShapeSizingBehavior;
}

uint64_t sub_187ADCDE8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_187ADCDF0(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t getEnumTagSinglePayload for WindowContentShapeSizingBehavior(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WindowContentShapeSizingBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for WindowContentShapeSizingBehavior.Value(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 1u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t destructiveInjectEnumTag for WindowContentShapeSizingBehavior.Value(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 2;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for WindowContentShapeSizingBehavior.Value()
{
  return &type metadata for WindowContentShapeSizingBehavior.Value;
}

void View.textInputSuggestions<A>(_:)()
{
}

void View.textInputSuggestions<A, B, C>(_:id:content:)()
{
}

void View.textInputSuggestions<A, B>(_:content:)()
{
}

uint64_t sub_187ADCF08()
{
  return swift_getWitnessTable();
}

uint64_t sub_187ADCF9C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187ADD084()
{
  return swift_getWitnessTable();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_nTm(a1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v4 = a1 + 48;
    do
    {
      uint64_t v5 = *(void *)(v4 - 16);
      uint64_t v6 = *(void *)(v4 - 8);
      outlined copy of TabCustomizationID.Base();
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      if (v8 >= v7 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      }
      v4 += 24;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v5;
      *(void *)(v9 + 40) = v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t AuxiliaryContent<>.init(of:content:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t AuxiliaryContent<>._identifiedView.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 24);
  double v5 = MEMORY[0x1F4188790](a1);
  unint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v8 + 16))(v7, v5);
  return OptionalFormatInputToString.init(format:)(v7, v4, a3);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> AuxiliaryContent<A, B>(uint64_t a1, uint64_t a2)
{
  return AuxiliaryContent<>._identifiedView.getter(a1, a2, *(void *)(a2 - 16));
}

uint64_t TabView.init<A>(selection:sidebarVisibility:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  v25[1] = a5;
  uint64_t v26 = a4;
  uint64_t v27 = a3;
  uint64_t v28 = a2;
  uint64_t v29 = a10;
  MEMORY[0x1F4188790](a1);
  char v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v17 = *(void *)(v16 - 8);
  int v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
  v18(a8, 1, 1, v16);
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a8, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a8, a1, v16);
  uint64_t v20 = ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v18)(a8, 0, 1, v16);
  v26(v20);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, v16);
  uint64_t v30 = a6;
  uint64_t v31 = a7;
  uint64_t v32 = a9;
  uint64_t v33 = v29;
  uint64_t v21 = type metadata accessor for TabContentBuilder.Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v30 = a6;
  uint64_t v31 = v21;
  uint64_t v32 = a9;
  uint64_t v33 = WitnessTable;
  uint64_t v23 = type metadata accessor for TabView();
  return PickerBuilder.Content.init(_:)((uint64_t)v15, a7, a8 + *(int *)(v23 + 52));
}

uint64_t TabView.init<A>(sidebarVisibility:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, void *a4@<X8>)
{
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a4 = 0;
  a4[1] = 0;
  v10(v7);
  swift_release();
  swift_release();
  uint64_t v11 = MEMORY[0x1E4FBC248];
  uint64_t v17 = MEMORY[0x1E4FBC248];
  uint64_t v18 = a2;
  uint64_t v12 = MEMORY[0x1E4FBC258];
  uint64_t v19 = MEMORY[0x1E4FBC258];
  uint64_t v20 = a3;
  uint64_t v13 = type metadata accessor for TabContentBuilder.Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = v11;
  uint64_t v18 = v13;
  uint64_t v19 = v12;
  uint64_t v20 = WitnessTable;
  uint64_t v15 = type metadata accessor for TabView();
  return PickerBuilder.Content.init(_:)((uint64_t)v9, a2, (uint64_t)a4 + *(int *)(v15 + 52));
}

uint64_t static AdaptiveTabViewStyle._makeView<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t type metadata accessor for AdaptiveTabViewStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static AdaptiveTabViewStyle._makeViewList<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

uint64_t AdaptiveTabViewStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TabViewValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t AdaptiveTabViewStyle.Body.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a4;
  type metadata accessor for Binding();
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t v34 = &type metadata for AdaptiveTabViewStyle;
  uint64_t v35 = a2;
  char v36 = &protocol witness table for AdaptiveTabViewStyle;
  uint64_t v37 = a3;
  uint64_t v10 = type metadata accessor for _TabViewValue();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = type metadata accessor for AdaptableTabViewRoot();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v25 - v14;
  uint64_t v25 = type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v16 = type metadata accessor for _VariadicView.Tree();
  uint64_t v26 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v25 - v17;
  AdaptiveTabViewStyle.Body.base.getter((uint64_t)v12);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v27);
  uint64_t v19 = default argument 0 of AdaptableTabViewRoot.init(clientSidebarVisibility:selection:adaptationMode:sidebarOverflowMenuItems:)();
  AdaptableTabViewRoot.init(clientSidebarVisibility:selection:adaptationMode:sidebarOverflowMenuItems:)(v19, v21, v20 & 0x1FF, (uint64_t)v9, 1, 0, 255, (uint64_t)v15);
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  int v31 = a1;
  _VariadicView.Tree.init(_:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v33 = &protocol witness table for TabViewStyleConfiguration<A>.Content;
  uint64_t v22 = swift_getWitnessTable();
  unint64_t v23 = lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput();
  View.input<A>(_:)((uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v16, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, v22, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v18, v16);
}

uint64_t closure #1 in AdaptiveTabViewStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = &type metadata for AdaptiveTabViewStyle;
  v10[1] = a2;
  void v10[2] = &protocol witness table for AdaptiveTabViewStyle;
  _OWORD v10[3] = a3;
  uint64_t v3 = type metadata accessor for _TabViewValue();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v10 - v5;
  AdaptiveTabViewStyle.Body.base.getter((uint64_t)v10 - v5);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v7 = type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v8 = static ViewBuilder.buildExpression<A>(_:)(v7);
  return static ViewBuilder.buildExpression<A>(_:)(v8);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AdaptiveTabViewStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AdaptableTabViewRoot();
  type metadata accessor for TabViewStyleConfiguration.Content();
  type metadata accessor for _VariadicView.Tree();
  _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInAdaptableTabViewContextInput>, (uint64_t (*)(void))lazy protocol witness table accessor for type IsInAdaptableTabViewContextInput and conformance IsInAdaptableTabViewContextInput, (uint64_t)&type metadata for IsInAdaptableTabViewContextInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance AdaptiveTabViewStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AdaptiveTabViewStyle.Body.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t TabGroup<>._identifiedView.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for TabSection();
  return TabSection<>._identifiedView.getter(v8, a1, a2, a3, a4);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> TabGroup<A, B, C, D>@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  return TabGroup<>._identifiedView.getter(*(void *)(a1 - 8), *(void *)(a1 - 16), *(void *)(a1 - 24), a2);
}

uint64_t TabGroup<>.init<>(content:header:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v14(v11);
  a1(v15);
  return TabSection.init(header:content:footer:)((uint64_t)v13, (uint64_t)v9, v16, a2, a3, MEMORY[0x1E4F417F8], a4);
}

uint64_t TabGroup<>.init<>(content:header:compact:)@<X0>(uint64_t (*a1)(uint64_t)@<X0>, void (*a2)(uint64_t)@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8)
{
  void v25[2] = a3;
  uint64_t v26 = a2;
  v25[1] = a8;
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  __int16 v20 = (char *)v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v21(v18);
  uint64_t v23 = a1(v22);
  v26(v23);
  return TabSection.init(header:content:footer:)((uint64_t)v20, (uint64_t)v16, (uint64_t)v13, a4, a5, a7, a6);
}

uint64_t TabGroup<>.init<>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v8(v5);
  return TabSection.init(header:content:footer:)(v9, (uint64_t)v7, v10, MEMORY[0x1E4F417F8], a2, MEMORY[0x1E4F417F8], a3);
}

uint64_t TabGroup<>.init<A>(_:image:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return TabGroup<>.init<A>(_:image:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void *(*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t TabGroup<>.init<A>(_:image:content:compact:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void *)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return TabGroup<>.init<A>(_:image:content:compact:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (void *(*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t TabGroup<>.init<>(_:image:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X6>, uint64_t a3@<X7>, uint64_t a4@<X8>, uint64_t a5, uint64_t a6)
{
  v19[1] = a3;
  __int16 v20 = a2;
  uint64_t v21 = a4;
  v19[0] = a6;
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v8 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13 & 1;
  uint64_t v15 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_bridgeObjectRelease();
  v22[0] = v8;
  v22[1] = v10;
  v22[2] = v14;
  void v22[3] = v12;
  unint64_t v22[4] = v15;
  char v23 = 1;
  v20(v16);
  return TabSection.init(header:content:footer:)((uint64_t)v22, (uint64_t)v7, v17, (uint64_t)&type metadata for DefaultTabLabel, a5, MEMORY[0x1E4F417F8], v21);
}

uint64_t TabGroup<>.init<>(_:image:content:compact:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t (*a3)(uint64_t)@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>, void (*a6)(uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v29 = a4;
  uint64_t v30 = a3;
  v26[1] = a2;
  uint64_t v31 = a5;
  uint64_t v32 = a10;
  uint64_t v27 = a8;
  _OWORD v26[2] = a7;
  uint64_t v28 = a6;
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20 & 1;
  uint64_t v22 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = swift_bridgeObjectRelease();
  v33[0] = v15;
  v33[1] = v17;
  void v33[2] = v21;
  v33[3] = v19;
  uint64_t v33[4] = v22;
  char v34 = 1;
  uint64_t v24 = v30(v23);
  v28(v24);
  return TabSection.init(header:content:footer:)((uint64_t)v33, (uint64_t)v14, (uint64_t)v11, (uint64_t)&type metadata for DefaultTabLabel, v27, a9, v31);
}

uint64_t TabGroup<>.init<A>(_:systemImage:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return TabGroup<>.init<A>(_:image:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void *(*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t TabGroup<>.init<A>(_:image:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, void *(*a13)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v32 = a9;
  uint64_t v33 = a7;
  uint64_t v30 = a5;
  uint64_t v31 = a4;
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *(void *)(v20 - 8);
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v30 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v25, a1, v26, v23);
  uint64_t v27 = a13(&v34, v25, a2, a3, a8, a12);
  uint64_t v35 = v35;
  char v36 = 1;
  v31(v27);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a1, a8);
  return TabSection.init(header:content:footer:)((uint64_t)&v34, (uint64_t)v19, v28, (uint64_t)&type metadata for DefaultTabLabel, a6, MEMORY[0x1E4F417F8], v32);
}

uint64_t TabGroup<>.init<A>(_:systemImage:content:compact:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void *)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  return TabGroup<>.init<A>(_:image:content:compact:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, (void *(*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t TabGroup<>.init<A>(_:image:content:compact:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(void *)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *(*a17)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v33 = a8;
  uint64_t v34 = a5;
  uint64_t v36 = a7;
  uint64_t v37 = a6;
  uint64_t v35 = a4;
  uint64_t v32 = a3;
  uint64_t v38 = a9;
  uint64_t v39 = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  double v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(a12 - 8);
  double v26 = MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v32 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v28, a1, a12, v26);
  uint64_t v29 = a17(&v40, v28, a2, v32, a12, a16);
  uint64_t v41 = v41;
  char v42 = 1;
  uint64_t v30 = v35(v29);
  v37(v30);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a1, a12);
  return TabSection.init(header:content:footer:)((uint64_t)&v40, (uint64_t)v23, (uint64_t)v20, (uint64_t)&type metadata for DefaultTabLabel, v33, a10, v38);
}

uint64_t TabGroup<>.init<>(_:systemImage:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, void (*a4)(uint64_t)@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8)
{
  uint64_t v24 = a5;
  uint64_t v25 = a4;
  uint64_t v26 = a6;
  uint64_t v23 = a7;
  v22[1] = a8;
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = Text.init(_:tableName:bundle:comment:)();
  v22[0] = v13;
  uint64_t v15 = v14;
  uint64_t v17 = v16 & 1;
  _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a2;
  *(void *)(v18 + 24) = a3;
  *(_DWORD *)(v18 + 32) = 0;
  *(unsigned char *)(v18 + 36) = 1;
  *(_OWORD *)(v18 + 40) = xmmword_18834C6B0;
  *(void *)(v18 + 56) = a2;
  *(void *)(v18 + 64) = a3;
  *(_OWORD *)(v18 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v18 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = swift_bridgeObjectRelease();
  v27[0] = v12;
  v27[1] = v22[0];
  void v27[2] = v17;
  v27[3] = v15;
  unsigned char v27[4] = v18;
  char v28 = 1;
  v25(v19);
  return TabSection.init(header:content:footer:)((uint64_t)v27, (uint64_t)v11, v20, (uint64_t)&type metadata for DefaultTabLabel, v23, MEMORY[0x1E4F417F8], v26);
}

uint64_t TabGroup<>.init<>(_:systemImage:content:compact:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t (*a4)(uint64_t)@<X6>, uint64_t a5@<X7>, uint64_t a6@<X8>, void (*a7)(uint64_t), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v34 = a5;
  uint64_t v35 = a4;
  uint64_t v30 = a2;
  uint64_t v37 = a6;
  uint64_t v38 = a11;
  uint64_t v32 = a9;
  uint64_t v36 = a10;
  uint64_t v31 = a8;
  uint64_t v33 = a7;
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  char v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v19 = v18;
  uint64_t v29 = v20;
  uint64_t v22 = v21 & 1;
  _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v23 = swift_allocObject();
  uint64_t v24 = v30;
  *(void *)(v23 + 16) = v30;
  *(void *)(v23 + 24) = a3;
  *(_DWORD *)(v23 + 32) = 0;
  *(unsigned char *)(v23 + 36) = 1;
  *(_OWORD *)(v23 + 40) = xmmword_18834C6B0;
  *(void *)(v23 + 56) = v24;
  *(void *)(v23 + 64) = a3;
  *(_OWORD *)(v23 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v23 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = swift_bridgeObjectRelease();
  v39[0] = v17;
  v39[1] = v19;
  _OWORD v39[2] = v22;
  _OWORD v39[3] = v29;
  v39[4] = v23;
  char v40 = 1;
  uint64_t v26 = v35(v25);
  v33(v26);
  return TabSection.init(header:content:footer:)((uint64_t)v39, (uint64_t)v16, (uint64_t)v13, (uint64_t)&type metadata for DefaultTabLabel, v32, v36, v37);
}

uint64_t TabContent.customizationBehavior(_:for:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6 = *a1;
  uint64_t v7 = specialized Sequence.compactMap<A>(_:)(a2);
  v9[0] = v6;
  TabContent.customizationBehavior(_:for:)(v9, (uint64_t)v7, a3, a4);

  return swift_bridgeObjectRelease();
}

uint64_t TabContent.visibility(_:for:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = specialized Sequence.compactMap<A>(_:)(a2);
  TabContent.defaultVisibility(_:for:)(a1, (uint64_t)v7, a3, a4);

  return swift_bridgeObjectRelease();
}

uint64_t View.tabViewSidebarCustomization(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a3;
  uint64_t v5 = type metadata accessor for TabViewCustomizationModifier();
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for Binding<TabSidebarCustomization>?(0, &lazy cache variable for type metadata for Binding<TabSidebarCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabSidebarCustomization>, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v24 - v10);
  type metadata accessor for Binding<TabSidebarCustomization>?(0, &lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>, v8);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (uint64_t *)((char *)&v24 - v13);
  outlined init with copy of Binding<TabSidebarCustomization>?(a1, (uint64_t)v11, &lazy cache variable for type metadata for Binding<TabSidebarCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabSidebarCustomization>, v8);
  type metadata accessor for Binding<TabSidebarCustomization>(0);
  uint64_t v16 = v15;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v11, 1, v15) == 1)
  {
    _sypSgWOhTm_4((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for Binding<TabSidebarCustomization>?, (uint64_t)type metadata accessor for Binding<TabSidebarCustomization>, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Binding<TabSidebarCustomization>?);
    type metadata accessor for Binding<TabViewCustomization>(0);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v14, 1, 1, v17);
  }
  else
  {
    uint64_t v18 = (uint64_t)v11 + *(int *)(v16 + 32);
    type metadata accessor for Binding<TabViewCustomization>(0);
    uint64_t v20 = v19;
    outlined init with copy of TabViewCustomization(v18, (uint64_t)v14 + *(int *)(v19 + 32), (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
    lazy protocol witness table accessor for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization();
    uint64_t v21 = dispatch thunk of AnyLocation.projecting<A>(_:)();
    *uint64_t v14 = *v11;
    v14[1] = v21;
    swift_retain();
    outlined destroy of TabViewCustomizationModifier((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Binding<TabSidebarCustomization>);
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v14, 0, 1, v20);
  }
  uint64_t v22 = MEMORY[0x1E4FBB718];
  outlined init with copy of Binding<TabSidebarCustomization>?((uint64_t)v14, (uint64_t)v7, &lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>, MEMORY[0x1E4FBB718]);
  MEMORY[0x18C113660](v7, a2, v5, v24);
  outlined destroy of TabViewCustomizationModifier((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for TabViewCustomizationModifier);
  return _sypSgWOhTm_4((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for Binding<TabViewCustomization>?, (uint64_t)type metadata accessor for Binding<TabViewCustomization>, v22, (uint64_t (*)(void))type metadata accessor for Binding<TabSidebarCustomization>?);
}

void type metadata accessor for Binding<TabSidebarCustomization>(uint64_t a1)
{
}

uint64_t type metadata accessor for TabSidebarCustomization()
{
  uint64_t result = type metadata singleton initialization cache for TabSidebarCustomization;
  if (!type metadata singleton initialization cache for TabSidebarCustomization) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance TabSidebarCustomization.ToTabViewCustomization@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of TabViewCustomization(a1, a2, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
}

unint64_t lazy protocol witness table accessor for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization()
{
  unint64_t result = lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.ToTabViewCustomization and conformance TabSidebarCustomization.ToTabViewCustomization);
  }
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance TabSidebarCustomization.ToTabViewCustomization(uint64_t a1, uint64_t a2)
{
  return outlined assign with copy of TabViewCustomization(a2, a1);
}

unint64_t TabSidebarCustomization.init()@<X0>(uint64_t a1@<X8>)
{
  UUID.init()();
  uint64_t v2 = type metadata accessor for TabViewCustomization();
  uint64_t v3 = *(int *)(v2 + 20);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + v3) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v5 = *(int *)(v2 + 24);
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v4);
  *(void *)(a1 + v5) = result;
  return result;
}

uint64_t TabSidebarCustomization.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + *(int *)(type metadata accessor for TabViewCustomization() + 20));
  if (!*(void *)(v5 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, 0);
  uint64_t v7 = 0;
  if (v8) {
    uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 + 56) + 2 * v6);
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t TabSidebarCustomization.subscript.setter(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return TabViewCustomization.subscript.setter(a1, a2, a3, 0);
}

uint64_t (*TabSidebarCustomization.subscript.modify(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = v3;
  *(void *)a1 = a2;
  uint64_t v7 = *(void *)(v3 + *(int *)(type metadata accessor for TabViewCustomization() + 20));
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, 0);
    char v9 = 0;
    if (v10) {
      char v9 = *(unsigned char *)(*(void *)(v7 + 56) + 2 * v8);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v9 = 0;
  }
  *(unsigned char *)(a1 + 24) = v9;
  return TabSidebarCustomization.subscript.modify;
}

uint64_t TabSidebarCustomization.subscript.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)a1;
  unsigned __int8 v3 = *(unsigned char *)(a1 + 24);
  swift_bridgeObjectRetain();
  return TabViewCustomization.subscript.setter(v3, v2, v1, 0);
}

uint64_t TabSidebarCustomization.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t result = type metadata accessor for TabViewCustomization();
  uint64_t v8 = *(void *)(v3 + *(int *)(result + 24));
  if (!*(void *)(v8 + 16)) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain_n();
  unint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, 0);
  if ((v10 & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease_n();
LABEL_13:
    *a3 = 0;
    return result;
  }
  uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease_n();
  if (!*(void *)(v11 + 16))
  {
    uint64_t result = swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized _ArrayProtocol.filter(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_nTm(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  int64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = MEMORY[0x1E4FBC860];
  if (v15)
  {
    uint64_t v23 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    uint64_t v16 = v23;
    uint64_t v17 = (uint64_t *)(v14 + 40);
    do
    {
      uint64_t v19 = *(v17 - 1);
      uint64_t v18 = *v17;
      unint64_t v21 = *(void *)(v23 + 16);
      unint64_t v20 = *(void *)(v23 + 24);
      swift_bridgeObjectRetain();
      if (v21 >= v20 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1);
      }
      v17 += 2;
      *(void *)(v23 + 16) = v21 + 1;
      uint64_t v22 = v23 + 24 * v21;
      *(void *)(v22 + 32) = v19;
      *(void *)(v22 + 40) = v18;
      *(unsigned char *)(v22 + 48) = 0;
      --v15;
    }
    while (v15);
  }
  *a3 = v16;
  return swift_bridgeObjectRelease();
}

uint64_t key path setter for TabSidebarCustomization.subscript(groupID:) : TabSidebarCustomization(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v6 = *a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return TabSidebarCustomization.subscript.setter(&v6, v3, v4);
}

uint64_t TabSidebarCustomization.subscript.setter(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*a1) {
    uint64_t v6 = *a1;
  }
  else {
    uint64_t v6 = MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v6 + 16))
  {
    uint64_t v7 = *(int *)(type metadata accessor for TabViewCustomization() + 24);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *(void *)(v3 + v7);
    *(void *)(v3 + v7) = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, a2, a3, 0, isUniquelyReferenced_nonNull_native);
    *(void *)(v3 + v7) = v10;
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for TabViewCustomization();
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized __RawDictionaryStorage.find<A>(_:), (void (*)(void, void, void))outlined consume of TabCustomizationID.Base, (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t (*TabSidebarCustomization.subscript.modify(void *a1, uint64_t a2, uint64_t a3))(uint64_t *a1, char a2)
{
  a1[2] = a3;
  a1[3] = v3;
  a1[1] = a2;
  TabSidebarCustomization.subscript.getter(a2, a3, a1);
  return TabSidebarCustomization.subscript.modify;
}

uint64_t TabSidebarCustomization.subscript.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1];
  if (a2)
  {
    uint64_t v5 = *a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    TabSidebarCustomization.subscript.setter(&v5, v3, v2);
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *a1;
    swift_bridgeObjectRetain();
    return TabSidebarCustomization.subscript.setter(&v5, v3, v2);
  }
}

Swift::Void __swiftcall TabSidebarCustomization.reset()()
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  unint64_t v2 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v3 = type metadata accessor for TabViewCustomization();
  uint64_t v4 = *(int *)(v3 + 20);
  swift_bridgeObjectRelease();
  *(void *)(v0 + v4) = v2;
  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(v1);
  uint64_t v6 = *(int *)(v3 + 24);
  swift_bridgeObjectRelease();
  *(void *)(v0 + v6) = v5;
}

Swift::Void __swiftcall TabSidebarCustomization.resetVisibility()()
{
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v2 = *(int *)(type metadata accessor for TabViewCustomization() + 20);
  swift_bridgeObjectRelease();
  *(void *)(v0 + v2) = v1;
}

Swift::Void __swiftcall TabSidebarCustomization.resetGroupOrder(for:)(Swift::String a1)
{
  uint64_t v2 = v1;
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  uint64_t v5 = *(int *)(type metadata accessor for TabViewCustomization() + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object, 0);
  LOBYTE(countAndFlagsBits) = v7;
  swift_bridgeObjectRelease();
  if (countAndFlagsBits)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *(void *)(v2 + v5);
    *(void *)(v2 + v5) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
    outlined consume of TabCustomizationID.Base();
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *(void *)(v2 + v5) = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall TabSidebarCustomization.resetGroupOrder()()
{
  unint64_t v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v2 = *(int *)(type metadata accessor for TabViewCustomization() + 24);
  swift_bridgeObjectRelease();
  *(void *)(v0 + v2) = v1;
}

BOOL static TabSidebarCustomization.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (static UUID.== infix(_:_:)())
  {
    uint64_t v4 = type metadata accessor for TabViewCustomization();
    if (specialized static Dictionary<>.== infix(_:_:)(*(void *)(a1 + *(int *)(v4 + 20)), *(void *)(a2 + *(int *)(v4 + 20))) & 1) != 0&& (specialized static Dictionary<>.== infix(_:_:)(*(void *)(a1 + *(int *)(v4 + 24)), *(void *)(a2 + *(int *)(v4 + 24))))
    {
      return 1;
    }
  }
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance TabSidebarCustomization.CodingKeys()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TabSidebarCustomization.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized TabSidebarCustomization.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabSidebarCustomization.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabSidebarCustomization.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t TabSidebarCustomization.encode(to:)(void *a1)
{
  _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabSidebarCustomization.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys, (uint64_t)&unk_1ED440B58, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for TabViewCustomization();
  lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (void (*)(uint64_t))type metadata accessor for TabViewCustomization);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t TabSidebarCustomization.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v3 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1F4188790](v3);
  uint64_t v22 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabSidebarCustomization.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys, (uint64_t)&unk_1ED440B58, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v21 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = type metadata accessor for TabSidebarCustomization();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  uint64_t v12 = *(int *)(v3 + 20);
  uint64_t v13 = MEMORY[0x1E4FBC860];
  *(void *)&v11[v12] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v14 = *(int *)(v3 + 24);
  *(void *)&v11[v14] = specialized Dictionary.init(dictionaryLiteral:)(v13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys();
  uint64_t v15 = v23;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v15)
  {
    uint64_t v16 = v21;
    lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (void (*)(uint64_t))type metadata accessor for TabViewCustomization);
    uint64_t v17 = (uint64_t)v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    outlined assign with take of TabViewCustomization(v17, (uint64_t)v11);
    outlined init with copy of TabViewCustomization((uint64_t)v11, v20, (uint64_t (*)(void))type metadata accessor for TabSidebarCustomization);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return outlined destroy of TabViewCustomizationModifier((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for TabSidebarCustomization);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TabSidebarCustomization(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  if (static UUID.== infix(_:_:)())
  {
    uint64_t v4 = type metadata accessor for TabViewCustomization();
    if (specialized static Dictionary<>.== infix(_:_:)(*(void *)(a1 + *(int *)(v4 + 20)), *(void *)(a2 + *(int *)(v4 + 20))) & 1) != 0&& (specialized static Dictionary<>.== infix(_:_:)(*(void *)(a1 + *(int *)(v4 + 24)), *(void *)(a2 + *(int *)(v4 + 24))))
    {
      return 1;
    }
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance TabSidebarCustomization@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return TabSidebarCustomization.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabSidebarCustomization(void *a1)
{
  _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabSidebarCustomization.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys, (uint64_t)&unk_1ED440B58, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for TabViewCustomization();
  lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization(&lazy protocol witness table cache variable for type TabViewCustomization and conformance TabViewCustomization, (void (*)(uint64_t))type metadata accessor for TabViewCustomization);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t TabGroupCustomizationEntry.childrenOrder.getter()
{
  if (!*(void *)(*(void *)v0 + 16)) {
    return 0;
  }
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = specialized _ArrayProtocol.filter(_:)(v1);
  swift_bridgeObjectRelease();
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI18TabCustomizationIDVG_SSs5NeverOTg503_s7d4UI28f7SectionG93EntryV11clientOrderSaySSGSgvgSSAA0cE2IDVcfu0_32e1885d3bbc99997a9c2787f67e5aae26AHSSTf3nnnpk_nTf1cn_nTm(v2);
  swift_bridgeObjectRelease();
  return v3;
}

void TabGroupCustomizationEntry.hash(into:)()
{
  uint64_t v1 = *v0;
  Swift::UInt v2 = *(void *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = (unsigned __int8 *)(v1 + 48);
    do
    {
      unsigned int v4 = *v3;
      v3 += 24;
      Hasher._combine(_:)(v4);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of TabCustomizationID.Base();
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
}

uint64_t static TabGroupCustomizationEntry.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TabGroupCustomizationEntry.CodingKeys()
{
  return 0x6E6572646C696863;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TabGroupCustomizationEntry.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E6572646C696863 && a2 == 0xEB00000000734449)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabGroupCustomizationEntry.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TabGroupCustomizationEntry.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t TabGroupCustomizationEntry.encode(to:)(void *a1)
{
  _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(0, &lazy cache variable for type metadata for KeyedEncodingContainer<TabGroupCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys, (uint64_t)&unk_1ED44C870, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  char v7 = (char *)v10 - v6;
  uint64_t v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  _OWORD v10[3] = v8;
  type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for [TabCustomizationID], (uint64_t)&type metadata for TabCustomizationID, MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type [TabCustomizationID] and conformance <A> [A](&lazy protocol witness table cache variable for type [TabCustomizationID] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int TabGroupCustomizationEntry.hashValue.getter()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t TabGroupCustomizationEntry.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v12 = a2;
  _s7SwiftUI21ViewInputFlagModifierVyAA016IsInAdaptableTabc7ContextD0VGMaTm_0(0, &lazy cache variable for type metadata for KeyedDecodingContainer<TabGroupCustomizationEntry.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys, (uint64_t)&unk_1ED44C870, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v9 = v12;
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for [TabCustomizationID], (uint64_t)&type metadata for TabCustomizationID, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [TabCustomizationID] and conformance <A> [A](&lazy protocol witness table cache variable for type [TabCustomizationID] and conformance <A> [A], (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *uint64_t v9 = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TabGroupCustomizationEntry@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return TabGroupCustomizationEntry.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TabGroupCustomizationEntry(void *a1)
{
  return TabGroupCustomizationEntry.encode(to:)(a1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TabGroupCustomizationEntry()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TabGroupCustomizationEntry()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  specialized Array<A>.hash(into:)((uint64_t)v3, v1);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TabGroupCustomizationEntry(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t SceneStorage.init<A>(wrappedValue:_:store:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  type metadata accessor for Binding<TabSidebarCustomization>?(0, &lazy cache variable for type metadata for SceneStorage<TabSidebarCustomization>, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for SceneStorage);
  uint64_t v10 = v9;
  a5[2] = 0;
  a5[3] = 0;
  *(void *)((char *)a5 + *(int *)(v9 + 36)) = 0;
  *a5 = a2;
  a5[1] = a3;
  outlined init with take of TabSidebarCustomization(a1, (uint64_t)a5 + *(int *)(v9 + 32), (uint64_t (*)(void))type metadata accessor for TabSidebarCustomization);
  type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(0, &lazy cache variable for type metadata for TransformBox<TabSidebarCustomizationTransform>, (uint64_t)&unk_1ED45D7D8, (uint64_t)&protocol witness table for TabSidebarCustomizationTransform, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransformBox);
  uint64_t result = swift_allocObject();
  *(void *)((char *)a5 + *(int *)(v10 + 40)) = result;
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  type metadata accessor for SceneStorage<TabViewCustomization>(0, &lazy cache variable for type metadata for SceneStorage<TabViewCustomization>, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for SceneStorage);
  uint64_t v10 = v9;
  a5[2] = 0;
  a5[3] = 0;
  *(void *)((char *)a5 + *(int *)(v9 + 36)) = 0;
  *a5 = a2;
  a5[1] = a3;
  outlined init with take of TabViewCustomization(a1, (uint64_t)a5 + *(int *)(v9 + 32));
  type metadata accessor for TransformBox<TabViewCustomizationTransform>();
  uint64_t result = swift_allocObject();
  *(void *)((char *)a5 + *(int *)(v10 + 40)) = result;
  return result;
}

void *AppStorage.init<A>(wrappedValue:_:store:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for TabSidebarCustomization();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v16 - v12;
  outlined init with copy of TabViewCustomization(a1, (uint64_t)&v16 - v12, (uint64_t (*)(void))type metadata accessor for TabSidebarCustomization);
  outlined init with copy of TabViewCustomization((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TabSidebarCustomization);
  type metadata accessor for Binding<TabSidebarCustomization>?(0, &lazy cache variable for type metadata for UserDefaultLocation<TabSidebarCustomization>, (uint64_t (*)(uint64_t))type metadata accessor for TabSidebarCustomization, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  uint64_t v14 = specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, (uint64_t)&unk_1ED45D7D8, (uint64_t)&protocol witness table for TabSidebarCustomizationTransform, a4, (uint64_t)v10, 0);
  outlined destroy of TabViewCustomizationModifier((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TabSidebarCustomization);
  outlined destroy of TabViewCustomizationModifier(a1, (uint64_t (*)(void))type metadata accessor for TabSidebarCustomization);
  return v14;
}

{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v16;

  uint64_t v8 = type metadata accessor for TabViewCustomization();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v16 - v12;
  _s7SwiftUI20TabViewCustomizationVWOcTm_0(a1, (uint64_t)&v16 - v12, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
  _s7SwiftUI20TabViewCustomizationVWOcTm_0((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
  type metadata accessor for SceneStorage<TabViewCustomization>(0, &lazy cache variable for type metadata for UserDefaultLocation<TabViewCustomization>, (uint64_t (*)(uint64_t))type metadata accessor for TabViewCustomization, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for UserDefaultLocation);
  swift_allocObject();
  uint64_t v14 = specialized UserDefaultLocation.init(key:transform:store:defaultValue:base:)(a2, a3, (uint64_t)&unk_1ED457130, (uint64_t)&protocol witness table for TabViewCustomizationTransform, a4, (uint64_t)v10, 0);
  outlined destroy of TabViewCustomization((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
  outlined destroy of TabViewCustomization(a1, (uint64_t (*)(void))type metadata accessor for TabViewCustomization);
  return v14;
}

uint64_t TabSidebarCustomizationTransform.readValue(from:key:read:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, unsigned char *a4@<X3>, uint64_t a5@<X8>)
{
  *a4 = 1;
  swift_bridgeObjectRetain();
  AnyHashable.init<A>(_:)();
  if (*(void *)(a1 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v12), (v8 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(a1 + 56) + 32 * v7, (uint64_t)&v13);
  }
  else
  {
    long long v13 = 0u;
    long long v14 = 0u;
  }
  outlined destroy of AnyHashable((uint64_t)v12);
  if (*((void *)&v14 + 1))
  {
    uint64_t result = swift_dynamicCast();
    if (result)
    {
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      JSONDecoder.init()();
      *(void *)(a5 + 24) = type metadata accessor for TabSidebarCustomization();
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)a5);
      lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization(&lazy protocol witness table cache variable for type TabSidebarCustomization and conformance TabSidebarCustomization, (void (*)(uint64_t))type metadata accessor for TabSidebarCustomization);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      outlined consume of Data._Representation(a2, a3);
      return swift_release();
    }
  }
  else
  {
    uint64_t result = _sypSgWOhTm_4((uint64_t)&v13, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [TabCustomizationID]);
  }
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  return result;
}

void static TabSidebarCustomizationTransform.readValue(from:key:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6 = (void *)MEMORY[0x18C115780](a2, a3);
  id v7 = objc_msgSend(a1, sel_dataForKey_, v6);

  if (v7)
  {
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v10 = v9;

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    *(void *)(a4 + 24) = type metadata accessor for TabSidebarCustomization();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)a4);
    lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization(&lazy protocol witness table cache variable for type TabSidebarCustomization and conformance TabSidebarCustomization, (void (*)(uint64_t))type metadata accessor for TabSidebarCustomization);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v8, v10);
    swift_release();
  }
  else
  {
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
}

uint64_t TabContent.pinned(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = a1;
  return TabContent.tabPlacement(_:)(&v4, a2, a3);
}

uint64_t TabContent.sidebarOnly(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1) {
    char v3 = 2;
  }
  else {
    char v3 = 0;
  }
  char v5 = v3;
  return TabContent.tabPlacement(_:)(&v5, a2, a3);
}

void static TabViewContentDisplayMode.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t View.tabViewMode(content:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4 = *a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for ContentModeModifier, a3);
}

void static TabViewContentDisplayMode.balanced.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static TabViewContentDisplayMode.prominentDetail.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

BOOL static TabViewContentDisplayMode.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t EnvironmentValues.tabContentMode.setter()
{
  type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContentModeModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContentModeModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance ContentModeModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ContentModeModifier()
{
  lazy protocol witness table accessor for type ContentModeModifier and conformance ContentModeModifier();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t EnvironmentValues.tabContentMode.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>, (uint64_t)&type metadata for TabViewContentDisplayMode.Key, (uint64_t)&protocol witness table for TabViewContentDisplayMode.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TabViewContentDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t Tab<>.init<>(systemItem:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (*(uint64_t (**)(char *, double))(v14 + 16))(v18, v16);
  a3(v19);
  Tab.init<>(value:content:systemItem:)((uint64_t)v18, (uint64_t)v12, a4, a5, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a2, a4);
}

uint64_t Tab<>.init<A>(systemItem:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Optional();
  v14.n128_f64[0] = MEMORY[0x1F4188790](v13);
  double v16 = (char *)&v20 - v15;
  uint64_t v17 = *(void *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))((char *)&v20 - v15, a2, a5, v14);
  uint64_t v18 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, a5);
  a3(v18);
  Tab.init<>(value:content:systemItem:)((uint64_t)v16, (uint64_t)v12, v13, a4, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a2, a5);
}

uint64_t Tab<>.init<>(systemItem:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, unsigned char *a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  id v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8(v5);
  return Tab.init<>(content:systemItem:)((uint64_t)v7, a2, a3);
}

uint64_t specialized ContiguousArray.init()()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)(uint64_t a1)
{
  return specialized ContiguousArray.reserveCapacity(_:)(a1, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray.reserveCapacity(_:)(a1, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray.reserveCapacity(_:)(a1, (uint64_t (*)(void))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v4;
  if (!result || a1 > *(void *)(v4 + 24) >> 1)
  {
    return a2();
  }
  return result;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1);
}

{
  uint64_t result;

  if (a1 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return MEMORY[0x1F4184EC8]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(void, uint64_t, uint64_t))
{
  uint64_t v2 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v2;
  if ((result & 1) == 0)
  {
    uint64_t v4 = *(void *)(v2 + 16) + 1;
    return a1(0, v4, 1);
  }
  return result;
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1)) {
    return a2(v3 > 1);
  }
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 16) = a1 + 1;
  return outlined init with take of TabEntry(a2, v3 + 272 * a1 + 32);
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = result + 1;
  uint64_t v5 = v4 + 16 * result;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = *v4;
  *(void *)(v5 + 16) = result + 1;
  uint64_t v6 = v5 + 24 * result;
  *(void *)(v6 + 32) = a2;
  *(void *)(v6 + 40) = a3;
  *(unsigned char *)(v6 + 48) = a4 & 1;
  return result;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, void *a4, void (*a5)(void), uint64_t a6, uint64_t a7, uint64_t (*a8)(void, uint64_t, uint64_t))
{
  char v12 = result;
  if (a3)
  {
    unint64_t v13 = a4[3];
    int64_t v14 = v13 >> 1;
    if ((uint64_t)(v13 >> 1) < a2)
    {
      if (v14 + 0x4000000000000000 < 0)
      {
LABEL_30:
        __break(1u);
        return result;
      }
      int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v14 = a2;
      }
    }
  }
  else
  {
    int64_t v14 = a2;
  }
  uint64_t v15 = a4[2];
  if (v14 <= v15) {
    uint64_t v16 = a4[2];
  }
  else {
    uint64_t v16 = v14;
  }
  if (!v16)
  {
    uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  a5(0);
  uint64_t v17 = *(void *)(a8(0, a6, a7) - 8);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = (void *)swift_allocObject();
  uint64_t result = _swift_stdlib_malloc_size_2(v20);
  if (!v18)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (result - v19 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_29;
  }
  void v20[2] = v15;
  void v20[3] = 2 * ((uint64_t)(result - v19) / v18);
LABEL_19:
  uint64_t v22 = *(void *)(a8(0, a6, a7) - 8);
  if (v12)
  {
    if (v20 < a4
      || (unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80),
          (char *)v20 + v23 >= (char *)a4 + v23 + *(void *)(v22 + 72) * v15))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v20 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (size_t)v20;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, void (*a5)(void))
{
  char v6 = (char)result;
  if (a3)
  {
    unint64_t v7 = *((void *)a4 + 3);
    int64_t v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v8 = a2;
      }
    }
  }
  else
  {
    int64_t v8 = a2;
  }
  uint64_t v9 = *((void *)a4 + 2);
  if (v8 <= v9) {
    uint64_t v10 = *((void *)a4 + 2);
  }
  else {
    uint64_t v10 = v8;
  }
  if (v10)
  {
    a5(0);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = _swift_stdlib_malloc_size_2(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (v6)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9]) {
      memmove(v14, v15, 4 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 4 * v9);
  }
  swift_release();
  return v11;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, void (*a5)(void), unint64_t *a6, uint64_t a7)
{
  char v10 = (char)result;
  if (a3)
  {
    unint64_t v11 = a4[3];
    int64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v12 = a2;
      }
    }
  }
  else
  {
    int64_t v12 = a2;
  }
  uint64_t v13 = a4[2];
  if (v12 <= v13) {
    uint64_t v14 = a4[2];
  }
  else {
    uint64_t v14 = v12;
  }
  if (v14)
  {
    a5(0);
    uint64_t v15 = (void *)swift_allocObject();
    int64_t v16 = _swift_stdlib_malloc_size_2(v15);
    uint64_t v17 = v16 - 32;
    if (v16 < 32) {
      uint64_t v17 = v16 - 25;
    }
    _OWORD v15[2] = v13;
    uint64_t v15[3] = 2 * (v17 >> 3);
  }
  else
  {
    uint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v10)
  {
    if (v15 != a4 || v15 + 4 >= &a4[v13 + 4]) {
      memmove(v15 + 4, a4 + 4, 8 * v13);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for [TabCustomizationID](0, a6, a7, MEMORY[0x1E4FBB320]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v15;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, void (*a5)(void), unint64_t *a6, uint64_t a7, uint64_t a8)
{
  char v12 = (char)result;
  if (a3)
  {
    unint64_t v13 = a4[3];
    int64_t v14 = v13 >> 1;
    if ((uint64_t)(v13 >> 1) < a2)
    {
      if (v14 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v14 = a2;
      }
    }
  }
  else
  {
    int64_t v14 = a2;
  }
  uint64_t v15 = a4[2];
  if (v14 <= v15) {
    uint64_t v16 = a4[2];
  }
  else {
    uint64_t v16 = v14;
  }
  if (v16)
  {
    a5(0);
    uint64_t v17 = (void *)swift_allocObject();
    int64_t v18 = _swift_stdlib_malloc_size_2(v17);
    uint64_t v19 = v18 - 32;
    if (v18 < 32) {
      uint64_t v19 = v18 - 1;
    }
    _OWORD v17[2] = v15;
    void v17[3] = 2 * (v19 >> 5);
  }
  else
  {
    uint64_t v17 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v12)
  {
    if (v17 != a4 || v17 + 4 >= &a4[4 * v15 + 4]) {
      memmove(v17 + 4, a4 + 4, 32 * v15);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for TransformBox<TabSidebarCustomizationTransform>(0, a6, a7, a8, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BackgroundTaskEntry);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v17;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3, void *a4)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, MEMORY[0x1E4F27DE8], MEMORY[0x1E4F27DE8]);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ToolbarStorage.Entry, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (ToolbarStorage.Entry, Int), (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, a5, a6, MEMORY[0x1E4FBBE00]);
    char v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size_2(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 17;
    }
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    char v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v15 = v12 + 32;
  uint64_t v16 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v15 >= &v16[16 * v10]) {
      memmove(v15, v16, 16 * v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v15, v16, 16 * v10);
  }
  swift_release();
  return v12;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(void, uint64_t, uint64_t, uint64_t))
{
  char v9 = (char)result;
  if (a3)
  {
    unint64_t v10 = *((void *)a4 + 3);
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = *((void *)a4 + 2);
  if (v11 <= v12) {
    uint64_t v13 = *((void *)a4 + 2);
  }
  else {
    uint64_t v13 = v11;
  }
  if (v13)
  {
    a8(0, a5, a6, a7);
    uint64_t v14 = (char *)swift_allocObject();
    size_t v15 = _swift_stdlib_malloc_size_2(v14);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    uint64_t v14 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v16 = v14 + 32;
  uint64_t v17 = a4 + 32;
  size_t v18 = 40 * v12;
  if (v9)
  {
    if (v14 != a4 || v16 >= &v17[v18]) {
      memmove(v16, v17, v18);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v16, v17, v18);
  }
  swift_release();
  return v14;
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), void (*a7)(void))
{
  char v9 = (char)result;
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (v13)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, a5, a6, MEMORY[0x1E4FBBE00]);
    uint64_t v14 = (void *)swift_allocObject();
    int64_t v15 = _swift_stdlib_malloc_size_2(v14);
    uint64_t v16 = v15 - 32;
    if (v15 < 32) {
      uint64_t v16 = v15 - 25;
    }
    _OWORD v14[2] = v12;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    uint64_t v14 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v9)
  {
    if (v14 < a4 || v14 + 4 >= &a4[v12 + 4])
    {
      a7(0);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v14 != a4)
    {
      a7(0);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    a7(0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v14;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v12 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v12;
    }
    outlined destroy of AnyHashable(*(void *)(v11 + 48) + 40 * v6);
    *(void *)a2 = *(void *)(*(void *)(v11 + 56) + 8 * v6);
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *uint64_t v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t vars8;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v9 = *v3;
    uint64_t v19 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      char v9 = v19;
    }

    unint64_t v10 = *(void *)(v9 + 56);
    uint64_t v11 = type metadata accessor for CommandOperation();
    size_t v18 = *(void *)(v11 - 8);
    outlined init with take of TabSidebarCustomization(v10 + *(void *)(v18 + 72) * v6, a2, (uint64_t (*)(void))type metadata accessor for CommandOperation);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56);
    uint64_t v13 = a2;
    uint64_t v14 = 0;
    int64_t v15 = v11;
  }
  else
  {
    uint64_t v16 = type metadata accessor for CommandOperation();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    int64_t v15 = v16;
    uint64_t v13 = a2;
    uint64_t v14 = 1;
  }

  return v12(v13, v14, 1, v15);
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    uint64_t v19 = v8;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v20;
    }

    uint64_t v12 = (uint64_t *)(*(void *)(v11 + 56) + 48 * v6);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    int64_t v15 = v12[2];
    uint64_t v16 = v12[3];
    size_t v18 = v12[4];
    uint64_t v17 = v12[5];
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *uint64_t v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
    char v8 = v19;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    int64_t v15 = 0;
    uint64_t v16 = 0;
    size_t v18 = 0;
    uint64_t v17 = 0;
  }
  *(void *)a2 = v13;
  *(void *)(a2 + 8) = v14;
  *(void *)(a2 + 16) = v15;
  *(void *)(a2 + 24) = v16;
  *(void *)(a2 + 32) = v18;
  *(void *)(a2 + 40) = v17;
  *(unsigned char *)(a2 + 48) = (v8 & 1) == 0;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  char v8 = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (v8)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v3;
    uint64_t v12 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v12;
    }
    outlined destroy of IdentifiedDocumentGroupConfiguration(*(void *)(v11 + 48) + (v6 << 7));
    _s7SwiftUI7WeakBoxVyyXlGWObTm_0(*(void *)(v11 + 56) + 8 * v6, a2, (uint64_t)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t)type metadata accessor for PlatformDocument, MEMORY[0x1E4F41720], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<TabSidebarCustomization>?);
    specialized _NativeDictionary._delete(at:)(v6, v11);
    *uint64_t v3 = v11;
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = (v8 & 1) == 0;
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2, char a3)
{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized __RawDictionaryStorage.find<A>(_:), (void (*)(void, void, void))outlined consume of SceneID, (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
}

{
  return specialized Dictionary._Variant.removeValue(forKey:)(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized __RawDictionaryStorage.find<A>(_:), (void (*)(void, void, void))outlined consume of TabCustomizationID.Base, (void (*)(uint64_t, uint64_t))specialized _NativeDictionary._delete(at:), (void (*)(void))specialized _NativeDictionary.copy());
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  uint64_t result = swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v10 = v11;
    }
    outlined destroy of TabViewCustomizationModifier(*(void *)(v10 + 48) + 16 * v6, (uint64_t (*)(void))type metadata accessor for HashableWeakBox<UIViewController>);
    *a2 = *(unsigned char *)(*(void *)(v10 + 56) + v6);
    specialized _NativeDictionary._delete(at:)(v6, v10);
    *uint64_t v3 = v10;
    return swift_bridgeObjectRelease();
  }
  else
  {
    *a2 = 3;
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_bridgeObjectRetain();
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2, a3, a4);
  LOBYTE(a3) = v11;
  swift_bridgeObjectRelease();
  if ((a3 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v5;
  uint64_t v19 = *v5;
  *uint64_t v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(v13 + 48) + 32 * v10;
  uint64_t v15 = *(void *)(v14 + 8);
  uint64_t v16 = *(void *)(v14 + 16);
  swift_release();
  outlined consume of Text.LineStyle?(v15, v16);
  uint64_t v17 = *(void *)(*(void *)(v13 + 56) + 8 * v10);
  specialized _NativeDictionary._delete(at:)(v10, v13);
  *uint64_t v5 = v13;
  swift_bridgeObjectRelease();
  return v17;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 32 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), void (*a5)(void, void, void), void (*a6)(uint64_t, uint64_t), void (*a7)(void))
{
  uint64_t v12 = v7;
  uint64_t v15 = a3 & 1;
  swift_bridgeObjectRetain();
  uint64_t v16 = a4(a1, a2, v15);
  LOBYTE(a2) = v17;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v19 = *v12;
  uint64_t v22 = *v12;
  *uint64_t v12 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    a7();
    uint64_t v19 = v22;
  }
  a5(*(void *)(*(void *)(v19 + 48) + 24 * v16), *(void *)(*(void *)(v19 + 48) + 24 * v16 + 8), *(unsigned __int8 *)(*(void *)(v19 + 48) + 24 * v16 + 16));
  uint64_t v20 = *(void *)(*(void *)(v19 + 56) + 8 * v16);
  a6(v16, v19);
  *uint64_t v12 = v19;
  swift_bridgeObjectRelease();
  return v20;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = *v4;
    uint64_t v13 = *v4;
    *uint64_t v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v11 = v13;
    }
    swift_bridgeObjectRelease();
    outlined init with take of TabEntry(*(void *)(v11 + 56) + 272 * v8, a3);
    specialized _NativeDictionary._delete(at:)(v8, v11);
    *uint64_t v4 = v11;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a3 + 256) = 0;
    double result = 0.0;
    *(_OWORD *)(a3 + 224) = 0u;
    *(_OWORD *)(a3 + 240) = 0u;
    *(_OWORD *)(a3 + 192) = 0u;
    *(_OWORD *)(a3 + 208) = 0u;
    *(_OWORD *)(a3 + 160) = 0u;
    *(_OWORD *)(a3 + 176) = 0u;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(unsigned char *)(a3 + 264) = -1;
  }
  return result;
}

unint64_t specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, PinnedSection>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  unint64_t result = v3 + 64;
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || result >= v2 + 64 + 8 * v7) {
    unint64_t result = (unint64_t)memmove((void *)result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v29 = __clz(__rbit64(v27));
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = v29 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    int v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    unint64_t v18 = v15 << 6;
    uint64_t v19 = (long long *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = *((void *)v19 + 4);
    char v21 = *((unsigned char *)v19 + 40);
    uint64_t v22 = *((void *)v19 + 6);
    unint64_t result = *((unsigned __int8 *)v19 + 56);
    long long v23 = *v19;
    long long v24 = v19[1];
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v25 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)unint64_t v25 = v23;
    *(_OWORD *)(v25 + 16) = v24;
    *(void *)(v25 + 32) = v20;
    *(unsigned char *)(v25 + 40) = v21;
    *(void *)(v25 + 48) = v22;
    *(unsigned char *)(v25 + 56) = result;
  }
  int64_t v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  unint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void specialized _NativeDictionary._delete(at:)(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v39 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v39;
    if ((*(void *)(v39 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      unint64_t v37 = (v11 + 1) & v10;
      unint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v13 = v5 + 16;
      uint64_t v36 = v14;
      uint64_t v15 = *(void *)(v13 + 56);
      uint64_t v38 = v13;
      uint64_t v16 = (void (**)(char *, uint64_t))(v13 - 8);
      do
      {
        int64_t v17 = v15 * v9;
        v36(v7, *(void *)(a2 + 48) + v15 * v9, v4);
        uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v16)(v7, v4);
        unint64_t v19 = v18 & v10;
        if (a1 >= (uint64_t)v37)
        {
          if (v19 >= v37 && a1 >= (uint64_t)v19)
          {
LABEL_17:
            uint64_t v22 = *(void *)(a2 + 48);
            unint64_t v23 = v22 + v15 * a1;
            unint64_t v24 = v22 + v17 + v15;
            if (v15 * a1 < v17 || v23 >= v24)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v17)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            uint64_t v26 = *(void *)(a2 + 56);
            unint64_t v27 = (_OWORD *)(v26 + 32 * a1);
            int64_t v28 = (_OWORD *)(v26 + 32 * v9);
            uint64_t v12 = v39;
            if (a1 != v9 || (a1 = v9, v27 >= v28 + 2))
            {
              long long v29 = v28[1];
              *unint64_t v27 = *v28;
              v27[1] = v29;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v37 || a1 >= (uint64_t)v19)
        {
          goto LABEL_17;
        }
        uint64_t v12 = v39;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    uint64_t v30 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v31 = *v30;
    uint64_t v32 = (-1 << a1) - 1;
  }
  else
  {
    uint64_t v30 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v30;
    uint64_t v31 = (-1 << a1) - 1;
  }
  *uint64_t v30 = v32 & v31;
  uint64_t v33 = *(void *)(a2 + 16);
  BOOL v34 = __OFSUB__(v33, 1);
  uint64_t v35 = v33 - 1;
  if (v34)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v35;
    ++*(_DWORD *)(a2 + 36);
  }
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (**v13)(char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;

  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1 << v9) & *(void *)(a2 + 64 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v10 = ~v8;
    uint64_t v33 = a2 + 64;
    uint64_t v11 = _HashTable.previousHole(before:)();
    uint64_t v12 = v33;
    if ((*(void *)(v33 + 8 * (v9 >> 6)) & (1 << v9)) != 0)
    {
      uint64_t v30 = (v11 + 1) & v10;
      uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v32 = v5 + 16;
      uint64_t v13 = (void (**)(char *, uint64_t))(v5 + 8);
      unint64_t v14 = *(void *)(v5 + 72);
      do
      {
        uint64_t v15 = v14;
        uint64_t v16 = v14 * v9;
        v31(v7, *(void *)(a2 + 48) + v14 * v9, v4);
        lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        int64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*v13)(v7, v4);
        uint64_t v18 = v17 & v10;
        if (a1 >= (uint64_t)v30)
        {
          if (v18 >= v30 && a1 >= (uint64_t)v18)
          {
LABEL_16:
            unint64_t v14 = v15;
            if (v15 * a1 < v16
              || *(void *)(a2 + 48) + v15 * a1 >= (unint64_t)(*(void *)(a2 + 48) + v16 + v15))
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v15 * a1 != v16)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            char v21 = *(void *)(a2 + 56);
            uint64_t v22 = (_OWORD *)(v21 + 16 * a1);
            unint64_t v23 = (_OWORD *)(v21 + 16 * v9);
            uint64_t v12 = v33;
            if (a1 != v9 || (a1 = v9, v22 >= v23 + 1))
            {
              *uint64_t v22 = *v23;
              a1 = v9;
            }
            goto LABEL_5;
          }
        }
        else if (v18 >= v30 || a1 >= (uint64_t)v18)
        {
          goto LABEL_16;
        }
        uint64_t v12 = v33;
        unint64_t v14 = v15;
LABEL_5:
        unint64_t v9 = (v9 + 1) & v10;
      }
      while (((*(void *)(v12 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
    }
    unint64_t v24 = (uint64_t *)(v12 + 8 * ((unint64_t)a1 >> 6));
    unint64_t v25 = *v24;
    uint64_t v26 = (-1 << a1) - 1;
  }
  else
  {
    unint64_t v24 = (uint64_t *)(a2 + 64 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v26 = *v24;
    unint64_t v25 = (-1 << a1) - 1;
  }
  *unint64_t v24 = v26 & v25;
  unint64_t v27 = *(void *)(a2 + 16);
  int64_t v28 = __OFSUB__(v27, 1);
  long long v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
}

void specialized Array<A>.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (unsigned __int8 *)(a2 + 48);
    do
    {
      unsigned int v5 = *v4;
      v4 += 24;
      Hasher._combine(_:)(v5);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      outlined consume of TabCustomizationID.Base();
      --v3;
    }
    while (v3);
  }
}

{
  Swift::UInt v3;
  Swift::UInt32 *v4;
  Swift::UInt32 v5;
  Swift::UInt32 v6;
  Swift::UInt32 v7;

  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt32 *)(a2 + 32);
    do
    {
      uint64_t v6 = *v4++;
      unsigned int v5 = v6;
      if ((v6 & 0x7FFFFFFF) != 0) {
        unint64_t v7 = v5;
      }
      else {
        unint64_t v7 = 0;
      }
      Hasher._combine(_:)(v7);
      --v3;
    }
    while (v3);
  }
}

unint64_t lazy protocol witness table accessor for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabSidebarCustomization.CodingKeys and conformance TabSidebarCustomization.CodingKeys);
  }
  return result;
}

uint64_t outlined assign with take of TabViewCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TabViewCustomization();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys;
  if (!lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabGroupCustomizationEntry.CodingKeys and conformance TabGroupCustomizationEntry.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [TabCustomizationID] and conformance <A> [A](unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for [TabCustomizationID](255, &lazy cache variable for type metadata for [TabCustomizationID], (uint64_t)&type metadata for TabCustomizationID, MEMORY[0x1E4FBB320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> AuxiliaryContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> AuxiliaryContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for <> AuxiliaryContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> TabGroup<A, B, C, D>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent.TabValue : Hashable in <> TabGroup<A, B, C, D>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> TabGroup<A, B, C, D>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for <> TabGroup<A, B, C, D>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type TabGroupCustomizationEntry and conformance TabGroupCustomizationEntry()
{
  unint64_t result = lazy protocol witness table cache variable for type TabGroupCustomizationEntry and conformance TabGroupCustomizationEntry;
  if (!lazy protocol witness table cache variable for type TabGroupCustomizationEntry and conformance TabGroupCustomizationEntry)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabGroupCustomizationEntry and conformance TabGroupCustomizationEntry);
  }
  return result;
}

uint64_t sub_187AFB9F0@<X0>(uint64_t *a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t result = TabSidebarCustomization.subscript.getter(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_187AFBA20(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  unsigned __int8 v5 = *a1;
  swift_bridgeObjectRetain();
  return TabViewCustomization.subscript.setter(v5, v3, v4, 0);
}

uint64_t sub_187AFBA6C()
{
  return 0;
}

uint64_t sub_187AFBA7C@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t result = TabSidebarCustomization.subscript.getter(*a1, a1[1], &v4);
  *a2 = v4;
  return result;
}

uint64_t sub_187AFBAC0()
{
  return 0;
}

uint64_t type metadata completion function for AuxiliaryContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AuxiliaryContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for AuxiliaryContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187AFBED4);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for AuxiliaryContent()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for AdaptiveTabViewStyle()
{
  return &type metadata for AdaptiveTabViewStyle;
}

uint64_t type metadata completion function for TabGroup()
{
  uint64_t result = type metadata accessor for TabSection();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TabGroup(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = a3[4];
  uint64_t v8 = *(void *)(a3[3] - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9) & ~v9;
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = *(void *)(v7 - 8);
  uint64_t v14 = *(_DWORD *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  unint64_t v16 = ((v12 + v14 + v11) & ~v14) + *(void *)(v13 + 64);
  uint64_t v17 = (*(unsigned char *)(v8 + 80) | *(unsigned char *)(v5 + 80) | *(unsigned char *)(v13 + 80));
  if (v17 <= 7
    && v16 <= 0x18
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80) | *(_DWORD *)(v13 + 80)) & 0x100000) == 0)
  {
    uint64_t v21 = ~v9;
    uint64_t v22 = ~v14;
    uint64_t v25 = a3[3];
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v23 = ((unint64_t)a2 + v10) & v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v21, v23, v25);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 16))(((((unint64_t)v4 + v10) & v21) + v15) & v22, (v23 + v15) & v22, v7);
  }
  else
  {
    uint64_t v20 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v20 + ((v17 + 16) & ~v17));
    swift_retain();
  }
  return v4;
}

uint64_t destroy for TabGroup(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(a2[4] - 8);
  uint64_t v10 = *(uint64_t (**)(unint64_t))(v9 + 8);
  unint64_t v11 = (v8 + *(void *)(v7 + 56) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);

  return v10(v11);
}

uint64_t initializeWithCopy for TabGroup(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 16))((*(void *)(v8 + 48) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 48) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t assignWithCopy for TabGroup(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 40) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 24))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))((*(void *)(v8 + 40) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 40) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t initializeWithTake for TabGroup(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 32))((*(void *)(v8 + 32) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t assignWithTake for TabGroup(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(a3[4] - 8);
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))((*(void *)(v8 + 24) + *(unsigned __int8 *)(v13 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80), (*(void *)(v8 + 24) + *(unsigned __int8 *)(v13 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TabGroup(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8 <= v6) {
    unsigned int v9 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v9 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v10 = a3[4];
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v16 = v9;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v11 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v13;
  int v18 = a2 - v16;
  if (a2 <= v16) {
    goto LABEL_27;
  }
  uint64_t v19 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(void *)(*(void *)(v10 - 8) + 64);
  char v20 = 8 * v19;
  if (v19 <= 3)
  {
    unsigned int v22 = ((v18 + ~(-1 << v20)) >> v20) + 1;
    if (HIWORD(v22))
    {
      int v21 = *(_DWORD *)((char *)a1 + v19);
      if (!v21) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 > 0xFF)
    {
      int v21 = *(unsigned __int16 *)((char *)a1 + v19);
      if (!*(unsigned __int16 *)((char *)a1 + v19)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v22 < 2)
    {
LABEL_27:
      if (v16)
      {
        if (v6 == v16)
        {
          uint64_t v26 = *(uint64_t (**)(void))(v5 + 48);
          return v26();
        }
        else
        {
          unint64_t v28 = ((unint64_t)a1 + v17) & ~v13;
          if (v8 == v16)
          {
            long long v29 = *(uint64_t (**)(unint64_t))(v7 + 48);
            return v29(v28);
          }
          else
          {
            unint64_t v30 = (v28 + v14 + v15) & ~v15;
            uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48);
            return v31(v30, v12, v10);
          }
        }
      }
      return 0;
    }
  }
  int v21 = *((unsigned __int8 *)a1 + v19);
  if (!*((unsigned char *)a1 + v19)) {
    goto LABEL_27;
  }
LABEL_17:
  int v23 = (v21 - 1) << v20;
  if (v19 > 3) {
    int v23 = 0;
  }
  if (v19)
  {
    if (v19 <= 3) {
      int v24 = ((v14 + v15 + (v17 & ~v13)) & ~v15) + *(_DWORD *)(*(void *)(v10 - 8) + 64);
    }
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v16 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for TabGroup(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  if (*(_DWORD *)(v13 + 84) <= v12) {
    unsigned int v17 = v12;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v13 + 84);
  }
  uint64_t v18 = *(void *)(*(void *)(a4[2] - 8) + 64) + v14;
  size_t v19 = ((v15 + v16 + (v18 & ~v14)) & ~v16) + *(void *)(*(void *)(v9 - 8) + 64);
  BOOL v20 = a3 >= v17;
  unsigned int v21 = a3 - v17;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v17 < a2)
  {
    unsigned int v23 = ~v17 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x187AFCCF8);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (!a2) {
        return;
      }
LABEL_27:
      if (v7 == v17)
      {
        unint64_t v28 = *(void (**)(char *))(v6 + 56);
        long long v29 = a1;
LABEL_30:
        v28(v29);
        return;
      }
      unint64_t v30 = (unint64_t)&a1[v18] & v25;
      if (v11 != v17)
      {
        long long v29 = (char *)((v30 + v15 + v16) & ~v16);
        unint64_t v28 = *(void (**)(char *))(v13 + 56);
        goto LABEL_30;
      }
      uint64_t v31 = *(void (**)(unint64_t))(v10 + 56);
      v31(v30);
      return;
  }
}

uint64_t type metadata accessor for TabGroup()
{
  return swift_getGenericMetadata();
}

uint64_t *initializeBufferWithCopyOfBuffer for TabSidebarCustomization(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for TabViewCustomization();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 20));
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 24));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TabSidebarCustomization(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for TabViewCustomization();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TabSidebarCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for TabViewCustomization();
  *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
  *(void *)(a1 + *(int *)(v5 + 24)) = *(void *)(a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TabSidebarCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for TabViewCustomization();
  *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(v5 + 24)) = *(void *)(a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TabSidebarCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for TabViewCustomization();
  *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
  *(void *)(a1 + *(int *)(v5 + 24)) = *(void *)(a2 + *(int *)(v5 + 24));
  return a1;
}

uint64_t assignWithTake for TabSidebarCustomization(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for TabViewCustomization();
  *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
  swift_bridgeObjectRelease();
  *(void *)(a1 + *(int *)(v5 + 24)) = *(void *)(a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TabSidebarCustomization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187AFD128);
}

uint64_t sub_187AFD128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TabViewCustomization();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TabSidebarCustomization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187AFD1A8);
}

uint64_t sub_187AFD1A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TabViewCustomization();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for TabSidebarCustomization()
{
  uint64_t result = type metadata accessor for TabViewCustomization();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabGroupCustomizationEntry()
{
  return &type metadata for TabGroupCustomizationEntry;
}

ValueMetadata *type metadata accessor for TabViewContentDisplayMode()
{
  return &type metadata for TabViewContentDisplayMode;
}

ValueMetadata *type metadata accessor for TabItemKind()
{
  return &type metadata for TabItemKind;
}

uint64_t sub_187AFD2D8()
{
  type metadata accessor for TabSectionActions();

  return swift_getWitnessTable();
}

uint64_t sub_187AFD324()
{
  return swift_getWitnessTable();
}

uint64_t sub_187AFD38C(uint64_t a1)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA07DefaultC18VisibilityModifierVGAaBHPxAaBHD1__AfA04ViewH0HPyHCHCTm(a1, (uint64_t)&type metadata for DefaultTabVisibilityModifier, (void (*)(void))lazy protocol witness table accessor for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier);
}

unint64_t lazy protocol witness table accessor for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier;
  if (!lazy protocol witness table cache variable for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultTabVisibilityModifier and conformance DefaultTabVisibilityModifier);
  }
  return result;
}

uint64_t sub_187AFD400()
{
  return swift_getWitnessTable();
}

uint64_t sub_187AFD45C(uint64_t a1)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA07DefaultC18VisibilityModifierVGAaBHPxAaBHD1__AfA04ViewH0HPyHCHCTm(a1, (uint64_t)&type metadata for CustomizationBehaviorModifier, (void (*)(void))lazy protocol witness table accessor for type CustomizationBehaviorModifier and conformance CustomizationBehaviorModifier);
}

uint64_t sub_187AFD47C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187AFD4E8(uint64_t a1)
{
  return get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA07DefaultC18VisibilityModifierVGAaBHPxAaBHD1__AfA04ViewH0HPyHCHCTm(a1, (uint64_t)&type metadata for TabPlacementModifier, (void (*)(void))lazy protocol witness table accessor for type TabPlacementModifier and conformance TabPlacementModifier);
}

uint64_t get_witness_table_7SwiftUI10TabContentRzlAA08ModifiedcD0VyxAA07DefaultC18VisibilityModifierVGAaBHPxAaBHD1__AfA04ViewH0HPyHCHCTm(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type TabPlacementModifier and conformance TabPlacementModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type TabPlacementModifier and conformance TabPlacementModifier;
  if (!lazy protocol witness table cache variable for type TabPlacementModifier and conformance TabPlacementModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabPlacementModifier and conformance TabPlacementModifier);
  }
  return result;
}

uint64_t sub_187AFD5CC()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for TabItemKind.Item()
{
  return &type metadata for TabItemKind.Item;
}

ValueMetadata *type metadata accessor for TabViewContentDisplayMode.ContentMode()
{
  return &type metadata for TabViewContentDisplayMode.ContentMode;
}

unsigned char *storeEnumTagSinglePayload for TabViewContentDisplayMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187AFD720);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}